==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x6 $x12)))
 (let (($x17 (and $x11 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x6 $x12)))
 (let (($x17 (and $x11 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv1661363587 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3191897543 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x467 (= true false)))
 (let (($x468 (= $x467 true)))
 (let ((?x451 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x453 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x460 (concat ?x459 (concat ?x456 (concat ?x453 ?x451)))))
 (let (($x461 (= ?x460 input.dst.llvm-%m2)))
 (let (($x462 (= $x461 true)))
 (let (($x463 (= $x462 true)))
 (let ((?x436 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x438 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x444 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x445 (concat ?x444 (concat ?x441 (concat ?x438 ?x436)))))
 (let (($x446 (= ?x445 input.dst.llvm-%m1)))
 (let (($x447 (= $x446 true)))
 (let (($x448 (= $x447 true)))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x314 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x420))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 ?x426))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 $x295))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (=> $x22 $x66)))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 $x283))))))
 ))
 (let (($x390 (and $x389 $x56)))
 (let (($x400 (and $x390 $x399)))
 (let (($x430 (and $x400 $x429)))
 (let (($x431 (= $x430 true)))
 (let (($x432 (= $x431 true)))
 (let (($x433 (= $x432 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x315 (bvadd ?x314 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x319))))
 (let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 ?x325))))))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 $x295))))))
 ))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (=> $x123 $x66)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 $x283))))))
 ))
 (let (($x286 (and $x285 $x128)))
 (let (($x298 (and $x286 $x297)))
 (let (($x329 (and $x298 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let ((?x197 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x198 (= (_ bv0 32) ?x197)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (and $x187 $x190)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x186 $x191)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x176 $x177)))
 (let (($x179 (not $x178)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x173 $x174)))
 (let (($x181 (and (not $x175) $x179)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x167 $x168)))
 (let (($x170 (not $x169)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x162 $x164)))
 (let (($x172 (and (not $x165) $x170)))
 (let (($x204 (and (and (and (and (and (and $x172 $x181) $x183) $x185) $x192) $x194) $x196)))
 (let (($x205 (and $x204 $x198)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x333 (and $x208 $x332)))
 (let (($x434 (and $x333 $x433)))
 (let (($x449 (and $x434 $x448)))
 (let (($x464 (and $x449 $x463)))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 (bvuge ?x119 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 (= ?x119 (_ bv0 32)))))))
 ))
 (let (($x129 (and $x125 $x128)))
 (let (($x145 (and $x129 $x144)))
 (let (($x159 (and $x145 $x158)))
 (let (($x465 (and $x159 $x464)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 (bvuge ?x73 (_ bv1 32)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 (= ?x73 (_ bv0 32)))))))
 ))
 (let (($x47 (and $x34 $x56)))
 (let (($x42 (and $x47 $x28)))
 (let (($x84 (and $x42 $x83)))
 (let (($x466 (and $x84 $x465)))
 (let (($x469 (=> $x466 $x468)))
 (not $x469))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x467 (= true false)))
 (let (($x468 (= $x467 true)))
 (let ((?x451 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x453 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x460 (concat ?x459 (concat ?x456 (concat ?x453 ?x451)))))
 (let (($x461 (= ?x460 input.dst.llvm-%m2)))
 (let (($x462 (= $x461 true)))
 (let (($x463 (= $x462 true)))
 (let ((?x436 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x438 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x444 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x445 (concat ?x444 (concat ?x441 (concat ?x438 ?x436)))))
 (let (($x446 (= ?x445 input.dst.llvm-%m1)))
 (let (($x447 (= $x446 true)))
 (let (($x448 (= $x447 true)))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x314 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x420))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 ?x426))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 $x295))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (=> $x22 $x66)))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 $x283))))))
 ))
 (let (($x390 (and $x389 $x56)))
 (let (($x400 (and $x390 $x399)))
 (let (($x430 (and $x400 $x429)))
 (let (($x431 (= $x430 true)))
 (let (($x432 (= $x431 true)))
 (let (($x433 (= $x432 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x315 (bvadd ?x314 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x319))))
 (let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 ?x325))))))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 $x295))))))
 ))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (=> $x123 $x66)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 $x283))))))
 ))
 (let (($x286 (and $x285 $x128)))
 (let (($x298 (and $x286 $x297)))
 (let (($x329 (and $x298 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let ((?x197 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x198 (= (_ bv0 32) ?x197)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (and $x187 $x190)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x186 $x191)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x176 $x177)))
 (let (($x179 (not $x178)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x173 $x174)))
 (let (($x181 (and (not $x175) $x179)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x167 $x168)))
 (let (($x170 (not $x169)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x162 $x164)))
 (let (($x172 (and (not $x165) $x170)))
 (let (($x204 (and (and (and (and (and (and $x172 $x181) $x183) $x185) $x192) $x194) $x196)))
 (let (($x205 (and $x204 $x198)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x333 (and $x208 $x332)))
 (let (($x434 (and $x333 $x433)))
 (let (($x449 (and $x434 $x448)))
 (let (($x464 (and $x449 $x463)))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 (bvuge ?x119 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 (= ?x119 (_ bv0 32)))))))
 ))
 (let (($x129 (and $x125 $x128)))
 (let (($x145 (and $x129 $x144)))
 (let (($x159 (and $x145 $x158)))
 (let (($x465 (and $x159 $x464)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 (bvuge ?x73 (_ bv1 32)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 (= ?x73 (_ bv0 32)))))))
 ))
 (let (($x47 (and $x34 $x56)))
 (let (($x42 (and $x47 $x28)))
 (let (($x84 (and $x42 $x83)))
 (let (($x466 (and $x84 $x465)))
 (let (($x469 (=> $x466 $x468)))
 (not $x469))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x2c9dffed)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x98008000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00080001) #x80
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x00000006) #x9d
    (ite (= x!0 #x00080003) #x98
    (ite (= x!0 #x00000007) #x2c
    (ite (= x!0 #x00000004) #xed
      #x00)))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8117e448)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdaddd4a4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x3fbf7f98)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfffdfbfc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdaddd4a7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8117e44b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdaddd4a4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8117e448)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdaddd4a7) #xff
    (ite (= x!0 #xdaddd4a4) #xfc
    (ite (= x!0 #x8117e449) #x7f
    (ite (= x!0 #x8117e44b) #x3f
    (ite (= x!0 #xdaddd4a6) #xfd
    (ite (= x!0 #xdaddd4a5) #xfb
    (ite (= x!0 #x8117e44a) #xbf
    (ite (= x!0 #x8117e448) #x98
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x131 (= (_ bv0 32) ?x130)))
 (let ((?x278 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x126 (= (_ bv0 32) ?x278)))
 (let ((?x276 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x276)))
 (let ((?x113 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x273 (and $x112 $x274)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x111 $x273)))
 (let (($x464 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x462 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x452 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x451 (and $x452 $x453)))
 (let (($x454 (not $x451)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x459 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x456 (and $x459 $x455)))
 (let (($x460 (and (not $x456) $x454)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x445 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x447 (and $x445 $x446)))
 (let (($x448 (not $x447)))
 (let (($x436 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x439 (and $x437 $x436)))
 (let (($x458 (and (not $x439) $x448)))
 (let (($x57 (and (and (and (and (and (and $x458 $x460) $x462) $x464) $x275) $x277) $x126)))
 (let (($x29 (and $x57 $x131)))
 (let (($x471 (= $x29 true)))
 (let (($x472 (= $x471 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x149 (concat ?x139 (concat ?x135 ?x117)))))
 (let (($x152 (= input.dst.llvm-%m2 ?x151)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x110 (concat ?x107 (concat ?x103 ?x105)))))
 (let (($x115 (= input.dst.llvm-%m1 ?x114)))
 (let (($x153 (and $x115 $x152)))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x401 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x412))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 ?x407))))))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 $x245))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (=> $x123 $x175)))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 $x235))))))
 ))
 (let (($x380 (and $x377 $x174)))
 (let (($x387 (and $x380 $x12)))
 (let (($x414 (and $x387 $x60)))
 (let (($x15 (and $x414 $x153)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x265 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x259))))
 (let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 ?x269))))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 $x245))))))
 ))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (=> $x320 $x175)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 $x235))))))
 ))
 (let (($x238 (and $x237 $x319)))
 (let (($x89 (and $x238 $x92)))
 (let (($x272 (and $x89 $x271)))
 (let (($x444 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x433 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x11 (and (and (and (and (and (and $x433 $x444) $x458) $x460) $x462) $x464) $x272)))
 (let (($x77 (and (and (and (and (and $x11 $x275) $x277) $x126) $x131) $x15)))
 (let (($x18 (= $x77 true)))
 (let (($x23 (= $x18 true)))
 (let (($x74 (= $x23 true)))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 (bvuge ?x315 (_ bv1 32)))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 (= ?x315 (_ bv0 32)))))))
 ))
 (let (($x322 (and $x317 $x319)))
 (let (($x334 (and $x322 $x400)))
 (let (($x429 (and $x334 $x428)))
 (let (($x8 (and $x429 $x74)))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 (bvuge ?x282 (_ bv1 32)))))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 (= ?x282 (_ bv0 32)))))))
 ))
 (let (($x178 (and $x80 $x174)))
 (let (($x155 (and $x178 $x124)))
 (let (($x183 (and $x155 $x202)))
 (let (($x41 (and $x183 $x8)))
 (let (($x473 (=> $x41 $x472)))
 (not $x473))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x131 (= (_ bv0 32) ?x130)))
 (let ((?x278 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x126 (= (_ bv0 32) ?x278)))
 (let ((?x276 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x276)))
 (let ((?x113 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x273 (and $x112 $x274)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x111 $x273)))
 (let (($x464 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x462 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x452 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x451 (and $x452 $x453)))
 (let (($x454 (not $x451)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x459 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x456 (and $x459 $x455)))
 (let (($x460 (and (not $x456) $x454)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x445 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x447 (and $x445 $x446)))
 (let (($x448 (not $x447)))
 (let (($x436 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x439 (and $x437 $x436)))
 (let (($x458 (and (not $x439) $x448)))
 (let (($x57 (and (and (and (and (and (and $x458 $x460) $x462) $x464) $x275) $x277) $x126)))
 (let (($x29 (and $x57 $x131)))
 (let (($x471 (= $x29 true)))
 (let (($x472 (= $x471 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x149 (concat ?x139 (concat ?x135 ?x117)))))
 (let (($x152 (= input.dst.llvm-%m2 ?x151)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x110 (concat ?x107 (concat ?x103 ?x105)))))
 (let (($x115 (= input.dst.llvm-%m1 ?x114)))
 (let (($x153 (and $x115 $x152)))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x401 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x412))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 ?x407))))))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 $x245))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (=> $x123 $x175)))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 $x235))))))
 ))
 (let (($x380 (and $x377 $x174)))
 (let (($x387 (and $x380 $x12)))
 (let (($x414 (and $x387 $x60)))
 (let (($x15 (and $x414 $x153)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x265 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x259))))
 (let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 ?x269))))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 $x245))))))
 ))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (=> $x320 $x175)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 $x235))))))
 ))
 (let (($x238 (and $x237 $x319)))
 (let (($x89 (and $x238 $x92)))
 (let (($x272 (and $x89 $x271)))
 (let (($x444 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x433 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x11 (and (and (and (and (and (and $x433 $x444) $x458) $x460) $x462) $x464) $x272)))
 (let (($x77 (and (and (and (and (and $x11 $x275) $x277) $x126) $x131) $x15)))
 (let (($x18 (= $x77 true)))
 (let (($x23 (= $x18 true)))
 (let (($x74 (= $x23 true)))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 (bvuge ?x315 (_ bv1 32)))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 (= ?x315 (_ bv0 32)))))))
 ))
 (let (($x322 (and $x317 $x319)))
 (let (($x334 (and $x322 $x400)))
 (let (($x429 (and $x334 $x428)))
 (let (($x8 (and $x429 $x74)))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 (bvuge ?x282 (_ bv1 32)))))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 (= ?x282 (_ bv0 32)))))))
 ))
 (let (($x178 (and $x80 $x174)))
 (let (($x155 (and $x178 $x124)))
 (let (($x183 (and $x155 $x202)))
 (let (($x41 (and $x183 $x8)))
 (let (($x473 (=> $x41 $x472)))
 (not $x473))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x144 (= (_ bv1069514648 32) input.dst.llvm-%m2)))
 (let (($x154 (= $x144 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x388 (concat ?x332 (concat ?x329 (concat ?x214 ?x286)))))
 (let (($x389 (= input.dst.llvm-%m2 ?x388)))
 (let ((?x397 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x283 (concat ?x207 (concat ?x206 (concat ?x20 ?x397)))))
 (let (($x284 (= input.dst.llvm-%m1 ?x283)))
 (let (($x425 (and $x284 $x389)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x346 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x59))))
 (let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 ?x394))))))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 $x216))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (=> $x423 $x427)))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 $x7))))))
 ))
 (let (($x368 (and $x71 $x430)))
 (let (($x373 (and $x368 $x372)))
 (let (($x393 (and $x373 $x69)))
 (let (($x421 (and $x393 $x425)))
 (let ((?x221 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x224 (= (_ bv0 32) ?x221)))
 (let ((?x227 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x223 (= (_ bv0 32) ?x227)))
 (let ((?x297 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (and $x229 $x226)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x362 $x295)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x346 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x353))))
 (let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 ?x361))))))))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 $x216))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (=> $x272 $x427)))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 $x7))))))
 ))
 (let (($x210 (and $x212 $x274)))
 (let (($x343 (and $x210 $x435)))
 (let (($x220 (and $x343 $x359)))
 (let (($x43 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x152 $x153)))
 (let (($x77 (not $x15)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x136 $x140)))
 (let (($x23 (and (not $x151) $x77)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x149 $x137)))
 (let (($x134 (not $x139)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x104 $x114)))
 (let (($x117 (and (not $x115) $x134)))
 (let (($x102 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x110 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x159 (and (and (and (and (and (and $x110 $x102) $x117) $x23) $x8) $x43) $x220)))
 (let (($x279 (and (and (and (and (and $x159 $x296) $x222) $x223) $x224) $x421)))
 (let (($x161 (= $x279 true)))
 (let (($x79 (= $x161 true)))
 (let (($x81 (= $x79 true)))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 (bvuge ?x269 (_ bv1 32)))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 (= ?x269 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x111 $x274)))
 (let (($x12 (and $x273 $x6)))
 (let (($x413 (and $x12 $x410)))
 (let (($x82 (and $x413 $x81)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x431 (and $x426 $x430)))
 (let (($x446 (and $x431 $x445)))
 (let (($x78 (and $x446 $x460)))
 (let (($x166 (and $x78 $x82)))
 (let (($x160 (=> $x166 $x154)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x144 (= (_ bv1069514648 32) input.dst.llvm-%m2)))
 (let (($x154 (= $x144 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x388 (concat ?x332 (concat ?x329 (concat ?x214 ?x286)))))
 (let (($x389 (= input.dst.llvm-%m2 ?x388)))
 (let ((?x397 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x283 (concat ?x207 (concat ?x206 (concat ?x20 ?x397)))))
 (let (($x284 (= input.dst.llvm-%m1 ?x283)))
 (let (($x425 (and $x284 $x389)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x346 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x59))))
 (let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 ?x394))))))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 $x216))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (=> $x423 $x427)))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 $x7))))))
 ))
 (let (($x368 (and $x71 $x430)))
 (let (($x373 (and $x368 $x372)))
 (let (($x393 (and $x373 $x69)))
 (let (($x421 (and $x393 $x425)))
 (let ((?x221 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x224 (= (_ bv0 32) ?x221)))
 (let ((?x227 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x223 (= (_ bv0 32) ?x227)))
 (let ((?x297 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (and $x229 $x226)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x362 $x295)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x346 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x353))))
 (let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 ?x361))))))))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 $x216))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (=> $x272 $x427)))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 $x7))))))
 ))
 (let (($x210 (and $x212 $x274)))
 (let (($x343 (and $x210 $x435)))
 (let (($x220 (and $x343 $x359)))
 (let (($x43 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x152 $x153)))
 (let (($x77 (not $x15)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x136 $x140)))
 (let (($x23 (and (not $x151) $x77)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x149 $x137)))
 (let (($x134 (not $x139)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x104 $x114)))
 (let (($x117 (and (not $x115) $x134)))
 (let (($x102 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x110 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x159 (and (and (and (and (and (and $x110 $x102) $x117) $x23) $x8) $x43) $x220)))
 (let (($x279 (and (and (and (and (and $x159 $x296) $x222) $x223) $x224) $x421)))
 (let (($x161 (= $x279 true)))
 (let (($x79 (= $x161 true)))
 (let (($x81 (= $x79 true)))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 (bvuge ?x269 (_ bv1 32)))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 (= ?x269 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x111 $x274)))
 (let (($x12 (and $x273 $x6)))
 (let (($x413 (and $x12 $x410)))
 (let (($x82 (and $x413 $x81)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x431 (and $x426 $x430)))
 (let (($x446 (and $x431 $x445)))
 (let (($x78 (and $x446 $x460)))
 (let (($x166 (and $x78 $x82)))
 (let (($x160 (=> $x166 $x154)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4af602fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x46fa3af8)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfd5ef300)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x46fa3afb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4af602ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x46fa3af8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4af602fc)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x46fa3afb) #xfd
    (ite (= x!0 #x4af602ff) #x04
    (ite (= x!0 #x46fa3afa) #x5e
    (ite (= x!0 #x46fa3af9) #xf3
      #x00)))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x88015508)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00412944)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x880b6c00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00412947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8801550b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00412944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x88015508)
  (define-fun input.spec-%var-m2-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00412944 x!0) #x00412944 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!29 (k!28 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00412944) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00412946) #x0b
    (ite (= x!0 #x00412945) #x6c
    (ite (= x!0 #x00412947) #x88
      #x00))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00412944 x!0) #x00412944 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!30 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!30 (k!27 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00412944) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x456 ((_ extract 8 0) input.dst.llvm-%m2)))
 (let ((?x458 ((_ extract 8 0) input.dst.llvm-%m1)))
 (let ((?x455 (bvmul ?x458 (_ bv26 9))))
 (let (($x457 (= ?x455 ?x456)))
 (let (($x38 (= $x457 true)))
 (let ((?x278 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x403 (concat ?x406 (concat ?x70 ?x278)))))
 (let (($x186 (= input.dst.llvm-%m2 ?x411)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x258 (concat ?x266 (concat ?x264 ?x89)))))
 (let (($x259 (= input.dst.llvm-%m1 ?x261)))
 (let (($x205 (and $x259 $x186)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x281 (bvadd ?x309 input.dst.llvm-%m2)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x120))))
 (let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 ?x384))))))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 $x467))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (=> $x412 $x407)))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 $x466))))))
 ))
 (let (($x9 (and $x35 $x60)))
 (let (($x432 (and $x9 $x428)))
 (let (($x86 (and $x432 $x386)))
 (let (($x201 (and $x86 $x205)))
 (let ((?x276 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x276)))
 (let ((?x275 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x30 (= (_ bv0 32) ?x275)))
 (let ((?x44 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x37 $x76)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x260 $x99)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x309 input.dst.llvm-%m1)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x301))))
 (let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 ?x304))))))))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 $x467))))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (=> $x220 $x407)))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 $x466))))))
 ))
 (let (($x293 (and $x138 $x226)))
 (let (($x232 (and $x293 $x62)))
 (let (($x257 (and $x232 $x98)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x389 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x421 (and $x389 $x425)))
 (let (($x279 (not $x421)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x388 (and $x217 $x330)))
 (let (($x79 (and (not $x388) $x279)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x332 $x314)))
 (let (($x298 (not $x329)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x75 $x283)))
 (let (($x286 (and (not $x284) $x298)))
 (let (($x204 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x207 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x320 (and (and (and (and (and (and $x207 $x204) $x286) $x79) $x82) $x129) $x257)))
 (let (($x444 (and (and (and (and (and $x320 $x100) $x112) $x30) $x277) $x201)))
 (let (($x67 (= $x444 true)))
 (let (($x440 (= $x67 true)))
 (let (($x441 (= $x440 true)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 (bvuge ?x361 (_ bv1 32)))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 (= ?x361 (_ bv0 32)))))))
 ))
 (let (($x295 (and $x362 $x226)))
 (let (($x372 (and $x295 $x376)))
 (let (($x391 (and $x372 $x26)))
 (let (($x438 (and $x391 $x441)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 (bvuge ?x374 (_ bv1 32)))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 (= ?x374 (_ bv0 32)))))))
 ))
 (let (($x414 (and $x405 $x60)))
 (let (($x137 (and $x414 $x149)))
 (let (($x417 (and $x137 $x23)))
 (let (($x436 (and $x417 $x438)))
 (let (($x176 (=> $x436 $x38)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x456 ((_ extract 8 0) input.dst.llvm-%m2)))
 (let ((?x458 ((_ extract 8 0) input.dst.llvm-%m1)))
 (let ((?x455 (bvmul ?x458 (_ bv26 9))))
 (let (($x457 (= ?x455 ?x456)))
 (let (($x38 (= $x457 true)))
 (let ((?x278 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x403 (concat ?x406 (concat ?x70 ?x278)))))
 (let (($x186 (= input.dst.llvm-%m2 ?x411)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x258 (concat ?x266 (concat ?x264 ?x89)))))
 (let (($x259 (= input.dst.llvm-%m1 ?x261)))
 (let (($x205 (and $x259 $x186)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x281 (bvadd ?x309 input.dst.llvm-%m2)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x120))))
 (let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 ?x384))))))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 $x467))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (=> $x412 $x407)))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 $x466))))))
 ))
 (let (($x9 (and $x35 $x60)))
 (let (($x432 (and $x9 $x428)))
 (let (($x86 (and $x432 $x386)))
 (let (($x201 (and $x86 $x205)))
 (let ((?x276 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x276)))
 (let ((?x275 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x30 (= (_ bv0 32) ?x275)))
 (let ((?x44 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x37 $x76)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x260 $x99)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x309 input.dst.llvm-%m1)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x301))))
 (let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 ?x304))))))))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 $x467))))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (=> $x220 $x407)))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 $x466))))))
 ))
 (let (($x293 (and $x138 $x226)))
 (let (($x232 (and $x293 $x62)))
 (let (($x257 (and $x232 $x98)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x389 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x421 (and $x389 $x425)))
 (let (($x279 (not $x421)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x388 (and $x217 $x330)))
 (let (($x79 (and (not $x388) $x279)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x332 $x314)))
 (let (($x298 (not $x329)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x75 $x283)))
 (let (($x286 (and (not $x284) $x298)))
 (let (($x204 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x207 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x320 (and (and (and (and (and (and $x207 $x204) $x286) $x79) $x82) $x129) $x257)))
 (let (($x444 (and (and (and (and (and $x320 $x100) $x112) $x30) $x277) $x201)))
 (let (($x67 (= $x444 true)))
 (let (($x440 (= $x67 true)))
 (let (($x441 (= $x440 true)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 (bvuge ?x361 (_ bv1 32)))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 (= ?x361 (_ bv0 32)))))))
 ))
 (let (($x295 (and $x362 $x226)))
 (let (($x372 (and $x295 $x376)))
 (let (($x391 (and $x372 $x26)))
 (let (($x438 (and $x391 $x441)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 (bvuge ?x374 (_ bv1 32)))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 (= ?x374 (_ bv0 32)))))))
 ))
 (let (($x414 (and $x405 $x60)))
 (let (($x137 (and $x414 $x149)))
 (let (($x417 (and $x137 $x23)))
 (let (($x436 (and $x417 $x438)))
 (let (($x176 (=> $x436 $x38)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffdfffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffdfaf8)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xd3ef0080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x63750000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffdfafb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffdfaf8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffdfffc)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffdfafb) #x63
    (ite (= x!0 #xfffdffff) #xd3
    (ite (= x!0 #xfffdfffc) #x80
    (ite (= x!0 #xfffdfafa) #x75
    (ite (= x!0 #xfffdfffe) #xef
      #x00))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x800b0004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00084040)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7fe10000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x02de0014)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00084043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x800b0007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00084040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x800b0004)
  (define-fun input.spec-%var-m2-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x800b0004 x!0) #x800b0004 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!29 (k!28 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x800b0004) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00084042) #xde
    (ite (= x!0 #x00084040) #x14
    (ite (= x!0 #x800b0006) #xe1
    (ite (= x!0 #x00084043) #x02
    (ite (= x!0 #x800b0007) #x7f
      #x00))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x800b0004 x!0) #x800b0004 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!30 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!30 (k!27 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x800b0004) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x108 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 3) ?x108)))
 (let (($x117 (= $x114 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x392 (concat ?x51 (concat ?x141 (concat ?x127 ?x349)))))
 (let (($x27 (= input.dst.llvm-%m2 ?x392)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x435 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x360 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x351 (concat ?x360 (concat ?x346 (concat ?x435 ?x164)))))
 (let (($x350 (= input.dst.llvm-%m1 ?x351)))
 (let (($x156 (and $x350 $x27)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x134 (bvadd ?x90 input.dst.llvm-%m2)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x379))))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 ?x45))))))))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 $x328))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (=> $x59 $x394)))))
 ))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 $x57))))))
 ))
 (let (($x73 (and $x253 $x69)))
 (let (($x268 (and $x73 $x269)))
 (let (($x136 (and $x268 $x448)))
 (let (($x195 (and $x136 $x156)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x296 (= (_ bv0 32) ?x229)))
 (let ((?x172 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x190 (= (_ bv0 32) ?x172)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x357 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x357)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x63 $x358)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x194 $x177)))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd ?x90 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x94))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 ?x25))))))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 $x328))))))
 ))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (=> $x257 $x394)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 $x57))))))
 ))
 (let (($x395 (and $x285 $x76)))
 (let (($x10 (and $x395 $x243)))
 (let (($x22 (and $x10 $x54)))
 (let (($x458 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x186 $x205)))
 (let (($x444 (not $x201)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (and $x131 $x404)))
 (let (($x440 (and (not $x411) $x444)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x403 $x52)))
 (let (($x126 (not $x406)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x265 $x261)))
 (let (($x278 (and (not $x259) $x126)))
 (let (($x470 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x258 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x78 (and (and (and (and (and (and $x258 $x470) $x278) $x440) $x438) $x458) $x22)))
 (let (($x111 (and (and (and (and (and $x78 $x203) $x68) $x190) $x296) $x195)))
 (let (($x113 (= $x111 true)))
 (let (($x274 (= $x113 true)))
 (let (($x102 (= $x274 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 (bvuge ?x304 (_ bv1 32)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 (= ?x304 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x260 $x76)))
 (let (($x428 (and $x99 $x365)))
 (let (($x385 (and $x428 $x459)))
 (let (($x418 (and $x385 $x102)))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 (bvuge ?x364 (_ bv1 32)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 (= ?x364 (_ bv0 32)))))))
 ))
 (let (($x393 (and $x396 $x69)))
 (let (($x314 (and $x393 $x332)))
 (let (($x183 (and $x314 $x79)))
 (let (($x103 (and $x183 $x418)))
 (let (($x419 (=> $x103 $x117)))
 (not $x419)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x108 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 3) ?x108)))
 (let (($x117 (= $x114 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x392 (concat ?x51 (concat ?x141 (concat ?x127 ?x349)))))
 (let (($x27 (= input.dst.llvm-%m2 ?x392)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x435 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x360 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x351 (concat ?x360 (concat ?x346 (concat ?x435 ?x164)))))
 (let (($x350 (= input.dst.llvm-%m1 ?x351)))
 (let (($x156 (and $x350 $x27)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x134 (bvadd ?x90 input.dst.llvm-%m2)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x379))))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 ?x45))))))))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 $x328))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (=> $x59 $x394)))))
 ))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 $x57))))))
 ))
 (let (($x73 (and $x253 $x69)))
 (let (($x268 (and $x73 $x269)))
 (let (($x136 (and $x268 $x448)))
 (let (($x195 (and $x136 $x156)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x296 (= (_ bv0 32) ?x229)))
 (let ((?x172 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x190 (= (_ bv0 32) ?x172)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x357 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x357)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x63 $x358)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x194 $x177)))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd ?x90 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x94))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 ?x25))))))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 $x328))))))
 ))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (=> $x257 $x394)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 $x57))))))
 ))
 (let (($x395 (and $x285 $x76)))
 (let (($x10 (and $x395 $x243)))
 (let (($x22 (and $x10 $x54)))
 (let (($x458 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x186 $x205)))
 (let (($x444 (not $x201)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (and $x131 $x404)))
 (let (($x440 (and (not $x411) $x444)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x403 $x52)))
 (let (($x126 (not $x406)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x265 $x261)))
 (let (($x278 (and (not $x259) $x126)))
 (let (($x470 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x258 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x78 (and (and (and (and (and (and $x258 $x470) $x278) $x440) $x438) $x458) $x22)))
 (let (($x111 (and (and (and (and (and $x78 $x203) $x68) $x190) $x296) $x195)))
 (let (($x113 (= $x111 true)))
 (let (($x274 (= $x113 true)))
 (let (($x102 (= $x274 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 (bvuge ?x304 (_ bv1 32)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 (= ?x304 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x260 $x76)))
 (let (($x428 (and $x99 $x365)))
 (let (($x385 (and $x428 $x459)))
 (let (($x418 (and $x385 $x102)))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 (bvuge ?x364 (_ bv1 32)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 (= ?x364 (_ bv0 32)))))))
 ))
 (let (($x393 (and $x396 $x69)))
 (let (($x314 (and $x393 $x332)))
 (let (($x183 (and $x314 $x79)))
 (let (($x103 (and $x183 $x418)))
 (let (($x419 (=> $x103 $x117)))
 (not $x419)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08145504)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00240000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000006) #x24
    (ite (= x!0 #x00000001) #x55
    (ite (= x!0 #x00000000) #x04
    (ite (= x!0 #x00000003) #x08
    (ite (= x!0 #x00000002) #x14
      #x00))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbcade630)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0991b34)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xb5fddf04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xebbb7b00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0991b37)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbcade633)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0991b34)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbcade630)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0991b37) #xeb
    (ite (= x!0 #xbcade631) #xdf
    (ite (= x!0 #xbcade633) #xb5
    (ite (= x!0 #xbcade630) #x04
    (ite (= x!0 #xc0991b36) #xbb
    (ite (= x!0 #xc0991b35) #x7b
    (ite (= x!0 #xbcade632) #xfd
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x286 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x286)))
 (let (($x330 (= $x202 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x383 (concat ?x280 (concat ?x319 (concat ?x30 ?x317)))))
 (let (($x118 (= input.dst.llvm-%m2 ?x383)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x300 (concat ?x124 (concat ?x461 ?x62)))))
 (let (($x147 (= input.dst.llvm-%m1 ?x299)))
 (let (($x77 (and $x147 $x118)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x410 (bvadd ?x171 input.dst.llvm-%m2)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv1 32))) (select input.dst.llvm-mem ?x410))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv2 32))) ?x367))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 ?x369))))))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 $x450))))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (=> $x120 $x384)))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 $x83))))))
 ))
 (let (($x84 (and $x178 $x386)))
 (let (($x26 (and $x84 $x422)))
 (let (($x139 (and $x26 $x323)))
 (let (($x153 (and $x139 $x77)))
 (let ((?x321 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x321)))
 (let ((?x37 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x37)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x211 (and $x305 $x248)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x311 $x211)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x342 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x347))))
 (let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 ?x408))))))))))
 ))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 $x450))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (=> $x22 $x384)))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 $x83))))))
 ))
 (let (($x130 (and $x462 $x358)))
 (let (($x225 (and $x130 $x129)))
 (let (($x245 (and $x225 $x40)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x27 $x156)))
 (let (($x111 (not $x195)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x392 (and $x227 $x224)))
 (let (($x274 (and (not $x392) $x111)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x51 $x223)))
 (let (($x353 (not $x141)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (and $x343 $x351)))
 (let (($x349 (and (not $x350) $x353)))
 (let (($x473 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x360 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x360 $x473) $x349) $x274) $x418) $x105) $x245)))
 (let (($x226 (and (and (and (and (and $x359 $x237) $x238) $x100) $x44) $x153)))
 (let (($x204 (= $x226 true)))
 (let (($x198 (= $x204 true)))
 (let (($x20 (= $x198 true)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 (bvuge ?x25 (_ bv1 32)))))))
 ))
 (let (($x194 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 (= ?x25 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x194 $x358)))
 (let (($x269 (and $x177 $x263)))
 (let (($x437 (and $x269 $x370)))
 (let (($x397 (and $x437 $x20)))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 (bvuge ?x21 (_ bv1 32)))))))
 ))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 (= ?x21 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x371 $x386)))
 (let (($x52 (and $x86 $x403)))
 (let (($x452 (and $x52 $x440)))
 (let (($x193 (and $x452 $x397)))
 (let (($x388 (=> $x193 $x330)))
 (not $x388)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x286 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x286)))
 (let (($x330 (= $x202 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x383 (concat ?x280 (concat ?x319 (concat ?x30 ?x317)))))
 (let (($x118 (= input.dst.llvm-%m2 ?x383)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x300 (concat ?x124 (concat ?x461 ?x62)))))
 (let (($x147 (= input.dst.llvm-%m1 ?x299)))
 (let (($x77 (and $x147 $x118)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x410 (bvadd ?x171 input.dst.llvm-%m2)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv1 32))) (select input.dst.llvm-mem ?x410))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv2 32))) ?x367))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 ?x369))))))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 $x450))))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (=> $x120 $x384)))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 $x83))))))
 ))
 (let (($x84 (and $x178 $x386)))
 (let (($x26 (and $x84 $x422)))
 (let (($x139 (and $x26 $x323)))
 (let (($x153 (and $x139 $x77)))
 (let ((?x321 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x321)))
 (let ((?x37 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x37)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x211 (and $x305 $x248)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x311 $x211)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x342 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x347))))
 (let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 ?x408))))))))))
 ))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 $x450))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (=> $x22 $x384)))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 $x83))))))
 ))
 (let (($x130 (and $x462 $x358)))
 (let (($x225 (and $x130 $x129)))
 (let (($x245 (and $x225 $x40)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x27 $x156)))
 (let (($x111 (not $x195)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x392 (and $x227 $x224)))
 (let (($x274 (and (not $x392) $x111)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x51 $x223)))
 (let (($x353 (not $x141)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (and $x343 $x351)))
 (let (($x349 (and (not $x350) $x353)))
 (let (($x473 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x360 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x360 $x473) $x349) $x274) $x418) $x105) $x245)))
 (let (($x226 (and (and (and (and (and $x359 $x237) $x238) $x100) $x44) $x153)))
 (let (($x204 (= $x226 true)))
 (let (($x198 (= $x204 true)))
 (let (($x20 (= $x198 true)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 (bvuge ?x25 (_ bv1 32)))))))
 ))
 (let (($x194 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 (= ?x25 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x194 $x358)))
 (let (($x269 (and $x177 $x263)))
 (let (($x437 (and $x269 $x370)))
 (let (($x397 (and $x437 $x20)))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 (bvuge ?x21 (_ bv1 32)))))))
 ))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 (= ?x21 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x371 $x386)))
 (let (($x52 (and $x86 $x403)))
 (let (($x452 (and $x52 $x440)))
 (let (($x193 (and $x452 $x397)))
 (let (($x388 (=> $x193 $x330)))
 (not $x388)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 175 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x453 (= (_ bv0 2) ?x278)))
 (let (($x404 (= $x453 true)))
 (let ((?x271 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x434 (concat ?x378 (concat ?x11 (concat ?x190 ?x271)))))
 (let (($x443 (= input.dst.llvm-%m2 ?x434)))
 (let ((?x243 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x93 (concat ?x335 (concat ?x176 ?x243)))))
 (let (($x95 (= input.dst.llvm-%m1 ?x250)))
 (let (($x279 (and $x95 $x443)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x207 (bvadd ?x236 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x47))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 ?x66))))))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 $x87))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (=> $x379 $x45)))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 $x64))))))
 ))
 (let (($x119 (and $x175 $x448)))
 (let (($x459 (and $x119 $x174)))
 (let (($x16 (and $x459 $x298)))
 (let (($x425 (and $x16 $x279)))
 (let ((?x270 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x270)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x203 (= (_ bv0 32) ?x63)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x423 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x322 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x423)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x96 $x322)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x399 (and $x254 $x41)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x235 (bvadd ?x236 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x288))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 ?x208))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 $x87))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (=> $x245 $x45)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 $x64))))))
 ))
 (let (($x415 (and $x162 $x248)))
 (let (($x460 (and $x415 $x458)))
 (let (($x282 (and $x460 $x210)))
 (let (($x283 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x397 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x118 $x77)))
 (let (($x226 (not $x153)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x316 $x125)))
 (let (($x198 (and (not $x383) $x226)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x280 $x277)))
 (let (($x275 (not $x319)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x309 $x299)))
 (let (($x317 (and (not $x147) $x275)))
 (let (($x232 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x300 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x300 $x232) $x317) $x198) $x397) $x283) $x282)))
 (let (($x76 (and (and (and (and (and $x98 $x399) $x445) $x203) $x165) $x425)))
 (let (($x470 (= $x76 true)))
 (let (($x454 (= $x470 true)))
 (let (($x264 (= $x454 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 (bvuge ?x408 (_ bv1 32)))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 (= ?x408 (_ bv0 32)))))))
 ))
 (let (($x211 (and $x311 $x248)))
 (let (($x422 (and $x211 $x354)))
 (let (($x217 (and $x422 $x104)))
 (let (($x89 (and $x217 $x264)))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 (bvuge ?x72 (_ bv1 32)))))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 (= ?x72 (_ bv0 32)))))))
 ))
 (let (($x136 (and $x375 $x448)))
 (let (($x223 (and $x136 $x51)))
 (let (($x23 (and $x223 $x274)))
 (let (($x267 (and $x23 $x89)))
 (let (($x411 (=> $x267 $x404)))
 (not $x411)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x453 (= (_ bv0 2) ?x278)))
 (let (($x404 (= $x453 true)))
 (let ((?x271 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x434 (concat ?x378 (concat ?x11 (concat ?x190 ?x271)))))
 (let (($x443 (= input.dst.llvm-%m2 ?x434)))
 (let ((?x243 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x93 (concat ?x335 (concat ?x176 ?x243)))))
 (let (($x95 (= input.dst.llvm-%m1 ?x250)))
 (let (($x279 (and $x95 $x443)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x207 (bvadd ?x236 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x47))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 ?x66))))))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 $x87))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (=> $x379 $x45)))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 $x64))))))
 ))
 (let (($x119 (and $x175 $x448)))
 (let (($x459 (and $x119 $x174)))
 (let (($x16 (and $x459 $x298)))
 (let (($x425 (and $x16 $x279)))
 (let ((?x270 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x270)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x203 (= (_ bv0 32) ?x63)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x423 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x322 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x423)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x96 $x322)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x399 (and $x254 $x41)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x235 (bvadd ?x236 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x288))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 ?x208))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 $x87))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (=> $x245 $x45)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 $x64))))))
 ))
 (let (($x415 (and $x162 $x248)))
 (let (($x460 (and $x415 $x458)))
 (let (($x282 (and $x460 $x210)))
 (let (($x283 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x397 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x118 $x77)))
 (let (($x226 (not $x153)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x316 $x125)))
 (let (($x198 (and (not $x383) $x226)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x280 $x277)))
 (let (($x275 (not $x319)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x309 $x299)))
 (let (($x317 (and (not $x147) $x275)))
 (let (($x232 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x300 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x300 $x232) $x317) $x198) $x397) $x283) $x282)))
 (let (($x76 (and (and (and (and (and $x98 $x399) $x445) $x203) $x165) $x425)))
 (let (($x470 (= $x76 true)))
 (let (($x454 (= $x470 true)))
 (let (($x264 (= $x454 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 (bvuge ?x408 (_ bv1 32)))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 (= ?x408 (_ bv0 32)))))))
 ))
 (let (($x211 (and $x311 $x248)))
 (let (($x422 (and $x211 $x354)))
 (let (($x217 (and $x422 $x104)))
 (let (($x89 (and $x217 $x264)))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 (bvuge ?x72 (_ bv1 32)))))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 (= ?x72 (_ bv0 32)))))))
 ))
 (let (($x136 (and $x375 $x448)))
 (let (($x223 (and $x136 $x51)))
 (let (($x23 (and $x223 $x274)))
 (let (($x267 (and $x23 $x89)))
 (let (($x411 (=> $x267 $x404)))
 (not $x411)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 175 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x19 input.dst.llvm-%m1)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x209))))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 ?x6))))))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 $x246))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (=> $x282 $x369)))))
 ))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 $x81))))))
 ))
 (let (($x318 (and $x463 $x322)))
 (let (($x356 (and $x318 $x105)))
 (let (($x293 (and $x356 $x464)))
 (let (($x351 (= $x293 true)))
 (let (($x349 (= $x351 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x106 (concat ?x230 (concat ?x100 ?x159)))))
 (let (($x315 (= input.dst.llvm-%m2 ?x219)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x157 (concat ?x148 (concat ?x273 ?x129)))))
 (let (($x189 (= input.dst.llvm-%m1 ?x170)))
 (let (($x444 (and $x189 $x315)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x258 (bvadd ?x19 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x256))))
 (let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 ?x352))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 $x246))))))
 ))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (=> $x367 $x369)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 $x81))))))
 ))
 (let (($x429 (and $x427 $x323)))
 (let (($x370 (and $x429 $x426)))
 (let (($x181 (and $x370 $x126)))
 (let (($x205 (and $x181 $x444)))
 (let ((?x220 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x32 (= (_ bv0 32) ?x220)))
 (let ((?x305 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x237 (= (_ bv0 32) ?x305)))
 (let ((?x115 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x12 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x398 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x334 (and $x339 $x398)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x345 $x334)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x443 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (and $x443 $x279)))
 (let (($x76 (not $x425)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x434 (and $x272 $x366)))
 (let (($x454 (and (not $x434) $x76)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x378 $x296)))
 (let (($x172 (not $x11)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x90 $x250)))
 (let (($x271 (and (not $x95) $x172)))
 (let (($x10 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x93 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x54 (and (and (and (and (and (and $x93 $x10) $x271) $x454) $x89) $x261) $x293)))
 (let (($x358 (and (and (and (and (and $x54 $x138) $x50) $x237) $x32) $x205)))
 (let (($x473 (= $x358 true)))
 (let (($x152 (= $x473 true)))
 (let (($x435 (= $x152 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 (bvuge ?x208 (_ bv1 32)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 (= ?x208 (_ bv0 32)))))))
 ))
 (let (($x41 (and $x254 $x322)))
 (let (($x174 (and $x41 $x308)))
 (let (($x131 (and $x174 $x329)))
 (let (($x164 (and $x131 $x435)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 (bvuge ?x28 (_ bv1 32)))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 (= ?x28 (_ bv0 32)))))))
 ))
 (let (($x139 (and $x107 $x323)))
 (let (($x277 (and $x139 $x280)))
 (let (($x79 (and $x277 $x198)))
 (let (($x348 (and $x79 $x164)))
 (let (($x15 (=> $x348 $x349)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x19 input.dst.llvm-%m1)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x209))))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 ?x6))))))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 $x246))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (=> $x282 $x369)))))
 ))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 $x81))))))
 ))
 (let (($x318 (and $x463 $x322)))
 (let (($x356 (and $x318 $x105)))
 (let (($x293 (and $x356 $x464)))
 (let (($x351 (= $x293 true)))
 (let (($x349 (= $x351 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x106 (concat ?x230 (concat ?x100 ?x159)))))
 (let (($x315 (= input.dst.llvm-%m2 ?x219)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x157 (concat ?x148 (concat ?x273 ?x129)))))
 (let (($x189 (= input.dst.llvm-%m1 ?x170)))
 (let (($x444 (and $x189 $x315)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x258 (bvadd ?x19 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x256))))
 (let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 ?x352))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 $x246))))))
 ))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (=> $x367 $x369)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 $x81))))))
 ))
 (let (($x429 (and $x427 $x323)))
 (let (($x370 (and $x429 $x426)))
 (let (($x181 (and $x370 $x126)))
 (let (($x205 (and $x181 $x444)))
 (let ((?x220 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x32 (= (_ bv0 32) ?x220)))
 (let ((?x305 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x237 (= (_ bv0 32) ?x305)))
 (let ((?x115 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x12 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x398 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x334 (and $x339 $x398)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x345 $x334)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x443 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (and $x443 $x279)))
 (let (($x76 (not $x425)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x434 (and $x272 $x366)))
 (let (($x454 (and (not $x434) $x76)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x378 $x296)))
 (let (($x172 (not $x11)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x90 $x250)))
 (let (($x271 (and (not $x95) $x172)))
 (let (($x10 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x93 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x54 (and (and (and (and (and (and $x93 $x10) $x271) $x454) $x89) $x261) $x293)))
 (let (($x358 (and (and (and (and (and $x54 $x138) $x50) $x237) $x32) $x205)))
 (let (($x473 (= $x358 true)))
 (let (($x152 (= $x473 true)))
 (let (($x435 (= $x152 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 (bvuge ?x208 (_ bv1 32)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 (= ?x208 (_ bv0 32)))))))
 ))
 (let (($x41 (and $x254 $x322)))
 (let (($x174 (and $x41 $x308)))
 (let (($x131 (and $x174 $x329)))
 (let (($x164 (and $x131 $x435)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 (bvuge ?x28 (_ bv1 32)))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 (= ?x28 (_ bv0 32)))))))
 ))
 (let (($x139 (and $x107 $x323)))
 (let (($x277 (and $x139 $x280)))
 (let (($x79 (and $x277 $x198)))
 (let (($x348 (and $x79 $x164)))
 (let (($x15 (=> $x348 $x349)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x466 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x121))))
 (let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 ?x316))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 $x283))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (=> $x47 $x66)))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 $x74))))))
 ))
 (let (($x412 (and $x402 $x298)))
 (let (($x300 (and $x412 $x303)))
 (let (($x458 (and $x300 $x451)))
 (let (($x421 (= $x458 true)))
 (let (($x125 (= $x421 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x58 (concat ?x56 (concat ?x165 ?x203)))))
 (let (($x156 (= input.dst.llvm-%m2 ?x111)))
 (let ((?x295 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x289 (concat ?x439 (concat ?x235 ?x295)))))
 (let (($x320 (= input.dst.llvm-%m1 ?x288)))
 (let (($x27 (and $x320 $x156)))
 (let (($x195 (and $x458 $x27)))
 (let ((?x445 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x472 (= (_ bv0 32) ?x445)))
 (let ((?x257 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x216 (= (_ bv0 32) ?x257)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x380 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x380)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x284 (and $x374 $x285)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x372 $x284)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd ?x466 input.dst.llvm-%m1)))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x468))))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 ?x328))))))))))
 ))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 $x283))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (=> $x293 $x66)))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 $x74))))))
 ))
 (let (($x55 (and $x218 $x398)))
 (let (($x455 (and $x55 $x38)))
 (let (($x287 (and $x455 $x292)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x315 $x444)))
 (let (($x358 (not $x205)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x362 $x110)))
 (let (($x152 (and (not $x219) $x358)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x106 $x44)))
 (let (($x37 (not $x230)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x171 $x170)))
 (let (($x159 (and (not $x189) $x37)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x157 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x157 $x225) $x159) $x152) $x164) $x351) $x287)))
 (let (($x389 (and (and (and (and (and $x359 $x108) $x399) $x216) $x472) $x195)))
 (let (($x461 (= $x389 true)))
 (let (($x62 (= $x461 true)))
 (let (($x306 (= $x62 true)))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 (bvuge ?x6 (_ bv1 32)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 (= ?x6 (_ bv0 32)))))))
 ))
 (let (($x334 (and $x345 $x398)))
 (let (($x426 (and $x334 $x142)))
 (let (($x227 (and $x426 $x406)))
 (let (($x299 (and $x227 $x306)))
 (let (($x454 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x16 (and $x36 $x298)))
 (let (($x296 (and $x16 $x378)))
 (let (($x440 (and $x296 $x454)))
 (let (($x317 (and $x440 $x299)))
 (let (($x383 (=> $x317 $x125)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x466 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x121))))
 (let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 ?x316))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 $x283))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (=> $x47 $x66)))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 $x74))))))
 ))
 (let (($x412 (and $x402 $x298)))
 (let (($x300 (and $x412 $x303)))
 (let (($x458 (and $x300 $x451)))
 (let (($x421 (= $x458 true)))
 (let (($x125 (= $x421 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x58 (concat ?x56 (concat ?x165 ?x203)))))
 (let (($x156 (= input.dst.llvm-%m2 ?x111)))
 (let ((?x295 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x289 (concat ?x439 (concat ?x235 ?x295)))))
 (let (($x320 (= input.dst.llvm-%m1 ?x288)))
 (let (($x27 (and $x320 $x156)))
 (let (($x195 (and $x458 $x27)))
 (let ((?x445 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x472 (= (_ bv0 32) ?x445)))
 (let ((?x257 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x216 (= (_ bv0 32) ?x257)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x380 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x380)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x284 (and $x374 $x285)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x372 $x284)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd ?x466 input.dst.llvm-%m1)))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x468))))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 ?x328))))))))))
 ))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 $x283))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (=> $x293 $x66)))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 $x74))))))
 ))
 (let (($x55 (and $x218 $x398)))
 (let (($x455 (and $x55 $x38)))
 (let (($x287 (and $x455 $x292)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x315 $x444)))
 (let (($x358 (not $x205)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x362 $x110)))
 (let (($x152 (and (not $x219) $x358)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x106 $x44)))
 (let (($x37 (not $x230)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x171 $x170)))
 (let (($x159 (and (not $x189) $x37)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x157 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x157 $x225) $x159) $x152) $x164) $x351) $x287)))
 (let (($x389 (and (and (and (and (and $x359 $x108) $x399) $x216) $x472) $x195)))
 (let (($x461 (= $x389 true)))
 (let (($x62 (= $x461 true)))
 (let (($x306 (= $x62 true)))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 (bvuge ?x6 (_ bv1 32)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 (= ?x6 (_ bv0 32)))))))
 ))
 (let (($x334 (and $x345 $x398)))
 (let (($x426 (and $x334 $x142)))
 (let (($x227 (and $x426 $x406)))
 (let (($x299 (and $x227 $x306)))
 (let (($x454 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x16 (and $x36 $x298)))
 (let (($x296 (and $x16 $x378)))
 (let (($x440 (and $x296 $x454)))
 (let (($x317 (and $x440 $x299)))
 (let (($x383 (=> $x317 $x125)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x201 (= false true)))
 (let (($x366 (= $x201 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x361 (concat ?x48 (concat ?x32 ?x237)))))
 (let (($x77 (= input.dst.llvm-%m2 ?x226)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x53 (concat ?x149 (concat ?x240 ?x99)))))
 (let (($x78 (= input.dst.llvm-%m1 ?x209)))
 (let (($x118 (and $x78 $x77)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x319 (bvadd ?x290 input.dst.llvm-%m2)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x302))))
 (let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 ?x272))))))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 $x261))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (=> $x256 $x352)))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 $x238))))))
 ))
 (let (($x391 (and $x396 $x126)))
 (let (($x93 (and $x391 $x97)))
 (let (($x105 (and $x93 $x417)))
 (let (($x153 (and $x105 $x118)))
 (let ((?x50 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x50)))
 (let ((?x22 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x115 (= (_ bv0 32) ?x22)))
 (let ((?x339 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x339)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x259)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x368 $x286)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x462 $x202)))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x290 input.dst.llvm-%m1)))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x474))))
 (let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 ?x364))))))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 $x261))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (=> $x287 $x352)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 $x238))))))
 ))
 (let (($x14 (and $x321 $x285)))
 (let (($x114 (and $x14 $x140)))
 (let (($x101 (and $x114 $x7)))
 (let (($x421 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x156 $x27)))
 (let (($x389 (not $x195)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x88 $x31)))
 (let (($x62 (and (not $x111) $x389)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x58 $x206)))
 (let (($x260 (not $x56)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (and $x331 $x288)))
 (let (($x203 (and (not $x320) $x260)))
 (let (($x236 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x289 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x289 $x236) $x203) $x62) $x299) $x421) $x101)))
 (let (($x186 (and (and (and (and (and $x98 $x161) $x138) $x115) $x46) $x153)))
 (let (($x176 (= $x186 true)))
 (let (($x243 (= $x176 true)))
 (let (($x91 (= $x243 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 (bvuge ?x328 (_ bv1 32)))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 (= ?x328 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x372 $x285)))
 (let (($x303 (and $x284 $x104)))
 (let (($x262 (and $x303 $x353)))
 (let (($x250 (and $x262 $x91)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 (bvuge ?x407 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 (= ?x407 (_ bv0 32)))))))
 ))
 (let (($x181 (and $x255 $x126)))
 (let (($x44 (and $x181 $x106)))
 (let (($x155 (and $x44 $x152)))
 (let (($x271 (and $x155 $x250)))
 (let (($x434 (=> $x271 $x366)))
 (not $x434))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x201 (= false true)))
 (let (($x366 (= $x201 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x361 (concat ?x48 (concat ?x32 ?x237)))))
 (let (($x77 (= input.dst.llvm-%m2 ?x226)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x53 (concat ?x149 (concat ?x240 ?x99)))))
 (let (($x78 (= input.dst.llvm-%m1 ?x209)))
 (let (($x118 (and $x78 $x77)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x319 (bvadd ?x290 input.dst.llvm-%m2)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x302))))
 (let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 ?x272))))))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 $x261))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (=> $x256 $x352)))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 $x238))))))
 ))
 (let (($x391 (and $x396 $x126)))
 (let (($x93 (and $x391 $x97)))
 (let (($x105 (and $x93 $x417)))
 (let (($x153 (and $x105 $x118)))
 (let ((?x50 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x50)))
 (let ((?x22 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x115 (= (_ bv0 32) ?x22)))
 (let ((?x339 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x339)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x259)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x368 $x286)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x462 $x202)))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x290 input.dst.llvm-%m1)))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x474))))
 (let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 ?x364))))))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 $x261))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (=> $x287 $x352)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 $x238))))))
 ))
 (let (($x14 (and $x321 $x285)))
 (let (($x114 (and $x14 $x140)))
 (let (($x101 (and $x114 $x7)))
 (let (($x421 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x156 $x27)))
 (let (($x389 (not $x195)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x88 $x31)))
 (let (($x62 (and (not $x111) $x389)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x58 $x206)))
 (let (($x260 (not $x56)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (and $x331 $x288)))
 (let (($x203 (and (not $x320) $x260)))
 (let (($x236 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x289 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x289 $x236) $x203) $x62) $x299) $x421) $x101)))
 (let (($x186 (and (and (and (and (and $x98 $x161) $x138) $x115) $x46) $x153)))
 (let (($x176 (= $x186 true)))
 (let (($x243 (= $x176 true)))
 (let (($x91 (= $x243 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 (bvuge ?x328 (_ bv1 32)))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 (= ?x328 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x372 $x285)))
 (let (($x303 (and $x284 $x104)))
 (let (($x262 (and $x303 $x353)))
 (let (($x250 (and $x262 $x91)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 (bvuge ?x407 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 (= ?x407 (_ bv0 32)))))))
 ))
 (let (($x181 (and $x255 $x126)))
 (let (($x44 (and $x181 $x106)))
 (let (($x155 (and $x44 $x152)))
 (let (($x271 (and $x155 $x250)))
 (let (($x434 (=> $x271 $x366)))
 (not $x434))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x18362800)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xdb28c100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000a) #x28
    (ite (= x!0 #x00000009) #xc1
    (ite (= x!0 #x00000001) #x28
    (ite (= x!0 #x0000000b) #xdb
    (ite (= x!0 #x00000003) #x18
    (ite (= x!0 #x00000002) #x36
      #x00)))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2b722c14)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x13587418)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x6df53b00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xeffef800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1358741b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2b722c17)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x13587418)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2b722c14)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1358741b) #xef
    (ite (= x!0 #x2b722c15) #x3b
    (ite (= x!0 #x2b722c17) #x6d
    (ite (= x!0 #x1358741a) #xfe
    (ite (= x!0 #x13587419) #xf8
    (ite (= x!0 #x2b722c16) #xf5
      #x00)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x454 (= true false)))
 (let (($x440 (= $x454 true)))
 (let ((?x42 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x257 (= (_ bv0 32) ?x42)))
 (let ((?x185 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x468 (= (_ bv0 32) ?x185)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x447)))
 (let (($x466 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x376 (and $x466 $x223)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (and $x397 $x376)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x377 (and $x214 $x408)))
 (let (($x310 (not $x377)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x90 $x405)))
 (let (($x124 (and (not $x168) $x310)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (and $x252 $x335)))
 (let (($x11 (not $x413)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x442 $x60)))
 (let (($x34 (and (not $x230) $x11)))
 (let (($x141 (and (and (and (and (and (and $x34 $x124) $x263) $x455) $x314) $x200) $x468)))
 (let (($x346 (and $x141 $x257)))
 (let (($x449 (= $x346 true)))
 (let (($x430 (= $x449 true)))
 (let (($x76 (= $x430 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x384 (bvadd ?x193 input.dst.llvm-%m2)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x371))))
 (let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 ?x59))))))))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 $x169))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (=> $x104 $x304)))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 $x64))))))
 ))
 (let (($x36 (and $x471 $x353)))
 (let (($x178 (and $x36 $x139)))
 (let (($x342 (and $x178 $x157)))
 (let (($x148 (= $x342 true)))
 (let (($x70 (= $x148 true)))
 (let (($x394 (= $x70 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x83 (= (_ bv0 2) ?x276)))
 (let (($x416 (= $x83 true)))
 (let (($x241 (= $x416 true)))
 (let ((?x340 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x281 (= (_ bv0 2) ?x340)))
 (let (($x446 (= $x281 true)))
 (let (($x144 (= $x446 true)))
 (let (($x245 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x247 (bvadd ?x193 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x244))))
 (let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 ?x154))))))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 $x169))))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (=> $x130 $x304)))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 $x64))))))
 ))
 (let (($x173 (and $x268 $x368)))
 (let (($x72 (and $x173 $x367)))
 (let (($x436 (and $x72 $x245)))
 (let (($x388 (= $x436 true)))
 (let (($x441 (= $x388 true)))
 (let (($x94 (= $x441 true)))
 (let (($x158 (and $x94 $x144)))
 (let (($x379 (and $x158 $x241)))
 (let (($x71 (and $x379 $x394)))
 (let (($x279 (and $x71 $x76)))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 (bvuge ?x474 (_ bv1 32)))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 (= ?x474 (_ bv0 32)))))))
 ))
 (let (($x259 (and $x101 $x368)))
 (let (($x391 (and $x259 $x396)))
 (let (($x272 (and $x391 $x135)))
 (let (($x443 (and $x272 $x279)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 (bvuge ?x284 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 (= ?x284 (_ bv0 32)))))))
 ))
 (let (($x262 (and $x121 $x353)))
 (let (($x75 (and $x262 $x165)))
 (let (($x389 (and $x75 $x195)))
 (let (($x425 (and $x389 $x443)))
 (let (($x467 (=> $x425 $x440)))
 (not $x467))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x454 (= true false)))
 (let (($x440 (= $x454 true)))
 (let ((?x42 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x257 (= (_ bv0 32) ?x42)))
 (let ((?x185 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x468 (= (_ bv0 32) ?x185)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x447)))
 (let (($x466 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x376 (and $x466 $x223)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (and $x397 $x376)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x377 (and $x214 $x408)))
 (let (($x310 (not $x377)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x90 $x405)))
 (let (($x124 (and (not $x168) $x310)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (and $x252 $x335)))
 (let (($x11 (not $x413)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x442 $x60)))
 (let (($x34 (and (not $x230) $x11)))
 (let (($x141 (and (and (and (and (and (and $x34 $x124) $x263) $x455) $x314) $x200) $x468)))
 (let (($x346 (and $x141 $x257)))
 (let (($x449 (= $x346 true)))
 (let (($x430 (= $x449 true)))
 (let (($x76 (= $x430 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x384 (bvadd ?x193 input.dst.llvm-%m2)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x371))))
 (let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 ?x59))))))))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 $x169))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (=> $x104 $x304)))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 $x64))))))
 ))
 (let (($x36 (and $x471 $x353)))
 (let (($x178 (and $x36 $x139)))
 (let (($x342 (and $x178 $x157)))
 (let (($x148 (= $x342 true)))
 (let (($x70 (= $x148 true)))
 (let (($x394 (= $x70 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x83 (= (_ bv0 2) ?x276)))
 (let (($x416 (= $x83 true)))
 (let (($x241 (= $x416 true)))
 (let ((?x340 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x281 (= (_ bv0 2) ?x340)))
 (let (($x446 (= $x281 true)))
 (let (($x144 (= $x446 true)))
 (let (($x245 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x247 (bvadd ?x193 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x244))))
 (let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 ?x154))))))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 $x169))))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (=> $x130 $x304)))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 $x64))))))
 ))
 (let (($x173 (and $x268 $x368)))
 (let (($x72 (and $x173 $x367)))
 (let (($x436 (and $x72 $x245)))
 (let (($x388 (= $x436 true)))
 (let (($x441 (= $x388 true)))
 (let (($x94 (= $x441 true)))
 (let (($x158 (and $x94 $x144)))
 (let (($x379 (and $x158 $x241)))
 (let (($x71 (and $x379 $x394)))
 (let (($x279 (and $x71 $x76)))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 (bvuge ?x474 (_ bv1 32)))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 (= ?x474 (_ bv0 32)))))))
 ))
 (let (($x259 (and $x101 $x368)))
 (let (($x391 (and $x259 $x396)))
 (let (($x272 (and $x391 $x135)))
 (let (($x443 (and $x272 $x279)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 (bvuge ?x284 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 (= ?x284 (_ bv0 32)))))))
 ))
 (let (($x262 (and $x121 $x353)))
 (let (($x75 (and $x262 $x165)))
 (let (($x389 (and $x75 $x195)))
 (let (($x425 (and $x389 $x443)))
 (let (($x467 (=> $x425 $x440)))
 (not $x467))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0a72c79c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd1026788)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd102678b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0a72c79f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd1026788)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0a72c79c)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000010))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000010))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000010) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000010))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000010))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000010) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x23 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_0 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x557 (bvadd ?x177 ?x23)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv1 32))) (select input.dst.llvm-mem ?x557))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv2 32))) ?x561))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x567)))))))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 $x344))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (=> $x309 $x302)))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 $x438))))))
 ))
 (let (($x187 (and $x261 $x457)))
 (let (($x57 (and $x187 $x233)))
 (let (($x571 (and $x57 $x570)))
 (let (($x572 (= $x571 true)))
 (let (($x573 (= $x572 true)))
 (let ((?x31 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x293 (= (_ bv0 2) ?x31)))
 (let (($x54 (= $x293 true)))
 (let (($x345 (= $x54 true)))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x205 (bvadd ?x177 input.dst.llvm-%m2)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x395))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x439))))))))))
 ))
 (let (($x331 (and $x57 $x295)))
 (let (($x56 (= $x331 true)))
 (let (($x260 (= $x56 true)))
 (let (($x79 (= $x260 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x9 (bvadd ?x177 input.dst.llvm-%m1)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x429))))
 (let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 ?x352))))))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 $x344))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (=> $x148 $x302)))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 $x438))))))
 ))
 (let (($x387 (and $x68 $x208)))
 (let (($x115 (and $x387 $x355)))
 (let (($x85 (and $x115 $x297)))
 (let (($x222 (= $x85 true)))
 (let (($x116 (= $x222 true)))
 (let (($x221 (= $x116 true)))
 (let (($x336 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x162 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x179 (and $x162 $x336)))
 (let (($x87 (= $x179 true)))
 (let (($x311 (= $x87 true)))
 (let (($x96 (= $x311 true)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x424 (= (_ bv0 32) ?x240)))
 (let ((?x242 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x41 (= (_ bv0 32) ?x242)))
 (let ((?x29 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x14 $x189)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x360 (and $x321 $x13)))
 (let (($x192 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x62 $x212)))
 (let (($x299 (not $x306)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x464 (and $x440 $x467)))
 (let (($x435 (and (not $x464) $x299)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x430 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x430 $x76)))
 (let (($x443 (not $x279)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x141 $x257)))
 (let (($x454 (and (not $x346) $x443)))
 (let (($x432 (and (and (and (and (and (and $x454 $x435) $x119) $x192) $x360) $x105) $x41)))
 (let (($x239 (and $x432 $x424)))
 (let (($x5 (= $x239 true)))
 (let (($x196 (= $x5 true)))
 (let (($x375 (= $x196 true)))
 (let ((?x232 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x215 (= (_ bv0 2) ?x232)))
 (let (($x200 (= $x215 true)))
 (let (($x307 (= $x200 true)))
 (let (($x21 (and $x307 $x375)))
 (let (($x102 (and $x21 $x96)))
 (let (($x191 (and $x102 $x221)))
 (let (($x88 (and $x191 $x79)))
 (let (($x12 (and $x88 $x345)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 (bvuge ?x406 (_ bv1 32)))))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 (= ?x406 (_ bv0 32)))))))
 ))
 (let (($x442 (and $x394 $x208)))
 (let (($x408 (and $x442 $x214)))
 (let (($x223 (and $x408 $x447)))
 (let (($x398 (and $x223 $x12)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 (bvuge ?x46 (_ bv1 32)))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 (= ?x46 (_ bv0 32)))))))
 ))
 (let (($x417 (and $x275 $x457)))
 (let (($x247 (and $x417 $x99)))
 (let (($x351 (and $x247 $x224)))
 (let (($x225 (and $x351 $x398)))
 (let (($x574 (=> $x225 $x573)))
 (let (($x575 (not $x574)))
 (let (($x501 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x485 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x486 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x487 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x486)))
 (let (($x489 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x490 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x486)))
 (let (($x495 (or false (or false (and (and true (or $x490 $x489)) (or $x487 $x485))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x495) (= (select solver-mem_0 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_0 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x501) $x575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x23 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_0 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x557 (bvadd ?x177 ?x23)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv1 32))) (select input.dst.llvm-mem ?x557))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv2 32))) ?x561))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x567)))))))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 $x344))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (=> $x309 $x302)))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 $x438))))))
 ))
 (let (($x187 (and $x261 $x457)))
 (let (($x57 (and $x187 $x233)))
 (let (($x571 (and $x57 $x570)))
 (let (($x572 (= $x571 true)))
 (let (($x573 (= $x572 true)))
 (let ((?x31 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x293 (= (_ bv0 2) ?x31)))
 (let (($x54 (= $x293 true)))
 (let (($x345 (= $x54 true)))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x205 (bvadd ?x177 input.dst.llvm-%m2)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x395))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x439))))))))))
 ))
 (let (($x331 (and $x57 $x295)))
 (let (($x56 (= $x331 true)))
 (let (($x260 (= $x56 true)))
 (let (($x79 (= $x260 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x9 (bvadd ?x177 input.dst.llvm-%m1)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x429))))
 (let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 ?x352))))))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 $x344))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (=> $x148 $x302)))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 $x438))))))
 ))
 (let (($x387 (and $x68 $x208)))
 (let (($x115 (and $x387 $x355)))
 (let (($x85 (and $x115 $x297)))
 (let (($x222 (= $x85 true)))
 (let (($x116 (= $x222 true)))
 (let (($x221 (= $x116 true)))
 (let (($x336 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x162 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x179 (and $x162 $x336)))
 (let (($x87 (= $x179 true)))
 (let (($x311 (= $x87 true)))
 (let (($x96 (= $x311 true)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x424 (= (_ bv0 32) ?x240)))
 (let ((?x242 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x41 (= (_ bv0 32) ?x242)))
 (let ((?x29 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x14 $x189)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x360 (and $x321 $x13)))
 (let (($x192 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x62 $x212)))
 (let (($x299 (not $x306)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x464 (and $x440 $x467)))
 (let (($x435 (and (not $x464) $x299)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x430 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x430 $x76)))
 (let (($x443 (not $x279)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x141 $x257)))
 (let (($x454 (and (not $x346) $x443)))
 (let (($x432 (and (and (and (and (and (and $x454 $x435) $x119) $x192) $x360) $x105) $x41)))
 (let (($x239 (and $x432 $x424)))
 (let (($x5 (= $x239 true)))
 (let (($x196 (= $x5 true)))
 (let (($x375 (= $x196 true)))
 (let ((?x232 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x215 (= (_ bv0 2) ?x232)))
 (let (($x200 (= $x215 true)))
 (let (($x307 (= $x200 true)))
 (let (($x21 (and $x307 $x375)))
 (let (($x102 (and $x21 $x96)))
 (let (($x191 (and $x102 $x221)))
 (let (($x88 (and $x191 $x79)))
 (let (($x12 (and $x88 $x345)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 (bvuge ?x406 (_ bv1 32)))))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 (= ?x406 (_ bv0 32)))))))
 ))
 (let (($x442 (and $x394 $x208)))
 (let (($x408 (and $x442 $x214)))
 (let (($x223 (and $x408 $x447)))
 (let (($x398 (and $x223 $x12)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 (bvuge ?x46 (_ bv1 32)))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 (= ?x46 (_ bv0 32)))))))
 ))
 (let (($x417 (and $x275 $x457)))
 (let (($x247 (and $x417 $x99)))
 (let (($x351 (and $x247 $x224)))
 (let (($x225 (and $x351 $x398)))
 (let (($x574 (=> $x225 $x573)))
 (let (($x575 (not $x574)))
 (let (($x501 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x485 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x486 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x487 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x486)))
 (let (($x489 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x490 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x486)))
 (let (($x495 (or false (or false (and (and true (or $x490 $x489)) (or $x487 $x485))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x495) (= (select solver-mem_0 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_0 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x501) $x575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!59))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x411c2454)
  (define-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!59))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x83101500)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!60))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x83101503)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x411c2457)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x83101500)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x411c2454)
  (define-fun k!63 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!65 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!65 (k!63 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!59!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x01000003) #x00
    (ite (= x!0 #x01000001) #x00
    (ite (= x!0 #x411c2454) #x00
    (ite (= x!0 #x83101501) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x83101500) #x00
    (ite (= x!0 #x411c2455) #x00
    (ite (= x!0 #x01000000) #x00
    (ite (= x!0 #x83101503) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x01000002) #x00
    (ite (= x!0 #x411c2457) #x00
    (ite (= x!0 #x00000c22) #x40
    (ite (= x!0 #x00000000) #x10
    (ite (= x!0 #x00000002) #x00
      #x02))))))))))))))))
  (define-fun k!61 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x83101501 x!0)
                    (ite (bvule #x83101503 x!0)
                         (ite (bvule #x83101504 x!0) #x83101504 #x83101503)
                         #x83101501)
                    #x83101500)))
    (let ((a!2 (ite (bvule #x411c2457 x!0)
                    (ite (bvule #x411c2458 x!0)
                         (ite (bvule #x83101500 x!0) a!1 #x411c2458)
                         #x411c2457)
                    #x411c2455)))
    (let ((a!3 (ite (bvule #x01000003 x!0)
                    (ite (bvule #x411c2454 x!0)
                         (ite (bvule #x411c2455 x!0) a!2 #x411c2454)
                         #x01000003)
                    #x01000002)))
    (let ((a!4 (ite (bvule #x01000000 x!0)
                    (ite (bvule #x01000001 x!0)
                         (ite (bvule #x01000002 x!0) a!3 #x01000001)
                         #x01000000)
                    #x00000c22)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x00000c22 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!59 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!59!66 (k!61 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (concat (k!59 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!59 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!64 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!62 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!59))
              (= x!3 (_ as-array k!60))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x01000000
      #x83101501))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!64 (k!62 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (concat (k!59 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!59 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!60 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x354 (bvadd ?x28 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x277))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 ?x138))))))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x243 (_ bv1 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (= $x311 $x201))))))
 ))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x53 (= false false)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (=> $x163 $x53)))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (= $x163 $x176))))))
 ))
 (let (($x366 (and $x40 $x424)))
 (let (($x281 (and $x366 $x421)))
 (let (($x384 (and $x281 $x178)))
 (let (($x6 (= $x384 true)))
 (let (($x137 (= $x6 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x150 (= (_ bv0 2) ?x93)))
 (let (($x106 (= $x150 true)))
 (let (($x207 (= $x106 true)))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x354 (bvadd ?x28 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x277))))
 (let ((?x447 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (=> $x394 (= ?x447 ?x138))))))))))
 ))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x243 (_ bv1 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (= $x394 $x201))))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x53 (= false false)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (=> $x457 $x53)))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (= $x457 $x176))))))
 ))
 (let (($x448 (and $x58 $x247)))
 (let (($x323 (and $x448 $x136)))
 (let (($x319 (and $x323 $x315)))
 (let (($x184 (= $x319 true)))
 (let (($x322 (= $x184 true)))
 (let (($x50 (= $x322 true)))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x125 (bvadd ?x28 input.dst.llvm-%m1)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x174))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 ?x378))))))))))
 ))
 (let (($x452 (and $x281 $x211)))
 (let (($x305 (= $x452 true)))
 (let (($x382 (= $x305 true)))
 (let (($x86 (= $x382 true)))
 (let (($x563 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x565 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x559 (and $x565 $x563)))
 (let (($x560 (= $x559 true)))
 (let (($x558 (= $x560 true)))
 (let (($x561 (= $x558 true)))
 (let ((?x79 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x79)))
 (let ((?x56 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x260 (= (_ bv0 32) ?x56)))
 (let ((?x295 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x295)))
 (let ((?x359 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x439 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x359)))
 (let (($x358 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x358 $x439)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x198 (and $x155 $x236)))
 (let (($x152 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (and $x187 $x403)))
 (let (($x57 (not $x233)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x191 $x114)))
 (let (($x372 (and (not $x261) $x57)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x126 $x297)))
 (let (($x222 (not $x85)))
 (let (($x407 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x25 $x407)))
 (let (($x221 (and (not $x352) $x222)))
 (let (($x398 (and (and (and (and (and (and $x221 $x372) $x328) $x152) $x198) $x331) $x260)))
 (let (($x225 (and $x398 $x88)))
 (let (($x274 (= $x225 true)))
 (let (($x399 (= $x274 true)))
 (let (($x129 (= $x399 true)))
 (let ((?x255 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x265 (= (_ bv0 2) ?x255)))
 (let (($x390 (= $x265 true)))
 (let (($x426 (= $x390 true)))
 (let (($x159 (and $x426 $x129)))
 (let (($x564 (and $x159 $x561)))
 (let (($x120 (and $x564 $x86)))
 (let (($x22 (and $x120 $x50)))
 (let (($x44 (and $x22 $x207)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (= $x311 (bvuge ?x360 (_ bv1 32)))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (= $x163 (= ?x360 (_ bv0 32)))))))
 ))
 (let (($x239 (and $x41 $x424)))
 (let (($x117 (and $x239 $x102)))
 (let (($x177 (and $x117 $x237)))
 (let (($x444 (and $x177 $x44)))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x447 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (=> $x394 (= ?x447 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (= $x394 (bvuge ?x249 (_ bv1 32)))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (= $x457 (= ?x249 (_ bv0 32)))))))
 ))
 (let (($x244 (and $x19 $x247)))
 (let (($x442 (and $x244 $x208)))
 (let (($x232 (and $x442 $x314)))
 (let (($x190 (and $x232 $x444)))
 (let (($x35 (=> $x190 $x137)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x354 (bvadd ?x28 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x277))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 ?x138))))))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x243 (_ bv1 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (= $x311 $x201))))))
 ))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x53 (= false false)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (=> $x163 $x53)))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (= $x163 $x176))))))
 ))
 (let (($x366 (and $x40 $x424)))
 (let (($x281 (and $x366 $x421)))
 (let (($x384 (and $x281 $x178)))
 (let (($x6 (= $x384 true)))
 (let (($x137 (= $x6 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x150 (= (_ bv0 2) ?x93)))
 (let (($x106 (= $x150 true)))
 (let (($x207 (= $x106 true)))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x354 (bvadd ?x28 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x277))))
 (let ((?x447 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (=> $x394 (= ?x447 ?x138))))))))))
 ))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x243 (_ bv1 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (= $x394 $x201))))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x53 (= false false)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (=> $x457 $x53)))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (= $x457 $x176))))))
 ))
 (let (($x448 (and $x58 $x247)))
 (let (($x323 (and $x448 $x136)))
 (let (($x319 (and $x323 $x315)))
 (let (($x184 (= $x319 true)))
 (let (($x322 (= $x184 true)))
 (let (($x50 (= $x322 true)))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x125 (bvadd ?x28 input.dst.llvm-%m1)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x174))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 ?x378))))))))))
 ))
 (let (($x452 (and $x281 $x211)))
 (let (($x305 (= $x452 true)))
 (let (($x382 (= $x305 true)))
 (let (($x86 (= $x382 true)))
 (let (($x563 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x565 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x559 (and $x565 $x563)))
 (let (($x560 (= $x559 true)))
 (let (($x558 (= $x560 true)))
 (let (($x561 (= $x558 true)))
 (let ((?x79 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x79)))
 (let ((?x56 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x260 (= (_ bv0 32) ?x56)))
 (let ((?x295 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x295)))
 (let ((?x359 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x439 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x359)))
 (let (($x358 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x358 $x439)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x198 (and $x155 $x236)))
 (let (($x152 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (and $x187 $x403)))
 (let (($x57 (not $x233)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x191 $x114)))
 (let (($x372 (and (not $x261) $x57)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x126 $x297)))
 (let (($x222 (not $x85)))
 (let (($x407 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x25 $x407)))
 (let (($x221 (and (not $x352) $x222)))
 (let (($x398 (and (and (and (and (and (and $x221 $x372) $x328) $x152) $x198) $x331) $x260)))
 (let (($x225 (and $x398 $x88)))
 (let (($x274 (= $x225 true)))
 (let (($x399 (= $x274 true)))
 (let (($x129 (= $x399 true)))
 (let ((?x255 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x265 (= (_ bv0 2) ?x255)))
 (let (($x390 (= $x265 true)))
 (let (($x426 (= $x390 true)))
 (let (($x159 (and $x426 $x129)))
 (let (($x564 (and $x159 $x561)))
 (let (($x120 (and $x564 $x86)))
 (let (($x22 (and $x120 $x50)))
 (let (($x44 (and $x22 $x207)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (= $x311 (bvuge ?x360 (_ bv1 32)))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (= $x163 (= ?x360 (_ bv0 32)))))))
 ))
 (let (($x239 (and $x41 $x424)))
 (let (($x117 (and $x239 $x102)))
 (let (($x177 (and $x117 $x237)))
 (let (($x444 (and $x177 $x44)))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x447 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (=> $x394 (= ?x447 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (= $x394 (bvuge ?x249 (_ bv1 32)))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (= $x457 (= ?x249 (_ bv0 32)))))))
 ))
 (let (($x244 (and $x19 $x247)))
 (let (($x442 (and $x244 $x208)))
 (let (($x232 (and $x442 $x314)))
 (let (($x190 (and $x232 $x444)))
 (let (($x35 (=> $x190 $x137)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xed27f784)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xafb8460c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0f492010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0f492013)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xafb8460f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0f492010)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xafb8460c)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xed27f784) #x01
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!18 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000001
      (concat (k!15 (bvadd #xed27f787 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f786 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f785 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f784 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000001
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x10314d08)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0956d684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000030)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04cbcc90)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04cbcc93)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0956d687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04cbcc90)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0956d684)
  (define-fun input.spec-%var-m2-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!18 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000030 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000030)
         #x00000000))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000c3) #x20
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000030)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x10314d0b (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d0a (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d09 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d08 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x20000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x20000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000030) true
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x455 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_1 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x536 (bvadd ?x250 ?x455)))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv1 32))) (select input.dst.llvm-mem ?x536))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv2 32))) ?x540))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 ?x553)))))))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x24 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (= $x312 $x313))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x115 (= false false)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (=> $x186 $x115)))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x24 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (= $x186 $x146))))))
 ))
 (let (($x431 (and $x292 $x366)))
 (let (($x78 (and $x431 $x209)))
 (let (($x547 (and $x78 $x546)))
 (let (($x545 (= $x547 true)))
 (let (($x548 (= $x545 true)))
 (let ((?x396 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x391 (= (_ bv0 2) ?x396)))
 (let (($x309 (= $x391 true)))
 (let (($x10 (= $x309 true)))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x145 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem ?x145))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv2 32))) ?x179))))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (=> $x126 (= ?x372 ?x481))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x24 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (= $x126 $x313))))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x115 (= false false)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (=> $x251 $x115)))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x24 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (= $x251 $x146))))))
 ))
 (let (($x8 (and $x330 $x9)))
 (let (($x64 (and $x8 $x408)))
 (let (($x108 (and $x64 $x273)))
 (let (($x483 (= $x108 true)))
 (let (($x484 (= $x483 true)))
 (let (($x409 (= $x484 true)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x411 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x340))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 ?x158))))))))))
 ))
 (let (($x324 (and $x78 $x347)))
 (let (($x438 (= $x324 true)))
 (let (($x418 (= $x438 true)))
 (let (($x308 (= $x418 true)))
 (let (($x60 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x574 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x230 (and $x574 $x60)))
 (let (($x52 (= $x230 true)))
 (let (($x71 (= $x52 true)))
 (let (($x213 (= $x71 true)))
 (let ((?x497 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x498 (= (_ bv0 32) ?x497)))
 (let ((?x412 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x496 (= (_ bv0 32) ?x412)))
 (let ((?x307 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x307)))
 (let ((?x386 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x386)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (and $x137 $x259)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x6 $x215)))
 (let (($x384 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x150 $x106)))
 (let (($x44 (not $x207)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x50 $x22)))
 (let (($x190 (and (not $x93) $x44)))
 (let (($x420 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x423 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x423 $x420)))
 (let (($x319 (not $x315)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x231 $x277)))
 (let (($x322 (and (not $x32) $x319)))
 (let (($x488 (and (and (and (and (and (and $x322 $x190) $x139) $x384) $x200) $x141) $x496)))
 (let (($x493 (and $x488 $x498)))
 (let (($x494 (= $x493 true)))
 (let (($x567 (= $x494 true)))
 (let (($x568 (= $x567 true)))
 (let ((?x354 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x228 (= (_ bv0 2) ?x354)))
 (let (($x339 (= $x228 true)))
 (let (($x465 (= $x339 true)))
 (let (($x570 (and $x465 $x568)))
 (let (($x370 (and $x570 $x213)))
 (let (($x489 (and $x370 $x308)))
 (let (($x482 (and $x489 $x409)))
 (let (($x351 (and $x482 $x10)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (= $x312 (bvuge ?x564 (_ bv1 32)))))))
 ))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (= $x186 (= ?x564 (_ bv0 32)))))))
 ))
 (let (($x201 (and $x176 $x366)))
 (let (($x174 (and $x201 $x383)))
 (let (($x393 (and $x174 $x448)))
 (let (($x157 (and $x393 $x351)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (=> $x126 (= ?x372 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (= $x126 (bvuge ?x87 (_ bv1 32)))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (= $x251 (= ?x87 (_ bv0 32)))))))
 ))
 (let (($x33 (and $x355 $x9)))
 (let (($x222 (and $x33 $x85)))
 (let (($x293 (and $x222 $x328)))
 (let (($x342 (and $x293 $x157)))
 (let (($x551 (=> $x342 $x548)))
 (let (($x554 (not $x551)))
 (let (($x361 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x195 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x389 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x364 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x389)))
 (let (($x130 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x389)))
 (let (($x268 (or false (or false (and (and true (or $x7 $x130)) (or $x364 $x195))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x268) (= (select solver-mem_1 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_1 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x361) $x554)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x455 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_1 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x536 (bvadd ?x250 ?x455)))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv1 32))) (select input.dst.llvm-mem ?x536))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv2 32))) ?x540))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 ?x553)))))))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x24 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (= $x312 $x313))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x115 (= false false)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (=> $x186 $x115)))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x24 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (= $x186 $x146))))))
 ))
 (let (($x431 (and $x292 $x366)))
 (let (($x78 (and $x431 $x209)))
 (let (($x547 (and $x78 $x546)))
 (let (($x545 (= $x547 true)))
 (let (($x548 (= $x545 true)))
 (let ((?x396 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x391 (= (_ bv0 2) ?x396)))
 (let (($x309 (= $x391 true)))
 (let (($x10 (= $x309 true)))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x145 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem ?x145))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv2 32))) ?x179))))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (=> $x126 (= ?x372 ?x481))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x24 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (= $x126 $x313))))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x115 (= false false)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (=> $x251 $x115)))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x24 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (= $x251 $x146))))))
 ))
 (let (($x8 (and $x330 $x9)))
 (let (($x64 (and $x8 $x408)))
 (let (($x108 (and $x64 $x273)))
 (let (($x483 (= $x108 true)))
 (let (($x484 (= $x483 true)))
 (let (($x409 (= $x484 true)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x411 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x340))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 ?x158))))))))))
 ))
 (let (($x324 (and $x78 $x347)))
 (let (($x438 (= $x324 true)))
 (let (($x418 (= $x438 true)))
 (let (($x308 (= $x418 true)))
 (let (($x60 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x574 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x230 (and $x574 $x60)))
 (let (($x52 (= $x230 true)))
 (let (($x71 (= $x52 true)))
 (let (($x213 (= $x71 true)))
 (let ((?x497 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x498 (= (_ bv0 32) ?x497)))
 (let ((?x412 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x496 (= (_ bv0 32) ?x412)))
 (let ((?x307 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x307)))
 (let ((?x386 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x386)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (and $x137 $x259)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x6 $x215)))
 (let (($x384 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x150 $x106)))
 (let (($x44 (not $x207)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x50 $x22)))
 (let (($x190 (and (not $x93) $x44)))
 (let (($x420 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x423 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x423 $x420)))
 (let (($x319 (not $x315)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x231 $x277)))
 (let (($x322 (and (not $x32) $x319)))
 (let (($x488 (and (and (and (and (and (and $x322 $x190) $x139) $x384) $x200) $x141) $x496)))
 (let (($x493 (and $x488 $x498)))
 (let (($x494 (= $x493 true)))
 (let (($x567 (= $x494 true)))
 (let (($x568 (= $x567 true)))
 (let ((?x354 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x228 (= (_ bv0 2) ?x354)))
 (let (($x339 (= $x228 true)))
 (let (($x465 (= $x339 true)))
 (let (($x570 (and $x465 $x568)))
 (let (($x370 (and $x570 $x213)))
 (let (($x489 (and $x370 $x308)))
 (let (($x482 (and $x489 $x409)))
 (let (($x351 (and $x482 $x10)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (= $x312 (bvuge ?x564 (_ bv1 32)))))))
 ))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (= $x186 (= ?x564 (_ bv0 32)))))))
 ))
 (let (($x201 (and $x176 $x366)))
 (let (($x174 (and $x201 $x383)))
 (let (($x393 (and $x174 $x448)))
 (let (($x157 (and $x393 $x351)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (=> $x126 (= ?x372 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (= $x126 (bvuge ?x87 (_ bv1 32)))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (= $x251 (= ?x87 (_ bv0 32)))))))
 ))
 (let (($x33 (and $x355 $x9)))
 (let (($x222 (and $x33 $x85)))
 (let (($x293 (and $x222 $x328)))
 (let (($x342 (and $x293 $x157)))
 (let (($x551 (=> $x342 $x548)))
 (let (($x554 (not $x551)))
 (let (($x361 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x195 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x389 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x364 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x389)))
 (let (($x130 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x389)))
 (let (($x268 (or false (or false (and (and true (or $x7 $x130)) (or $x364 $x195))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x268) (= (select solver-mem_1 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_1 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x361) $x554)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!80))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x21000400)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d0b1a14)
  (define-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!80))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!81))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d0b1a17)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x21000403)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d0b1a14)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x21000400)
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x21000401 x!0)
                    (ite (bvule #x21000403 x!0)
                         (ite (bvule #x21000404 x!0) #x21000404 #x21000403)
                         #x21000401)
                    #x21000400)))
    (let ((a!2 (ite (bvule #x0d0b1a18 x!0)
                    (ite (bvule #x10040004 x!0)
                         (ite (bvule #x21000400 x!0) a!1 #x10040004)
                         #x0d0b1a18)
                    #x0d0b1a17)))
    (let ((a!3 (ite (bvule #x0d0b1a14 x!0)
                    (ite (bvule #x0d0b1a15 x!0)
                         (ite (bvule #x0d0b1a17 x!0) a!2 #x0d0b1a15)
                         #x0d0b1a14)
                    #x04000003)))
    (let ((a!4 (ite (bvule #x04000001 x!0)
                    (ite (bvule #x04000002 x!0)
                         (ite (bvule #x04000003 x!0) a!3 #x04000002)
                         #x04000001)
                    #x04000000)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x04000000 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!80!85 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000000) #x00
    (ite (= x!0 #x21000400) #x00
    (ite (= x!0 #x0d0b1a15) #x00
    (ite (= x!0 #x21000404) #x40
    (ite (= x!0 #x00000001) #x40
    (ite (= x!0 #x0d0b1a14) #x00
    (ite (= x!0 #x21000401) #x00
    (ite (= x!0 #x0d093452) #x10
    (ite (= x!0 #x04000002) #x00
    (ite (= x!0 #x0d0b1a18) #x10
    (ite (= x!0 #x0d0b1a17) #x00
    (ite (= x!0 #x10040004) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x04000001) #x00
    (ite (= x!0 #x04000003) #x00
    (ite (= x!0 #x21000403) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000002) #x04
      #x02)))))))))))))))))))
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!80!85 (k!82 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!86 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!86 (k!84 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (concat (k!80 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!80 (bvmul #x00000004 x!0)))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!80))
              (= x!3 (_ as-array k!81))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x04000000
      #x00000010))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!87 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!87 (k!83 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (concat (k!80 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!80 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x14)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x79 (= false true)))
 (let (($x88 (= $x79 true)))
 (let ((?x212 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x14 (= (_ bv0 32) ?x212)))
 (let ((?x140 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x435 (= (_ bv0 32) ?x140)))
 (let ((?x221 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x203 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x474 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x203)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x407 (and $x132 $x474)))
 (let (($x385 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x385 $x407)))
 (let (($x437 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x426 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x350 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x360 $x350)))
 (let (($x237 (not $x69)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x405 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x405 $x127)))
 (let (($x265 (and (not $x13) $x237)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x433 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x433 $x109)))
 (let (($x217 (not $x206)))
 (let (($x459 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x30 $x459)))
 (let (($x168 (and (not $x193) $x217)))
 (let (($x306 (and (and (and (and (and (and $x168 $x265) $x426) $x437) $x135) $x191) $x435)))
 (let (($x142 (and $x306 $x14)))
 (let (($x238 (= $x142 true)))
 (let (($x100 (= $x238 true)))
 (let (($x205 (= $x100 true)))
 (let (($x66 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x91 (bvadd ?x402 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x501 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x417))))
 (let ((?x448 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (=> $x176 (= ?x448 ?x501))))))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x551 (_ bv1 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (= $x176 $x56))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (=> $x9 $x227)))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (= $x9 $x554))))))
 ))
 (let (($x47 (and $x572 $x222)))
 (let (($x378 (and $x47 $x283)))
 (let (($x131 (and $x378 $x66)))
 (let (($x500 (= $x131 true)))
 (let (($x576 (= $x500 true)))
 (let (($x298 (= $x576 true)))
 (let ((?x436 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x388 (= (_ bv0 2) ?x436)))
 (let (($x245 (= $x388 true)))
 (let (($x285 (= $x245 true)))
 (let (($x310 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x134 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x380 (and $x134 $x310)))
 (let (($x83 (= $x380 true)))
 (let (($x304 (= $x83 true)))
 (let (($x416 (= $x304 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x11 (= (_ bv0 2) ?x182)))
 (let (($x329 (= $x11 true)))
 (let (($x20 (= $x329 true)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x492 (bvadd ?x402 input.dst.llvm-%m1)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv1 32))) (select input.dst.llvm-mem ?x492))))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv2 32))) ?x147))))
 (let ((?x194 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (=> $x71 (= ?x194 ?x427))))))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x551 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (= $x71 $x56))))))
 ))
 (let (($x498 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (=> $x485 $x227)))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (= $x485 $x554))))))
 ))
 (let (($x326 (and $x46 $x498)))
 (let (($x70 (and $x326 $x398)))
 (let (($x104 (and $x70 $x320)))
 (let (($x422 (= $x104 true)))
 (let (($x133 (= $x422 true)))
 (let (($x165 (= $x133 true)))
 (let (($x377 (and $x165 $x20)))
 (let (($x316 (and $x377 $x416)))
 (let (($x374 (and $x316 $x285)))
 (let (($x45 (and $x374 $x298)))
 (let (($x189 (and $x45 $x205)))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (=> $x71 (= ?x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (= $x71 (bvuge ?x200 (_ bv1 32)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (= $x485 (= ?x200 (_ bv0 32)))))))
 ))
 (let (($x493 (and $x496 $x498)))
 (let (($x143 (and $x493 $x370)))
 (let (($x250 (and $x143 $x254)))
 (let (($x453 (and $x250 $x189)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (=> $x176 (= ?x448 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (= $x176 (bvuge ?x344 (_ bv1 32)))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (= $x9 (= ?x344 (_ bv0 32)))))))
 ))
 (let (($x372 (and $x126 $x222)))
 (let (($x201 (and $x372 $x366)))
 (let (($x354 (and $x201 $x323)))
 (let (($x274 (and $x354 $x453)))
 (let (($x225 (=> $x274 $x88)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x79 (= false true)))
 (let (($x88 (= $x79 true)))
 (let ((?x212 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x14 (= (_ bv0 32) ?x212)))
 (let ((?x140 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x435 (= (_ bv0 32) ?x140)))
 (let ((?x221 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x203 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x474 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x203)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x407 (and $x132 $x474)))
 (let (($x385 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x385 $x407)))
 (let (($x437 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x426 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x350 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x360 $x350)))
 (let (($x237 (not $x69)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x405 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x405 $x127)))
 (let (($x265 (and (not $x13) $x237)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x433 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x433 $x109)))
 (let (($x217 (not $x206)))
 (let (($x459 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x30 $x459)))
 (let (($x168 (and (not $x193) $x217)))
 (let (($x306 (and (and (and (and (and (and $x168 $x265) $x426) $x437) $x135) $x191) $x435)))
 (let (($x142 (and $x306 $x14)))
 (let (($x238 (= $x142 true)))
 (let (($x100 (= $x238 true)))
 (let (($x205 (= $x100 true)))
 (let (($x66 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x91 (bvadd ?x402 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x501 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x417))))
 (let ((?x448 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (=> $x176 (= ?x448 ?x501))))))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x551 (_ bv1 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (= $x176 $x56))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (=> $x9 $x227)))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (= $x9 $x554))))))
 ))
 (let (($x47 (and $x572 $x222)))
 (let (($x378 (and $x47 $x283)))
 (let (($x131 (and $x378 $x66)))
 (let (($x500 (= $x131 true)))
 (let (($x576 (= $x500 true)))
 (let (($x298 (= $x576 true)))
 (let ((?x436 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x388 (= (_ bv0 2) ?x436)))
 (let (($x245 (= $x388 true)))
 (let (($x285 (= $x245 true)))
 (let (($x310 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x134 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x380 (and $x134 $x310)))
 (let (($x83 (= $x380 true)))
 (let (($x304 (= $x83 true)))
 (let (($x416 (= $x304 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x11 (= (_ bv0 2) ?x182)))
 (let (($x329 (= $x11 true)))
 (let (($x20 (= $x329 true)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x492 (bvadd ?x402 input.dst.llvm-%m1)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv1 32))) (select input.dst.llvm-mem ?x492))))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv2 32))) ?x147))))
 (let ((?x194 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (=> $x71 (= ?x194 ?x427))))))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x551 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (= $x71 $x56))))))
 ))
 (let (($x498 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (=> $x485 $x227)))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (= $x485 $x554))))))
 ))
 (let (($x326 (and $x46 $x498)))
 (let (($x70 (and $x326 $x398)))
 (let (($x104 (and $x70 $x320)))
 (let (($x422 (= $x104 true)))
 (let (($x133 (= $x422 true)))
 (let (($x165 (= $x133 true)))
 (let (($x377 (and $x165 $x20)))
 (let (($x316 (and $x377 $x416)))
 (let (($x374 (and $x316 $x285)))
 (let (($x45 (and $x374 $x298)))
 (let (($x189 (and $x45 $x205)))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (=> $x71 (= ?x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (= $x71 (bvuge ?x200 (_ bv1 32)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (= $x485 (= ?x200 (_ bv0 32)))))))
 ))
 (let (($x493 (and $x496 $x498)))
 (let (($x143 (and $x493 $x370)))
 (let (($x250 (and $x143 $x254)))
 (let (($x453 (and $x250 $x189)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (=> $x176 (= ?x448 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (= $x176 (bvuge ?x344 (_ bv1 32)))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (= $x9 (= ?x344 (_ bv0 32)))))))
 ))
 (let (($x372 (and $x126 $x222)))
 (let (($x201 (and $x372 $x366)))
 (let (($x354 (and $x201 $x323)))
 (let (($x274 (and $x354 $x453)))
 (let (($x225 (=> $x274 $x88)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00018080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xef028004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xef028007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00018083)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xef028004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00018080)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd5061dc4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbc572dd0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbc572dd3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd5061dc7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbc572dd0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd5061dc4)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x643 (= true false)))
 (let (($x644 (= $x643 true)))
 (let ((?x628 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x629 (= (_ bv0 32) ?x628)))
 (let ((?x626 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x627 (= (_ bv0 32) ?x626)))
 (let ((?x624 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x625 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x624)))
 (let ((?x620 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x621 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x620)))
 (let (($x619 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (and $x619 $x621)))
 (let (($x618 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x623 (and $x618 $x622)))
 (let (($x617 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x609 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x608 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x610 (and $x608 $x609)))
 (let (($x611 (not $x610)))
 (let (($x606 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x605 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x607 (and $x605 $x606)))
 (let (($x613 (and (not $x607) $x611)))
 (let (($x600 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x601 (and $x599 $x600)))
 (let (($x602 (not $x601)))
 (let (($x596 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x597 (and $x594 $x596)))
 (let (($x604 (and (not $x597) $x602)))
 (let (($x635 (and (and (and (and (and (and $x604 $x613) $x615) $x617) $x623) $x625) $x627)))
 (let (($x636 (and $x635 $x629)))
 (let (($x637 (= $x636 true)))
 (let (($x638 (= $x637 true)))
 (let (($x639 (= $x638 true)))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x415 (bvadd ?x336 input.dst.llvm-%m2)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem ?x415))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv2 32))) ?x579))))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 ?x583))))))))))
 ))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (= $x160 $x418))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (=> $x194 $x78)))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (= $x194 $x443))))))
 ))
 (let (($x404 (and $x269 $x545)))
 (let (($x347 (and $x404 $x43)))
 (let (($x587 (and $x347 $x586)))
 (let (($x588 (= $x587 true)))
 (let (($x589 (= $x588 true)))
 (let (($x590 (= $x589 true)))
 (let ((?x403 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x233 (= (_ bv0 2) ?x403)))
 (let (($x124 (= $x233 true)))
 (let (($x335 (= $x124 true)))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x287))))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x555))))))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (= $x193 $x418))))))
 ))
 (let (($x501 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (=> $x457 $x78)))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (= $x457 $x443))))))
 ))
 (let (($x406 (and $x72 $x501)))
 (let (($x293 (and $x406 $x311)))
 (let (($x429 (and $x293 $x25)))
 (let (($x352 (= $x429 true)))
 (let (($x116 (= $x352 true)))
 (let (($x114 (= $x116 true)))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x566))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv2 32))) ?x558)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv3 32))) ?x28)))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (=> $x459 (= ?x360 ?x73)))))))))))
 ))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (= $x459 $x418))))))
 ))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (=> $x394 $x78)))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (= $x394 $x443))))))
 ))
 (let (($x491 (and $x246 $x449)))
 (let (($x76 (and $x491 $x89)))
 (let (($x29 (and $x76 $x232)))
 (let (($x105 (= $x29 true)))
 (let (($x163 (= $x105 true)))
 (let (($x242 (= $x163 true)))
 (let (($x296 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x566))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv2 32))) ?x558)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv3 32))) ?x28)))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x73)))))))))))
 ))
 (let (($x95 (and $x293 $x296)))
 (let (($x452 (= $x95 true)))
 (let (($x305 (= $x452 true)))
 (let (($x382 (= $x305 true)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x287))))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (=> $x459 (= ?x360 ?x555))))))))))
 ))
 (let (($x31 (and $x76 $x57)))
 (let (($x61 (= $x31 true)))
 (let (($x328 (= $x61 true)))
 (let (($x266 (= $x328 true)))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x415 (bvadd ?x336 input.dst.llvm-%m2)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x415))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv2 32))) ?x108)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv3 32))) ?x32)))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 ?x315)))))))))))
 ))
 (let (($x391 (and $x347 $x50)))
 (let (($x483 (= $x391 true)))
 (let (($x409 (= $x483 true)))
 (let (($x484 (= $x409 true)))
 (let (($x118 (and $x484 $x266)))
 (let (($x376 (and $x118 $x382)))
 (let (($x41 (and $x376 $x242)))
 (let (($x261 (and $x41 $x114)))
 (let (($x413 (and $x261 $x335)))
 (let (($x591 (and $x413 $x590)))
 (let (($x640 (and $x591 $x639)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x360)))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (= $x193 $x459))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (= $x457 $x394))))))
 ))
 (let (($x235 (and $x19 $x501)))
 (let (($x433 (and $x235 $x154)))
 (let (($x181 (and $x433 $x265)))
 (let (($x641 (and $x181 $x640)))
 (let (($x288 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (= $x160 (bvuge ?x52 (_ bv1 32)))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (= $x194 (= ?x52 (_ bv0 32)))))))
 ))
 (let (($x144 (and $x209 $x545)))
 (let (($x492 (and $x144 $x276)))
 (let (($x381 (and $x492 $x288)))
 (let (($x642 (and $x381 $x641)))
 (let (($x645 (=> $x642 $x644)))
 (not $x645))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x643 (= true false)))
 (let (($x644 (= $x643 true)))
 (let ((?x628 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x629 (= (_ bv0 32) ?x628)))
 (let ((?x626 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x627 (= (_ bv0 32) ?x626)))
 (let ((?x624 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x625 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x624)))
 (let ((?x620 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x621 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x620)))
 (let (($x619 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (and $x619 $x621)))
 (let (($x618 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x623 (and $x618 $x622)))
 (let (($x617 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x609 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x608 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x610 (and $x608 $x609)))
 (let (($x611 (not $x610)))
 (let (($x606 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x605 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x607 (and $x605 $x606)))
 (let (($x613 (and (not $x607) $x611)))
 (let (($x600 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x601 (and $x599 $x600)))
 (let (($x602 (not $x601)))
 (let (($x596 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x597 (and $x594 $x596)))
 (let (($x604 (and (not $x597) $x602)))
 (let (($x635 (and (and (and (and (and (and $x604 $x613) $x615) $x617) $x623) $x625) $x627)))
 (let (($x636 (and $x635 $x629)))
 (let (($x637 (= $x636 true)))
 (let (($x638 (= $x637 true)))
 (let (($x639 (= $x638 true)))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x415 (bvadd ?x336 input.dst.llvm-%m2)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem ?x415))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv2 32))) ?x579))))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 ?x583))))))))))
 ))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (= $x160 $x418))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (=> $x194 $x78)))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (= $x194 $x443))))))
 ))
 (let (($x404 (and $x269 $x545)))
 (let (($x347 (and $x404 $x43)))
 (let (($x587 (and $x347 $x586)))
 (let (($x588 (= $x587 true)))
 (let (($x589 (= $x588 true)))
 (let (($x590 (= $x589 true)))
 (let ((?x403 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x233 (= (_ bv0 2) ?x403)))
 (let (($x124 (= $x233 true)))
 (let (($x335 (= $x124 true)))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x287))))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x555))))))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (= $x193 $x418))))))
 ))
 (let (($x501 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (=> $x457 $x78)))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (= $x457 $x443))))))
 ))
 (let (($x406 (and $x72 $x501)))
 (let (($x293 (and $x406 $x311)))
 (let (($x429 (and $x293 $x25)))
 (let (($x352 (= $x429 true)))
 (let (($x116 (= $x352 true)))
 (let (($x114 (= $x116 true)))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x566))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv2 32))) ?x558)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv3 32))) ?x28)))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (=> $x459 (= ?x360 ?x73)))))))))))
 ))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (= $x459 $x418))))))
 ))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (=> $x394 $x78)))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (= $x394 $x443))))))
 ))
 (let (($x491 (and $x246 $x449)))
 (let (($x76 (and $x491 $x89)))
 (let (($x29 (and $x76 $x232)))
 (let (($x105 (= $x29 true)))
 (let (($x163 (= $x105 true)))
 (let (($x242 (= $x163 true)))
 (let (($x296 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x566))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv2 32))) ?x558)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv3 32))) ?x28)))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x73)))))))))))
 ))
 (let (($x95 (and $x293 $x296)))
 (let (($x452 (= $x95 true)))
 (let (($x305 (= $x452 true)))
 (let (($x382 (= $x305 true)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x287))))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (=> $x459 (= ?x360 ?x555))))))))))
 ))
 (let (($x31 (and $x76 $x57)))
 (let (($x61 (= $x31 true)))
 (let (($x328 (= $x61 true)))
 (let (($x266 (= $x328 true)))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x415 (bvadd ?x336 input.dst.llvm-%m2)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x415))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv2 32))) ?x108)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv3 32))) ?x32)))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 ?x315)))))))))))
 ))
 (let (($x391 (and $x347 $x50)))
 (let (($x483 (= $x391 true)))
 (let (($x409 (= $x483 true)))
 (let (($x484 (= $x409 true)))
 (let (($x118 (and $x484 $x266)))
 (let (($x376 (and $x118 $x382)))
 (let (($x41 (and $x376 $x242)))
 (let (($x261 (and $x41 $x114)))
 (let (($x413 (and $x261 $x335)))
 (let (($x591 (and $x413 $x590)))
 (let (($x640 (and $x591 $x639)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x360)))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (= $x193 $x459))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (= $x457 $x394))))))
 ))
 (let (($x235 (and $x19 $x501)))
 (let (($x433 (and $x235 $x154)))
 (let (($x181 (and $x433 $x265)))
 (let (($x641 (and $x181 $x640)))
 (let (($x288 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (= $x160 (bvuge ?x52 (_ bv1 32)))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (= $x194 (= ?x52 (_ bv0 32)))))))
 ))
 (let (($x144 (and $x209 $x545)))
 (let (($x492 (and $x144 $x276)))
 (let (($x381 (and $x492 $x288)))
 (let (($x642 (and $x381 $x641)))
 (let (($x645 (=> $x642 $x644)))
 (not $x645))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x93d62328)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x83eadfc8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x44b4264b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x93d6232b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x93d62328)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfc8 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!38))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00100000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000003c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!39))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04421800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40040103)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000003f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000003c)
  (define-fun input.spec-%var-m2-1.0.1!42 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!42 (k!40 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x40040100) false
    (ite (= x!0 #x0000003c) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!44 (k!41 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421800 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!43 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!43 (k!41 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!39 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x653 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x660 (=> $x653 true)))
 (let (($x661 (= $x660 true)))
 (let (($x662 (= $x661 true)))
 (let (($x654 (= $x653 true)))
 (let (($x655 (= $x654 true)))
 (let (($x656 (= $x655 true)))
 (let ((?x264 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x564 (= (_ bv0 32) ?x264)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x153 (= (_ bv0 32) ?x86)))
 (let ((?x159 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x569 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x569)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (and $x102 $x226)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x461 $x186)))
 (let (($x161 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x230 $x24)))
 (let (($x451 (not $x234)))
 (let (($x577 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x386 $x577)))
 (let (($x431 (and (not $x60) $x451)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x574 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x571 (and $x574 $x259)))
 (let (($x137 (not $x571)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (and $x44 $x139)))
 (let (($x178 (and (not $x464) $x137)))
 (let (($x447 (and (and (and (and (and (and $x178 $x431) $x156) $x161) $x129) $x120) $x153)))
 (let (($x466 (and $x447 $x564)))
 (let (($x647 (= $x466 true)))
 (let (($x648 (= $x647 true)))
 (let (($x649 (= $x648 true)))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x252 input.dst.llvm-%m2)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x401))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 ?x338))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (= $x203 $x201))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (=> $x350 $x237)))))
 ))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (= $x350 $x133))))))
 ))
 (let (($x96 (and $x33 $x331)))
 (let (($x450 (and $x96 $x426)))
 (let (($x290 (and $x450 $x487)))
 (let (($x26 (= $x290 true)))
 (let (($x166 (= $x26 true)))
 (let (($x36 (= $x166 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x88 (= (_ bv0 2) ?x79)))
 (let (($x225 (= $x88 true)))
 (let (($x169 (= $x225 true)))
 (let (($x149 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x191 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x212 (and $x191 $x149)))
 (let (($x100 (= $x212 true)))
 (let (($x205 (= $x100 true)))
 (let (($x453 (= $x205 true)))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x562))))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x469))))))))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (= $x232 $x201))))))
 ))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (=> $x311 $x237)))))
 ))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (= $x311 $x133))))))
 ))
 (let (($x521 (and $x524 $x559)))
 (let (($x97 (and $x521 $x530)))
 (let (($x414 (and $x97 $x70)))
 (let (($x438 (= $x414 true)))
 (let (($x318 (= $x438 true)))
 (let (($x15 (= $x318 true)))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x45)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x30)))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (=> $x314 (= ?x114 ?x217)))))))))))
 ))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (= $x314 $x201))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (=> $x72 $x237)))))
 ))
 (let (($x468 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (= $x72 $x133))))))
 ))
 (let (($x374 (and $x468 $x172)))
 (let (($x175 (and $x374 $x417)))
 (let (($x412 (and $x175 $x485)))
 (let (($x496 (= $x412 true)))
 (let (($x497 (= $x496 true)))
 (let (($x498 (= $x497 true)))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x45)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x30)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x217)))))))))))
 ))
 (let (($x255 (and $x97 $x13)))
 (let (($x136 (= $x255 true)))
 (let (($x448 (= $x136 true)))
 (let (($x58 (= $x448 true)))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x562))))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (=> $x314 (= ?x114 ?x469))))))))))
 ))
 (let (($x424 (and $x175 $x240)))
 (let (($x126 (= $x424 true)))
 (let (($x355 (= $x126 true)))
 (let (($x9 (= $x355 true)))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x252 input.dst.llvm-%m2)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x214)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x270)))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 ?x327)))))))))))
 ))
 (let (($x188 (and $x450 $x38)))
 (let (($x112 (= $x188 true)))
 (let (($x113 (= $x112 true)))
 (let (($x309 (= $x113 true)))
 (let (($x389 (and $x309 $x9)))
 (let (($x393 (and $x389 $x58)))
 (let (($x556 (and $x393 $x498)))
 (let (($x349 (and $x556 $x15)))
 (let (($x189 (and $x349 $x453)))
 (let (($x367 (and $x189 $x169)))
 (let (($x190 (and $x367 $x36)))
 (let (($x650 (and $x190 $x649)))
 (let (($x657 (and $x650 $x656)))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x114)))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (= $x232 $x314))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (= $x311 $x72))))))
 ))
 (let (($x558 (and $x125 $x559)))
 (let (($x163 (and $x558 $x105)))
 (let (($x124 (and $x163 $x233)))
 (let (($x658 (and $x124 $x657)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x459 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (= $x203 (bvuge ?x459 (_ bv1 32)))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x459 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (= $x350 (= ?x459 (_ bv0 32)))))))
 ))
 (let (($x119 (and $x69 $x331)))
 (let (($x415 (and $x119 $x407)))
 (let (($x322 (and $x415 $x319)))
 (let (($x659 (and $x322 $x658)))
 (let (($x663 (=> $x659 $x662)))
 (not $x663)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x653 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x660 (=> $x653 true)))
 (let (($x661 (= $x660 true)))
 (let (($x662 (= $x661 true)))
 (let (($x654 (= $x653 true)))
 (let (($x655 (= $x654 true)))
 (let (($x656 (= $x655 true)))
 (let ((?x264 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x564 (= (_ bv0 32) ?x264)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x153 (= (_ bv0 32) ?x86)))
 (let ((?x159 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x569 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x569)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (and $x102 $x226)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x461 $x186)))
 (let (($x161 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x230 $x24)))
 (let (($x451 (not $x234)))
 (let (($x577 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x386 $x577)))
 (let (($x431 (and (not $x60) $x451)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x574 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x571 (and $x574 $x259)))
 (let (($x137 (not $x571)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (and $x44 $x139)))
 (let (($x178 (and (not $x464) $x137)))
 (let (($x447 (and (and (and (and (and (and $x178 $x431) $x156) $x161) $x129) $x120) $x153)))
 (let (($x466 (and $x447 $x564)))
 (let (($x647 (= $x466 true)))
 (let (($x648 (= $x647 true)))
 (let (($x649 (= $x648 true)))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x252 input.dst.llvm-%m2)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x401))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 ?x338))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (= $x203 $x201))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (=> $x350 $x237)))))
 ))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (= $x350 $x133))))))
 ))
 (let (($x96 (and $x33 $x331)))
 (let (($x450 (and $x96 $x426)))
 (let (($x290 (and $x450 $x487)))
 (let (($x26 (= $x290 true)))
 (let (($x166 (= $x26 true)))
 (let (($x36 (= $x166 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x88 (= (_ bv0 2) ?x79)))
 (let (($x225 (= $x88 true)))
 (let (($x169 (= $x225 true)))
 (let (($x149 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x191 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x212 (and $x191 $x149)))
 (let (($x100 (= $x212 true)))
 (let (($x205 (= $x100 true)))
 (let (($x453 (= $x205 true)))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x562))))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x469))))))))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (= $x232 $x201))))))
 ))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (=> $x311 $x237)))))
 ))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (= $x311 $x133))))))
 ))
 (let (($x521 (and $x524 $x559)))
 (let (($x97 (and $x521 $x530)))
 (let (($x414 (and $x97 $x70)))
 (let (($x438 (= $x414 true)))
 (let (($x318 (= $x438 true)))
 (let (($x15 (= $x318 true)))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x45)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x30)))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (=> $x314 (= ?x114 ?x217)))))))))))
 ))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (= $x314 $x201))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (=> $x72 $x237)))))
 ))
 (let (($x468 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (= $x72 $x133))))))
 ))
 (let (($x374 (and $x468 $x172)))
 (let (($x175 (and $x374 $x417)))
 (let (($x412 (and $x175 $x485)))
 (let (($x496 (= $x412 true)))
 (let (($x497 (= $x496 true)))
 (let (($x498 (= $x497 true)))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x45)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x30)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x217)))))))))))
 ))
 (let (($x255 (and $x97 $x13)))
 (let (($x136 (= $x255 true)))
 (let (($x448 (= $x136 true)))
 (let (($x58 (= $x448 true)))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x562))))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (=> $x314 (= ?x114 ?x469))))))))))
 ))
 (let (($x424 (and $x175 $x240)))
 (let (($x126 (= $x424 true)))
 (let (($x355 (= $x126 true)))
 (let (($x9 (= $x355 true)))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x252 input.dst.llvm-%m2)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x214)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x270)))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 ?x327)))))))))))
 ))
 (let (($x188 (and $x450 $x38)))
 (let (($x112 (= $x188 true)))
 (let (($x113 (= $x112 true)))
 (let (($x309 (= $x113 true)))
 (let (($x389 (and $x309 $x9)))
 (let (($x393 (and $x389 $x58)))
 (let (($x556 (and $x393 $x498)))
 (let (($x349 (and $x556 $x15)))
 (let (($x189 (and $x349 $x453)))
 (let (($x367 (and $x189 $x169)))
 (let (($x190 (and $x367 $x36)))
 (let (($x650 (and $x190 $x649)))
 (let (($x657 (and $x650 $x656)))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x114)))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (= $x232 $x314))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (= $x311 $x72))))))
 ))
 (let (($x558 (and $x125 $x559)))
 (let (($x163 (and $x558 $x105)))
 (let (($x124 (and $x163 $x233)))
 (let (($x658 (and $x124 $x657)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x459 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (= $x203 (bvuge ?x459 (_ bv1 32)))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x459 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (= $x350 (= ?x459 (_ bv0 32)))))))
 ))
 (let (($x119 (and $x69 $x331)))
 (let (($x415 (and $x119 $x407)))
 (let (($x322 (and $x415 $x319)))
 (let (($x659 (and $x322 $x658)))
 (let (($x663 (=> $x659 $x662)))
 (not $x663)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x380 (= false true)))
 (let (($x316 (= $x380 true)))
 (let ((?x523 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x522 (= (_ bv0 32) ?x523)))
 (let ((?x253 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x75 (= (_ bv0 32) ?x253)))
 (let ((?x519 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x519)))
 (let ((?x514 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x515 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x514)))
 (let (($x548 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x518 (and $x548 $x515)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x345 $x518)))
 (let (($x547 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x512 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x517 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x517 $x512)))
 (let (($x62 (not $x200)))
 (let (($x508 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x511 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x505 (and $x511 $x508)))
 (let (($x513 (and (not $x505) $x62)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x183 $x185)))
 (let (($x206 (not $x236)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x142 $x333)))
 (let (($x215 (and (not $x294) $x206)))
 (let (($x534 (and (and (and (and (and (and $x215 $x513) $x554) $x547) $x260) $x8) $x75)))
 (let (($x416 (and $x534 $x522)))
 (let (($x285 (= $x416 true)))
 (let (($x47 (= $x285 true)))
 (let (($x436 (= $x47 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x413 (bvadd ?x335 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x280))))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 ?x243))))))))))
 ))
 (let (($x664 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (= $x583 $x662))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (=> $x261 $x403)))))
 ))
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (= $x261 $x650))))))
 ))
 (let (($x653 (and $x652 $x320)))
 (let (($x50 (and $x653 $x664)))
 (let (($x221 (and $x50 $x474)))
 (let (($x37 (= $x221 true)))
 (let (($x371 (= $x37 true)))
 (let (($x435 (= $x371 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x179 (= (_ bv0 2) ?x277)))
 (let (($x495 (= $x179 true)))
 (let (($x597 (= $x495 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x19 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x457 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x247 (and $x457 $x19)))
 (let (($x404 (and $x247 $x269)))
 (let (($x418 (= $x404 true)))
 (let (($x43 (= $x418 true)))
 (let (($x347 (= $x43 true)))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem ?x527))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv2 32))) ?x284))))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x359))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (= $x485 $x662))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (=> $x530 $x403)))))
 ))
 (let (($x645 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (= $x530 $x650))))))
 ))
 (let (($x265 (and $x645 $x576)))
 (let (($x241 (and $x265 $x303)))
 (let (($x147 (and $x241 $x427)))
 (let (($x42 (= $x147 true)))
 (let (($x400 (= $x42 true)))
 (let (($x288 (= $x400 true)))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x423 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x527))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv2 32))) ?x423)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv3 32))) ?x387)))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (=> $x141 (= ?x15 ?x361)))))))))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (= $x141 $x662))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (=> $x524 $x403)))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (= $x524 $x650))))))
 ))
 (let (($x155 (and $x20 $x107)))
 (let (($x291 (and $x155 $x152)))
 (let (($x452 (and $x291 $x95)))
 (let (($x305 (= $x452 true)))
 (let (($x376 (= $x305 true)))
 (let (($x223 (= $x376 true)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x423 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x527))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv2 32))) ?x423)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv3 32))) ?x387)))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x361)))))))))))
 ))
 (let (($x65 (and $x241 $x332)))
 (let (($x287 (= $x65 true)))
 (let (($x282 (= $x287 true)))
 (let (($x555 (= $x282 true)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem ?x527))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv2 32))) ?x284))))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (=> $x141 (= ?x15 ?x359))))))))))
 ))
 (let (($x526 (and $x291 $x40)))
 (let (($x242 (= $x526 true)))
 (let (($x41 (= $x242 true)))
 (let (($x66 (= $x41 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x413 (bvadd ?x335 input.dst.llvm-%m2)))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x413))))
 (let ((?x586 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv2 32))) ?x584)))
 (let ((?x592 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv3 32))) ?x586)))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 ?x592)))))))))))
 ))
 (let (($x231 (and $x50 $x275)))
 (let (($x228 (= $x231 true)))
 (let (($x399 (= $x228 true)))
 (let (($x173 (= $x399 true)))
 (let (($x131 (and $x173 $x66)))
 (let (($x31 (and $x131 $x555)))
 (let (($x63 (and $x31 $x223)))
 (let (($x381 (and $x63 $x288)))
 (let (($x420 (and $x381 $x347)))
 (let (($x593 (and $x420 $x597)))
 (let (($x132 (and $x593 $x435)))
 (let (($x388 (and $x132 $x436)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x15)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (= $x485 $x141))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (= $x530 $x524))))))
 ))
 (let (($x45 (and $x82 $x576)))
 (let (($x497 (and $x45 $x496)))
 (let (($x299 (and $x497 $x191)))
 (let (($x83 (and $x299 $x388)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (= $x583 (bvuge ?x314 (_ bv1 32)))))))
 ))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (= $x261 (= ?x314 (_ bv0 32)))))))
 ))
 (let (($x582 (and $x187 $x320)))
 (let (($x34 (and $x582 $x585)))
 (let (($x219 (and $x34 $x151)))
 (let (($x304 (and $x219 $x83)))
 (let (($x245 (=> $x304 $x316)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x380 (= false true)))
 (let (($x316 (= $x380 true)))
 (let ((?x523 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x522 (= (_ bv0 32) ?x523)))
 (let ((?x253 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x75 (= (_ bv0 32) ?x253)))
 (let ((?x519 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x519)))
 (let ((?x514 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x515 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x514)))
 (let (($x548 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x518 (and $x548 $x515)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x345 $x518)))
 (let (($x547 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x512 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x517 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x517 $x512)))
 (let (($x62 (not $x200)))
 (let (($x508 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x511 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x505 (and $x511 $x508)))
 (let (($x513 (and (not $x505) $x62)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x183 $x185)))
 (let (($x206 (not $x236)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x142 $x333)))
 (let (($x215 (and (not $x294) $x206)))
 (let (($x534 (and (and (and (and (and (and $x215 $x513) $x554) $x547) $x260) $x8) $x75)))
 (let (($x416 (and $x534 $x522)))
 (let (($x285 (= $x416 true)))
 (let (($x47 (= $x285 true)))
 (let (($x436 (= $x47 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x413 (bvadd ?x335 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x280))))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 ?x243))))))))))
 ))
 (let (($x664 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (= $x583 $x662))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (=> $x261 $x403)))))
 ))
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (= $x261 $x650))))))
 ))
 (let (($x653 (and $x652 $x320)))
 (let (($x50 (and $x653 $x664)))
 (let (($x221 (and $x50 $x474)))
 (let (($x37 (= $x221 true)))
 (let (($x371 (= $x37 true)))
 (let (($x435 (= $x371 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x179 (= (_ bv0 2) ?x277)))
 (let (($x495 (= $x179 true)))
 (let (($x597 (= $x495 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x19 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x457 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x247 (and $x457 $x19)))
 (let (($x404 (and $x247 $x269)))
 (let (($x418 (= $x404 true)))
 (let (($x43 (= $x418 true)))
 (let (($x347 (= $x43 true)))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem ?x527))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv2 32))) ?x284))))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x359))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (= $x485 $x662))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (=> $x530 $x403)))))
 ))
 (let (($x645 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (= $x530 $x650))))))
 ))
 (let (($x265 (and $x645 $x576)))
 (let (($x241 (and $x265 $x303)))
 (let (($x147 (and $x241 $x427)))
 (let (($x42 (= $x147 true)))
 (let (($x400 (= $x42 true)))
 (let (($x288 (= $x400 true)))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x423 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x527))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv2 32))) ?x423)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv3 32))) ?x387)))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (=> $x141 (= ?x15 ?x361)))))))))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (= $x141 $x662))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (=> $x524 $x403)))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (= $x524 $x650))))))
 ))
 (let (($x155 (and $x20 $x107)))
 (let (($x291 (and $x155 $x152)))
 (let (($x452 (and $x291 $x95)))
 (let (($x305 (= $x452 true)))
 (let (($x376 (= $x305 true)))
 (let (($x223 (= $x376 true)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x423 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x527))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv2 32))) ?x423)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv3 32))) ?x387)))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x361)))))))))))
 ))
 (let (($x65 (and $x241 $x332)))
 (let (($x287 (= $x65 true)))
 (let (($x282 (= $x287 true)))
 (let (($x555 (= $x282 true)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem ?x527))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv2 32))) ?x284))))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (=> $x141 (= ?x15 ?x359))))))))))
 ))
 (let (($x526 (and $x291 $x40)))
 (let (($x242 (= $x526 true)))
 (let (($x41 (= $x242 true)))
 (let (($x66 (= $x41 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x413 (bvadd ?x335 input.dst.llvm-%m2)))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x413))))
 (let ((?x586 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv2 32))) ?x584)))
 (let ((?x592 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv3 32))) ?x586)))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 ?x592)))))))))))
 ))
 (let (($x231 (and $x50 $x275)))
 (let (($x228 (= $x231 true)))
 (let (($x399 (= $x228 true)))
 (let (($x173 (= $x399 true)))
 (let (($x131 (and $x173 $x66)))
 (let (($x31 (and $x131 $x555)))
 (let (($x63 (and $x31 $x223)))
 (let (($x381 (and $x63 $x288)))
 (let (($x420 (and $x381 $x347)))
 (let (($x593 (and $x420 $x597)))
 (let (($x132 (and $x593 $x435)))
 (let (($x388 (and $x132 $x436)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x15)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (= $x485 $x141))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (= $x530 $x524))))))
 ))
 (let (($x45 (and $x82 $x576)))
 (let (($x497 (and $x45 $x496)))
 (let (($x299 (and $x497 $x191)))
 (let (($x83 (and $x299 $x388)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (= $x583 (bvuge ?x314 (_ bv1 32)))))))
 ))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (= $x261 (= ?x314 (_ bv0 32)))))))
 ))
 (let (($x582 (and $x187 $x320)))
 (let (($x34 (and $x582 $x585)))
 (let (($x219 (and $x34 $x151)))
 (let (($x304 (and $x219 $x83)))
 (let (($x245 (=> $x304 $x316)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1e574863)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x44d84147)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x419 (= (_ bv0 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x346 (= $x419 true)))
 (let (($x489 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x366 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x379 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x14 (and $x379 $x366)))
 (let (($x220 (and $x14 $x489)))
 (let (($x262 (= $x220 true)))
 (let (($x441 (= $x262 true)))
 (let (($x184 (= $x441 true)))
 (let ((?x256 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x93 (= (_ bv0 32) ?x256)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x428 (= (_ bv0 32) ?x195)))
 (let ((?x150 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x368 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x456 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x456)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x341 (and $x375 $x411)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x439 (and $x434 $x341)))
 (let (($x348 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x463 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x492 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (and $x492 $x463)))
 (let (($x570 (not $x329)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x566 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x566 $x402)))
 (let (($x644 (and (not $x276) $x570)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x482 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x482 $x396)))
 (let (($x344 (not $x177)))
 (let (($x409 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x391 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (and $x391 $x409)))
 (let (($x143 (and (not $x325) $x344)))
 (let (($x55 (and (and (and (and (and (and $x143 $x644) $x317) $x348) $x439) $x368) $x428)))
 (let (($x239 (and $x55 $x93)))
 (let (($x91 (= $x239 true)))
 (let (($x295 (= $x91 true)))
 (let (($x279 (= $x295 true)))
 (let (($x159 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x225 (bvadd ?x235 input.dst.llvm-%m2)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x16))))
 (let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 ?x129))))))))))
 ))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (= $x88 $x188))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (=> $x349 $x306)))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (= $x349 $x416))))))
 ))
 (let (($x436 (and $x47 $x647)))
 (let (($x154 (and $x436 $x113)))
 (let (($x120 (and $x154 $x159)))
 (let (($x654 (= $x120 true)))
 (let (($x656 (= $x654 true)))
 (let (($x655 (= $x656 true)))
 (let ((?x560 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x559 (= (_ bv0 2) ?x560)))
 (let (($x115 (= $x559 true)))
 (let (($x33 (= $x115 true)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x208))))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x358))))))))))
 ))
 (let (($x595 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (= $x95 $x188))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (=> $x303 $x306)))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (= $x303 $x416))))))
 ))
 (let (($x133 (and $x422 $x324)))
 (let (($x476 (and $x133 $x595)))
 (let (($x322 (and $x476 $x319)))
 (let (($x406 (= $x322 true)))
 (let (($x251 (= $x406 true)))
 (let (($x311 (= $x251 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x440 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x440)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x257)))
 (let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (=> $x296 (= ?x288 ?x167)))))))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (= $x296 $x188))))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (=> $x645 $x306)))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (= $x645 $x416))))))
 ))
 (let (($x384 (and $x165 $x484)))
 (let (($x449 (and $x384 $x491)))
 (let (($x56 (and $x449 $x307)))
 (let (($x398 (= $x56 true)))
 (let (($x414 (= $x398 true)))
 (let (($x438 (= $x414 true)))
 (let (($x469 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x440 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x440)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x257)))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x167)))))))))))
 ))
 (let (($x424 (and $x476 $x469)))
 (let (($x126 (= $x424 true)))
 (let (($x355 (= $x126 true)))
 (let (($x9 (= $x355 true)))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x208))))
 (let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (=> $x296 (= ?x288 ?x358))))))))))
 ))
 (let (($x486 (and $x449 $x171)))
 (let (($x490 (= $x486 true)))
 (let (($x641 (= $x490 true)))
 (let (($x640 (= $x641 true)))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x225 (bvadd ?x235 input.dst.llvm-%m2)))
 (let ((?x487 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x225))))
 (let ((?x594 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv2 32))) ?x487)))
 (let ((?x589 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv3 32))) ?x594)))
 (let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 ?x589)))))))))))
 ))
 (let (($x599 (and $x154 $x600)))
 (let (($x602 (= $x599 true)))
 (let (($x601 (= $x602 true)))
 (let (($x604 (= $x601 true)))
 (let (($x421 (and $x604 $x640)))
 (let (($x13 (and $x421 $x9)))
 (let (($x318 (and $x13 $x438)))
 (let (($x293 (and $x318 $x311)))
 (let (($x96 (and $x293 $x33)))
 (let (($x657 (and $x96 $x655)))
 (let (($x357 (and $x657 $x279)))
 (let (($x49 (and $x357 $x184)))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x288)))))))
 ))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (= $x95 $x296))))))
 ))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (= $x303 $x645))))))
 ))
 (let (($x423 (and $x410 $x324)))
 (let (($x376 (and $x423 $x305)))
 (let (($x39 (and $x376 $x457)))
 (let (($x158 (and $x39 $x49)))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (= $x88 (bvuge ?x141 (_ bv1 32)))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (= $x349 (= ?x141 (_ bv0 32)))))))
 ))
 (let (($x100 (and $x238 $x647)))
 (let (($x413 (and $x100 $x169)))
 (let (($x588 (and $x413 $x339)))
 (let (($x445 (and $x588 $x158)))
 (let (($x61 (=> $x445 $x346)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x419 (= (_ bv0 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x346 (= $x419 true)))
 (let (($x489 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x366 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x379 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x14 (and $x379 $x366)))
 (let (($x220 (and $x14 $x489)))
 (let (($x262 (= $x220 true)))
 (let (($x441 (= $x262 true)))
 (let (($x184 (= $x441 true)))
 (let ((?x256 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x93 (= (_ bv0 32) ?x256)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x428 (= (_ bv0 32) ?x195)))
 (let ((?x150 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x368 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x456 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x456)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x341 (and $x375 $x411)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x439 (and $x434 $x341)))
 (let (($x348 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x463 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x492 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (and $x492 $x463)))
 (let (($x570 (not $x329)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x566 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x566 $x402)))
 (let (($x644 (and (not $x276) $x570)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x482 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x482 $x396)))
 (let (($x344 (not $x177)))
 (let (($x409 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x391 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (and $x391 $x409)))
 (let (($x143 (and (not $x325) $x344)))
 (let (($x55 (and (and (and (and (and (and $x143 $x644) $x317) $x348) $x439) $x368) $x428)))
 (let (($x239 (and $x55 $x93)))
 (let (($x91 (= $x239 true)))
 (let (($x295 (= $x91 true)))
 (let (($x279 (= $x295 true)))
 (let (($x159 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x225 (bvadd ?x235 input.dst.llvm-%m2)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x16))))
 (let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 ?x129))))))))))
 ))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (= $x88 $x188))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (=> $x349 $x306)))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (= $x349 $x416))))))
 ))
 (let (($x436 (and $x47 $x647)))
 (let (($x154 (and $x436 $x113)))
 (let (($x120 (and $x154 $x159)))
 (let (($x654 (= $x120 true)))
 (let (($x656 (= $x654 true)))
 (let (($x655 (= $x656 true)))
 (let ((?x560 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x559 (= (_ bv0 2) ?x560)))
 (let (($x115 (= $x559 true)))
 (let (($x33 (= $x115 true)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x208))))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x358))))))))))
 ))
 (let (($x595 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (= $x95 $x188))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (=> $x303 $x306)))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (= $x303 $x416))))))
 ))
 (let (($x133 (and $x422 $x324)))
 (let (($x476 (and $x133 $x595)))
 (let (($x322 (and $x476 $x319)))
 (let (($x406 (= $x322 true)))
 (let (($x251 (= $x406 true)))
 (let (($x311 (= $x251 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x440 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x440)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x257)))
 (let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (=> $x296 (= ?x288 ?x167)))))))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (= $x296 $x188))))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (=> $x645 $x306)))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (= $x645 $x416))))))
 ))
 (let (($x384 (and $x165 $x484)))
 (let (($x449 (and $x384 $x491)))
 (let (($x56 (and $x449 $x307)))
 (let (($x398 (= $x56 true)))
 (let (($x414 (= $x398 true)))
 (let (($x438 (= $x414 true)))
 (let (($x469 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x440 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x440)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x257)))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x167)))))))))))
 ))
 (let (($x424 (and $x476 $x469)))
 (let (($x126 (= $x424 true)))
 (let (($x355 (= $x126 true)))
 (let (($x9 (= $x355 true)))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x208))))
 (let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (=> $x296 (= ?x288 ?x358))))))))))
 ))
 (let (($x486 (and $x449 $x171)))
 (let (($x490 (= $x486 true)))
 (let (($x641 (= $x490 true)))
 (let (($x640 (= $x641 true)))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x225 (bvadd ?x235 input.dst.llvm-%m2)))
 (let ((?x487 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x225))))
 (let ((?x594 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv2 32))) ?x487)))
 (let ((?x589 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv3 32))) ?x594)))
 (let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 ?x589)))))))))))
 ))
 (let (($x599 (and $x154 $x600)))
 (let (($x602 (= $x599 true)))
 (let (($x601 (= $x602 true)))
 (let (($x604 (= $x601 true)))
 (let (($x421 (and $x604 $x640)))
 (let (($x13 (and $x421 $x9)))
 (let (($x318 (and $x13 $x438)))
 (let (($x293 (and $x318 $x311)))
 (let (($x96 (and $x293 $x33)))
 (let (($x657 (and $x96 $x655)))
 (let (($x357 (and $x657 $x279)))
 (let (($x49 (and $x357 $x184)))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x288)))))))
 ))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (= $x95 $x296))))))
 ))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (= $x303 $x645))))))
 ))
 (let (($x423 (and $x410 $x324)))
 (let (($x376 (and $x423 $x305)))
 (let (($x39 (and $x376 $x457)))
 (let (($x158 (and $x39 $x49)))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (= $x88 (bvuge ?x141 (_ bv1 32)))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (= $x349 (= ?x141 (_ bv0 32)))))))
 ))
 (let (($x100 (and $x238 $x647)))
 (let (($x413 (and $x100 $x169)))
 (let (($x588 (and $x413 $x339)))
 (let (($x445 (and $x588 $x158)))
 (let (($x61 (=> $x445 $x346)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!21))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!25 (k!23 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1e7c3aa4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xaf0e7910)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!21))
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xaf0e7913)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1e7c3aa7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xaf0e7910)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1e7c3aa4)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!25 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!25 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!23 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x637 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x255 (bvneg ?x637)))
 (let (($x136 (= ?x255 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x283 (= $x136 true)))
 (let (($x622 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x627 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x620 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x624 (and $x620 $x627)))
 (let (($x623 (and $x624 $x622)))
 (let (($x636 (= $x623 true)))
 (let (($x633 (= $x636 true)))
 (let (($x628 (= $x633 true)))
 (let ((?x477 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x504 (= (_ bv0 32) ?x477)))
 (let ((?x392 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x478 (= (_ bv0 32) ?x392)))
 (let ((?x479 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x509 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x479)))
 (let ((?x507 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x475 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x507)))
 (let (($x506 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x503 (and $x506 $x475)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x502 (and $x170 $x503)))
 (let (($x18 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x473 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x453 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x543 (and $x453 $x546)))
 (let (($x98 (not $x543)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x407 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x407 $x212)))
 (let (($x217 (and (not $x205) $x98)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x17 $x336)))
 (let (($x430 (not $x148)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x350 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x415 (and $x350 $x59)))
 (let (($x81 (and (not $x415) $x430)))
 (let (($x72 (and (and (and (and (and (and $x81 $x217) $x473) $x18) $x502) $x509) $x478)))
 (let (($x564 (and $x72 $x504)))
 (let (($x233 (= $x564 true)))
 (let (($x616 (= $x233 true)))
 (let (($x631 (= $x616 true)))
 (let (($x515 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x558 input.dst.llvm-%m2)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x548 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x513))))
 (let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 ?x548))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (= $x347 $x231))))))
 ))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (=> $x381 $x99)))))
 ))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (= $x381 $x220))))))
 ))
 (let (($x184 (and $x441 $x534)))
 (let (($x105 (and $x184 $x399)))
 (let (($x518 (and $x105 $x515)))
 (let (($x388 (= $x518 true)))
 (let (($x304 (= $x388 true)))
 (let (($x83 (= $x304 true)))
 (let ((?x298 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x576 (= (_ bv0 2) ?x298)))
 (let (($x651 (= $x576 true)))
 (let (($x652 (= $x651 true)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x334))))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x390))))))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (= $x307 $x231))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (=> $x595 $x99)))))
 ))
 (let (($x649 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (= $x595 $x220))))))
 ))
 (let (($x650 (and $x649 $x638)))
 (let (($x596 (and $x650 $x267)))
 (let (($x219 (and $x596 $x151)))
 (let (($x521 (= $x219 true)))
 (let (($x520 (= $x521 true)))
 (let (($x530 (= $x520 true)))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x289))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x51)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x281)))
 (let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (=> $x393 (= ?x311 ?x575)))))))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (= $x393 $x231))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (=> $x422 $x99)))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (= $x422 $x220))))))
 ))
 (let (($x309 (and $x455 $x374)))
 (let (($x175 (and $x309 $x11)))
 (let (($x352 (and $x175 $x266)))
 (let (($x116 (= $x352 true)))
 (let (($x147 (= $x116 true)))
 (let (($x42 (= $x147 true)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x289))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x51)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x281)))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x575)))))))))))
 ))
 (let (($x526 (and $x596 $x359)))
 (let (($x242 (= $x526 true)))
 (let (($x41 (= $x242 true)))
 (let (($x66 (= $x41 true)))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x334))))
 (let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (=> $x393 (= ?x311 ?x390))))))))))
 ))
 (let (($x89 (and $x175 $x364)))
 (let (($x76 (= $x89 true)))
 (let (($x264 (= $x76 true)))
 (let (($x244 (= $x264 true)))
 (let (($x90 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x558 input.dst.llvm-%m2)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x420))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv2 32))) ?x229)))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv3 32))) ?x197)))
 (let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 ?x201)))))))))))
 ))
 (let (($x216 (and $x105 $x90)))
 (let (($x338 (= $x216 true)))
 (let (($x290 (= $x338 true)))
 (let (($x145 (= $x290 true)))
 (let (($x563 (and $x145 $x244)))
 (let (($x332 (and $x563 $x66)))
 (let (($x400 (and $x332 $x42)))
 (let (($x97 (and $x400 $x530)))
 (let (($x653 (and $x97 $x652)))
 (let (($x380 (and $x653 $x83)))
 (let (($x617 (and $x380 $x631)))
 (let (($x634 (and $x617 $x628)))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x311)))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (= $x307 $x393))))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (= $x595 $x422))))))
 ))
 (let (($x440 (and $x301 $x638)))
 (let (($x414 (and $x440 $x398)))
 (let (($x115 (and $x414 $x559)))
 (let (($x625 (and $x115 $x634)))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (= $x347 (bvuge ?x296 (_ bv1 32)))))))
 ))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (= $x381 (= ?x296 (_ bv0 32)))))))
 ))
 (let (($x501 (and $x53 $x534)))
 (let (($x225 (and $x501 $x140)))
 (let (($x603 (and $x225 $x590)))
 (let (($x629 (and $x603 $x625)))
 (let (($x378 (=> $x629 $x283)))
 (not $x378)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x637 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x255 (bvneg ?x637)))
 (let (($x136 (= ?x255 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x283 (= $x136 true)))
 (let (($x622 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x627 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x620 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x624 (and $x620 $x627)))
 (let (($x623 (and $x624 $x622)))
 (let (($x636 (= $x623 true)))
 (let (($x633 (= $x636 true)))
 (let (($x628 (= $x633 true)))
 (let ((?x477 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x504 (= (_ bv0 32) ?x477)))
 (let ((?x392 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x478 (= (_ bv0 32) ?x392)))
 (let ((?x479 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x509 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x479)))
 (let ((?x507 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x475 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x507)))
 (let (($x506 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x503 (and $x506 $x475)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x502 (and $x170 $x503)))
 (let (($x18 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x473 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x453 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x543 (and $x453 $x546)))
 (let (($x98 (not $x543)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x407 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x407 $x212)))
 (let (($x217 (and (not $x205) $x98)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x17 $x336)))
 (let (($x430 (not $x148)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x350 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x415 (and $x350 $x59)))
 (let (($x81 (and (not $x415) $x430)))
 (let (($x72 (and (and (and (and (and (and $x81 $x217) $x473) $x18) $x502) $x509) $x478)))
 (let (($x564 (and $x72 $x504)))
 (let (($x233 (= $x564 true)))
 (let (($x616 (= $x233 true)))
 (let (($x631 (= $x616 true)))
 (let (($x515 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x558 input.dst.llvm-%m2)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x548 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x513))))
 (let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 ?x548))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (= $x347 $x231))))))
 ))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (=> $x381 $x99)))))
 ))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (= $x381 $x220))))))
 ))
 (let (($x184 (and $x441 $x534)))
 (let (($x105 (and $x184 $x399)))
 (let (($x518 (and $x105 $x515)))
 (let (($x388 (= $x518 true)))
 (let (($x304 (= $x388 true)))
 (let (($x83 (= $x304 true)))
 (let ((?x298 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x576 (= (_ bv0 2) ?x298)))
 (let (($x651 (= $x576 true)))
 (let (($x652 (= $x651 true)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x334))))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x390))))))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (= $x307 $x231))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (=> $x595 $x99)))))
 ))
 (let (($x649 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (= $x595 $x220))))))
 ))
 (let (($x650 (and $x649 $x638)))
 (let (($x596 (and $x650 $x267)))
 (let (($x219 (and $x596 $x151)))
 (let (($x521 (= $x219 true)))
 (let (($x520 (= $x521 true)))
 (let (($x530 (= $x520 true)))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x289))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x51)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x281)))
 (let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (=> $x393 (= ?x311 ?x575)))))))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (= $x393 $x231))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (=> $x422 $x99)))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (= $x422 $x220))))))
 ))
 (let (($x309 (and $x455 $x374)))
 (let (($x175 (and $x309 $x11)))
 (let (($x352 (and $x175 $x266)))
 (let (($x116 (= $x352 true)))
 (let (($x147 (= $x116 true)))
 (let (($x42 (= $x147 true)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x289))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x51)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x281)))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x575)))))))))))
 ))
 (let (($x526 (and $x596 $x359)))
 (let (($x242 (= $x526 true)))
 (let (($x41 (= $x242 true)))
 (let (($x66 (= $x41 true)))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x334))))
 (let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (=> $x393 (= ?x311 ?x390))))))))))
 ))
 (let (($x89 (and $x175 $x364)))
 (let (($x76 (= $x89 true)))
 (let (($x264 (= $x76 true)))
 (let (($x244 (= $x264 true)))
 (let (($x90 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x558 input.dst.llvm-%m2)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x420))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv2 32))) ?x229)))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv3 32))) ?x197)))
 (let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 ?x201)))))))))))
 ))
 (let (($x216 (and $x105 $x90)))
 (let (($x338 (= $x216 true)))
 (let (($x290 (= $x338 true)))
 (let (($x145 (= $x290 true)))
 (let (($x563 (and $x145 $x244)))
 (let (($x332 (and $x563 $x66)))
 (let (($x400 (and $x332 $x42)))
 (let (($x97 (and $x400 $x530)))
 (let (($x653 (and $x97 $x652)))
 (let (($x380 (and $x653 $x83)))
 (let (($x617 (and $x380 $x631)))
 (let (($x634 (and $x617 $x628)))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x311)))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (= $x307 $x393))))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (= $x595 $x422))))))
 ))
 (let (($x440 (and $x301 $x638)))
 (let (($x414 (and $x440 $x398)))
 (let (($x115 (and $x414 $x559)))
 (let (($x625 (and $x115 $x634)))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (= $x347 (bvuge ?x296 (_ bv1 32)))))))
 ))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (= $x381 (= ?x296 (_ bv0 32)))))))
 ))
 (let (($x501 (and $x53 $x534)))
 (let (($x225 (and $x501 $x140)))
 (let (($x603 (and $x225 $x590)))
 (let (($x629 (and $x603 $x625)))
 (let (($x378 (=> $x629 $x283)))
 (not $x378)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x577 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x111 (bvneg ?x577)))
 (let (($x579 (= ?x111 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (= $x579 true)))
 (let (($x234 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x209 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x194 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x313 (and $x194 $x209)))
 (let (($x230 (and $x313 $x234)))
 (let (($x431 (= $x230 true)))
 (let (($x292 (= $x431 true)))
 (let (($x60 (= $x292 true)))
 (let ((?x109 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x249 (= (_ bv0 32) ?x109)))
 (let ((?x326 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x138 (= (_ bv0 32) ?x326)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x571 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x571)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x386 $x130)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x462 (and $x139 $x224)))
 (let (($x117 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x387 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x585 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x585 $x247)))
 (let (($x269 (not $x67)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x527 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x572 (and $x527 $x22)))
 (let (($x202 (and (not $x572) $x269)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x163 $x34)))
 (let (($x535 (not $x19)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x419 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x419 $x61)))
 (let (($x363 (and (not $x213) $x535)))
 (let (($x160 (and (and (and (and (and (and $x363 $x202) $x387) $x117) $x462) $x25) $x138)))
 (let (($x528 (and $x160 $x249)))
 (let (($x389 (= $x528 true)))
 (let (($x524 (= $x389 true)))
 (let (($x253 (= $x524 true)))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x23 (bvadd ?x96 input.dst.llvm-%m2)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x341))))
 (let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 ?x94))))))))))
 ))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (= $x129 $x378))))))
 ))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (=> $x293 $x560)))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (= $x293 $x623))))))
 ))
 (let (($x628 (and $x633 $x446)))
 (let (($x599 (and $x628 $x600)))
 (let (($x93 (and $x599 $x239)))
 (let (($x91 (= $x93 true)))
 (let (($x295 (= $x91 true)))
 (let (($x279 (= $x295 true)))
 (let ((?x303 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x241 (= (_ bv0 2) ?x303)))
 (let (($x410 (= $x241 true)))
 (let (($x499 (= $x410 true)))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x454))))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x468))))))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (= $x266 $x378))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (=> $x267 $x560)))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (= $x267 $x623))))))
 ))
 (let (($x75 (and $x457 $x286)))
 (let (($x112 (and $x75 $x119)))
 (let (($x580 (and $x112 $x584)))
 (let (($x586 (= $x580 true)))
 (let (($x339 (= $x586 true)))
 (let (($x588 (= $x339 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x373))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv2 32))) ?x551)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv3 32))) ?x494)))
 (let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (=> $x31 (= ?x530 ?x54)))))))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (= $x31 $x378))))))
 ))
 (let (($x432 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (=> $x649 $x560)))))
 ))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (= $x649 $x623))))))
 ))
 (let (($x77 (and $x211 $x432)))
 (let (($x568 (and $x77 $x20)))
 (let (($x355 (and $x568 $x126)))
 (let (($x13 (= $x355 true)))
 (let (($x448 (= $x13 true)))
 (let (($x162 (= $x448 true)))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x373))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv2 32))) ?x551)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv3 32))) ?x494)))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x54)))))))))))
 ))
 (let (($x208 (and $x112 $x127)))
 (let (($x567 (= $x208 true)))
 (let (($x358 (= $x567 true)))
 (let (($x486 (= $x358 true)))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x454))))
 (let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (=> $x31 (= ?x530 ?x468))))))))))
 ))
 (let (($x438 (and $x568 $x663)))
 (let (($x318 (= $x438 true)))
 (let (($x537 (= $x318 true)))
 (let (($x550 (= $x537 true)))
 (let (($x662 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x23 (bvadd ?x96 input.dst.llvm-%m2)))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x409 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x16)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x409)))
 (let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 ?x465)))))))))))
 ))
 (let (($x50 (and $x599 $x662)))
 (let (($x401 (= $x50 true)))
 (let (($x578 (= $x401 true)))
 (let (($x493 (= $x578 true)))
 (let (($x538 (and $x493 $x550)))
 (let (($x490 (and $x538 $x486)))
 (let (($x32 (and $x490 $x162)))
 (let (($x265 (and $x32 $x588)))
 (let (($x324 (and $x265 $x499)))
 (let (($x49 (and $x324 $x279)))
 (let (($x191 (and $x49 $x253)))
 (let (($x102 (and $x191 $x60)))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x530)))))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (= $x266 $x31))))))
 ))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (= $x267 $x649))))))
 ))
 (let (($x51 (and $x73 $x286)))
 (let (($x147 (and $x51 $x116)))
 (let (($x651 (and $x147 $x576)))
 (let (($x24 (and $x651 $x102)))
 (let (($x450 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (= $x129 (bvuge ?x393 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (= $x293 (= ?x393 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x125 $x446)))
 (let (($x420 (and $x226 $x557)))
 (let (($x591 (and $x420 $x450)))
 (let (($x461 (and $x591 $x24)))
 (let (($x65 (=> $x461 $x161)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x577 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x111 (bvneg ?x577)))
 (let (($x579 (= ?x111 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (= $x579 true)))
 (let (($x234 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x209 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x194 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x313 (and $x194 $x209)))
 (let (($x230 (and $x313 $x234)))
 (let (($x431 (= $x230 true)))
 (let (($x292 (= $x431 true)))
 (let (($x60 (= $x292 true)))
 (let ((?x109 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x249 (= (_ bv0 32) ?x109)))
 (let ((?x326 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x138 (= (_ bv0 32) ?x326)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x571 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x571)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x386 $x130)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x462 (and $x139 $x224)))
 (let (($x117 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x387 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x585 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x585 $x247)))
 (let (($x269 (not $x67)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x527 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x572 (and $x527 $x22)))
 (let (($x202 (and (not $x572) $x269)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x163 $x34)))
 (let (($x535 (not $x19)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x419 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x419 $x61)))
 (let (($x363 (and (not $x213) $x535)))
 (let (($x160 (and (and (and (and (and (and $x363 $x202) $x387) $x117) $x462) $x25) $x138)))
 (let (($x528 (and $x160 $x249)))
 (let (($x389 (= $x528 true)))
 (let (($x524 (= $x389 true)))
 (let (($x253 (= $x524 true)))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x23 (bvadd ?x96 input.dst.llvm-%m2)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x341))))
 (let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 ?x94))))))))))
 ))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (= $x129 $x378))))))
 ))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (=> $x293 $x560)))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (= $x293 $x623))))))
 ))
 (let (($x628 (and $x633 $x446)))
 (let (($x599 (and $x628 $x600)))
 (let (($x93 (and $x599 $x239)))
 (let (($x91 (= $x93 true)))
 (let (($x295 (= $x91 true)))
 (let (($x279 (= $x295 true)))
 (let ((?x303 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x241 (= (_ bv0 2) ?x303)))
 (let (($x410 (= $x241 true)))
 (let (($x499 (= $x410 true)))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x454))))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x468))))))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (= $x266 $x378))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (=> $x267 $x560)))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (= $x267 $x623))))))
 ))
 (let (($x75 (and $x457 $x286)))
 (let (($x112 (and $x75 $x119)))
 (let (($x580 (and $x112 $x584)))
 (let (($x586 (= $x580 true)))
 (let (($x339 (= $x586 true)))
 (let (($x588 (= $x339 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x373))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv2 32))) ?x551)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv3 32))) ?x494)))
 (let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (=> $x31 (= ?x530 ?x54)))))))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (= $x31 $x378))))))
 ))
 (let (($x432 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (=> $x649 $x560)))))
 ))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (= $x649 $x623))))))
 ))
 (let (($x77 (and $x211 $x432)))
 (let (($x568 (and $x77 $x20)))
 (let (($x355 (and $x568 $x126)))
 (let (($x13 (= $x355 true)))
 (let (($x448 (= $x13 true)))
 (let (($x162 (= $x448 true)))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x373))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv2 32))) ?x551)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv3 32))) ?x494)))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x54)))))))))))
 ))
 (let (($x208 (and $x112 $x127)))
 (let (($x567 (= $x208 true)))
 (let (($x358 (= $x567 true)))
 (let (($x486 (= $x358 true)))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x454))))
 (let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (=> $x31 (= ?x530 ?x468))))))))))
 ))
 (let (($x438 (and $x568 $x663)))
 (let (($x318 (= $x438 true)))
 (let (($x537 (= $x318 true)))
 (let (($x550 (= $x537 true)))
 (let (($x662 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x23 (bvadd ?x96 input.dst.llvm-%m2)))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x409 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x16)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x409)))
 (let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 ?x465)))))))))))
 ))
 (let (($x50 (and $x599 $x662)))
 (let (($x401 (= $x50 true)))
 (let (($x578 (= $x401 true)))
 (let (($x493 (= $x578 true)))
 (let (($x538 (and $x493 $x550)))
 (let (($x490 (and $x538 $x486)))
 (let (($x32 (and $x490 $x162)))
 (let (($x265 (and $x32 $x588)))
 (let (($x324 (and $x265 $x499)))
 (let (($x49 (and $x324 $x279)))
 (let (($x191 (and $x49 $x253)))
 (let (($x102 (and $x191 $x60)))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x530)))))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (= $x266 $x31))))))
 ))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (= $x267 $x649))))))
 ))
 (let (($x51 (and $x73 $x286)))
 (let (($x147 (and $x51 $x116)))
 (let (($x651 (and $x147 $x576)))
 (let (($x24 (and $x651 $x102)))
 (let (($x450 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (= $x129 (bvuge ?x393 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (= $x293 (= ?x393 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x125 $x446)))
 (let (($x420 (and $x226 $x557)))
 (let (($x591 (and $x420 $x450)))
 (let (($x461 (and $x591 $x24)))
 (let (($x65 (=> $x461 $x161)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x532 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x516 (= $x532 true)))
 (let ((?x215 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x206 (= (_ bv0 2) ?x215)))
 (let (($x254 (= $x206 true)))
 (let (($x508 (= $x254 true)))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x407 (bvadd ?x423 input.dst.llvm-%m2)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x222))))
 (let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 ?x394))))))))))
 ))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (= $x548 $x216))))))
 ))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (=> $x97 $x298)))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (= $x97 $x230))))))
 ))
 (let (($x565 (and $x301 $x621)))
 (let (($x134 (and $x565 $x657)))
 (let (($x203 (and $x134 $x522)))
 (let (($x181 (= $x203 true)))
 (let (($x110 (= $x181 true)))
 (let (($x275 (= $x110 true)))
 (let (($x299 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x214 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x319 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x238 (and $x319 $x214)))
 (let (($x647 (and $x238 $x299)))
 (let (($x485 (= $x647 true)))
 (let (($x15 (= $x485 true)))
 (let (($x349 (= $x15 true)))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x407 (bvadd ?x423 input.dst.llvm-%m2)))
 (let ((?x543 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x407))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv2 32))) ?x543)))
 (let ((?x480 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv3 32))) ?x212)))
 (let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 ?x480)))))))))))
 ))
 (let (($x533 (and $x134 $x646)))
 (let (($x260 (= $x533 true)))
 (let (($x382 (= $x260 true)))
 (let (($x198 (= $x382 true)))
 (let ((?x104 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x422 (= (_ bv0 32) ?x104)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x421 (= (_ bv0 32) ?x232)))
 (let ((?x187 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x187)))
 (let ((?x369 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x427 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x369)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (and $x153 $x427)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x447 $x315)))
 (let (($x492 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x570 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x643 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x329 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x402 (and $x329 $x643)))
 (let (($x240 (not $x402)))
 (let (($x644 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x444 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x463 (and $x444 $x644)))
 (let (($x343 (and (not $x463) $x240)))
 (let (($x534 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x501 (and $x39 $x534)))
 (let (($x347 (not $x501)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x53 $x95)))
 (let (($x566 (and (not $x288) $x347)))
 (let (($x220 (and (and (and (and (and (and $x566 $x343) $x570) $x492) $x108) $x261) $x421)))
 (let (($x114 (and $x220 $x422)))
 (let (($x259 (= $x114 true)))
 (let (($x464 (= $x259 true)))
 (let (($x583 (= $x464 true)))
 (let (($x552 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x59))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x285))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (= $x126 $x216))))))
 ))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (=> $x119 $x298)))))
 ))
 (let (($x610 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (= $x119 $x230))))))
 ))
 (let (($x199 (and $x610 $x529)))
 (let (($x609 (and $x199 $x458)))
 (let (($x542 (and $x609 $x552)))
 (let (($x498 (= $x542 true)))
 (let (($x443 (= $x498 true)))
 (let (($x379 (= $x443 true)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x345))))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv2 32))) ?x620)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv3 32))) ?x645)))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (=> $x424 (= ?x588 ?x281)))))))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (= $x424 $x216))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (=> $x457 $x298)))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (= $x457 $x230))))))
 ))
 (let (($x461 (and $x292 $x24)))
 (let (($x305 (and $x461 $x290)))
 (let (($x400 (and $x305 $x42)))
 (let (($x152 (= $x400 true)))
 (let (($x342 (= $x152 true)))
 (let (($x291 (= $x342 true)))
 (let (($x395 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x345))))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv2 32))) ?x620)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv3 32))) ?x645)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x281)))))))))))
 ))
 (let (($x107 (and $x609 $x395)))
 (let (($x173 (= $x107 true)))
 (let (($x155 (= $x173 true)))
 (let (($x182 (= $x155 true)))
 (let (($x587 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x59))))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (=> $x424 (= ?x588 ?x285))))))))))
 ))
 (let (($x310 (and $x305 $x587)))
 (let (($x79 (= $x310 true)))
 (let (($x92 (= $x79 true)))
 (let (($x367 (= $x92 true)))
 (let (($x48 (and $x367 $x182)))
 (let (($x357 (and $x48 $x291)))
 (let (($x151 (and $x357 $x379)))
 (let (($x573 (and $x151 $x583)))
 (let (($x525 (and $x573 $x198)))
 (let (($x306 (and $x525 $x349)))
 (let (($x280 (and $x306 $x275)))
 (let (($x176 (and $x280 $x508)))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x588)))))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (= $x126 $x424))))))
 ))
 (let (($x660 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (= $x119 $x457))))))
 ))
 (let (($x551 (and $x660 $x529)))
 (let (($x448 (and $x551 $x13)))
 (let (($x410 (and $x448 $x241)))
 (let (($x505 (and $x410 $x176)))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (= $x548 (bvuge ?x31 (_ bv1 32)))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (= $x97 (= ?x31 (_ bv0 32)))))))
 ))
 (let (($x531 (and $x82 $x621)))
 (let (($x23 (and $x531 $x514)))
 (let (($x664 (and $x23 $x654)))
 (let (($x85 (and $x664 $x505)))
 (let (($x236 (=> $x85 $x516)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x532 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x516 (= $x532 true)))
 (let ((?x215 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x206 (= (_ bv0 2) ?x215)))
 (let (($x254 (= $x206 true)))
 (let (($x508 (= $x254 true)))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x407 (bvadd ?x423 input.dst.llvm-%m2)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x222))))
 (let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 ?x394))))))))))
 ))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (= $x548 $x216))))))
 ))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (=> $x97 $x298)))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (= $x97 $x230))))))
 ))
 (let (($x565 (and $x301 $x621)))
 (let (($x134 (and $x565 $x657)))
 (let (($x203 (and $x134 $x522)))
 (let (($x181 (= $x203 true)))
 (let (($x110 (= $x181 true)))
 (let (($x275 (= $x110 true)))
 (let (($x299 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x214 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x319 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x238 (and $x319 $x214)))
 (let (($x647 (and $x238 $x299)))
 (let (($x485 (= $x647 true)))
 (let (($x15 (= $x485 true)))
 (let (($x349 (= $x15 true)))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x407 (bvadd ?x423 input.dst.llvm-%m2)))
 (let ((?x543 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x407))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv2 32))) ?x543)))
 (let ((?x480 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv3 32))) ?x212)))
 (let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 ?x480)))))))))))
 ))
 (let (($x533 (and $x134 $x646)))
 (let (($x260 (= $x533 true)))
 (let (($x382 (= $x260 true)))
 (let (($x198 (= $x382 true)))
 (let ((?x104 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x422 (= (_ bv0 32) ?x104)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x421 (= (_ bv0 32) ?x232)))
 (let ((?x187 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x187)))
 (let ((?x369 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x427 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x369)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (and $x153 $x427)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x447 $x315)))
 (let (($x492 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x570 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x643 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x329 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x402 (and $x329 $x643)))
 (let (($x240 (not $x402)))
 (let (($x644 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x444 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x463 (and $x444 $x644)))
 (let (($x343 (and (not $x463) $x240)))
 (let (($x534 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x501 (and $x39 $x534)))
 (let (($x347 (not $x501)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x53 $x95)))
 (let (($x566 (and (not $x288) $x347)))
 (let (($x220 (and (and (and (and (and (and $x566 $x343) $x570) $x492) $x108) $x261) $x421)))
 (let (($x114 (and $x220 $x422)))
 (let (($x259 (= $x114 true)))
 (let (($x464 (= $x259 true)))
 (let (($x583 (= $x464 true)))
 (let (($x552 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x59))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x285))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (= $x126 $x216))))))
 ))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (=> $x119 $x298)))))
 ))
 (let (($x610 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (= $x119 $x230))))))
 ))
 (let (($x199 (and $x610 $x529)))
 (let (($x609 (and $x199 $x458)))
 (let (($x542 (and $x609 $x552)))
 (let (($x498 (= $x542 true)))
 (let (($x443 (= $x498 true)))
 (let (($x379 (= $x443 true)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x345))))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv2 32))) ?x620)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv3 32))) ?x645)))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (=> $x424 (= ?x588 ?x281)))))))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (= $x424 $x216))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (=> $x457 $x298)))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (= $x457 $x230))))))
 ))
 (let (($x461 (and $x292 $x24)))
 (let (($x305 (and $x461 $x290)))
 (let (($x400 (and $x305 $x42)))
 (let (($x152 (= $x400 true)))
 (let (($x342 (= $x152 true)))
 (let (($x291 (= $x342 true)))
 (let (($x395 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x345))))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv2 32))) ?x620)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv3 32))) ?x645)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x281)))))))))))
 ))
 (let (($x107 (and $x609 $x395)))
 (let (($x173 (= $x107 true)))
 (let (($x155 (= $x173 true)))
 (let (($x182 (= $x155 true)))
 (let (($x587 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x59))))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (=> $x424 (= ?x588 ?x285))))))))))
 ))
 (let (($x310 (and $x305 $x587)))
 (let (($x79 (= $x310 true)))
 (let (($x92 (= $x79 true)))
 (let (($x367 (= $x92 true)))
 (let (($x48 (and $x367 $x182)))
 (let (($x357 (and $x48 $x291)))
 (let (($x151 (and $x357 $x379)))
 (let (($x573 (and $x151 $x583)))
 (let (($x525 (and $x573 $x198)))
 (let (($x306 (and $x525 $x349)))
 (let (($x280 (and $x306 $x275)))
 (let (($x176 (and $x280 $x508)))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x588)))))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (= $x126 $x424))))))
 ))
 (let (($x660 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (= $x119 $x457))))))
 ))
 (let (($x551 (and $x660 $x529)))
 (let (($x448 (and $x551 $x13)))
 (let (($x410 (and $x448 $x241)))
 (let (($x505 (and $x410 $x176)))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (= $x548 (bvuge ?x31 (_ bv1 32)))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (= $x97 (= ?x31 (_ bv0 32)))))))
 ))
 (let (($x531 (and $x82 $x621)))
 (let (($x23 (and $x531 $x514)))
 (let (($x664 (and $x23 $x654)))
 (let (($x85 (and $x664 $x505)))
 (let (($x236 (=> $x85 $x516)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6374d934)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbd62d970)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbd62d973)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6374d937)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbd62d970)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6374d934)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x20000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x632 ((_ extract 29 0) input.dst.llvm-%m2)))
 (let (($x544 (= (_ bv0 30) ?x632)))
 (let (($x66 (= $x544 true)))
 (let ((?x491 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x165 (= (_ bv0 2) ?x491)))
 (let (($x484 (= $x165 true)))
 (let (($x146 (= $x484 true)))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem ?x655))))
 (let ((?x606 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv2 32))) ?x417))))
 (let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 ?x606))))))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (= $x305 $x578))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (=> $x265 $x303)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (= $x265 $x215))))))
 ))
 (let (($x320 (and $x283 $x545)))
 (let (($x164 (and $x320 $x248)))
 (let (($x614 (and $x164 $x604)))
 (let (($x608 (= $x614 true)))
 (let (($x372 (= $x608 true)))
 (let (($x561 (= $x372 true)))
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x482 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x655))))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv2 32))) ?x482)))
 (let ((?x639 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv3 32))) ?x87)))
 (let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 ?x639)))))))))))
 ))
 (let (($x221 (and $x164 $x37)))
 (let (($x593 (= $x221 true)))
 (let (($x132 (= $x593 true)))
 (let (($x474 (= $x132 true)))
 (let (($x70 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x442 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x142 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x356 (and $x142 $x442)))
 (let (($x429 (and $x356 $x70)))
 (let (($x425 (= $x429 true)))
 (let (($x460 (= $x425 true)))
 (let (($x297 (= $x460 true)))
 (let ((?x576 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x624 (= (_ bv0 32) ?x576)))
 (let ((?x649 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x595 (= (_ bv0 32) ?x649)))
 (let ((?x563 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x648 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x563)))
 (let ((?x58 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x413 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x169 $x413)))
 (let (($x605 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x605 $x33)))
 (let (($x314 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x335 (and $x29 $x497)))
 (let (($x613 (not $x335)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x625 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x255 (and $x625 $x637)))
 (let (($x45 (and (not $x255) $x613)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x616 (and $x129 $x263)))
 (let (($x634 (not $x616)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x446 (and $x311 $x115)))
 (let (($x629 (and (not $x446) $x634)))
 (let (($x122 (and (and (and (and (and (and $x629 $x45) $x189) $x314) $x192) $x648) $x595)))
 (let (($x466 (and $x122 $x624)))
 (let (($x185 (= $x466 true)))
 (let (($x385 (= $x185 true)))
 (let (($x323 (= $x385 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x473))))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x18))))))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (= $x566 $x578))))))
 ))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (=> $x541 $x303)))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (= $x541 $x215))))))
 ))
 (let (($x365 (and $x117 $x379)))
 (let (($x46 (and $x365 $x130)))
 (let (($x653 (and $x46 $x140)))
 (let (($x584 (= $x653 true)))
 (let (($x74 (= $x584 true)))
 (let (($x556 (= $x74 true)))
 (let (($x141 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (=> $x347 (= ?x570 ?x12)))))))))))
 ))
 (let (($x452 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (= $x347 $x578))))))
 ))
 (let (($x505 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (=> $x291 $x303)))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (= $x291 $x215))))))
 ))
 (let (($x85 (and $x254 $x505)))
 (let (($x296 (and $x85 $x452)))
 (let (($x376 (and $x296 $x141)))
 (let (($x225 (= $x376 true)))
 (let (($x652 (= $x225 true)))
 (let (($x404 (= $x652 true)))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x12)))))))))))
 ))
 (let (($x579 (and $x46 $x577)))
 (let (($x161 (= $x579 true)))
 (let (($x65 (= $x161 true)))
 (let (($x486 (= $x65 true)))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x473))))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (=> $x347 (= ?x570 ?x18))))))))))
 ))
 (let (($x392 (and $x296 $x506)))
 (let (($x478 (= $x392 true)))
 (let (($x479 (= $x478 true)))
 (let (($x509 (= $x479 true)))
 (let (($x287 (and $x509 $x486)))
 (let (($x235 (and $x287 $x404)))
 (let (($x125 (and $x235 $x556)))
 (let (($x105 (and $x125 $x323)))
 (let (($x123 (and $x105 $x297)))
 (let (($x359 (and $x123 $x474)))
 (let (($x223 (and $x359 $x561)))
 (let (($x246 (and $x223 $x146)))
 (let (($x14 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x570)))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (= $x566 $x347))))))
 ))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (= $x541 $x291))))))
 ))
 (let (($x151 (and $x542 $x379)))
 (let (($x463 (and $x151 $x644)))
 (let (($x447 (and $x463 $x14)))
 (let (($x449 (and $x447 $x246)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (= $x305 (bvuge ?x424 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (= $x265 (= ?x424 (_ bv0 32)))))))
 ))
 (let (($x103 (and $x121 $x545)))
 (let (($x423 (and $x103 $x94)))
 (let (($x285 (and $x423 $x188)))
 (let (($x63 (and $x285 $x449)))
 (let (($x517 (=> $x63 $x66)))
 (not $x517))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x632 ((_ extract 29 0) input.dst.llvm-%m2)))
 (let (($x544 (= (_ bv0 30) ?x632)))
 (let (($x66 (= $x544 true)))
 (let ((?x491 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x165 (= (_ bv0 2) ?x491)))
 (let (($x484 (= $x165 true)))
 (let (($x146 (= $x484 true)))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem ?x655))))
 (let ((?x606 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv2 32))) ?x417))))
 (let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 ?x606))))))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (= $x305 $x578))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (=> $x265 $x303)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (= $x265 $x215))))))
 ))
 (let (($x320 (and $x283 $x545)))
 (let (($x164 (and $x320 $x248)))
 (let (($x614 (and $x164 $x604)))
 (let (($x608 (= $x614 true)))
 (let (($x372 (= $x608 true)))
 (let (($x561 (= $x372 true)))
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x482 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x655))))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv2 32))) ?x482)))
 (let ((?x639 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv3 32))) ?x87)))
 (let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 ?x639)))))))))))
 ))
 (let (($x221 (and $x164 $x37)))
 (let (($x593 (= $x221 true)))
 (let (($x132 (= $x593 true)))
 (let (($x474 (= $x132 true)))
 (let (($x70 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x442 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x142 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x356 (and $x142 $x442)))
 (let (($x429 (and $x356 $x70)))
 (let (($x425 (= $x429 true)))
 (let (($x460 (= $x425 true)))
 (let (($x297 (= $x460 true)))
 (let ((?x576 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x624 (= (_ bv0 32) ?x576)))
 (let ((?x649 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x595 (= (_ bv0 32) ?x649)))
 (let ((?x563 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x648 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x563)))
 (let ((?x58 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x413 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x169 $x413)))
 (let (($x605 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x605 $x33)))
 (let (($x314 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x335 (and $x29 $x497)))
 (let (($x613 (not $x335)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x625 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x255 (and $x625 $x637)))
 (let (($x45 (and (not $x255) $x613)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x616 (and $x129 $x263)))
 (let (($x634 (not $x616)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x446 (and $x311 $x115)))
 (let (($x629 (and (not $x446) $x634)))
 (let (($x122 (and (and (and (and (and (and $x629 $x45) $x189) $x314) $x192) $x648) $x595)))
 (let (($x466 (and $x122 $x624)))
 (let (($x185 (= $x466 true)))
 (let (($x385 (= $x185 true)))
 (let (($x323 (= $x385 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x473))))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x18))))))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (= $x566 $x578))))))
 ))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (=> $x541 $x303)))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (= $x541 $x215))))))
 ))
 (let (($x365 (and $x117 $x379)))
 (let (($x46 (and $x365 $x130)))
 (let (($x653 (and $x46 $x140)))
 (let (($x584 (= $x653 true)))
 (let (($x74 (= $x584 true)))
 (let (($x556 (= $x74 true)))
 (let (($x141 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (=> $x347 (= ?x570 ?x12)))))))))))
 ))
 (let (($x452 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (= $x347 $x578))))))
 ))
 (let (($x505 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (=> $x291 $x303)))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (= $x291 $x215))))))
 ))
 (let (($x85 (and $x254 $x505)))
 (let (($x296 (and $x85 $x452)))
 (let (($x376 (and $x296 $x141)))
 (let (($x225 (= $x376 true)))
 (let (($x652 (= $x225 true)))
 (let (($x404 (= $x652 true)))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x12)))))))))))
 ))
 (let (($x579 (and $x46 $x577)))
 (let (($x161 (= $x579 true)))
 (let (($x65 (= $x161 true)))
 (let (($x486 (= $x65 true)))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x473))))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (=> $x347 (= ?x570 ?x18))))))))))
 ))
 (let (($x392 (and $x296 $x506)))
 (let (($x478 (= $x392 true)))
 (let (($x479 (= $x478 true)))
 (let (($x509 (= $x479 true)))
 (let (($x287 (and $x509 $x486)))
 (let (($x235 (and $x287 $x404)))
 (let (($x125 (and $x235 $x556)))
 (let (($x105 (and $x125 $x323)))
 (let (($x123 (and $x105 $x297)))
 (let (($x359 (and $x123 $x474)))
 (let (($x223 (and $x359 $x561)))
 (let (($x246 (and $x223 $x146)))
 (let (($x14 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x570)))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (= $x566 $x347))))))
 ))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (= $x541 $x291))))))
 ))
 (let (($x151 (and $x542 $x379)))
 (let (($x463 (and $x151 $x644)))
 (let (($x447 (and $x463 $x14)))
 (let (($x449 (and $x447 $x246)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (= $x305 (bvuge ?x424 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (= $x265 (= ?x424 (_ bv0 32)))))))
 ))
 (let (($x103 (and $x121 $x545)))
 (let (($x423 (and $x103 $x94)))
 (let (($x285 (and $x423 $x188)))
 (let (($x63 (and $x285 $x449)))
 (let (($x517 (=> $x63 $x66)))
 (not $x517))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb5190850)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x73b34d68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x73b34d6b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb5190853)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x73b34d68)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb5190850)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000010)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000013)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000010)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x04000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x04000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x04000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x04000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x04000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x04000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x04000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x04000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x191 ((_ extract 25 0) input.dst.llvm-%m2)))
 (let (($x250 (= (_ bv0 26) ?x191)))
 (let (($x194 (= $x250 true)))
 (let ((?x78 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x253 (= (_ bv0 2) ?x78)))
 (let (($x9 (= $x253 true)))
 (let (($x249 (= $x9 true)))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x586 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x586 (_ bv1 32))) (select input.dst.llvm-mem ?x586))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x586 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x586 (_ bv2 32))) ?x377))))
 (let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 ?x386))))))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (= $x296 $x113))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (=> $x559 $x492)))))
 ))
 (let (($x598 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (= $x559 $x491))))))
 ))
 (let (($x529 (and $x598 $x275)))
 (let (($x154 (and $x529 $x49)))
 (let (($x101 (and $x154 $x138)))
 (let (($x25 (= $x101 true)))
 (let (($x144 (= $x25 true)))
 (let (($x160 (= $x144 true)))
 (let (($x252 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x213 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x34 (and $x213 $x158)))
 (let (($x295 (and $x34 $x252)))
 (let (($x93 (= $x295 true)))
 (let (($x91 (= $x93 true)))
 (let (($x279 (= $x91 true)))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x586 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x586 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x586))))
 (let ((?x469 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x586 (_ bv2 32))) ?x358)))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x586 (_ bv3 32))) ?x469)))
 (let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 ?x503)))))))))))
 ))
 (let (($x72 (and $x154 $x504)))
 (let (($x475 (= $x72 true)))
 (let (($x268 (= $x475 true)))
 (let (($x477 (= $x268 true)))
 (let ((?x457 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x582 (= (_ bv0 32) ?x457)))
 (let ((?x538 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x366 (= (_ bv0 32) ?x538)))
 (let ((?x90 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x430 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x430)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x148 $x209)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x245 $x81)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x277 $x415)))
 (let (($x149 (not $x83)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x399 (and $x262 $x231)))
 (let (($x518 (and (not $x399) $x149)))
 (let (($x531 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x621 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x548 (and $x621 $x531)))
 (let (($x43 (not $x548)))
 (let (($x530 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x97 $x530)))
 (let (($x184 (and (not $x298) $x43)))
 (let (($x512 (and (and (and (and (and (and $x184 $x518) $x350) $x351) $x60) $x554) $x366)))
 (let (($x183 (and $x512 $x582)))
 (let (($x166 (= $x183 true)))
 (let (($x481 (= $x166 true)))
 (let (($x435 (= $x481 true)))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x526))))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x89))))))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (= $x629 $x113))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (=> $x555 $x492)))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (= $x555 $x491))))))
 ))
 (let (($x382 (and $x198 $x556)))
 (let (($x88 (and $x382 $x238)))
 (let (($x558 (and $x88 $x373)))
 (let (($x499 (= $x558 true)))
 (let (($x368 (= $x499 true)))
 (let (($x240 (= $x368 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x187))))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv2 32))) ?x203)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv3 32))) ?x498)))
 (let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (=> $x634 (= ?x189 ?x406)))))))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (= $x634 $x113))))))
 ))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (=> $x404 $x492)))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (= $x404 $x491))))))
 ))
 (let (($x63 (and $x484 $x449)))
 (let (($x116 (and $x63 $x310)))
 (let (($x414 (and $x116 $x329)))
 (let (($x7 (= $x414 true)))
 (let (($x243 (= $x7 true)))
 (let (($x324 (= $x243 true)))
 (let (($x532 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x187))))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv2 32))) ?x203)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv3 32))) ?x498)))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x406)))))))))))
 ))
 (let (($x236 (and $x88 $x532)))
 (let (($x516 (= $x236 true)))
 (let (($x511 (= $x516 true)))
 (let (($x440 (= $x511 true)))
 (let (($x520 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x526))))
 (let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (=> $x634 (= ?x189 ?x89))))))))))
 ))
 (let (($x270 (and $x116 $x520)))
 (let (($x589 (= $x270 true)))
 (let (($x219 (= $x589 true)))
 (let (($x332 (= $x219 true)))
 (let (($x662 (and $x332 $x440)))
 (let (($x439 (and $x662 $x324)))
 (let (($x408 (and $x439 $x240)))
 (let (($x36 (and $x408 $x435)))
 (let (($x239 (and $x36 $x477)))
 (let (($x52 (and $x239 $x279)))
 (let (($x109 (and $x52 $x160)))
 (let (($x389 (and $x109 $x249)))
 (let (($x623 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x189)))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (= $x629 $x634))))))
 ))
 (let (($x653 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (= $x555 $x404))))))
 ))
 (let (($x125 (and $x653 $x556)))
 (let (($x255 (and $x125 $x637)))
 (let (($x605 (and $x255 $x623)))
 (let (($x528 (and $x605 $x389)))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (= $x296 (bvuge ?x347 (_ bv1 32)))))))
 ))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (= $x559 (= ?x347 (_ bv0 32)))))))
 ))
 (let (($x427 (and $x271 $x275)))
 (let (($x411 (and $x427 $x489)))
 (let (($x18 (and $x411 $x100)))
 (let (($x524 (and $x18 $x528)))
 (let (($x540 (=> $x524 $x194)))
 (not $x540))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x191 ((_ extract 25 0) input.dst.llvm-%m2)))
 (let (($x250 (= (_ bv0 26) ?x191)))
 (let (($x194 (= $x250 true)))
 (let ((?x78 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x253 (= (_ bv0 2) ?x78)))
 (let (($x9 (= $x253 true)))
 (let (($x249 (= $x9 true)))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x586 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x586 (_ bv1 32))) (select input.dst.llvm-mem ?x586))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x586 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x586 (_ bv2 32))) ?x377))))
 (let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 ?x386))))))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (= $x296 $x113))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (=> $x559 $x492)))))
 ))
 (let (($x598 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (= $x559 $x491))))))
 ))
 (let (($x529 (and $x598 $x275)))
 (let (($x154 (and $x529 $x49)))
 (let (($x101 (and $x154 $x138)))
 (let (($x25 (= $x101 true)))
 (let (($x144 (= $x25 true)))
 (let (($x160 (= $x144 true)))
 (let (($x252 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x213 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x34 (and $x213 $x158)))
 (let (($x295 (and $x34 $x252)))
 (let (($x93 (= $x295 true)))
 (let (($x91 (= $x93 true)))
 (let (($x279 (= $x91 true)))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x586 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x586 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x586))))
 (let ((?x469 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x586 (_ bv2 32))) ?x358)))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x586 (_ bv3 32))) ?x469)))
 (let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 ?x503)))))))))))
 ))
 (let (($x72 (and $x154 $x504)))
 (let (($x475 (= $x72 true)))
 (let (($x268 (= $x475 true)))
 (let (($x477 (= $x268 true)))
 (let ((?x457 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x582 (= (_ bv0 32) ?x457)))
 (let ((?x538 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x366 (= (_ bv0 32) ?x538)))
 (let ((?x90 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x430 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x430)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x148 $x209)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x245 $x81)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x277 $x415)))
 (let (($x149 (not $x83)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x399 (and $x262 $x231)))
 (let (($x518 (and (not $x399) $x149)))
 (let (($x531 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x621 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x548 (and $x621 $x531)))
 (let (($x43 (not $x548)))
 (let (($x530 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x97 $x530)))
 (let (($x184 (and (not $x298) $x43)))
 (let (($x512 (and (and (and (and (and (and $x184 $x518) $x350) $x351) $x60) $x554) $x366)))
 (let (($x183 (and $x512 $x582)))
 (let (($x166 (= $x183 true)))
 (let (($x481 (= $x166 true)))
 (let (($x435 (= $x481 true)))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x526))))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x89))))))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (= $x629 $x113))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (=> $x555 $x492)))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (= $x555 $x491))))))
 ))
 (let (($x382 (and $x198 $x556)))
 (let (($x88 (and $x382 $x238)))
 (let (($x558 (and $x88 $x373)))
 (let (($x499 (= $x558 true)))
 (let (($x368 (= $x499 true)))
 (let (($x240 (= $x368 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x187))))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv2 32))) ?x203)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv3 32))) ?x498)))
 (let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (=> $x634 (= ?x189 ?x406)))))))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (= $x634 $x113))))))
 ))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (=> $x404 $x492)))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (= $x404 $x491))))))
 ))
 (let (($x63 (and $x484 $x449)))
 (let (($x116 (and $x63 $x310)))
 (let (($x414 (and $x116 $x329)))
 (let (($x7 (= $x414 true)))
 (let (($x243 (= $x7 true)))
 (let (($x324 (= $x243 true)))
 (let (($x532 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x187))))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv2 32))) ?x203)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv3 32))) ?x498)))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x406)))))))))))
 ))
 (let (($x236 (and $x88 $x532)))
 (let (($x516 (= $x236 true)))
 (let (($x511 (= $x516 true)))
 (let (($x440 (= $x511 true)))
 (let (($x520 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x526))))
 (let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (=> $x634 (= ?x189 ?x89))))))))))
 ))
 (let (($x270 (and $x116 $x520)))
 (let (($x589 (= $x270 true)))
 (let (($x219 (= $x589 true)))
 (let (($x332 (= $x219 true)))
 (let (($x662 (and $x332 $x440)))
 (let (($x439 (and $x662 $x324)))
 (let (($x408 (and $x439 $x240)))
 (let (($x36 (and $x408 $x435)))
 (let (($x239 (and $x36 $x477)))
 (let (($x52 (and $x239 $x279)))
 (let (($x109 (and $x52 $x160)))
 (let (($x389 (and $x109 $x249)))
 (let (($x623 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x189)))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (= $x629 $x634))))))
 ))
 (let (($x653 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (= $x555 $x404))))))
 ))
 (let (($x125 (and $x653 $x556)))
 (let (($x255 (and $x125 $x637)))
 (let (($x605 (and $x255 $x623)))
 (let (($x528 (and $x605 $x389)))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (= $x296 (bvuge ?x347 (_ bv1 32)))))))
 ))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (= $x559 (= ?x347 (_ bv0 32)))))))
 ))
 (let (($x427 (and $x271 $x275)))
 (let (($x411 (and $x427 $x489)))
 (let (($x18 (and $x411 $x100)))
 (let (($x524 (and $x18 $x528)))
 (let (($x540 (=> $x524 $x194)))
 (not $x540))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x92987834)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x277b0ab8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x277b0abb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x92987837)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x277b0ab8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x92987834)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00800003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00800002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00800001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00800000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00800003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00800002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00800001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00800000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000013 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000012 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000011 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000010 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00000013 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000012 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000011 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000010 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x48 ((_ extract 3 0) input.dst.llvm-%m2)))
 (let (($x523 (= (_ bv0 4) ?x48)))
 (let (($x394 (= $x523 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x433 (= (_ bv0 2) ?x182)))
 (let (($x222 (= $x433 true)))
 (let (($x131 (= $x222 true)))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x661 (bvadd ?x649 input.dst.llvm-%m2)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem ?x661))))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv2 32))) ?x610))))
 (let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x257 ?x525))))))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (= $x116 $x507))))))
 ))
 (let (($x561 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (=> $x622 $x314)))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (= $x622 $x78))))))
 ))
 (let (($x44 (and $x207 $x561)))
 (let (($x47 (and $x44 $x145)))
 (let (($x15 (and $x47 $x327)))
 (let (($x349 (= $x15 true)))
 (let (($x214 (= $x349 true)))
 (let (($x471 (= $x214 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x661 (bvadd ?x649 input.dst.llvm-%m2)))
 (let ((?x603 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x661))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv2 32))) ?x603)))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv3 32))) ?x220)))
 (let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x257 ?x657)))))))))))
 ))
 (let (($x573 (and $x47 $x259)))
 (let (($x422 (= $x573 true)))
 (let (($x583 (= $x422 true)))
 (let (($x114 (= $x583 true)))
 (let (($x27 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x202 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x421 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x500 (and $x421 $x202)))
 (let (($x210 (and $x500 $x27)))
 (let (($x572 (= $x210 true)))
 (let (($x80 (= $x572 true)))
 (let (($x67 (= $x80 true)))
 (let ((?x291 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x112 (= (_ bv0 32) ?x291)))
 (let ((?x152 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x342 (= (_ bv0 32) ?x152)))
 (let ((?x181 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x508 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x396 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x396)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x659 (and $x321 $x177)))
 (let (($x488 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x204 (and $x488 $x659)))
 (let (($x656 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x334 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x317 $x334)))
 (let (($x428 (not $x195)))
 (let (($x340 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x574 (and $x337 $x340)))
 (let (($x353 (and (not $x574) $x428)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x545 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x545 $x103)))
 (let (($x434 (not $x305)))
 (let (($x588 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x265 $x588)))
 (let (($x35 (and (not $x303) $x434)))
 (let (($x401 (and (and (and (and (and (and $x35 $x353) $x344) $x656) $x204) $x508) $x342)))
 (let (($x341 (and $x401 $x112)))
 (let (($x55 (= $x341 true)))
 (let (($x247 (= $x55 true)))
 (let (($x535 (= $x247 true)))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x450))))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x229))))))))))
 ))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (= $x184 $x507))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (=> $x156 $x314)))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (= $x156 $x78))))))
 ))
 (let (($x437 (and $x143 $x240)))
 (let (($x179 (and $x437 $x639)))
 (let (($x619 (and $x179 $x325)))
 (let (($x514 (= $x619 true)))
 (let (($x369 (= $x514 true)))
 (let (($x613 (= $x369 true)))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x563))))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv2 32))) ?x614)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv3 32))) ?x584)))
 (let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (=> $x43 (= ?x350 ?x307)))))))))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (= $x43 $x507))))))
 ))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (=> $x324 $x314)))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (= $x324 $x78))))))
 ))
 (let (($x524 (and $x9 $x528)))
 (let (($x13 (and $x524 $x392)))
 (let (($x56 (and $x13 $x29)))
 (let (($x393 (= $x56 true)))
 (let (($x147 (= $x393 true)))
 (let (($x23 (= $x147 true)))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x563))))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv2 32))) ?x614)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv3 32))) ?x584)))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x307)))))))))))
 ))
 (let (($x544 (and $x179 $x364)))
 (let (($x632 (= $x544 true)))
 (let (($x66 (= $x632 true)))
 (let (($x517 (= $x66 true)))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x450))))
 (let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (=> $x43 (= ?x350 ?x229))))))))))
 ))
 (let (($x378 (and $x13 $x38)))
 (let (($x267 (= $x378 true)))
 (let (($x600 (= $x267 true)))
 (let (($x636 (= $x600 true)))
 (let (($x641 (and $x636 $x517)))
 (let (($x153 (and $x641 $x23)))
 (let (($x557 (and $x153 $x613)))
 (let (($x527 (and $x557 $x535)))
 (let (($x211 (and $x527 $x67)))
 (let (($x476 (and $x211 $x114)))
 (let (($x485 (and $x476 $x471)))
 (let (($x360 (and $x485 $x131)))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x350)))))))
 ))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (= $x184 $x43))))))
 ))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (= $x156 $x324))))))
 ))
 (let (($x408 (and $x558 $x240)))
 (let (($x399 (and $x408 $x231)))
 (let (($x245 (and $x399 $x470)))
 (let (($x306 (and $x245 $x360)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x257 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (= $x116 (bvuge ?x634 (_ bv1 32)))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (= $x622 (= ?x634 (_ bv0 32)))))))
 ))
 (let (($x413 (and $x168 $x561)))
 (let (($x232 (and $x413 $x308)))
 (let (($x89 (and $x232 $x642)))
 (let (($x193 (and $x89 $x306)))
 (let (($x39 (=> $x193 $x394)))
 (not $x39))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x48 ((_ extract 3 0) input.dst.llvm-%m2)))
 (let (($x523 (= (_ bv0 4) ?x48)))
 (let (($x394 (= $x523 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x433 (= (_ bv0 2) ?x182)))
 (let (($x222 (= $x433 true)))
 (let (($x131 (= $x222 true)))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x661 (bvadd ?x649 input.dst.llvm-%m2)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem ?x661))))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv2 32))) ?x610))))
 (let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x257 ?x525))))))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (= $x116 $x507))))))
 ))
 (let (($x561 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (=> $x622 $x314)))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (= $x622 $x78))))))
 ))
 (let (($x44 (and $x207 $x561)))
 (let (($x47 (and $x44 $x145)))
 (let (($x15 (and $x47 $x327)))
 (let (($x349 (= $x15 true)))
 (let (($x214 (= $x349 true)))
 (let (($x471 (= $x214 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x661 (bvadd ?x649 input.dst.llvm-%m2)))
 (let ((?x603 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x661))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv2 32))) ?x603)))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv3 32))) ?x220)))
 (let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x257 ?x657)))))))))))
 ))
 (let (($x573 (and $x47 $x259)))
 (let (($x422 (= $x573 true)))
 (let (($x583 (= $x422 true)))
 (let (($x114 (= $x583 true)))
 (let (($x27 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x202 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x421 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x500 (and $x421 $x202)))
 (let (($x210 (and $x500 $x27)))
 (let (($x572 (= $x210 true)))
 (let (($x80 (= $x572 true)))
 (let (($x67 (= $x80 true)))
 (let ((?x291 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x112 (= (_ bv0 32) ?x291)))
 (let ((?x152 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x342 (= (_ bv0 32) ?x152)))
 (let ((?x181 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x508 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x396 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x396)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x659 (and $x321 $x177)))
 (let (($x488 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x204 (and $x488 $x659)))
 (let (($x656 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x334 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x317 $x334)))
 (let (($x428 (not $x195)))
 (let (($x340 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x337 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x574 (and $x337 $x340)))
 (let (($x353 (and (not $x574) $x428)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x545 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x545 $x103)))
 (let (($x434 (not $x305)))
 (let (($x588 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x265 $x588)))
 (let (($x35 (and (not $x303) $x434)))
 (let (($x401 (and (and (and (and (and (and $x35 $x353) $x344) $x656) $x204) $x508) $x342)))
 (let (($x341 (and $x401 $x112)))
 (let (($x55 (= $x341 true)))
 (let (($x247 (= $x55 true)))
 (let (($x535 (= $x247 true)))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x450))))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x229))))))))))
 ))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (= $x184 $x507))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (=> $x156 $x314)))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (= $x156 $x78))))))
 ))
 (let (($x437 (and $x143 $x240)))
 (let (($x179 (and $x437 $x639)))
 (let (($x619 (and $x179 $x325)))
 (let (($x514 (= $x619 true)))
 (let (($x369 (= $x514 true)))
 (let (($x613 (= $x369 true)))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x563))))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv2 32))) ?x614)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv3 32))) ?x584)))
 (let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (=> $x43 (= ?x350 ?x307)))))))))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (= $x43 $x507))))))
 ))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (=> $x324 $x314)))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (= $x324 $x78))))))
 ))
 (let (($x524 (and $x9 $x528)))
 (let (($x13 (and $x524 $x392)))
 (let (($x56 (and $x13 $x29)))
 (let (($x393 (= $x56 true)))
 (let (($x147 (= $x393 true)))
 (let (($x23 (= $x147 true)))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x563))))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv2 32))) ?x614)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv3 32))) ?x584)))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x307)))))))))))
 ))
 (let (($x544 (and $x179 $x364)))
 (let (($x632 (= $x544 true)))
 (let (($x66 (= $x632 true)))
 (let (($x517 (= $x66 true)))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x450))))
 (let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (=> $x43 (= ?x350 ?x229))))))))))
 ))
 (let (($x378 (and $x13 $x38)))
 (let (($x267 (= $x378 true)))
 (let (($x600 (= $x267 true)))
 (let (($x636 (= $x600 true)))
 (let (($x641 (and $x636 $x517)))
 (let (($x153 (and $x641 $x23)))
 (let (($x557 (and $x153 $x613)))
 (let (($x527 (and $x557 $x535)))
 (let (($x211 (and $x527 $x67)))
 (let (($x476 (and $x211 $x114)))
 (let (($x485 (and $x476 $x471)))
 (let (($x360 (and $x485 $x131)))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x350)))))))
 ))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (= $x184 $x43))))))
 ))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (= $x156 $x324))))))
 ))
 (let (($x408 (and $x558 $x240)))
 (let (($x399 (and $x408 $x231)))
 (let (($x245 (and $x399 $x470)))
 (let (($x306 (and $x245 $x360)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x257 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (= $x116 (bvuge ?x634 (_ bv1 32)))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (= $x622 (= ?x634 (_ bv0 32)))))))
 ))
 (let (($x413 (and $x168 $x561)))
 (let (($x232 (and $x413 $x308)))
 (let (($x89 (and $x232 $x642)))
 (let (($x193 (and $x89 $x306)))
 (let (($x39 (=> $x193 $x394)))
 (not $x39))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000010)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000807)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000013)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000010)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb69b0850)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x73336d68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x73336d6b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb69b0853)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x73336d68)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb69b0850)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x287 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x278 (= (_ bv0 3) ?x287)))
 (let (($x606 (= $x278 true)))
 (let ((?x486 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x455 (= (_ bv0 2) ?x486)))
 (let (($x417 (= $x455 true)))
 (let (($x196 (= $x417 true)))
 (let (($x482 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x597 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x117))))
 (let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 ?x597))))))))))
 ))
 (let (($x385 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (= $x13 $x242))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (=> $x313 $x351)))))
 ))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (= $x313 $x182))))))
 ))
 (let (($x556 (and $x74 $x160)))
 (let (($x128 (and $x556 $x385)))
 (let (($x132 (and $x128 $x482)))
 (let (($x474 (= $x132 true)))
 (let (($x87 (= $x474 true)))
 (let (($x397 (= $x87 true)))
 (let (($x185 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x294 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x135 (and $x122 $x294)))
 (let (($x105 (and $x135 $x185)))
 (let (($x624 (= $x105 true)))
 (let (($x323 (= $x624 true)))
 (let (($x466 (= $x323 true)))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x446 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x335))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv2 32))) ?x446)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv3 32))) ?x226)))
 (let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 ?x596)))))))))))
 ))
 (let (($x496 (and $x128 $x73)))
 (let (($x658 (= $x496 true)))
 (let (($x286 (= $x658 true)))
 (let (($x28 (= $x286 true)))
 (let ((?x404 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x333 (= (_ bv0 32) ?x404)))
 (let ((?x225 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x652 (= (_ bv0 32) ?x225)))
 (let ((?x608 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x608)))
 (let ((?x318 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x318)))
 (let (($x562 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x550 (and $x562 $x127)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (and $x272 $x550)))
 (let (($x537 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (and $x338 $x316)))
 (let (($x167 (not $x258)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x431 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x431 $x292)))
 (let (($x468 (and (not $x24) $x167)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (and $x275 $x427)))
 (let (($x216 (not $x296)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x559 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x492 (and $x559 $x570)))
 (let (($x102 (and (not $x492) $x216)))
 (let (($x436 (and (and (and (and (and (and $x102 $x468) $x438) $x537) $x208) $x146) $x652)))
 (let (($x108 (and $x436 $x333)))
 (let (($x315 (= $x108 true)))
 (let (($x519 (= $x315 true)))
 (let (($x124 (= $x519 true)))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x400))))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (=> $x35 (= ?x110 ?x136))))))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (= $x35 $x242))))))
 ))
 (let (($x613 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (=> $x626 $x351)))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (= $x626 $x182))))))
 ))
 (let (($x268 (and $x477 $x613)))
 (let (($x163 (and $x268 $x34)))
 (let (($x175 (and $x163 $x564)))
 (let (($x94 (= $x175 true)))
 (let (($x58 (= $x94 true)))
 (let (($x149 (= $x58 true)))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x101)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x499)))
 (let ((?x344 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x434 (bvuge ?x147 (_ bv1 32))))
 (=> $x434 (= ?x344 ?x82)))))))))))
 ))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x434 (bvuge ?x147 (_ bv1 32))))
 (= $x434 $x242))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (=> $x23 $x351)))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (= $x23 $x182))))))
 ))
 (let (($x193 (and $x222 $x306)))
 (let (($x644 (and $x193 $x270)))
 (let (($x352 (and $x644 $x277)))
 (let (($x31 (= $x352 true)))
 (let (($x448 (= $x31 true)))
 (let (($x423 (= $x448 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x101)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x499)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (=> $x35 (= ?x110 ?x82)))))))))))
 ))
 (let (($x250 (and $x163 $x328)))
 (let (($x191 (= $x250 true)))
 (let (($x194 (= $x191 true)))
 (let (($x540 (= $x194 true)))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x400))))
 (let ((?x344 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x434 (bvuge ?x147 (_ bv1 32))))
 (=> $x434 (= ?x344 ?x136))))))))))
 ))
 (let (($x465 (and $x644 $x276)))
 (let (($x99 (= $x465 true)))
 (let (($x16 (= $x99 true)))
 (let (($x343 (= $x16 true)))
 (let (($x162 (and $x343 $x540)))
 (let (($x169 (and $x162 $x423)))
 (let (($x62 (and $x169 $x149)))
 (let (($x98 (and $x62 $x124)))
 (let (($x159 (and $x98 $x28)))
 (let (($x459 (and $x159 $x466)))
 (let (($x593 (and $x459 $x397)))
 (let (($x309 (and $x593 $x196)))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (=> $x35 (= ?x110 ?x344)))))))
 ))
 (let (($x340 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x434 (bvuge ?x147 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (= $x35 $x434))))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (= $x626 $x23))))))
 ))
 (let (($x557 (and $x619 $x613)))
 (let (($x574 (and $x557 $x340)))
 (let (($x488 (and $x574 $x280)))
 (let (($x359 (and $x488 $x309)))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (= $x13 (bvuge ?x43 (_ bv1 32)))))))
 ))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (= $x313 (= ?x43 (_ bv0 32)))))))
 ))
 (let (($x209 (and $x336 $x160)))
 (let (($x649 (and $x209 $x230)))
 (let (($x229 (and $x649 $x345)))
 (let (($x11 (and $x229 $x359)))
 (let (($x129 (=> $x11 $x606)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x287 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x278 (= (_ bv0 3) ?x287)))
 (let (($x606 (= $x278 true)))
 (let ((?x486 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x455 (= (_ bv0 2) ?x486)))
 (let (($x417 (= $x455 true)))
 (let (($x196 (= $x417 true)))
 (let (($x482 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x597 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x117))))
 (let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 ?x597))))))))))
 ))
 (let (($x385 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (= $x13 $x242))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (=> $x313 $x351)))))
 ))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (= $x313 $x182))))))
 ))
 (let (($x556 (and $x74 $x160)))
 (let (($x128 (and $x556 $x385)))
 (let (($x132 (and $x128 $x482)))
 (let (($x474 (= $x132 true)))
 (let (($x87 (= $x474 true)))
 (let (($x397 (= $x87 true)))
 (let (($x185 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x294 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x135 (and $x122 $x294)))
 (let (($x105 (and $x135 $x185)))
 (let (($x624 (= $x105 true)))
 (let (($x323 (= $x624 true)))
 (let (($x466 (= $x323 true)))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x446 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x335))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv2 32))) ?x446)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv3 32))) ?x226)))
 (let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 ?x596)))))))))))
 ))
 (let (($x496 (and $x128 $x73)))
 (let (($x658 (= $x496 true)))
 (let (($x286 (= $x658 true)))
 (let (($x28 (= $x286 true)))
 (let ((?x404 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x333 (= (_ bv0 32) ?x404)))
 (let ((?x225 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x652 (= (_ bv0 32) ?x225)))
 (let ((?x608 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x608)))
 (let ((?x318 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x318)))
 (let (($x562 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x550 (and $x562 $x127)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (and $x272 $x550)))
 (let (($x537 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (and $x338 $x316)))
 (let (($x167 (not $x258)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x431 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x431 $x292)))
 (let (($x468 (and (not $x24) $x167)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (and $x275 $x427)))
 (let (($x216 (not $x296)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x559 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x492 (and $x559 $x570)))
 (let (($x102 (and (not $x492) $x216)))
 (let (($x436 (and (and (and (and (and (and $x102 $x468) $x438) $x537) $x208) $x146) $x652)))
 (let (($x108 (and $x436 $x333)))
 (let (($x315 (= $x108 true)))
 (let (($x519 (= $x315 true)))
 (let (($x124 (= $x519 true)))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x400))))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (=> $x35 (= ?x110 ?x136))))))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (= $x35 $x242))))))
 ))
 (let (($x613 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (=> $x626 $x351)))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (= $x626 $x182))))))
 ))
 (let (($x268 (and $x477 $x613)))
 (let (($x163 (and $x268 $x34)))
 (let (($x175 (and $x163 $x564)))
 (let (($x94 (= $x175 true)))
 (let (($x58 (= $x94 true)))
 (let (($x149 (= $x58 true)))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x101)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x499)))
 (let ((?x344 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x434 (bvuge ?x147 (_ bv1 32))))
 (=> $x434 (= ?x344 ?x82)))))))))))
 ))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x434 (bvuge ?x147 (_ bv1 32))))
 (= $x434 $x242))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (=> $x23 $x351)))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (= $x23 $x182))))))
 ))
 (let (($x193 (and $x222 $x306)))
 (let (($x644 (and $x193 $x270)))
 (let (($x352 (and $x644 $x277)))
 (let (($x31 (= $x352 true)))
 (let (($x448 (= $x31 true)))
 (let (($x423 (= $x448 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x101)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x499)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (=> $x35 (= ?x110 ?x82)))))))))))
 ))
 (let (($x250 (and $x163 $x328)))
 (let (($x191 (= $x250 true)))
 (let (($x194 (= $x191 true)))
 (let (($x540 (= $x194 true)))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x400))))
 (let ((?x344 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x434 (bvuge ?x147 (_ bv1 32))))
 (=> $x434 (= ?x344 ?x136))))))))))
 ))
 (let (($x465 (and $x644 $x276)))
 (let (($x99 (= $x465 true)))
 (let (($x16 (= $x99 true)))
 (let (($x343 (= $x16 true)))
 (let (($x162 (and $x343 $x540)))
 (let (($x169 (and $x162 $x423)))
 (let (($x62 (and $x169 $x149)))
 (let (($x98 (and $x62 $x124)))
 (let (($x159 (and $x98 $x28)))
 (let (($x459 (and $x159 $x466)))
 (let (($x593 (and $x459 $x397)))
 (let (($x309 (and $x593 $x196)))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (=> $x35 (= ?x110 ?x344)))))))
 ))
 (let (($x340 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x434 (bvuge ?x147 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x218 (_ bv1 32))))
 (= $x35 $x434))))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (= $x626 $x23))))))
 ))
 (let (($x557 (and $x619 $x613)))
 (let (($x574 (and $x557 $x340)))
 (let (($x488 (and $x574 $x280)))
 (let (($x359 (and $x488 $x309)))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (= $x13 (bvuge ?x43 (_ bv1 32)))))))
 ))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (= $x313 (= ?x43 (_ bv0 32)))))))
 ))
 (let (($x209 (and $x336 $x160)))
 (let (($x649 (and $x209 $x230)))
 (let (($x229 (and $x649 $x345)))
 (let (($x11 (and $x229 $x359)))
 (let (($x129 (=> $x11 $x606)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6a7b8e58)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd3744f5c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd3744f5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6a7b8e5b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd3744f5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6a7b8e58)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x157 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x27))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv2 32))) ?x47)))
 (let ((?x137 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv3 32))) ?x67)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x137)))))))))))
 ))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x513 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (= $x102 $x542))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x656 (= false false)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (=> $x494 $x656)))))
 ))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x513 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (= $x494 $x285))))))
 ))
 (let (($x195 (and $x334 $x149)))
 (let (($x439 (and $x195 $x89)))
 (let (($x551 (and $x439 $x621)))
 (let (($x640 (= $x551 true)))
 (let (($x354 (= $x640 true)))
 (let ((?x440 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x77 (= (_ bv0 2) ?x440)))
 (let (($x377 (= $x77 true)))
 (let (($x387 (= $x377 true)))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x157 input.dst.llvm-%m2)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x198))))
 (let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (=> $x644 (= ?x54 ?x239))))))))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x513 (_ bv1 32))))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (= $x644 $x542))))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x656 (= false false)))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x574 (_ bv0 32))))
 (=> $x110 $x656)))))
 ))
 (let (($x357 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x513 (_ bv0 32))))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x574 (_ bv0 32))))
 (= $x110 $x285))))))
 ))
 (let (($x176 (and $x357 $x471)))
 (let (($x301 (and $x176 $x206)))
 (let (($x91 (and $x301 $x445)))
 (let (($x279 (= $x91 true)))
 (let (($x158 (= $x279 true)))
 (let (($x419 (= $x158 true)))
 (let (($x166 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x388 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x512 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x49 (and $x512 $x388)))
 (let (($x36 (and $x49 $x166)))
 (let (($x582 (= $x36 true)))
 (let (($x435 (= $x582 true)))
 (let (($x183 (= $x435 true)))
 (let (($x501 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x645 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv1 32))) (select input.dst.llvm-mem ?x645))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv2 32))) ?x173))))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x133))))))))))
 ))
 (let (($x75 (and $x439 $x501)))
 (let (($x409 (= $x75 true)))
 (let (($x402 (= $x409 true)))
 (let (($x643 (= $x402 true)))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x645 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x645))))
 (let ((?x453 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv2 32))) ?x40)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv3 32))) ?x453)))
 (let ((?x438 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x438 ?x205)))))))))))
 ))
 (let (($x622 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x513 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (= $x216 $x542))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x656 (= false false)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (=> $x423 $x656)))))
 ))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x513 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (= $x423 $x285))))))
 ))
 (let (($x361 (and $x148 $x322)))
 (let (($x629 (and $x361 $x622)))
 (let (($x406 (and $x629 $x53)))
 (let (($x416 (= $x406 true)))
 (let (($x92 (= $x416 true)))
 (let (($x203 (= $x92 true)))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x645 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x645))))
 (let ((?x453 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv2 32))) ?x40)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv3 32))) ?x453)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x205)))))))))))
 ))
 (let (($x79 (and $x439 $x174)))
 (let (($x646 (= $x79 true)))
 (let (($x546 (= $x646 true)))
 (let (($x510 (= $x546 true)))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x645 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv1 32))) (select input.dst.llvm-mem ?x645))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv2 32))) ?x173))))
 (let ((?x438 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x438 ?x133))))))))))
 ))
 (let (($x249 (and $x629 $x25)))
 (let (($x7 (= $x249 true)))
 (let (($x243 (= $x7 true)))
 (let (($x324 (= $x243 true)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x157 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x27))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv2 32))) ?x47)))
 (let ((?x137 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv3 32))) ?x67)))
 (let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (=> $x644 (= ?x54 ?x137)))))))))))
 ))
 (let (($x267 (and $x301 $x371)))
 (let (($x600 (= $x267 true)))
 (let (($x636 (= $x600 true)))
 (let (($x143 (= $x636 true)))
 (let ((?x599 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x380 (= (_ bv0 32) ?x599)))
 (let ((?x226 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x596 (= (_ bv0 32) ?x226)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x446 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x631 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x631)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x263 (and $x497 $x115)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x616 (and $x335 $x263)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x385 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x519 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x519 $x124)))
 (let (($x653 (not $x98)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x333 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (and $x333 $x108)))
 (let (($x556 (and (not $x315) $x653)))
 (let (($x491 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x146 $x491)))
 (let (($x652 (not $x225)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x127 $x208)))
 (let (($x404 (and (not $x384) $x652)))
 (let (($x159 (and (and (and (and (and (and $x404 $x556) $x385) $x63) $x616) $x446) $x596)))
 (let (($x628 (and $x159 $x380)))
 (let (($x186 (= $x628 true)))
 (let (($x122 (= $x186 true)))
 (let (($x142 (= $x122 true)))
 (let (($x437 (and $x142 $x143)))
 (let (($x140 (and $x437 $x324)))
 (let (($x390 (and $x140 $x510)))
 (let (($x381 (and $x390 $x203)))
 (let (($x664 (and $x381 $x643)))
 (let (($x660 (and $x664 $x183)))
 (let (($x93 (and $x660 $x419)))
 (let (($x20 (and $x93 $x387)))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x438 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x438)))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (= $x102 $x216))))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (= $x494 $x423))))))
 ))
 (let (($x62 (and $x175 $x149)))
 (let (($x24 (and $x62 $x292)))
 (let (($x272 (and $x24 $x223)))
 (let (($x52 (and $x272 $x20)))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (=> $x644 (= ?x54 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x434 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (= $x644 (bvuge ?x434 (_ bv1 32)))))))
 ))
 (let (($x549 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x434 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x574 (_ bv0 32))))
 (= $x110 (= ?x434 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x549 $x471)))
 (let (($x538 (and $x177 $x215)))
 (let (($x136 (and $x538 $x180)))
 (let (($x568 (and $x136 $x52)))
 (let (($x665 (=> $x568 $x354)))
 (not $x665)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x157 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x27))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv2 32))) ?x47)))
 (let ((?x137 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv3 32))) ?x67)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x137)))))))))))
 ))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x513 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (= $x102 $x542))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x656 (= false false)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (=> $x494 $x656)))))
 ))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x513 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (= $x494 $x285))))))
 ))
 (let (($x195 (and $x334 $x149)))
 (let (($x439 (and $x195 $x89)))
 (let (($x551 (and $x439 $x621)))
 (let (($x640 (= $x551 true)))
 (let (($x354 (= $x640 true)))
 (let ((?x440 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x77 (= (_ bv0 2) ?x440)))
 (let (($x377 (= $x77 true)))
 (let (($x387 (= $x377 true)))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x157 input.dst.llvm-%m2)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem ?x27))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x27 (_ bv2 32))) ?x198))))
 (let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (=> $x644 (= ?x54 ?x239))))))))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x513 (_ bv1 32))))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (= $x644 $x542))))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x656 (= false false)))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x574 (_ bv0 32))))
 (=> $x110 $x656)))))
 ))
 (let (($x357 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x513 (_ bv0 32))))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x574 (_ bv0 32))))
 (= $x110 $x285))))))
 ))
 (let (($x176 (and $x357 $x471)))
 (let (($x301 (and $x176 $x206)))
 (let (($x91 (and $x301 $x445)))
 (let (($x279 (= $x91 true)))
 (let (($x158 (= $x279 true)))
 (let (($x419 (= $x158 true)))
 (let (($x166 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x388 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x512 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x49 (and $x512 $x388)))
 (let (($x36 (and $x49 $x166)))
 (let (($x582 (= $x36 true)))
 (let (($x435 (= $x582 true)))
 (let (($x183 (= $x435 true)))
 (let (($x501 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x645 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv1 32))) (select input.dst.llvm-mem ?x645))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv2 32))) ?x173))))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x133))))))))))
 ))
 (let (($x75 (and $x439 $x501)))
 (let (($x409 (= $x75 true)))
 (let (($x402 (= $x409 true)))
 (let (($x643 (= $x402 true)))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x645 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x645))))
 (let ((?x453 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv2 32))) ?x40)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv3 32))) ?x453)))
 (let ((?x438 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x438 ?x205)))))))))))
 ))
 (let (($x622 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (bvuge ?x513 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (= $x216 $x542))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x656 (= false false)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (=> $x423 $x656)))))
 ))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x513 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (= $x423 $x285))))))
 ))
 (let (($x361 (and $x148 $x322)))
 (let (($x629 (and $x361 $x622)))
 (let (($x406 (and $x629 $x53)))
 (let (($x416 (= $x406 true)))
 (let (($x92 (= $x416 true)))
 (let (($x203 (= $x92 true)))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x645 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x645))))
 (let ((?x453 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv2 32))) ?x40)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x645 (_ bv3 32))) ?x453)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x205)))))))))))
 ))
 (let (($x79 (and $x439 $x174)))
 (let (($x646 (= $x79 true)))
 (let (($x546 (= $x646 true)))
 (let (($x510 (= $x546 true)))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x645 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv1 32))) (select input.dst.llvm-mem ?x645))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x645 (_ bv2 32))) ?x173))))
 (let ((?x438 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x438 ?x133))))))))))
 ))
 (let (($x249 (and $x629 $x25)))
 (let (($x7 (= $x249 true)))
 (let (($x243 (= $x7 true)))
 (let (($x324 (= $x243 true)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x27 (bvadd ?x157 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x27))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv2 32))) ?x47)))
 (let ((?x137 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x27 (_ bv3 32))) ?x67)))
 (let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (=> $x644 (= ?x54 ?x137)))))))))))
 ))
 (let (($x267 (and $x301 $x371)))
 (let (($x600 (= $x267 true)))
 (let (($x636 (= $x600 true)))
 (let (($x143 (= $x636 true)))
 (let ((?x599 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x380 (= (_ bv0 32) ?x599)))
 (let ((?x226 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x596 (= (_ bv0 32) ?x226)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x446 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x631 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x631)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x263 (and $x497 $x115)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x616 (and $x335 $x263)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x385 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x519 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x519 $x124)))
 (let (($x653 (not $x98)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x333 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (and $x333 $x108)))
 (let (($x556 (and (not $x315) $x653)))
 (let (($x491 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x146 $x491)))
 (let (($x652 (not $x225)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x127 $x208)))
 (let (($x404 (and (not $x384) $x652)))
 (let (($x159 (and (and (and (and (and (and $x404 $x556) $x385) $x63) $x616) $x446) $x596)))
 (let (($x628 (and $x159 $x380)))
 (let (($x186 (= $x628 true)))
 (let (($x122 (= $x186 true)))
 (let (($x142 (= $x122 true)))
 (let (($x437 (and $x142 $x143)))
 (let (($x140 (and $x437 $x324)))
 (let (($x390 (and $x140 $x510)))
 (let (($x381 (and $x390 $x203)))
 (let (($x664 (and $x381 $x643)))
 (let (($x660 (and $x664 $x183)))
 (let (($x93 (and $x660 $x419)))
 (let (($x20 (and $x93 $x387)))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x438 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x438)))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (= $x102 $x216))))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (= $x494 $x423))))))
 ))
 (let (($x62 (and $x175 $x149)))
 (let (($x24 (and $x62 $x292)))
 (let (($x272 (and $x24 $x223)))
 (let (($x52 (and $x272 $x20)))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (=> $x644 (= ?x54 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x434 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x574 (_ bv1 32))))
 (= $x644 (bvuge ?x434 (_ bv1 32)))))))
 ))
 (let (($x549 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x434 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x574 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x574 (_ bv0 32))))
 (= $x110 (= ?x434 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x549 $x471)))
 (let (($x538 (and $x177 $x215)))
 (let (($x136 (and $x538 $x180)))
 (let (($x568 (and $x136 $x52)))
 (let (($x665 (=> $x568 $x354)))
 (not $x665)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x93284804)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0e092010)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x80c82200)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0e092013)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x93284807)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0e092010)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x93284804)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x40
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x40
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x80c82203 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x80c82202 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x80c82201 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x80c82200 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x80c82203 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x80c82202 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x80c82201 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x80c82200 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e19a684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0b18e143)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e19a687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e19a684)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x657 input.dst.llvm-%m2)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem ?x573))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv2 32))) ?x29))))
 (let ((?x107 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (=> $x322 (= ?x107 ?x5))))))))))
 ))
 (let (($x648 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x224 (_ bv1 32))))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (= $x322 $x375))))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x537 (= false false)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x597 (_ bv0 32))))
 (=> $x207 $x537)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x224 (_ bv0 32))))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x597 (_ bv0 32))))
 (= $x207 $x86))))))
 ))
 (let (($x296 (and $x427 $x47)))
 (let (($x345 (and $x296 $x648)))
 (let (($x481 (and $x345 $x650)))
 (let (($x533 (= $x481 true)))
 (let (($x532 (= $x533 true)))
 (let ((?x373 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x507 (= (_ bv0 2) ?x373)))
 (let (($x506 (= $x507 true)))
 (let (($x9 (= $x506 true)))
 (let (($x553 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x657 input.dst.llvm-%m2)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem ?x573))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv2 32))) ?x29))))
 (let ((?x63 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (=> $x108 (= ?x63 ?x5))))))))))
 ))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x224 (_ bv1 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (= $x108 $x375))))))
 ))
 (let (($x562 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x537 (= false false)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (=> $x372 $x537)))))
 ))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x224 (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (= $x372 $x86))))))
 ))
 (let (($x473 (and $x441 $x562)))
 (let (($x415 (and $x473 $x83)))
 (let (($x14 (and $x415 $x553)))
 (let (($x526 (= $x14 true)))
 (let (($x257 (= $x526 true)))
 (let (($x569 (= $x257 true)))
 (let (($x283 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x524 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x248 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x581 (and $x248 $x524)))
 (let (($x123 (and $x581 $x283)))
 (let (($x320 (= $x123 true)))
 (let (($x57 (= $x320 true)))
 (let (($x429 (= $x57 true)))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x264 (bvadd ?x657 input.dst.llvm-%m1)))
 (let ((?x577 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x577))))
 (let ((?x107 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (=> $x322 (= ?x107 ?x200))))))))))
 ))
 (let (($x144 (and $x345 $x663)))
 (let (($x470 (= $x144 true)))
 (let (($x109 (= $x470 true)))
 (let (($x78 (= $x109 true)))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x264 (bvadd ?x657 input.dst.llvm-%m1)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x264))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv2 32))) ?x12)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv3 32))) ?x474)))
 (let ((?x620 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x27 (_ bv1 32))))
 (=> $x300 (= ?x620 ?x117)))))))))))
 ))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x224 (_ bv1 32))))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x27 (_ bv1 32))))
 (= $x300 $x375))))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x537 (= false false)))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x27 (_ bv0 32))))
 (=> $x211 $x537)))))
 ))
 (let (($x605 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x224 (_ bv0 32))))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x27 (_ bv0 32))))
 (= $x211 $x86))))))
 ))
 (let (($x178 (and $x605 $x483)))
 (let (($x336 (and $x178 $x534)))
 (let (($x287 (and $x336 $x51)))
 (let (($x278 (= $x287 true)))
 (let (($x359 (= $x278 true)))
 (let (($x11 (= $x359 true)))
 (let (($x482 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x264 (bvadd ?x657 input.dst.llvm-%m1)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x264))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv2 32))) ?x12)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv3 32))) ?x474)))
 (let ((?x107 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (=> $x322 (= ?x107 ?x117)))))))))))
 ))
 (let (($x87 (and $x345 $x482)))
 (let (($x397 (= $x87 true)))
 (let (($x65 (= $x397 true)))
 (let (($x593 (= $x65 true)))
 (let (($x412 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x264 (bvadd ?x657 input.dst.llvm-%m1)))
 (let ((?x577 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x577))))
 (let ((?x620 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x27 (_ bv1 32))))
 (=> $x300 (= ?x620 ?x200))))))))))
 ))
 (let (($x376 (and $x336 $x412)))
 (let (($x349 (= $x376 true)))
 (let (($x131 (= $x349 true)))
 (let (($x393 (= $x131 true)))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x657 input.dst.llvm-%m2)))
 (let ((?x422 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x573))))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv2 32))) ?x422)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv3 32))) ?x367)))
 (let ((?x63 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (=> $x108 (= ?x63 ?x199)))))))))))
 ))
 (let (($x641 (and $x415 $x458)))
 (let (($x475 (= $x641 true)))
 (let (($x99 (= $x475 true)))
 (let (($x16 (= $x99 true)))
 (let ((?x383 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x654 (= (_ bv0 32) ?x383)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x381 (= (_ bv0 32) ?x203)))
 (let ((?x416 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x416)))
 (let ((?x236 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x498 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x236)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x510 $x498)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x406 (and $x546 $x53)))
 (let (($x646 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x611 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x197 $x611)))
 (let (($x453 (not $x40)))
 (let (($x595 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x439 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x439 $x595)))
 (let (($x480 (and (not $x217) $x453)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x334 (and $x140 $x305)))
 (let (($x195 (not $x334)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x25 $x7)))
 (let (($x89 (and (not $x243) $x195)))
 (let (($x664 (and (and (and (and (and (and $x89 $x480) $x174) $x646) $x406) $x92) $x381)))
 (let (($x405 (and $x664 $x654)))
 (let (($x237 (= $x405 true)))
 (let (($x512 (= $x237 true)))
 (let (($x529 (= $x512 true)))
 (let (($x343 (and $x529 $x16)))
 (let (($x147 (and $x343 $x393)))
 (let (($x486 (and $x147 $x593)))
 (let (($x309 (and $x486 $x11)))
 (let (($x192 (and $x309 $x78)))
 (let (($x563 (and $x192 $x429)))
 (let (($x536 (and $x563 $x569)))
 (let (($x389 (and $x536 $x9)))
 (let (($x575 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x107 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (=> $x322 (= ?x107 ?x620)))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x27 (_ bv1 32))))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (= $x322 $x300))))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x27 (_ bv0 32))))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x597 (_ bv0 32))))
 (= $x207 $x211))))))
 ))
 (let (($x67 (and $x572 $x47)))
 (let (($x622 (and $x67 $x168)))
 (let (($x133 (and $x622 $x575)))
 (let (($x368 (and $x133 $x389)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (=> $x108 (= ?x63 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (= $x108 (bvuge ?x216 (_ bv1 32)))))))
 ))
 (let (($x454 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (= $x372 (= ?x216 (_ bv0 32)))))))
 ))
 (let (($x318 (and $x454 $x562)))
 (let (($x519 (and $x318 $x74)))
 (let (($x635 (and $x519 $x497)))
 (let (($x240 (and $x635 $x368)))
 (let (($x139 (=> $x240 $x532)))
 (not $x139)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x657 input.dst.llvm-%m2)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem ?x573))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv2 32))) ?x29))))
 (let ((?x107 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (=> $x322 (= ?x107 ?x5))))))))))
 ))
 (let (($x648 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x224 (_ bv1 32))))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (= $x322 $x375))))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x537 (= false false)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x597 (_ bv0 32))))
 (=> $x207 $x537)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x224 (_ bv0 32))))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x597 (_ bv0 32))))
 (= $x207 $x86))))))
 ))
 (let (($x296 (and $x427 $x47)))
 (let (($x345 (and $x296 $x648)))
 (let (($x481 (and $x345 $x650)))
 (let (($x533 (= $x481 true)))
 (let (($x532 (= $x533 true)))
 (let ((?x373 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x507 (= (_ bv0 2) ?x373)))
 (let (($x506 (= $x507 true)))
 (let (($x9 (= $x506 true)))
 (let (($x553 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x657 input.dst.llvm-%m2)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem ?x573))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x573 (_ bv2 32))) ?x29))))
 (let ((?x63 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (=> $x108 (= ?x63 ?x5))))))))))
 ))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x224 (_ bv1 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (= $x108 $x375))))))
 ))
 (let (($x562 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x537 (= false false)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (=> $x372 $x537)))))
 ))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x224 (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (= $x372 $x86))))))
 ))
 (let (($x473 (and $x441 $x562)))
 (let (($x415 (and $x473 $x83)))
 (let (($x14 (and $x415 $x553)))
 (let (($x526 (= $x14 true)))
 (let (($x257 (= $x526 true)))
 (let (($x569 (= $x257 true)))
 (let (($x283 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x524 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x248 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x581 (and $x248 $x524)))
 (let (($x123 (and $x581 $x283)))
 (let (($x320 (= $x123 true)))
 (let (($x57 (= $x320 true)))
 (let (($x429 (= $x57 true)))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x264 (bvadd ?x657 input.dst.llvm-%m1)))
 (let ((?x577 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x577))))
 (let ((?x107 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (=> $x322 (= ?x107 ?x200))))))))))
 ))
 (let (($x144 (and $x345 $x663)))
 (let (($x470 (= $x144 true)))
 (let (($x109 (= $x470 true)))
 (let (($x78 (= $x109 true)))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x264 (bvadd ?x657 input.dst.llvm-%m1)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x264))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv2 32))) ?x12)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv3 32))) ?x474)))
 (let ((?x620 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x27 (_ bv1 32))))
 (=> $x300 (= ?x620 ?x117)))))))))))
 ))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x224 (_ bv1 32))))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x27 (_ bv1 32))))
 (= $x300 $x375))))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x537 (= false false)))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x27 (_ bv0 32))))
 (=> $x211 $x537)))))
 ))
 (let (($x605 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x224 (_ bv0 32))))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x27 (_ bv0 32))))
 (= $x211 $x86))))))
 ))
 (let (($x178 (and $x605 $x483)))
 (let (($x336 (and $x178 $x534)))
 (let (($x287 (and $x336 $x51)))
 (let (($x278 (= $x287 true)))
 (let (($x359 (= $x278 true)))
 (let (($x11 (= $x359 true)))
 (let (($x482 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x264 (bvadd ?x657 input.dst.llvm-%m1)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x264))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv2 32))) ?x12)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x264 (_ bv3 32))) ?x474)))
 (let ((?x107 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (=> $x322 (= ?x107 ?x117)))))))))))
 ))
 (let (($x87 (and $x345 $x482)))
 (let (($x397 (= $x87 true)))
 (let (($x65 (= $x397 true)))
 (let (($x593 (= $x65 true)))
 (let (($x412 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x264 (bvadd ?x657 input.dst.llvm-%m1)))
 (let ((?x577 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x577))))
 (let ((?x620 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x27 (_ bv1 32))))
 (=> $x300 (= ?x620 ?x200))))))))))
 ))
 (let (($x376 (and $x336 $x412)))
 (let (($x349 (= $x376 true)))
 (let (($x131 (= $x349 true)))
 (let (($x393 (= $x131 true)))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x657 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x573 (bvadd ?x657 input.dst.llvm-%m2)))
 (let ((?x422 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x573))))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv2 32))) ?x422)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x573 (_ bv3 32))) ?x367)))
 (let ((?x63 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (=> $x108 (= ?x63 ?x199)))))))))))
 ))
 (let (($x641 (and $x415 $x458)))
 (let (($x475 (= $x641 true)))
 (let (($x99 (= $x475 true)))
 (let (($x16 (= $x99 true)))
 (let ((?x383 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x654 (= (_ bv0 32) ?x383)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x381 (= (_ bv0 32) ?x203)))
 (let ((?x416 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x416)))
 (let ((?x236 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x498 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x236)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x53 (and $x510 $x498)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x406 (and $x546 $x53)))
 (let (($x646 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x611 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x197 $x611)))
 (let (($x453 (not $x40)))
 (let (($x595 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x439 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x439 $x595)))
 (let (($x480 (and (not $x217) $x453)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x334 (and $x140 $x305)))
 (let (($x195 (not $x334)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x25 $x7)))
 (let (($x89 (and (not $x243) $x195)))
 (let (($x664 (and (and (and (and (and (and $x89 $x480) $x174) $x646) $x406) $x92) $x381)))
 (let (($x405 (and $x664 $x654)))
 (let (($x237 (= $x405 true)))
 (let (($x512 (= $x237 true)))
 (let (($x529 (= $x512 true)))
 (let (($x343 (and $x529 $x16)))
 (let (($x147 (and $x343 $x393)))
 (let (($x486 (and $x147 $x593)))
 (let (($x309 (and $x486 $x11)))
 (let (($x192 (and $x309 $x78)))
 (let (($x563 (and $x192 $x429)))
 (let (($x536 (and $x563 $x569)))
 (let (($x389 (and $x536 $x9)))
 (let (($x575 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x620 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x107 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (=> $x322 (= ?x107 ?x620)))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x27 (_ bv1 32))))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x597 (_ bv1 32))))
 (= $x322 $x300))))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x27 (_ bv0 32))))
 (let ((?x597 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x597 (_ bv0 32))))
 (= $x207 $x211))))))
 ))
 (let (($x67 (and $x572 $x47)))
 (let (($x622 (and $x67 $x168)))
 (let (($x133 (and $x622 $x575)))
 (let (($x368 (and $x133 $x389)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (=> $x108 (= ?x63 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x24 (_ bv1 32))))
 (= $x108 (bvuge ?x216 (_ bv1 32)))))))
 ))
 (let (($x454 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (= $x372 (= ?x216 (_ bv0 32)))))))
 ))
 (let (($x318 (and $x454 $x562)))
 (let (($x519 (and $x318 $x74)))
 (let (($x635 (and $x519 $x497)))
 (let (($x240 (and $x635 $x368)))
 (let (($x139 (=> $x240 $x532)))
 (not $x139)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e19a684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0b18e143)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e19a687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e19a684)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe2740800)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42081004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x02180000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x42081007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe2740803)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42081004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe2740800)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x02180003) #x20
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x02180003) #x20
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x20000000
      (let ((a!1 (concat (k!23 (bvadd #x02180003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x02180002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x02180001 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x02180000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #x02180003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x02180002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x02180001 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x02180000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x20000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x523 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x50))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv2 32))) ?x121)))
 (let ((?x545 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv3 32))) ?x6)))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (=> $x172 (= ?x493 ?x545)))))))))))
 ))
 (let (($x606 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (bvuge ?x330 (_ bv1 32))))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (= $x172 $x308))))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (= ?x573 (_ bv0 32))))
 (=> $x610 $x173)))))
 ))
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x330 (_ bv0 32))))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (= ?x573 (_ bv0 32))))
 (= $x610 $x418))))))
 ))
 (let (($x113 (and $x350 $x13)))
 (let (($x549 (and $x113 $x606)))
 (let (($x242 (and $x549 $x222)))
 (let (($x520 (= $x242 true)))
 (let (($x346 (= $x520 true)))
 (let ((?x229 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x153 (= (_ bv0 2) ?x229)))
 (let (($x218 (= $x153 true)))
 (let (($x360 (= $x218 true)))
 (let (($x492 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x523 input.dst.llvm-%m2)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x266))))
 (let ((?x646 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (=> $x595 (= ?x646 ?x304))))))))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (bvuge ?x330 (_ bv1 32))))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (= $x595 $x308))))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x622 (_ bv0 32))))
 (=> $x107 $x173)))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x330 (_ bv0 32))))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x622 (_ bv0 32))))
 (= $x107 $x418))))))
 ))
 (let (($x347 (and $x378 $x590)))
 (let (($x312 (and $x347 $x8)))
 (let (($x316 (and $x312 $x492)))
 (let (($x468 (= $x316 true)))
 (let (($x258 (= $x468 true)))
 (let (($x623 (= $x258 true)))
 (let (($x358 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x461 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x60 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x201 (and $x60 $x461)))
 (let (($x490 (and $x201 $x358)))
 (let (($x567 (= $x490 true)))
 (let (($x342 (= $x567 true)))
 (let (($x90 (= $x342 true)))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x523 input.dst.llvm-%m1)))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x363))))
 (let ((?x111 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (=> $x483 (= ?x111 ?x527))))))))))
 ))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (bvuge ?x330 (_ bv1 32))))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (= $x483 $x308))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x239 (_ bv0 32))))
 (=> $x66 $x173)))))
 ))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x330 (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x239 (_ bv0 32))))
 (= $x66 $x418))))))
 ))
 (let (($x148 (and $x411 $x422)))
 (let (($x180 (and $x148 $x554)))
 (let (($x188 (and $x180 $x214)))
 (let (($x23 (= $x188 true)))
 (let (($x280 (= $x23 true)))
 (let (($x485 (= $x280 true)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x523 input.dst.llvm-%m1)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x170))))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv2 32))) ?x385)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv3 32))) ?x279)))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (=> $x172 (= ?x493 ?x198)))))))))))
 ))
 (let (($x386 (and $x549 $x354)))
 (let (($x621 (= $x386 true)))
 (let (($x52 (= $x621 true)))
 (let (($x568 (= $x52 true)))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x523 input.dst.llvm-%m1)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x170))))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv2 32))) ?x385)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv3 32))) ?x279)))
 (let ((?x111 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (=> $x483 (= ?x111 ?x198)))))))))))
 ))
 (let (($x158 (and $x180 $x445)))
 (let (($x419 (= $x158 true)))
 (let (($x511 (= $x419 true)))
 (let (($x93 (= $x511 true)))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x523 input.dst.llvm-%m1)))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x363))))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (=> $x172 (= ?x493 ?x527))))))))))
 ))
 (let (($x202 (and $x549 $x112)))
 (let (($x585 (= $x202 true)))
 (let (($x500 (= $x585 true)))
 (let (($x31 (= $x500 true)))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x523 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x50))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv2 32))) ?x121)))
 (let ((?x545 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv3 32))) ?x6)))
 (let ((?x646 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (=> $x595 (= ?x646 ?x545)))))))))))
 ))
 (let (($x194 (and $x312 $x317)))
 (let (($x28 (= $x194 true)))
 (let (($x286 (= $x28 true)))
 (let (($x45 (= $x286 true)))
 (let ((?x125 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x615 (= (_ bv0 32) ?x125)))
 (let ((?x11 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x309 (= (_ bv0 32) ?x11)))
 (let ((?x278 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x278)))
 (let ((?x196 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x196)))
 (let (($x593 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x593 $x129)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x65 $x51)))
 (let (($x397 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x482 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x247 $x288)))
 (let (($x474 (not $x12)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x345 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x345 $x370)))
 (let (($x365 (and (not $x42) $x474)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x427 (and $x147 $x447)))
 (let (($x296 (not $x427)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x412 $x349)))
 (let (($x648 (and (not $x131) $x296)))
 (let (($x192 (and (and (and (and (and (and $x648 $x365) $x482) $x397) $x287) $x359) $x309)))
 (let (($x33 (and $x192 $x615)))
 (let (($x356 (= $x33 true)))
 (let (($x248 (= $x356 true)))
 (let (($x70 (= $x248 true)))
 (let (($x446 (and $x70 $x45)))
 (let (($x448 (and $x446 $x31)))
 (let (($x440 (and $x448 $x93)))
 (let (($x20 (and $x440 $x568)))
 (let (($x182 (and $x20 $x485)))
 (let (($x171 (and $x182 $x90)))
 (let (($x539 (and $x171 $x623)))
 (let (($x306 (and $x539 $x360)))
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x111 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (=> $x483 (= ?x111 ?x493)))))))
 ))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (= $x483 $x172))))))
 ))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (= ?x573 (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x239 (_ bv0 32))))
 (= $x66 $x610))))))
 ))
 (let (($x367 (and $x220 $x422)))
 (let (($x534 (and $x367 $x516)))
 (let (($x200 (and $x534 $x451)))
 (let (($x613 (and $x200 $x306)))
 (let (($x510 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x646 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (=> $x595 (= ?x646 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x300 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (= $x595 (bvuge ?x300 (_ bv1 32)))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x300 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x622 (_ bv0 32))))
 (= $x107 (= ?x300 (_ bv0 32)))))))
 ))
 (let (($x41 (and $x374 $x590)))
 (let (($x197 (and $x41 $x205)))
 (let (($x390 (and $x197 $x510)))
 (let (($x433 (and $x390 $x613)))
 (let (($x455 (=> $x433 $x346)))
 (not $x455)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x523 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x50))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv2 32))) ?x121)))
 (let ((?x545 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv3 32))) ?x6)))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (=> $x172 (= ?x493 ?x545)))))))))))
 ))
 (let (($x606 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (bvuge ?x330 (_ bv1 32))))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (= $x172 $x308))))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (= ?x573 (_ bv0 32))))
 (=> $x610 $x173)))))
 ))
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x330 (_ bv0 32))))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (= ?x573 (_ bv0 32))))
 (= $x610 $x418))))))
 ))
 (let (($x113 (and $x350 $x13)))
 (let (($x549 (and $x113 $x606)))
 (let (($x242 (and $x549 $x222)))
 (let (($x520 (= $x242 true)))
 (let (($x346 (= $x520 true)))
 (let ((?x229 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x153 (= (_ bv0 2) ?x229)))
 (let (($x218 (= $x153 true)))
 (let (($x360 (= $x218 true)))
 (let (($x492 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x523 input.dst.llvm-%m2)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x266))))
 (let ((?x646 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (=> $x595 (= ?x646 ?x304))))))))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (bvuge ?x330 (_ bv1 32))))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (= $x595 $x308))))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x622 (_ bv0 32))))
 (=> $x107 $x173)))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x330 (_ bv0 32))))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x622 (_ bv0 32))))
 (= $x107 $x418))))))
 ))
 (let (($x347 (and $x378 $x590)))
 (let (($x312 (and $x347 $x8)))
 (let (($x316 (and $x312 $x492)))
 (let (($x468 (= $x316 true)))
 (let (($x258 (= $x468 true)))
 (let (($x623 (= $x258 true)))
 (let (($x358 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x461 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x60 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x201 (and $x60 $x461)))
 (let (($x490 (and $x201 $x358)))
 (let (($x567 (= $x490 true)))
 (let (($x342 (= $x567 true)))
 (let (($x90 (= $x342 true)))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x523 input.dst.llvm-%m1)))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x363))))
 (let ((?x111 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (=> $x483 (= ?x111 ?x527))))))))))
 ))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (bvuge ?x330 (_ bv1 32))))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (= $x483 $x308))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x239 (_ bv0 32))))
 (=> $x66 $x173)))))
 ))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x330 (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x239 (_ bv0 32))))
 (= $x66 $x418))))))
 ))
 (let (($x148 (and $x411 $x422)))
 (let (($x180 (and $x148 $x554)))
 (let (($x188 (and $x180 $x214)))
 (let (($x23 (= $x188 true)))
 (let (($x280 (= $x23 true)))
 (let (($x485 (= $x280 true)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x523 input.dst.llvm-%m1)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x170))))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv2 32))) ?x385)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv3 32))) ?x279)))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (=> $x172 (= ?x493 ?x198)))))))))))
 ))
 (let (($x386 (and $x549 $x354)))
 (let (($x621 (= $x386 true)))
 (let (($x52 (= $x621 true)))
 (let (($x568 (= $x52 true)))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x523 input.dst.llvm-%m1)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x170))))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv2 32))) ?x385)))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv3 32))) ?x279)))
 (let ((?x111 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (=> $x483 (= ?x111 ?x198)))))))))))
 ))
 (let (($x158 (and $x180 $x445)))
 (let (($x419 (= $x158 true)))
 (let (($x511 (= $x419 true)))
 (let (($x93 (= $x511 true)))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x523 input.dst.llvm-%m1)))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x363))))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (=> $x172 (= ?x493 ?x527))))))))))
 ))
 (let (($x202 (and $x549 $x112)))
 (let (($x585 (= $x202 true)))
 (let (($x500 (= $x585 true)))
 (let (($x31 (= $x500 true)))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x50 (bvadd ?x523 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x50))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv2 32))) ?x121)))
 (let ((?x545 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x50 (_ bv3 32))) ?x6)))
 (let ((?x646 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (=> $x595 (= ?x646 ?x545)))))))))))
 ))
 (let (($x194 (and $x312 $x317)))
 (let (($x28 (= $x194 true)))
 (let (($x286 (= $x28 true)))
 (let (($x45 (= $x286 true)))
 (let ((?x125 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x615 (= (_ bv0 32) ?x125)))
 (let ((?x11 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x309 (= (_ bv0 32) ?x11)))
 (let ((?x278 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x278)))
 (let ((?x196 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x196)))
 (let (($x593 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x593 $x129)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x65 $x51)))
 (let (($x397 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x482 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x247 $x288)))
 (let (($x474 (not $x12)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x345 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x345 $x370)))
 (let (($x365 (and (not $x42) $x474)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x427 (and $x147 $x447)))
 (let (($x296 (not $x427)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x412 $x349)))
 (let (($x648 (and (not $x131) $x296)))
 (let (($x192 (and (and (and (and (and (and $x648 $x365) $x482) $x397) $x287) $x359) $x309)))
 (let (($x33 (and $x192 $x615)))
 (let (($x356 (= $x33 true)))
 (let (($x248 (= $x356 true)))
 (let (($x70 (= $x248 true)))
 (let (($x446 (and $x70 $x45)))
 (let (($x448 (and $x446 $x31)))
 (let (($x440 (and $x448 $x93)))
 (let (($x20 (and $x440 $x568)))
 (let (($x182 (and $x20 $x485)))
 (let (($x171 (and $x182 $x90)))
 (let (($x539 (and $x171 $x623)))
 (let (($x306 (and $x539 $x360)))
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x111 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (=> $x483 (= ?x111 ?x493)))))))
 ))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x573 (_ bv1 32))))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x239 (_ bv1 32))))
 (= $x483 $x172))))))
 ))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x573 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (= ?x573 (_ bv0 32))))
 (let ((?x239 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x239 (_ bv0 32))))
 (= $x66 $x610))))))
 ))
 (let (($x367 (and $x220 $x422)))
 (let (($x534 (and $x367 $x516)))
 (let (($x200 (and $x534 $x451)))
 (let (($x613 (and $x200 $x306)))
 (let (($x510 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x646 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (=> $x595 (= ?x646 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x300 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (bvuge ?x622 (_ bv1 32))))
 (= $x595 (bvuge ?x300 (_ bv1 32)))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x300 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x622 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x107 (= ?x622 (_ bv0 32))))
 (= $x107 (= ?x300 (_ bv0 32)))))))
 ))
 (let (($x41 (and $x374 $x590)))
 (let (($x197 (and $x41 $x205)))
 (let (($x390 (and $x197 $x510)))
 (let (($x433 (and $x390 $x613)))
 (let (($x455 (=> $x433 $x346)))
 (not $x455)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xe8be4148)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x90ebb404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x266d7c03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x90ebb407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x90ebb404)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4148 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4148 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa0085888)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x18083424)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x18083427)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa008588b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x18083424)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa0085888)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x02
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x4000000b (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x4000000a (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x40000009 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x40000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x4000000b (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x4000000a (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x40000009 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x40000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x472)))
 (let ((?x734 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x737 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x734)))
 (let ((?x740 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x737)))
 (let ((?x397 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (=> $x370 (= ?x397 ?x740)))))))))))
 ))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x276 (_ bv1 32))))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (= $x370 $x294))))))
 ))
 (let (($x161 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x577 (= false false)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x534 (_ bv0 32))))
 (=> $x111 $x577)))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x276 (_ bv0 32))))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x534 (_ bv0 32))))
 (= $x111 $x231))))))
 ))
 (let (($x392 (and $x234 $x161)))
 (let (($x187 (and $x392 $x30)))
 (let (($x744 (and $x187 $x743)))
 (let (($x745 (= $x744 true)))
 (let (($x746 (= $x745 true)))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x338 (bvadd ?x472 input.dst.llvm-%m2)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem ?x338))))
 (let ((?x521 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv2 32))) ?x639))))
 (let ((?x397 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (=> $x370 (= ?x397 ?x521))))))))))
 ))
 (let (($x302 (and $x187 $x169)))
 (let (($x146 (= $x302 true)))
 (let (($x491 (= $x146 true)))
 (let (($x149 (= $x491 true)))
 (let (($x164 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x478 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x632 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x124 (and $x632 $x478)))
 (let (($x364 (and $x124 $x164)))
 (let (($x299 (= $x364 true)))
 (let (($x616 (= $x299 true)))
 (let (($x662 (= $x616 true)))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x100 (bvadd ?x472 input.dst.llvm-%m1)))
 (let ((?x565 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x594 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x565))))
 (let ((?x85 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (=> $x13 (= ?x85 ?x594))))))))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x276 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (= $x13 $x294))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x577 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x5 (_ bv0 32))))
 (=> $x355 $x577)))))
 ))
 (let (($x579 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x276 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x5 (_ bv0 32))))
 (= $x355 $x231))))))
 ))
 (let (($x335 (and $x579 $x121)))
 (let (($x572 (and $x335 $x44)))
 (let (($x452 (and $x572 $x463)))
 (let (($x150 (= $x452 true)))
 (let (($x10 (= $x150 true)))
 (let (($x281 (= $x10 true)))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x100 (bvadd ?x472 input.dst.llvm-%m1)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x100))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv2 32))) ?x56)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv3 32))) ?x257)))
 (let ((?x535 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x50 (_ bv1 32))))
 (=> $x165 (= ?x535 ?x156)))))))))))
 ))
 (let (($x272 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x276 (_ bv1 32))))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x50 (_ bv1 32))))
 (= $x165 $x294))))))
 ))
 (let (($x181 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x577 (= false false)))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x50 (_ bv0 32))))
 (=> $x252 $x577)))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x276 (_ bv0 32))))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x50 (_ bv0 32))))
 (= $x252 $x231))))))
 ))
 (let (($x443 (and $x471 $x181)))
 (let (($x562 (and $x443 $x272)))
 (let (($x481 (and $x562 $x528)))
 (let (($x139 (= $x481 true)))
 (let (($x208 (= $x139 true)))
 (let (($x127 (= $x208 true)))
 (let (($x507 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x100 (bvadd ?x472 input.dst.llvm-%m1)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x100))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv2 32))) ?x56)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv3 32))) ?x257)))
 (let ((?x85 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (=> $x13 (= ?x85 ?x156)))))))))))
 ))
 (let (($x506 (and $x572 $x507)))
 (let (($x9 (= $x506 true)))
 (let (($x533 (= $x9 true)))
 (let (($x532 (= $x533 true)))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x100 (bvadd ?x472 input.dst.llvm-%m1)))
 (let ((?x565 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x594 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x565))))
 (let ((?x535 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x50 (_ bv1 32))))
 (=> $x165 (= ?x535 ?x594))))))))))
 ))
 (let (($x444 (and $x562 $x211)))
 (let (($x575 (= $x444 true)))
 (let (($x25 (= $x575 true)))
 (let (($x249 (= $x25 true)))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x338 (bvadd ?x472 input.dst.llvm-%m2)))
 (let ((?x428 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x338))))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x338 (_ bv2 32))) ?x428)))
 (let ((?x402 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x338 (_ bv3 32))) ?x261)))
 (let ((?x397 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (=> $x370 (= ?x397 ?x402)))))))))))
 ))
 (let (($x381 (and $x187 $x203)))
 (let (($x664 (= $x381 true)))
 (let (($x383 (= $x664 true)))
 (let (($x654 (= $x383 true)))
 (let ((?x485 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x182 (= (_ bv0 32) ?x485)))
 (let ((?x23 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x280 (= (_ bv0 32) ?x23)))
 (let ((?x214 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x214)))
 (let ((?x568 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x568)))
 (let (($x621 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x665 (and $x621 $x20)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x386 $x665)))
 (let (($x354 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x387 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x445 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x238 $x445)))
 (let (($x419 (not $x158)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x382 (and $x279 $x198)))
 (let (($x93 (and (not $x382) $x419)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x496 (and $x180 $x233)))
 (let (($x76 (not $x496)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x143 $x148)))
 (let (($x385 (and (not $x22) $x76)))
 (let (($x201 (and (and (and (and (and (and $x385 $x93) $x387) $x354) $x155) $x188) $x280)))
 (let (($x193 (and $x201 $x182)))
 (let (($x503 (= $x193 true)))
 (let (($x358 (= $x503 true)))
 (let (($x490 (= $x358 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x112)))
 (let (($x585 (= $x202 true)))
 (let (($x500 (= $x585 true)))
 (let (($x567 (and $x500 $x490)))
 (let (($x414 (and $x567 $x654)))
 (let (($x7 (and $x414 $x249)))
 (let (($x598 (and $x7 $x532)))
 (let (($x329 (and $x598 $x127)))
 (let (($x655 (and $x329 $x281)))
 (let (($x631 (and $x655 $x662)))
 (let (($x436 (and $x631 $x149)))
 (let (($x505 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x535 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x85 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (=> $x13 (= ?x85 ?x535)))))))
 ))
 (let (($x607 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x50 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (= $x13 $x165))))))
 ))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x50 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x5 (_ bv0 32))))
 (= $x355 $x252))))))
 ))
 (let (($x6 (and $x265 $x121)))
 (let (($x606 (and $x6 $x607)))
 (let (($x527 (and $x606 $x505)))
 (let (($x564 (and $x527 $x436)))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x397 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (=> $x370 (= ?x397 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x172 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (= $x370 (bvuge ?x172 (_ bv1 32)))))))
 ))
 (let (($x432 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x172 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x534 (_ bv0 32))))
 (= $x111 (= ?x172 (_ bv0 32)))))))
 ))
 (let (($x141 (and $x432 $x161)))
 (let (($x247 (and $x141 $x117)))
 (let (($x486 (and $x247 $x593)))
 (let (($x175 (and $x486 $x564)))
 (let (($x747 (=> $x175 $x746)))
 (not $x747)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x472)))
 (let ((?x734 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x737 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x734)))
 (let ((?x740 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x737)))
 (let ((?x397 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (=> $x370 (= ?x397 ?x740)))))))))))
 ))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x276 (_ bv1 32))))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (= $x370 $x294))))))
 ))
 (let (($x161 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x577 (= false false)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x534 (_ bv0 32))))
 (=> $x111 $x577)))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x276 (_ bv0 32))))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x534 (_ bv0 32))))
 (= $x111 $x231))))))
 ))
 (let (($x392 (and $x234 $x161)))
 (let (($x187 (and $x392 $x30)))
 (let (($x744 (and $x187 $x743)))
 (let (($x745 (= $x744 true)))
 (let (($x746 (= $x745 true)))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x338 (bvadd ?x472 input.dst.llvm-%m2)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem ?x338))))
 (let ((?x521 (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x338 (_ bv2 32))) ?x639))))
 (let ((?x397 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (=> $x370 (= ?x397 ?x521))))))))))
 ))
 (let (($x302 (and $x187 $x169)))
 (let (($x146 (= $x302 true)))
 (let (($x491 (= $x146 true)))
 (let (($x149 (= $x491 true)))
 (let (($x164 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x478 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x632 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x124 (and $x632 $x478)))
 (let (($x364 (and $x124 $x164)))
 (let (($x299 (= $x364 true)))
 (let (($x616 (= $x299 true)))
 (let (($x662 (= $x616 true)))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x100 (bvadd ?x472 input.dst.llvm-%m1)))
 (let ((?x565 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x594 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x565))))
 (let ((?x85 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (=> $x13 (= ?x85 ?x594))))))))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x276 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (= $x13 $x294))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x577 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x5 (_ bv0 32))))
 (=> $x355 $x577)))))
 ))
 (let (($x579 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x276 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x5 (_ bv0 32))))
 (= $x355 $x231))))))
 ))
 (let (($x335 (and $x579 $x121)))
 (let (($x572 (and $x335 $x44)))
 (let (($x452 (and $x572 $x463)))
 (let (($x150 (= $x452 true)))
 (let (($x10 (= $x150 true)))
 (let (($x281 (= $x10 true)))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x100 (bvadd ?x472 input.dst.llvm-%m1)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x100))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv2 32))) ?x56)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv3 32))) ?x257)))
 (let ((?x535 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x50 (_ bv1 32))))
 (=> $x165 (= ?x535 ?x156)))))))))))
 ))
 (let (($x272 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x276 (_ bv1 32))))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x50 (_ bv1 32))))
 (= $x165 $x294))))))
 ))
 (let (($x181 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x577 (= false false)))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x50 (_ bv0 32))))
 (=> $x252 $x577)))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x276 (_ bv0 32))))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x50 (_ bv0 32))))
 (= $x252 $x231))))))
 ))
 (let (($x443 (and $x471 $x181)))
 (let (($x562 (and $x443 $x272)))
 (let (($x481 (and $x562 $x528)))
 (let (($x139 (= $x481 true)))
 (let (($x208 (= $x139 true)))
 (let (($x127 (= $x208 true)))
 (let (($x507 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x100 (bvadd ?x472 input.dst.llvm-%m1)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x100))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv2 32))) ?x56)))
 (let ((?x156 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x100 (_ bv3 32))) ?x257)))
 (let ((?x85 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (=> $x13 (= ?x85 ?x156)))))))))))
 ))
 (let (($x506 (and $x572 $x507)))
 (let (($x9 (= $x506 true)))
 (let (($x533 (= $x9 true)))
 (let (($x532 (= $x533 true)))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x100 (bvadd ?x472 input.dst.llvm-%m1)))
 (let ((?x565 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x594 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x565))))
 (let ((?x535 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x50 (_ bv1 32))))
 (=> $x165 (= ?x535 ?x594))))))))))
 ))
 (let (($x444 (and $x562 $x211)))
 (let (($x575 (= $x444 true)))
 (let (($x25 (= $x575 true)))
 (let (($x249 (= $x25 true)))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x338 (bvadd ?x472 input.dst.llvm-%m2)))
 (let ((?x428 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x338 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x338))))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x338 (_ bv2 32))) ?x428)))
 (let ((?x402 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x338 (_ bv3 32))) ?x261)))
 (let ((?x397 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (=> $x370 (= ?x397 ?x402)))))))))))
 ))
 (let (($x381 (and $x187 $x203)))
 (let (($x664 (= $x381 true)))
 (let (($x383 (= $x664 true)))
 (let (($x654 (= $x383 true)))
 (let ((?x485 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x182 (= (_ bv0 32) ?x485)))
 (let ((?x23 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x280 (= (_ bv0 32) ?x23)))
 (let ((?x214 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x214)))
 (let ((?x568 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x568)))
 (let (($x621 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x665 (and $x621 $x20)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x386 $x665)))
 (let (($x354 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x387 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x445 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x238 $x445)))
 (let (($x419 (not $x158)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x382 (and $x279 $x198)))
 (let (($x93 (and (not $x382) $x419)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x496 (and $x180 $x233)))
 (let (($x76 (not $x496)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x143 $x148)))
 (let (($x385 (and (not $x22) $x76)))
 (let (($x201 (and (and (and (and (and (and $x385 $x93) $x387) $x354) $x155) $x188) $x280)))
 (let (($x193 (and $x201 $x182)))
 (let (($x503 (= $x193 true)))
 (let (($x358 (= $x503 true)))
 (let (($x490 (= $x358 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x112)))
 (let (($x585 (= $x202 true)))
 (let (($x500 (= $x585 true)))
 (let (($x567 (and $x500 $x490)))
 (let (($x414 (and $x567 $x654)))
 (let (($x7 (and $x414 $x249)))
 (let (($x598 (and $x7 $x532)))
 (let (($x329 (and $x598 $x127)))
 (let (($x655 (and $x329 $x281)))
 (let (($x631 (and $x655 $x662)))
 (let (($x436 (and $x631 $x149)))
 (let (($x505 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x535 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x85 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (=> $x13 (= ?x85 ?x535)))))))
 ))
 (let (($x607 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x50 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x5 (_ bv1 32))))
 (= $x13 $x165))))))
 ))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x50 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x5 (_ bv0 32))))
 (= $x355 $x252))))))
 ))
 (let (($x6 (and $x265 $x121)))
 (let (($x606 (and $x6 $x607)))
 (let (($x527 (and $x606 $x505)))
 (let (($x564 (and $x527 $x436)))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x397 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (=> $x370 (= ?x397 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x172 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x534 (_ bv1 32))))
 (= $x370 (bvuge ?x172 (_ bv1 32)))))))
 ))
 (let (($x432 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x172 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x534 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x534 (_ bv0 32))))
 (= $x111 (= ?x172 (_ bv0 32)))))))
 ))
 (let (($x141 (and $x432 $x161)))
 (let (($x247 (and $x141 $x117)))
 (let (($x486 (and $x247 $x593)))
 (let (($x175 (and $x486 $x564)))
 (let (($x747 (=> $x175 $x746)))
 (not $x747)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00082080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00e44024)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x18b04060)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00082080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x18b04063)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00e44027)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x18b04060)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00e44024)
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x10
      #x00))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0000000e)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x996684b4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!43))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfa031258)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x000000cc)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x000000cc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfa03125b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x996684b7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfa031258)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x996684b4)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x08000000 x!0) #x08000000 #x00000065)
              #x00000064)
         #x00000038))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!47 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000038) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!47 (k!46 x!0)))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000038) #x04
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000000
    (ite (= x!0 #x00000038) #x00000000
      (let ((a!1 (concat (k!43 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!44 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!49 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000038) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!49 (k!46 x!0)))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000038) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000000
    (ite (= x!0 #x00000038) #x00000000
      (let ((a!1 (concat (k!44 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!48 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000e) true
      false))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x08000000 x!0) #x08000000 #x00000065)
              #x00000064)
         #x0000000e))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!48 (k!45 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000e) true
    (ite (= x!0 #x08000000) false
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000004
      (let ((a!1 (concat (k!44 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!43 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000004
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x718 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x710 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x323)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x710))))
 (let ((?x725 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv2 32))) ?x715)))
 (let ((?x723 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv3 32))) ?x725)))
 (let ((?x100 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (=> $x383 (= ?x100 ?x723)))))))))))
 ))
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x623 (_ bv1 32))))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (= $x383 $x186))))))
 ))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x363 (= false false)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x101 (_ bv0 32))))
 (=> $x37 $x363)))))
 ))
 (let (($x523 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x623 (_ bv0 32))))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x101 (_ bv0 32))))
 (= $x37 $x340))))))
 ))
 (let (($x194 (and $x523 $x258)))
 (let (($x401 (and $x194 $x464)))
 (let (($x721 (and $x401 $x718)))
 (let (($x724 (= $x721 true)))
 (let (($x727 (= $x724 true)))
 (let (($x16 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x323 input.dst.llvm-%m2)))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x441))))
 (let ((?x93 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (=> $x180 (= ?x93 ?x475))))))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x623 (_ bv1 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (= $x180 $x186))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x363 (= false false)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x606 (_ bv0 32))))
 (=> $x85 $x363)))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x623 (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x606 (_ bv0 32))))
 (= $x85 $x340))))))
 ))
 (let (($x557 (and $x115 $x228)))
 (let (($x232 (and $x557 $x637)))
 (let (($x605 (and $x232 $x16)))
 (let (($x268 (= $x605 true)))
 (let (($x264 (= $x268 true)))
 (let (($x63 (= $x264 true)))
 (let (($x40 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x449 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x189 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x334 (and $x189 $x449)))
 (let (($x587 (and $x334 $x40)))
 (let (($x251 (= $x587 true)))
 (let (($x469 (= $x251 true)))
 (let (($x592 (= $x469 true)))
 (let (($x242 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x659 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem ?x659))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv2 32))) ?x34))))
 (let ((?x100 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (=> $x383 (= ?x100 ?x163))))))))))
 ))
 (let (($x455 (and $x401 $x242)))
 (let (($x236 (= $x455 true)))
 (let (($x406 (= $x236 true)))
 (let (($x167 (= $x406 true)))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x659 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x659))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv2 32))) ?x296)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv3 32))) ?x474)))
 (let ((?x462 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x159 (_ bv1 32))))
 (=> $x664 (= ?x462 ?x130)))))))))))
 ))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x623 (_ bv1 32))))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x159 (_ bv1 32))))
 (= $x664 $x186))))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x363 (= false false)))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x159 (_ bv0 32))))
 (=> $x30 $x363)))))
 ))
 (let (($x597 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x623 (_ bv0 32))))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x159 (_ bv0 32))))
 (= $x30 $x340))))))
 ))
 (let (($x108 (and $x597 $x318)))
 (let (($x403 (and $x108 $x459)))
 (let (($x626 (and $x403 $x433)))
 (let (($x369 (= $x626 true)))
 (let (($x222 (= $x369 true)))
 (let (($x498 (= $x222 true)))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x659 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x659))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv2 32))) ?x296)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv3 32))) ?x474)))
 (let ((?x100 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (=> $x383 (= ?x100 ?x130)))))))))))
 ))
 (let (($x539 (and $x401 $x153)))
 (let (($x316 (= $x539 true)))
 (let (($x570 (= $x316 true)))
 (let (($x468 (= $x570 true)))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x659 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem ?x659))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv2 32))) ?x34))))
 (let ((?x462 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x159 (_ bv1 32))))
 (=> $x664 (= ?x462 ?x163))))))))))
 ))
 (let (($x61 (and $x403 $x514)))
 (let (($x39 (= $x61 true)))
 (let (($x313 (= $x39 true)))
 (let (($x617 (= $x313 true)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x323 input.dst.llvm-%m2)))
 (let ((?x561 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x467 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x561)))
 (let ((?x435 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x467)))
 (let ((?x93 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (=> $x180 (= ?x93 ?x435)))))))))))
 ))
 (let (($x629 (and $x232 $x83)))
 (let (($x221 (= $x629 true)))
 (let (($x26 (= $x221 true)))
 (let (($x375 (= $x26 true)))
 (let ((?x550 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x384 (= (_ bv0 32) ?x550)))
 (let ((?x127 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x329 (= (_ bv0 32) ?x127)))
 (let ((?x139 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x240 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x389 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x240)))
 (let (($x532 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x528 (and $x532 $x389)))
 (let (($x533 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x481 (and $x533 $x528)))
 (let (($x9 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x507 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x601 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x601 $x29)))
 (let (($x257 (not $x56)))
 (let (($x569 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x572 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x553 (and $x572 $x569)))
 (let (($x536 (and (not $x553) $x257)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x579 (and $x7 $x71)))
 (let (($x335 (not $x579)))
 (let (($x575 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x211 $x575)))
 (let (($x44 (and (not $x25) $x335)))
 (let (($x655 (and (and (and (and (and (and $x44 $x536) $x507) $x9) $x481) $x208) $x329)))
 (let (($x225 (and $x655 $x384)))
 (let (($x614 (= $x225 true)))
 (let (($x632 (= $x614 true)))
 (let (($x297 (= $x632 true)))
 (let ((?x241 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x565 (= (_ bv0 2) ?x241)))
 (let (($x583 (= $x565 true)))
 (let (($x594 (= $x583 true)))
 (let (($x478 (and $x594 $x297)))
 (let (($x647 (and $x478 $x375)))
 (let (($x246 (and $x647 $x617)))
 (let (($x450 (and $x246 $x468)))
 (let (($x53 (and $x450 $x498)))
 (let (($x259 (and $x53 $x167)))
 (let (($x328 (and $x259 $x592)))
 (let (($x658 (and $x328 $x63)))
 (let (($x603 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x462 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x100 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (=> $x383 (= ?x100 ?x462)))))))
 ))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x159 (_ bv1 32))))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (= $x383 $x664))))))
 ))
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x159 (_ bv0 32))))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x101 (_ bv0 32))))
 (= $x37 $x30))))))
 ))
 (let (($x559 (and $x338 $x258)))
 (let (($x488 (and $x559 $x414)))
 (let (($x179 (and $x488 $x603)))
 (let (($x128 (and $x179 $x658)))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (=> $x180 (= ?x93 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (= $x180 (bvuge ?x165 (_ bv1 32)))))))
 ))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x606 (_ bv0 32))))
 (= $x85 (= ?x165 (_ bv0 32)))))))
 ))
 (let (($x55 (and $x291 $x228)))
 (let (($x76 (and $x55 $x496)))
 (let (($x81 (and $x76 $x387)))
 (let (($x497 (and $x81 $x128)))
 (let (($x728 (=> $x497 $x727)))
 (not $x728)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x718 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x710 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x323)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x710))))
 (let ((?x725 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv2 32))) ?x715)))
 (let ((?x723 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv3 32))) ?x725)))
 (let ((?x100 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (=> $x383 (= ?x100 ?x723)))))))))))
 ))
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x623 (_ bv1 32))))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (= $x383 $x186))))))
 ))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x363 (= false false)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x101 (_ bv0 32))))
 (=> $x37 $x363)))))
 ))
 (let (($x523 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x623 (_ bv0 32))))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x101 (_ bv0 32))))
 (= $x37 $x340))))))
 ))
 (let (($x194 (and $x523 $x258)))
 (let (($x401 (and $x194 $x464)))
 (let (($x721 (and $x401 $x718)))
 (let (($x724 (= $x721 true)))
 (let (($x727 (= $x724 true)))
 (let (($x16 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x323 input.dst.llvm-%m2)))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x441))))
 (let ((?x93 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (=> $x180 (= ?x93 ?x475))))))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x623 (_ bv1 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (= $x180 $x186))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x363 (= false false)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x606 (_ bv0 32))))
 (=> $x85 $x363)))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x623 (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x606 (_ bv0 32))))
 (= $x85 $x340))))))
 ))
 (let (($x557 (and $x115 $x228)))
 (let (($x232 (and $x557 $x637)))
 (let (($x605 (and $x232 $x16)))
 (let (($x268 (= $x605 true)))
 (let (($x264 (= $x268 true)))
 (let (($x63 (= $x264 true)))
 (let (($x40 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x449 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x189 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x334 (and $x189 $x449)))
 (let (($x587 (and $x334 $x40)))
 (let (($x251 (= $x587 true)))
 (let (($x469 (= $x251 true)))
 (let (($x592 (= $x469 true)))
 (let (($x242 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x659 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem ?x659))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv2 32))) ?x34))))
 (let ((?x100 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (=> $x383 (= ?x100 ?x163))))))))))
 ))
 (let (($x455 (and $x401 $x242)))
 (let (($x236 (= $x455 true)))
 (let (($x406 (= $x236 true)))
 (let (($x167 (= $x406 true)))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x659 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x659))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv2 32))) ?x296)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv3 32))) ?x474)))
 (let ((?x462 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x159 (_ bv1 32))))
 (=> $x664 (= ?x462 ?x130)))))))))))
 ))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x623 (_ bv1 32))))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x159 (_ bv1 32))))
 (= $x664 $x186))))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x363 (= false false)))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x159 (_ bv0 32))))
 (=> $x30 $x363)))))
 ))
 (let (($x597 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x623 (_ bv0 32))))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x159 (_ bv0 32))))
 (= $x30 $x340))))))
 ))
 (let (($x108 (and $x597 $x318)))
 (let (($x403 (and $x108 $x459)))
 (let (($x626 (and $x403 $x433)))
 (let (($x369 (= $x626 true)))
 (let (($x222 (= $x369 true)))
 (let (($x498 (= $x222 true)))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x659 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x659))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv2 32))) ?x296)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x659 (_ bv3 32))) ?x474)))
 (let ((?x100 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (=> $x383 (= ?x100 ?x130)))))))))))
 ))
 (let (($x539 (and $x401 $x153)))
 (let (($x316 (= $x539 true)))
 (let (($x570 (= $x316 true)))
 (let (($x468 (= $x570 true)))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x659 (bvadd ?x323 input.dst.llvm-%m1)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem ?x659))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv2 32))) ?x34))))
 (let ((?x462 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x159 (_ bv1 32))))
 (=> $x664 (= ?x462 ?x163))))))))))
 ))
 (let (($x61 (and $x403 $x514)))
 (let (($x39 (= $x61 true)))
 (let (($x313 (= $x39 true)))
 (let (($x617 (= $x313 true)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x323 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x119 (bvadd ?x323 input.dst.llvm-%m2)))
 (let ((?x561 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x467 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x561)))
 (let ((?x435 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x467)))
 (let ((?x93 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (=> $x180 (= ?x93 ?x435)))))))))))
 ))
 (let (($x629 (and $x232 $x83)))
 (let (($x221 (= $x629 true)))
 (let (($x26 (= $x221 true)))
 (let (($x375 (= $x26 true)))
 (let ((?x550 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x384 (= (_ bv0 32) ?x550)))
 (let ((?x127 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x329 (= (_ bv0 32) ?x127)))
 (let ((?x139 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x139)))
 (let ((?x240 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x389 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x240)))
 (let (($x532 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x528 (and $x532 $x389)))
 (let (($x533 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x481 (and $x533 $x528)))
 (let (($x9 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x507 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x601 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x601 $x29)))
 (let (($x257 (not $x56)))
 (let (($x569 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x572 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x553 (and $x572 $x569)))
 (let (($x536 (and (not $x553) $x257)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x579 (and $x7 $x71)))
 (let (($x335 (not $x579)))
 (let (($x575 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x211 $x575)))
 (let (($x44 (and (not $x25) $x335)))
 (let (($x655 (and (and (and (and (and (and $x44 $x536) $x507) $x9) $x481) $x208) $x329)))
 (let (($x225 (and $x655 $x384)))
 (let (($x614 (= $x225 true)))
 (let (($x632 (= $x614 true)))
 (let (($x297 (= $x632 true)))
 (let ((?x241 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x565 (= (_ bv0 2) ?x241)))
 (let (($x583 (= $x565 true)))
 (let (($x594 (= $x583 true)))
 (let (($x478 (and $x594 $x297)))
 (let (($x647 (and $x478 $x375)))
 (let (($x246 (and $x647 $x617)))
 (let (($x450 (and $x246 $x468)))
 (let (($x53 (and $x450 $x498)))
 (let (($x259 (and $x53 $x167)))
 (let (($x328 (and $x259 $x592)))
 (let (($x658 (and $x328 $x63)))
 (let (($x603 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x462 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x100 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (=> $x383 (= ?x100 ?x462)))))))
 ))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x159 (_ bv1 32))))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (bvuge ?x101 (_ bv1 32))))
 (= $x383 $x664))))))
 ))
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x159 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x159 (_ bv0 32))))
 (let ((?x101 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (= ?x101 (_ bv0 32))))
 (= $x37 $x30))))))
 ))
 (let (($x559 (and $x338 $x258)))
 (let (($x488 (and $x559 $x414)))
 (let (($x179 (and $x488 $x603)))
 (let (($x128 (and $x179 $x658)))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (=> $x180 (= ?x93 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x606 (_ bv1 32))))
 (= $x180 (bvuge ?x165 (_ bv1 32)))))))
 ))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x606 (_ bv0 32))))
 (= $x85 (= ?x165 (_ bv0 32)))))))
 ))
 (let (($x55 (and $x291 $x228)))
 (let (($x76 (and $x55 $x496)))
 (let (($x81 (and $x76 $x387)))
 (let (($x497 (and $x81 $x128)))
 (let (($x728 (=> $x497 $x727)))
 (not $x728)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0000002c)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbfee0080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7fbb0004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xafffff84)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xafffff84)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fbb0007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbfee0083)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7fbb0004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbfee0080)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000002c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002c) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000b0) #x04
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002c) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000b0) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x08010000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x15800620)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x959fa254)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x08010000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x959fa257)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x15800623)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x959fa254)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x15800620)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x278)))
 (let ((?x698 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x705 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x698))))
 (let ((?x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (=> $x221 (= ?x78 ?x705))))))))))
 ))
 (let (($x622 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x400 (_ bv1 32))))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (= $x221 $x24))))))
 ))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x274 (= false false)))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x270 (_ bv0 32))))
 (=> $x637 $x274)))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x400 (_ bv0 32))))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x270 (_ bv0 32))))
 (= $x637 $x407))))))
 ))
 (let (($x421 (and $x170 $x18)))
 (let (($x133 (and $x421 $x622)))
 (let (($x702 (and $x133 $x693)))
 (let (($x704 (= $x702 true)))
 (let (($x708 (= $x704 true)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x278 input.dst.llvm-%m2)))
 (let ((?x466 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x466))))
 (let ((?x536 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (=> $x7 (= ?x536 ?x332))))))))))
 ))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x400 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (= $x7 $x24))))))
 ))
 (let (($x17 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x274 (= false false)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x488 (_ bv0 32))))
 (=> $x100 $x274)))))
 ))
 (let (($x589 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x400 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x488 (_ bv0 32))))
 (= $x100 $x407))))))
 ))
 (let (($x260 (and $x589 $x17)))
 (let (($x333 (and $x260 $x74)))
 (let (($x378 (and $x333 $x418)))
 (let (($x347 (= $x378 true)))
 (let (($x312 (= $x347 true)))
 (let (($x28 (= $x312 true)))
 (let (($x349 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x666 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x584 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x451 (and $x584 $x666)))
 (let (($x131 (and $x451 $x349)))
 (let (($x19 (= $x131 true)))
 (let (($x479 (= $x19 true)))
 (let (($x12 (= $x479 true)))
 (let (($x735 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x57 (bvadd ?x278 input.dst.llvm-%m1)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x634 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x410))))
 (let ((?x659 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (=> $x26 (= ?x659 ?x634))))))))))
 ))
 (let (($x562 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x400 (_ bv1 32))))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (= $x26 $x24))))))
 ))
 (let (($x521 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x274 (= false false)))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (= ?x299 (_ bv0 32))))
 (=> $x631 $x274)))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x400 (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (= ?x299 (_ bv0 32))))
 (= $x631 $x407))))))
 ))
 (let (($x428 (and $x392 $x521)))
 (let (($x552 (and $x428 $x562)))
 (let (($x733 (and $x552 $x735)))
 (let (($x737 (= $x733 true)))
 (let (($x742 (= $x737 true)))
 (let (($x610 (= $x742 true)))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x57 (bvadd ?x278 input.dst.llvm-%m1)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x57))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv2 32))) ?x22)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv3 32))) ?x198)))
 (let ((?x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (=> $x221 (= ?x78 ?x238)))))))))))
 ))
 (let (($x730 (and $x133 $x175)))
 (let (($x738 (= $x730 true)))
 (let (($x739 (= $x738 true)))
 (let (($x740 (= $x739 true)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x57 (bvadd ?x278 input.dst.llvm-%m1)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x57))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv2 32))) ?x22)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv3 32))) ?x198)))
 (let ((?x659 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (=> $x26 (= ?x659 ?x238)))))))))))
 ))
 (let (($x136 (and $x552 $x146)))
 (let (($x639 (= $x136 true)))
 (let (($x600 (= $x639 true)))
 (let (($x645 (= $x600 true)))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x57 (bvadd ?x278 input.dst.llvm-%m1)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x634 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x410))))
 (let ((?x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (=> $x221 (= ?x78 ?x634))))))))))
 ))
 (let (($x547 (and $x133 $x120)))
 (let (($x430 (= $x547 true)))
 (let (($x282 (= $x430 true)))
 (let (($x522 (= $x282 true)))
 (let (($x555 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x278 input.dst.llvm-%m2)))
 (let ((?x476 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x309))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv2 32))) ?x476)))
 (let ((?x477 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv3 32))) ?x245)))
 (let ((?x536 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (=> $x7 (= ?x536 ?x477)))))))))))
 ))
 (let (($x343 (and $x333 $x555)))
 (let (($x160 (= $x343 true)))
 (let (($x484 (= $x160 true)))
 (let (($x209 (= $x484 true)))
 (let ((?x520 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x346 (= (_ bv0 32) ?x520)))
 (let ((?x498 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x53 (= (_ bv0 32) ?x498)))
 (let ((?x369 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x369)))
 (let ((?x613 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x613)))
 (let (($x468 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x433 (and $x468 $x306)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x626 (and $x570 $x433)))
 (let (($x316 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x447 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x296 (and $x447 $x147)))
 (let (($x474 (not $x296)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x401 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x648 (and $x401 $x365)))
 (let (($x482 (and (not $x648) $x474)))
 (let (($x429 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x523 (and $x246 $x429)))
 (let (($x194 (not $x523)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x514 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x313 (and $x514 $x39)))
 (let (($x464 (and (not $x313) $x194)))
 (let (($x259 (and (and (and (and (and (and $x464 $x482) $x153) $x316) $x626) $x222) $x53)))
 (let (($x114 (and $x259 $x346)))
 (let (($x243 (= $x114 true)))
 (let (($x189 (= $x243 true)))
 (let (($x630 (= $x189 true)))
 (let ((?x310 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x34 (= (_ bv0 2) ?x310)))
 (let (($x420 (= $x34 true)))
 (let (($x163 (= $x420 true)))
 (let (($x449 (and $x163 $x630)))
 (let (($x152 (and $x449 $x209)))
 (let (($x103 (and $x152 $x522)))
 (let (($x169 (and $x103 $x645)))
 (let (($x741 (and $x169 $x740)))
 (let (($x88 (and $x741 $x610)))
 (let (($x84 (and $x88 $x12)))
 (let (($x45 (and $x84 $x28)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x659 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (=> $x26 (= ?x659 ?x78)))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (= $x26 $x221))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x270 (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (= ?x299 (_ bv0 32))))
 (= $x631 $x637))))))
 ))
 (let (($x661 (and $x119 $x521)))
 (let (($x399 (and $x661 $x647)))
 (let (($x327 (and $x399 $x319)))
 (let (($x286 (and $x327 $x45)))
 (let (($x507 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x536 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (=> $x7 (= ?x536 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x579 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (= $x7 (bvuge ?x664 (_ bv1 32)))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x488 (_ bv0 32))))
 (= $x100 (= ?x664 (_ bv0 32)))))))
 ))
 (let (($x362 (and $x638 $x17)))
 (let (($x335 (and $x362 $x579)))
 (let (($x452 (and $x335 $x507)))
 (let (($x184 (and $x452 $x286)))
 (let (($x709 (=> $x184 $x708)))
 (not $x709)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x278)))
 (let ((?x698 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x705 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x698))))
 (let ((?x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (=> $x221 (= ?x78 ?x705))))))))))
 ))
 (let (($x622 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x400 (_ bv1 32))))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (= $x221 $x24))))))
 ))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x274 (= false false)))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x270 (_ bv0 32))))
 (=> $x637 $x274)))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x400 (_ bv0 32))))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x270 (_ bv0 32))))
 (= $x637 $x407))))))
 ))
 (let (($x421 (and $x170 $x18)))
 (let (($x133 (and $x421 $x622)))
 (let (($x702 (and $x133 $x693)))
 (let (($x704 (= $x702 true)))
 (let (($x708 (= $x704 true)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x278 input.dst.llvm-%m2)))
 (let ((?x466 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x466))))
 (let ((?x536 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (=> $x7 (= ?x536 ?x332))))))))))
 ))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x400 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (= $x7 $x24))))))
 ))
 (let (($x17 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x274 (= false false)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x488 (_ bv0 32))))
 (=> $x100 $x274)))))
 ))
 (let (($x589 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x400 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x488 (_ bv0 32))))
 (= $x100 $x407))))))
 ))
 (let (($x260 (and $x589 $x17)))
 (let (($x333 (and $x260 $x74)))
 (let (($x378 (and $x333 $x418)))
 (let (($x347 (= $x378 true)))
 (let (($x312 (= $x347 true)))
 (let (($x28 (= $x312 true)))
 (let (($x349 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x666 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x584 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x451 (and $x584 $x666)))
 (let (($x131 (and $x451 $x349)))
 (let (($x19 (= $x131 true)))
 (let (($x479 (= $x19 true)))
 (let (($x12 (= $x479 true)))
 (let (($x735 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x57 (bvadd ?x278 input.dst.llvm-%m1)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x634 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x410))))
 (let ((?x659 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (=> $x26 (= ?x659 ?x634))))))))))
 ))
 (let (($x562 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x400 (_ bv1 32))))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (= $x26 $x24))))))
 ))
 (let (($x521 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x274 (= false false)))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (= ?x299 (_ bv0 32))))
 (=> $x631 $x274)))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x400 (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (= ?x299 (_ bv0 32))))
 (= $x631 $x407))))))
 ))
 (let (($x428 (and $x392 $x521)))
 (let (($x552 (and $x428 $x562)))
 (let (($x733 (and $x552 $x735)))
 (let (($x737 (= $x733 true)))
 (let (($x742 (= $x737 true)))
 (let (($x610 (= $x742 true)))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x57 (bvadd ?x278 input.dst.llvm-%m1)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x57))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv2 32))) ?x22)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv3 32))) ?x198)))
 (let ((?x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (=> $x221 (= ?x78 ?x238)))))))))))
 ))
 (let (($x730 (and $x133 $x175)))
 (let (($x738 (= $x730 true)))
 (let (($x739 (= $x738 true)))
 (let (($x740 (= $x739 true)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x57 (bvadd ?x278 input.dst.llvm-%m1)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x57))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv2 32))) ?x22)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv3 32))) ?x198)))
 (let ((?x659 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (=> $x26 (= ?x659 ?x238)))))))))))
 ))
 (let (($x136 (and $x552 $x146)))
 (let (($x639 (= $x136 true)))
 (let (($x600 (= $x639 true)))
 (let (($x645 (= $x600 true)))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x57 (bvadd ?x278 input.dst.llvm-%m1)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem ?x57))))
 (let ((?x634 (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x57 (_ bv2 32))) ?x410))))
 (let ((?x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (=> $x221 (= ?x78 ?x634))))))))))
 ))
 (let (($x547 (and $x133 $x120)))
 (let (($x430 (= $x547 true)))
 (let (($x282 (= $x430 true)))
 (let (($x522 (= $x282 true)))
 (let (($x555 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x278 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x309 (bvadd ?x278 input.dst.llvm-%m2)))
 (let ((?x476 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x309))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv2 32))) ?x476)))
 (let ((?x477 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x309 (_ bv3 32))) ?x245)))
 (let ((?x536 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (=> $x7 (= ?x536 ?x477)))))))))))
 ))
 (let (($x343 (and $x333 $x555)))
 (let (($x160 (= $x343 true)))
 (let (($x484 (= $x160 true)))
 (let (($x209 (= $x484 true)))
 (let ((?x520 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x346 (= (_ bv0 32) ?x520)))
 (let ((?x498 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x53 (= (_ bv0 32) ?x498)))
 (let ((?x369 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x369)))
 (let ((?x613 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x613)))
 (let (($x468 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x433 (and $x468 $x306)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x626 (and $x570 $x433)))
 (let (($x316 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x447 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x296 (and $x447 $x147)))
 (let (($x474 (not $x296)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x401 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x648 (and $x401 $x365)))
 (let (($x482 (and (not $x648) $x474)))
 (let (($x429 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x523 (and $x246 $x429)))
 (let (($x194 (not $x523)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x514 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x313 (and $x514 $x39)))
 (let (($x464 (and (not $x313) $x194)))
 (let (($x259 (and (and (and (and (and (and $x464 $x482) $x153) $x316) $x626) $x222) $x53)))
 (let (($x114 (and $x259 $x346)))
 (let (($x243 (= $x114 true)))
 (let (($x189 (= $x243 true)))
 (let (($x630 (= $x189 true)))
 (let ((?x310 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x34 (= (_ bv0 2) ?x310)))
 (let (($x420 (= $x34 true)))
 (let (($x163 (= $x420 true)))
 (let (($x449 (and $x163 $x630)))
 (let (($x152 (and $x449 $x209)))
 (let (($x103 (and $x152 $x522)))
 (let (($x169 (and $x103 $x645)))
 (let (($x741 (and $x169 $x740)))
 (let (($x88 (and $x741 $x610)))
 (let (($x84 (and $x88 $x12)))
 (let (($x45 (and $x84 $x28)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x659 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (=> $x26 (= ?x659 ?x78)))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x270 (_ bv1 32))))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x299 (_ bv1 32))))
 (= $x26 $x221))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x270 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x270 (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (= ?x299 (_ bv0 32))))
 (= $x631 $x637))))))
 ))
 (let (($x661 (and $x119 $x521)))
 (let (($x399 (and $x661 $x647)))
 (let (($x327 (and $x399 $x319)))
 (let (($x286 (and $x327 $x45)))
 (let (($x507 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x536 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (=> $x7 (= ?x536 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x579 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x488 (_ bv1 32))))
 (= $x7 (bvuge ?x664 (_ bv1 32)))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x488 (_ bv0 32))))
 (= $x100 (= ?x664 (_ bv0 32)))))))
 ))
 (let (($x362 (and $x638 $x17)))
 (let (($x335 (and $x362 $x579)))
 (let (($x452 (and $x335 $x507)))
 (let (($x184 (and $x452 $x286)))
 (let (($x709 (=> $x184 $x708)))
 (not $x709)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ff73597)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf6fa4b73)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7c400005) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc55086d4)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x24500373)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc55086d7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc55086d4)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x672 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let ((?x676 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x672 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x672))))
 (let ((?x687 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x672 (_ bv2 32))) ?x676)))
 (let ((?x685 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x672 (_ bv3 32))) ?x687)))
 (let ((?x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (=> $x160 (= ?x20 ?x685)))))))))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (bvuge ?x99 (_ bv1 32))))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (= $x160 $x746))))))
 ))
 (let (($x595 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x68 (= false false)))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x405 (_ bv0 32))))
 (=> $x74 $x68)))))
 ))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (= ?x99 (_ bv0 32))))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x405 (_ bv0 32))))
 (= $x74 $x560))))))
 ))
 (let (($x537 (and $x443 $x595)))
 (let (($x200 (and $x537 $x483)))
 (let (($x681 (and $x200 $x674)))
 (let (($x690 (= $x681 true)))
 (let (($x688 (= $x690 true)))
 (let (($x490 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x155 (bvadd ?x52 input.dst.llvm-%m2)))
 (let ((?x657 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x657))))
 (let ((?x482 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (=> $x246 (= ?x482 ?x193))))))))))
 ))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (bvuge ?x99 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (= $x246 $x746))))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x68 (= false false)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x399 (_ bv0 32))))
 (=> $x659 $x68)))))
 ))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (= ?x99 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x399 (_ bv0 32))))
 (= $x659 $x560))))))
 ))
 (let (($x427 (and $x289 $x633)))
 (let (($x129 (and $x427 $x287)))
 (let (($x95 (and $x129 $x490)))
 (let (($x171 (= $x95 true)))
 (let (($x231 (= $x171 true)))
 (let (($x261 (= $x231 true)))
 (let (($x585 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x515 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x505 (and $x515 $x266)))
 (let (($x500 (and $x505 $x585)))
 (let (($x543 (= $x500 true)))
 (let (($x96 (= $x543 true)))
 (let (($x279 (= $x96 true)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x70 (bvadd ?x52 input.dst.llvm-%m1)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x197))))
 (let ((?x57 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (=> $x484 (= ?x57 ?x215))))))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (bvuge ?x99 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (= $x484 $x746))))))
 ))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x68 (= false false)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x251 (_ bv0 32))))
 (=> $x328 $x68)))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (= ?x99 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x251 (_ bv0 32))))
 (= $x328 $x560))))))
 ))
 (let (($x561 (and $x557 $x475)))
 (let (($x38 (and $x561 $x403)))
 (let (($x714 (and $x38 $x716)))
 (let (($x725 (= $x714 true)))
 (let (($x720 (= $x725 true)))
 (let (($x252 (= $x720 true)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x70 (bvadd ?x52 input.dst.llvm-%m1)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x70))))
 (let ((?x569 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv2 32))) ?x25)))
 (let ((?x601 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv3 32))) ?x569)))
 (let ((?x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (=> $x160 (= ?x20 ?x601)))))))))))
 ))
 (let (($x710 (and $x200 $x497)))
 (let (($x726 (= $x710 true)))
 (let (($x722 (= $x726 true)))
 (let (($x723 (= $x722 true)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x70 (bvadd ?x52 input.dst.llvm-%m1)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x70))))
 (let ((?x569 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv2 32))) ?x25)))
 (let ((?x601 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv3 32))) ?x569)))
 (let ((?x57 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (=> $x484 (= ?x57 ?x601)))))))))))
 ))
 (let (($x314 (and $x38 $x268)))
 (let (($x441 (= $x314 true)))
 (let (($x530 (= $x441 true)))
 (let (($x473 (= $x530 true)))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x70 (bvadd ?x52 input.dst.llvm-%m1)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x197))))
 (let ((?x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (=> $x160 (= ?x20 ?x215))))))))))
 ))
 (let (($x166 (and $x200 $x122)))
 (let (($x137 (= $x166 true)))
 (let (($x116 (= $x137 true)))
 (let (($x206 (= $x116 true)))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x155 (bvadd ?x52 input.dst.llvm-%m2)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x155))))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x155 (_ bv2 32))) ?x308)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x155 (_ bv3 32))) ?x339)))
 (let ((?x482 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (=> $x246 (= ?x482 ?x317)))))))))))
 ))
 (let (($x126 (and $x129 $x253)))
 (let (($x580 (= $x126 true)))
 (let (($x269 (= $x580 true)))
 (let (($x502 (= $x269 true)))
 (let ((?x736 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x732 (= (_ bv0 32) ?x736)))
 (let ((?x740 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x741 (= (_ bv0 32) ?x740)))
 (let ((?x738 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x739 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x738)))
 (let ((?x564 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x436 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x564)))
 (let (($x645 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x645 $x436)))
 (let (($x600 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x730 (and $x600 $x175)))
 (let (($x639 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x411 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x411 $x143)))
 (let (($x198 (not $x22)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x552 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x556 (and $x552 $x382)))
 (let (($x445 (and (not $x556) $x198)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x392 (and $x103 $x234)))
 (let (($x428 (not $x392)))
 (let (($x430 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x120 $x430)))
 (let (($x562 (and (not $x282) $x428)))
 (let (($x88 (and (and (and (and (and (and $x562 $x445) $x146) $x639) $x730) $x739) $x741)))
 (let (($x398 (and $x88 $x732)))
 (let (($x541 (= $x398 true)))
 (let (($x584 (= $x541 true)))
 (let (($x573 (= $x584 true)))
 (let ((?x320 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x410 (= (_ bv0 2) ?x320)))
 (let (($x380 (= $x410 true)))
 (let (($x634 (= $x380 true)))
 (let (($x666 (and $x634 $x573)))
 (let (($x545 (and $x666 $x502)))
 (let (($x255 (and $x545 $x206)))
 (let (($x16 (and $x255 $x473)))
 (let (($x719 (and $x16 $x723)))
 (let (($x303 (and $x719 $x252)))
 (let (($x656 (and $x303 $x279)))
 (let (($x416 (and $x656 $x261)))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x57 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (=> $x484 (= ?x57 ?x20)))))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (= $x484 $x160))))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x405 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x251 (_ bv0 32))))
 (= $x328 $x74))))))
 ))
 (let (($x199 (and $x309 $x475)))
 (let (($x628 (and $x199 $x152)))
 (let (($x162 (and $x628 $x558)))
 (let (($x402 (and $x162 $x416)))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (=> $x246 (= ?x482 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x523 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x221 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (= $x246 (bvuge ?x221 (_ bv1 32)))))))
 ))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x221 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x399 (_ bv0 32))))
 (= $x659 (= ?x221 (_ bv0 32)))))))
 ))
 (let (($x396 (and $x295 $x633)))
 (let (($x194 (and $x396 $x523)))
 (let (($x455 (and $x194 $x153)))
 (let (($x203 (and $x455 $x402)))
 (let (($x689 (=> $x203 $x688)))
 (not $x689)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x672 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x52)))
 (let ((?x676 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x672 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x672))))
 (let ((?x687 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x672 (_ bv2 32))) ?x676)))
 (let ((?x685 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x672 (_ bv3 32))) ?x687)))
 (let ((?x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (=> $x160 (= ?x20 ?x685)))))))))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (bvuge ?x99 (_ bv1 32))))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (= $x160 $x746))))))
 ))
 (let (($x595 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x68 (= false false)))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x405 (_ bv0 32))))
 (=> $x74 $x68)))))
 ))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (= ?x99 (_ bv0 32))))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x405 (_ bv0 32))))
 (= $x74 $x560))))))
 ))
 (let (($x537 (and $x443 $x595)))
 (let (($x200 (and $x537 $x483)))
 (let (($x681 (and $x200 $x674)))
 (let (($x690 (= $x681 true)))
 (let (($x688 (= $x690 true)))
 (let (($x490 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x155 (bvadd ?x52 input.dst.llvm-%m2)))
 (let ((?x657 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x657))))
 (let ((?x482 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (=> $x246 (= ?x482 ?x193))))))))))
 ))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (bvuge ?x99 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (= $x246 $x746))))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x68 (= false false)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x399 (_ bv0 32))))
 (=> $x659 $x68)))))
 ))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (= ?x99 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x399 (_ bv0 32))))
 (= $x659 $x560))))))
 ))
 (let (($x427 (and $x289 $x633)))
 (let (($x129 (and $x427 $x287)))
 (let (($x95 (and $x129 $x490)))
 (let (($x171 (= $x95 true)))
 (let (($x231 (= $x171 true)))
 (let (($x261 (= $x231 true)))
 (let (($x585 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x515 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x505 (and $x515 $x266)))
 (let (($x500 (and $x505 $x585)))
 (let (($x543 (= $x500 true)))
 (let (($x96 (= $x543 true)))
 (let (($x279 (= $x96 true)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x70 (bvadd ?x52 input.dst.llvm-%m1)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x197))))
 (let ((?x57 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (=> $x484 (= ?x57 ?x215))))))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (bvuge ?x99 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (= $x484 $x746))))))
 ))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x68 (= false false)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x251 (_ bv0 32))))
 (=> $x328 $x68)))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (= ?x99 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x251 (_ bv0 32))))
 (= $x328 $x560))))))
 ))
 (let (($x561 (and $x557 $x475)))
 (let (($x38 (and $x561 $x403)))
 (let (($x714 (and $x38 $x716)))
 (let (($x725 (= $x714 true)))
 (let (($x720 (= $x725 true)))
 (let (($x252 (= $x720 true)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x70 (bvadd ?x52 input.dst.llvm-%m1)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x70))))
 (let ((?x569 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv2 32))) ?x25)))
 (let ((?x601 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv3 32))) ?x569)))
 (let ((?x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (=> $x160 (= ?x20 ?x601)))))))))))
 ))
 (let (($x710 (and $x200 $x497)))
 (let (($x726 (= $x710 true)))
 (let (($x722 (= $x726 true)))
 (let (($x723 (= $x722 true)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x70 (bvadd ?x52 input.dst.llvm-%m1)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x70))))
 (let ((?x569 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv2 32))) ?x25)))
 (let ((?x601 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x70 (_ bv3 32))) ?x569)))
 (let ((?x57 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (=> $x484 (= ?x57 ?x601)))))))))))
 ))
 (let (($x314 (and $x38 $x268)))
 (let (($x441 (= $x314 true)))
 (let (($x530 (= $x441 true)))
 (let (($x473 (= $x530 true)))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x70 (bvadd ?x52 input.dst.llvm-%m1)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x197))))
 (let ((?x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (=> $x160 (= ?x20 ?x215))))))))))
 ))
 (let (($x166 (and $x200 $x122)))
 (let (($x137 (= $x166 true)))
 (let (($x116 (= $x137 true)))
 (let (($x206 (= $x116 true)))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x155 (bvadd ?x52 input.dst.llvm-%m2)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x155))))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x155 (_ bv2 32))) ?x308)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x155 (_ bv3 32))) ?x339)))
 (let ((?x482 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (=> $x246 (= ?x482 ?x317)))))))))))
 ))
 (let (($x126 (and $x129 $x253)))
 (let (($x580 (= $x126 true)))
 (let (($x269 (= $x580 true)))
 (let (($x502 (= $x269 true)))
 (let ((?x736 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x732 (= (_ bv0 32) ?x736)))
 (let ((?x740 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x741 (= (_ bv0 32) ?x740)))
 (let ((?x738 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x739 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x738)))
 (let ((?x564 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x436 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x564)))
 (let (($x645 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x645 $x436)))
 (let (($x600 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x730 (and $x600 $x175)))
 (let (($x639 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x411 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x411 $x143)))
 (let (($x198 (not $x22)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x552 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x556 (and $x552 $x382)))
 (let (($x445 (and (not $x556) $x198)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x392 (and $x103 $x234)))
 (let (($x428 (not $x392)))
 (let (($x430 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x120 $x430)))
 (let (($x562 (and (not $x282) $x428)))
 (let (($x88 (and (and (and (and (and (and $x562 $x445) $x146) $x639) $x730) $x739) $x741)))
 (let (($x398 (and $x88 $x732)))
 (let (($x541 (= $x398 true)))
 (let (($x584 (= $x541 true)))
 (let (($x573 (= $x584 true)))
 (let ((?x320 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x410 (= (_ bv0 2) ?x320)))
 (let (($x380 (= $x410 true)))
 (let (($x634 (= $x380 true)))
 (let (($x666 (and $x634 $x573)))
 (let (($x545 (and $x666 $x502)))
 (let (($x255 (and $x545 $x206)))
 (let (($x16 (and $x255 $x473)))
 (let (($x719 (and $x16 $x723)))
 (let (($x303 (and $x719 $x252)))
 (let (($x656 (and $x303 $x279)))
 (let (($x416 (and $x656 $x261)))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x20 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x57 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (=> $x484 (= ?x57 ?x20)))))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x405 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x484 (bvuge ?x251 (_ bv1 32))))
 (= $x484 $x160))))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x405 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x405 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x251 (_ bv0 32))))
 (= $x328 $x74))))))
 ))
 (let (($x199 (and $x309 $x475)))
 (let (($x628 (and $x199 $x152)))
 (let (($x162 (and $x628 $x558)))
 (let (($x402 (and $x162 $x416)))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (=> $x246 (= ?x482 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x523 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x221 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x399 (_ bv1 32))))
 (= $x246 (bvuge ?x221 (_ bv1 32)))))))
 ))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x221 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (= ?x399 (_ bv0 32))))
 (= $x659 (= ?x221 (_ bv0 32)))))))
 ))
 (let (($x396 (and $x295 $x633)))
 (let (($x194 (and $x396 $x523)))
 (let (($x455 (and $x194 $x153)))
 (let (($x203 (and $x455 $x402)))
 (let (($x689 (=> $x203 $x688)))
 (not $x689)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ff73597)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf6fa4b73)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7c400005) #x04
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc55086d4)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x24500373)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc55086d7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc55086d4)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x526 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x598)))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x526 (_ bv1 32))) (select input.dst.llvm-mem ?x526))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x526 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x526 (_ bv2 32))) ?x494))))
 (let ((?x445 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (=> $x103 (= ?x445 ?x377))))))))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x330 (_ bv1 32))))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (= $x103 $x727))))))
 ))
 (let (($x14 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x230 (= false false)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x628 (_ bv0 32))))
 (=> $x57 $x230)))))
 ))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x330 (_ bv0 32))))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x628 (_ bv0 32))))
 (= $x57 $x94))))))
 ))
 (let (($x148 (and $x43 $x14)))
 (let (($x354 (and $x148 $x386)))
 (let (($x608 (and $x354 $x650)))
 (let (($x671 (= $x608 true)))
 (let (($x670 (= $x671 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x481 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd ?x481 (_ bv1 32))) (select input.dst.llvm-mem ?x481))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x481 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x481 (_ bv2 32))) ?x495))))
 (let ((?x445 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (=> $x103 (= ?x445 ?x225))))))))))
 ))
 (let (($x229 (and $x354 $x297)))
 (let (($x618 (= $x229 true)))
 (let (($x340 (= $x618 true)))
 (let (($x467 (= $x340 true)))
 (let (($x583 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x662 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x457 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x603 (and $x457 $x662)))
 (let (($x594 (and $x603 $x583)))
 (let (($x582 (= $x594 true)))
 (let (($x190 (= $x582 true)))
 (let (($x572 (= $x190 true)))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x201 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x247))))
 (let ((?x70 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (=> $x269 (= ?x70 ?x504))))))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x330 (_ bv1 32))))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (= $x269 $x727))))))
 ))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x230 (= false false)))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x19 (_ bv0 32))))
 (=> $x84 $x230)))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x330 (_ bv0 32))))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x19 (_ bv0 32))))
 (= $x84 $x94))))))
 ))
 (let (($x476 (and $x260 $x332)))
 (let (($x344 (and $x476 $x133)))
 (let (($x697 (and $x344 $x694)))
 (let (($x706 (= $x697 true)))
 (let (($x699 (= $x706 true)))
 (let (($x30 (= $x699 true)))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x201 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x201))))
 (let ((?x365 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv2 32))) ?x313)))
 (let ((?x447 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv3 32))) ?x365)))
 (let ((?x389 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (bvuge ?x747 (_ bv1 32))))
 (=> $x580 (= ?x389 ?x447)))))))))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x330 (_ bv1 32))))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (bvuge ?x747 (_ bv1 32))))
 (= $x580 $x727))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x230 (= false false)))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x747 (_ bv0 32))))
 (=> $x287 $x230)))))
 ))
 (let (($x108 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x330 (_ bv0 32))))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x747 (_ bv0 32))))
 (= $x287 $x94))))))
 ))
 (let (($x576 (and $x108 $x370)))
 (let (($x527 (and $x576 $x13)))
 (let (($x691 (and $x527 $x184)))
 (let (($x707 (= $x691 true)))
 (let (($x703 (= $x707 true)))
 (let (($x705 (= $x703 true)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x201 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x201))))
 (let ((?x365 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv2 32))) ?x313)))
 (let ((?x447 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv3 32))) ?x365)))
 (let ((?x70 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (=> $x269 (= ?x70 ?x447)))))))))))
 ))
 (let (($x591 (and $x344 $x347)))
 (let (($x466 (= $x591 true)))
 (let (($x285 (= $x466 true)))
 (let (($x663 (= $x285 true)))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x201 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x247))))
 (let ((?x389 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (bvuge ?x747 (_ bv1 32))))
 (=> $x580 (= ?x389 ?x504))))))))))
 ))
 (let (($x524 (and $x527 $x97)))
 (let (($x213 (= $x524 true)))
 (let (($x192 (= $x213 true)))
 (let (($x109 (= $x192 true)))
 (let (($x219 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x481 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x331 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x481 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x481))))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x481 (_ bv2 32))) ?x331)))
 (let ((?x578 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x481 (_ bv3 32))) ?x277)))
 (let ((?x445 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (=> $x103 (= ?x445 ?x578)))))))))))
 ))
 (let (($x542 (and $x354 $x219)))
 (let (($x191 (= $x542 true)))
 (let (($x123 (= $x191 true)))
 (let (($x304 (= $x123 true)))
 (let ((?x717 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x713 (= (_ bv0 32) ?x717)))
 (let ((?x723 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x719 (= (_ bv0 32) ?x723)))
 (let ((?x726 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x722 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x726)))
 (let ((?x128 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x658 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x128)))
 (let (($x473 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x497 (and $x473 $x658)))
 (let (($x530 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x710 (and $x530 $x497)))
 (let (($x441 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x444 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x444 $x211)))
 (let (($x569 (not $x25)))
 (let (($x553 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x38 $x553)))
 (let (($x29 (and (not $x207) $x569)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x557 (and $x255 $x115)))
 (let (($x561 (not $x557)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x122 $x137)))
 (let (($x403 (and (not $x116) $x561)))
 (let (($x303 (and (and (and (and (and (and $x403 $x29) $x268) $x441) $x710) $x722) $x719)))
 (let (($x540 (and $x303 $x713)))
 (let (($x599 (= $x540 true)))
 (let (($x515 (= $x599 true)))
 (let (($x50 (= $x515 true)))
 (let ((?x248 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x197 (= (_ bv0 2) ?x248)))
 (let (($x388 (= $x197 true)))
 (let (($x215 (= $x388 true)))
 (let (($x266 (and $x215 $x50)))
 (let (($x290 (and $x266 $x304)))
 (let (($x519 (and $x290 $x109)))
 (let (($x418 (and $x519 $x663)))
 (let (($x696 (and $x418 $x705)))
 (let (($x294 (and $x696 $x30)))
 (let (($x549 (and $x294 $x572)))
 (let (($x91 (and $x549 $x467)))
 (let (($x342 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x70 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (=> $x269 (= ?x70 ?x389)))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (bvuge ?x747 (_ bv1 32))))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (= $x269 $x580))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x747 (_ bv0 32))))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x19 (_ bv0 32))))
 (= $x84 $x287))))))
 ))
 (let (($x644 (and $x155 $x332)))
 (let (($x434 (and $x644 $x545)))
 (let (($x660 (and $x434 $x342)))
 (let (($x435 (and $x660 $x91)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x445 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (=> $x103 (= ?x445 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x160 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (= $x103 (bvuge ?x160 (_ bv1 32)))))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x160 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x628 (_ bv0 32))))
 (= $x57 (= ?x160 (_ bv0 32)))))))
 ))
 (let (($x588 (and $x138 $x14)))
 (let (($x428 (and $x588 $x392)))
 (let (($x733 (and $x428 $x146)))
 (let (($x83 (and $x733 $x435)))
 (let (($x669 (=> $x83 $x670)))
 (not $x669)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x526 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x598)))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x526 (_ bv1 32))) (select input.dst.llvm-mem ?x526))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x526 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x526 (_ bv2 32))) ?x494))))
 (let ((?x445 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (=> $x103 (= ?x445 ?x377))))))))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x330 (_ bv1 32))))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (= $x103 $x727))))))
 ))
 (let (($x14 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x230 (= false false)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x628 (_ bv0 32))))
 (=> $x57 $x230)))))
 ))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x330 (_ bv0 32))))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x628 (_ bv0 32))))
 (= $x57 $x94))))))
 ))
 (let (($x148 (and $x43 $x14)))
 (let (($x354 (and $x148 $x386)))
 (let (($x608 (and $x354 $x650)))
 (let (($x671 (= $x608 true)))
 (let (($x670 (= $x671 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x481 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd ?x481 (_ bv1 32))) (select input.dst.llvm-mem ?x481))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x481 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x481 (_ bv2 32))) ?x495))))
 (let ((?x445 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (=> $x103 (= ?x445 ?x225))))))))))
 ))
 (let (($x229 (and $x354 $x297)))
 (let (($x618 (= $x229 true)))
 (let (($x340 (= $x618 true)))
 (let (($x467 (= $x340 true)))
 (let (($x583 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x662 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x457 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x603 (and $x457 $x662)))
 (let (($x594 (and $x603 $x583)))
 (let (($x582 (= $x594 true)))
 (let (($x190 (= $x582 true)))
 (let (($x572 (= $x190 true)))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x201 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x247))))
 (let ((?x70 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (=> $x269 (= ?x70 ?x504))))))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x330 (_ bv1 32))))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (= $x269 $x727))))))
 ))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x230 (= false false)))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x19 (_ bv0 32))))
 (=> $x84 $x230)))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x330 (_ bv0 32))))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x19 (_ bv0 32))))
 (= $x84 $x94))))))
 ))
 (let (($x476 (and $x260 $x332)))
 (let (($x344 (and $x476 $x133)))
 (let (($x697 (and $x344 $x694)))
 (let (($x706 (= $x697 true)))
 (let (($x699 (= $x706 true)))
 (let (($x30 (= $x699 true)))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x201 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x201))))
 (let ((?x365 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv2 32))) ?x313)))
 (let ((?x447 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv3 32))) ?x365)))
 (let ((?x389 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (bvuge ?x747 (_ bv1 32))))
 (=> $x580 (= ?x389 ?x447)))))))))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x330 (_ bv1 32))))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (bvuge ?x747 (_ bv1 32))))
 (= $x580 $x727))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x230 (= false false)))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x747 (_ bv0 32))))
 (=> $x287 $x230)))))
 ))
 (let (($x108 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x330 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x330 (_ bv0 32))))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x747 (_ bv0 32))))
 (= $x287 $x94))))))
 ))
 (let (($x576 (and $x108 $x370)))
 (let (($x527 (and $x576 $x13)))
 (let (($x691 (and $x527 $x184)))
 (let (($x707 (= $x691 true)))
 (let (($x703 (= $x707 true)))
 (let (($x705 (= $x703 true)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x201 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x201))))
 (let ((?x365 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv2 32))) ?x313)))
 (let ((?x447 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv3 32))) ?x365)))
 (let ((?x70 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (=> $x269 (= ?x70 ?x447)))))))))))
 ))
 (let (($x591 (and $x344 $x347)))
 (let (($x466 (= $x591 true)))
 (let (($x285 (= $x466 true)))
 (let (($x663 (= $x285 true)))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x201 (bvadd ?x598 input.dst.llvm-%m1)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x247))))
 (let ((?x389 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (bvuge ?x747 (_ bv1 32))))
 (=> $x580 (= ?x389 ?x504))))))))))
 ))
 (let (($x524 (and $x527 $x97)))
 (let (($x213 (= $x524 true)))
 (let (($x192 (= $x213 true)))
 (let (($x109 (= $x192 true)))
 (let (($x219 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x598 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x481 (bvadd ?x598 input.dst.llvm-%m2)))
 (let ((?x331 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x481 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x481))))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x481 (_ bv2 32))) ?x331)))
 (let ((?x578 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x481 (_ bv3 32))) ?x277)))
 (let ((?x445 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (=> $x103 (= ?x445 ?x578)))))))))))
 ))
 (let (($x542 (and $x354 $x219)))
 (let (($x191 (= $x542 true)))
 (let (($x123 (= $x191 true)))
 (let (($x304 (= $x123 true)))
 (let ((?x717 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x713 (= (_ bv0 32) ?x717)))
 (let ((?x723 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x719 (= (_ bv0 32) ?x723)))
 (let ((?x726 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x722 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x726)))
 (let ((?x128 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x658 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x128)))
 (let (($x473 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x497 (and $x473 $x658)))
 (let (($x530 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x710 (and $x530 $x497)))
 (let (($x441 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x268 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x444 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x444 $x211)))
 (let (($x569 (not $x25)))
 (let (($x553 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x38 $x553)))
 (let (($x29 (and (not $x207) $x569)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x557 (and $x255 $x115)))
 (let (($x561 (not $x557)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x122 $x137)))
 (let (($x403 (and (not $x116) $x561)))
 (let (($x303 (and (and (and (and (and (and $x403 $x29) $x268) $x441) $x710) $x722) $x719)))
 (let (($x540 (and $x303 $x713)))
 (let (($x599 (= $x540 true)))
 (let (($x515 (= $x599 true)))
 (let (($x50 (= $x515 true)))
 (let ((?x248 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x197 (= (_ bv0 2) ?x248)))
 (let (($x388 (= $x197 true)))
 (let (($x215 (= $x388 true)))
 (let (($x266 (and $x215 $x50)))
 (let (($x290 (and $x266 $x304)))
 (let (($x519 (and $x290 $x109)))
 (let (($x418 (and $x519 $x663)))
 (let (($x696 (and $x418 $x705)))
 (let (($x294 (and $x696 $x30)))
 (let (($x549 (and $x294 $x572)))
 (let (($x91 (and $x549 $x467)))
 (let (($x342 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x70 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (=> $x269 (= ?x70 ?x389)))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (bvuge ?x747 (_ bv1 32))))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (bvuge ?x19 (_ bv1 32))))
 (= $x269 $x580))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x747 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x747 (_ bv0 32))))
 (let ((?x19 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (= ?x19 (_ bv0 32))))
 (= $x84 $x287))))))
 ))
 (let (($x644 (and $x155 $x332)))
 (let (($x434 (and $x644 $x545)))
 (let (($x660 (and $x434 $x342)))
 (let (($x435 (and $x660 $x91)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x445 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (=> $x103 (= ?x445 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x160 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x628 (_ bv1 32))))
 (= $x103 (bvuge ?x160 (_ bv1 32)))))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x160 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x628 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x628 (_ bv0 32))))
 (= $x57 (= ?x160 (_ bv0 32)))))))
 ))
 (let (($x588 (and $x138 $x14)))
 (let (($x428 (and $x588 $x392)))
 (let (($x733 (and $x428 $x146)))
 (let (($x83 (and $x733 $x435)))
 (let (($x669 (=> $x83 $x670)))
 (not $x669)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00082080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00e44024)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x18b04060)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00082080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x18b04063)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00e44027)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x18b04060)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00e44024)
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x10
      #x00))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!43))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x996684b4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfa031258)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x000000cc)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0000000e)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x000000cc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfa03125b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x996684b7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfa031258)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x996684b4)
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000038) #x04
      #x00))
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x08000000 x!0) #x08000000 #x00000065)
              #x00000064)
         #x00000038))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!47 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000038) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!47 (k!46 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000000
    (ite (= x!0 #x00000038) #x00000000
      (let ((a!1 (concat (k!44 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!43 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!49 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000038) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!49 (k!46 x!0)))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000038) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000000
    (ite (= x!0 #x00000038) #x00000000
      (let ((a!1 (concat (k!43 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!48 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000e) true
      false))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x08000000 x!0) #x08000000 #x00000065)
              #x00000064)
         #x0000000e))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!48 (k!45 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000e) true
    (ite (= x!0 #x08000000) false
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000004
      (let ((a!1 (concat (k!43 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!44 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000004
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x450)))
 (let ((?x635 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x635))))
 (let ((?x201 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (=> $x123 (= ?x201 ?x89))))))))))
 ))
 (let (($x200 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x358 (_ bv1 32))))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (= $x123 $x708))))))
 ))
 (let (($x193 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x142 (= false false)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (=> $x656 $x142)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x358 (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (= $x656 $x391))))))
 ))
 (let (($x308 (and $x427 $x193)))
 (let (($x326 (and $x308 $x200)))
 (let (($x210 (and $x326 $x218)))
 (let (($x75 (= $x210 true)))
 (let (($x480 (= $x75 true)))
 (let (($x630 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x626 (bvadd ?x450 input.dst.llvm-%m2)))
 (let ((?x485 (concat (select input.dst.llvm-mem (bvadd ?x626 (_ bv1 32))) (select input.dst.llvm-mem ?x626))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x626 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x626 (_ bv2 32))) ?x485))))
 (let ((?x29 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (=> $x255 (= ?x29 ?x114))))))))))
 ))
 (let (($x533 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x358 (_ bv1 32))))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (= $x255 $x708))))))
 ))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x142 (= false false)))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x434 (_ bv0 32))))
 (=> $x70 $x142)))))
 ))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x358 (_ bv0 32))))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x434 (_ bv0 32))))
 (= $x70 $x391))))))
 ))
 (let (($x575 (and $x337 $x217)))
 (let (($x9 (and $x575 $x533)))
 (let (($x302 (and $x9 $x630)))
 (let (($x604 (= $x302 true)))
 (let (($x407 (= $x604 true)))
 (let (($x245 (= $x407 true)))
 (let (($x420 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x592 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x283 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x319 (and $x283 $x592)))
 (let (($x163 (and $x319 $x420)))
 (let (($x315 (= $x163 true)))
 (let (($x125 (= $x315 true)))
 (let (($x401 (= $x125 true)))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem ?x655))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv2 32))) ?x76))))
 (let ((?x201 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (=> $x123 (= ?x201 ?x288))))))))))
 ))
 (let (($x680 (and $x326 $x682)))
 (let (($x687 (= $x680 true)))
 (let (($x677 (= $x687 true)))
 (let (($x637 (= $x677 true)))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x282 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x655))))
 (let ((?x382 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv2 32))) ?x282)))
 (let ((?x411 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv3 32))) ?x382)))
 (let ((?x306 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x728 (_ bv1 32))))
 (=> $x191 (= ?x306 ?x411)))))))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x358 (_ bv1 32))))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x728 (_ bv1 32))))
 (= $x191 $x708))))))
 ))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x142 (= false false)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x728 (_ bv0 32))))
 (=> $x386 $x142)))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x358 (_ bv0 32))))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x728 (_ bv0 32))))
 (= $x386 $x391))))))
 ))
 (let (($x223 (and $x421 $x180)))
 (let (($x179 (and $x223 $x383)))
 (let (($x672 (and $x179 $x203)))
 (let (($x686 (= $x672 true)))
 (let (($x684 (= $x686 true)))
 (let (($x685 (= $x684 true)))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x282 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x655))))
 (let ((?x382 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv2 32))) ?x282)))
 (let ((?x411 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv3 32))) ?x382)))
 (let ((?x201 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (=> $x123 (= ?x201 ?x411)))))))))))
 ))
 (let (($x567 (and $x326 $x171)))
 (let (($x657 (= $x567 true)))
 (let (($x298 (= $x657 true)))
 (let (($x511 (= $x298 true)))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem ?x655))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv2 32))) ?x76))))
 (let ((?x306 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x728 (_ bv1 32))))
 (=> $x191 (= ?x306 ?x288))))))))))
 ))
 (let (($x168 (and $x179 $x254)))
 (let (($x35 (= $x168 true)))
 (let (($x118 (= $x35 true)))
 (let (($x621 (= $x118 true)))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x626 (bvadd ?x450 input.dst.llvm-%m2)))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x626 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x626))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x626 (_ bv2 32))) ?x352)))
 (let ((?x371 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x626 (_ bv3 32))) ?x164)))
 (let ((?x29 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (=> $x255 (= ?x29 ?x371)))))))))))
 ))
 (let (($x235 (and $x9 $x616)))
 (let (($x364 (= $x235 true)))
 (let (($x625 (= $x364 true)))
 (let (($x395 (= $x625 true)))
 (let ((?x695 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x701 (= (_ bv0 32) ?x695)))
 (let ((?x705 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x696 (= (_ bv0 32) ?x705)))
 (let ((?x707 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x703 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x707)))
 (let ((?x286 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x286)))
 (let (($x663 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x184 (and $x663 $x45)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x691 (and $x285 $x184)))
 (let (($x466 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x347 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x514 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x313 (and $x61 $x514)))
 (let (($x365 (not $x313)))
 (let (($x648 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x344 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x341 (and $x344 $x648)))
 (let (($x147 (and (not $x341) $x365)))
 (let (($x589 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x519 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (and $x519 $x589)))
 (let (($x476 (not $x260)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x97 $x213)))
 (let (($x133 (and (not $x192) $x476)))
 (let (($x294 (and (and (and (and (and (and $x133 $x147) $x347) $x466) $x691) $x703) $x696)))
 (let (($x49 (and $x294 $x701)))
 (let (($x538 (= $x49 true)))
 (let (($x457 (= $x538 true)))
 (let (($x159 (= $x457 true)))
 (let ((?x280 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x247 (= (_ bv0 2) ?x280)))
 (let (($x529 (= $x247 true)))
 (let (($x504 (= $x529 true)))
 (let (($x662 (and $x504 $x159)))
 (let (($x256 (and $x662 $x395)))
 (let (($x431 (and $x256 $x621)))
 (let (($x490 (and $x431 $x511)))
 (let (($x679 (and $x490 $x685)))
 (let (($x186 (and $x679 $x637)))
 (let (($x471 (and $x186 $x401)))
 (let (($x110 (and $x471 $x245)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x201 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (=> $x123 (= ?x201 ?x306)))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x728 (_ bv1 32))))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (= $x123 $x191))))))
 ))
 (let (($x481 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x728 (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (= $x656 $x386))))))
 ))
 (let (($x102 (and $x481 $x193)))
 (let (($x745 (and $x102 $x290)))
 (let (($x581 (and $x745 $x124)))
 (let (($x477 (and $x581 $x110)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x29 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (=> $x255 (= ?x29 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x580 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (= $x255 (bvuge ?x580 (_ bv1 32)))))))
 ))
 (let (($x574 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x580 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x434 (_ bv0 32))))
 (= $x70 (= ?x580 (_ bv0 32)))))))
 ))
 (let (($x439 (and $x574 $x217)))
 (let (($x561 (and $x439 $x557)))
 (let (($x714 (and $x561 $x268)))
 (let (($x555 (and $x714 $x477)))
 (let (($x195 (=> $x555 $x480)))
 (not $x195)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x450)))
 (let ((?x635 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x635))))
 (let ((?x201 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (=> $x123 (= ?x201 ?x89))))))))))
 ))
 (let (($x200 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x358 (_ bv1 32))))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (= $x123 $x708))))))
 ))
 (let (($x193 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x142 (= false false)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (=> $x656 $x142)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x358 (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (= $x656 $x391))))))
 ))
 (let (($x308 (and $x427 $x193)))
 (let (($x326 (and $x308 $x200)))
 (let (($x210 (and $x326 $x218)))
 (let (($x75 (= $x210 true)))
 (let (($x480 (= $x75 true)))
 (let (($x630 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x626 (bvadd ?x450 input.dst.llvm-%m2)))
 (let ((?x485 (concat (select input.dst.llvm-mem (bvadd ?x626 (_ bv1 32))) (select input.dst.llvm-mem ?x626))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x626 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x626 (_ bv2 32))) ?x485))))
 (let ((?x29 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (=> $x255 (= ?x29 ?x114))))))))))
 ))
 (let (($x533 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x358 (_ bv1 32))))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (= $x255 $x708))))))
 ))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x142 (= false false)))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x434 (_ bv0 32))))
 (=> $x70 $x142)))))
 ))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x358 (_ bv0 32))))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x434 (_ bv0 32))))
 (= $x70 $x391))))))
 ))
 (let (($x575 (and $x337 $x217)))
 (let (($x9 (and $x575 $x533)))
 (let (($x302 (and $x9 $x630)))
 (let (($x604 (= $x302 true)))
 (let (($x407 (= $x604 true)))
 (let (($x245 (= $x407 true)))
 (let (($x420 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x592 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x283 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x319 (and $x283 $x592)))
 (let (($x163 (and $x319 $x420)))
 (let (($x315 (= $x163 true)))
 (let (($x125 (= $x315 true)))
 (let (($x401 (= $x125 true)))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem ?x655))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv2 32))) ?x76))))
 (let ((?x201 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (=> $x123 (= ?x201 ?x288))))))))))
 ))
 (let (($x680 (and $x326 $x682)))
 (let (($x687 (= $x680 true)))
 (let (($x677 (= $x687 true)))
 (let (($x637 (= $x677 true)))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x282 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x655))))
 (let ((?x382 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv2 32))) ?x282)))
 (let ((?x411 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv3 32))) ?x382)))
 (let ((?x306 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x728 (_ bv1 32))))
 (=> $x191 (= ?x306 ?x411)))))))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x358 (_ bv1 32))))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x728 (_ bv1 32))))
 (= $x191 $x708))))))
 ))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x142 (= false false)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x728 (_ bv0 32))))
 (=> $x386 $x142)))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x358 (_ bv0 32))))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x728 (_ bv0 32))))
 (= $x386 $x391))))))
 ))
 (let (($x223 (and $x421 $x180)))
 (let (($x179 (and $x223 $x383)))
 (let (($x672 (and $x179 $x203)))
 (let (($x686 (= $x672 true)))
 (let (($x684 (= $x686 true)))
 (let (($x685 (= $x684 true)))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x282 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x655))))
 (let ((?x382 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv2 32))) ?x282)))
 (let ((?x411 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x655 (_ bv3 32))) ?x382)))
 (let ((?x201 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (=> $x123 (= ?x201 ?x411)))))))))))
 ))
 (let (($x567 (and $x326 $x171)))
 (let (($x657 (= $x567 true)))
 (let (($x298 (= $x657 true)))
 (let (($x511 (= $x298 true)))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x655 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv1 32))) (select input.dst.llvm-mem ?x655))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x655 (_ bv2 32))) ?x76))))
 (let ((?x306 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x728 (_ bv1 32))))
 (=> $x191 (= ?x306 ?x288))))))))))
 ))
 (let (($x168 (and $x179 $x254)))
 (let (($x35 (= $x168 true)))
 (let (($x118 (= $x35 true)))
 (let (($x621 (= $x118 true)))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x626 (bvadd ?x450 input.dst.llvm-%m2)))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x626 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x626))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x626 (_ bv2 32))) ?x352)))
 (let ((?x371 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x626 (_ bv3 32))) ?x164)))
 (let ((?x29 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (=> $x255 (= ?x29 ?x371)))))))))))
 ))
 (let (($x235 (and $x9 $x616)))
 (let (($x364 (= $x235 true)))
 (let (($x625 (= $x364 true)))
 (let (($x395 (= $x625 true)))
 (let ((?x695 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x701 (= (_ bv0 32) ?x695)))
 (let ((?x705 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x696 (= (_ bv0 32) ?x705)))
 (let ((?x707 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x703 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x707)))
 (let ((?x286 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x286)))
 (let (($x663 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x184 (and $x663 $x45)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x691 (and $x285 $x184)))
 (let (($x466 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x347 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x514 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x313 (and $x61 $x514)))
 (let (($x365 (not $x313)))
 (let (($x648 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x344 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x341 (and $x344 $x648)))
 (let (($x147 (and (not $x341) $x365)))
 (let (($x589 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x519 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (and $x519 $x589)))
 (let (($x476 (not $x260)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x97 $x213)))
 (let (($x133 (and (not $x192) $x476)))
 (let (($x294 (and (and (and (and (and (and $x133 $x147) $x347) $x466) $x691) $x703) $x696)))
 (let (($x49 (and $x294 $x701)))
 (let (($x538 (= $x49 true)))
 (let (($x457 (= $x538 true)))
 (let (($x159 (= $x457 true)))
 (let ((?x280 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x247 (= (_ bv0 2) ?x280)))
 (let (($x529 (= $x247 true)))
 (let (($x504 (= $x529 true)))
 (let (($x662 (and $x504 $x159)))
 (let (($x256 (and $x662 $x395)))
 (let (($x431 (and $x256 $x621)))
 (let (($x490 (and $x431 $x511)))
 (let (($x679 (and $x490 $x685)))
 (let (($x186 (and $x679 $x637)))
 (let (($x471 (and $x186 $x401)))
 (let (($x110 (and $x471 $x245)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x201 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (=> $x123 (= ?x201 ?x306)))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x728 (_ bv1 32))))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x543 (_ bv1 32))))
 (= $x123 $x191))))))
 ))
 (let (($x481 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x728 (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (= $x656 $x386))))))
 ))
 (let (($x102 (and $x481 $x193)))
 (let (($x745 (and $x102 $x290)))
 (let (($x581 (and $x745 $x124)))
 (let (($x477 (and $x581 $x110)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x29 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (=> $x255 (= ?x29 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x580 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x434 (_ bv1 32))))
 (= $x255 (bvuge ?x580 (_ bv1 32)))))))
 ))
 (let (($x574 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x580 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x434 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x434 (_ bv0 32))))
 (= $x70 (= ?x580 (_ bv0 32)))))))
 ))
 (let (($x439 (and $x574 $x217)))
 (let (($x561 (and $x439 $x557)))
 (let (($x714 (and $x561 $x268)))
 (let (($x555 (and $x714 $x477)))
 (let (($x195 (=> $x555 $x480)))
 (not $x195)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbfee0080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7fbb0004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xafffff84)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0000002c)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xafffff84)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fbb0007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbfee0083)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7fbb0004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbfee0080)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000b0) #x04
      #x00))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000002c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002c) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002c) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000b0) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x08010000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x15800620)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x959fa254)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x08010000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x959fa257)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x15800623)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x959fa254)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x15800620)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x72 input.dst.llvm-%m2)))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x322))))
 (let ((?x436 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (=> $x364 (= ?x436 ?x366))))))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x614 (_ bv1 32))))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (= $x364 $x464))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x709 (_ bv0 32))))
 (=> $x533 $x237)))))
 ))
 (let (($x17 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x614 (_ bv0 32))))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x709 (_ bv0 32))))
 (= $x533 $x190))))))
 ))
 (let (($x90 (and $x17 $x638)))
 (let (($x78 (and $x90 $x396)))
 (let (($x309 (and $x78 $x474)))
 (let (($x336 (= $x309 true)))
 (let (($x251 (= $x336 true)))
 (let ((?x605 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x412 (= (_ bv0 2) ?x605)))
 (let (($x560 (= $x412 true)))
 (let (($x339 (= $x560 true)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x72 input.dst.llvm-%m2)))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x322))))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (=> $x519 (= ?x147 ?x366))))))))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x614 (_ bv1 32))))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (= $x519 $x464))))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x745 (_ bv0 32))))
 (=> $x201 $x237)))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x614 (_ bv0 32))))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x745 (_ bv0 32))))
 (= $x201 $x190))))))
 ))
 (let (($x229 (and $x301 $x42)))
 (let (($x692 (and $x229 $x674)))
 (let (($x238 (and $x692 $x69)))
 (let (($x541 (= $x238 true)))
 (let (($x398 (= $x541 true)))
 (let (($x584 (= $x398 true)))
 (let (($x33 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x668 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x24 (and $x668 $x74)))
 (let (($x405 (and $x24 $x33)))
 (let (($x12 (= $x405 true)))
 (let (($x558 (= $x12 true)))
 (let (($x410 (= $x558 true)))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x162 (bvadd ?x72 input.dst.llvm-%m1)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem ?x162))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv2 32))) ?x579))))
 (let ((?x655 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (=> $x625 (= ?x655 ?x335))))))))))
 ))
 (let (($x651 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x614 (_ bv1 32))))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (= $x625 $x464))))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (= ?x582 (_ bv0 32))))
 (=> $x549 $x237)))))
 ))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x614 (_ bv0 32))))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (= ?x582 (_ bv0 32))))
 (= $x549 $x190))))))
 ))
 (let (($x378 (and $x266 $x225)))
 (let (($x219 (and $x378 $x651)))
 (let (($x653 (and $x219 $x377)))
 (let (($x368 (= $x653 true)))
 (let (($x494 (= $x368 true)))
 (let (($x58 (= $x494 true)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x162 (bvadd ?x72 input.dst.llvm-%m1)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x162))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv2 32))) ?x151)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv3 32))) ?x262)))
 (let ((?x436 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (=> $x364 (= ?x436 ?x122)))))))))))
 ))
 (let (($x297 (and $x78 $x156)))
 (let (($x340 (= $x297 true)))
 (let (($x467 (= $x340 true)))
 (let (($x435 (= $x467 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x162 (bvadd ?x72 input.dst.llvm-%m1)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x162))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv2 32))) ?x151)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv3 32))) ?x262)))
 (let ((?x655 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (=> $x625 (= ?x655 ?x122)))))))))))
 ))
 (let (($x553 (and $x219 $x459)))
 (let (($x207 (= $x553 true)))
 (let (($x444 (= $x207 true)))
 (let (($x211 (= $x444 true)))
 (let (($x640 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x162 (bvadd ?x72 input.dst.llvm-%m1)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem ?x162))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv2 32))) ?x579))))
 (let ((?x436 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (=> $x364 (= ?x436 ?x335))))))))))
 ))
 (let (($x718 (and $x78 $x640)))
 (let (($x729 (= $x718 true)))
 (let (($x385 (= $x729 true)))
 (let (($x566 (= $x385 true)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x72 input.dst.llvm-%m2)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x41))))
 (let ((?x739 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv2 32))) ?x175)))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv3 32))) ?x739)))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (=> $x519 (= ?x147 ?x284)))))))))))
 ))
 (let (($x104 (and $x692 $x40)))
 (let (($x636 (= $x104 true)))
 (let (($x615 (= $x636 true)))
 (let (($x417 (= $x615 true)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x672 (= (_ bv0 32) ?x203)))
 (let ((?x402 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x416 (= (_ bv0 32) ?x402)))
 (let ((?x511 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x490 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x511)))
 (let ((?x171 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x567 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x171)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x657 (and $x143 $x567)))
 (let (($x411 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x298 (and $x411 $x657)))
 (let (($x382 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x483 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x308 $x483)))
 (let (($x326 (not $x200)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x431 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x427 (and $x431 $x289)))
 (let (($x272 (and (not $x427) $x326)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x307 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x307 $x254)))
 (let (($x35 (not $x168)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x329 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x329 $x196)))
 (let (($x621 (and (not $x288) $x35)))
 (let (($x678 (and (and (and (and (and (and $x621 $x272) $x120) $x382) $x298) $x490) $x416)))
 (let (($x682 (and $x678 $x672)))
 (let (($x680 (= $x682 true)))
 (let (($x687 (= $x680 true)))
 (let (($x677 (= $x687 true)))
 (let (($x611 (and $x677 $x417)))
 (let (($x271 (and $x611 $x566)))
 (let (($x25 (and $x271 $x211)))
 (let (($x91 (and $x25 $x435)))
 (let (($x619 (and $x91 $x58)))
 (let (($x320 (and $x619 $x410)))
 (let (($x666 (and $x320 $x584)))
 (let (($x32 (and $x666 $x339)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x655 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (=> $x625 (= ?x655 ?x436)))))))
 ))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (= $x625 $x364))))))
 ))
 (let (($x626 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x709 (_ bv0 32))))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (= ?x582 (_ bv0 32))))
 (= $x549 $x533))))))
 ))
 (let (($x185 (and $x626 $x225)))
 (let (($x724 (and $x185 $x256)))
 (let (($x107 (and $x724 $x334)))
 (let (($x317 (and $x107 $x32)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (=> $x519 (= ?x147 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x191 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (= $x519 (bvuge ?x191 (_ bv1 32)))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x191 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x745 (_ bv0 32))))
 (= $x201 (= ?x191 (_ bv0 32)))))))
 ))
 (let (($x345 (and $x292 $x42)))
 (let (($x476 (and $x345 $x260)))
 (let (($x697 (and $x476 $x347)))
 (let (($x253 (and $x697 $x317)))
 (let (($x328 (=> $x253 $x251)))
 (not $x328)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x72 input.dst.llvm-%m2)))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x322))))
 (let ((?x436 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (=> $x364 (= ?x436 ?x366))))))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x614 (_ bv1 32))))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (= $x364 $x464))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x709 (_ bv0 32))))
 (=> $x533 $x237)))))
 ))
 (let (($x17 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x614 (_ bv0 32))))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x709 (_ bv0 32))))
 (= $x533 $x190))))))
 ))
 (let (($x90 (and $x17 $x638)))
 (let (($x78 (and $x90 $x396)))
 (let (($x309 (and $x78 $x474)))
 (let (($x336 (= $x309 true)))
 (let (($x251 (= $x336 true)))
 (let ((?x605 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x412 (= (_ bv0 2) ?x605)))
 (let (($x560 (= $x412 true)))
 (let (($x339 (= $x560 true)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x72 input.dst.llvm-%m2)))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x322))))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (=> $x519 (= ?x147 ?x366))))))))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x614 (_ bv1 32))))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (= $x519 $x464))))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x745 (_ bv0 32))))
 (=> $x201 $x237)))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x614 (_ bv0 32))))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x745 (_ bv0 32))))
 (= $x201 $x190))))))
 ))
 (let (($x229 (and $x301 $x42)))
 (let (($x692 (and $x229 $x674)))
 (let (($x238 (and $x692 $x69)))
 (let (($x541 (= $x238 true)))
 (let (($x398 (= $x541 true)))
 (let (($x584 (= $x398 true)))
 (let (($x33 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x74 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x668 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x24 (and $x668 $x74)))
 (let (($x405 (and $x24 $x33)))
 (let (($x12 (= $x405 true)))
 (let (($x558 (= $x12 true)))
 (let (($x410 (= $x558 true)))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x162 (bvadd ?x72 input.dst.llvm-%m1)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem ?x162))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv2 32))) ?x579))))
 (let ((?x655 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (=> $x625 (= ?x655 ?x335))))))))))
 ))
 (let (($x651 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x614 (_ bv1 32))))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (= $x625 $x464))))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (= ?x582 (_ bv0 32))))
 (=> $x549 $x237)))))
 ))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x614 (_ bv0 32))))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (= ?x582 (_ bv0 32))))
 (= $x549 $x190))))))
 ))
 (let (($x378 (and $x266 $x225)))
 (let (($x219 (and $x378 $x651)))
 (let (($x653 (and $x219 $x377)))
 (let (($x368 (= $x653 true)))
 (let (($x494 (= $x368 true)))
 (let (($x58 (= $x494 true)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x162 (bvadd ?x72 input.dst.llvm-%m1)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x162))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv2 32))) ?x151)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv3 32))) ?x262)))
 (let ((?x436 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (=> $x364 (= ?x436 ?x122)))))))))))
 ))
 (let (($x297 (and $x78 $x156)))
 (let (($x340 (= $x297 true)))
 (let (($x467 (= $x340 true)))
 (let (($x435 (= $x467 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x162 (bvadd ?x72 input.dst.llvm-%m1)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x162))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv2 32))) ?x151)))
 (let ((?x122 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x162 (_ bv3 32))) ?x262)))
 (let ((?x655 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (=> $x625 (= ?x655 ?x122)))))))))))
 ))
 (let (($x553 (and $x219 $x459)))
 (let (($x207 (= $x553 true)))
 (let (($x444 (= $x207 true)))
 (let (($x211 (= $x444 true)))
 (let (($x640 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x162 (bvadd ?x72 input.dst.llvm-%m1)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem ?x162))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv2 32))) ?x579))))
 (let ((?x436 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (=> $x364 (= ?x436 ?x335))))))))))
 ))
 (let (($x718 (and $x78 $x640)))
 (let (($x729 (= $x718 true)))
 (let (($x385 (= $x729 true)))
 (let (($x566 (= $x385 true)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x41 (bvadd ?x72 input.dst.llvm-%m2)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x41))))
 (let ((?x739 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv2 32))) ?x175)))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv3 32))) ?x739)))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (=> $x519 (= ?x147 ?x284)))))))))))
 ))
 (let (($x104 (and $x692 $x40)))
 (let (($x636 (= $x104 true)))
 (let (($x615 (= $x636 true)))
 (let (($x417 (= $x615 true)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x672 (= (_ bv0 32) ?x203)))
 (let ((?x402 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x416 (= (_ bv0 32) ?x402)))
 (let ((?x511 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x490 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x511)))
 (let ((?x171 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x567 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x171)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x657 (and $x143 $x567)))
 (let (($x411 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x298 (and $x411 $x657)))
 (let (($x382 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x483 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x308 $x483)))
 (let (($x326 (not $x200)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x431 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x427 (and $x431 $x289)))
 (let (($x272 (and (not $x427) $x326)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x307 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x307 $x254)))
 (let (($x35 (not $x168)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x329 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x329 $x196)))
 (let (($x621 (and (not $x288) $x35)))
 (let (($x678 (and (and (and (and (and (and $x621 $x272) $x120) $x382) $x298) $x490) $x416)))
 (let (($x682 (and $x678 $x672)))
 (let (($x680 (= $x682 true)))
 (let (($x687 (= $x680 true)))
 (let (($x677 (= $x687 true)))
 (let (($x611 (and $x677 $x417)))
 (let (($x271 (and $x611 $x566)))
 (let (($x25 (and $x271 $x211)))
 (let (($x91 (and $x25 $x435)))
 (let (($x619 (and $x91 $x58)))
 (let (($x320 (and $x619 $x410)))
 (let (($x666 (and $x320 $x584)))
 (let (($x32 (and $x666 $x339)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x655 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (=> $x625 (= ?x655 ?x436)))))))
 ))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x709 (_ bv1 32))))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x582 (_ bv1 32))))
 (= $x625 $x364))))))
 ))
 (let (($x626 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x709 (_ bv0 32))))
 (let ((?x582 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (= ?x582 (_ bv0 32))))
 (= $x549 $x533))))))
 ))
 (let (($x185 (and $x626 $x225)))
 (let (($x724 (and $x185 $x256)))
 (let (($x107 (and $x724 $x334)))
 (let (($x317 (and $x107 $x32)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (=> $x519 (= ?x147 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x191 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x745 (_ bv1 32))))
 (= $x519 (bvuge ?x191 (_ bv1 32)))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x191 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x745 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (= ?x745 (_ bv0 32))))
 (= $x201 (= ?x191 (_ bv0 32)))))))
 ))
 (let (($x345 (and $x292 $x42)))
 (let (($x476 (and $x345 $x260)))
 (let (($x697 (and $x476 $x347)))
 (let (($x253 (and $x697 $x317)))
 (let (($x328 (=> $x253 $x251)))
 (not $x328)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xe8be4148)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x90ebb404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x266d7c03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x90ebb407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x90ebb404)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4148 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4148 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0a2452a4)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8884c950)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x28009880)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8884c953)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0a2452a7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8884c950)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0a2452a4)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x28009883 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009882 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009881 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009880 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #x28009883 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009882 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009881 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009880 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000002
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000002
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x13 (= true false)))
 (let (($x158 (= $x13 true)))
 (let ((?x112 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x157 (= (_ bv0 32) ?x112)))
 (let ((?x713 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x540 (= (_ bv0 32) ?x713)))
 (let ((?x182 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x717 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x548 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x601 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x548)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x346 (and $x154 $x601)))
 (let (($x456 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (and $x456 $x346)))
 (let (($x509 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x534 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x38 $x170)))
 (let (($x273 (not $x117)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x702 (and $x137 $x403)))
 (let (($x520 (and (not $x702) $x273)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x700 (and $x712 $x462)))
 (let (($x20 (not $x700)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x113 $x236)))
 (let (($x85 (and (not $x414) $x20)))
 (let (($x370 (and (and (and (and (and (and $x85 $x520) $x534) $x509) $x599) $x717) $x540)))
 (let (($x576 (and $x370 $x157)))
 (let (($x146 (= $x576 true)))
 (let (($x733 (= $x146 true)))
 (let (($x445 (= $x733 true)))
 (let (($x688 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x11))))
 (let ((?x382 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (=> $x289 (= ?x382 ?x39))))))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x144 (_ bv1 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (= $x289 $x545))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x748 (= false false)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x724 (_ bv0 32))))
 (=> $x655 $x748)))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (= ?x144 (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x724 (_ bv0 32))))
 (= $x655 $x482))))))
 ))
 (let (($x336 (and $x309 $x233)))
 (let (($x434 (and $x336 $x160)))
 (let (($x559 (and $x434 $x688)))
 (let (($x498 (= $x559 true)))
 (let (($x165 (= $x498 true)))
 (let (($x539 (= $x165 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x514 (= (_ bv0 2) ?x61)))
 (let (($x313 (= $x514 true)))
 (let (($x130 (= $x313 true)))
 (let (($x499 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x295))))
 (let ((?x103 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (=> $x638 (= ?x103 ?x26))))))))))
 ))
 (let (($x544 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x144 (_ bv1 32))))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (= $x638 $x545))))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x748 (= false false)))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x243 (_ bv0 32))))
 (=> $x169 $x748)))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (= ?x144 (_ bv0 32))))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x243 (_ bv0 32))))
 (= $x169 $x482))))))
 ))
 (let (($x344 (and $x133 $x175)))
 (let (($x613 (and $x344 $x544)))
 (let (($x97 (and $x613 $x499)))
 (let (($x524 (= $x97 true)))
 (let (($x192 (= $x524 true)))
 (let (($x622 (= $x192 true)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x277))))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv2 32))) ?x337)))
 (let ((?x371 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv3 32))) ?x352)))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x41 (_ bv1 32))))
 (=> $x274 (= ?x588 ?x371)))))))))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x144 (_ bv1 32))))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x41 (_ bv1 32))))
 (= $x274 $x545))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x748 (= false false)))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x41 (_ bv0 32))))
 (=> $x173 $x748)))))
 ))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (= ?x144 (_ bv0 32))))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x41 (_ bv0 32))))
 (= $x173 $x482))))))
 ))
 (let (($x275 (and $x202 $x276)))
 (let (($x392 (and $x275 $x234)))
 (let (($x714 (and $x392 $x268)))
 (let (($x354 (= $x714 true)))
 (let (($x543 (= $x354 true)))
 (let (($x656 (= $x543 true)))
 (let (($x235 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x277))))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv2 32))) ?x337)))
 (let ((?x371 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv3 32))) ?x352)))
 (let ((?x103 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (=> $x638 (= ?x103 ?x371)))))))))))
 ))
 (let (($x180 (and $x613 $x235)))
 (let (($x223 (= $x180 true)))
 (let (($x383 (= $x223 true)))
 (let (($x179 (= $x383 true)))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x295))))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x41 (_ bv1 32))))
 (=> $x274 (= ?x588 ?x26))))))))))
 ))
 (let (($x676 (and $x392 $x246)))
 (let (($x484 (= $x676 true)))
 (let (($x715 (= $x484 true)))
 (let (($x83 (= $x715 true)))
 (let ((?x640 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x718 (bvneg ?x640)))
 (let (($x669 (= ?x718 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x650 (= $x669 true)))
 (let (($x671 (= $x650 true)))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x485))))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv2 32))) ?x125)))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv3 32))) ?x51)))
 (let ((?x382 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (=> $x289 (= ?x382 ?x721)))))))))))
 ))
 (let (($x531 (and $x434 $x293)))
 (let (($x562 (= $x531 true)))
 (let (($x111 (= $x562 true)))
 (let (($x136 (= $x111 true)))
 (let (($x385 (= ?x718 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x566 (= $x385 true)))
 (let (($x271 (= $x566 true)))
 (let (($x610 (and $x271 $x136)))
 (let (($x673 (and $x610 $x671)))
 (let (($x526 (and $x673 $x83)))
 (let (($x590 (and $x526 $x179)))
 (let (($x598 (and $x590 $x656)))
 (let (($x648 (and $x598 $x622)))
 (let (($x586 (and $x648 $x130)))
 (let (($x570 (and $x586 $x539)))
 (let (($x198 (and $x570 $x445)))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x103 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (=> $x638 (= ?x103 ?x588)))))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x41 (_ bv1 32))))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (= $x638 $x274))))))
 ))
 (let (($x738 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x41 (_ bv0 32))))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x243 (_ bv0 32))))
 (= $x169 $x173))))))
 ))
 (let (($x739 (and $x738 $x175)))
 (let (($x396 (and $x739 $x633)))
 (let (($x335 (and $x396 $x53)))
 (let (($x527 (and $x335 $x198)))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (=> $x289 (= ?x382 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (= $x289 (bvuge ?x364 (_ bv1 32)))))))
 ))
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x724 (_ bv0 32))))
 (= $x655 (= ?x364 (_ bv0 32)))))))
 ))
 (let (($x554 (and $x743 $x233)))
 (let (($x308 (and $x554 $x556)))
 (let (($x22 (and $x308 $x143)))
 (let (($x426 (and $x22 $x527)))
 (let (($x735 (=> $x426 $x158)))
 (not $x735))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x13 (= true false)))
 (let (($x158 (= $x13 true)))
 (let ((?x112 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x157 (= (_ bv0 32) ?x112)))
 (let ((?x713 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x540 (= (_ bv0 32) ?x713)))
 (let ((?x182 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x717 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x548 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x601 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x548)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x346 (and $x154 $x601)))
 (let (($x456 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (and $x456 $x346)))
 (let (($x509 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x534 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x38 $x170)))
 (let (($x273 (not $x117)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x702 (and $x137 $x403)))
 (let (($x520 (and (not $x702) $x273)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x700 (and $x712 $x462)))
 (let (($x20 (not $x700)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x113 $x236)))
 (let (($x85 (and (not $x414) $x20)))
 (let (($x370 (and (and (and (and (and (and $x85 $x520) $x534) $x509) $x599) $x717) $x540)))
 (let (($x576 (and $x370 $x157)))
 (let (($x146 (= $x576 true)))
 (let (($x733 (= $x146 true)))
 (let (($x445 (= $x733 true)))
 (let (($x688 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x11))))
 (let ((?x382 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (=> $x289 (= ?x382 ?x39))))))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x144 (_ bv1 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (= $x289 $x545))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x748 (= false false)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x724 (_ bv0 32))))
 (=> $x655 $x748)))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (= ?x144 (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x724 (_ bv0 32))))
 (= $x655 $x482))))))
 ))
 (let (($x336 (and $x309 $x233)))
 (let (($x434 (and $x336 $x160)))
 (let (($x559 (and $x434 $x688)))
 (let (($x498 (= $x559 true)))
 (let (($x165 (= $x498 true)))
 (let (($x539 (= $x165 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x514 (= (_ bv0 2) ?x61)))
 (let (($x313 (= $x514 true)))
 (let (($x130 (= $x313 true)))
 (let (($x499 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x295))))
 (let ((?x103 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (=> $x638 (= ?x103 ?x26))))))))))
 ))
 (let (($x544 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x144 (_ bv1 32))))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (= $x638 $x545))))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x748 (= false false)))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x243 (_ bv0 32))))
 (=> $x169 $x748)))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (= ?x144 (_ bv0 32))))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x243 (_ bv0 32))))
 (= $x169 $x482))))))
 ))
 (let (($x344 (and $x133 $x175)))
 (let (($x613 (and $x344 $x544)))
 (let (($x97 (and $x613 $x499)))
 (let (($x524 (= $x97 true)))
 (let (($x192 (= $x524 true)))
 (let (($x622 (= $x192 true)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x277))))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv2 32))) ?x337)))
 (let ((?x371 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv3 32))) ?x352)))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x41 (_ bv1 32))))
 (=> $x274 (= ?x588 ?x371)))))))))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x144 (_ bv1 32))))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x41 (_ bv1 32))))
 (= $x274 $x545))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x748 (= false false)))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x41 (_ bv0 32))))
 (=> $x173 $x748)))))
 ))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (= ?x144 (_ bv0 32))))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x41 (_ bv0 32))))
 (= $x173 $x482))))))
 ))
 (let (($x275 (and $x202 $x276)))
 (let (($x392 (and $x275 $x234)))
 (let (($x714 (and $x392 $x268)))
 (let (($x354 (= $x714 true)))
 (let (($x543 (= $x354 true)))
 (let (($x656 (= $x543 true)))
 (let (($x235 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x277))))
 (let ((?x352 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv2 32))) ?x337)))
 (let ((?x371 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x277 (_ bv3 32))) ?x352)))
 (let ((?x103 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (=> $x638 (= ?x103 ?x371)))))))))))
 ))
 (let (($x180 (and $x613 $x235)))
 (let (($x223 (= $x180 true)))
 (let (($x383 (= $x223 true)))
 (let (($x179 (= $x383 true)))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x277 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x295))))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x41 (_ bv1 32))))
 (=> $x274 (= ?x588 ?x26))))))))))
 ))
 (let (($x676 (and $x392 $x246)))
 (let (($x484 (= $x676 true)))
 (let (($x715 (= $x484 true)))
 (let (($x83 (= $x715 true)))
 (let ((?x640 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x718 (bvneg ?x640)))
 (let (($x669 (= ?x718 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x650 (= $x669 true)))
 (let (($x671 (= $x650 true)))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x485))))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv2 32))) ?x125)))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv3 32))) ?x51)))
 (let ((?x382 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (=> $x289 (= ?x382 ?x721)))))))))))
 ))
 (let (($x531 (and $x434 $x293)))
 (let (($x562 (= $x531 true)))
 (let (($x111 (= $x562 true)))
 (let (($x136 (= $x111 true)))
 (let (($x385 (= ?x718 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x566 (= $x385 true)))
 (let (($x271 (= $x566 true)))
 (let (($x610 (and $x271 $x136)))
 (let (($x673 (and $x610 $x671)))
 (let (($x526 (and $x673 $x83)))
 (let (($x590 (and $x526 $x179)))
 (let (($x598 (and $x590 $x656)))
 (let (($x648 (and $x598 $x622)))
 (let (($x586 (and $x648 $x130)))
 (let (($x570 (and $x586 $x539)))
 (let (($x198 (and $x570 $x445)))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x103 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (=> $x638 (= ?x103 ?x588)))))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x41 (_ bv1 32))))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x243 (_ bv1 32))))
 (= $x638 $x274))))))
 ))
 (let (($x738 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x41 (_ bv0 32))))
 (let ((?x243 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x243 (_ bv0 32))))
 (= $x169 $x173))))))
 ))
 (let (($x739 (and $x738 $x175)))
 (let (($x396 (and $x739 $x633)))
 (let (($x335 (and $x396 $x53)))
 (let (($x527 (and $x335 $x198)))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (=> $x289 (= ?x382 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x724 (_ bv1 32))))
 (= $x289 (bvuge ?x364 (_ bv1 32)))))))
 ))
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x724 (_ bv0 32))))
 (= $x655 (= ?x364 (_ bv0 32)))))))
 ))
 (let (($x554 (and $x743 $x233)))
 (let (($x308 (and $x554 $x556)))
 (let (($x22 (and $x308 $x143)))
 (let (($x426 (and $x22 $x527)))
 (let (($x735 (=> $x426 $x158)))
 (not $x735))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x93d62328)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x83eadfc8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x44b4264b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x93d6232b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x93d62328)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfc8 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!38))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00100000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000003c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!39))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04421800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40040103)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000003f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000003c)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!42 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!42 (k!40 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x40040100) false
    (ite (= x!0 #x0000003c) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!44 (k!41 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421800 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!43 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!43 (k!41 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!39 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x753 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x239 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x286)))
 (let ((?x546 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x609 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x546)))
 (let ((?x750 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x609)))
 (let ((?x569 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (=> $x415 (= ?x569 ?x750)))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x16 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (= $x415 $x131))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x579 (= false false)))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x226 (_ bv0 32))))
 (=> $x68 $x579)))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x16 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x226 (_ bv0 32))))
 (= $x68 $x710))))))
 ))
 (let (($x240 (and $x746 $x197)))
 (let (($x215 (and $x240 $x408)))
 (let (($x754 (and $x215 $x753)))
 (let (($x755 (= $x754 true)))
 (let (($x756 (= $x755 true)))
 (let ((?x193 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x250 (bvneg ?x193)))
 (let (($x19 (= ?x250 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x84 (= $x19 true)))
 (let (($x618 (= $x84 true)))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x286 input.dst.llvm-%m2)))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x357 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x457))))
 (let ((?x552 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (=> $x474 (= ?x552 ?x357))))))))))
 ))
 (let (($x508 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x16 (_ bv1 32))))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (= $x474 $x131))))))
 ))
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x579 (= false false)))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x396 (_ bv0 32))))
 (=> $x103 $x579)))))
 ))
 (let (($x720 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x16 (_ bv0 32))))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x396 (_ bv0 32))))
 (= $x103 $x710))))))
 ))
 (let (($x726 (and $x720 $x451)))
 (let (($x99 (and $x726 $x508)))
 (let (($x49 (and $x99 $x538)))
 (let (($x662 (= $x49 true)))
 (let (($x95 (= $x662 true)))
 (let (($x241 (= $x95 true)))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x212 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x285))))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (=> $x391 (= ?x716 ?x375))))))))))
 ))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x16 (_ bv1 32))))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (= $x391 $x131))))))
 ))
 (let (($x676 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x579 (= false false)))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x295 (_ bv0 32))))
 (=> $x57 $x579)))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x16 (_ bv0 32))))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x295 (_ bv0 32))))
 (= $x57 $x710))))))
 ))
 (let (($x684 (and $x120 $x676)))
 (let (($x340 (and $x684 $x467)))
 (let (($x558 (and $x340 $x12)))
 (let (($x732 (= $x558 true)))
 (let (($x366 (= $x732 true)))
 (let (($x204 (= $x366 true)))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x212 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x574 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x212))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv2 32))) ?x574)))
 (let ((?x439 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv3 32))) ?x142)))
 (let ((?x569 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (=> $x415 (= ?x569 ?x439)))))))))))
 ))
 (let (($x44 (and $x215 $x639)))
 (let (($x505 (= $x44 true)))
 (let (($x88 (= $x505 true)))
 (let (($x405 (= $x88 true)))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x212 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x574 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x212))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv2 32))) ?x574)))
 (let ((?x439 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv3 32))) ?x142)))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (=> $x391 (= ?x716 ?x439)))))))))))
 ))
 (let (($x737 (and $x340 $x654)))
 (let (($x664 (= $x737 true)))
 (let (($x600 (= $x664 true)))
 (let (($x429 (= $x600 true)))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x212 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x285))))
 (let ((?x569 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (=> $x415 (= ?x569 ?x375))))))))))
 ))
 (let (($x480 (and $x215 $x441)))
 (let (($x195 (= $x480 true)))
 (let (($x314 (= $x195 true)))
 (let (($x75 (= $x314 true)))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x286 input.dst.llvm-%m2)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x691))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv2 32))) ?x8)))
 (let ((?x188 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv3 32))) ?x228)))
 (let ((?x552 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (=> $x474 (= ?x552 ?x188)))))))))))
 ))
 (let (($x503 (and $x99 $x330)))
 (let (($x585 (= $x503 true)))
 (let (($x291 (= $x585 true)))
 (let (($x602 (= $x291 true)))
 (let ((?x601 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x346 (= (_ bv0 32) ?x601)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x548 (= (_ bv0 32) ?x154)))
 (let ((?x148 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x456 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x534 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x534)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x501 (and $x94 $x43)))
 (let (($x520 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x509 (and $x520 $x501)))
 (let (($x273 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x20 $x85)))
 (let (($x403 (not $x137)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x700 (and $x712 $x462)))
 (let (($x82 (and (not $x700) $x403)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x113 $x167)))
 (let (($x414 (not $x236)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x165 $x570)))
 (let (($x645 (and (not $x316) $x414)))
 (let (($x713 (and (and (and (and (and (and $x645 $x82) $x170) $x273) $x509) $x456) $x548)))
 (let (($x540 (and $x713 $x346)))
 (let (($x370 (= $x540 true)))
 (let (($x112 (= $x370 true)))
 (let (($x157 (= $x112 true)))
 (let ((?x105 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x39 (= (_ bv0 2) ?x105)))
 (let (($x690 (= $x39 true)))
 (let (($x681 (= $x690 true)))
 (let (($x130 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x61 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x586 (and $x61 $x130)))
 (let (($x744 (= $x586 true)))
 (let (($x632 (= $x744 true)))
 (let (($x92 (= $x632 true)))
 (let (($x97 (= ?x250 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x524 (= $x97 true)))
 (let (($x192 (= $x524 true)))
 (let (($x719 (and $x192 $x92)))
 (let (($x688 (and $x719 $x681)))
 (let (($x576 (and $x688 $x157)))
 (let (($x464 (and $x576 $x602)))
 (let (($x152 (and $x464 $x75)))
 (let (($x617 (and $x152 $x429)))
 (let (($x74 (and $x617 $x405)))
 (let (($x176 (and $x74 $x204)))
 (let (($x56 (and $x176 $x241)))
 (let (($x478 (and $x56 $x618)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x569 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (=> $x391 (= ?x716 ?x569)))))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (= $x391 $x415))))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x226 (_ bv0 32))))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x295 (_ bv0 32))))
 (= $x57 $x68))))))
 ))
 (let (($x484 (and $x327 $x676)))
 (let (($x371 (and $x484 $x352)))
 (let (($x543 (and $x371 $x354)))
 (let (($x126 (and $x543 $x478)))
 (let (($x634 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x552 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (=> $x474 (= ?x552 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x274 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (= $x474 (bvuge ?x274 (_ bv1 32)))))))
 ))
 (let (($x14 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x274 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x396 (_ bv0 32))))
 (= $x103 (= ?x274 (_ bv0 32)))))))
 ))
 (let (($x300 (and $x14 $x451)))
 (let (($x545 (and $x300 $x336)))
 (let (($x380 (and $x545 $x634)))
 (let (($x595 (and $x380 $x126)))
 (let (($x757 (=> $x595 $x756)))
 (not $x757)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x753 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x239 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x286)))
 (let ((?x546 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x609 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x546)))
 (let ((?x750 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x609)))
 (let ((?x569 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (=> $x415 (= ?x569 ?x750)))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x16 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (= $x415 $x131))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x579 (= false false)))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x226 (_ bv0 32))))
 (=> $x68 $x579)))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x16 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x226 (_ bv0 32))))
 (= $x68 $x710))))))
 ))
 (let (($x240 (and $x746 $x197)))
 (let (($x215 (and $x240 $x408)))
 (let (($x754 (and $x215 $x753)))
 (let (($x755 (= $x754 true)))
 (let (($x756 (= $x755 true)))
 (let ((?x193 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x250 (bvneg ?x193)))
 (let (($x19 (= ?x250 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x84 (= $x19 true)))
 (let (($x618 (= $x84 true)))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x286 input.dst.llvm-%m2)))
 (let ((?x457 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x357 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x457))))
 (let ((?x552 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (=> $x474 (= ?x552 ?x357))))))))))
 ))
 (let (($x508 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x16 (_ bv1 32))))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (= $x474 $x131))))))
 ))
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x579 (= false false)))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x396 (_ bv0 32))))
 (=> $x103 $x579)))))
 ))
 (let (($x720 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x16 (_ bv0 32))))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x396 (_ bv0 32))))
 (= $x103 $x710))))))
 ))
 (let (($x726 (and $x720 $x451)))
 (let (($x99 (and $x726 $x508)))
 (let (($x49 (and $x99 $x538)))
 (let (($x662 (= $x49 true)))
 (let (($x95 (= $x662 true)))
 (let (($x241 (= $x95 true)))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x212 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x285))))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (=> $x391 (= ?x716 ?x375))))))))))
 ))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x16 (_ bv1 32))))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (= $x391 $x131))))))
 ))
 (let (($x676 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x579 (= false false)))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x295 (_ bv0 32))))
 (=> $x57 $x579)))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x16 (_ bv0 32))))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x295 (_ bv0 32))))
 (= $x57 $x710))))))
 ))
 (let (($x684 (and $x120 $x676)))
 (let (($x340 (and $x684 $x467)))
 (let (($x558 (and $x340 $x12)))
 (let (($x732 (= $x558 true)))
 (let (($x366 (= $x732 true)))
 (let (($x204 (= $x366 true)))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x212 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x574 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x212))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv2 32))) ?x574)))
 (let ((?x439 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv3 32))) ?x142)))
 (let ((?x569 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (=> $x415 (= ?x569 ?x439)))))))))))
 ))
 (let (($x44 (and $x215 $x639)))
 (let (($x505 (= $x44 true)))
 (let (($x88 (= $x505 true)))
 (let (($x405 (= $x88 true)))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x212 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x574 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x212))))
 (let ((?x142 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv2 32))) ?x574)))
 (let ((?x439 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x212 (_ bv3 32))) ?x142)))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (=> $x391 (= ?x716 ?x439)))))))))))
 ))
 (let (($x737 (and $x340 $x654)))
 (let (($x664 (= $x737 true)))
 (let (($x600 (= $x664 true)))
 (let (($x429 (= $x600 true)))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x212 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x285))))
 (let ((?x569 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (=> $x415 (= ?x569 ?x375))))))))))
 ))
 (let (($x480 (and $x215 $x441)))
 (let (($x195 (= $x480 true)))
 (let (($x314 (= $x195 true)))
 (let (($x75 (= $x314 true)))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x286 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x286 input.dst.llvm-%m2)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x691))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv2 32))) ?x8)))
 (let ((?x188 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv3 32))) ?x228)))
 (let ((?x552 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (=> $x474 (= ?x552 ?x188)))))))))))
 ))
 (let (($x503 (and $x99 $x330)))
 (let (($x585 (= $x503 true)))
 (let (($x291 (= $x585 true)))
 (let (($x602 (= $x291 true)))
 (let ((?x601 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x346 (= (_ bv0 32) ?x601)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x548 (= (_ bv0 32) ?x154)))
 (let ((?x148 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x456 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x534 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x534)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x501 (and $x94 $x43)))
 (let (($x520 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x509 (and $x520 $x501)))
 (let (($x273 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x20 $x85)))
 (let (($x403 (not $x137)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x700 (and $x712 $x462)))
 (let (($x82 (and (not $x700) $x403)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x113 $x167)))
 (let (($x414 (not $x236)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (and $x165 $x570)))
 (let (($x645 (and (not $x316) $x414)))
 (let (($x713 (and (and (and (and (and (and $x645 $x82) $x170) $x273) $x509) $x456) $x548)))
 (let (($x540 (and $x713 $x346)))
 (let (($x370 (= $x540 true)))
 (let (($x112 (= $x370 true)))
 (let (($x157 (= $x112 true)))
 (let ((?x105 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x39 (= (_ bv0 2) ?x105)))
 (let (($x690 (= $x39 true)))
 (let (($x681 (= $x690 true)))
 (let (($x130 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x61 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x586 (and $x61 $x130)))
 (let (($x744 (= $x586 true)))
 (let (($x632 (= $x744 true)))
 (let (($x92 (= $x632 true)))
 (let (($x97 (= ?x250 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x524 (= $x97 true)))
 (let (($x192 (= $x524 true)))
 (let (($x719 (and $x192 $x92)))
 (let (($x688 (and $x719 $x681)))
 (let (($x576 (and $x688 $x157)))
 (let (($x464 (and $x576 $x602)))
 (let (($x152 (and $x464 $x75)))
 (let (($x617 (and $x152 $x429)))
 (let (($x74 (and $x617 $x405)))
 (let (($x176 (and $x74 $x204)))
 (let (($x56 (and $x176 $x241)))
 (let (($x478 (and $x56 $x618)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x569 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (=> $x391 (= ?x716 ?x569)))))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x226 (_ bv1 32))))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x295 (_ bv1 32))))
 (= $x391 $x415))))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x226 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x226 (_ bv0 32))))
 (let ((?x295 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x295 (_ bv0 32))))
 (= $x57 $x68))))))
 ))
 (let (($x484 (and $x327 $x676)))
 (let (($x371 (and $x484 $x352)))
 (let (($x543 (and $x371 $x354)))
 (let (($x126 (and $x543 $x478)))
 (let (($x634 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x552 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (=> $x474 (= ?x552 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x274 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x474 (bvuge ?x396 (_ bv1 32))))
 (= $x474 (bvuge ?x274 (_ bv1 32)))))))
 ))
 (let (($x14 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x274 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x396 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x396 (_ bv0 32))))
 (= $x103 (= ?x274 (_ bv0 32)))))))
 ))
 (let (($x300 (and $x14 $x451)))
 (let (($x545 (and $x300 $x336)))
 (let (($x380 (and $x545 $x634)))
 (let (($x595 (and $x380 $x126)))
 (let (($x757 (=> $x595 $x756)))
 (not $x757)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0642024c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0486462b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0642024f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0642024c)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!46))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdfb56947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0db347b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0000007) #x20
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!49 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!49 (k!48 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!51 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!51 (k!48 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!50 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!50 (k!47 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x779 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x494 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_2 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x766 (bvadd ?x446 ?x494)))
 (let ((?x770 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x766))))
 (let ((?x773 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv2 32))) ?x770)))
 (let ((?x776 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv3 32))) ?x773)))
 (let ((?x498 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (=> $x130 (= ?x498 ?x776))))))))))))
 ))
 (let (($x561 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (bvuge ?x541 (_ bv1 32))))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (= $x130 $x466))))))
 ))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x371 (_ bv0 32))))
 (=> $x716 $x714)))))
 ))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x541 (_ bv0 32))))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x371 (_ bv0 32))))
 (= $x716 $x69))))))
 ))
 (let (($x251 (and $x584 $x656)))
 (let (($x674 (and $x251 $x561)))
 (let (($x780 (and $x674 $x779)))
 (let (($x781 (= $x780 true)))
 (let (($x782 (= $x781 true)))
 (let ((?x35 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x621 (= (_ bv0 2) ?x35)))
 (let (($x326 (= $x621 true)))
 (let (($x442 (= $x326 true)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x358 (bvadd ?x446 input.dst.llvm-%m2)))
 (let ((?x694 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv1 32))) (select input.dst.llvm-mem ?x358))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv2 32))) ?x694))))
 (let ((?x498 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (=> $x130 (= ?x498 ?x450))))))))))
 ))
 (let (($x582 (and $x674 $x347)))
 (let (($x626 (= $x582 true)))
 (let (($x118 (= $x626 true)))
 (let (($x460 (= $x118 true)))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x98 (bvadd ?x446 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x319))))
 (let ((?x228 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (=> $x426 (= ?x228 ?x178))))))))))
 ))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (bvuge ?x541 (_ bv1 32))))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (= $x426 $x466))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x601 (_ bv0 32))))
 (=> $x346 $x714)))))
 ))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x541 (_ bv0 32))))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x601 (_ bv0 32))))
 (= $x346 $x69))))))
 ))
 (let (($x383 (and $x180 $x576)))
 (let (($x243 (and $x383 $x620)))
 (let (($x594 (and $x243 $x252)))
 (let (($x563 (= $x594 true)))
 (let (($x565 (= $x563 true)))
 (let (($x190 (= $x565 true)))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x98 (bvadd ?x446 input.dst.llvm-%m1)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x98))))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv2 32))) ?x191)))
 (let ((?x682 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv3 32))) ?x567)))
 (let ((?x8 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x154 (_ bv1 32))))
 (=> $x99 (= ?x8 ?x682)))))))))))
 ))
 (let (($x745 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (bvuge ?x541 (_ bv1 32))))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x154 (_ bv1 32))))
 (= $x99 $x466))))))
 ))
 (let (($x533 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (= ?x154 (_ bv0 32))))
 (=> $x548 $x714)))))
 ))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x541 (_ bv0 32))))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (= ?x154 (_ bv0 32))))
 (= $x548 $x69))))))
 ))
 (let (($x708 (and $x334 $x533)))
 (let (($x107 (and $x708 $x745)))
 (let (($x52 (and $x107 $x102)))
 (let (($x651 (= $x52 true)))
 (let (($x263 (= $x651 true)))
 (let (($x495 (= $x263 true)))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x98 (bvadd ?x446 input.dst.llvm-%m1)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x98))))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv2 32))) ?x191)))
 (let ((?x682 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv3 32))) ?x567)))
 (let ((?x228 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (=> $x426 (= ?x228 ?x682)))))))))))
 ))
 (let (($x589 (and $x243 $x260)))
 (let (($x476 (= $x589 true)))
 (let (($x50 (= $x476 true)))
 (let (($x266 (= $x50 true)))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x98 (bvadd ?x446 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x319))))
 (let ((?x8 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x154 (_ bv1 32))))
 (=> $x99 (= ?x8 ?x178))))))))))
 ))
 (let (($x420 (and $x107 $x529)))
 (let (($x41 (= $x420 true)))
 (let (($x173 (= $x41 true)))
 (let (($x497 (= $x173 true)))
 (let (($x721 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x358 (bvadd ?x446 input.dst.llvm-%m2)))
 (let ((?x428 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x358 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x358))))
 (let ((?x611 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x358 (_ bv2 32))) ?x428)))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x358 (_ bv3 32))) ?x611)))
 (let ((?x498 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (=> $x130 (= ?x498 ?x7)))))))))))
 ))
 (let (($x665 (and $x674 $x721)))
 (let (($x293 (= $x665 true)))
 (let (($x531 (= $x293 true)))
 (let (($x562 (= $x531 true)))
 (let (($x176 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x732 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x701 (and $x732 $x176)))
 (let (($x159 (= $x701 true)))
 (let (($x321 (= $x159 true)))
 (let (($x606 (= $x321 true)))
 (let ((?x664 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x600 (= (_ bv0 32) ?x664)))
 (let ((?x654 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x737 (= (_ bv0 32) ?x654)))
 (let ((?x647 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x647)))
 (let ((?x389 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x574 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x389)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x269 $x574)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x439 (and $x217 $x142)))
 (let (($x340 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x195 $x314)))
 (let (($x152 (not $x75)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x353 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x480 (and $x353 $x441)))
 (let (($x120 (and (not $x480) $x152)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (and $x168 $x218)))
 (let (($x725 (not $x285)))
 (let (($x483 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x530 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x530 $x483)))
 (let (($x628 (and (not $x200) $x725)))
 (let (($x44 (and (and (and (and (and (and $x628 $x120) $x297) $x340) $x439) $x255) $x737)))
 (let (($x505 (and $x44 $x600)))
 (let (($x88 (= $x505 true)))
 (let (($x405 (= $x88 true)))
 (let (($x74 (= $x405 true)))
 (let ((?x291 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x602 (bvneg ?x291)))
 (let (($x240 (= ?x602 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x248 (= $x240 true)))
 (let (($x408 (= $x248 true)))
 (let (($x367 (= ?x602 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x746 (= $x367 true)))
 (let (($x139 (= $x746 true)))
 (let (($x215 (and $x139 $x408)))
 (let (($x67 (and $x215 $x74)))
 (let (($x457 (and $x67 $x606)))
 (let (($x111 (and $x457 $x562)))
 (let (($x53 (and $x111 $x497)))
 (let (($x578 (and $x53 $x266)))
 (let (($x641 (and $x578 $x495)))
 (let (($x614 (and $x641 $x190)))
 (let (($x254 (and $x614 $x460)))
 (let (($x116 (and $x254 $x442)))
 (let (($x500 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x228 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (=> $x426 (= ?x228 ?x8)))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x154 (_ bv1 32))))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (= $x426 $x99))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (= ?x154 (_ bv0 32))))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x601 (_ bv0 32))))
 (= $x346 $x548))))))
 ))
 (let (($x658 (and $x370 $x576)))
 (let (($x691 (and $x658 $x286)))
 (let (($x330 (and $x691 $x500)))
 (let (($x444 (and $x330 $x116)))
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x498 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (=> $x130 (= ?x498 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x744 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x415 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (= $x130 (bvuge ?x415 (_ bv1 32)))))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x415 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x371 (_ bv0 32))))
 (= $x716 (= ?x415 (_ bv0 32)))))))
 ))
 (let (($x598 (and $x268 $x656)))
 (let (($x632 (and $x598 $x744)))
 (let (($x316 (and $x632 $x570)))
 (let (($x122 (and $x316 $x444)))
 (let (($x783 (=> $x122 $x782)))
 (let (($x784 (not $x783)))
 (let (($x299 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x649 (select solver-mem_2 memmask-bounded-var!)))
 (let (($x475 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x231 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x631 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x437 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x231)))
 (let (($x525 (or false (or false (and (and true (or $x119 $x437)) (or $x631 $x475))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x525) (= ?x649 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x649 (_ bv0 8)))))))))))
 ))
 (and (and true $x299) $x784)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x779 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x494 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_2 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x766 (bvadd ?x446 ?x494)))
 (let ((?x770 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x766))))
 (let ((?x773 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv2 32))) ?x770)))
 (let ((?x776 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv3 32))) ?x773)))
 (let ((?x498 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (=> $x130 (= ?x498 ?x776))))))))))))
 ))
 (let (($x561 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (bvuge ?x541 (_ bv1 32))))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (= $x130 $x466))))))
 ))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x371 (_ bv0 32))))
 (=> $x716 $x714)))))
 ))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x541 (_ bv0 32))))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x371 (_ bv0 32))))
 (= $x716 $x69))))))
 ))
 (let (($x251 (and $x584 $x656)))
 (let (($x674 (and $x251 $x561)))
 (let (($x780 (and $x674 $x779)))
 (let (($x781 (= $x780 true)))
 (let (($x782 (= $x781 true)))
 (let ((?x35 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x621 (= (_ bv0 2) ?x35)))
 (let (($x326 (= $x621 true)))
 (let (($x442 (= $x326 true)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x358 (bvadd ?x446 input.dst.llvm-%m2)))
 (let ((?x694 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv1 32))) (select input.dst.llvm-mem ?x358))))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x358 (_ bv2 32))) ?x694))))
 (let ((?x498 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (=> $x130 (= ?x498 ?x450))))))))))
 ))
 (let (($x582 (and $x674 $x347)))
 (let (($x626 (= $x582 true)))
 (let (($x118 (= $x626 true)))
 (let (($x460 (= $x118 true)))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x98 (bvadd ?x446 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x319))))
 (let ((?x228 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (=> $x426 (= ?x228 ?x178))))))))))
 ))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (bvuge ?x541 (_ bv1 32))))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (= $x426 $x466))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x601 (_ bv0 32))))
 (=> $x346 $x714)))))
 ))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x541 (_ bv0 32))))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x601 (_ bv0 32))))
 (= $x346 $x69))))))
 ))
 (let (($x383 (and $x180 $x576)))
 (let (($x243 (and $x383 $x620)))
 (let (($x594 (and $x243 $x252)))
 (let (($x563 (= $x594 true)))
 (let (($x565 (= $x563 true)))
 (let (($x190 (= $x565 true)))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x98 (bvadd ?x446 input.dst.llvm-%m1)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x98))))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv2 32))) ?x191)))
 (let ((?x682 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv3 32))) ?x567)))
 (let ((?x8 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x154 (_ bv1 32))))
 (=> $x99 (= ?x8 ?x682)))))))))))
 ))
 (let (($x745 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (bvuge ?x541 (_ bv1 32))))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x154 (_ bv1 32))))
 (= $x99 $x466))))))
 ))
 (let (($x533 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (= ?x154 (_ bv0 32))))
 (=> $x548 $x714)))))
 ))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x541 (_ bv0 32))))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (= ?x154 (_ bv0 32))))
 (= $x548 $x69))))))
 ))
 (let (($x708 (and $x334 $x533)))
 (let (($x107 (and $x708 $x745)))
 (let (($x52 (and $x107 $x102)))
 (let (($x651 (= $x52 true)))
 (let (($x263 (= $x651 true)))
 (let (($x495 (= $x263 true)))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x98 (bvadd ?x446 input.dst.llvm-%m1)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x98))))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv2 32))) ?x191)))
 (let ((?x682 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x98 (_ bv3 32))) ?x567)))
 (let ((?x228 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (=> $x426 (= ?x228 ?x682)))))))))))
 ))
 (let (($x589 (and $x243 $x260)))
 (let (($x476 (= $x589 true)))
 (let (($x50 (= $x476 true)))
 (let (($x266 (= $x50 true)))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x98 (bvadd ?x446 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x319))))
 (let ((?x8 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x154 (_ bv1 32))))
 (=> $x99 (= ?x8 ?x178))))))))))
 ))
 (let (($x420 (and $x107 $x529)))
 (let (($x41 (= $x420 true)))
 (let (($x173 (= $x41 true)))
 (let (($x497 (= $x173 true)))
 (let (($x721 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x446 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x358 (bvadd ?x446 input.dst.llvm-%m2)))
 (let ((?x428 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x358 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x358))))
 (let ((?x611 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x358 (_ bv2 32))) ?x428)))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x358 (_ bv3 32))) ?x611)))
 (let ((?x498 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (=> $x130 (= ?x498 ?x7)))))))))))
 ))
 (let (($x665 (and $x674 $x721)))
 (let (($x293 (= $x665 true)))
 (let (($x531 (= $x293 true)))
 (let (($x562 (= $x531 true)))
 (let (($x176 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x732 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x701 (and $x732 $x176)))
 (let (($x159 (= $x701 true)))
 (let (($x321 (= $x159 true)))
 (let (($x606 (= $x321 true)))
 (let ((?x664 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x600 (= (_ bv0 32) ?x664)))
 (let ((?x654 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x737 (= (_ bv0 32) ?x654)))
 (let ((?x647 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x647)))
 (let ((?x389 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x574 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x389)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x269 $x574)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x439 (and $x217 $x142)))
 (let (($x340 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x195 $x314)))
 (let (($x152 (not $x75)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x353 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x480 (and $x353 $x441)))
 (let (($x120 (and (not $x480) $x152)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (and $x168 $x218)))
 (let (($x725 (not $x285)))
 (let (($x483 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x530 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x530 $x483)))
 (let (($x628 (and (not $x200) $x725)))
 (let (($x44 (and (and (and (and (and (and $x628 $x120) $x297) $x340) $x439) $x255) $x737)))
 (let (($x505 (and $x44 $x600)))
 (let (($x88 (= $x505 true)))
 (let (($x405 (= $x88 true)))
 (let (($x74 (= $x405 true)))
 (let ((?x291 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x602 (bvneg ?x291)))
 (let (($x240 (= ?x602 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x248 (= $x240 true)))
 (let (($x408 (= $x248 true)))
 (let (($x367 (= ?x602 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x746 (= $x367 true)))
 (let (($x139 (= $x746 true)))
 (let (($x215 (and $x139 $x408)))
 (let (($x67 (and $x215 $x74)))
 (let (($x457 (and $x67 $x606)))
 (let (($x111 (and $x457 $x562)))
 (let (($x53 (and $x111 $x497)))
 (let (($x578 (and $x53 $x266)))
 (let (($x641 (and $x578 $x495)))
 (let (($x614 (and $x641 $x190)))
 (let (($x254 (and $x614 $x460)))
 (let (($x116 (and $x254 $x442)))
 (let (($x500 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x228 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (=> $x426 (= ?x228 ?x8)))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x154 (_ bv1 32))))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x601 (_ bv1 32))))
 (= $x426 $x99))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x154 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (= ?x154 (_ bv0 32))))
 (let ((?x601 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x601 (_ bv0 32))))
 (= $x346 $x548))))))
 ))
 (let (($x658 (and $x370 $x576)))
 (let (($x691 (and $x658 $x286)))
 (let (($x330 (and $x691 $x500)))
 (let (($x444 (and $x330 $x116)))
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x498 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (=> $x130 (= ?x498 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x744 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x415 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x371 (_ bv1 32))))
 (= $x130 (bvuge ?x415 (_ bv1 32)))))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x415 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x371 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x371 (_ bv0 32))))
 (= $x716 (= ?x415 (_ bv0 32)))))))
 ))
 (let (($x598 (and $x268 $x656)))
 (let (($x632 (and $x598 $x744)))
 (let (($x316 (and $x632 $x570)))
 (let (($x122 (and $x316 $x444)))
 (let (($x783 (=> $x122 $x782)))
 (let (($x784 (not $x783)))
 (let (($x299 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x649 (select solver-mem_2 memmask-bounded-var!)))
 (let (($x475 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x231 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x631 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x437 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x231)))
 (let (($x525 (or false (or false (and (and true (or $x119 $x437)) (or $x631 $x475))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x525) (= ?x649 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x649 (_ bv0 8)))))))))))
 ))
 (and (and true $x299) $x784)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!84))
  (define-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!82))
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!82))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x29880084)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x98108408)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!83))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9810840b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x29880087)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x98108408)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x29880084)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!90 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000002)))
  (define-fun k!86 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000002 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000002)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!90 (k!86 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!85 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x98108409 x!0)
                    (ite (bvule #x9810840b x!0)
                         (ite (bvule #x9810840c x!0) #x9810840c #x9810840b)
                         #x98108409)
                    #x98108408)))
    (let ((a!2 (ite (bvule #x29880087 x!0)
                    (ite (bvule #x29880088 x!0)
                         (ite (bvule #x98108408 x!0) a!1 #x29880088)
                         #x29880087)
                    #x29880085)))
    (let ((a!3 (ite (bvule #x23004c04 x!0)
                    (ite (bvule #x29880084 x!0)
                         (ite (bvule #x29880085 x!0) a!2 #x29880084)
                         #x23004c04)
                    #x23004c03)))
    (let ((a!4 (ite (bvule #x23004c01 x!0)
                    (ite (bvule #x23004c02 x!0)
                         (ite (bvule #x23004c03 x!0) a!3 #x23004c02)
                         #x23004c01)
                    #x18800180)))
    (let ((a!5 (ite (bvule #x0000000e x!0)
                    (ite (bvule #x0000000f x!0)
                         (ite (bvule #x18800180 x!0) a!4 #x0000000f)
                         #x0000000e)
                    #x0000000d)))
    (let ((a!6 (ite (bvule #x00000007 x!0)
                    (ite (bvule #x0000000c x!0)
                         (ite (bvule #x0000000d x!0) a!5 #x0000000c)
                         #x00000007)
                    #x00000006)))
    (let ((a!7 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000005 x!0)
                         (ite (bvule #x00000006 x!0) a!6 #x00000005)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!7 #x00000002)
                #x00000001)
           #x00000000)))))))))
  (define-fun input.spec-%var-m1-1.0.1!88 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000c) #x04
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!91 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!82!89 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x29880084) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x98108409) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x23004c04) #x00
    (ite (= x!0 #x29880085) #x00
    (ite (= x!0 #x23004c03) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x23004c01) #x00
    (ite (= x!0 #x23004c02) #x20
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x98108408) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x9810840b) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x18800180) #x02
    (ite (= x!0 #x0000000c) #x04
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x29880087) #x00
    (ite (= x!0 #x00000002) #x00
      #x03))))))))))))))))))))))))
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!82!89 (k!85 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000002) #x00000004
      (let ((a!1 (concat (k!84 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!82 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!82))
              (= x!3 (_ as-array k!83))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000004))
      #x23004c01
      #x29880084))
  (define-fun k!87 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!88 (k!87 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!84 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!84 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!82 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!82 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!91 (k!87 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!82 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!82 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000002) #x00000004
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x443 (= false true)))
 (let (($x127 (= $x443 true)))
 (let ((?x412 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x564 (= (_ bv0 32) ?x412)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x208 (= (_ bv0 32) ?x40)))
 (let ((?x374 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x560 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x374)))
 (let ((?x30 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x705 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x30)))
 (let (($x512 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x644 (and $x512 $x705)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x283 $x644)))
 (let (($x153 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x680 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x527 (and $x427 $x146)))
 (let (($x129 (not $x527)))
 (let (($x580 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x650 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x669 (and $x650 $x580)))
 (let (($x13 (and (not $x669) $x129)))
 (let (($x670 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x610 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x733 (and $x610 $x670)))
 (let (($x198 (not $x733)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x597 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x597 $x125)))
 (let (($x308 (and (not $x233) $x198)))
 (let (($x372 (and (and (and (and (and (and $x308 $x13) $x680) $x153) $x284) $x560) $x208)))
 (let (($x454 (and $x372 $x564)))
 (let (($x571 (= $x454 true)))
 (let (($x196 (= $x571 true)))
 (let (($x329 (= $x196 true)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x122 (bvadd ?x444 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x32))))
 (let ((?x500 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (=> $x370 (= ?x500 ?x468))))))))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x263 (_ bv1 32))))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (= $x370 $x365))))))
 ))
 (let (($x632 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x313 (= false false)))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (=> $x656 $x313)))))
 ))
 (let (($x686 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (= ?x263 (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (= $x656 $x495))))))
 ))
 (let (($x221 (and $x686 $x632)))
 (let (($x225 (and $x221 $x694)))
 (let (($x504 (and $x225 $x281)))
 (let (($x406 (= $x504 true)))
 (let (($x280 (= $x406 true)))
 (let (($x64 (= $x280 true)))
 (let ((?x520 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x94 (= (_ bv0 2) ?x520)))
 (let (($x465 (= $x94 true)))
 (let (($x509 (= $x465 true)))
 (let (($x259 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x39 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x117 (and $x39 $x259)))
 (let (($x38 (= $x117 true)))
 (let (($x170 (= $x38 true)))
 (let (($x331 (= $x170 true)))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x702 (bvadd ?x444 input.dst.llvm-%m1)))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv1 32))) (select input.dst.llvm-mem ?x702))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv2 32))) ?x492))))
 (let ((?x322 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (=> $x12 (= ?x322 ?x83))))))))))
 ))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x263 (_ bv1 32))))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (= $x12 $x365))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x313 (= false false)))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x389 (= ?x70 (_ bv0 32))))
 (=> $x389 $x313)))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (= ?x263 (_ bv0 32))))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x389 (= ?x70 (_ bv0 32))))
 (= $x389 $x495))))))
 ))
 (let (($x396 (and $x185 $x647)))
 (let (($x174 (and $x396 $x407)))
 (let (($x89 (and $x174 $x388)))
 (let (($x418 (= $x89 true)))
 (let (($x532 (= $x418 true)))
 (let (($x45 (= $x532 true)))
 (let (($x511 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x702 (bvadd ?x444 input.dst.llvm-%m1)))
 (let ((?x683 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x702))))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv2 32))) ?x683)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv3 32))) ?x184)))
 (let ((?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x399 (_ bv1 32))))
 (=> $x33 (= ?x59 ?x226)))))))))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x263 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x399 (_ bv1 32))))
 (= $x33 $x365))))))
 ))
 (let (($x704 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x313 (= false false)))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x399 (_ bv0 32))))
 (=> $x217 $x313)))))
 ))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (= ?x263 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x399 (_ bv0 32))))
 (= $x217 $x495))))))
 ))
 (let (($x624 (and $x537 $x704)))
 (let (($x608 (and $x624 $x42)))
 (let (($x341 (and $x608 $x511)))
 (let (($x328 (= $x341 true)))
 (let (($x92 (= $x328 true)))
 (let (($x719 (= $x92 true)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x702 (bvadd ?x444 input.dst.llvm-%m1)))
 (let ((?x683 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x702))))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv2 32))) ?x683)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv3 32))) ?x184)))
 (let ((?x322 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (=> $x12 (= ?x322 ?x226)))))))))))
 ))
 (let (($x193 (and $x174 $x354)))
 (let (($x250 (= $x193 true)))
 (let (($x499 (= $x250 true)))
 (let (($x97 (= $x499 true)))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x702 (bvadd ?x444 input.dst.llvm-%m1)))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv1 32))) (select input.dst.llvm-mem ?x702))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv2 32))) ?x492))))
 (let ((?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x399 (_ bv1 32))))
 (=> $x33 (= ?x59 ?x83))))))))))
 ))
 (let (($x747 (and $x608 $x287)))
 (let (($x21 (= $x747 true)))
 (let (($x528 (= $x21 true)))
 (let (($x526 (= $x528 true)))
 (let ((?x466 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x696 (bvneg ?x466)))
 (let (($x780 (= ?x696 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x781 (= $x780 true)))
 (let (($x782 (= $x781 true)))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x122 (bvadd ?x444 input.dst.llvm-%m2)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x122))))
 (let ((?x774 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv2 32))) ?x377)))
 (let ((?x772 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv3 32))) ?x774)))
 (let ((?x500 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (=> $x370 (= ?x500 ?x772)))))))))))
 ))
 (let (($x770 (and $x225 $x767)))
 (let (($x773 (= $x770 true)))
 (let (($x776 (= $x773 true)))
 (let (($x777 (= $x776 true)))
 (let (($x674 (= ?x696 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x241 (= $x674 true)))
 (let (($x446 (= $x241 true)))
 (let (($x778 (and $x446 $x777)))
 (let (($x783 (and $x778 $x782)))
 (let (($x279 (and $x783 $x526)))
 (let (($x425 (and $x279 $x97)))
 (let (($x416 (and $x425 $x719)))
 (let (($x461 (and $x416 $x45)))
 (let (($x273 (and $x461 $x331)))
 (let (($x717 (and $x273 $x509)))
 (let (($x150 (and $x717 $x64)))
 (let (($x364 (and $x150 $x329)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x322 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (=> $x12 (= ?x322 ?x59)))))))
 ))
 (let (($x732 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x399 (_ bv1 32))))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (= $x12 $x33))))))
 ))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x399 (_ bv0 32))))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x389 (= ?x70 (_ bv0 32))))
 (= $x389 $x217))))))
 ))
 (let (($x255 (and $x142 $x647)))
 (let (($x366 (and $x255 $x732)))
 (let (($x398 (and $x366 $x69)))
 (let (($x523 (and $x398 $x364)))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x500 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (=> $x370 (= ?x500 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x569 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (= $x370 (bvuge ?x569 (_ bv1 32)))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x569 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (= $x656 (= ?x569 (_ bv0 32)))))))
 ))
 (let (($x498 (and $x130 $x632)))
 (let (($x658 (and $x498 $x576)))
 (let (($x291 (and $x658 $x585)))
 (let (($x135 (and $x291 $x523)))
 (let (($x205 (=> $x135 $x127)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x443 (= false true)))
 (let (($x127 (= $x443 true)))
 (let ((?x412 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x564 (= (_ bv0 32) ?x412)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x208 (= (_ bv0 32) ?x40)))
 (let ((?x374 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x560 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x374)))
 (let ((?x30 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x705 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x30)))
 (let (($x512 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x644 (and $x512 $x705)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x283 $x644)))
 (let (($x153 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x680 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x527 (and $x427 $x146)))
 (let (($x129 (not $x527)))
 (let (($x580 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x650 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x669 (and $x650 $x580)))
 (let (($x13 (and (not $x669) $x129)))
 (let (($x670 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x610 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x733 (and $x610 $x670)))
 (let (($x198 (not $x733)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x597 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x597 $x125)))
 (let (($x308 (and (not $x233) $x198)))
 (let (($x372 (and (and (and (and (and (and $x308 $x13) $x680) $x153) $x284) $x560) $x208)))
 (let (($x454 (and $x372 $x564)))
 (let (($x571 (= $x454 true)))
 (let (($x196 (= $x571 true)))
 (let (($x329 (= $x196 true)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x122 (bvadd ?x444 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem ?x122))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x122 (_ bv2 32))) ?x32))))
 (let ((?x500 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (=> $x370 (= ?x500 ?x468))))))))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x263 (_ bv1 32))))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (= $x370 $x365))))))
 ))
 (let (($x632 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x313 (= false false)))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (=> $x656 $x313)))))
 ))
 (let (($x686 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (= ?x263 (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (= $x656 $x495))))))
 ))
 (let (($x221 (and $x686 $x632)))
 (let (($x225 (and $x221 $x694)))
 (let (($x504 (and $x225 $x281)))
 (let (($x406 (= $x504 true)))
 (let (($x280 (= $x406 true)))
 (let (($x64 (= $x280 true)))
 (let ((?x520 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x94 (= (_ bv0 2) ?x520)))
 (let (($x465 (= $x94 true)))
 (let (($x509 (= $x465 true)))
 (let (($x259 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x39 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x117 (and $x39 $x259)))
 (let (($x38 (= $x117 true)))
 (let (($x170 (= $x38 true)))
 (let (($x331 (= $x170 true)))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x702 (bvadd ?x444 input.dst.llvm-%m1)))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv1 32))) (select input.dst.llvm-mem ?x702))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv2 32))) ?x492))))
 (let ((?x322 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (=> $x12 (= ?x322 ?x83))))))))))
 ))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x263 (_ bv1 32))))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (= $x12 $x365))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x313 (= false false)))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x389 (= ?x70 (_ bv0 32))))
 (=> $x389 $x313)))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (= ?x263 (_ bv0 32))))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x389 (= ?x70 (_ bv0 32))))
 (= $x389 $x495))))))
 ))
 (let (($x396 (and $x185 $x647)))
 (let (($x174 (and $x396 $x407)))
 (let (($x89 (and $x174 $x388)))
 (let (($x418 (= $x89 true)))
 (let (($x532 (= $x418 true)))
 (let (($x45 (= $x532 true)))
 (let (($x511 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x702 (bvadd ?x444 input.dst.llvm-%m1)))
 (let ((?x683 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x702))))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv2 32))) ?x683)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv3 32))) ?x184)))
 (let ((?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x399 (_ bv1 32))))
 (=> $x33 (= ?x59 ?x226)))))))))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x263 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x399 (_ bv1 32))))
 (= $x33 $x365))))))
 ))
 (let (($x704 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x313 (= false false)))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x399 (_ bv0 32))))
 (=> $x217 $x313)))))
 ))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (= ?x263 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x399 (_ bv0 32))))
 (= $x217 $x495))))))
 ))
 (let (($x624 (and $x537 $x704)))
 (let (($x608 (and $x624 $x42)))
 (let (($x341 (and $x608 $x511)))
 (let (($x328 (= $x341 true)))
 (let (($x92 (= $x328 true)))
 (let (($x719 (= $x92 true)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x702 (bvadd ?x444 input.dst.llvm-%m1)))
 (let ((?x683 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x702))))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv2 32))) ?x683)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x702 (_ bv3 32))) ?x184)))
 (let ((?x322 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (=> $x12 (= ?x322 ?x226)))))))))))
 ))
 (let (($x193 (and $x174 $x354)))
 (let (($x250 (= $x193 true)))
 (let (($x499 (= $x250 true)))
 (let (($x97 (= $x499 true)))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x702 (bvadd ?x444 input.dst.llvm-%m1)))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv1 32))) (select input.dst.llvm-mem ?x702))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x702 (_ bv2 32))) ?x492))))
 (let ((?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x399 (_ bv1 32))))
 (=> $x33 (= ?x59 ?x83))))))))))
 ))
 (let (($x747 (and $x608 $x287)))
 (let (($x21 (= $x747 true)))
 (let (($x528 (= $x21 true)))
 (let (($x526 (= $x528 true)))
 (let ((?x466 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x696 (bvneg ?x466)))
 (let (($x780 (= ?x696 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x781 (= $x780 true)))
 (let (($x782 (= $x781 true)))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x122 (bvadd ?x444 input.dst.llvm-%m2)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x122))))
 (let ((?x774 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv2 32))) ?x377)))
 (let ((?x772 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x122 (_ bv3 32))) ?x774)))
 (let ((?x500 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (=> $x370 (= ?x500 ?x772)))))))))))
 ))
 (let (($x770 (and $x225 $x767)))
 (let (($x773 (= $x770 true)))
 (let (($x776 (= $x773 true)))
 (let (($x777 (= $x776 true)))
 (let (($x674 (= ?x696 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x241 (= $x674 true)))
 (let (($x446 (= $x241 true)))
 (let (($x778 (and $x446 $x777)))
 (let (($x783 (and $x778 $x782)))
 (let (($x279 (and $x783 $x526)))
 (let (($x425 (and $x279 $x97)))
 (let (($x416 (and $x425 $x719)))
 (let (($x461 (and $x416 $x45)))
 (let (($x273 (and $x461 $x331)))
 (let (($x717 (and $x273 $x509)))
 (let (($x150 (and $x717 $x64)))
 (let (($x364 (and $x150 $x329)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x322 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (=> $x12 (= ?x322 ?x59)))))))
 ))
 (let (($x732 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x399 (_ bv1 32))))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x70 (_ bv1 32))))
 (= $x12 $x33))))))
 ))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (= ?x399 (_ bv0 32))))
 (let ((?x70 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x389 (= ?x70 (_ bv0 32))))
 (= $x389 $x217))))))
 ))
 (let (($x255 (and $x142 $x647)))
 (let (($x366 (and $x255 $x732)))
 (let (($x398 (and $x366 $x69)))
 (let (($x523 (and $x398 $x364)))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x500 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (=> $x370 (= ?x500 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x569 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x543 (_ bv1 32))))
 (= $x370 (bvuge ?x569 (_ bv1 32)))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x569 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x543 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x656 (= ?x543 (_ bv0 32))))
 (= $x656 (= ?x569 (_ bv0 32)))))))
 ))
 (let (($x498 (and $x130 $x632)))
 (let (($x658 (and $x498 $x576)))
 (let (($x291 (and $x658 $x585)))
 (let (($x135 (and $x291 $x523)))
 (let (($x205 (=> $x135 $x127)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1e574863)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x44d84147)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44d84144)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x202 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_3 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x486 (bvadd ?x240 ?x202)))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd ?x486 (_ bv1 32))) (select input.dst.llvm-mem ?x486))))
 (let ((?x762 (concat (select input.dst.llvm-mem (bvadd ?x486 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x486 (_ bv2 32))) ?x510))))
 (let ((?x490 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (=> $x612 (= ?x490 ?x762)))))))))))
 ))
 (let (($x618 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x327 (_ bv1 32))))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (= $x612 $x482))))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x541 (= false false)))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x85 (_ bv0 32))))
 (=> $x698 $x541)))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x327 (_ bv0 32))))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x85 (_ bv0 32))))
 (= $x698 $x633))))))
 ))
 (let (($x199 (and $x373 $x631)))
 (let (($x19 (and $x199 $x618)))
 (let (($x409 (and $x19 $x350)))
 (let (($x149 (= $x409 true)))
 (let (($x390 (= $x149 true)))
 (let ((?x555 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x577 (= (_ bv0 2) ?x555)))
 (let (($x141 (= $x577 true)))
 (let (($x642 (= $x141 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x408 (bvadd ?x240 input.dst.llvm-%m2)))
 (let ((?x703 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem ?x408))))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv2 32))) ?x703))))
 (let ((?x775 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (=> $x641 (= ?x775 ?x579))))))))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x327 (_ bv1 32))))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (= $x641 $x482))))))
 ))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x541 (= false false)))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x366 (_ bv0 32))))
 (=> $x322 $x541)))))
 ))
 (let (($x137 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x327 (_ bv0 32))))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x366 (_ bv0 32))))
 (= $x322 $x633))))))
 ))
 (let (($x739 (and $x137 $x584)))
 (let (($x336 (and $x739 $x309)))
 (let (($x245 (and $x336 $x474)))
 (let (($x302 (= $x245 true)))
 (let (($x516 (= $x302 true)))
 (let (($x477 (= $x516 true)))
 (let (($x575 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x559))))
 (let ((?x402 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (=> $x267 (= ?x402 ?x750))))))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x327 (_ bv1 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (= $x267 $x482))))))
 ))
 (let (($x747 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x541 (= false false)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x492 (_ bv0 32))))
 (=> $x128 $x541)))))
 ))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x327 (_ bv0 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x492 (_ bv0 32))))
 (= $x128 $x633))))))
 ))
 (let (($x391 (and $x716 $x747)))
 (let (($x8 (and $x391 $x228)))
 (let (($x384 (and $x8 $x575)))
 (let (($x112 (= $x384 true)))
 (let (($x458 (= $x112 true)))
 (let (($x324 (= $x458 true)))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x299))))
 (let ((?x522 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv2 32))) ?x96)))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv3 32))) ?x522)))
 (let ((?x490 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (=> $x612 (= ?x490 ?x172)))))))))))
 ))
 (let (($x501 (and $x19 $x534)))
 (let (($x736 (= $x501 true)))
 (let (($x304 (= $x736 true)))
 (let (($x657 (= $x304 true)))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x299))))
 (let ((?x522 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv2 32))) ?x96)))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv3 32))) ?x522)))
 (let ((?x402 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (=> $x267 (= ?x402 ?x172)))))))))))
 ))
 (let (($x351 (and $x8 $x506)))
 (let (($x616 (= $x351 true)))
 (let (($x86 (= $x616 true)))
 (let (($x342 (= $x86 true)))
 (let (($x756 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x559))))
 (let ((?x490 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (=> $x612 (= ?x490 ?x750))))))))))
 ))
 (let (($x542 (and $x19 $x756)))
 (let (($x145 (= $x542 true)))
 (let (($x426 (= $x145 true)))
 (let (($x99 (= $x426 true)))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x408 (bvadd ?x240 input.dst.llvm-%m2)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x408))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x408 (_ bv2 32))) ?x200)))
 (let ((?x636 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x408 (_ bv3 32))) ?x229)))
 (let ((?x775 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (=> $x641 (= ?x775 ?x636)))))))))))
 ))
 (let (($x166 (and $x336 $x114)))
 (let (($x604 (= $x166 true)))
 (let (($x110 (= $x604 true)))
 (let (($x104 (= $x110 true)))
 (let (($x213 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x605 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x283 (and $x605 $x213)))
 (let (($x512 (= $x283 true)))
 (let (($x30 (= $x512 true)))
 (let (($x705 (= $x30 true)))
 (let ((?x670 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x733 (= (_ bv0 32) ?x670)))
 (let ((?x554 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x610 (= (_ bv0 32) ?x554)))
 (let ((?x233 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x556 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x233)))
 (let ((?x625 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x597 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x625)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x743 (and $x150 $x597)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x64 $x743)))
 (let (($x280 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x504 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x386 $x32)))
 (let (($x468 (not $x209)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x487 (and $x160 $x227)))
 (let (($x513 (and (not $x487) $x468)))
 (let (($x520 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x182 $x520)))
 (let (($x465 (not $x94)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (and $x117 $x170)))
 (let (($x717 (and (not $x331) $x465)))
 (let (($x158 (and (and (and (and (and (and $x717 $x513) $x504) $x280) $x125) $x556) $x610)))
 (let (($x427 (and $x158 $x733)))
 (let (($x146 (= $x427 true)))
 (let (($x527 (= $x146 true)))
 (let (($x129 (= $x527 true)))
 (let ((?x147 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x162 (bvneg ?x147)))
 (let (($x461 (= ?x162 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x635 (= $x461 true)))
 (let (($x488 (= $x635 true)))
 (let (($x89 (= ?x162 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x418 (= $x89 true)))
 (let (($x532 (= $x418 true)))
 (let (($x39 (and $x532 $x488)))
 (let (($x13 (and $x39 $x129)))
 (let (($x644 (and $x13 $x705)))
 (let (($x417 (and $x644 $x104)))
 (let (($x757 (and $x417 $x99)))
 (let (($x156 (and $x757 $x342)))
 (let (($x16 (and $x156 $x657)))
 (let (($x497 (and $x16 $x324)))
 (let (($x47 (and $x497 $x477)))
 (let (($x10 (and $x47 $x642)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x490 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x402 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (=> $x267 (= ?x402 ?x490)))))))
 ))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (= $x267 $x612))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x85 (_ bv0 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x492 (_ bv0 32))))
 (= $x128 $x698))))))
 ))
 (let (($x21 (and $x60 $x747)))
 (let (($x226 (and $x21 $x184)))
 (let (($x92 (and $x226 $x328)))
 (let (($x305 (and $x92 $x10)))
 (let (($x494 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x775 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (=> $x641 (= ?x775 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (= $x641 (bvuge ?x33 (_ bv1 32)))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x366 (_ bv0 32))))
 (= $x322 (= ?x33 (_ bv0 32)))))))
 ))
 (let (($x251 (and $x238 $x584)))
 (let (($x365 (and $x251 $x221)))
 (let (($x766 (and $x365 $x494)))
 (let (($x73 (and $x766 $x305)))
 (let (($x760 (=> $x73 $x390)))
 (let (($x763 (not $x760)))
 (let (($x163 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x164 (select solver-mem_3 memmask-bounded-var!)))
 (let (($x382 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x685 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x730 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x738 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x175 (or false (or false (and (and true (or $x738 $x730)) (or $x685 $x382))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x175) (= ?x164 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x164 (_ bv0 8)))))))))))
 ))
 (and (and true $x163) $x763)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x202 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_3 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x486 (bvadd ?x240 ?x202)))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd ?x486 (_ bv1 32))) (select input.dst.llvm-mem ?x486))))
 (let ((?x762 (concat (select input.dst.llvm-mem (bvadd ?x486 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x486 (_ bv2 32))) ?x510))))
 (let ((?x490 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (=> $x612 (= ?x490 ?x762)))))))))))
 ))
 (let (($x618 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x327 (_ bv1 32))))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (= $x612 $x482))))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x541 (= false false)))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x85 (_ bv0 32))))
 (=> $x698 $x541)))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x327 (_ bv0 32))))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x85 (_ bv0 32))))
 (= $x698 $x633))))))
 ))
 (let (($x199 (and $x373 $x631)))
 (let (($x19 (and $x199 $x618)))
 (let (($x409 (and $x19 $x350)))
 (let (($x149 (= $x409 true)))
 (let (($x390 (= $x149 true)))
 (let ((?x555 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x577 (= (_ bv0 2) ?x555)))
 (let (($x141 (= $x577 true)))
 (let (($x642 (= $x141 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x408 (bvadd ?x240 input.dst.llvm-%m2)))
 (let ((?x703 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem ?x408))))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x408 (_ bv2 32))) ?x703))))
 (let ((?x775 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (=> $x641 (= ?x775 ?x579))))))))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x327 (_ bv1 32))))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (= $x641 $x482))))))
 ))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x541 (= false false)))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x366 (_ bv0 32))))
 (=> $x322 $x541)))))
 ))
 (let (($x137 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x327 (_ bv0 32))))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x366 (_ bv0 32))))
 (= $x322 $x633))))))
 ))
 (let (($x739 (and $x137 $x584)))
 (let (($x336 (and $x739 $x309)))
 (let (($x245 (and $x336 $x474)))
 (let (($x302 (= $x245 true)))
 (let (($x516 (= $x302 true)))
 (let (($x477 (= $x516 true)))
 (let (($x575 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x559))))
 (let ((?x402 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (=> $x267 (= ?x402 ?x750))))))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x327 (_ bv1 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (= $x267 $x482))))))
 ))
 (let (($x747 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x541 (= false false)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x492 (_ bv0 32))))
 (=> $x128 $x541)))))
 ))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x327 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x633 (= ?x327 (_ bv0 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x492 (_ bv0 32))))
 (= $x128 $x633))))))
 ))
 (let (($x391 (and $x716 $x747)))
 (let (($x8 (and $x391 $x228)))
 (let (($x384 (and $x8 $x575)))
 (let (($x112 (= $x384 true)))
 (let (($x458 (= $x112 true)))
 (let (($x324 (= $x458 true)))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x299))))
 (let ((?x522 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv2 32))) ?x96)))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv3 32))) ?x522)))
 (let ((?x490 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (=> $x612 (= ?x490 ?x172)))))))))))
 ))
 (let (($x501 (and $x19 $x534)))
 (let (($x736 (= $x501 true)))
 (let (($x304 (= $x736 true)))
 (let (($x657 (= $x304 true)))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x299))))
 (let ((?x522 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv2 32))) ?x96)))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x299 (_ bv3 32))) ?x522)))
 (let ((?x402 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (=> $x267 (= ?x402 ?x172)))))))))))
 ))
 (let (($x351 (and $x8 $x506)))
 (let (($x616 (= $x351 true)))
 (let (($x86 (= $x616 true)))
 (let (($x342 (= $x86 true)))
 (let (($x756 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x299 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x559))))
 (let ((?x490 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (=> $x612 (= ?x490 ?x750))))))))))
 ))
 (let (($x542 (and $x19 $x756)))
 (let (($x145 (= $x542 true)))
 (let (($x426 (= $x145 true)))
 (let (($x99 (= $x426 true)))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x408 (bvadd ?x240 input.dst.llvm-%m2)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x408 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x408))))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x408 (_ bv2 32))) ?x200)))
 (let ((?x636 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x408 (_ bv3 32))) ?x229)))
 (let ((?x775 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (=> $x641 (= ?x775 ?x636)))))))))))
 ))
 (let (($x166 (and $x336 $x114)))
 (let (($x604 (= $x166 true)))
 (let (($x110 (= $x604 true)))
 (let (($x104 (= $x110 true)))
 (let (($x213 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x605 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x283 (and $x605 $x213)))
 (let (($x512 (= $x283 true)))
 (let (($x30 (= $x512 true)))
 (let (($x705 (= $x30 true)))
 (let ((?x670 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x733 (= (_ bv0 32) ?x670)))
 (let ((?x554 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x610 (= (_ bv0 32) ?x554)))
 (let ((?x233 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x556 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x233)))
 (let ((?x625 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x597 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x625)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x743 (and $x150 $x597)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x64 $x743)))
 (let (($x280 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x504 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x386 $x32)))
 (let (($x468 (not $x209)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x487 (and $x160 $x227)))
 (let (($x513 (and (not $x487) $x468)))
 (let (($x520 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x182 $x520)))
 (let (($x465 (not $x94)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (and $x117 $x170)))
 (let (($x717 (and (not $x331) $x465)))
 (let (($x158 (and (and (and (and (and (and $x717 $x513) $x504) $x280) $x125) $x556) $x610)))
 (let (($x427 (and $x158 $x733)))
 (let (($x146 (= $x427 true)))
 (let (($x527 (= $x146 true)))
 (let (($x129 (= $x527 true)))
 (let ((?x147 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x162 (bvneg ?x147)))
 (let (($x461 (= ?x162 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x635 (= $x461 true)))
 (let (($x488 (= $x635 true)))
 (let (($x89 (= ?x162 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x418 (= $x89 true)))
 (let (($x532 (= $x418 true)))
 (let (($x39 (and $x532 $x488)))
 (let (($x13 (and $x39 $x129)))
 (let (($x644 (and $x13 $x705)))
 (let (($x417 (and $x644 $x104)))
 (let (($x757 (and $x417 $x99)))
 (let (($x156 (and $x757 $x342)))
 (let (($x16 (and $x156 $x657)))
 (let (($x497 (and $x16 $x324)))
 (let (($x47 (and $x497 $x477)))
 (let (($x10 (and $x47 $x642)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x490 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x402 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (=> $x267 (= ?x402 ?x490)))))))
 ))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x612 (bvuge ?x85 (_ bv1 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x492 (_ bv1 32))))
 (= $x267 $x612))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x85 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x698 (= ?x85 (_ bv0 32))))
 (let ((?x492 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x492 (_ bv0 32))))
 (= $x128 $x698))))))
 ))
 (let (($x21 (and $x60 $x747)))
 (let (($x226 (and $x21 $x184)))
 (let (($x92 (and $x226 $x328)))
 (let (($x305 (and $x92 $x10)))
 (let (($x494 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x775 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (=> $x641 (= ?x775 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x641 (bvuge ?x366 (_ bv1 32))))
 (= $x641 (bvuge ?x33 (_ bv1 32)))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x366 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (= ?x366 (_ bv0 32))))
 (= $x322 (= ?x33 (_ bv0 32)))))))
 ))
 (let (($x251 (and $x238 $x584)))
 (let (($x365 (and $x251 $x221)))
 (let (($x766 (and $x365 $x494)))
 (let (($x73 (and $x766 $x305)))
 (let (($x760 (=> $x73 $x390)))
 (let (($x763 (not $x760)))
 (let (($x163 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x164 (select solver-mem_3 memmask-bounded-var!)))
 (let (($x382 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x685 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x730 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x738 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x175 (or false (or false (and (and true (or $x738 $x730)) (or $x685 $x382))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x175) (= ?x164 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x164 (_ bv0 8)))))))))))
 ))
 (and (and true $x163) $x763)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!110))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!108))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x41c4d224)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x11d06704)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!110))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!109))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x11d06707)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x41c4d227)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x11d06704)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x41c4d224)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!116 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!112 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000065 x!0)
                    (ite (bvule #x01000000 x!0)
                         (ite (bvule #x20400c10 x!0) #x20400c10 #x01000000)
                         #x00000065)
                    #x00000064)))
      (ite (bvule #x00000064 x!0) a!1 #x00000000)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!116 (k!112 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x20400c10) false
    (ite (= x!0 #x01000000) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!114 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!111 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x41c4d225 x!0)
                    (ite (bvule #x41c4d227 x!0)
                         (ite (bvule #x41c4d228 x!0) #x41c4d228 #x41c4d227)
                         #x41c4d225)
                    #x41c4d224)))
    (let ((a!2 (ite (bvule #x11d06707 x!0)
                    (ite (bvule #x11d06708 x!0)
                         (ite (bvule #x41c4d224 x!0) a!1 #x11d06708)
                         #x11d06707)
                    #x11d06705)))
    (let ((a!3 (ite (bvule #x02000003 x!0)
                    (ite (bvule #x11d06704 x!0)
                         (ite (bvule #x11d06705 x!0) a!2 #x11d06704)
                         #x02000003)
                    #x02000002)))
    (let ((a!4 (ite (bvule #x02000000 x!0)
                    (ite (bvule #x02000001 x!0)
                         (ite (bvule #x02000002 x!0) a!3 #x02000001)
                         #x02000000)
                    #x00005442)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x00005442 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!110!115 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00005442) #x10
    (ite (= x!0 #x02000000) #x80
    (ite (= x!0 #x02000001) #x00
    (ite (= x!0 #x41c4d228) #x10
    (ite (= x!0 #x41c4d224) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x11d06704) #x00
    (ite (= x!0 #x41c4d225) #x00
    (ite (= x!0 #x11d06705) #x00
    (ite (= x!0 #x02000003) #x00
    (ite (= x!0 #x02000002) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x11d06707) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x41c4d227) #x00
    (ite (= x!0 #x00000002) #x00
      #x02)))))))))))))))))
  (define-fun k!110 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!110!115 (k!111 x!0)))
  (define-fun k!108 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x02000000) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!108 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!108 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!110 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!110 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!110))
              (= x!3 (_ as-array k!109))
              (= x!4 #x01000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x20400c10
      #x11d06704))
  (define-fun k!113 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x01000000 x!0) #x01000000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!114 (k!113 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000080
      (let ((a!1 (concat (k!108 (bvadd #x02000003 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x02000002 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x02000001 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x02000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!110 (bvadd #x02000003 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000002 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000001 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun k!109 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x30)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!117 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!117
      (k!113 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000080
      (let ((a!1 (concat (k!110 (bvadd #x02000003 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000002 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000001 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x63 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x505 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_4 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x46 (bvadd ?x22 ?x505)))
 (let ((?x419 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x46))))
 (let ((?x381 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x46 (_ bv2 32))) ?x419)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x46 (_ bv3 32))) ?x381)))
 (let ((?x552 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (=> $x171 (= ?x552 ?x355))))))))))))
 ))
 (let (($x783 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x119 (_ bv1 32))))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (= $x171 $x560))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x495 (= false false)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (= ?x607 (_ bv0 32))))
 (=> $x625 $x495)))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x119 (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (= ?x607 (_ bv0 32))))
 (= $x625 $x231))))))
 ))
 (let (($x206 (and $x557 $x233)))
 (let (($x623 (and $x206 $x783)))
 (let (($x244 (and $x623 $x63)))
 (let (($x187 (= $x244 true)))
 (let (($x593 (= $x187 true)))
 (let ((?x139 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x197 (= (_ bv0 2) ?x139)))
 (let (($x274 (= $x197 true)))
 (let (($x536 (= $x274 true)))
 (let (($x357 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x22 input.dst.llvm-%m2)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x289))))
 (let ((?x328 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (=> $x60 (= ?x328 ?x17))))))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x119 (_ bv1 32))))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (= $x60 $x560))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x495 (= false false)))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (= ?x398 (_ bv0 32))))
 (=> $x584 $x495)))))
 ))
 (let (($x778 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x119 (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (= ?x398 (_ bv0 32))))
 (= $x584 $x231))))))
 ))
 (let (($x779 (and $x778 $x365)))
 (let (($x454 (and $x779 $x564)))
 (let (($x29 (and $x454 $x357)))
 (let (($x749 (= $x29 true)))
 (let (($x692 (= $x749 true)))
 (let (($x447 (= $x692 true)))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x11 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x66))))
 (let ((?x552 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (=> $x171 (= ?x552 ?x656))))))))))
 ))
 (let (($x443 (and $x623 $x369)))
 (let (($x329 (= $x443 true)))
 (let (($x571 (= $x329 true)))
 (let (($x364 (= $x571 true)))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x11 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x11))))
 (let ((?x425 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv2 32))) ?x499)))
 (let ((?x500 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv3 32))) ?x425)))
 (let ((?x374 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x666 (bvuge ?x650 (_ bv1 32))))
 (=> $x666 (= ?x374 ?x500)))))))))))
 ))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x119 (_ bv1 32))))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x666 (bvuge ?x650 (_ bv1 32))))
 (= $x666 $x560))))))
 ))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x495 (= false false)))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x650 (_ bv0 32))))
 (=> $x64 $x495)))))
 ))
 (let (($x786 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x119 (_ bv0 32))))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x650 (_ bv0 32))))
 (= $x64 $x231))))))
 ))
 (let (($x421 (and $x786 $x380)))
 (let (($x246 (and $x421 $x524)))
 (let (($x52 (and $x246 $x446)))
 (let (($x515 (= $x52 true)))
 (let (($x651 (= $x515 true)))
 (let (($x263 (= $x651 true)))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x11 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x11))))
 (let ((?x425 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv2 32))) ?x499)))
 (let ((?x500 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv3 32))) ?x425)))
 (let ((?x552 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (=> $x171 (= ?x552 ?x500)))))))))))
 ))
 (let (($x291 (and $x623 $x585)))
 (let (($x269 (= $x291 true)))
 (let (($x70 (= $x269 true)))
 (let (($x389 (= $x70 true)))
 (let (($x313 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x11 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x66))))
 (let ((?x374 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x666 (bvuge ?x650 (_ bv1 32))))
 (=> $x666 (= ?x374 ?x656))))))))))
 ))
 (let (($x744 (and $x246 $x313)))
 (let (($x632 (= $x744 true)))
 (let (($x498 (= $x632 true)))
 (let (($x370 (= $x498 true)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x22 input.dst.llvm-%m2)))
 (let ((?x682 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x180))))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv2 32))) ?x682)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv3 32))) ?x620)))
 (let ((?x328 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (=> $x60 (= ?x328 ?x252)))))))))))
 ))
 (let (($x315 (and $x454 $x152)))
 (let (($x348 (= $x315 true)))
 (let (($x401 (= $x348 true)))
 (let (($x630 (= $x401 true)))
 (let (($x363 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x96 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x319 (and $x96 $x363)))
 (let (($x506 (= $x319 true)))
 (let (($x351 (= $x506 true)))
 (let (($x616 (= $x351 true)))
 (let ((?x756 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x542 (= (_ bv0 32) ?x756)))
 (let ((?x395 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x224 (= (_ bv0 32) ?x395)))
 (let ((?x570 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x750 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x570)))
 (let ((?x262 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x586 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x262)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x785 (and $x165 $x586)))
 (let (($x751 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x559 (and $x751 $x785)))
 (let (($x609 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x631 (and $x373 $x212)))
 (let (($x199 (not $x631)))
 (let (($x417 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x104 $x417)))
 (let (($x618 (and (not $x210) $x199)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x72 $x34)))
 (let (($x166 (not $x114)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x483 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x483 $x200)))
 (let (($x110 (and (not $x229) $x166)))
 (let (($x716 (and (and (and (and (and (and $x110 $x618) $x270) $x609) $x559) $x750) $x224)))
 (let (($x391 (and $x716 $x542)))
 (let (($x286 (= $x391 true)))
 (let (($x228 (= $x286 true)))
 (let (($x8 (= $x228 true)))
 (let ((?x482 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x599 (bvneg ?x482)))
 (let (($x572 (= ?x599 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x362 (= $x572 true)))
 (let (($x523 (= $x362 true)))
 (let (($x336 (= ?x599 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x412 (= $x336 true)))
 (let (($x240 (= $x412 true)))
 (let (($x615 (and $x240 $x523)))
 (let (($x711 (and $x615 $x8)))
 (let (($x86 (and $x711 $x616)))
 (let (($x471 (and $x86 $x630)))
 (let (($x450 (and $x471 $x370)))
 (let (($x574 (and $x450 $x389)))
 (let (($x225 (and $x574 $x263)))
 (let (($x127 (and $x225 $x364)))
 (let (($x56 (and $x127 $x447)))
 (let (($x61 (and $x56 $x536)))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x552 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (=> $x171 (= ?x552 ?x374)))))))
 ))
 (let (($x605 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x666 (bvuge ?x650 (_ bv1 32))))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (= $x171 $x666))))))
 ))
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x650 (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (= ?x607 (_ bv0 32))))
 (= $x625 $x64))))))
 ))
 (let (($x556 (and $x743 $x233)))
 (let (($x311 (and $x556 $x605)))
 (let (($x638 (and $x311 $x633)))
 (let (($x546 (and $x638 $x61)))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (=> $x60 (= ?x328 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x747 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (= $x60 (bvuge ?x59 (_ bv1 32)))))))
 ))
 (let (($x641 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (= ?x398 (_ bv0 32))))
 (= $x584 (= ?x59 (_ bv0 32)))))))
 ))
 (let (($x775 (and $x641 $x365)))
 (let (($x21 (and $x775 $x747)))
 (let (($x147 (and $x21 $x416)))
 (let (($x463 (and $x147 $x546)))
 (let (($x65 (=> $x463 $x593)))
 (let (($x5 (not $x65)))
 (let (($x98 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x333 (select solver-mem_4 memmask-bounded-var!)))
 (let (($x346 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x548 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x709 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x562 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x568 (or false (or false (and (and true (or $x562 $x709)) (or $x548 $x346))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x568) (= ?x333 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x333 (_ bv0 8)))))))))))
 ))
 (and (and true $x98) $x5)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x63 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x505 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_4 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x46 (bvadd ?x22 ?x505)))
 (let ((?x419 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x46))))
 (let ((?x381 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x46 (_ bv2 32))) ?x419)))
 (let ((?x355 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x46 (_ bv3 32))) ?x381)))
 (let ((?x552 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (=> $x171 (= ?x552 ?x355))))))))))))
 ))
 (let (($x783 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x119 (_ bv1 32))))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (= $x171 $x560))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x495 (= false false)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (= ?x607 (_ bv0 32))))
 (=> $x625 $x495)))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x119 (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (= ?x607 (_ bv0 32))))
 (= $x625 $x231))))))
 ))
 (let (($x206 (and $x557 $x233)))
 (let (($x623 (and $x206 $x783)))
 (let (($x244 (and $x623 $x63)))
 (let (($x187 (= $x244 true)))
 (let (($x593 (= $x187 true)))
 (let ((?x139 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x197 (= (_ bv0 2) ?x139)))
 (let (($x274 (= $x197 true)))
 (let (($x536 (= $x274 true)))
 (let (($x357 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x22 input.dst.llvm-%m2)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x289))))
 (let ((?x328 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (=> $x60 (= ?x328 ?x17))))))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x119 (_ bv1 32))))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (= $x60 $x560))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x495 (= false false)))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (= ?x398 (_ bv0 32))))
 (=> $x584 $x495)))))
 ))
 (let (($x778 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x119 (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (= ?x398 (_ bv0 32))))
 (= $x584 $x231))))))
 ))
 (let (($x779 (and $x778 $x365)))
 (let (($x454 (and $x779 $x564)))
 (let (($x29 (and $x454 $x357)))
 (let (($x749 (= $x29 true)))
 (let (($x692 (= $x749 true)))
 (let (($x447 (= $x692 true)))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x11 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x66))))
 (let ((?x552 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (=> $x171 (= ?x552 ?x656))))))))))
 ))
 (let (($x443 (and $x623 $x369)))
 (let (($x329 (= $x443 true)))
 (let (($x571 (= $x329 true)))
 (let (($x364 (= $x571 true)))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x11 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x11))))
 (let ((?x425 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv2 32))) ?x499)))
 (let ((?x500 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv3 32))) ?x425)))
 (let ((?x374 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x666 (bvuge ?x650 (_ bv1 32))))
 (=> $x666 (= ?x374 ?x500)))))))))))
 ))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x119 (_ bv1 32))))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x666 (bvuge ?x650 (_ bv1 32))))
 (= $x666 $x560))))))
 ))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x495 (= false false)))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x650 (_ bv0 32))))
 (=> $x64 $x495)))))
 ))
 (let (($x786 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x119 (_ bv0 32))))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x650 (_ bv0 32))))
 (= $x64 $x231))))))
 ))
 (let (($x421 (and $x786 $x380)))
 (let (($x246 (and $x421 $x524)))
 (let (($x52 (and $x246 $x446)))
 (let (($x515 (= $x52 true)))
 (let (($x651 (= $x515 true)))
 (let (($x263 (= $x651 true)))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x11 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x11))))
 (let ((?x425 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv2 32))) ?x499)))
 (let ((?x500 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x11 (_ bv3 32))) ?x425)))
 (let ((?x552 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (=> $x171 (= ?x552 ?x500)))))))))))
 ))
 (let (($x291 (and $x623 $x585)))
 (let (($x269 (= $x291 true)))
 (let (($x70 (= $x269 true)))
 (let (($x389 (= $x70 true)))
 (let (($x313 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x11 (bvadd ?x22 input.dst.llvm-%m1)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x66))))
 (let ((?x374 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x666 (bvuge ?x650 (_ bv1 32))))
 (=> $x666 (= ?x374 ?x656))))))))))
 ))
 (let (($x744 (and $x246 $x313)))
 (let (($x632 (= $x744 true)))
 (let (($x498 (= $x632 true)))
 (let (($x370 (= $x498 true)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x22 input.dst.llvm-%m2)))
 (let ((?x682 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x180))))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv2 32))) ?x682)))
 (let ((?x252 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x180 (_ bv3 32))) ?x620)))
 (let ((?x328 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (=> $x60 (= ?x328 ?x252)))))))))))
 ))
 (let (($x315 (and $x454 $x152)))
 (let (($x348 (= $x315 true)))
 (let (($x401 (= $x348 true)))
 (let (($x630 (= $x401 true)))
 (let (($x363 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x96 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x319 (and $x96 $x363)))
 (let (($x506 (= $x319 true)))
 (let (($x351 (= $x506 true)))
 (let (($x616 (= $x351 true)))
 (let ((?x756 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x542 (= (_ bv0 32) ?x756)))
 (let ((?x395 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x224 (= (_ bv0 32) ?x395)))
 (let ((?x570 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x750 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x570)))
 (let ((?x262 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x586 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x262)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x785 (and $x165 $x586)))
 (let (($x751 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x559 (and $x751 $x785)))
 (let (($x609 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x631 (and $x373 $x212)))
 (let (($x199 (not $x631)))
 (let (($x417 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x104 $x417)))
 (let (($x618 (and (not $x210) $x199)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x72 $x34)))
 (let (($x166 (not $x114)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x483 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x483 $x200)))
 (let (($x110 (and (not $x229) $x166)))
 (let (($x716 (and (and (and (and (and (and $x110 $x618) $x270) $x609) $x559) $x750) $x224)))
 (let (($x391 (and $x716 $x542)))
 (let (($x286 (= $x391 true)))
 (let (($x228 (= $x286 true)))
 (let (($x8 (= $x228 true)))
 (let ((?x482 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x599 (bvneg ?x482)))
 (let (($x572 (= ?x599 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x362 (= $x572 true)))
 (let (($x523 (= $x362 true)))
 (let (($x336 (= ?x599 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x412 (= $x336 true)))
 (let (($x240 (= $x412 true)))
 (let (($x615 (and $x240 $x523)))
 (let (($x711 (and $x615 $x8)))
 (let (($x86 (and $x711 $x616)))
 (let (($x471 (and $x86 $x630)))
 (let (($x450 (and $x471 $x370)))
 (let (($x574 (and $x450 $x389)))
 (let (($x225 (and $x574 $x263)))
 (let (($x127 (and $x225 $x364)))
 (let (($x56 (and $x127 $x447)))
 (let (($x61 (and $x56 $x536)))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x552 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (=> $x171 (= ?x552 ?x374)))))))
 ))
 (let (($x605 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x666 (bvuge ?x650 (_ bv1 32))))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x607 (_ bv1 32))))
 (= $x171 $x666))))))
 ))
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x650 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x650 (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (= ?x607 (_ bv0 32))))
 (= $x625 $x64))))))
 ))
 (let (($x556 (and $x743 $x233)))
 (let (($x311 (and $x556 $x605)))
 (let (($x638 (and $x311 $x633)))
 (let (($x546 (and $x638 $x61)))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (=> $x60 (= ?x328 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x747 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x398 (_ bv1 32))))
 (= $x60 (bvuge ?x59 (_ bv1 32)))))))
 ))
 (let (($x641 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (= ?x398 (_ bv0 32))))
 (= $x584 (= ?x59 (_ bv0 32)))))))
 ))
 (let (($x775 (and $x641 $x365)))
 (let (($x21 (and $x775 $x747)))
 (let (($x147 (and $x21 $x416)))
 (let (($x463 (and $x147 $x546)))
 (let (($x65 (=> $x463 $x593)))
 (let (($x5 (not $x65)))
 (let (($x98 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x333 (select solver-mem_4 memmask-bounded-var!)))
 (let (($x346 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x548 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x709 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x562 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x568 (or false (or false (and (and true (or $x562 $x709)) (or $x548 $x346))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x568) (= ?x333 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x333 (_ bv0 8)))))))))))
 ))
 (and (and true $x98) $x5)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!175))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x38d10060)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!173))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x22100c20)
  (define-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!173))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!174))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x22100c23)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x38d10063)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x22100c20)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x38d10060)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!180 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000001) (= x!0 #x00000004)))
  (define-fun k!177 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000004)
         #x00000001))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!180 (k!177 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
    (ite (= x!0 #x00000001) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!176 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xfffffffd x!0)
                    (ite (bvule #xfffffffe x!0)
                         (ite (= x!0 #xffffffff) #xffffffff #xfffffffe)
                         #xfffffffd)
                    #xfffffffc)))
    (let ((a!2 (ite (bvule #xfffffffa x!0)
                    (ite (bvule #xfffffffb x!0)
                         (ite (bvule #xfffffffc x!0) a!1 #xfffffffb)
                         #xfffffffa)
                    #xfffffff9)))
    (let ((a!3 (ite (bvule #xfffffff7 x!0)
                    (ite (bvule #xfffffff8 x!0)
                         (ite (bvule #xfffffff9 x!0) a!2 #xfffffff8)
                         #xfffffff7)
                    #xfffffff6)))
    (let ((a!4 (ite (bvule #xfffffff4 x!0)
                    (ite (bvule #xfffffff5 x!0)
                         (ite (bvule #xfffffff6 x!0) a!3 #xfffffff5)
                         #xfffffff4)
                    #xfffffff3)))
    (let ((a!5 (ite (bvule #xfffffff1 x!0)
                    (ite (bvule #xfffffff2 x!0)
                         (ite (bvule #xfffffff3 x!0) a!4 #xfffffff2)
                         #xfffffff1)
                    #xfffffff0)))
    (let ((a!6 (ite (bvule #x38d10063 x!0)
                    (ite (bvule #x38d10064 x!0)
                         (ite (bvule #xfffffff0 x!0) a!5 #x38d10064)
                         #x38d10063)
                    #x38d10061)))
    (let ((a!7 (ite (bvule #x34700844 x!0)
                    (ite (bvule #x38d10060 x!0)
                         (ite (bvule #x38d10061 x!0) a!6 #x38d10060)
                         #x34700844)
                    #x22100c24)))
    (let ((a!8 (ite (bvule #x22100c21 x!0)
                    (ite (bvule #x22100c23 x!0)
                         (ite (bvule #x22100c24 x!0) a!7 #x22100c23)
                         #x22100c21)
                    #x22100c20)))
    (let ((a!9 (ite (bvule #x00000032 x!0)
                    (ite (bvule #x00000033 x!0)
                         (ite (bvule #x22100c20 x!0) a!8 #x00000033)
                         #x00000032)
                    #x00000031)))
    (let ((a!10 (ite (bvule #x00000013 x!0)
                     (ite (bvule #x00000030 x!0)
                          (ite (bvule #x00000031 x!0) a!9 #x00000030)
                          #x00000013)
                     #x00000012)))
    (let ((a!11 (ite (bvule #x00000010 x!0)
                     (ite (bvule #x00000011 x!0)
                          (ite (bvule #x00000012 x!0) a!10 #x00000011)
                          #x00000010)
                     #x0000000b)))
    (let ((a!12 (ite (bvule #x00000009 x!0)
                     (ite (bvule #x0000000a x!0)
                          (ite (bvule #x0000000b x!0) a!11 #x0000000a)
                          #x00000009)
                     #x00000008)))
    (let ((a!13 (ite (bvule #x00000006 x!0)
                     (ite (bvule #x00000007 x!0)
                          (ite (bvule #x00000008 x!0) a!12 #x00000007)
                          #x00000006)
                     #x00000005)))
    (let ((a!14 (ite (bvule #x00000003 x!0)
                     (ite (bvule #x00000004 x!0)
                          (ite (bvule #x00000005 x!0) a!13 #x00000004)
                          #x00000003)
                     #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!14 #x00000001)
           #x00000000))))))))))))))))
  (define-fun k!175 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xfffffff1) #x40
    (ite (= x!0 #x00000012) #x40
    (ite (= x!0 #x00000031) #x80
    (ite (= x!0 #xfffffff4) #x10
    (ite (= x!0 #x00000010) #x20
    (ite (= x!0 #x00000002) #x20
    (ite (= x!0 #xfffffff7) #x10
    (ite (= x!0 #xfffffff5) #x20
    (ite (= x!0 #x00000003) #x08
      #x00)))))))))))
  (define-fun k!173!179 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #xfffffff0) #x00
    (ite (= x!0 #x34700844) #x20
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #xfffffffa) #x02
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #xfffffff1) #x40
    (ite (= x!0 #x38d10064) #x20
    (ite (= x!0 #x00000012) #x40
    (ite (= x!0 #x00000011) #x00
    (ite (= x!0 #x00000031) #x80
    (ite (= x!0 #x22100c20) #x00
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #xfffffff4) #x10
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x00000033) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000030) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #x00000010) #x20
    (ite (= x!0 #xfffffff6) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000002) #x20
    (ite (= x!0 #xfffffff7) #x10
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x38d10060) #x00
    (ite (= x!0 #x22100c21) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x38d10061) #x00
    (ite (= x!0 #xfffffff3) #x00
    (ite (= x!0 #xfffffff2) #x00
    (ite (= x!0 #xfffffff5) #x20
    (ite (= x!0 #x22100c24) #x00
    (ite (= x!0 #x22100c23) #x00
    (ite (= x!0 #x00000003) #x08
    (ite (= x!0 #xfffffffd) #x00
    (ite (= x!0 #x38d10063) #x00
    (ite (= x!0 #x00000013) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #x00000032) #x00
      #x03))))))))))))))))))))))))))))))))))))))))))))))
  (define-fun k!173 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!173!179 (k!176 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x08200000
    (ite (= x!0 #x00000004) #x00400020
    (ite (= x!0 #x00000001) #x00000000
      (let ((a!1 (concat (k!175 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!175 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!175 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!175 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!173 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!173 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))))
  (define-fun k!174 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x40)
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!173))
              (= x!3 (_ as-array k!174))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #xfffffffe
      #x00000043))
  (define-fun input.spec-%var-m1-1.0.1!182 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000006)
        (= x!0 #x00000000)
        (= x!0 #x00000004)
        (= x!0 #x00000003)
        (= x!0 #x00000008)
        (= x!0 #x00000002)
        (= x!0 #x00000010)
        (= x!0 #x00000001)))
  (define-fun k!178 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000010 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000010)
                    #x00000008)))
    (let ((a!2 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000006 x!0)
                         (ite (bvule #x00000008 x!0) a!1 #x00000006)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!2 #x00000002)
                #x00000001)
           #x00000000))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!182 (k!178 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
    (ite (= x!0 #x00000004) #x08200000
    (ite (= x!0 #x00000001) #x10002010
    (ite (= x!0 #x00000002) #x00020000
    (ite (= x!0 #x00000010) #x00008000
    (ite (= x!0 #x00000008) #x00400020
    (ite (= x!0 #x00000006) #x00000000
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!175 (bvadd #xfffffff3 (bvmul #x00000004 x!0)))
                         (k!175 (bvadd #xfffffff2 (bvmul #x00000004 x!0)))
                         (k!175 (bvadd #xfffffff1 (bvmul #x00000004 x!0)))
                         (k!175 (bvadd #xfffffff0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!173 (bvadd #xfffffff3 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #xfffffff2 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #xfffffff1 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #xfffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2)))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!181 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000006)
        (= x!0 #x00000000)
        (= x!0 #x00000004)
        (= x!0 #x00000003)
        (= x!0 #x00000008)
        (= x!0 #x00000002)
        (= x!0 #x00000010)
        (= x!0 #x00000001)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!181
      (k!178 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
    (ite (= x!0 #x00000004) #x08200000
    (ite (= x!0 #x00000001) #x10002010
    (ite (= x!0 #x00000002) #x00020000
    (ite (= x!0 #x00000010) #x00008000
    (ite (= x!0 #x00000008) #x00400020
    (ite (= x!0 #x00000006) #x00000000
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!173 (bvadd #xfffffff3 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #xfffffff2 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #xfffffff1 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #xfffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0))))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00400020
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x08200000
      (input.spec-%var-m2-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x303 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x218)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x303))))
 (let ((?x675 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x303 (_ bv2 32))) ?x36)))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x303 (_ bv3 32))) ?x675)))
 (let ((?x633 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (=> $x743 (= ?x633 ?x189)))))))))))
 ))
 (let (($x587 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x742 (_ bv1 32))))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (= $x743 $x534))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (= ?x221 (_ bv0 32))))
 (=> $x365 $x83)))))
 ))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x742 (_ bv0 32))))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (= ?x221 (_ bv0 32))))
 (= $x365 $x271))))))
 ))
 (let (($x520 (and $x182 $x21)))
 (let (($x583 (and $x520 $x587)))
 (let (($x433 (and $x583 $x652)))
 (let (($x544 (= $x433 true)))
 (let (($x133 (= $x544 true)))
 (let ((?x560 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x400 (bvneg ?x560)))
 (let (($x383 (= ?x400 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x608 (= $x383 true)))
 (let (($x26 (= $x608 true)))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x753 (bvadd ?x218 input.dst.llvm-%m2)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x753 (_ bv1 32))) (select input.dst.llvm-mem ?x753))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x753 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x753 (_ bv2 32))) ?x205))))
 (let ((?x633 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (=> $x743 (= ?x633 ?x243))))))))))
 ))
 (let (($x420 (and $x583 $x196)))
 (let (($x41 (= $x420 true)))
 (let (($x247 (= $x41 true)))
 (let (($x235 (= $x247 true)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x735 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem ?x735))))
 (let ((?x569 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv2 32))) ?x220))))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (=> $x178 (= ?x459 ?x569))))))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x742 (_ bv1 32))))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (= $x178 $x534))))))
 ))
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x539 (_ bv0 32))))
 (=> $x262 $x83)))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x742 (_ bv0 32))))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x539 (_ bv0 32))))
 (= $x262 $x271))))))
 ))
 (let (($x479 (and $x51 $x570)))
 (let (($x487 (and $x479 $x160)))
 (let (($x384 (and $x487 $x497)))
 (let (($x320 (= $x384 true)))
 (let (($x112 (= $x320 true)))
 (let (($x335 (= $x112 true)))
 (let (($x492 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x735 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x644 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x735))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv2 32))) ?x644)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv3 32))) ?x164)))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x99 (_ bv1 32))))
 (=> $x359 (= ?x360 ?x253)))))))))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x742 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x99 (_ bv1 32))))
 (= $x359 $x534))))))
 ))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (= ?x99 (_ bv0 32))))
 (=> $x751 $x83)))))
 ))
 (let (($x763 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x742 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (= ?x99 (_ bv0 32))))
 (= $x751 $x271))))))
 ))
 (let (($x662 (and $x763 $x415)))
 (let (($x528 (and $x662 $x352)))
 (let (($x128 (and $x528 $x492)))
 (let (($x85 (= $x128 true)))
 (let (($x698 (= $x85 true)))
 (let (($x683 (= $x698 true)))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x735 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x644 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x735))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv2 32))) ?x644)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv3 32))) ?x164)))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (=> $x178 (= ?x459 ?x253)))))))))))
 ))
 (let (($x590 (and $x487 $x411)))
 (let (($x372 (= $x590 true)))
 (let (($x179 (= $x372 true)))
 (let (($x732 (= $x179 true)))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x735 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem ?x735))))
 (let ((?x569 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv2 32))) ?x220))))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x99 (_ bv1 32))))
 (=> $x359 (= ?x360 ?x569))))))))))
 ))
 (let (($x259 (and $x528 $x434)))
 (let (($x685 (= $x259 true)))
 (let (($x38 (= $x685 true)))
 (let (($x603 (= $x38 true)))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x753 (bvadd ?x218 input.dst.llvm-%m2)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x753 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x753))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x753 (_ bv2 32))) ?x285)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x753 (_ bv3 32))) ?x78)))
 (let ((?x633 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (=> $x743 (= ?x633 ?x222)))))))))))
 ))
 (let (($x578 (and $x583 $x266)))
 (let (($x429 (= $x578 true)))
 (let (($x476 (= $x429 true)))
 (let (($x120 (= $x476 true)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x193 (= (_ bv0 32) ?x97)))
 (let ((?x623 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x503 (= (_ bv0 32) ?x623)))
 (let ((?x782 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x783 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x782)))
 (let ((?x450 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x450)))
 (let (($x498 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x557 (and $x498 $x256)))
 (let (($x632 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x632 $x557)))
 (let (($x744 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x598 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x690 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x681 (and $x690 $x239)))
 (let (($x66 (not $x681)))
 (let (($x491 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x130 $x491)))
 (let (($x656 (and (not $x250) $x66)))
 (let (($x524 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x648 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x648 $x524)))
 (let (($x449 (not $x246)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x784 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x380 (and $x784 $x57)))
 (let (($x445 (and (not $x380) $x449)))
 (let (($x330 (and (and (and (and (and (and $x445 $x656) $x598) $x744) $x206) $x783) $x503)))
 (let (($x585 (and $x330 $x193)))
 (let (($x291 (= $x585 true)))
 (let (($x269 (= $x291 true)))
 (let (($x70 (= $x269 true)))
 (let ((?x237 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x152 (= (_ bv0 2) ?x237)))
 (let (($x315 (= $x152 true)))
 (let (($x348 (= $x315 true)))
 (let (($x589 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x458 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x677 (and $x458 $x589)))
 (let (($x260 (= $x677 true)))
 (let (($x682 (= $x260 true)))
 (let (($x620 (= $x682 true)))
 (let (($x454 (= ?x400 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x657 (= $x454 true)))
 (let (($x22 (= $x657 true)))
 (let (($x252 (and $x22 $x620)))
 (let (($x401 (and $x252 $x348)))
 (let (($x389 (and $x401 $x70)))
 (let (($x50 (and $x389 $x120)))
 (let (($x755 (and $x50 $x603)))
 (let (($x366 (and $x755 $x732)))
 (let (($x184 (and $x366 $x683)))
 (let (($x637 (and $x184 $x335)))
 (let (($x485 (and $x637 $x235)))
 (let (($x14 (and $x485 $x26)))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (=> $x178 (= ?x459 ?x360)))))))
 ))
 (let (($x96 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x99 (_ bv1 32))))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (= $x178 $x359))))))
 ))
 (let (($x785 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (= ?x99 (_ bv0 32))))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x539 (_ bv0 32))))
 (= $x262 $x751))))))
 ))
 (let (($x750 (and $x785 $x570)))
 (let (($x522 (and $x750 $x96)))
 (let (($x543 (and $x522 $x231)))
 (let (($x478 (and $x543 $x14)))
 (let (($x739 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x633 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (=> $x743 (= ?x633 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (= $x743 (bvuge ?x251 (_ bv1 32)))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (= ?x221 (_ bv0 32))))
 (= $x365 (= ?x251 (_ bv0 32)))))))
 ))
 (let (($x328 (and $x60 $x21)))
 (let (($x556 (and $x328 $x233)))
 (let (($x482 (and $x556 $x739)))
 (let (($x393 (and $x482 $x478)))
 (let (($x58 (=> $x393 $x133)))
 (not $x58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x303 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x218)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x303))))
 (let ((?x675 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x303 (_ bv2 32))) ?x36)))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x303 (_ bv3 32))) ?x675)))
 (let ((?x633 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (=> $x743 (= ?x633 ?x189)))))))))))
 ))
 (let (($x587 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x742 (_ bv1 32))))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (= $x743 $x534))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (= ?x221 (_ bv0 32))))
 (=> $x365 $x83)))))
 ))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x742 (_ bv0 32))))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (= ?x221 (_ bv0 32))))
 (= $x365 $x271))))))
 ))
 (let (($x520 (and $x182 $x21)))
 (let (($x583 (and $x520 $x587)))
 (let (($x433 (and $x583 $x652)))
 (let (($x544 (= $x433 true)))
 (let (($x133 (= $x544 true)))
 (let ((?x560 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x400 (bvneg ?x560)))
 (let (($x383 (= ?x400 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x608 (= $x383 true)))
 (let (($x26 (= $x608 true)))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x753 (bvadd ?x218 input.dst.llvm-%m2)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x753 (_ bv1 32))) (select input.dst.llvm-mem ?x753))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x753 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x753 (_ bv2 32))) ?x205))))
 (let ((?x633 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (=> $x743 (= ?x633 ?x243))))))))))
 ))
 (let (($x420 (and $x583 $x196)))
 (let (($x41 (= $x420 true)))
 (let (($x247 (= $x41 true)))
 (let (($x235 (= $x247 true)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x735 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem ?x735))))
 (let ((?x569 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv2 32))) ?x220))))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (=> $x178 (= ?x459 ?x569))))))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x742 (_ bv1 32))))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (= $x178 $x534))))))
 ))
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x539 (_ bv0 32))))
 (=> $x262 $x83)))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x742 (_ bv0 32))))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x539 (_ bv0 32))))
 (= $x262 $x271))))))
 ))
 (let (($x479 (and $x51 $x570)))
 (let (($x487 (and $x479 $x160)))
 (let (($x384 (and $x487 $x497)))
 (let (($x320 (= $x384 true)))
 (let (($x112 (= $x320 true)))
 (let (($x335 (= $x112 true)))
 (let (($x492 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x735 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x644 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x735))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv2 32))) ?x644)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv3 32))) ?x164)))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x99 (_ bv1 32))))
 (=> $x359 (= ?x360 ?x253)))))))))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x742 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x99 (_ bv1 32))))
 (= $x359 $x534))))))
 ))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x83 (= false false)))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (= ?x99 (_ bv0 32))))
 (=> $x751 $x83)))))
 ))
 (let (($x763 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x742 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (= ?x99 (_ bv0 32))))
 (= $x751 $x271))))))
 ))
 (let (($x662 (and $x763 $x415)))
 (let (($x528 (and $x662 $x352)))
 (let (($x128 (and $x528 $x492)))
 (let (($x85 (= $x128 true)))
 (let (($x698 (= $x85 true)))
 (let (($x683 (= $x698 true)))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x735 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x644 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x735))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv2 32))) ?x644)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x735 (_ bv3 32))) ?x164)))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (=> $x178 (= ?x459 ?x253)))))))))))
 ))
 (let (($x590 (and $x487 $x411)))
 (let (($x372 (= $x590 true)))
 (let (($x179 (= $x372 true)))
 (let (($x732 (= $x179 true)))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x735 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv1 32))) (select input.dst.llvm-mem ?x735))))
 (let ((?x569 (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x735 (_ bv2 32))) ?x220))))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x99 (_ bv1 32))))
 (=> $x359 (= ?x360 ?x569))))))))))
 ))
 (let (($x259 (and $x528 $x434)))
 (let (($x685 (= $x259 true)))
 (let (($x38 (= $x685 true)))
 (let (($x603 (= $x38 true)))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x753 (bvadd ?x218 input.dst.llvm-%m2)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x753 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x753))))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x753 (_ bv2 32))) ?x285)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x753 (_ bv3 32))) ?x78)))
 (let ((?x633 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (=> $x743 (= ?x633 ?x222)))))))))))
 ))
 (let (($x578 (and $x583 $x266)))
 (let (($x429 (= $x578 true)))
 (let (($x476 (= $x429 true)))
 (let (($x120 (= $x476 true)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x193 (= (_ bv0 32) ?x97)))
 (let ((?x623 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x503 (= (_ bv0 32) ?x623)))
 (let ((?x782 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x783 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x782)))
 (let ((?x450 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x450)))
 (let (($x498 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x557 (and $x498 $x256)))
 (let (($x632 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x632 $x557)))
 (let (($x744 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x598 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x690 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x681 (and $x690 $x239)))
 (let (($x66 (not $x681)))
 (let (($x491 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x130 $x491)))
 (let (($x656 (and (not $x250) $x66)))
 (let (($x524 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x648 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x648 $x524)))
 (let (($x449 (not $x246)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x784 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x380 (and $x784 $x57)))
 (let (($x445 (and (not $x380) $x449)))
 (let (($x330 (and (and (and (and (and (and $x445 $x656) $x598) $x744) $x206) $x783) $x503)))
 (let (($x585 (and $x330 $x193)))
 (let (($x291 (= $x585 true)))
 (let (($x269 (= $x291 true)))
 (let (($x70 (= $x269 true)))
 (let ((?x237 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x152 (= (_ bv0 2) ?x237)))
 (let (($x315 (= $x152 true)))
 (let (($x348 (= $x315 true)))
 (let (($x589 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x458 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x677 (and $x458 $x589)))
 (let (($x260 (= $x677 true)))
 (let (($x682 (= $x260 true)))
 (let (($x620 (= $x682 true)))
 (let (($x454 (= ?x400 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x657 (= $x454 true)))
 (let (($x22 (= $x657 true)))
 (let (($x252 (and $x22 $x620)))
 (let (($x401 (and $x252 $x348)))
 (let (($x389 (and $x401 $x70)))
 (let (($x50 (and $x389 $x120)))
 (let (($x755 (and $x50 $x603)))
 (let (($x366 (and $x755 $x732)))
 (let (($x184 (and $x366 $x683)))
 (let (($x637 (and $x184 $x335)))
 (let (($x485 (and $x637 $x235)))
 (let (($x14 (and $x485 $x26)))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x459 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (=> $x178 (= ?x459 ?x360)))))))
 ))
 (let (($x96 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x99 (_ bv1 32))))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x539 (_ bv1 32))))
 (= $x178 $x359))))))
 ))
 (let (($x785 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (= ?x99 (_ bv0 32))))
 (let ((?x539 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x539 (_ bv0 32))))
 (= $x262 $x751))))))
 ))
 (let (($x750 (and $x785 $x570)))
 (let (($x522 (and $x750 $x96)))
 (let (($x543 (and $x522 $x231)))
 (let (($x478 (and $x543 $x14)))
 (let (($x739 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x633 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (=> $x743 (= ?x633 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x221 (_ bv1 32))))
 (= $x743 (bvuge ?x251 (_ bv1 32)))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x221 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (= ?x221 (_ bv0 32))))
 (= $x365 (= ?x251 (_ bv0 32)))))))
 ))
 (let (($x328 (and $x60 $x21)))
 (let (($x556 (and $x328 $x233)))
 (let (($x482 (and $x556 $x739)))
 (let (($x393 (and $x482 $x478)))
 (let (($x58 (=> $x393 $x133)))
 (not $x58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18421404)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x14041413)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18421407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18421404)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000032)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6b520110)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff820454)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x267a7694)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x267a7694)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff820457)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6b520113)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff820454)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6b520110)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x267a7694)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000cb) #x02
      #x00))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000cb) #x02
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000032))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x525 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x777)))
 (let ((?x452 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x525 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x525))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x525 (_ bv2 32))) ?x452)))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x525 (_ bv3 32))) ?x276)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (=> $x515 (= ?x78 ?x277)))))))))))
 ))
 (let (($x304 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (bvuge ?x642 (_ bv1 32))))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (= $x515 $x563))))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x97 (_ bv0 32))))
 (=> $x193 $x119)))))
 ))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x642 (_ bv0 32))))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x97 (_ bv0 32))))
 (= $x193 $x555))))))
 ))
 (let (($x86 (and $x616 $x389)))
 (let (($x316 (and $x86 $x304)))
 (let (($x95 (and $x316 $x467)))
 (let (($x673 (= $x95 true)))
 (let (($x453 (= $x673 true)))
 (let ((?x476 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x120 (bvneg ?x476)))
 (let (($x731 (= ?x120 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x123 (= $x731 true)))
 (let (($x55 (= $x123 true)))
 (let (($x456 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x777 input.dst.llvm-%m2)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x267))))
 (let ((?x471 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (=> $x589 (= ?x471 ?x334))))))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (bvuge ?x642 (_ bv1 32))))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (= $x589 $x563))))))
 ))
 (let (($x778 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x522 (_ bv0 32))))
 (=> $x459 $x119)))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x642 (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x522 (_ bv0 32))))
 (= $x459 $x555))))))
 ))
 (let (($x302 (and $x477 $x778)))
 (let (($x773 (and $x302 $x489)))
 (let (($x573 (and $x773 $x456)))
 (let (($x531 (= $x573 true)))
 (let (($x722 (= $x531 true)))
 (let (($x699 (= $x722 true)))
 (let (($x691 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x254 (bvadd ?x777 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x347))))
 (let ((?x78 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (=> $x515 (= ?x78 ?x208))))))))))
 ))
 (let (($x628 (and $x316 $x691)))
 (let (($x547 (= $x628 true)))
 (let (($x725 (= $x547 true)))
 (let (($x441 (= $x725 true)))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x254 (bvadd ?x777 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x254))))
 (let ((?x571 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv2 32))) ?x329)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv3 32))) ?x571)))
 (let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x623 (_ bv1 32))))
 (=> $x583 (= ?x285 ?x289)))))))))))
 ))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (bvuge ?x642 (_ bv1 32))))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x623 (_ bv1 32))))
 (= $x583 $x563))))))
 ))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x623 (_ bv0 32))))
 (=> $x503 $x119)))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x642 (_ bv0 32))))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x623 (_ bv0 32))))
 (= $x503 $x555))))))
 ))
 (let (($x213 (and $x192 $x284)))
 (let (($x431 (and $x213 $x636)))
 (let (($x692 (and $x431 $x56)))
 (let (($x248 (= $x692 true)))
 (let (($x274 (= $x248 true)))
 (let (($x546 (= $x274 true)))
 (let (($x17 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x254 (bvadd ?x777 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x254))))
 (let ((?x571 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv2 32))) ?x329)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv3 32))) ?x571)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (=> $x515 (= ?x78 ?x289)))))))))))
 ))
 (let (($x538 (and $x316 $x17)))
 (let (($x357 (= $x538 true)))
 (let (($x29 (= $x357 true)))
 (let (($x749 (= $x29 true)))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x254 (bvadd ?x777 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x347))))
 (let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x623 (_ bv1 32))))
 (=> $x583 (= ?x285 ?x208))))))))))
 ))
 (let (($x98 (and $x431 $x136)))
 (let (($x121 (= $x98 true)))
 (let (($x89 (= $x121 true)))
 (let (($x287 (= $x89 true)))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x777 input.dst.llvm-%m2)))
 (let ((?x532 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x170))))
 (let ((?x461 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv2 32))) ?x532)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv3 32))) ?x461)))
 (let ((?x471 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (=> $x589 (= ?x471 ?x362)))))))))))
 ))
 (let (($x523 (and $x773 $x572)))
 (let (($x615 (= $x523 true)))
 (let (($x483 (= $x615 true)))
 (let (($x200 (= $x483 true)))
 (let ((?x592 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x497 (= (_ bv0 32) ?x592)))
 (let ((?x184 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x511 (= (_ bv0 32) ?x184)))
 (let ((?x698 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x683 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x698)))
 (let ((?x20 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x492 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x366 $x492)))
 (let (($x732 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x732 $x128)))
 (let (($x179 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x590 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x644 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x512 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (and $x512 $x644)))
 (let (($x253 (not $x164)))
 (let (($x634 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x705 (and $x175 $x634)))
 (let (($x40 (and (not $x705) $x253)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x508 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x479 (and $x508 $x51)))
 (let (($x717 (not $x479)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x603 (and $x259 $x38)))
 (let (($x487 (and (not $x603) $x717)))
 (let (($x687 (and (and (and (and (and (and $x487 $x40) $x590) $x179) $x85) $x683) $x511)))
 (let (($x53 (and $x687 $x497)))
 (let (($x658 (= $x53 true)))
 (let (($x576 (= $x658 true)))
 (let (($x205 (= $x576 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x220 (= (_ bv0 2) ?x174)))
 (let (($x444 (= $x220 true)))
 (let (($x569 (= $x444 true)))
 (let (($x735 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x352 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x730 (and $x352 $x735)))
 (let (($x249 (= $x730 true)))
 (let (($x30 (= $x249 true)))
 (let (($x496 (= $x30 true)))
 (let (($x198 (= ?x120 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x763 (= $x198 true)))
 (let (($x765 (= $x763 true)))
 (let (($x68 (and $x765 $x496)))
 (let (($x273 (and $x68 $x569)))
 (let (($x135 (and $x273 $x205)))
 (let (($x229 (and $x135 $x200)))
 (let (($x341 (and $x229 $x287)))
 (let (($x536 (and $x341 $x749)))
 (let (($x124 (and $x536 $x546)))
 (let (($x314 (and $x124 $x441)))
 (let (($x726 (and $x314 $x699)))
 (let (($x226 (and $x726 $x55)))
 (let (($x502 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (=> $x515 (= ?x78 ?x285)))))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x623 (_ bv1 32))))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (= $x515 $x583))))))
 ))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x623 (_ bv0 32))))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x97 (_ bv0 32))))
 (= $x193 $x503))))))
 ))
 (let (($x268 (and $x291 $x389)))
 (let (($x753 (and $x268 $x218)))
 (let (($x266 (and $x753 $x502)))
 (let (($x103 (and $x266 $x226)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x471 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (=> $x589 (= ?x471 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (= $x589 (bvuge ?x359 (_ bv1 32)))))))
 ))
 (let (($x714 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x522 (_ bv0 32))))
 (= $x459 (= ?x359 (_ bv0 32)))))))
 ))
 (let (($x779 (and $x714 $x778)))
 (let (($x682 (and $x779 $x260)))
 (let (($x380 (and $x682 $x57)))
 (let (($x113 (and $x380 $x103)))
 (let (($x693 (=> $x113 $x453)))
 (not $x693)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x525 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x777)))
 (let ((?x452 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x525 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x525))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x525 (_ bv2 32))) ?x452)))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x525 (_ bv3 32))) ?x276)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (=> $x515 (= ?x78 ?x277)))))))))))
 ))
 (let (($x304 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (bvuge ?x642 (_ bv1 32))))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (= $x515 $x563))))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x97 (_ bv0 32))))
 (=> $x193 $x119)))))
 ))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x642 (_ bv0 32))))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x97 (_ bv0 32))))
 (= $x193 $x555))))))
 ))
 (let (($x86 (and $x616 $x389)))
 (let (($x316 (and $x86 $x304)))
 (let (($x95 (and $x316 $x467)))
 (let (($x673 (= $x95 true)))
 (let (($x453 (= $x673 true)))
 (let ((?x476 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x120 (bvneg ?x476)))
 (let (($x731 (= ?x120 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x123 (= $x731 true)))
 (let (($x55 (= $x123 true)))
 (let (($x456 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x777 input.dst.llvm-%m2)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x267))))
 (let ((?x471 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (=> $x589 (= ?x471 ?x334))))))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (bvuge ?x642 (_ bv1 32))))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (= $x589 $x563))))))
 ))
 (let (($x778 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x522 (_ bv0 32))))
 (=> $x459 $x119)))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x642 (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x522 (_ bv0 32))))
 (= $x459 $x555))))))
 ))
 (let (($x302 (and $x477 $x778)))
 (let (($x773 (and $x302 $x489)))
 (let (($x573 (and $x773 $x456)))
 (let (($x531 (= $x573 true)))
 (let (($x722 (= $x531 true)))
 (let (($x699 (= $x722 true)))
 (let (($x691 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x254 (bvadd ?x777 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x347))))
 (let ((?x78 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (=> $x515 (= ?x78 ?x208))))))))))
 ))
 (let (($x628 (and $x316 $x691)))
 (let (($x547 (= $x628 true)))
 (let (($x725 (= $x547 true)))
 (let (($x441 (= $x725 true)))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x254 (bvadd ?x777 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x254))))
 (let ((?x571 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv2 32))) ?x329)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv3 32))) ?x571)))
 (let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x623 (_ bv1 32))))
 (=> $x583 (= ?x285 ?x289)))))))))))
 ))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (bvuge ?x642 (_ bv1 32))))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x623 (_ bv1 32))))
 (= $x583 $x563))))))
 ))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x623 (_ bv0 32))))
 (=> $x503 $x119)))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x642 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x642 (_ bv0 32))))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x623 (_ bv0 32))))
 (= $x503 $x555))))))
 ))
 (let (($x213 (and $x192 $x284)))
 (let (($x431 (and $x213 $x636)))
 (let (($x692 (and $x431 $x56)))
 (let (($x248 (= $x692 true)))
 (let (($x274 (= $x248 true)))
 (let (($x546 (= $x274 true)))
 (let (($x17 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x254 (bvadd ?x777 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x254))))
 (let ((?x571 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv2 32))) ?x329)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x254 (_ bv3 32))) ?x571)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (=> $x515 (= ?x78 ?x289)))))))))))
 ))
 (let (($x538 (and $x316 $x17)))
 (let (($x357 (= $x538 true)))
 (let (($x29 (= $x357 true)))
 (let (($x749 (= $x29 true)))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x254 (bvadd ?x777 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x347))))
 (let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x623 (_ bv1 32))))
 (=> $x583 (= ?x285 ?x208))))))))))
 ))
 (let (($x98 (and $x431 $x136)))
 (let (($x121 (= $x98 true)))
 (let (($x89 (= $x121 true)))
 (let (($x287 (= $x89 true)))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x777 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x170 (bvadd ?x777 input.dst.llvm-%m2)))
 (let ((?x532 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x170))))
 (let ((?x461 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv2 32))) ?x532)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x170 (_ bv3 32))) ?x461)))
 (let ((?x471 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (=> $x589 (= ?x471 ?x362)))))))))))
 ))
 (let (($x523 (and $x773 $x572)))
 (let (($x615 (= $x523 true)))
 (let (($x483 (= $x615 true)))
 (let (($x200 (= $x483 true)))
 (let ((?x592 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x497 (= (_ bv0 32) ?x592)))
 (let ((?x184 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x511 (= (_ bv0 32) ?x184)))
 (let ((?x698 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x683 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x698)))
 (let ((?x20 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x492 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x366 $x492)))
 (let (($x732 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x732 $x128)))
 (let (($x179 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x590 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x644 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x512 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (and $x512 $x644)))
 (let (($x253 (not $x164)))
 (let (($x634 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x705 (and $x175 $x634)))
 (let (($x40 (and (not $x705) $x253)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x508 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x479 (and $x508 $x51)))
 (let (($x717 (not $x479)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x603 (and $x259 $x38)))
 (let (($x487 (and (not $x603) $x717)))
 (let (($x687 (and (and (and (and (and (and $x487 $x40) $x590) $x179) $x85) $x683) $x511)))
 (let (($x53 (and $x687 $x497)))
 (let (($x658 (= $x53 true)))
 (let (($x576 (= $x658 true)))
 (let (($x205 (= $x576 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x220 (= (_ bv0 2) ?x174)))
 (let (($x444 (= $x220 true)))
 (let (($x569 (= $x444 true)))
 (let (($x735 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x352 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x730 (and $x352 $x735)))
 (let (($x249 (= $x730 true)))
 (let (($x30 (= $x249 true)))
 (let (($x496 (= $x30 true)))
 (let (($x198 (= ?x120 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x763 (= $x198 true)))
 (let (($x765 (= $x763 true)))
 (let (($x68 (and $x765 $x496)))
 (let (($x273 (and $x68 $x569)))
 (let (($x135 (and $x273 $x205)))
 (let (($x229 (and $x135 $x200)))
 (let (($x341 (and $x229 $x287)))
 (let (($x536 (and $x341 $x749)))
 (let (($x124 (and $x536 $x546)))
 (let (($x314 (and $x124 $x441)))
 (let (($x726 (and $x314 $x699)))
 (let (($x226 (and $x726 $x55)))
 (let (($x502 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x78 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (=> $x515 (= ?x78 ?x285)))))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x623 (_ bv1 32))))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x97 (_ bv1 32))))
 (= $x515 $x583))))))
 ))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x503 (= ?x623 (_ bv0 32))))
 (let ((?x97 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x97 (_ bv0 32))))
 (= $x193 $x503))))))
 ))
 (let (($x268 (and $x291 $x389)))
 (let (($x753 (and $x268 $x218)))
 (let (($x266 (and $x753 $x502)))
 (let (($x103 (and $x266 $x226)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x471 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (=> $x589 (= ?x471 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x589 (bvuge ?x522 (_ bv1 32))))
 (= $x589 (bvuge ?x359 (_ bv1 32)))))))
 ))
 (let (($x714 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x359 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (= ?x522 (_ bv0 32))))
 (= $x459 (= ?x359 (_ bv0 32)))))))
 ))
 (let (($x779 (and $x714 $x778)))
 (let (($x682 (and $x779 $x260)))
 (let (($x380 (and $x682 $x57)))
 (let (($x113 (and $x380 $x103)))
 (let (($x693 (=> $x113 $x453)))
 (not $x693)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000041)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x87c04100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6c600004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6c600007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x87c04103)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6c600004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x87c04100)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000041 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000041)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86a0a904)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x0c240420)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02c13440)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0c240420)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02c13443)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86a0a907)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02c13440)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86a0a904)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x0c240420)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0c240422) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x627 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x605 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_5 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x668 (bvadd ?x645 ?x605)))
 (let ((?x667 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x668))))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv2 32))) ?x667)))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv3 32))) ?x37)))
 (let ((?x532 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (=> $x773 (= ?x532 ?x338))))))))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x728 (_ bv1 32))))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (= $x773 $x617))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x723 (= false false)))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x184 (_ bv0 32))))
 (=> $x511 $x723)))))
 ))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x728 (_ bv0 32))))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x184 (_ bv0 32))))
 (= $x511 $x469))))))
 ))
 (let (($x215 (and $x582 $x118)))
 (let (($x775 (and $x215 $x238)))
 (let (($x261 (and $x775 $x627)))
 (let (($x343 (= $x261 true)))
 (let (($x629 (= $x343 true)))
 (let ((?x286 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x8 (= (_ bv0 2) ?x286)))
 (let (($x711 (= $x8 true)))
 (let (($x377 (= $x711 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x321 (bvadd ?x645 input.dst.llvm-%m2)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem ?x321))))
 (let ((?x631 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv2 32))) ?x110))))
 (let ((?x434 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (=> $x735 (= ?x434 ?x631))))))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x728 (_ bv1 32))))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (= $x735 $x617))))))
 ))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x723 (= false false)))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x753 (_ bv0 32))))
 (=> $x78 $x723)))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x728 (_ bv0 32))))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x753 (_ bv0 32))))
 (= $x78 $x469))))))
 ))
 (let (($x163 (and $x428 $x578)))
 (let (($x176 (and $x163 $x101)))
 (let (($x373 (and $x176 $x104)))
 (let (($x19 (= $x373 true)))
 (let (($x299 (= $x19 true)))
 (let (($x756 (= $x299 true)))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x65 (bvadd ?x645 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x244))))
 (let ((?x461 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (=> $x41 (= ?x461 ?x312))))))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x728 (_ bv1 32))))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (= $x41 $x617))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x723 (= false false)))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x497 (= ?x592 (_ bv0 32))))
 (=> $x497 $x723)))))
 ))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x728 (_ bv0 32))))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x497 (= ?x592 (_ bv0 32))))
 (= $x497 $x469))))))
 ))
 (let (($x385 (and $x18 $x135)))
 (let (($x539 (and $x385 $x165)))
 (let (($x31 (and $x539 $x416)))
 (let (($x424 (= $x31 true)))
 (let (($x596 (= $x424 true)))
 (let (($x280 (= $x596 true)))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x65 (bvadd ?x645 input.dst.llvm-%m1)))
 (let ((?x344 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x65))))
 (let ((?x608 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv2 32))) ?x344)))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv3 32))) ?x608)))
 (let ((?x532 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (=> $x773 (= ?x532 ?x155)))))))))))
 ))
 (let (($x544 (and $x775 $x433)))
 (let (($x652 (= $x544 true)))
 (let (($x133 (= $x652 true)))
 (let (($x33 (= $x133 true)))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x65 (bvadd ?x645 input.dst.llvm-%m1)))
 (let ((?x344 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x65))))
 (let ((?x608 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv2 32))) ?x344)))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv3 32))) ?x608)))
 (let ((?x461 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (=> $x41 (= ?x461 ?x155)))))))))))
 ))
 (let (($x734 (and $x539 $x36)))
 (let (($x675 (= $x734 true)))
 (let (($x189 (= $x675 true)))
 (let (($x207 (= $x189 true)))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x65 (bvadd ?x645 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x244))))
 (let ((?x532 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (=> $x773 (= ?x532 ?x312))))))))))
 ))
 (let (($x609 (and $x775 $x257)))
 (let (($x99 (= $x609 true)))
 (let (($x751 (= $x99 true)))
 (let (($x300 (= $x751 true)))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x321 (bvadd ?x645 input.dst.llvm-%m2)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x321))))
 (let ((?x663 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv2 32))) ?x199)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv3 32))) ?x663)))
 (let ((?x434 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (=> $x735 (= ?x434 ?x5)))))))))))
 ))
 (let (($x445 (and $x176 $x449)))
 (let (($x491 (= $x445 true)))
 (let (($x250 (= $x491 true)))
 (let (($x339 (= $x250 true)))
 (let (($x314 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x547 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x473 (and $x547 $x314)))
 (let (($x612 (= $x473 true)))
 (let (($x7 (= $x612 true)))
 (let (($x494 (= $x7 true)))
 (let ((?x357 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x29 (= (_ bv0 32) ?x357)))
 (let ((?x17 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x538 (= (_ bv0 32) ?x17)))
 (let ((?x695 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x695)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x369 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x571 (and $x369 $x329)))
 (let (($x545 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x545 $x571)))
 (let (($x316 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x713 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x121 $x89)))
 (let (($x341 (not $x287)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x202 $x136)))
 (let (($x616 (and (not $x98) $x341)))
 (let (($x581 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x462 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x347 (and $x462 $x581)))
 (let (($x305 (not $x347)))
 (let (($x442 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x73 $x442)))
 (let (($x203 (and (not $x100) $x305)))
 (let (($x692 (and (and (and (and (and (and $x203 $x616) $x713) $x316) $x289) $x84) $x538)))
 (let (($x248 (and $x692 $x29)))
 (let (($x274 (= $x248 true)))
 (let (($x546 (= $x274 true)))
 (let (($x124 (= $x546 true)))
 (let ((?x483 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x200 (bvneg ?x483)))
 (let (($x213 (= ?x200 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x282 (= $x213 true)))
 (let (($x636 (= $x282 true)))
 (let (($x676 (= ?x200 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x192 (= $x676 true)))
 (let (($x153 (= $x192 true)))
 (let (($x431 (and $x153 $x636)))
 (let (($x214 (and $x431 $x124)))
 (let (($x267 (and $x214 $x494)))
 (let (($x690 (and $x267 $x339)))
 (let (($x231 (and $x690 $x300)))
 (let (($x653 (and $x231 $x207)))
 (let (($x336 (and $x653 $x33)))
 (let (($x761 (and $x336 $x280)))
 (let (($x391 (and $x761 $x756)))
 (let (($x568 (and $x391 $x377)))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x532 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x461 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (=> $x41 (= ?x461 ?x532)))))))
 ))
 (let (($x777 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (= $x41 $x773))))))
 ))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x184 (_ bv0 32))))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x497 (= ?x592 (_ bv0 32))))
 (= $x497 $x511))))))
 ))
 (let (($x141 (and $x658 $x135)))
 (let (($x170 (and $x141 $x777)))
 (let (($x572 (and $x170 $x408)))
 (let (($x333 (and $x572 $x568)))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x434 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (=> $x735 (= ?x434 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (= $x735 (bvuge ?x583 (_ bv1 32)))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x753 (_ bv0 32))))
 (= $x78 (= ?x583 (_ bv0 32)))))))
 ))
 (let (($x429 (and $x222 $x578)))
 (let (($x30 (and $x429 $x249)))
 (let (($x603 (and $x30 $x38)))
 (let (($x745 (and $x603 $x333)))
 (let (($x28 (=> $x745 $x629)))
 (let (($x258 (not $x28)))
 (let (($x12 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x146 (select solver-mem_5 memmask-bounded-var!)))
 (let (($x32 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x406 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x504 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x406)))
 (let (($x733 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x406)))
 (let (($x217 (or false (or false (and (and true (or $x308 $x733)) (or $x504 $x32))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x217) (= ?x146 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x146 (_ bv0 8)))))))))))
 ))
 (and (and true $x12) $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x627 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x605 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_5 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x668 (bvadd ?x645 ?x605)))
 (let ((?x667 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x668))))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv2 32))) ?x667)))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x668 (_ bv3 32))) ?x37)))
 (let ((?x532 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (=> $x773 (= ?x532 ?x338))))))))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x728 (_ bv1 32))))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (= $x773 $x617))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x723 (= false false)))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x184 (_ bv0 32))))
 (=> $x511 $x723)))))
 ))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x728 (_ bv0 32))))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x184 (_ bv0 32))))
 (= $x511 $x469))))))
 ))
 (let (($x215 (and $x582 $x118)))
 (let (($x775 (and $x215 $x238)))
 (let (($x261 (and $x775 $x627)))
 (let (($x343 (= $x261 true)))
 (let (($x629 (= $x343 true)))
 (let ((?x286 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x8 (= (_ bv0 2) ?x286)))
 (let (($x711 (= $x8 true)))
 (let (($x377 (= $x711 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x321 (bvadd ?x645 input.dst.llvm-%m2)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem ?x321))))
 (let ((?x631 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv2 32))) ?x110))))
 (let ((?x434 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (=> $x735 (= ?x434 ?x631))))))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x728 (_ bv1 32))))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (= $x735 $x617))))))
 ))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x723 (= false false)))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x753 (_ bv0 32))))
 (=> $x78 $x723)))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x728 (_ bv0 32))))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x753 (_ bv0 32))))
 (= $x78 $x469))))))
 ))
 (let (($x163 (and $x428 $x578)))
 (let (($x176 (and $x163 $x101)))
 (let (($x373 (and $x176 $x104)))
 (let (($x19 (= $x373 true)))
 (let (($x299 (= $x19 true)))
 (let (($x756 (= $x299 true)))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x65 (bvadd ?x645 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x244))))
 (let ((?x461 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (=> $x41 (= ?x461 ?x312))))))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x617 (bvuge ?x728 (_ bv1 32))))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (= $x41 $x617))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x723 (= false false)))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x497 (= ?x592 (_ bv0 32))))
 (=> $x497 $x723)))))
 ))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x728 (_ bv0 32))))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x497 (= ?x592 (_ bv0 32))))
 (= $x497 $x469))))))
 ))
 (let (($x385 (and $x18 $x135)))
 (let (($x539 (and $x385 $x165)))
 (let (($x31 (and $x539 $x416)))
 (let (($x424 (= $x31 true)))
 (let (($x596 (= $x424 true)))
 (let (($x280 (= $x596 true)))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x65 (bvadd ?x645 input.dst.llvm-%m1)))
 (let ((?x344 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x65))))
 (let ((?x608 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv2 32))) ?x344)))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv3 32))) ?x608)))
 (let ((?x532 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (=> $x773 (= ?x532 ?x155)))))))))))
 ))
 (let (($x544 (and $x775 $x433)))
 (let (($x652 (= $x544 true)))
 (let (($x133 (= $x652 true)))
 (let (($x33 (= $x133 true)))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x65 (bvadd ?x645 input.dst.llvm-%m1)))
 (let ((?x344 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x65))))
 (let ((?x608 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv2 32))) ?x344)))
 (let ((?x155 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x65 (_ bv3 32))) ?x608)))
 (let ((?x461 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (=> $x41 (= ?x461 ?x155)))))))))))
 ))
 (let (($x734 (and $x539 $x36)))
 (let (($x675 (= $x734 true)))
 (let (($x189 (= $x675 true)))
 (let (($x207 (= $x189 true)))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x65 (bvadd ?x645 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x244))))
 (let ((?x532 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (=> $x773 (= ?x532 ?x312))))))))))
 ))
 (let (($x609 (and $x775 $x257)))
 (let (($x99 (= $x609 true)))
 (let (($x751 (= $x99 true)))
 (let (($x300 (= $x751 true)))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x645 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x321 (bvadd ?x645 input.dst.llvm-%m2)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x321))))
 (let ((?x663 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv2 32))) ?x199)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv3 32))) ?x663)))
 (let ((?x434 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (=> $x735 (= ?x434 ?x5)))))))))))
 ))
 (let (($x445 (and $x176 $x449)))
 (let (($x491 (= $x445 true)))
 (let (($x250 (= $x491 true)))
 (let (($x339 (= $x250 true)))
 (let (($x314 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x547 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x473 (and $x547 $x314)))
 (let (($x612 (= $x473 true)))
 (let (($x7 (= $x612 true)))
 (let (($x494 (= $x7 true)))
 (let ((?x357 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x29 (= (_ bv0 32) ?x357)))
 (let ((?x17 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x538 (= (_ bv0 32) ?x17)))
 (let ((?x695 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x695)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x369 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x571 (and $x369 $x329)))
 (let (($x545 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x289 (and $x545 $x571)))
 (let (($x316 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x713 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (and $x121 $x89)))
 (let (($x341 (not $x287)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x202 $x136)))
 (let (($x616 (and (not $x98) $x341)))
 (let (($x581 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x462 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x347 (and $x462 $x581)))
 (let (($x305 (not $x347)))
 (let (($x442 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x73 $x442)))
 (let (($x203 (and (not $x100) $x305)))
 (let (($x692 (and (and (and (and (and (and $x203 $x616) $x713) $x316) $x289) $x84) $x538)))
 (let (($x248 (and $x692 $x29)))
 (let (($x274 (= $x248 true)))
 (let (($x546 (= $x274 true)))
 (let (($x124 (= $x546 true)))
 (let ((?x483 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x200 (bvneg ?x483)))
 (let (($x213 (= ?x200 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x282 (= $x213 true)))
 (let (($x636 (= $x282 true)))
 (let (($x676 (= ?x200 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x192 (= $x676 true)))
 (let (($x153 (= $x192 true)))
 (let (($x431 (and $x153 $x636)))
 (let (($x214 (and $x431 $x124)))
 (let (($x267 (and $x214 $x494)))
 (let (($x690 (and $x267 $x339)))
 (let (($x231 (and $x690 $x300)))
 (let (($x653 (and $x231 $x207)))
 (let (($x336 (and $x653 $x33)))
 (let (($x761 (and $x336 $x280)))
 (let (($x391 (and $x761 $x756)))
 (let (($x568 (and $x391 $x377)))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x532 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x461 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (=> $x41 (= ?x461 ?x532)))))))
 ))
 (let (($x777 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x184 (_ bv1 32))))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x592 (_ bv1 32))))
 (= $x41 $x773))))))
 ))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x511 (= ?x184 (_ bv0 32))))
 (let ((?x592 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x497 (= ?x592 (_ bv0 32))))
 (= $x497 $x511))))))
 ))
 (let (($x141 (and $x658 $x135)))
 (let (($x170 (and $x141 $x777)))
 (let (($x572 (and $x170 $x408)))
 (let (($x333 (and $x572 $x568)))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x434 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (=> $x735 (= ?x434 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x735 (bvuge ?x753 (_ bv1 32))))
 (= $x735 (bvuge ?x583 (_ bv1 32)))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x753 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x753 (_ bv0 32))))
 (= $x78 (= ?x583 (_ bv0 32)))))))
 ))
 (let (($x429 (and $x222 $x578)))
 (let (($x30 (and $x429 $x249)))
 (let (($x603 (and $x30 $x38)))
 (let (($x745 (and $x603 $x333)))
 (let (($x28 (=> $x745 $x629)))
 (let (($x258 (not $x28)))
 (let (($x12 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x146 (select solver-mem_5 memmask-bounded-var!)))
 (let (($x32 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x406 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x504 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x406)))
 (let (($x733 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x406)))
 (let (($x217 (or false (or false (and (and true (or $x308 $x733)) (or $x504 $x32))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x217) (= ?x146 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x146 (_ bv0 8)))))))))))
 ))
 (and (and true $x12) $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x140f2ab8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x510f0dec)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x510f0def)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x140f2abb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x510f0dec)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x140f2ab8)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x510f0dee) #x20
    (ite (= x!0 #x1b000007) #x40
      #x00)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!8 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!8 (k!7 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!10 (k!7 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!9 (k!6 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x704d05f2) #xaf
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!2))
              (= x!3 (_ as-array k!3))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x1b000005
      #x510f0def))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1b000007) #x40
      #x00))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x223 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x350)))
 (let ((?x436 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x436))))
 (let ((?x408 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (=> $x658 (= ?x408 ?x294))))))))))
 ))
 (let (($x553 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x251 (_ bv1 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (= $x658 $x456))))))
 ))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x332 (= false false)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (= ?x266 (_ bv0 32))))
 (=> $x578 $x332)))))
 ))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x251 (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (= ?x266 (_ bv0 32))))
 (= $x578 $x522))))))
 ))
 (let (($x40 (and $x253 $x30)))
 (let (($x379 (and $x40 $x553)))
 (let (($x143 (and $x379 $x396)))
 (let (($x310 (= $x143 true)))
 (let (($x115 (= $x310 true)))
 (let ((?x617 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x48 (bvneg ?x617)))
 (let (($x519 (= ?x48 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (= $x519 true)))
 (let (($x626 (= $x35 true)))
 (let (($x549 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x350 input.dst.llvm-%m2)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x712))))
 (let ((?x408 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (=> $x658 (= ?x408 ?x345))))))))))
 ))
 (let (($x405 (and $x379 $x549)))
 (let (($x392 (= $x405 true)))
 (let (($x71 (= $x392 true)))
 (let (($x23 (= $x71 true)))
 (let (($x525 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x419 (bvadd ?x350 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv1 32))) (select input.dst.llvm-mem ?x419))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv2 32))) ?x265))))
 (let ((?x219 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (=> $x691 (= ?x219 ?x178))))))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x251 (_ bv1 32))))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (= $x691 $x456))))))
 ))
 (let (($x695 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x332 (= false false)))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x595 (_ bv0 32))))
 (=> $x230 $x332)))))
 ))
 (let (($x772 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x251 (_ bv0 32))))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x595 (_ bv0 32))))
 (= $x230 $x522))))))
 ))
 (let (($x537 (and $x772 $x695)))
 (let (($x179 (and $x537 $x320)))
 (let (($x55 (and $x179 $x525)))
 (let (($x731 (= $x55 true)))
 (let (($x226 (= $x731 true)))
 (let (($x423 (= $x226 true)))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x419 (bvadd ?x350 input.dst.llvm-%m1)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x419))))
 (let ((?x786 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv2 32))) ?x39)))
 (let ((?x630 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv3 32))) ?x786)))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x752 (bvuge ?x197 (_ bv1 32))))
 (=> $x752 (= ?x493 ?x630)))))))))))
 ))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x251 (_ bv1 32))))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x752 (bvuge ?x197 (_ bv1 32))))
 (= $x752 $x456))))))
 ))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x332 (= false false)))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x197 (_ bv0 32))))
 (=> $x545 $x332)))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x251 (_ bv0 32))))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x197 (_ bv0 32))))
 (= $x545 $x522))))))
 ))
 (let (($x353 (and $x177 $x195)))
 (let (($x375 (and $x353 $x621)))
 (let (($x662 (and $x375 $x415)))
 (let (($x352 (= $x662 true)))
 (let (($x528 (= $x352 true)))
 (let (($x422 (= $x528 true)))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x419 (bvadd ?x350 input.dst.llvm-%m1)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x419))))
 (let ((?x786 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv2 32))) ?x39)))
 (let ((?x630 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv3 32))) ?x786)))
 (let ((?x219 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (=> $x691 (= ?x219 ?x630)))))))))))
 ))
 (let (($x330 (and $x179 $x380)))
 (let (($x97 (= $x330 true)))
 (let (($x193 (= $x97 true)))
 (let (($x585 (= $x193 true)))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x419 (bvadd ?x350 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv1 32))) (select input.dst.llvm-mem ?x419))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv2 32))) ?x265))))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x752 (bvuge ?x197 (_ bv1 32))))
 (=> $x752 (= ?x493 ?x178))))))))))
 ))
 (let (($x778 (and $x375 $x543)))
 (let (($x779 (= $x778 true)))
 (let (($x589 (= $x779 true)))
 (let (($x533 (= $x589 true)))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x350 input.dst.llvm-%m2)))
 (let ((?x412 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x738 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x412)))
 (let ((?x371 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x738)))
 (let ((?x408 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (=> $x658 (= ?x408 ?x371)))))))))))
 ))
 (let (($x395 (and $x379 $x559)))
 (let (($x388 (= $x395 true)))
 (let (($x162 (= $x388 true)))
 (let (($x255 (= $x162 true)))
 (let ((?x14 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x234 (= (_ bv0 32) ?x14)))
 (let ((?x539 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x478 (= (_ bv0 32) ?x539)))
 (let ((?x482 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x482)))
 (let ((?x231 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x364 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x231)))
 (let (($x751 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x751 $x364)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x385 (and $x99 $x18)))
 (let (($x609 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x63 $x187)))
 (let (($x244 (not $x94)))
 (let (($x593 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x324 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x324 $x593)))
 (let (($x312 (and (not $x169) $x244)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x365 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x775 (and $x365 $x238)))
 (let (($x239 (not $x775)))
 (let (($x460 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x292 $x460)))
 (let (($x342 (and (not $x118) $x239)))
 (let (($x671 (and (and (and (and (and (and $x342 $x312) $x358) $x609) $x385) $x165) $x478)))
 (let (($x36 (and $x671 $x234)))
 (let (($x734 (= $x36 true)))
 (let (($x675 (= $x734 true)))
 (let (($x189 (= $x675 true)))
 (let ((?x246 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x449 (= (_ bv0 2) ?x246)))
 (let (($x445 (= $x449 true)))
 (let (($x491 (= $x445 true)))
 (let (($x470 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x103 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x468 (and $x103 $x470)))
 (let (($x145 (= $x468 true)))
 (let (($x199 (= $x145 true)))
 (let (($x663 (= $x199 true)))
 (let (($x176 (= ?x48 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x699 (= $x176 true)))
 (let (($x645 (= $x699 true)))
 (let (($x5 (and $x645 $x663)))
 (let (($x250 (and $x5 $x491)))
 (let (($x207 (and $x250 $x189)))
 (let (($x710 (and $x207 $x255)))
 (let (($x708 (and $x710 $x533)))
 (let (($x291 (and $x708 $x585)))
 (let (($x174 (and $x291 $x422)))
 (let (($x278 (and $x174 $x423)))
 (let (($x414 (and $x278 $x23)))
 (let (($x60 (and $x414 $x626)))
 (let (($x469 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x219 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (=> $x691 (= ?x219 ?x493)))))))
 ))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x752 (bvuge ?x197 (_ bv1 32))))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (= $x691 $x752))))))
 ))
 (let (($x571 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x197 (_ bv0 32))))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x595 (_ bv0 32))))
 (= $x230 $x545))))))
 ))
 (let (($x84 (and $x571 $x695)))
 (let (($x725 (and $x84 $x547)))
 (let (($x484 (and $x725 $x469)))
 (let (($x382 (and $x484 $x60)))
 (let (($x615 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (=> $x658 (= ?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (= $x658 (bvuge ?x285 (_ bv1 32)))))))
 ))
 (let (($x735 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (= ?x266 (_ bv0 32))))
 (= $x578 (= ?x285 (_ bv0 32)))))))
 ))
 (let (($x434 (and $x735 $x30)))
 (let (($x141 (and $x434 $x135)))
 (let (($x483 (and $x141 $x615)))
 (let (($x317 (and $x483 $x382)))
 (let (($x106 (=> $x317 $x115)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x223 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x350)))
 (let ((?x436 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x436))))
 (let ((?x408 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (=> $x658 (= ?x408 ?x294))))))))))
 ))
 (let (($x553 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x251 (_ bv1 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (= $x658 $x456))))))
 ))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x332 (= false false)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (= ?x266 (_ bv0 32))))
 (=> $x578 $x332)))))
 ))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x251 (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (= ?x266 (_ bv0 32))))
 (= $x578 $x522))))))
 ))
 (let (($x40 (and $x253 $x30)))
 (let (($x379 (and $x40 $x553)))
 (let (($x143 (and $x379 $x396)))
 (let (($x310 (= $x143 true)))
 (let (($x115 (= $x310 true)))
 (let ((?x617 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x48 (bvneg ?x617)))
 (let (($x519 (= ?x48 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x35 (= $x519 true)))
 (let (($x626 (= $x35 true)))
 (let (($x549 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x350 input.dst.llvm-%m2)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x712))))
 (let ((?x408 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (=> $x658 (= ?x408 ?x345))))))))))
 ))
 (let (($x405 (and $x379 $x549)))
 (let (($x392 (= $x405 true)))
 (let (($x71 (= $x392 true)))
 (let (($x23 (= $x71 true)))
 (let (($x525 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x419 (bvadd ?x350 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv1 32))) (select input.dst.llvm-mem ?x419))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv2 32))) ?x265))))
 (let ((?x219 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (=> $x691 (= ?x219 ?x178))))))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x251 (_ bv1 32))))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (= $x691 $x456))))))
 ))
 (let (($x695 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x332 (= false false)))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x595 (_ bv0 32))))
 (=> $x230 $x332)))))
 ))
 (let (($x772 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x251 (_ bv0 32))))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x595 (_ bv0 32))))
 (= $x230 $x522))))))
 ))
 (let (($x537 (and $x772 $x695)))
 (let (($x179 (and $x537 $x320)))
 (let (($x55 (and $x179 $x525)))
 (let (($x731 (= $x55 true)))
 (let (($x226 (= $x731 true)))
 (let (($x423 (= $x226 true)))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x419 (bvadd ?x350 input.dst.llvm-%m1)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x419))))
 (let ((?x786 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv2 32))) ?x39)))
 (let ((?x630 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv3 32))) ?x786)))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x752 (bvuge ?x197 (_ bv1 32))))
 (=> $x752 (= ?x493 ?x630)))))))))))
 ))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (bvuge ?x251 (_ bv1 32))))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x752 (bvuge ?x197 (_ bv1 32))))
 (= $x752 $x456))))))
 ))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x332 (= false false)))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x197 (_ bv0 32))))
 (=> $x545 $x332)))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x522 (= ?x251 (_ bv0 32))))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x197 (_ bv0 32))))
 (= $x545 $x522))))))
 ))
 (let (($x353 (and $x177 $x195)))
 (let (($x375 (and $x353 $x621)))
 (let (($x662 (and $x375 $x415)))
 (let (($x352 (= $x662 true)))
 (let (($x528 (= $x352 true)))
 (let (($x422 (= $x528 true)))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x419 (bvadd ?x350 input.dst.llvm-%m1)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x419))))
 (let ((?x786 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv2 32))) ?x39)))
 (let ((?x630 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x419 (_ bv3 32))) ?x786)))
 (let ((?x219 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (=> $x691 (= ?x219 ?x630)))))))))))
 ))
 (let (($x330 (and $x179 $x380)))
 (let (($x97 (= $x330 true)))
 (let (($x193 (= $x97 true)))
 (let (($x585 (= $x193 true)))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x419 (bvadd ?x350 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv1 32))) (select input.dst.llvm-mem ?x419))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x419 (_ bv2 32))) ?x265))))
 (let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x752 (bvuge ?x197 (_ bv1 32))))
 (=> $x752 (= ?x493 ?x178))))))))))
 ))
 (let (($x778 (and $x375 $x543)))
 (let (($x779 (= $x778 true)))
 (let (($x589 (= $x779 true)))
 (let (($x533 (= $x589 true)))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x350 input.dst.llvm-%m2)))
 (let ((?x412 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x738 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x412)))
 (let ((?x371 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x738)))
 (let ((?x408 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (=> $x658 (= ?x408 ?x371)))))))))))
 ))
 (let (($x395 (and $x379 $x559)))
 (let (($x388 (= $x395 true)))
 (let (($x162 (= $x388 true)))
 (let (($x255 (= $x162 true)))
 (let ((?x14 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x234 (= (_ bv0 32) ?x14)))
 (let ((?x539 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x478 (= (_ bv0 32) ?x539)))
 (let ((?x482 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x482)))
 (let ((?x231 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x364 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x231)))
 (let (($x751 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x751 $x364)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x385 (and $x99 $x18)))
 (let (($x609 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x63 $x187)))
 (let (($x244 (not $x94)))
 (let (($x593 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x324 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x324 $x593)))
 (let (($x312 (and (not $x169) $x244)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x365 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x775 (and $x365 $x238)))
 (let (($x239 (not $x775)))
 (let (($x460 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x292 $x460)))
 (let (($x342 (and (not $x118) $x239)))
 (let (($x671 (and (and (and (and (and (and $x342 $x312) $x358) $x609) $x385) $x165) $x478)))
 (let (($x36 (and $x671 $x234)))
 (let (($x734 (= $x36 true)))
 (let (($x675 (= $x734 true)))
 (let (($x189 (= $x675 true)))
 (let ((?x246 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x449 (= (_ bv0 2) ?x246)))
 (let (($x445 (= $x449 true)))
 (let (($x491 (= $x445 true)))
 (let (($x470 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x103 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x468 (and $x103 $x470)))
 (let (($x145 (= $x468 true)))
 (let (($x199 (= $x145 true)))
 (let (($x663 (= $x199 true)))
 (let (($x176 (= ?x48 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x699 (= $x176 true)))
 (let (($x645 (= $x699 true)))
 (let (($x5 (and $x645 $x663)))
 (let (($x250 (and $x5 $x491)))
 (let (($x207 (and $x250 $x189)))
 (let (($x710 (and $x207 $x255)))
 (let (($x708 (and $x710 $x533)))
 (let (($x291 (and $x708 $x585)))
 (let (($x174 (and $x291 $x422)))
 (let (($x278 (and $x174 $x423)))
 (let (($x414 (and $x278 $x23)))
 (let (($x60 (and $x414 $x626)))
 (let (($x469 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x219 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (=> $x691 (= ?x219 ?x493)))))))
 ))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x752 (bvuge ?x197 (_ bv1 32))))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (bvuge ?x595 (_ bv1 32))))
 (= $x691 $x752))))))
 ))
 (let (($x571 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x197 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x197 (_ bv0 32))))
 (let ((?x595 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x595 (_ bv0 32))))
 (= $x230 $x545))))))
 ))
 (let (($x84 (and $x571 $x695)))
 (let (($x725 (and $x84 $x547)))
 (let (($x484 (and $x725 $x469)))
 (let (($x382 (and $x484 $x60)))
 (let (($x615 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (=> $x658 (= ?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x266 (_ bv1 32))))
 (= $x658 (bvuge ?x285 (_ bv1 32)))))))
 ))
 (let (($x735 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x266 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (= ?x266 (_ bv0 32))))
 (= $x578 (= ?x285 (_ bv0 32)))))))
 ))
 (let (($x434 (and $x735 $x30)))
 (let (($x141 (and $x434 $x135)))
 (let (($x483 (and $x141 $x615)))
 (let (($x317 (and $x483 $x382)))
 (let (($x106 (=> $x317 $x115)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18421404)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x14041413)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18421407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18421404)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6b520110)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x267a7694)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff820454)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000032)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x267a7694)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff820457)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6b520113)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff820454)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6b520110)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x267a7694)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000cb) #x02
      #x00))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000cb) #x02
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000032))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x302 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_6 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x42 (bvadd ?x450 ?x302)))
 (let ((?x741 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x404 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x741))))
 (let ((?x690 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (=> $x470 (= ?x690 ?x404)))))))))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x453 (_ bv1 32))))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (= $x470 $x464))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x728 (= false false)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x725 (_ bv0 32))))
 (=> $x219 $x728)))))
 ))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x453 (_ bv0 32))))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x725 (_ bv0 32))))
 (= $x219 $x11))))))
 ))
 (let (($x95 (and $x467 $x428)))
 (let (($x554 (and $x95 $x232)))
 (let (($x67 (and $x554 $x211)))
 (let (($x142 (= $x67 true)))
 (let (($x649 (= $x142 true)))
 (let ((?x149 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x301 (= (_ bv0 2) ?x149)))
 (let (($x340 (= $x301 true)))
 (let (($x326 (= $x340 true)))
 (let (($x768 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x443 (bvadd ?x450 input.dst.llvm-%m2)))
 (let ((?x769 (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv1 32))) (select input.dst.llvm-mem ?x443))))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv2 32))) ?x769))))
 (let ((?x690 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (=> $x470 (= ?x690 ?x613))))))))))
 ))
 (let (($x44 (and $x554 $x768)))
 (let (($x463 (= $x44 true)))
 (let (($x654 (= $x463 true)))
 (let (($x767 (= $x654 true)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x507 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x760 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem ?x507))))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv2 32))) ?x760))))
 (let ((?x738 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (=> $x652 (= ?x738 ?x495))))))))))
 ))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x453 (_ bv1 32))))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (= $x652 $x464))))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x728 (= false false)))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x14 (_ bv0 32))))
 (=> $x234 $x728)))))
 ))
 (let (($x612 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x453 (_ bv0 32))))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x14 (_ bv0 32))))
 (= $x234 $x11))))))
 ))
 (let (($x494 (and $x612 $x207)))
 (let (($x722 (and $x494 $x227)))
 (let (($x647 (and $x722 $x188)))
 (let (($x190 (= $x647 true)))
 (let (($x614 (= $x190 true)))
 (let (($x127 (= $x614 true)))
 (let (($x756 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x507 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x507))))
 (let ((?x416 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv2 32))) ?x212)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv3 32))) ?x416)))
 (let ((?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x539 (_ bv1 32))))
 (=> $x379 (= ?x412 ?x270)))))))))))
 ))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x453 (_ bv1 32))))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x539 (_ bv1 32))))
 (= $x379 $x464))))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x728 (= false false)))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x539 (_ bv0 32))))
 (=> $x478 $x728)))))
 ))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x453 (_ bv0 32))))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x539 (_ bv0 32))))
 (= $x478 $x11))))))
 ))
 (let (($x600 (and $x83 $x117)))
 (let (($x116 (and $x600 $x359)))
 (let (($x391 (and $x116 $x756)))
 (let (($x299 (= $x391 true)))
 (let (($x542 (= $x299 true)))
 (let (($x711 (= $x542 true)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x507 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x507))))
 (let ((?x416 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv2 32))) ?x212)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv3 32))) ?x416)))
 (let ((?x738 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (=> $x652 (= ?x738 ?x270)))))))))))
 ))
 (let (($x631 (and $x722 $x210)))
 (let (($x514 (= $x631 true)))
 (let (($x104 (= $x514 true)))
 (let (($x373 (= $x104 true)))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x507 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x760 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem ?x507))))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv2 32))) ?x760))))
 (let ((?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x539 (_ bv1 32))))
 (=> $x379 (= ?x412 ?x495))))))))))
 ))
 (let (($x82 (and $x116 $x681)))
 (let (($x12 (= $x82 true)))
 (let (($x440 (= $x12 true)))
 (let (($x508 (= $x440 true)))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x443 (bvadd ?x450 input.dst.llvm-%m2)))
 (let ((?x705 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x443 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x443))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x443 (_ bv2 32))) ?x705)))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x443 (_ bv3 32))) ?x175)))
 (let ((?x690 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (=> $x470 (= ?x690 ?x269)))))))))))
 ))
 (let (($x213 (and $x554 $x284)))
 (let (($x636 (= $x213 true)))
 (let (($x431 (= $x636 true)))
 (let (($x73 (= $x431 true)))
 (let (($x278 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x731 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x236 (and $x731 $x278)))
 (let (($x161 (= $x236 true)))
 (let (($x736 (= $x161 true)))
 (let (($x46 (= $x736 true)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x193 (= (_ bv0 32) ?x97)))
 (let ((?x380 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x330 (= (_ bv0 32) ?x380)))
 (let ((?x784 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x784)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x786 (and $x331 $x39)))
 (let (($x471 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x630 (and $x471 $x786)))
 (let (($x179 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x590 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x589 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x779 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x533 (and $x779 $x589)))
 (let (($x708 (not $x533)))
 (let (($x543 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x778 (and $x119 $x543)))
 (let (($x772 (and (not $x778) $x708)))
 (let (($x328 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x87 $x328)))
 (let (($x486 (not $x265)))
 (let (($x635 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x714 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x510 (and $x714 $x635)))
 (let (($x360 (and (not $x510) $x486)))
 (let (($x662 (and (and (and (and (and (and $x360 $x772) $x590) $x179) $x630) $x57) $x330)))
 (let (($x352 (and $x662 $x193)))
 (let (($x528 (= $x352 true)))
 (let (($x422 (= $x528 true)))
 (let (($x174 (= $x422 true)))
 (let ((?x162 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x255 (bvneg ?x162)))
 (let (($x353 (= ?x255 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x518 (= $x353 true)))
 (let (($x621 (= $x518 true)))
 (let (($x128 (= ?x255 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x177 (= $x128 true)))
 (let (($x26 (= $x177 true)))
 (let (($x375 (and $x26 $x621)))
 (let (($x273 (and $x375 $x174)))
 (let (($x712 (and $x273 $x46)))
 (let (($x442 (and $x712 $x73)))
 (let (($x730 (and $x442 $x508)))
 (let (($x19 (and $x730 $x373)))
 (let (($x333 (and $x19 $x711)))
 (let (($x474 (and $x333 $x127)))
 (let (($x417 (and $x474 $x767)))
 (let (($x220 (and $x417 $x326)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x738 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (=> $x652 (= ?x738 ?x412)))))))
 ))
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x539 (_ bv1 32))))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (= $x652 $x379))))))
 ))
 (let (($x734 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x539 (_ bv0 32))))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x14 (_ bv0 32))))
 (= $x234 $x478))))))
 ))
 (let (($x96 (and $x734 $x207)))
 (let (($x34 (and $x96 $x350)))
 (let (($x559 (and $x34 $x156)))
 (let (($x311 (and $x559 $x220)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x690 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (=> $x470 (= ?x690 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x752 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (= $x470 (bvuge ?x752 (_ bv1 32)))))))
 ))
 (let (($x75 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x752 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x725 (_ bv0 32))))
 (= $x219 (= ?x752 (_ bv0 32)))))))
 ))
 (let (($x163 (and $x75 $x428)))
 (let (($x199 (and $x163 $x145)))
 (let (($x118 (and $x199 $x460)))
 (let (($x540 (and $x118 $x311)))
 (let (($x194 (=> $x540 $x649)))
 (let (($x91 (not $x194)))
 (let (($x783 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x313 (select solver-mem_6 memmask-bounded-var!)))
 (let (($x152 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x337 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x632 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x337)))
 (let (($x744 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x499 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x337)))
 (let (($x137 (or false (or false (and (and true (or $x499 $x744)) (or $x632 $x152))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x137) (= ?x313 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x313 (_ bv0 8)))))))))))
 ))
 (and (and true $x783) $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x302 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_6 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x42 (bvadd ?x450 ?x302)))
 (let ((?x741 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x404 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x741))))
 (let ((?x690 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (=> $x470 (= ?x690 ?x404)))))))))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x453 (_ bv1 32))))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (= $x470 $x464))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x728 (= false false)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x725 (_ bv0 32))))
 (=> $x219 $x728)))))
 ))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x453 (_ bv0 32))))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x725 (_ bv0 32))))
 (= $x219 $x11))))))
 ))
 (let (($x95 (and $x467 $x428)))
 (let (($x554 (and $x95 $x232)))
 (let (($x67 (and $x554 $x211)))
 (let (($x142 (= $x67 true)))
 (let (($x649 (= $x142 true)))
 (let ((?x149 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x301 (= (_ bv0 2) ?x149)))
 (let (($x340 (= $x301 true)))
 (let (($x326 (= $x340 true)))
 (let (($x768 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x443 (bvadd ?x450 input.dst.llvm-%m2)))
 (let ((?x769 (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv1 32))) (select input.dst.llvm-mem ?x443))))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x443 (_ bv2 32))) ?x769))))
 (let ((?x690 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (=> $x470 (= ?x690 ?x613))))))))))
 ))
 (let (($x44 (and $x554 $x768)))
 (let (($x463 (= $x44 true)))
 (let (($x654 (= $x463 true)))
 (let (($x767 (= $x654 true)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x507 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x760 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem ?x507))))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv2 32))) ?x760))))
 (let ((?x738 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (=> $x652 (= ?x738 ?x495))))))))))
 ))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x453 (_ bv1 32))))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (= $x652 $x464))))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x728 (= false false)))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x14 (_ bv0 32))))
 (=> $x234 $x728)))))
 ))
 (let (($x612 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x453 (_ bv0 32))))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x14 (_ bv0 32))))
 (= $x234 $x11))))))
 ))
 (let (($x494 (and $x612 $x207)))
 (let (($x722 (and $x494 $x227)))
 (let (($x647 (and $x722 $x188)))
 (let (($x190 (= $x647 true)))
 (let (($x614 (= $x190 true)))
 (let (($x127 (= $x614 true)))
 (let (($x756 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x507 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x507))))
 (let ((?x416 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv2 32))) ?x212)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv3 32))) ?x416)))
 (let ((?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x539 (_ bv1 32))))
 (=> $x379 (= ?x412 ?x270)))))))))))
 ))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x464 (bvuge ?x453 (_ bv1 32))))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x539 (_ bv1 32))))
 (= $x379 $x464))))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x728 (= false false)))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x539 (_ bv0 32))))
 (=> $x478 $x728)))))
 ))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x453 (_ bv0 32))))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x539 (_ bv0 32))))
 (= $x478 $x11))))))
 ))
 (let (($x600 (and $x83 $x117)))
 (let (($x116 (and $x600 $x359)))
 (let (($x391 (and $x116 $x756)))
 (let (($x299 (= $x391 true)))
 (let (($x542 (= $x299 true)))
 (let (($x711 (= $x542 true)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x507 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x507))))
 (let ((?x416 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv2 32))) ?x212)))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x507 (_ bv3 32))) ?x416)))
 (let ((?x738 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (=> $x652 (= ?x738 ?x270)))))))))))
 ))
 (let (($x631 (and $x722 $x210)))
 (let (($x514 (= $x631 true)))
 (let (($x104 (= $x514 true)))
 (let (($x373 (= $x104 true)))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x507 (bvadd ?x450 input.dst.llvm-%m1)))
 (let ((?x760 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv1 32))) (select input.dst.llvm-mem ?x507))))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x507 (_ bv2 32))) ?x760))))
 (let ((?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x539 (_ bv1 32))))
 (=> $x379 (= ?x412 ?x495))))))))))
 ))
 (let (($x82 (and $x116 $x681)))
 (let (($x12 (= $x82 true)))
 (let (($x440 (= $x12 true)))
 (let (($x508 (= $x440 true)))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x450 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x443 (bvadd ?x450 input.dst.llvm-%m2)))
 (let ((?x705 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x443 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x443))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x443 (_ bv2 32))) ?x705)))
 (let ((?x269 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x443 (_ bv3 32))) ?x175)))
 (let ((?x690 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (=> $x470 (= ?x690 ?x269)))))))))))
 ))
 (let (($x213 (and $x554 $x284)))
 (let (($x636 (= $x213 true)))
 (let (($x431 (= $x636 true)))
 (let (($x73 (= $x431 true)))
 (let (($x278 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x731 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x236 (and $x731 $x278)))
 (let (($x161 (= $x236 true)))
 (let (($x736 (= $x161 true)))
 (let (($x46 (= $x736 true)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x193 (= (_ bv0 32) ?x97)))
 (let ((?x380 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x330 (= (_ bv0 32) ?x380)))
 (let ((?x784 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x784)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x786 (and $x331 $x39)))
 (let (($x471 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x630 (and $x471 $x786)))
 (let (($x179 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x590 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x589 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x779 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x533 (and $x779 $x589)))
 (let (($x708 (not $x533)))
 (let (($x543 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x778 (and $x119 $x543)))
 (let (($x772 (and (not $x778) $x708)))
 (let (($x328 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x87 $x328)))
 (let (($x486 (not $x265)))
 (let (($x635 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x714 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x510 (and $x714 $x635)))
 (let (($x360 (and (not $x510) $x486)))
 (let (($x662 (and (and (and (and (and (and $x360 $x772) $x590) $x179) $x630) $x57) $x330)))
 (let (($x352 (and $x662 $x193)))
 (let (($x528 (= $x352 true)))
 (let (($x422 (= $x528 true)))
 (let (($x174 (= $x422 true)))
 (let ((?x162 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x255 (bvneg ?x162)))
 (let (($x353 (= ?x255 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x518 (= $x353 true)))
 (let (($x621 (= $x518 true)))
 (let (($x128 (= ?x255 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x177 (= $x128 true)))
 (let (($x26 (= $x177 true)))
 (let (($x375 (and $x26 $x621)))
 (let (($x273 (and $x375 $x174)))
 (let (($x712 (and $x273 $x46)))
 (let (($x442 (and $x712 $x73)))
 (let (($x730 (and $x442 $x508)))
 (let (($x19 (and $x730 $x373)))
 (let (($x333 (and $x19 $x711)))
 (let (($x474 (and $x333 $x127)))
 (let (($x417 (and $x474 $x767)))
 (let (($x220 (and $x417 $x326)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x738 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (=> $x652 (= ?x738 ?x412)))))))
 ))
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x539 (_ bv1 32))))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x14 (_ bv1 32))))
 (= $x652 $x379))))))
 ))
 (let (($x734 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x539 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x478 (= ?x539 (_ bv0 32))))
 (let ((?x14 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x14 (_ bv0 32))))
 (= $x234 $x478))))))
 ))
 (let (($x96 (and $x734 $x207)))
 (let (($x34 (and $x96 $x350)))
 (let (($x559 (and $x34 $x156)))
 (let (($x311 (and $x559 $x220)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x690 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (=> $x470 (= ?x690 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x752 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x470 (bvuge ?x725 (_ bv1 32))))
 (= $x470 (bvuge ?x752 (_ bv1 32)))))))
 ))
 (let (($x75 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x752 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x725 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x725 (_ bv0 32))))
 (= $x219 (= ?x752 (_ bv0 32)))))))
 ))
 (let (($x163 (and $x75 $x428)))
 (let (($x199 (and $x163 $x145)))
 (let (($x118 (and $x199 $x460)))
 (let (($x540 (and $x118 $x311)))
 (let (($x194 (=> $x540 $x649)))
 (let (($x91 (not $x194)))
 (let (($x783 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x313 (select solver-mem_6 memmask-bounded-var!)))
 (let (($x152 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x337 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x632 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x337)))
 (let (($x744 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x499 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x337)))
 (let (($x137 (or false (or false (and (and true (or $x499 $x744)) (or $x632 $x152))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x137) (= ?x313 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x313 (_ bv0 8)))))))))))
 ))
 (and (and true $x783) $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 3
==result_count: 0
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x638 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x623)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x638 (_ bv1 32))) (select input.dst.llvm-mem ?x638))))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd ?x638 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x638 (_ bv2 32))) ?x348))))
 (let ((?x276 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (=> $x525 (= ?x276 ?x558))))))))))
 ))
 (let (($x344 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (bvuge ?x406 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (= $x525 $x549))))))
 ))
 (let (($x784 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x437 (= false false)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x488 (_ bv0 32))))
 (=> $x45 $x437)))))
 ))
 (let (($x780 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x406 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x488 (_ bv0 32))))
 (= $x45 $x266))))))
 ))
 (let (($x303 (and $x780 $x784)))
 (let (($x609 (and $x303 $x344)))
 (let (($x237 (and $x609 $x139)))
 (let (($x599 (= $x237 true)))
 (let (($x757 (= $x599 true)))
 (let ((?x464 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x560 (bvneg ?x464)))
 (let (($x279 (= ?x560 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x81 (= $x279 true)))
 (let (($x747 (= $x81 true)))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x318 (bvadd ?x623 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x256))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (=> $x734 (= ?x156 ?x363))))))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (bvuge ?x406 (_ bv1 32))))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (= $x734 $x549))))))
 ))
 (let (($x199 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x437 (= false false)))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x484 (_ bv0 32))))
 (=> $x428 $x437)))))
 ))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x406 (_ bv0 32))))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x484 (_ bv0 32))))
 (= $x428 $x266))))))
 ))
 (let (($x312 (and $x244 $x199)))
 (let (($x694 (and $x312 $x361)))
 (let (($x748 (and $x694 $x669)))
 (let (($x158 (= $x748 true)))
 (let (($x610 (= $x158 true)))
 (let (($x527 (= $x610 true)))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x620 (bvadd ?x623 input.dst.llvm-%m1)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv1 32))) (select input.dst.llvm-mem ?x620))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv2 32))) ?x513))))
 (let ((?x276 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (=> $x525 (= ?x276 ?x225))))))))))
 ))
 (let (($x626 (and $x609 $x223)))
 (let (($x519 (= $x626 true)))
 (let (($x60 (= $x519 true)))
 (let (($x376 (= $x60 true)))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x620 (bvadd ?x623 input.dst.llvm-%m1)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x620))))
 (let ((?x523 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv2 32))) ?x111)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv3 32))) ?x523)))
 (let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x763 (_ bv1 32))))
 (=> $x297 (= ?x80 ?x240)))))))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (bvuge ?x406 (_ bv1 32))))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x763 (_ bv1 32))))
 (= $x297 $x549))))))
 ))
 (let (($x606 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x437 (= false false)))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (= ?x763 (_ bv0 32))))
 (=> $x471 $x437)))))
 ))
 (let (($x452 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x406 (_ bv0 32))))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (= ?x763 (_ bv0 32))))
 (= $x471 $x266))))))
 ))
 (let (($x701 (and $x452 $x606)))
 (let (($x7 (and $x701 $x21)))
 (let (($x216 (and $x7 $x321)))
 (let (($x103 (= $x216 true)))
 (let (($x672 (= $x103 true)))
 (let (($x130 (= $x672 true)))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x620 (bvadd ?x623 input.dst.llvm-%m1)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x620))))
 (let ((?x523 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv2 32))) ?x111)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv3 32))) ?x523)))
 (let ((?x276 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (=> $x525 (= ?x276 ?x240)))))))))))
 ))
 (let (($x369 (and $x609 $x483)))
 (let (($x595 (= $x369 true)))
 (let (($x230 (= $x595 true)))
 (let (($x329 (= $x230 true)))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x620 (bvadd ?x623 input.dst.llvm-%m1)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv1 32))) (select input.dst.llvm-mem ?x620))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv2 32))) ?x513))))
 (let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x763 (_ bv1 32))))
 (=> $x297 (= ?x80 ?x225))))))))))
 ))
 (let (($x30 (and $x7 $x249)))
 (let (($x434 (= $x30 true)))
 (let (($x658 (= $x434 true)))
 (let (($x660 (= $x658 true)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x318 (bvadd ?x623 input.dst.llvm-%m2)))
 (let ((?x745 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x318))))
 (let ((?x684 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x318 (_ bv2 32))) ?x745)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x318 (_ bv3 32))) ?x684)))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (=> $x734 (= ?x156 ?x241)))))))))))
 ))
 (let (($x418 (and $x694 $x319)))
 (let (($x579 (= $x418 true)))
 (let (($x703 (= $x579 true)))
 (let (($x451 (= $x703 true)))
 (let ((?x424 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x157 (= (_ bv0 32) ?x424)))
 (let ((?x722 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x596 (= (_ bv0 32) ?x722)))
 (let ((?x386 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x386)))
 (let ((?x730 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x473 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x730)))
 (let (($x440 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x612 (and $x440 $x473)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x494 (and $x12 $x612)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x688 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x686 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x521 (and $x686 $x688)))
 (let (($x760 (not $x521)))
 (let (($x475 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x524 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x764 (and $x524 $x475)))
 (let (($x495 (and (not $x764) $x760)))
 (let (($x359 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x661 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x661 $x359)))
 (let (($x100 (not $x116)))
 (let (($x739 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x397 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x397 $x739)))
 (let (($x648 (and (not $x117) $x100)))
 (let (($x426 (and (and (and (and (and (and $x648 $x495) $x154) $x82) $x494) $x227) $x596)))
 (let (($x210 (and $x426 $x157)))
 (let (($x631 (= $x210 true)))
 (let (($x514 (= $x631 true)))
 (let (($x104 (= $x514 true)))
 (let ((?x153 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x284 (= (_ bv0 2) ?x153)))
 (let (($x213 (= $x284 true)))
 (let (($x636 (= $x213 true)))
 (let (($x644 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x382 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x634 (and $x382 $x644)))
 (let (($x512 (= $x634 true)))
 (let (($x705 (= $x512 true)))
 (let (($x175 (= $x705 true)))
 (let (($x554 (= ?x560 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x23 (= $x554 true)))
 (let (($x450 (= $x23 true)))
 (let (($x269 (and $x450 $x175)))
 (let (($x431 (and $x269 $x636)))
 (let (($x373 (and $x431 $x104)))
 (let (($x588 (and $x373 $x451)))
 (let (($x455 (and $x588 $x660)))
 (let (($x571 (and $x455 $x329)))
 (let (($x246 (and $x571 $x130)))
 (let (($x655 (and $x246 $x376)))
 (let (($x526 (and $x655 $x527)))
 (let (($x733 (and $x526 $x747)))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x276 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (=> $x525 (= ?x276 ?x80)))))))
 ))
 (let (($x731 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x763 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (= $x525 $x297))))))
 ))
 (let (($x786 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (= ?x763 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x488 (_ bv0 32))))
 (= $x45 $x471))))))
 ))
 (let (($x57 (and $x786 $x784)))
 (let (($x226 (and $x57 $x731)))
 (let (($x693 (and $x226 $x11)))
 (let (($x403 (and $x693 $x733)))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (=> $x734 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (= $x734 (bvuge ?x493 (_ bv1 32)))))))
 ))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x484 (_ bv0 32))))
 (= $x428 (= ?x493 (_ bv0 32)))))))
 ))
 (let (($x690 (and $x470 $x199)))
 (let (($x96 (and $x690 $x207)))
 (let (($x162 (and $x96 $x388)))
 (let (($x168 (and $x162 $x403)))
 (let (($x309 (=> $x168 $x757)))
 (not $x309)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x638 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x623)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x638 (_ bv1 32))) (select input.dst.llvm-mem ?x638))))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd ?x638 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x638 (_ bv2 32))) ?x348))))
 (let ((?x276 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (=> $x525 (= ?x276 ?x558))))))))))
 ))
 (let (($x344 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (bvuge ?x406 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (= $x525 $x549))))))
 ))
 (let (($x784 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x437 (= false false)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x488 (_ bv0 32))))
 (=> $x45 $x437)))))
 ))
 (let (($x780 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x406 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x488 (_ bv0 32))))
 (= $x45 $x266))))))
 ))
 (let (($x303 (and $x780 $x784)))
 (let (($x609 (and $x303 $x344)))
 (let (($x237 (and $x609 $x139)))
 (let (($x599 (= $x237 true)))
 (let (($x757 (= $x599 true)))
 (let ((?x464 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x560 (bvneg ?x464)))
 (let (($x279 (= ?x560 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x81 (= $x279 true)))
 (let (($x747 (= $x81 true)))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x318 (bvadd ?x623 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x256))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (=> $x734 (= ?x156 ?x363))))))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (bvuge ?x406 (_ bv1 32))))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (= $x734 $x549))))))
 ))
 (let (($x199 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x437 (= false false)))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x484 (_ bv0 32))))
 (=> $x428 $x437)))))
 ))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x406 (_ bv0 32))))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x484 (_ bv0 32))))
 (= $x428 $x266))))))
 ))
 (let (($x312 (and $x244 $x199)))
 (let (($x694 (and $x312 $x361)))
 (let (($x748 (and $x694 $x669)))
 (let (($x158 (= $x748 true)))
 (let (($x610 (= $x158 true)))
 (let (($x527 (= $x610 true)))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x620 (bvadd ?x623 input.dst.llvm-%m1)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv1 32))) (select input.dst.llvm-mem ?x620))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv2 32))) ?x513))))
 (let ((?x276 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (=> $x525 (= ?x276 ?x225))))))))))
 ))
 (let (($x626 (and $x609 $x223)))
 (let (($x519 (= $x626 true)))
 (let (($x60 (= $x519 true)))
 (let (($x376 (= $x60 true)))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x620 (bvadd ?x623 input.dst.llvm-%m1)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x620))))
 (let ((?x523 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv2 32))) ?x111)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv3 32))) ?x523)))
 (let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x763 (_ bv1 32))))
 (=> $x297 (= ?x80 ?x240)))))))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x549 (bvuge ?x406 (_ bv1 32))))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x763 (_ bv1 32))))
 (= $x297 $x549))))))
 ))
 (let (($x606 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x437 (= false false)))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (= ?x763 (_ bv0 32))))
 (=> $x471 $x437)))))
 ))
 (let (($x452 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x406 (_ bv0 32))))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (= ?x763 (_ bv0 32))))
 (= $x471 $x266))))))
 ))
 (let (($x701 (and $x452 $x606)))
 (let (($x7 (and $x701 $x21)))
 (let (($x216 (and $x7 $x321)))
 (let (($x103 (= $x216 true)))
 (let (($x672 (= $x103 true)))
 (let (($x130 (= $x672 true)))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x620 (bvadd ?x623 input.dst.llvm-%m1)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x620))))
 (let ((?x523 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv2 32))) ?x111)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x620 (_ bv3 32))) ?x523)))
 (let ((?x276 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (=> $x525 (= ?x276 ?x240)))))))))))
 ))
 (let (($x369 (and $x609 $x483)))
 (let (($x595 (= $x369 true)))
 (let (($x230 (= $x595 true)))
 (let (($x329 (= $x230 true)))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x620 (bvadd ?x623 input.dst.llvm-%m1)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv1 32))) (select input.dst.llvm-mem ?x620))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x620 (_ bv2 32))) ?x513))))
 (let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x763 (_ bv1 32))))
 (=> $x297 (= ?x80 ?x225))))))))))
 ))
 (let (($x30 (and $x7 $x249)))
 (let (($x434 (= $x30 true)))
 (let (($x658 (= $x434 true)))
 (let (($x660 (= $x658 true)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x318 (bvadd ?x623 input.dst.llvm-%m2)))
 (let ((?x745 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x318))))
 (let ((?x684 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x318 (_ bv2 32))) ?x745)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x318 (_ bv3 32))) ?x684)))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (=> $x734 (= ?x156 ?x241)))))))))))
 ))
 (let (($x418 (and $x694 $x319)))
 (let (($x579 (= $x418 true)))
 (let (($x703 (= $x579 true)))
 (let (($x451 (= $x703 true)))
 (let ((?x424 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x157 (= (_ bv0 32) ?x424)))
 (let ((?x722 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x596 (= (_ bv0 32) ?x722)))
 (let ((?x386 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x386)))
 (let ((?x730 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x473 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x730)))
 (let (($x440 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x612 (and $x440 $x473)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x494 (and $x12 $x612)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x688 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x686 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x521 (and $x686 $x688)))
 (let (($x760 (not $x521)))
 (let (($x475 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x524 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x764 (and $x524 $x475)))
 (let (($x495 (and (not $x764) $x760)))
 (let (($x359 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x661 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x661 $x359)))
 (let (($x100 (not $x116)))
 (let (($x739 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x397 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x397 $x739)))
 (let (($x648 (and (not $x117) $x100)))
 (let (($x426 (and (and (and (and (and (and $x648 $x495) $x154) $x82) $x494) $x227) $x596)))
 (let (($x210 (and $x426 $x157)))
 (let (($x631 (= $x210 true)))
 (let (($x514 (= $x631 true)))
 (let (($x104 (= $x514 true)))
 (let ((?x153 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x284 (= (_ bv0 2) ?x153)))
 (let (($x213 (= $x284 true)))
 (let (($x636 (= $x213 true)))
 (let (($x644 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x382 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x634 (and $x382 $x644)))
 (let (($x512 (= $x634 true)))
 (let (($x705 (= $x512 true)))
 (let (($x175 (= $x705 true)))
 (let (($x554 (= ?x560 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x23 (= $x554 true)))
 (let (($x450 (= $x23 true)))
 (let (($x269 (and $x450 $x175)))
 (let (($x431 (and $x269 $x636)))
 (let (($x373 (and $x431 $x104)))
 (let (($x588 (and $x373 $x451)))
 (let (($x455 (and $x588 $x660)))
 (let (($x571 (and $x455 $x329)))
 (let (($x246 (and $x571 $x130)))
 (let (($x655 (and $x246 $x376)))
 (let (($x526 (and $x655 $x527)))
 (let (($x733 (and $x526 $x747)))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x276 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (=> $x525 (= ?x276 ?x80)))))))
 ))
 (let (($x731 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x763 (_ bv1 32))))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x488 (_ bv1 32))))
 (= $x525 $x297))))))
 ))
 (let (($x786 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x763 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (= ?x763 (_ bv0 32))))
 (let ((?x488 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x45 (= ?x488 (_ bv0 32))))
 (= $x45 $x471))))))
 ))
 (let (($x57 (and $x786 $x784)))
 (let (($x226 (and $x57 $x731)))
 (let (($x693 (and $x226 $x11)))
 (let (($x403 (and $x693 $x733)))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (=> $x734 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (bvuge ?x484 (_ bv1 32))))
 (= $x734 (bvuge ?x493 (_ bv1 32)))))))
 ))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x484 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x484 (_ bv0 32))))
 (= $x428 (= ?x493 (_ bv0 32)))))))
 ))
 (let (($x690 (and $x470 $x199)))
 (let (($x96 (and $x690 $x207)))
 (let (($x162 (and $x96 $x388)))
 (let (($x168 (and $x162 $x403)))
 (let (($x309 (=> $x168 $x757)))
 (not $x309)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x87c04100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6c600004)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000041)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6c600007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x87c04103)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6c600004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x87c04100)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000041 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000041)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86a0a904)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x0c240420)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02c13440)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0c240420)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02c13443)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86a0a907)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02c13440)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86a0a904)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x0c240420)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0c240422) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x85 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x27)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x785 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x70))))
 (let ((?x745 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (=> $x694 (= ?x745 ?x785))))))))))
 ))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x200 (_ bv1 32))))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (= $x694 $x144))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x453 (= false false)))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (= ?x722 (_ bv0 32))))
 (=> $x596 $x453)))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x200 (_ bv0 32))))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (= ?x722 (_ bv0 32))))
 (= $x596 $x106))))))
 ))
 (let (($x52 (and $x13 $x421)))
 (let (($x598 (and $x52 $x472)))
 (let (($x288 (and $x598 $x366)))
 (let (($x327 (= $x288 true)))
 (let (($x633 (= $x327 true)))
 (let ((?x703 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x451 (bvneg ?x703)))
 (let (($x307 (= ?x451 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x181 (= $x307 true)))
 (let (($x743 (= $x181 true)))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x63 (bvadd ?x27 input.dst.llvm-%m2)))
 (let ((?x663 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x663))))
 (let ((?x442 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (=> $x644 (= ?x442 ?x79))))))))))
 ))
 (let (($x622 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x200 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (= $x644 $x144))))))
 ))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x453 (= false false)))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x226 (_ bv0 32))))
 (=> $x276 $x453)))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x200 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x226 (_ bv0 32))))
 (= $x276 $x106))))))
 ))
 (let (($x724 (and $x143 $x467)))
 (let (($x616 (and $x724 $x622)))
 (let (($x673 (and $x616 $x43)))
 (let (($x666 (= $x673 true)))
 (let (($x409 (= $x666 true)))
 (let (($x50 (= $x409 true)))
 (let (($x667 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem ?x597))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv2 32))) ?x656))))
 (let ((?x684 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (=> $x299 (= ?x684 ?x399))))))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x200 (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (= $x299 $x144))))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x453 (= false false)))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x424 (_ bv0 32))))
 (=> $x157 $x453)))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x200 (_ bv0 32))))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x424 (_ bv0 32))))
 (= $x157 $x106))))))
 ))
 (let (($x712 (and $x46 $x373)))
 (let (($x435 (and $x712 $x71)))
 (let (($x677 (and $x435 $x667)))
 (let (($x191 (= $x677 true)))
 (let (($x28 (= $x191 true)))
 (let (($x629 (= $x28 true)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x597))))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv2 32))) ?x190)))
 (let ((?x769 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv3 32))) ?x614)))
 (let ((?x745 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (=> $x694 (= ?x745 ?x769)))))))))))
 ))
 (let (($x654 (and $x598 $x417)))
 (let (($x481 (= $x654 true)))
 (let (($x340 (= $x481 true)))
 (let (($x311 (= $x340 true)))
 (let (($x613 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x597))))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv2 32))) ?x190)))
 (let ((?x769 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv3 32))) ?x614)))
 (let ((?x684 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (=> $x299 (= ?x684 ?x769)))))))))))
 ))
 (let (($x62 (and $x435 $x613)))
 (let (($x768 (= $x62 true)))
 (let (($x44 (= $x768 true)))
 (let (($x463 (= $x44 true)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem ?x597))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv2 32))) ?x656))))
 (let ((?x745 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (=> $x694 (= ?x745 ?x399))))))))))
 ))
 (let (($x783 (and $x598 $x271)))
 (let (($x619 (= $x783 true)))
 (let (($x365 (= $x619 true)))
 (let (($x468 (= $x365 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x63 (bvadd ?x27 input.dst.llvm-%m2)))
 (let ((?x775 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x63))))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv2 32))) ?x775)))
 (let ((?x518 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv3 32))) ?x342)))
 (let ((?x442 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (=> $x644 (= ?x442 ?x518)))))))))))
 ))
 (let (($x621 (and $x616 $x353)))
 (let (($x375 (= $x621 true)))
 (let (($x714 (= $x375 true)))
 (let (($x635 (= $x714 true)))
 (let ((?x131 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x223 (= (_ bv0 32) ?x131)))
 (let ((?x246 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x250 (= (_ bv0 32) ?x246)))
 (let ((?x672 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x672)))
 (let ((?x645 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x321 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x645)))
 (let (($x571 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x216 (and $x571 $x321)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x329 $x216)))
 (let (($x230 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x369 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x665 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x523 (and $x665 $x111)))
 (let (($x240 (not $x523)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x408 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x721 (and $x408 $x446)))
 (let (($x615 (and (not $x721) $x240)))
 (let (($x780 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x492 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x492 $x780)))
 (let (($x358 (not $x303)))
 (let (($x658 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x660 (and $x30 $x658)))
 (let (($x609 (and (not $x660) $x358)))
 (let (($x105 (and (and (and (and (and (and $x609 $x615) $x369) $x230) $x103) $x130) $x250)))
 (let (($x557 (and $x105 $x223)))
 (let (($x659 (= $x557 true)))
 (let (($x400 (= $x659 true)))
 (let (($x256 (= $x400 true)))
 (let ((?x504 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x513 (= (_ bv0 2) ?x504)))
 (let (($x114 (= $x513 true)))
 (let (($x225 (= $x114 true)))
 (let (($x620 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x21 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x735 (and $x21 $x620)))
 (let (($x578 (= $x735 true)))
 (let (($x604 (= $x578 true)))
 (let (($x611 (= $x604 true)))
 (let (($x18 (= ?x451 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x452 (= $x18 true)))
 (let (($x31 (= $x452 true)))
 (let (($x602 (and $x31 $x611)))
 (let (($x429 (and $x602 $x225)))
 (let (($x125 (and $x429 $x256)))
 (let (($x510 (and $x125 $x635)))
 (let (($x339 (and $x510 $x468)))
 (let (($x326 (and $x339 $x463)))
 (let (($x643 (and $x326 $x311)))
 (let (($x261 (and $x643 $x629)))
 (let (($x394 (and $x261 $x50)))
 (let (($x449 (and $x394 $x743)))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x745 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x684 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (=> $x299 (= ?x684 ?x745)))))))
 ))
 (let (($x623 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (= $x299 $x694))))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (= ?x722 (_ bv0 32))))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x424 (_ bv0 32))))
 (= $x157 $x596))))))
 ))
 (let (($x723 (and $x631 $x373)))
 (let (($x318 (and $x723 $x623)))
 (let (($x319 (and $x318 $x47)))
 (let (($x502 (and $x319 $x449)))
 (let (($x739 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x442 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (=> $x644 (= ?x442 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (= $x644 (bvuge ?x297 (_ bv1 32)))))))
 ))
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x226 (_ bv0 32))))
 (= $x276 (= ?x297 (_ bv0 32)))))))
 ))
 (let (($x95 (and $x59 $x467)))
 (let (($x705 (and $x95 $x512)))
 (let (($x117 (and $x705 $x739)))
 (let (($x480 (and $x117 $x502)))
 (let (($x182 (=> $x480 $x633)))
 (not $x182)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x85 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x27)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x785 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x70))))
 (let ((?x745 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (=> $x694 (= ?x745 ?x785))))))))))
 ))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x200 (_ bv1 32))))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (= $x694 $x144))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x453 (= false false)))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (= ?x722 (_ bv0 32))))
 (=> $x596 $x453)))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x200 (_ bv0 32))))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (= ?x722 (_ bv0 32))))
 (= $x596 $x106))))))
 ))
 (let (($x52 (and $x13 $x421)))
 (let (($x598 (and $x52 $x472)))
 (let (($x288 (and $x598 $x366)))
 (let (($x327 (= $x288 true)))
 (let (($x633 (= $x327 true)))
 (let ((?x703 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x451 (bvneg ?x703)))
 (let (($x307 (= ?x451 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x181 (= $x307 true)))
 (let (($x743 (= $x181 true)))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x63 (bvadd ?x27 input.dst.llvm-%m2)))
 (let ((?x663 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x663))))
 (let ((?x442 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (=> $x644 (= ?x442 ?x79))))))))))
 ))
 (let (($x622 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x200 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (= $x644 $x144))))))
 ))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x453 (= false false)))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x226 (_ bv0 32))))
 (=> $x276 $x453)))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x200 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x226 (_ bv0 32))))
 (= $x276 $x106))))))
 ))
 (let (($x724 (and $x143 $x467)))
 (let (($x616 (and $x724 $x622)))
 (let (($x673 (and $x616 $x43)))
 (let (($x666 (= $x673 true)))
 (let (($x409 (= $x666 true)))
 (let (($x50 (= $x409 true)))
 (let (($x667 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem ?x597))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv2 32))) ?x656))))
 (let ((?x684 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (=> $x299 (= ?x684 ?x399))))))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x200 (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (= $x299 $x144))))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x453 (= false false)))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x424 (_ bv0 32))))
 (=> $x157 $x453)))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x200 (_ bv0 32))))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x424 (_ bv0 32))))
 (= $x157 $x106))))))
 ))
 (let (($x712 (and $x46 $x373)))
 (let (($x435 (and $x712 $x71)))
 (let (($x677 (and $x435 $x667)))
 (let (($x191 (= $x677 true)))
 (let (($x28 (= $x191 true)))
 (let (($x629 (= $x28 true)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x597))))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv2 32))) ?x190)))
 (let ((?x769 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv3 32))) ?x614)))
 (let ((?x745 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (=> $x694 (= ?x745 ?x769)))))))))))
 ))
 (let (($x654 (and $x598 $x417)))
 (let (($x481 (= $x654 true)))
 (let (($x340 (= $x481 true)))
 (let (($x311 (= $x340 true)))
 (let (($x613 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x597))))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv2 32))) ?x190)))
 (let ((?x769 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x597 (_ bv3 32))) ?x614)))
 (let ((?x684 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (=> $x299 (= ?x684 ?x769)))))))))))
 ))
 (let (($x62 (and $x435 $x613)))
 (let (($x768 (= $x62 true)))
 (let (($x44 (= $x768 true)))
 (let (($x463 (= $x44 true)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x597 (bvadd ?x27 input.dst.llvm-%m1)))
 (let ((?x656 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv1 32))) (select input.dst.llvm-mem ?x597))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x597 (_ bv2 32))) ?x656))))
 (let ((?x745 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (=> $x694 (= ?x745 ?x399))))))))))
 ))
 (let (($x783 (and $x598 $x271)))
 (let (($x619 (= $x783 true)))
 (let (($x365 (= $x619 true)))
 (let (($x468 (= $x365 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x27 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x63 (bvadd ?x27 input.dst.llvm-%m2)))
 (let ((?x775 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x63))))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv2 32))) ?x775)))
 (let ((?x518 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv3 32))) ?x342)))
 (let ((?x442 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (=> $x644 (= ?x442 ?x518)))))))))))
 ))
 (let (($x621 (and $x616 $x353)))
 (let (($x375 (= $x621 true)))
 (let (($x714 (= $x375 true)))
 (let (($x635 (= $x714 true)))
 (let ((?x131 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x223 (= (_ bv0 32) ?x131)))
 (let ((?x246 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x250 (= (_ bv0 32) ?x246)))
 (let ((?x672 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x672)))
 (let ((?x645 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x321 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x645)))
 (let (($x571 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x216 (and $x571 $x321)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x329 $x216)))
 (let (($x230 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x369 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x665 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x523 (and $x665 $x111)))
 (let (($x240 (not $x523)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x408 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x721 (and $x408 $x446)))
 (let (($x615 (and (not $x721) $x240)))
 (let (($x780 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x492 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x492 $x780)))
 (let (($x358 (not $x303)))
 (let (($x658 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x660 (and $x30 $x658)))
 (let (($x609 (and (not $x660) $x358)))
 (let (($x105 (and (and (and (and (and (and $x609 $x615) $x369) $x230) $x103) $x130) $x250)))
 (let (($x557 (and $x105 $x223)))
 (let (($x659 (= $x557 true)))
 (let (($x400 (= $x659 true)))
 (let (($x256 (= $x400 true)))
 (let ((?x504 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x513 (= (_ bv0 2) ?x504)))
 (let (($x114 (= $x513 true)))
 (let (($x225 (= $x114 true)))
 (let (($x620 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x21 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x735 (and $x21 $x620)))
 (let (($x578 (= $x735 true)))
 (let (($x604 (= $x578 true)))
 (let (($x611 (= $x604 true)))
 (let (($x18 (= ?x451 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x452 (= $x18 true)))
 (let (($x31 (= $x452 true)))
 (let (($x602 (and $x31 $x611)))
 (let (($x429 (and $x602 $x225)))
 (let (($x125 (and $x429 $x256)))
 (let (($x510 (and $x125 $x635)))
 (let (($x339 (and $x510 $x468)))
 (let (($x326 (and $x339 $x463)))
 (let (($x643 (and $x326 $x311)))
 (let (($x261 (and $x643 $x629)))
 (let (($x394 (and $x261 $x50)))
 (let (($x449 (and $x394 $x743)))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x745 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x684 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (=> $x299 (= ?x684 ?x745)))))))
 ))
 (let (($x623 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (bvuge ?x722 (_ bv1 32))))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x424 (_ bv1 32))))
 (= $x299 $x694))))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x722 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (= ?x722 (_ bv0 32))))
 (let ((?x424 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x157 (= ?x424 (_ bv0 32))))
 (= $x157 $x596))))))
 ))
 (let (($x723 (and $x631 $x373)))
 (let (($x318 (and $x723 $x623)))
 (let (($x319 (and $x318 $x47)))
 (let (($x502 (and $x319 $x449)))
 (let (($x739 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x442 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (=> $x644 (= ?x442 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x226 (_ bv1 32))))
 (= $x644 (bvuge ?x297 (_ bv1 32)))))))
 ))
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x226 (_ bv0 32))))
 (= $x276 (= ?x297 (_ bv0 32)))))))
 ))
 (let (($x95 (and $x59 $x467)))
 (let (($x705 (and $x95 $x512)))
 (let (($x117 (and $x705 $x739)))
 (let (($x480 (and $x117 $x502)))
 (let (($x182 (=> $x480 $x633)))
 (not $x182)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0642024c)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0486462b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0642024f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0642024c)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!46))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdfb56944)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdfb56947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0db347b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!49 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!49 (k!48 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0000007) #x20
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!51 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!51 (k!48 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!50 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!50 (k!47 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_7 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x398 (bvadd ?x411 ?x350)))
 (let ((?x591 (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv1 32))) (select input.dst.llvm-mem ?x398))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv2 32))) ?x591))))
 (let ((?x342 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (=> $x158 (= ?x342 ?x140)))))))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x384 (_ bv1 32))))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (= $x158 $x112))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x490 (= false false)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x131 (_ bv0 32))))
 (=> $x223 $x490)))))
 ))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x384 (_ bv0 32))))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x131 (_ bv0 32))))
 (= $x223 $x682))))))
 ))
 (let (($x541 (and $x531 $x125)))
 (let (($x488 (and $x541 $x331)))
 (let (($x69 (and $x488 $x674)))
 (let (($x427 (= $x69 true)))
 (let (($x296 (= $x427 true)))
 (let ((?x528 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x174 (= (_ bv0 2) ?x528)))
 (let (($x273 (= $x174 true)))
 (let (($x49 (= $x273 true)))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x314 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x360))))
 (let ((?x249 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (=> $x620 (= ?x249 ?x533))))))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x384 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (= $x620 $x112))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x490 (= false false)))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (= ?x318 (_ bv0 32))))
 (=> $x684 $x490)))))
 ))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x384 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (= ?x318 (_ bv0 32))))
 (= $x684 $x682))))))
 ))
 (let (($x197 (and $x134 $x418)))
 (let (($x258 (and $x197 $x457)))
 (let (($x779 (and $x258 $x119)))
 (let (($x537 (= $x779 true)))
 (let (($x320 (= $x537 true)))
 (let (($x97 (= $x320 true)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x535 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x67))))
 (let ((?x342 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (=> $x158 (= ?x342 ?x535))))))))))
 ))
 (let (($x433 (and $x488 $x460)))
 (let (($x283 (= $x433 true)))
 (let (($x322 (= $x283 true)))
 (let (($x678 (= $x322 true)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x194))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv2 32))) ?x657)))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv3 32))) ?x81)))
 (let ((?x775 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x616 (bvuge ?x246 (_ bv1 32))))
 (=> $x616 (= ?x775 ?x567)))))))))))
 ))
 (let (($x628 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x384 (_ bv1 32))))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x616 (bvuge ?x246 (_ bv1 32))))
 (= $x616 $x112))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x490 (= false false)))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x246 (_ bv0 32))))
 (=> $x250 $x490)))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x384 (_ bv0 32))))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x246 (_ bv0 32))))
 (= $x250 $x682))))))
 ))
 (let (($x459 (and $x354 $x233)))
 (let (($x163 (and $x459 $x628)))
 (let (($x599 (and $x163 $x237)))
 (let (($x139 (= $x599 true)))
 (let (($x757 (= $x139 true)))
 (let (($x84 (= $x757 true)))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x194))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv2 32))) ?x657)))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv3 32))) ?x81)))
 (let ((?x342 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (=> $x158 (= ?x342 ?x567)))))))))))
 ))
 (let (($x54 (and $x488 $x348)))
 (let (($x458 (= $x54 true)))
 (let (($x558 (= $x458 true)))
 (let (($x607 (= $x558 true)))
 (let (($x565 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x535 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x67))))
 (let ((?x775 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x616 (bvuge ?x246 (_ bv1 32))))
 (=> $x616 (= ?x775 ?x535))))))))))
 ))
 (let (($x179 (and $x163 $x565)))
 (let (($x763 (= $x179 true)))
 (let (($x471 (= $x763 true)))
 (let (($x707 (= $x471 true)))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x314 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x708 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x314))))
 (let ((?x718 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv2 32))) ?x708)))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv3 32))) ?x718)))
 (let ((?x249 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (=> $x620 (= ?x249 ?x91)))))))))))
 ))
 (let (($x648 (and $x258 $x100)))
 (let (($x475 (= $x648 true)))
 (let (($x764 (= $x475 true)))
 (let (($x221 (= $x764 true)))
 (let (($x261 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x191 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x618 (and $x191 $x261)))
 (let (($x5 (= $x618 true)))
 (let (($x448 (= $x5 true)))
 (let (($x176 (= $x448 true)))
 (let ((?x768 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x768)))
 (let ((?x613 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x62 (= (_ bv0 32) ?x613)))
 (let ((?x68 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x120 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x614 (and $x188 $x190)))
 (let (($x496 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x769 (and $x496 $x614)))
 (let (($x435 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x619 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x468 (and $x619 $x365)))
 (let (($x339 (not $x468)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x783 (and $x208 $x271)))
 (let (($x46 (and (not $x783) $x339)))
 (let (($x505 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x656 (and $x201 $x505)))
 (let (($x676 (not $x656)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x561 (and $x192 $x126)))
 (let (($x466 (and (not $x561) $x676)))
 (let (($x654 (and (and (and (and (and (and $x466 $x46) $x25) $x435) $x769) $x290) $x62)))
 (let (($x481 (and $x654 $x44)))
 (let (($x340 (= $x481 true)))
 (let (($x311 (= $x340 true)))
 (let (($x643 (= $x311 true)))
 (let ((?x714 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x635 (bvneg ?x714)))
 (let (($x52 (= ?x635 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x285 (= $x52 true)))
 (let (($x472 (= $x285 true)))
 (let (($x129 (= ?x635 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x13 (= $x129 true)))
 (let (($x72 (= $x13 true)))
 (let (($x598 (and $x72 $x472)))
 (let (($x15 (and $x598 $x643)))
 (let (($x663 (and $x15 $x176)))
 (let (($x686 (and $x663 $x221)))
 (let (($x11 (and $x686 $x707)))
 (let (($x552 (and $x11 $x607)))
 (let (($x128 (and $x552 $x84)))
 (let (($x347 (and $x128 $x678)))
 (let (($x352 (and $x347 $x97)))
 (let (($x137 (and $x352 $x49)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x775 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (=> $x158 (= ?x342 ?x775)))))))
 ))
 (let (($x27 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x616 (bvuge ?x246 (_ bv1 32))))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (= $x158 $x616))))))
 ))
 (let (($x659 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x246 (_ bv0 32))))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x131 (_ bv0 32))))
 (= $x223 $x250))))))
 ))
 (let (($x268 (and $x659 $x125)))
 (let (($x63 (and $x268 $x27)))
 (let (($x353 (and $x63 $x195)))
 (let (($x313 (and $x353 $x137)))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (=> $x620 (= ?x249 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x694 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (= $x620 (bvuge ?x694 (_ bv1 32)))))))
 ))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x694 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (= ?x318 (_ bv0 32))))
 (= $x684 (= ?x694 (_ bv0 32)))))))
 ))
 (let (($x579 (and $x241 $x418)))
 (let (($x604 (and $x579 $x578)))
 (let (($x660 (and $x604 $x658)))
 (let (($x509 (and $x660 $x313)))
 (let (($x715 (=> $x509 $x296)))
 (let (($x679 (not $x715)))
 (let (($x695 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x40 (select solver-mem_7 memmask-bounded-var!)))
 (let (($x751 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x164 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x482 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x275 (or false (or false (and (and true (or $x482 $x164)) (or $x155 $x751))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x275) (= ?x40 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x40 (_ bv0 8)))))))))))
 ))
 (and (and true $x695) $x679)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_7 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x398 (bvadd ?x411 ?x350)))
 (let ((?x591 (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv1 32))) (select input.dst.llvm-mem ?x398))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv2 32))) ?x591))))
 (let ((?x342 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (=> $x158 (= ?x342 ?x140)))))))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x384 (_ bv1 32))))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (= $x158 $x112))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x490 (= false false)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x131 (_ bv0 32))))
 (=> $x223 $x490)))))
 ))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x384 (_ bv0 32))))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x131 (_ bv0 32))))
 (= $x223 $x682))))))
 ))
 (let (($x541 (and $x531 $x125)))
 (let (($x488 (and $x541 $x331)))
 (let (($x69 (and $x488 $x674)))
 (let (($x427 (= $x69 true)))
 (let (($x296 (= $x427 true)))
 (let ((?x528 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x174 (= (_ bv0 2) ?x528)))
 (let (($x273 (= $x174 true)))
 (let (($x49 (= $x273 true)))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x314 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x360))))
 (let ((?x249 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (=> $x620 (= ?x249 ?x533))))))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x384 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (= $x620 $x112))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x490 (= false false)))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (= ?x318 (_ bv0 32))))
 (=> $x684 $x490)))))
 ))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x384 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (= ?x318 (_ bv0 32))))
 (= $x684 $x682))))))
 ))
 (let (($x197 (and $x134 $x418)))
 (let (($x258 (and $x197 $x457)))
 (let (($x779 (and $x258 $x119)))
 (let (($x537 (= $x779 true)))
 (let (($x320 (= $x537 true)))
 (let (($x97 (= $x320 true)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x535 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x67))))
 (let ((?x342 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (=> $x158 (= ?x342 ?x535))))))))))
 ))
 (let (($x433 (and $x488 $x460)))
 (let (($x283 (= $x433 true)))
 (let (($x322 (= $x283 true)))
 (let (($x678 (= $x322 true)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x194))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv2 32))) ?x657)))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv3 32))) ?x81)))
 (let ((?x775 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x616 (bvuge ?x246 (_ bv1 32))))
 (=> $x616 (= ?x775 ?x567)))))))))))
 ))
 (let (($x628 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x384 (_ bv1 32))))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x616 (bvuge ?x246 (_ bv1 32))))
 (= $x616 $x112))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x490 (= false false)))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x246 (_ bv0 32))))
 (=> $x250 $x490)))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x384 (_ bv0 32))))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x246 (_ bv0 32))))
 (= $x250 $x682))))))
 ))
 (let (($x459 (and $x354 $x233)))
 (let (($x163 (and $x459 $x628)))
 (let (($x599 (and $x163 $x237)))
 (let (($x139 (= $x599 true)))
 (let (($x757 (= $x139 true)))
 (let (($x84 (= $x757 true)))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x194))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv2 32))) ?x657)))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x194 (_ bv3 32))) ?x81)))
 (let ((?x342 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (=> $x158 (= ?x342 ?x567)))))))))))
 ))
 (let (($x54 (and $x488 $x348)))
 (let (($x458 (= $x54 true)))
 (let (($x558 (= $x458 true)))
 (let (($x607 (= $x558 true)))
 (let (($x565 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x194 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x535 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x67))))
 (let ((?x775 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x616 (bvuge ?x246 (_ bv1 32))))
 (=> $x616 (= ?x775 ?x535))))))))))
 ))
 (let (($x179 (and $x163 $x565)))
 (let (($x763 (= $x179 true)))
 (let (($x471 (= $x763 true)))
 (let (($x707 (= $x471 true)))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x314 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x708 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x314))))
 (let ((?x718 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv2 32))) ?x708)))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv3 32))) ?x718)))
 (let ((?x249 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (=> $x620 (= ?x249 ?x91)))))))))))
 ))
 (let (($x648 (and $x258 $x100)))
 (let (($x475 (= $x648 true)))
 (let (($x764 (= $x475 true)))
 (let (($x221 (= $x764 true)))
 (let (($x261 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x191 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x618 (and $x191 $x261)))
 (let (($x5 (= $x618 true)))
 (let (($x448 (= $x5 true)))
 (let (($x176 (= $x448 true)))
 (let ((?x768 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x768)))
 (let ((?x613 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x62 (= (_ bv0 32) ?x613)))
 (let ((?x68 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x120 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x614 (and $x188 $x190)))
 (let (($x496 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x769 (and $x496 $x614)))
 (let (($x435 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x619 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x468 (and $x619 $x365)))
 (let (($x339 (not $x468)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x783 (and $x208 $x271)))
 (let (($x46 (and (not $x783) $x339)))
 (let (($x505 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x656 (and $x201 $x505)))
 (let (($x676 (not $x656)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x561 (and $x192 $x126)))
 (let (($x466 (and (not $x561) $x676)))
 (let (($x654 (and (and (and (and (and (and $x466 $x46) $x25) $x435) $x769) $x290) $x62)))
 (let (($x481 (and $x654 $x44)))
 (let (($x340 (= $x481 true)))
 (let (($x311 (= $x340 true)))
 (let (($x643 (= $x311 true)))
 (let ((?x714 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x635 (bvneg ?x714)))
 (let (($x52 (= ?x635 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x285 (= $x52 true)))
 (let (($x472 (= $x285 true)))
 (let (($x129 (= ?x635 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x13 (= $x129 true)))
 (let (($x72 (= $x13 true)))
 (let (($x598 (and $x72 $x472)))
 (let (($x15 (and $x598 $x643)))
 (let (($x663 (and $x15 $x176)))
 (let (($x686 (and $x663 $x221)))
 (let (($x11 (and $x686 $x707)))
 (let (($x552 (and $x11 $x607)))
 (let (($x128 (and $x552 $x84)))
 (let (($x347 (and $x128 $x678)))
 (let (($x352 (and $x347 $x97)))
 (let (($x137 (and $x352 $x49)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x775 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (=> $x158 (= ?x342 ?x775)))))))
 ))
 (let (($x27 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x616 (bvuge ?x246 (_ bv1 32))))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x131 (_ bv1 32))))
 (= $x158 $x616))))))
 ))
 (let (($x659 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x246 (_ bv0 32))))
 (let ((?x131 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x131 (_ bv0 32))))
 (= $x223 $x250))))))
 ))
 (let (($x268 (and $x659 $x125)))
 (let (($x63 (and $x268 $x27)))
 (let (($x353 (and $x63 $x195)))
 (let (($x313 (and $x353 $x137)))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (=> $x620 (= ?x249 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x578 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x694 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x620 (bvuge ?x318 (_ bv1 32))))
 (= $x620 (bvuge ?x694 (_ bv1 32)))))))
 ))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x694 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x684 (= ?x318 (_ bv0 32))))
 (= $x684 (= ?x694 (_ bv0 32)))))))
 ))
 (let (($x579 (and $x241 $x418)))
 (let (($x604 (and $x579 $x578)))
 (let (($x660 (and $x604 $x658)))
 (let (($x509 (and $x660 $x313)))
 (let (($x715 (=> $x509 $x296)))
 (let (($x679 (not $x715)))
 (let (($x695 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x40 (select solver-mem_7 memmask-bounded-var!)))
 (let (($x751 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x164 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x482 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x275 (or false (or false (and (and true (or $x482 $x164)) (or $x155 $x751))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x275) (= ?x40 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x40 (_ bv0 8)))))))))))
 ))
 (and (and true $x695) $x679)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!138))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40c90194)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!139))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08a24110)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!141))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!140))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08a24113)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40c90197)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08a24110)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40c90194)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!141!146 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x0c308426) #x00
    (ite (= x!0 #x00000101) #x01
    (ite (= x!0 #x08a24114) #x01
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x40c90196) #x02
    (ite (= x!0 #x00000102) #x20
    (ite (= x!0 #x40c90198) #x20
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000100) #x00
    (ite (= x!0 #x00000103) #x00
    (ite (= x!0 #x00000000) #x00
      #x03)))))))))))))
  (define-fun k!143 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!147 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!147 (k!143 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!144 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000040 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000040)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!148 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000040) (= x!0 #x00000000)))
  (define-fun k!138 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x10410603) #x40
    (ite (= x!0 #x00000101) #x01
    (ite (= x!0 #x00000102) #x20
      #x00))))
  (define-fun k!142 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x40c90195 x!0)
                    (ite (bvule #x40c90197 x!0)
                         (ite (bvule #x40c90198 x!0) #x40c90198 #x40c90197)
                         #x40c90195)
                    #x40c90194)))
    (let ((a!2 (ite (bvule #x08a24114 x!0)
                    (ite (bvule #x0c308426 x!0)
                         (ite (bvule #x40c90194 x!0) a!1 #x0c308426)
                         #x08a24114)
                    #x08a24113)))
    (let ((a!3 (ite (bvule #x08a24110 x!0)
                    (ite (bvule #x08a24111 x!0)
                         (ite (bvule #x08a24113 x!0) a!2 #x08a24111)
                         #x08a24110)
                    #x00000103)))
    (let ((a!4 (ite (bvule #x00000101 x!0)
                    (ite (bvule #x00000102 x!0)
                         (ite (bvule #x00000103 x!0) a!3 #x00000102)
                         #x00000101)
                    #x00000100)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x00000100 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!141 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!141!146 (k!142 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!138 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!138 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!138 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!138 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!141 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!141 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!139!149 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000101) #x01
    (ite (= x!0 #x40c90196) #x00
    (ite (= x!0 #x40c90194) #x00
    (ite (= x!0 #x08a24111) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x08a24110) #x00
    (ite (= x!0 #x00000103) #x00
    (ite (= x!0 #x40c90195) #x00
    (ite (= x!0 #x40c90198) #x20
    (ite (= x!0 #x08a24114) #x01
    (ite (= x!0 #x08a24113) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00000102) #x20
    (ite (= x!0 #x0c308426) #x00
    (ite (= x!0 #x00000100) #x00
    (ite (= x!0 #x40c90197) #x00
    (ite (= x!0 #x00000000) #x00
      #x04)))))))))))))))))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x10410600)
  (define-fun input.spec-%var-m1-1.0.1!145 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000040) (= x!0 #x00000000)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!145 (k!144 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000040) #x00200100
      (let ((a!1 (concat (k!138 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!138 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!138 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!138 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!141 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!141 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!148
      (k!144 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000040) #x00200100
      (let ((a!1 (concat (k!141 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!141 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!140 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x01)
  (define-fun k!139 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!139!149 (k!142 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x861 (= true false)))
 (let (($x862 (= $x861 true)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x847 (= (_ bv0 32) ?x846)))
 (let ((?x844 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x845 (= (_ bv0 32) ?x844)))
 (let ((?x842 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x842)))
 (let ((?x838 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x839 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x838)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x840 (and $x837 $x839)))
 (let (($x836 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x841 (and $x836 $x840)))
 (let (($x835 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x833 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x827 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x826 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x828 (and $x826 $x827)))
 (let (($x829 (not $x828)))
 (let (($x824 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x823 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x825 (and $x823 $x824)))
 (let (($x831 (and (not $x825) $x829)))
 (let (($x818 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x819 (and $x817 $x818)))
 (let (($x820 (not $x819)))
 (let (($x814 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x812 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x815 (and $x812 $x814)))
 (let (($x822 (and (not $x815) $x820)))
 (let (($x853 (and (and (and (and (and (and $x822 $x831) $x833) $x835) $x841) $x843) $x845)))
 (let (($x854 (and $x853 $x847)))
 (let (($x855 (= $x854 true)))
 (let (($x856 (= $x855 true)))
 (let (($x857 (= $x856 true)))
 (let (($x804 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem ?x730))))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv2 32))) ?x288))))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (=> $x659 (= ?x195 ?x600))))))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x558 (_ bv1 32))))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (= $x659 $x460))))))
 ))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x709 (= false false)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x319 (_ bv0 32))))
 (=> $x418 $x709)))))
 ))
 (let (($x391 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x558 (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x319 (_ bv0 32))))
 (= $x418 $x607))))))
 ))
 (let (($x415 (and $x391 $x604)))
 (let (($x51 (and $x415 $x330)))
 (let (($x805 (and $x51 $x804)))
 (let (($x806 (= $x805 true)))
 (let (($x807 (= $x806 true)))
 (let (($x808 (= $x807 true)))
 (let (($x794 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x508))))
 (let ((?x316 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (=> $x667 (= ?x316 ?x266))))))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x558 (_ bv1 32))))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (= $x667 $x460))))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x709 (= false false)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x639 (_ bv0 32))))
 (=> $x120 $x709)))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x558 (_ bv0 32))))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x639 (_ bv0 32))))
 (= $x120 $x607))))))
 ))
 (let (($x374 (and $x309 $x68)))
 (let (($x322 (and $x374 $x283)))
 (let (($x795 (and $x322 $x794)))
 (let (($x796 (= $x795 true)))
 (let (($x797 (= $x796 true)))
 (let (($x798 (= $x797 true)))
 (let (($x64 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x489 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x352))))
 (let ((?x766 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv2 32))) ?x489)))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv3 32))) ?x766)))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x301 (_ bv1 32))))
 (=> $x93 (= ?x171 ?x9)))))))))))
 ))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x558 (_ bv1 32))))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x301 (_ bv1 32))))
 (= $x93 $x460))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x709 (= false false)))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x301 (_ bv0 32))))
 (=> $x496 $x709)))))
 ))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x558 (_ bv0 32))))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x301 (_ bv0 32))))
 (= $x496 $x607))))))
 ))
 (let (($x755 (and $x546 $x160)))
 (let (($x53 (and $x755 $x470)))
 (let (($x295 (and $x53 $x64)))
 (let (($x61 (= $x295 true)))
 (let (($x787 (= $x61 true)))
 (let (($x788 (= $x787 true)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x489 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x352))))
 (let ((?x766 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv2 32))) ?x489)))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv3 32))) ?x766)))
 (let ((?x316 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (=> $x667 (= ?x316 ?x9)))))))))))
 ))
 (let (($x150 (and $x322 $x497)))
 (let (($x147 (= $x150 true)))
 (let (($x683 (= $x147 true)))
 (let (($x650 (= $x683 true)))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x508))))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x301 (_ bv1 32))))
 (=> $x93 (= ?x171 ?x266))))))))))
 ))
 (let (($x680 (and $x53 $x414)))
 (let (($x395 (= $x680 true)))
 (let (($x37 (= $x395 true)))
 (let (($x156 (= $x37 true)))
 (let (($x560 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem ?x730))))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv2 32))) ?x288))))
 (let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (=> $x557 (= ?x26 ?x600))))))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x558 (_ bv1 32))))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (= $x557 $x460))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x709 (= false false)))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x745 (_ bv0 32))))
 (=> $x241 $x709)))))
 ))
 (let (($x575 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x558 (_ bv0 32))))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x745 (_ bv0 32))))
 (= $x241 $x607))))))
 ))
 (let (($x308 (and $x575 $x254)))
 (let (($x293 (and $x308 $x310)))
 (let (($x464 (and $x293 $x560)))
 (let (($x232 (= $x464 true)))
 (let (($x774 (= $x232 true)))
 (let (($x10 (= $x774 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x730))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x596)))
 (let ((?x451 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x47)))
 (let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (=> $x557 (= ?x26 ?x451)))))))))))
 ))
 (let (($x243 (and $x293 $x224)))
 (let (($x341 (= $x243 true)))
 (let (($x252 (= $x341 true)))
 (let (($x530 (= $x252 true)))
 (let ((?x430 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x24 (bvneg ?x430)))
 (let (($x540 (= ?x24 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x611 (= $x540 true)))
 (let (($x602 (= $x611 true)))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x730))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x596)))
 (let ((?x451 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x47)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (=> $x659 (= ?x195 ?x451)))))))))))
 ))
 (let (($x548 (and $x51 $x107)))
 (let (($x601 (= $x548 true)))
 (let (($x410 (= $x601 true)))
 (let (($x566 (= $x410 true)))
 (let (($x632 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x358)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x721)))
 (let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (=> $x557 (= ?x26 ?x111)))))))))))
 ))
 (let (($x645 (and $x293 $x632)))
 (let (($x321 (= $x645 true)))
 (let (($x216 (= $x321 true)))
 (let (($x390 (= $x216 true)))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x358)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x721)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (=> $x659 (= ?x195 ?x111)))))))))))
 ))
 (let (($x356 (and $x51 $x186)))
 (let (($x102 (= $x356 true)))
 (let (($x236 (= $x102 true)))
 (let (($x8 (= $x236 true)))
 (let (($x281 (= ?x24 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x140 (= $x281 true)))
 (let (($x700 (= $x140 true)))
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x352))))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x352 (_ bv2 32))) ?x273)))
 (let ((?x666 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x352 (_ bv3 32))) ?x313)))
 (let ((?x316 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (=> $x667 (= ?x316 ?x666)))))))))))
 ))
 (let (($x398 (and $x322 $x350)))
 (let (($x584 (= $x398 true)))
 (let (($x138 (= $x584 true)))
 (let (($x76 (= $x138 true)))
 (let (($x624 (and $x76 $x700)))
 (let (($x238 (and $x624 $x8)))
 (let (($x638 (and $x238 $x390)))
 (let (($x402 (and $x638 $x566)))
 (let (($x534 (and $x402 $x602)))
 (let (($x573 (and $x534 $x530)))
 (let (($x122 (and $x573 $x10)))
 (let (($x228 (and $x122 $x156)))
 (let (($x389 (and $x228 $x650)))
 (let (($x789 (and $x389 $x788)))
 (let (($x799 (and $x789 $x798)))
 (let (($x809 (and $x799 $x808)))
 (let (($x858 (and $x809 $x857)))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x316 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (=> $x667 (= ?x316 ?x171)))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x301 (_ bv1 32))))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (= $x667 $x93))))))
 ))
 (let (($x614 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x301 (_ bv0 32))))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x639 (_ bv0 32))))
 (= $x120 $x496))))))
 ))
 (let (($x290 (and $x614 $x68)))
 (let (($x28 (and $x290 $x191)))
 (let (($x646 (and $x28 $x682)))
 (let (($x859 (and $x646 $x858)))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (=> $x659 (= ?x195 ?x26)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (= $x659 $x557))))))
 ))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x745 (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x319 (_ bv0 32))))
 (= $x418 $x241))))))
 ))
 (let (($x249 (and $x620 $x604)))
 (let (($x268 (and $x249 $x125)))
 (let (($x714 (and $x268 $x375)))
 (let (($x860 (and $x714 $x859)))
 (let (($x863 (=> $x860 $x862)))
 (not $x863))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x861 (= true false)))
 (let (($x862 (= $x861 true)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x847 (= (_ bv0 32) ?x846)))
 (let ((?x844 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x845 (= (_ bv0 32) ?x844)))
 (let ((?x842 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x842)))
 (let ((?x838 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x839 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x838)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x840 (and $x837 $x839)))
 (let (($x836 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x841 (and $x836 $x840)))
 (let (($x835 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x833 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x827 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x826 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x828 (and $x826 $x827)))
 (let (($x829 (not $x828)))
 (let (($x824 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x823 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x825 (and $x823 $x824)))
 (let (($x831 (and (not $x825) $x829)))
 (let (($x818 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x819 (and $x817 $x818)))
 (let (($x820 (not $x819)))
 (let (($x814 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x812 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x815 (and $x812 $x814)))
 (let (($x822 (and (not $x815) $x820)))
 (let (($x853 (and (and (and (and (and (and $x822 $x831) $x833) $x835) $x841) $x843) $x845)))
 (let (($x854 (and $x853 $x847)))
 (let (($x855 (= $x854 true)))
 (let (($x856 (= $x855 true)))
 (let (($x857 (= $x856 true)))
 (let (($x804 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem ?x730))))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv2 32))) ?x288))))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (=> $x659 (= ?x195 ?x600))))))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x558 (_ bv1 32))))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (= $x659 $x460))))))
 ))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x709 (= false false)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x319 (_ bv0 32))))
 (=> $x418 $x709)))))
 ))
 (let (($x391 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x558 (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x319 (_ bv0 32))))
 (= $x418 $x607))))))
 ))
 (let (($x415 (and $x391 $x604)))
 (let (($x51 (and $x415 $x330)))
 (let (($x805 (and $x51 $x804)))
 (let (($x806 (= $x805 true)))
 (let (($x807 (= $x806 true)))
 (let (($x808 (= $x807 true)))
 (let (($x794 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x508))))
 (let ((?x316 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (=> $x667 (= ?x316 ?x266))))))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x558 (_ bv1 32))))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (= $x667 $x460))))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x709 (= false false)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x639 (_ bv0 32))))
 (=> $x120 $x709)))))
 ))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x558 (_ bv0 32))))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x639 (_ bv0 32))))
 (= $x120 $x607))))))
 ))
 (let (($x374 (and $x309 $x68)))
 (let (($x322 (and $x374 $x283)))
 (let (($x795 (and $x322 $x794)))
 (let (($x796 (= $x795 true)))
 (let (($x797 (= $x796 true)))
 (let (($x798 (= $x797 true)))
 (let (($x64 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x489 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x352))))
 (let ((?x766 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv2 32))) ?x489)))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv3 32))) ?x766)))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x301 (_ bv1 32))))
 (=> $x93 (= ?x171 ?x9)))))))))))
 ))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x558 (_ bv1 32))))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x301 (_ bv1 32))))
 (= $x93 $x460))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x709 (= false false)))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x301 (_ bv0 32))))
 (=> $x496 $x709)))))
 ))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x558 (_ bv0 32))))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x301 (_ bv0 32))))
 (= $x496 $x607))))))
 ))
 (let (($x755 (and $x546 $x160)))
 (let (($x53 (and $x755 $x470)))
 (let (($x295 (and $x53 $x64)))
 (let (($x61 (= $x295 true)))
 (let (($x787 (= $x61 true)))
 (let (($x788 (= $x787 true)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x489 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x352))))
 (let ((?x766 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv2 32))) ?x489)))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x352 (_ bv3 32))) ?x766)))
 (let ((?x316 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (=> $x667 (= ?x316 ?x9)))))))))))
 ))
 (let (($x150 (and $x322 $x497)))
 (let (($x147 (= $x150 true)))
 (let (($x683 (= $x147 true)))
 (let (($x650 (= $x683 true)))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x508))))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x301 (_ bv1 32))))
 (=> $x93 (= ?x171 ?x266))))))))))
 ))
 (let (($x680 (and $x53 $x414)))
 (let (($x395 (= $x680 true)))
 (let (($x37 (= $x395 true)))
 (let (($x156 (= $x37 true)))
 (let (($x560 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem ?x730))))
 (let ((?x600 (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x730 (_ bv2 32))) ?x288))))
 (let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (=> $x557 (= ?x26 ?x600))))))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x558 (_ bv1 32))))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (= $x557 $x460))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x709 (= false false)))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x745 (_ bv0 32))))
 (=> $x241 $x709)))))
 ))
 (let (($x575 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x607 (= ?x558 (_ bv0 32))))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x745 (_ bv0 32))))
 (= $x241 $x607))))))
 ))
 (let (($x308 (and $x575 $x254)))
 (let (($x293 (and $x308 $x310)))
 (let (($x464 (and $x293 $x560)))
 (let (($x232 (= $x464 true)))
 (let (($x774 (= $x232 true)))
 (let (($x10 (= $x774 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x730))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x596)))
 (let ((?x451 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x47)))
 (let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (=> $x557 (= ?x26 ?x451)))))))))))
 ))
 (let (($x243 (and $x293 $x224)))
 (let (($x341 (= $x243 true)))
 (let (($x252 (= $x341 true)))
 (let (($x530 (= $x252 true)))
 (let ((?x430 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x24 (bvneg ?x430)))
 (let (($x540 (= ?x24 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x611 (= $x540 true)))
 (let (($x602 (= $x611 true)))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x730))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x596)))
 (let ((?x451 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x47)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (=> $x659 (= ?x195 ?x451)))))))))))
 ))
 (let (($x548 (and $x51 $x107)))
 (let (($x601 (= $x548 true)))
 (let (($x410 (= $x601 true)))
 (let (($x566 (= $x410 true)))
 (let (($x632 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x358)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x721)))
 (let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (=> $x557 (= ?x26 ?x111)))))))))))
 ))
 (let (($x645 (and $x293 $x632)))
 (let (($x321 (= $x645 true)))
 (let (($x216 (= $x321 true)))
 (let (($x390 (= $x216 true)))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x358)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x721)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (=> $x659 (= ?x195 ?x111)))))))))))
 ))
 (let (($x356 (and $x51 $x186)))
 (let (($x102 (= $x356 true)))
 (let (($x236 (= $x102 true)))
 (let (($x8 (= $x236 true)))
 (let (($x281 (= ?x24 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x140 (= $x281 true)))
 (let (($x700 (= $x140 true)))
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x352 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x352))))
 (let ((?x313 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x352 (_ bv2 32))) ?x273)))
 (let ((?x666 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x352 (_ bv3 32))) ?x313)))
 (let ((?x316 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (=> $x667 (= ?x316 ?x666)))))))))))
 ))
 (let (($x398 (and $x322 $x350)))
 (let (($x584 (= $x398 true)))
 (let (($x138 (= $x584 true)))
 (let (($x76 (= $x138 true)))
 (let (($x624 (and $x76 $x700)))
 (let (($x238 (and $x624 $x8)))
 (let (($x638 (and $x238 $x390)))
 (let (($x402 (and $x638 $x566)))
 (let (($x534 (and $x402 $x602)))
 (let (($x573 (and $x534 $x530)))
 (let (($x122 (and $x573 $x10)))
 (let (($x228 (and $x122 $x156)))
 (let (($x389 (and $x228 $x650)))
 (let (($x789 (and $x389 $x788)))
 (let (($x799 (and $x789 $x798)))
 (let (($x809 (and $x799 $x808)))
 (let (($x858 (and $x809 $x857)))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x316 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (=> $x667 (= ?x316 ?x171)))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x301 (_ bv1 32))))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (bvuge ?x639 (_ bv1 32))))
 (= $x667 $x93))))))
 ))
 (let (($x614 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x301 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x301 (_ bv0 32))))
 (let ((?x639 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x639 (_ bv0 32))))
 (= $x120 $x496))))))
 ))
 (let (($x290 (and $x614 $x68)))
 (let (($x28 (and $x290 $x191)))
 (let (($x646 (and $x28 $x682)))
 (let (($x859 (and $x646 $x858)))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (=> $x659 (= ?x195 ?x26)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x557 (bvuge ?x745 (_ bv1 32))))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x319 (_ bv1 32))))
 (= $x659 $x557))))))
 ))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x745 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x745 (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x319 (_ bv0 32))))
 (= $x418 $x241))))))
 ))
 (let (($x249 (and $x620 $x604)))
 (let (($x268 (and $x249 $x125)))
 (let (($x714 (and $x268 $x375)))
 (let (($x860 (and $x714 $x859)))
 (let (($x863 (=> $x860 $x862)))
 (not $x863))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!27))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x389bf3f0)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xb7efbcff)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x3eef53d5)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x842be6b8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!28))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x842be6bb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x389bf3f3)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x842be6b8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x389bf3f0)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!30 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!31 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!31 (k!30 x!0)))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbcff (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!26 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbcff (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!33 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!33 (k!30 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbcff (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!34 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!29 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!34 (k!29 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!32 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!32 (k!29 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x3eef53d8 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d7 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d6 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d5 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!27 (bvadd #x3eef53d8 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d7 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d6 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d5 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x3eef53d8 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d7 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d6 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d5 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m2-1.1.1 x!0)))))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!28))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!27))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000bc000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000bc003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000bc000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!31 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!29 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!31 (k!29 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1!32 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!32 (k!29 x!0)))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!26 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!27 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!30 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!34 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!34 (k!30 x!0)))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!26 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!28 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!28 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!33 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!33 (k!30 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!27 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!26 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m2-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x871 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x878 (=> $x871 true)))
 (let (($x879 (= $x878 true)))
 (let (($x880 (= $x879 true)))
 (let (($x872 (= $x871 true)))
 (let (($x873 (= $x872 true)))
 (let (($x874 (= $x873 true)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x108 (= (_ bv0 32) ?x198)))
 (let ((?x542 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x346 (= (_ bv0 32) ?x542)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x711 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x474 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x749 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x474)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x229 (and $x294 $x749)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x685 (and $x66 $x229)))
 (let (($x38 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x782 (and $x95 $x370)))
 (let (($x152 (not $x782)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x693 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x644 (and $x693 $x467)))
 (let (($x265 (and (not $x644) $x152)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x276 $x324)))
 (let (($x151 (not $x58)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x453 (and $x159 $x80)))
 (let (($x525 (and (not $x453) $x151)))
 (let (($x507 (and (and (and (and (and (and $x525 $x265) $x286) $x38) $x685) $x711) $x346)))
 (let (($x633 (and $x507 $x108)))
 (let (($x865 (= $x633 true)))
 (let (($x866 (= $x865 true)))
 (let (($x867 (= $x866 true)))
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem ?x737))))
 (let ((?x512 (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv2 32))) ?x394))))
 (let ((?x273 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (=> $x314 (= ?x273 ?x512))))))))))
 ))
 (let (($x758 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (= $x314 $x809))))))
 ))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x28 (_ bv0 32))))
 (=> $x316 $x384)))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x28 (_ bv0 32))))
 (= $x316 $x795))))))
 ))
 (let (($x376 (and $x130 $x54)))
 (let (($x35 (and $x376 $x758)))
 (let (($x668 (and $x35 $x338)))
 (let (($x690 (= $x668 true)))
 (let (($x88 (= $x690 true)))
 (let (($x74 (= $x88 true)))
 (let (($x454 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x533 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x590 (and $x533 $x454)))
 (let (($x360 (= $x590 true)))
 (let (($x778 (= $x360 true)))
 (let (($x779 (= $x778 true)))
 (let (($x84 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x522 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x522))))
 (let ((?x566 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (=> $x703 (= ?x566 ?x305))))))))))
 ))
 (let (($x811 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (= $x703 $x809))))))
 ))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x102 (_ bv0 32))))
 (=> $x236 $x384)))))
 ))
 (let (($x797 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x102 (_ bv0 32))))
 (= $x236 $x795))))))
 ))
 (let (($x798 (and $x797 $x406)))
 (let (($x812 (and $x798 $x811)))
 (let (($x128 (and $x812 $x84)))
 (let (($x678 (= $x128 true)))
 (let (($x347 (= $x678 true)))
 (let (($x589 (= $x347 true)))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x828))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x205)))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x211)))
 (let ((?x410 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x436 (_ bv1 32))))
 (=> $x638 (= ?x410 ?x67)))))))))))
 ))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x436 (_ bv1 32))))
 (= $x638 $x809))))))
 ))
 (let (($x697 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x436 (_ bv0 32))))
 (=> $x186 $x384)))))
 ))
 (let (($x641 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x436 (_ bv0 32))))
 (= $x186 $x795))))))
 ))
 (let (($x444 (and $x641 $x697)))
 (let (($x569 (and $x444 $x423)))
 (let (($x488 (and $x569 $x162)))
 (let (($x331 (= $x488 true)))
 (let (($x403 (= $x331 true)))
 (let (($x733 (= $x403 true)))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x828))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x205)))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x211)))
 (let ((?x566 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (=> $x703 (= ?x566 ?x67)))))))))))
 ))
 (let (($x531 (and $x812 $x127)))
 (let (($x471 (= $x531 true)))
 (let (($x707 (= $x471 true)))
 (let (($x565 (= $x707 true)))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x522 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x522))))
 (let ((?x410 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x436 (_ bv1 32))))
 (=> $x638 (= ?x410 ?x305))))))))))
 ))
 (let (($x203 (and $x569 $x121)))
 (let (($x506 (= $x203 true)))
 (let (($x146 (= $x506 true)))
 (let (($x287 (= $x146 true)))
 (let (($x759 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem ?x737))))
 (let ((?x512 (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv2 32))) ?x394))))
 (let ((?x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (=> $x258 (= ?x193 ?x512))))))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (= $x258 $x809))))))
 ))
 (let (($x302 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x677 (= ?x93 (_ bv0 32))))
 (=> $x677 $x384)))))
 ))
 (let (($x495 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x677 (= ?x93 (_ bv0 32))))
 (= $x677 $x795))))))
 ))
 (let (($x610 (and $x495 $x302)))
 (let (($x363 (and $x610 $x172)))
 (let (($x503 (and $x363 $x759)))
 (let (($x282 (= $x503 true)))
 (let (($x786 (= $x282 true)))
 (let (($x45 (= $x786 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x737))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv2 32))) ?x7)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv3 32))) ?x86)))
 (let ((?x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (=> $x258 (= ?x193 ?x272)))))))))))
 ))
 (let (($x449 (and $x363 $x307)))
 (let (($x785 (= $x449 true)))
 (let (($x206 (= $x785 true)))
 (let (($x393 (= $x206 true)))
 (let ((?x844 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x845 (bvneg ?x844)))
 (let (($x429 (= ?x845 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x732 (= $x429 true)))
 (let (($x85 (= $x732 true)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x737))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv2 32))) ?x7)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv3 32))) ?x86)))
 (let ((?x273 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (=> $x314 (= ?x273 ?x272)))))))))))
 ))
 (let (($x30 (and $x35 $x332)))
 (let (($x434 (= $x30 true)))
 (let (($x658 (= $x434 true)))
 (let (($x504 (= $x658 true)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x737))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv2 32))) ?x499)))
 (let ((?x472 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv3 32))) ?x72)))
 (let ((?x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (=> $x258 (= ?x193 ?x472)))))))))))
 ))
 (let (($x477 (and $x363 $x42)))
 (let (($x392 (= $x477 true)))
 (let (($x334 (= $x392 true)))
 (let (($x587 (= $x334 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x737))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv2 32))) ?x499)))
 (let ((?x472 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv3 32))) ?x72)))
 (let ((?x273 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (=> $x314 (= ?x273 ?x472)))))))))))
 ))
 (let (($x561 (and $x35 $x126)))
 (let (($x36 (= $x561 true)))
 (let (($x716 (= $x36 true)))
 (let (($x207 (= $x716 true)))
 (let (($x846 (= ?x845 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x847 (= $x846 true)))
 (let (($x854 (= $x847 true)))
 (let (($x839 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x832 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x828))))
 (let ((?x834 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x832)))
 (let ((?x836 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x834)))
 (let ((?x566 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (=> $x703 (= ?x566 ?x836)))))))))))
 ))
 (let (($x840 (and $x812 $x839)))
 (let (($x841 (= $x840 true)))
 (let (($x851 (= $x841 true)))
 (let (($x842 (= $x851 true)))
 (let (($x855 (and $x842 $x854)))
 (let (($x669 (and $x855 $x207)))
 (let (($x339 (and $x669 $x587)))
 (let (($x225 (and $x339 $x504)))
 (let (($x655 (and $x225 $x85)))
 (let (($x70 (and $x655 $x393)))
 (let (($x559 (and $x70 $x45)))
 (let (($x248 (and $x559 $x287)))
 (let (($x179 (and $x248 $x565)))
 (let (($x22 (and $x179 $x733)))
 (let (($x517 (and $x22 $x589)))
 (let (($x537 (and $x517 $x779)))
 (let (($x306 (and $x537 $x74)))
 (let (($x868 (and $x306 $x867)))
 (let (($x875 (and $x868 $x874)))
 (let (($x540 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x410 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x566 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (=> $x703 (= ?x566 ?x410)))))))
 ))
 (let (($x722 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x436 (_ bv1 32))))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (= $x703 $x638))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x436 (_ bv0 32))))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x102 (_ bv0 32))))
 (= $x236 $x186))))))
 ))
 (let (($x254 (and $x238 $x406)))
 (let (($x110 (and $x254 $x722)))
 (let (($x611 (and $x110 $x540)))
 (let (($x876 (and $x611 $x875)))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x273 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (=> $x314 (= ?x273 ?x193)))))))
 ))
 (let (($x772 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (= $x314 $x258))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x677 (= ?x93 (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x28 (_ bv0 32))))
 (= $x316 $x677))))))
 ))
 (let (($x112 (and $x260 $x54)))
 (let (($x352 (and $x112 $x772)))
 (let (($x336 (and $x352 $x547)))
 (let (($x877 (and $x336 $x876)))
 (let (($x881 (=> $x877 $x880)))
 (not $x881)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x871 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x878 (=> $x871 true)))
 (let (($x879 (= $x878 true)))
 (let (($x880 (= $x879 true)))
 (let (($x872 (= $x871 true)))
 (let (($x873 (= $x872 true)))
 (let (($x874 (= $x873 true)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x108 (= (_ bv0 32) ?x198)))
 (let ((?x542 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x346 (= (_ bv0 32) ?x542)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x711 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x474 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x749 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x474)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x229 (and $x294 $x749)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x685 (and $x66 $x229)))
 (let (($x38 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x782 (and $x95 $x370)))
 (let (($x152 (not $x782)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x693 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x644 (and $x693 $x467)))
 (let (($x265 (and (not $x644) $x152)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x276 $x324)))
 (let (($x151 (not $x58)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x453 (and $x159 $x80)))
 (let (($x525 (and (not $x453) $x151)))
 (let (($x507 (and (and (and (and (and (and $x525 $x265) $x286) $x38) $x685) $x711) $x346)))
 (let (($x633 (and $x507 $x108)))
 (let (($x865 (= $x633 true)))
 (let (($x866 (= $x865 true)))
 (let (($x867 (= $x866 true)))
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem ?x737))))
 (let ((?x512 (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv2 32))) ?x394))))
 (let ((?x273 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (=> $x314 (= ?x273 ?x512))))))))))
 ))
 (let (($x758 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (= $x314 $x809))))))
 ))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x28 (_ bv0 32))))
 (=> $x316 $x384)))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x28 (_ bv0 32))))
 (= $x316 $x795))))))
 ))
 (let (($x376 (and $x130 $x54)))
 (let (($x35 (and $x376 $x758)))
 (let (($x668 (and $x35 $x338)))
 (let (($x690 (= $x668 true)))
 (let (($x88 (= $x690 true)))
 (let (($x74 (= $x88 true)))
 (let (($x454 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x533 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x590 (and $x533 $x454)))
 (let (($x360 (= $x590 true)))
 (let (($x778 (= $x360 true)))
 (let (($x779 (= $x778 true)))
 (let (($x84 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x522 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x522))))
 (let ((?x566 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (=> $x703 (= ?x566 ?x305))))))))))
 ))
 (let (($x811 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (= $x703 $x809))))))
 ))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x102 (_ bv0 32))))
 (=> $x236 $x384)))))
 ))
 (let (($x797 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x102 (_ bv0 32))))
 (= $x236 $x795))))))
 ))
 (let (($x798 (and $x797 $x406)))
 (let (($x812 (and $x798 $x811)))
 (let (($x128 (and $x812 $x84)))
 (let (($x678 (= $x128 true)))
 (let (($x347 (= $x678 true)))
 (let (($x589 (= $x347 true)))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x828))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x205)))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x211)))
 (let ((?x410 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x436 (_ bv1 32))))
 (=> $x638 (= ?x410 ?x67)))))))))))
 ))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x436 (_ bv1 32))))
 (= $x638 $x809))))))
 ))
 (let (($x697 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x436 (_ bv0 32))))
 (=> $x186 $x384)))))
 ))
 (let (($x641 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x436 (_ bv0 32))))
 (= $x186 $x795))))))
 ))
 (let (($x444 (and $x641 $x697)))
 (let (($x569 (and $x444 $x423)))
 (let (($x488 (and $x569 $x162)))
 (let (($x331 (= $x488 true)))
 (let (($x403 (= $x331 true)))
 (let (($x733 (= $x403 true)))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x828))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x205)))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x211)))
 (let ((?x566 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (=> $x703 (= ?x566 ?x67)))))))))))
 ))
 (let (($x531 (and $x812 $x127)))
 (let (($x471 (= $x531 true)))
 (let (($x707 (= $x471 true)))
 (let (($x565 (= $x707 true)))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x522 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x522))))
 (let ((?x410 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x436 (_ bv1 32))))
 (=> $x638 (= ?x410 ?x305))))))))))
 ))
 (let (($x203 (and $x569 $x121)))
 (let (($x506 (= $x203 true)))
 (let (($x146 (= $x506 true)))
 (let (($x287 (= $x146 true)))
 (let (($x759 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem ?x737))))
 (let ((?x512 (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x737 (_ bv2 32))) ?x394))))
 (let ((?x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (=> $x258 (= ?x193 ?x512))))))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (= $x258 $x809))))))
 ))
 (let (($x302 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x677 (= ?x93 (_ bv0 32))))
 (=> $x677 $x384)))))
 ))
 (let (($x495 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x677 (= ?x93 (_ bv0 32))))
 (= $x677 $x795))))))
 ))
 (let (($x610 (and $x495 $x302)))
 (let (($x363 (and $x610 $x172)))
 (let (($x503 (and $x363 $x759)))
 (let (($x282 (= $x503 true)))
 (let (($x786 (= $x282 true)))
 (let (($x45 (= $x786 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x737))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv2 32))) ?x7)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv3 32))) ?x86)))
 (let ((?x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (=> $x258 (= ?x193 ?x272)))))))))))
 ))
 (let (($x449 (and $x363 $x307)))
 (let (($x785 (= $x449 true)))
 (let (($x206 (= $x785 true)))
 (let (($x393 (= $x206 true)))
 (let ((?x844 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x845 (bvneg ?x844)))
 (let (($x429 (= ?x845 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x732 (= $x429 true)))
 (let (($x85 (= $x732 true)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x7 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x737))))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv2 32))) ?x7)))
 (let ((?x272 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x737 (_ bv3 32))) ?x86)))
 (let ((?x273 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (=> $x314 (= ?x273 ?x272)))))))))))
 ))
 (let (($x30 (and $x35 $x332)))
 (let (($x434 (= $x30 true)))
 (let (($x658 (= $x434 true)))
 (let (($x504 (= $x658 true)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x737))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv2 32))) ?x499)))
 (let ((?x472 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv3 32))) ?x72)))
 (let ((?x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (=> $x258 (= ?x193 ?x472)))))))))))
 ))
 (let (($x477 (and $x363 $x42)))
 (let (($x392 (= $x477 true)))
 (let (($x334 (= $x392 true)))
 (let (($x587 (= $x334 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x737 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x737))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv2 32))) ?x499)))
 (let ((?x472 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x737 (_ bv3 32))) ?x72)))
 (let ((?x273 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (=> $x314 (= ?x273 ?x472)))))))))))
 ))
 (let (($x561 (and $x35 $x126)))
 (let (($x36 (= $x561 true)))
 (let (($x716 (= $x36 true)))
 (let (($x207 (= $x716 true)))
 (let (($x846 (= ?x845 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x847 (= $x846 true)))
 (let (($x854 (= $x847 true)))
 (let (($x839 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x832 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x828))))
 (let ((?x834 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x832)))
 (let ((?x836 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x834)))
 (let ((?x566 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (=> $x703 (= ?x566 ?x836)))))))))))
 ))
 (let (($x840 (and $x812 $x839)))
 (let (($x841 (= $x840 true)))
 (let (($x851 (= $x841 true)))
 (let (($x842 (= $x851 true)))
 (let (($x855 (and $x842 $x854)))
 (let (($x669 (and $x855 $x207)))
 (let (($x339 (and $x669 $x587)))
 (let (($x225 (and $x339 $x504)))
 (let (($x655 (and $x225 $x85)))
 (let (($x70 (and $x655 $x393)))
 (let (($x559 (and $x70 $x45)))
 (let (($x248 (and $x559 $x287)))
 (let (($x179 (and $x248 $x565)))
 (let (($x22 (and $x179 $x733)))
 (let (($x517 (and $x22 $x589)))
 (let (($x537 (and $x517 $x779)))
 (let (($x306 (and $x537 $x74)))
 (let (($x868 (and $x306 $x867)))
 (let (($x875 (and $x868 $x874)))
 (let (($x540 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x410 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x566 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (=> $x703 (= ?x566 ?x410)))))))
 ))
 (let (($x722 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (bvuge ?x436 (_ bv1 32))))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (bvuge ?x102 (_ bv1 32))))
 (= $x703 $x638))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x436 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x436 (_ bv0 32))))
 (let ((?x102 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x102 (_ bv0 32))))
 (= $x236 $x186))))))
 ))
 (let (($x254 (and $x238 $x406)))
 (let (($x110 (and $x254 $x722)))
 (let (($x611 (and $x110 $x540)))
 (let (($x876 (and $x611 $x875)))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x273 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (=> $x314 (= ?x273 ?x193)))))))
 ))
 (let (($x772 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x93 (_ bv1 32))))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x28 (_ bv1 32))))
 (= $x314 $x258))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x677 (= ?x93 (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x28 (_ bv0 32))))
 (= $x316 $x677))))))
 ))
 (let (($x112 (and $x260 $x54)))
 (let (($x352 (and $x112 $x772)))
 (let (($x336 (and $x352 $x547)))
 (let (($x877 (and $x336 $x876)))
 (let (($x881 (=> $x877 $x880)))
 (not $x881)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x885 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x886 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x885)))
 (let ((?x883 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L2%3%fcallEnd)))
 (let ((?x884 (bvadd input.spec-%var-fi-0.L2%3%fcallStart ?x883)))
 (let (($x887 (= ?x884 ?x886)))
 (let (($x888 (= $x887 true)))
 (let (($x889 (= $x888 true)))
 (let ((?x117 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x426 (bvneg ?x117)))
 (let (($x31 (= ?x426 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x701 (= $x31 true)))
 (let (($x583 (= $x701 true)))
 (let (($x157 (= ?x426 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x104 (= $x157 true)))
 (let (($x210 (= $x104 true)))
 (let (($x155 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x156 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x680 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x228 (and $x680 $x156)))
 (let (($x593 (and $x228 $x155)))
 (let (($x187 (= $x593 true)))
 (let (($x83 (= $x187 true)))
 (let (($x73 (= $x83 true)))
 (let (($x132 (= $x155 true)))
 (let (($x239 (= $x132 true)))
 (let (($x442 (= $x239 true)))
 (let ((?x791 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x164 (= (_ bv0 32) ?x791)))
 (let ((?x562 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x101 (= (_ bv0 32) ?x562)))
 (let ((?x270 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x270)))
 (let ((?x681 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x681)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x204 (and $x315 $x135)))
 (let (($x527 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x527 $x204)))
 (let (($x279 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x818 (and $x817 $x821)))
 (let (($x822 (not $x818)))
 (let (($x820 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x819 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x816 (and $x819 $x820)))
 (let (($x830 (and (not $x816) $x822)))
 (let (($x813 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x806 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x814 (and $x806 $x813)))
 (let (($x815 (not $x814)))
 (let (($x802 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x799 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x804 (and $x799 $x802)))
 (let (($x824 (and (not $x804) $x815)))
 (let (($x494 (and (and (and (and (and (and $x824 $x830) $x96) $x279) $x48) $x12) $x101)))
 (let (($x790 (and $x494 $x164)))
 (let (($x235 (= $x790 true)))
 (let (($x136 (= $x235 true)))
 (let (($x726 (= $x136 true)))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem ?x468))))
 (let ((?x767 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv2 32))) ?x639))))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (=> $x530 (= ?x832 ?x767))))))))))
 ))
 (let (($x729 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (bvuge ?x84 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (= $x530 $x778))))))
 ))
 (let (($x792 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (= ?x110 (_ bv0 32))))
 (=> $x566 $x264)))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x84 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (= ?x110 (_ bv0 32))))
 (= $x566 $x128))))))
 ))
 (let (($x573 (and $x694 $x792)))
 (let (($x516 (and $x573 $x729)))
 (let (($x497 (and $x516 $x9)))
 (let (($x150 (= $x497 true)))
 (let (($x683 (= $x150 true)))
 (let (($x147 (= $x683 true)))
 (let (($x78 (= $x228 true)))
 (let (($x777 (= $x78 true)))
 (let (($x489 (= $x777 true)))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x651 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x651))))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (=> $x695 (= ?x504 ?x337))))))))))
 ))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (bvuge ?x84 (_ bv1 32))))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (= $x695 $x778))))))
 ))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x36 (_ bv0 32))))
 (=> $x716 $x264)))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x84 (_ bv0 32))))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x36 (_ bv0 32))))
 (= $x716 $x128))))))
 ))
 (let (($x589 (and $x347 $x148)))
 (let (($x445 (and $x589 $x537)))
 (let (($x94 (and $x445 $x637)))
 (let (($x154 (= $x94 true)))
 (let (($x266 (= $x154 true)))
 (let (($x37 (= $x266 true)))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x311 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x324))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv2 32))) ?x311)))
 (let ((?x692 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv3 32))) ?x245)))
 (let ((?x658 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x192 (_ bv1 32))))
 (=> $x339 (= ?x658 ?x692)))))))))))
 ))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (bvuge ?x84 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x192 (_ bv1 32))))
 (= $x339 $x778))))))
 ))
 (let (($x563 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x192 (_ bv0 32))))
 (=> $x126 $x264)))))
 ))
 (let (($x698 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x84 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x192 (_ bv0 32))))
 (= $x126 $x128))))))
 ))
 (let (($x411 (and $x698 $x563)))
 (let (($x513 (and $x411 $x369)))
 (let (($x740 (and $x513 $x546)))
 (let (($x160 (= $x740 true)))
 (let (($x755 (= $x160 true)))
 (let (($x508 (= $x755 true)))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x311 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x324))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv2 32))) ?x311)))
 (let ((?x692 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv3 32))) ?x245)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (=> $x695 (= ?x504 ?x692)))))))))))
 ))
 (let (($x263 (and $x445 $x232)))
 (let (($x182 (= $x263 true)))
 (let (($x500 (= $x182 true)))
 (let (($x288 (= $x500 true)))
 (let (($x761 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x651 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x651))))
 (let ((?x658 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x192 (_ bv1 32))))
 (=> $x339 (= ?x658 ?x337))))))))))
 ))
 (let (($x746 (and $x513 $x761)))
 (let (($x364 (= $x746 true)))
 (let (($x469 (= $x364 true)))
 (let (($x439 (= $x469 true)))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem ?x468))))
 (let ((?x767 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv2 32))) ?x639))))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (=> $x243 (= ?x829 ?x767))))))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (bvuge ?x84 (_ bv1 32))))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (= $x243 $x778))))))
 ))
 (let (($x480 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x638 (_ bv0 32))))
 (=> $x343 $x264)))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x84 (_ bv0 32))))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x638 (_ bv0 32))))
 (= $x343 $x128))))))
 ))
 (let (($x412 (and $x149 $x480)))
 (let (($x636 (and $x412 $x213)))
 (let (($x374 (and $x636 $x309)))
 (let (($x460 (= $x374 true)))
 (let (($x283 (= $x460 true)))
 (let (($x322 (= $x283 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x709 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x468))))
 (let ((?x604 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x709)))
 (let ((?x659 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x604)))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (=> $x243 (= ?x829 ?x659)))))))))))
 ))
 (let (($x664 (and $x636 $x275)))
 (let (($x40 (= $x664 true)))
 (let (($x405 (= $x40 true)))
 (let (($x257 (= $x405 true)))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x709 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x468))))
 (let ((?x604 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x709)))
 (let ((?x659 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x604)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (=> $x530 (= ?x832 ?x659)))))))))))
 ))
 (let (($x643 (and $x516 $x15)))
 (let (($x618 (= $x643 true)))
 (let (($x5 (= $x618 true)))
 (let (($x663 (= $x5 true)))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x481 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x468))))
 (let ((?x784 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x481)))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x784)))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (=> $x243 (= ?x829 ?x366)))))))))))
 ))
 (let (($x670 (and $x636 $x76)))
 (let (($x689 (= $x670 true)))
 (let (($x24 (= $x689 true)))
 (let (($x591 (= $x24 true)))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x481 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x468))))
 (let ((?x784 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x481)))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x784)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (=> $x530 (= ?x832 ?x366)))))))))))
 ))
 (let (($x23 (and $x516 $x443)))
 (let (($x765 (= $x23 true)))
 (let (($x450 (= $x765 true)))
 (let (($x153 (= $x450 true)))
 (let (($x742 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x693 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x324))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x324 (_ bv2 32))) ?x693)))
 (let ((?x782 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x324 (_ bv3 32))) ?x19)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (=> $x695 (= ?x504 ?x782)))))))))))
 ))
 (let (($x498 (and $x445 $x742)))
 (let (($x286 (= $x498 true)))
 (let (($x351 (= $x286 true)))
 (let (($x574 (= $x351 true)))
 (let (($x382 (and $x574 $x153)))
 (let (($x281 (and $x382 $x591)))
 (let (($x113 (and $x281 $x663)))
 (let (($x623 (and $x113 $x257)))
 (let (($x372 (and $x623 $x322)))
 (let (($x521 (and $x372 $x439)))
 (let (($x554 (and $x521 $x288)))
 (let (($x227 (and $x554 $x508)))
 (let (($x244 (and $x227 $x37)))
 (let (($x766 (and $x244 $x489)))
 (let (($x650 (and $x766 $x147)))
 (let (($x56 (and $x650 $x726)))
 (let (($x169 (and $x56 $x442)))
 (let (($x397 (and $x169 $x73)))
 (let (($x739 (and $x397 $x210)))
 (let (($x158 (and $x739 $x583)))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x658 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (=> $x695 (= ?x504 ?x658)))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x192 (_ bv1 32))))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (= $x695 $x339))))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x192 (_ bv0 32))))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x36 (_ bv0 32))))
 (= $x716 $x126))))))
 ))
 (let (($x302 (and $x669 $x148)))
 (let (($x606 (and $x302 $x21)))
 (let (($x732 (and $x606 $x429)))
 (let (($x240 (and $x732 $x158)))
 (let (($x837 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (=> $x530 (= ?x832 ?x829)))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (= $x530 $x243))))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x638 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (= ?x110 (_ bv0 32))))
 (= $x566 $x343))))))
 ))
 (let (($x543 (and $x402 $x792)))
 (let (($x828 (and $x543 $x580)))
 (let (($x838 (and $x828 $x837)))
 (let (($x615 (and $x838 $x240)))
 (let (($x890 (=> $x615 $x889)))
 (not $x890))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x885 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x886 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x885)))
 (let ((?x883 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L2%3%fcallEnd)))
 (let ((?x884 (bvadd input.spec-%var-fi-0.L2%3%fcallStart ?x883)))
 (let (($x887 (= ?x884 ?x886)))
 (let (($x888 (= $x887 true)))
 (let (($x889 (= $x888 true)))
 (let ((?x117 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x426 (bvneg ?x117)))
 (let (($x31 (= ?x426 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x701 (= $x31 true)))
 (let (($x583 (= $x701 true)))
 (let (($x157 (= ?x426 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x104 (= $x157 true)))
 (let (($x210 (= $x104 true)))
 (let (($x155 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x156 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x680 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x228 (and $x680 $x156)))
 (let (($x593 (and $x228 $x155)))
 (let (($x187 (= $x593 true)))
 (let (($x83 (= $x187 true)))
 (let (($x73 (= $x83 true)))
 (let (($x132 (= $x155 true)))
 (let (($x239 (= $x132 true)))
 (let (($x442 (= $x239 true)))
 (let ((?x791 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x164 (= (_ bv0 32) ?x791)))
 (let ((?x562 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x101 (= (_ bv0 32) ?x562)))
 (let ((?x270 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x270)))
 (let ((?x681 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x681)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x204 (and $x315 $x135)))
 (let (($x527 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x527 $x204)))
 (let (($x279 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x818 (and $x817 $x821)))
 (let (($x822 (not $x818)))
 (let (($x820 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x819 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x816 (and $x819 $x820)))
 (let (($x830 (and (not $x816) $x822)))
 (let (($x813 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x806 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x814 (and $x806 $x813)))
 (let (($x815 (not $x814)))
 (let (($x802 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x799 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x804 (and $x799 $x802)))
 (let (($x824 (and (not $x804) $x815)))
 (let (($x494 (and (and (and (and (and (and $x824 $x830) $x96) $x279) $x48) $x12) $x101)))
 (let (($x790 (and $x494 $x164)))
 (let (($x235 (= $x790 true)))
 (let (($x136 (= $x235 true)))
 (let (($x726 (= $x136 true)))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem ?x468))))
 (let ((?x767 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv2 32))) ?x639))))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (=> $x530 (= ?x832 ?x767))))))))))
 ))
 (let (($x729 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (bvuge ?x84 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (= $x530 $x778))))))
 ))
 (let (($x792 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (= ?x110 (_ bv0 32))))
 (=> $x566 $x264)))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x84 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (= ?x110 (_ bv0 32))))
 (= $x566 $x128))))))
 ))
 (let (($x573 (and $x694 $x792)))
 (let (($x516 (and $x573 $x729)))
 (let (($x497 (and $x516 $x9)))
 (let (($x150 (= $x497 true)))
 (let (($x683 (= $x150 true)))
 (let (($x147 (= $x683 true)))
 (let (($x78 (= $x228 true)))
 (let (($x777 (= $x78 true)))
 (let (($x489 (= $x777 true)))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x651 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x651))))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (=> $x695 (= ?x504 ?x337))))))))))
 ))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (bvuge ?x84 (_ bv1 32))))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (= $x695 $x778))))))
 ))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x36 (_ bv0 32))))
 (=> $x716 $x264)))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x84 (_ bv0 32))))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x36 (_ bv0 32))))
 (= $x716 $x128))))))
 ))
 (let (($x589 (and $x347 $x148)))
 (let (($x445 (and $x589 $x537)))
 (let (($x94 (and $x445 $x637)))
 (let (($x154 (= $x94 true)))
 (let (($x266 (= $x154 true)))
 (let (($x37 (= $x266 true)))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x311 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x324))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv2 32))) ?x311)))
 (let ((?x692 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv3 32))) ?x245)))
 (let ((?x658 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x192 (_ bv1 32))))
 (=> $x339 (= ?x658 ?x692)))))))))))
 ))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (bvuge ?x84 (_ bv1 32))))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x192 (_ bv1 32))))
 (= $x339 $x778))))))
 ))
 (let (($x563 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x192 (_ bv0 32))))
 (=> $x126 $x264)))))
 ))
 (let (($x698 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x84 (_ bv0 32))))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x192 (_ bv0 32))))
 (= $x126 $x128))))))
 ))
 (let (($x411 (and $x698 $x563)))
 (let (($x513 (and $x411 $x369)))
 (let (($x740 (and $x513 $x546)))
 (let (($x160 (= $x740 true)))
 (let (($x755 (= $x160 true)))
 (let (($x508 (= $x755 true)))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x311 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x324))))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv2 32))) ?x311)))
 (let ((?x692 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x324 (_ bv3 32))) ?x245)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (=> $x695 (= ?x504 ?x692)))))))))))
 ))
 (let (($x263 (and $x445 $x232)))
 (let (($x182 (= $x263 true)))
 (let (($x500 (= $x182 true)))
 (let (($x288 (= $x500 true)))
 (let (($x761 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x651 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x651))))
 (let ((?x658 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x192 (_ bv1 32))))
 (=> $x339 (= ?x658 ?x337))))))))))
 ))
 (let (($x746 (and $x513 $x761)))
 (let (($x364 (= $x746 true)))
 (let (($x469 (= $x364 true)))
 (let (($x439 (= $x469 true)))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem ?x468))))
 (let ((?x767 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv2 32))) ?x639))))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (=> $x243 (= ?x829 ?x767))))))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x778 (bvuge ?x84 (_ bv1 32))))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (= $x243 $x778))))))
 ))
 (let (($x480 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x638 (_ bv0 32))))
 (=> $x343 $x264)))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x84 (_ bv0 32))))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x638 (_ bv0 32))))
 (= $x343 $x128))))))
 ))
 (let (($x412 (and $x149 $x480)))
 (let (($x636 (and $x412 $x213)))
 (let (($x374 (and $x636 $x309)))
 (let (($x460 (= $x374 true)))
 (let (($x283 (= $x460 true)))
 (let (($x322 (= $x283 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x709 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x468))))
 (let ((?x604 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x709)))
 (let ((?x659 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x604)))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (=> $x243 (= ?x829 ?x659)))))))))))
 ))
 (let (($x664 (and $x636 $x275)))
 (let (($x40 (= $x664 true)))
 (let (($x405 (= $x40 true)))
 (let (($x257 (= $x405 true)))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x709 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x468))))
 (let ((?x604 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x709)))
 (let ((?x659 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x604)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (=> $x530 (= ?x832 ?x659)))))))))))
 ))
 (let (($x643 (and $x516 $x15)))
 (let (($x618 (= $x643 true)))
 (let (($x5 (= $x618 true)))
 (let (($x663 (= $x5 true)))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x481 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x468))))
 (let ((?x784 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x481)))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x784)))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (=> $x243 (= ?x829 ?x366)))))))))))
 ))
 (let (($x670 (and $x636 $x76)))
 (let (($x689 (= $x670 true)))
 (let (($x24 (= $x689 true)))
 (let (($x591 (= $x24 true)))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x276 input.dst.llvm-%m2)))
 (let ((?x481 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x468))))
 (let ((?x784 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x481)))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x784)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (=> $x530 (= ?x832 ?x366)))))))))))
 ))
 (let (($x23 (and $x516 $x443)))
 (let (($x765 (= $x23 true)))
 (let (($x450 (= $x765 true)))
 (let (($x153 (= $x450 true)))
 (let (($x742 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x324 (bvadd ?x276 input.dst.llvm-%m1)))
 (let ((?x693 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x324))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x324 (_ bv2 32))) ?x693)))
 (let ((?x782 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x324 (_ bv3 32))) ?x19)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (=> $x695 (= ?x504 ?x782)))))))))))
 ))
 (let (($x498 (and $x445 $x742)))
 (let (($x286 (= $x498 true)))
 (let (($x351 (= $x286 true)))
 (let (($x574 (= $x351 true)))
 (let (($x382 (and $x574 $x153)))
 (let (($x281 (and $x382 $x591)))
 (let (($x113 (and $x281 $x663)))
 (let (($x623 (and $x113 $x257)))
 (let (($x372 (and $x623 $x322)))
 (let (($x521 (and $x372 $x439)))
 (let (($x554 (and $x521 $x288)))
 (let (($x227 (and $x554 $x508)))
 (let (($x244 (and $x227 $x37)))
 (let (($x766 (and $x244 $x489)))
 (let (($x650 (and $x766 $x147)))
 (let (($x56 (and $x650 $x726)))
 (let (($x169 (and $x56 $x442)))
 (let (($x397 (and $x169 $x73)))
 (let (($x739 (and $x397 $x210)))
 (let (($x158 (and $x739 $x583)))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x658 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x504 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (=> $x695 (= ?x504 ?x658)))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x192 (_ bv1 32))))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (bvuge ?x36 (_ bv1 32))))
 (= $x695 $x339))))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x192 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x192 (_ bv0 32))))
 (let ((?x36 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x36 (_ bv0 32))))
 (= $x716 $x126))))))
 ))
 (let (($x302 (and $x669 $x148)))
 (let (($x606 (and $x302 $x21)))
 (let (($x732 (and $x606 $x429)))
 (let (($x240 (and $x732 $x158)))
 (let (($x837 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (=> $x530 (= ?x832 ?x829)))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x638 (_ bv1 32))))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x110 (_ bv1 32))))
 (= $x530 $x243))))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x638 (_ bv0 32))))
 (let ((?x110 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (= ?x110 (_ bv0 32))))
 (= $x566 $x343))))))
 ))
 (let (($x543 (and $x402 $x792)))
 (let (($x828 (and $x543 $x580)))
 (let (($x838 (and $x828 $x837)))
 (let (($x615 (and $x838 $x240)))
 (let (($x890 (=> $x615 $x889)))
 (not $x890))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 382 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x890 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x891 (= (_ bv0 32) ?x890)))
 (let ((?x888 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x889 (= (_ bv0 32) ?x888)))
 (let ((?x886 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x887 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x886)))
 (let ((?x615 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x615)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x240 $x883)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x158 $x884)))
 (let (($x750 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x521 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x776 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x761 (and $x594 $x776)))
 (let (($x746 (not $x761)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x651 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x337 (and $x651 $x175)))
 (let (($x469 (and (not $x337) $x746)))
 (let (($x513 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x369 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x545 (and $x369 $x513)))
 (let (($x349 (not $x545)))
 (let (($x563 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x698 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x411 (and $x698 $x563)))
 (let (($x116 (and (not $x411) $x349)))
 (let (($x735 (and (and (and (and (and (and $x116 $x469) $x521) $x750) $x885) $x887) $x889)))
 (let (($x386 (and $x735 $x891)))
 (let (($x416 (= $x386 true)))
 (let (($x260 (= $x416 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x267 (concat ?x217 (concat ?x218 (concat ?x461 ?x6)))))
 (let (($x90 (= ?x267 input.dst.llvm-%m1)))
 (let (($x396 (= $x90 true)))
 (let (($x106 (= $x396 true)))
 (let ((?x465 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x541 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x488 (concat ?x541 (concat ?x432 (concat ?x274 ?x465)))))
 (let (($x7 (= ?x488 input.dst.llvm-%m2)))
 (let (($x86 (= $x7 true)))
 (let (($x34 (= $x86 true)))
 (let (($x331 (= input.dst.llvm-%m2 ?x488)))
 (let (($x377 (= input.dst.llvm-%m1 ?x267)))
 (let (($x403 (and $x377 $x331)))
 (let (($x501 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x83 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x842 (bvadd ?x83 input.dst.llvm-%m2)))
 (let ((?x853 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv1 32))) (select input.dst.llvm-mem ?x842))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv2 32))) ?x853))))
 (let ((?x693 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x606 (_ bv1 32))))
 (=> $x393 (= ?x693 ?x197))))))))))
 ))
 (let (($x635 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x562 (bvuge ?x189 (_ bv1 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x606 (_ bv1 32))))
 (= $x393 $x562))))))
 ))
 (let (($x599 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x606 (_ bv0 32))))
 (=> $x504 $x114)))))
 ))
 (let (($x864 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x189 (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x606 (_ bv0 32))))
 (= $x504 $x279))))))
 ))
 (let (($x512 (and $x864 $x599)))
 (let (($x862 (and $x512 $x635)))
 (let (($x304 (and $x862 $x501)))
 (let (($x733 (and $x304 $x403)))
 (let (($x701 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x83 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x73 (bvadd ?x83 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x739 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x117))))
 (let ((?x623 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x255 (_ bv1 32))))
 (=> $x15 (= ?x623 ?x739))))))))))
 ))
 (let (($x494 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x562 (bvuge ?x189 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x255 (_ bv1 32))))
 (= $x15 $x562))))))
 ))
 (let (($x670 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x255 (_ bv0 32))))
 (=> $x213 $x114)))))
 ))
 (let (($x527 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x189 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x255 (_ bv0 32))))
 (= $x213 $x279))))))
 ))
 (let (($x315 (and $x527 $x670)))
 (let (($x791 (and $x315 $x494)))
 (let (($x583 (and $x791 $x701)))
 (let (($x309 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x767 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x374 (and $x767 $x309)))
 (let (($x50 (and (and (and (and (and (and $x374 $x116) $x469) $x521) $x750) $x583) $x885)))
 (let (($x564 (and (and (and (and $x50 $x887) $x889) $x891) $x733)))
 (let (($x60 (= $x564 true)))
 (let (($x392 (= $x60 true)))
 (let (($x590 (= $x392 true)))
 (let (($x460 (= $x374 true)))
 (let (($x283 (= $x460 true)))
 (let (($x322 (= $x283 true)))
 (let (($x360 (and $x322 $x590)))
 (let (($x715 (and $x360 $x34)))
 (let (($x699 (and $x715 $x106)))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x255 (_ bv1 32))))
 (=> $x15 (= ?x623 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x618 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x586 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x255 (_ bv1 32))))
 (= $x15 (bvuge ?x586 (_ bv1 32)))))))
 ))
 (let (($x653 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x586 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x255 (_ bv0 32))))
 (= $x213 (= ?x586 (_ bv0 32)))))))
 ))
 (let (($x689 (and $x653 $x670)))
 (let (($x5 (and $x689 $x618)))
 (let (($x188 (and $x5 $x120)))
 (let (($x529 (and $x188 $x699)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x693 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x606 (_ bv1 32))))
 (=> $x393 (= ?x693 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x771 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x339 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x606 (_ bv1 32))))
 (= $x393 (bvuge ?x339 (_ bv1 32)))))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x339 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x606 (_ bv0 32))))
 (= $x504 (= ?x339 (_ bv0 32)))))))
 ))
 (let (($x616 (and $x225 $x599)))
 (let (($x324 (and $x616 $x771)))
 (let (($x265 (and $x324 $x152)))
 (let (($x329 (and $x265 $x529)))
 (let (($x171 (=> $x329 $x260)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x890 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x891 (= (_ bv0 32) ?x890)))
 (let ((?x888 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x889 (= (_ bv0 32) ?x888)))
 (let ((?x886 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x887 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x886)))
 (let ((?x615 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x615)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x240 $x883)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x158 $x884)))
 (let (($x750 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x521 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x776 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x761 (and $x594 $x776)))
 (let (($x746 (not $x761)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x651 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x337 (and $x651 $x175)))
 (let (($x469 (and (not $x337) $x746)))
 (let (($x513 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x369 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x545 (and $x369 $x513)))
 (let (($x349 (not $x545)))
 (let (($x563 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x698 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x411 (and $x698 $x563)))
 (let (($x116 (and (not $x411) $x349)))
 (let (($x735 (and (and (and (and (and (and $x116 $x469) $x521) $x750) $x885) $x887) $x889)))
 (let (($x386 (and $x735 $x891)))
 (let (($x416 (= $x386 true)))
 (let (($x260 (= $x416 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x267 (concat ?x217 (concat ?x218 (concat ?x461 ?x6)))))
 (let (($x90 (= ?x267 input.dst.llvm-%m1)))
 (let (($x396 (= $x90 true)))
 (let (($x106 (= $x396 true)))
 (let ((?x465 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x541 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x488 (concat ?x541 (concat ?x432 (concat ?x274 ?x465)))))
 (let (($x7 (= ?x488 input.dst.llvm-%m2)))
 (let (($x86 (= $x7 true)))
 (let (($x34 (= $x86 true)))
 (let (($x331 (= input.dst.llvm-%m2 ?x488)))
 (let (($x377 (= input.dst.llvm-%m1 ?x267)))
 (let (($x403 (and $x377 $x331)))
 (let (($x501 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x83 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x842 (bvadd ?x83 input.dst.llvm-%m2)))
 (let ((?x853 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv1 32))) (select input.dst.llvm-mem ?x842))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv2 32))) ?x853))))
 (let ((?x693 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x606 (_ bv1 32))))
 (=> $x393 (= ?x693 ?x197))))))))))
 ))
 (let (($x635 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x562 (bvuge ?x189 (_ bv1 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x606 (_ bv1 32))))
 (= $x393 $x562))))))
 ))
 (let (($x599 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x606 (_ bv0 32))))
 (=> $x504 $x114)))))
 ))
 (let (($x864 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x189 (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x606 (_ bv0 32))))
 (= $x504 $x279))))))
 ))
 (let (($x512 (and $x864 $x599)))
 (let (($x862 (and $x512 $x635)))
 (let (($x304 (and $x862 $x501)))
 (let (($x733 (and $x304 $x403)))
 (let (($x701 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x83 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x73 (bvadd ?x83 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x739 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x117))))
 (let ((?x623 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x255 (_ bv1 32))))
 (=> $x15 (= ?x623 ?x739))))))))))
 ))
 (let (($x494 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x562 (bvuge ?x189 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x255 (_ bv1 32))))
 (= $x15 $x562))))))
 ))
 (let (($x670 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x114 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x255 (_ bv0 32))))
 (=> $x213 $x114)))))
 ))
 (let (($x527 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x189 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x255 (_ bv0 32))))
 (= $x213 $x279))))))
 ))
 (let (($x315 (and $x527 $x670)))
 (let (($x791 (and $x315 $x494)))
 (let (($x583 (and $x791 $x701)))
 (let (($x309 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x767 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x374 (and $x767 $x309)))
 (let (($x50 (and (and (and (and (and (and $x374 $x116) $x469) $x521) $x750) $x583) $x885)))
 (let (($x564 (and (and (and (and $x50 $x887) $x889) $x891) $x733)))
 (let (($x60 (= $x564 true)))
 (let (($x392 (= $x60 true)))
 (let (($x590 (= $x392 true)))
 (let (($x460 (= $x374 true)))
 (let (($x283 (= $x460 true)))
 (let (($x322 (= $x283 true)))
 (let (($x360 (and $x322 $x590)))
 (let (($x715 (and $x360 $x34)))
 (let (($x699 (and $x715 $x106)))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x623 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x255 (_ bv1 32))))
 (=> $x15 (= ?x623 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x618 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x586 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x255 (_ bv1 32))))
 (= $x15 (bvuge ?x586 (_ bv1 32)))))))
 ))
 (let (($x653 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x586 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x255 (_ bv0 32))))
 (= $x213 (= ?x586 (_ bv0 32)))))))
 ))
 (let (($x689 (and $x653 $x670)))
 (let (($x5 (and $x689 $x618)))
 (let (($x188 (and $x5 $x120)))
 (let (($x529 (and $x188 $x699)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x693 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x606 (_ bv1 32))))
 (=> $x393 (= ?x693 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x771 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x339 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x606 (_ bv1 32))))
 (= $x393 (bvuge ?x339 (_ bv1 32)))))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x339 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x606 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x504 (= ?x606 (_ bv0 32))))
 (= $x504 (= ?x339 (_ bv0 32)))))))
 ))
 (let (($x616 (and $x225 $x599)))
 (let (($x324 (and $x616 $x771)))
 (let (($x265 (and $x324 $x152)))
 (let (($x329 (and $x265 $x529)))
 (let (($x171 (=> $x329 $x260)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x347 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x589 (= (_ bv0 2) ?x347)))
 (let (($x778 (= $x589 true)))
 (let ((?x481 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x450 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x578 (concat ?x14 (concat ?x450 (concat ?x366 ?x481)))))
 (let (($x36 (= ?x578 input.dst.llvm-%m2)))
 (let (($x716 (= $x36 true)))
 (let (($x207 (= $x716 true)))
 (let (($x579 (= input.dst.llvm-%m2 ?x578)))
 (let ((?x304 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x377 (concat ?x267 (concat ?x461 (concat ?x217 ?x304)))))
 (let (($x712 (= input.dst.llvm-%m1 ?x377)))
 (let (($x333 (and $x712 $x579)))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x381 (bvadd ?x823 input.dst.llvm-%m2)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv1 32))) (select input.dst.llvm-mem ?x381))))
 (let ((?x467 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv2 32))) ?x134))))
 (let ((?x337 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x5 (_ bv1 32))))
 (=> $x483 (= ?x337 ?x467))))))))))
 ))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x574 (bvuge ?x244 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x5 (_ bv1 32))))
 (= $x483 $x574))))))
 ))
 (let (($x714 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x614 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x5 (_ bv0 32))))
 (=> $x623 $x614)))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x244 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x5 (_ bv0 32))))
 (= $x623 $x414))))))
 ))
 (let (($x246 (and $x223 $x714)))
 (let (($x757 (and $x246 $x22)))
 (let (($x464 (and $x757 $x619)))
 (let (($x709 (and $x464 $x333)))
 (let ((?x249 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x681 (= (_ bv0 32) ?x249)))
 (let ((?x591 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x281 (= (_ bv0 32) ?x591)))
 (let ((?x430 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x430)))
 (let ((?x818 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x822 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x818)))
 (let (($x817 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x830 (and $x817 $x822)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x440 (and $x821 $x830)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x799 (bvadd ?x823 input.dst.llvm-%m1)))
 (let ((?x805 (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv1 32))) (select input.dst.llvm-mem ?x799))))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv2 32))) ?x805))))
 (let ((?x852 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x739 (_ bv1 32))))
 (=> $x891 (= ?x852 ?x816))))))))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x574 (bvuge ?x244 (_ bv1 32))))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x739 (_ bv1 32))))
 (= $x891 $x574))))))
 ))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x614 (= false false)))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x739 (_ bv0 32))))
 (=> $x452 $x614)))))
 ))
 (let (($x766 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x244 (_ bv0 32))))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x739 (_ bv0 32))))
 (= $x452 $x414))))))
 ))
 (let (($x228 (and $x766 $x158)))
 (let (($x860 (and $x228 $x694)))
 (let (($x765 (and $x860 $x23)))
 (let (($x254 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x735 (and $x622 $x168)))
 (let (($x386 (not $x735)))
 (let (($x519 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x571 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x571 $x519)))
 (let (($x260 (and (not $x103) $x386)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x90 $x396)))
 (let (($x699 (not $x106)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x360 $x86)))
 (let (($x329 (and (not $x34) $x699)))
 (let (($x488 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x465 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x331 (and $x465 $x488)))
 (let (($x40 (and (and (and (and (and (and $x331 $x329) $x260) $x28) $x254) $x765) $x440)))
 (let (($x829 (and (and (and (and $x40 $x24) $x281) $x681) $x709)))
 (let (($x834 (= $x829 true)))
 (let (($x837 (= $x834 true)))
 (let (($x838 (= $x837 true)))
 (let (($x403 (= $x331 true)))
 (let (($x733 (= $x403 true)))
 (let (($x564 (= $x733 true)))
 (let (($x541 (= ?x377 input.dst.llvm-%m1)))
 (let (($x285 (= $x541 true)))
 (let (($x432 (= $x285 true)))
 (let (($x60 (and $x432 $x564)))
 (let (($x561 (and $x60 $x838)))
 (let (($x669 (and $x561 $x207)))
 (let (($x853 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x852 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x739 (_ bv1 32))))
 (=> $x891 (= ?x852 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x503 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x397 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x739 (_ bv1 32))))
 (= $x891 (bvuge ?x397 (_ bv1 32)))))))
 ))
 (let (($x701 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x397 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x739 (_ bv0 32))))
 (= $x452 (= ?x397 (_ bv0 32)))))))
 ))
 (let (($x240 (and $x701 $x158)))
 (let (($x864 (and $x240 $x503)))
 (let (($x854 (and $x864 $x853)))
 (let (($x495 (and $x854 $x669)))
 (let (($x776 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x5 (_ bv1 32))))
 (=> $x483 (= ?x337 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x340 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x5 (_ bv1 32))))
 (= $x483 (bvuge ?x340 (_ bv1 32)))))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x340 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x5 (_ bv0 32))))
 (= $x623 (= ?x340 (_ bv0 32)))))))
 ))
 (let (($x639 (and $x318 $x714)))
 (let (($x269 (and $x639 $x411)))
 (let (($x761 (and $x269 $x776)))
 (let (($x148 (and $x761 $x495)))
 (let (($x537 (=> $x148 $x778)))
 (not $x537))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x347 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x589 (= (_ bv0 2) ?x347)))
 (let (($x778 (= $x589 true)))
 (let ((?x481 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x450 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x578 (concat ?x14 (concat ?x450 (concat ?x366 ?x481)))))
 (let (($x36 (= ?x578 input.dst.llvm-%m2)))
 (let (($x716 (= $x36 true)))
 (let (($x207 (= $x716 true)))
 (let (($x579 (= input.dst.llvm-%m2 ?x578)))
 (let ((?x304 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x377 (concat ?x267 (concat ?x461 (concat ?x217 ?x304)))))
 (let (($x712 (= input.dst.llvm-%m1 ?x377)))
 (let (($x333 (and $x712 $x579)))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x381 (bvadd ?x823 input.dst.llvm-%m2)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv1 32))) (select input.dst.llvm-mem ?x381))))
 (let ((?x467 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv2 32))) ?x134))))
 (let ((?x337 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x5 (_ bv1 32))))
 (=> $x483 (= ?x337 ?x467))))))))))
 ))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x574 (bvuge ?x244 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x5 (_ bv1 32))))
 (= $x483 $x574))))))
 ))
 (let (($x714 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x614 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x5 (_ bv0 32))))
 (=> $x623 $x614)))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x244 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x5 (_ bv0 32))))
 (= $x623 $x414))))))
 ))
 (let (($x246 (and $x223 $x714)))
 (let (($x757 (and $x246 $x22)))
 (let (($x464 (and $x757 $x619)))
 (let (($x709 (and $x464 $x333)))
 (let ((?x249 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x681 (= (_ bv0 32) ?x249)))
 (let ((?x591 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x281 (= (_ bv0 32) ?x591)))
 (let ((?x430 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x430)))
 (let ((?x818 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x822 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x818)))
 (let (($x817 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x830 (and $x817 $x822)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x440 (and $x821 $x830)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x799 (bvadd ?x823 input.dst.llvm-%m1)))
 (let ((?x805 (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv1 32))) (select input.dst.llvm-mem ?x799))))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv2 32))) ?x805))))
 (let ((?x852 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x739 (_ bv1 32))))
 (=> $x891 (= ?x852 ?x816))))))))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x574 (bvuge ?x244 (_ bv1 32))))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x739 (_ bv1 32))))
 (= $x891 $x574))))))
 ))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x614 (= false false)))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x739 (_ bv0 32))))
 (=> $x452 $x614)))))
 ))
 (let (($x766 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x244 (_ bv0 32))))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x739 (_ bv0 32))))
 (= $x452 $x414))))))
 ))
 (let (($x228 (and $x766 $x158)))
 (let (($x860 (and $x228 $x694)))
 (let (($x765 (and $x860 $x23)))
 (let (($x254 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x735 (and $x622 $x168)))
 (let (($x386 (not $x735)))
 (let (($x519 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x571 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x571 $x519)))
 (let (($x260 (and (not $x103) $x386)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x90 $x396)))
 (let (($x699 (not $x106)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x360 $x86)))
 (let (($x329 (and (not $x34) $x699)))
 (let (($x488 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x465 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x331 (and $x465 $x488)))
 (let (($x40 (and (and (and (and (and (and $x331 $x329) $x260) $x28) $x254) $x765) $x440)))
 (let (($x829 (and (and (and (and $x40 $x24) $x281) $x681) $x709)))
 (let (($x834 (= $x829 true)))
 (let (($x837 (= $x834 true)))
 (let (($x838 (= $x837 true)))
 (let (($x403 (= $x331 true)))
 (let (($x733 (= $x403 true)))
 (let (($x564 (= $x733 true)))
 (let (($x541 (= ?x377 input.dst.llvm-%m1)))
 (let (($x285 (= $x541 true)))
 (let (($x432 (= $x285 true)))
 (let (($x60 (and $x432 $x564)))
 (let (($x561 (and $x60 $x838)))
 (let (($x669 (and $x561 $x207)))
 (let (($x853 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x852 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x739 (_ bv1 32))))
 (=> $x891 (= ?x852 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x503 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x397 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x739 (_ bv1 32))))
 (= $x891 (bvuge ?x397 (_ bv1 32)))))))
 ))
 (let (($x701 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x397 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x739 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x452 (= ?x739 (_ bv0 32))))
 (= $x452 (= ?x397 (_ bv0 32)))))))
 ))
 (let (($x240 (and $x701 $x158)))
 (let (($x864 (and $x240 $x503)))
 (let (($x854 (and $x864 $x853)))
 (let (($x495 (and $x854 $x669)))
 (let (($x776 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x337 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x5 (_ bv1 32))))
 (=> $x483 (= ?x337 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x340 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x483 (bvuge ?x5 (_ bv1 32))))
 (= $x483 (bvuge ?x340 (_ bv1 32)))))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x340 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x5 (_ bv0 32))))
 (= $x623 (= ?x340 (_ bv0 32)))))))
 ))
 (let (($x639 (and $x318 $x714)))
 (let (($x269 (and $x639 $x411)))
 (let (($x761 (and $x269 $x776)))
 (let (($x148 (and $x761 $x495)))
 (let (($x537 (=> $x148 $x778)))
 (not $x537))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 188 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x513 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x545 (= (_ bv0 2) ?x513)))
 (let (($x116 (= $x545 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x426 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x492 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x889 (concat ?x492 (concat ?x50 (concat ?x426 ?x73)))))
 (let (($x670 (= ?x889 input.dst.llvm-%m1)))
 (let (($x309 (= $x670 true)))
 (let (($x374 (= $x309 true)))
 (let ((?x381 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x447 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x399 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x467 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x300 (concat ?x467 (concat ?x399 (concat ?x447 ?x381)))))
 (let (($x635 (= input.dst.llvm-%m2 ?x300)))
 (let (($x427 (= input.dst.llvm-%m1 ?x889)))
 (let (($x862 (and $x427 $x635)))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x70 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x585 (bvadd ?x70 input.dst.llvm-%m2)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv1 32))) (select input.dst.llvm-mem ?x585))))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv2 32))) ?x13))))
 (let ((?x564 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x864 (_ bv1 32))))
 (=> $x162 (= ?x564 ?x562))))))))))
 ))
 (let (($x509 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x851 (_ bv1 32))))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x864 (_ bv1 32))))
 (= $x162 $x311))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x843 (= false false)))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x852 (= ?x864 (_ bv0 32))))
 (=> $x852 $x843)))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x851 (_ bv0 32))))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x852 (= ?x864 (_ bv0 32))))
 (= $x852 $x672))))))
 ))
 (let (($x586 (and $x149 $x197)))
 (let (($x433 (and $x586 $x509)))
 (let (($x263 (and $x433 $x582)))
 (let (($x706 (and $x263 $x862)))
 (let ((?x156 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x777 (= (_ bv0 32) ?x156)))
 (let ((?x680 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x312 (= (_ bv0 32) ?x680)))
 (let ((?x78 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x395 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x615 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x615)))
 (let (($x583 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x583 $x883)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x154 $x884)))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x70 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x500 (bvadd ?x70 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv1 32))) (select input.dst.llvm-mem ?x500))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv2 32))) ?x160))))
 (let ((?x249 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x694 (_ bv1 32))))
 (=> $x821 (= ?x249 ?x122))))))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x851 (_ bv1 32))))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x694 (_ bv1 32))))
 (= $x821 $x311))))))
 ))
 (let (($x820 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x843 (= false false)))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x860 (= ?x694 (_ bv0 32))))
 (=> $x860 $x843)))))
 ))
 (let (($x855 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x851 (_ bv0 32))))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x860 (= ?x694 (_ bv0 32))))
 (= $x860 $x672))))))
 ))
 (let (($x93 (and $x855 $x820)))
 (let (($x85 (and $x93 $x448)))
 (let (($x637 (and $x85 $x53)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x610 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x537 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x778 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x445 (and $x778 $x537)))
 (let (($x302 (not $x445)))
 (let (($x347 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x678 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x589 (and $x678 $x347)))
 (let (($x469 (and (not $x589) $x302)))
 (let (($x716 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x36 $x716)))
 (let (($x669 (not $x207)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x829 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x838 (and $x829 $x837)))
 (let (($x148 (and (not $x838) $x669)))
 (let (($x366 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x450 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x481 (and $x450 $x366)))
 (let (($x19 (and (and (and (and (and (and $x481 $x148) $x469) $x610) $x21) $x637) $x885)))
 (let (($x255 (and (and (and (and $x19 $x395) $x312) $x777) $x706)))
 (let (($x213 (= $x255 true)))
 (let (($x636 (= $x213 true)))
 (let (($x653 (= $x636 true)))
 (let (($x479 (= $x481 true)))
 (let (($x153 (= $x479 true)))
 (let (($x578 (= $x153 true)))
 (let (($x619 (= ?x300 input.dst.llvm-%m2)))
 (let (($x464 (= $x619 true)))
 (let (($x712 (= $x464 true)))
 (let (($x579 (and $x712 $x578)))
 (let (($x76 (and $x579 $x653)))
 (let (($x460 (and $x76 $x374)))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x694 (_ bv1 32))))
 (=> $x821 (= ?x249 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x818 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x694 (_ bv1 32))))
 (= $x821 (bvuge ?x228 (_ bv1 32)))))))
 ))
 (let (($x823 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x860 (= ?x694 (_ bv0 32))))
 (= $x860 (= ?x228 (_ bv0 32)))))))
 ))
 (let (($x814 (and $x823 $x820)))
 (let (($x822 (and $x814 $x818)))
 (let (($x223 (and $x822 $x250)))
 (let (($x283 (and $x223 $x460)))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x864 (_ bv1 32))))
 (=> $x162 (= ?x564 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x864 (_ bv1 32))))
 (= $x162 (bvuge ?x890 (_ bv1 32)))))))
 ))
 (let (($x845 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x852 (= ?x864 (_ bv0 32))))
 (= $x852 (= ?x890 (_ bv0 32)))))))
 ))
 (let (($x501 (and $x845 $x197)))
 (let (($x432 (and $x501 $x285)))
 (let (($x360 (and $x432 $x590)))
 (let (($x372 (and $x360 $x283)))
 (let (($x362 (=> $x372 $x116)))
 (not $x362))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x513 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x545 (= (_ bv0 2) ?x513)))
 (let (($x116 (= $x545 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x426 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x492 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x889 (concat ?x492 (concat ?x50 (concat ?x426 ?x73)))))
 (let (($x670 (= ?x889 input.dst.llvm-%m1)))
 (let (($x309 (= $x670 true)))
 (let (($x374 (= $x309 true)))
 (let ((?x381 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x447 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x399 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x467 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x300 (concat ?x467 (concat ?x399 (concat ?x447 ?x381)))))
 (let (($x635 (= input.dst.llvm-%m2 ?x300)))
 (let (($x427 (= input.dst.llvm-%m1 ?x889)))
 (let (($x862 (and $x427 $x635)))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x70 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x585 (bvadd ?x70 input.dst.llvm-%m2)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv1 32))) (select input.dst.llvm-mem ?x585))))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv2 32))) ?x13))))
 (let ((?x564 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x864 (_ bv1 32))))
 (=> $x162 (= ?x564 ?x562))))))))))
 ))
 (let (($x509 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x851 (_ bv1 32))))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x864 (_ bv1 32))))
 (= $x162 $x311))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x843 (= false false)))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x852 (= ?x864 (_ bv0 32))))
 (=> $x852 $x843)))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x851 (_ bv0 32))))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x852 (= ?x864 (_ bv0 32))))
 (= $x852 $x672))))))
 ))
 (let (($x586 (and $x149 $x197)))
 (let (($x433 (and $x586 $x509)))
 (let (($x263 (and $x433 $x582)))
 (let (($x706 (and $x263 $x862)))
 (let ((?x156 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x777 (= (_ bv0 32) ?x156)))
 (let ((?x680 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x312 (= (_ bv0 32) ?x680)))
 (let ((?x78 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x395 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x615 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x615)))
 (let (($x583 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x583 $x883)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x154 $x884)))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x70 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x500 (bvadd ?x70 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv1 32))) (select input.dst.llvm-mem ?x500))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x500 (_ bv2 32))) ?x160))))
 (let ((?x249 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x694 (_ bv1 32))))
 (=> $x821 (= ?x249 ?x122))))))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x851 (_ bv1 32))))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x694 (_ bv1 32))))
 (= $x821 $x311))))))
 ))
 (let (($x820 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x843 (= false false)))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x860 (= ?x694 (_ bv0 32))))
 (=> $x860 $x843)))))
 ))
 (let (($x855 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x672 (= ?x851 (_ bv0 32))))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x860 (= ?x694 (_ bv0 32))))
 (= $x860 $x672))))))
 ))
 (let (($x93 (and $x855 $x820)))
 (let (($x85 (and $x93 $x448)))
 (let (($x637 (and $x85 $x53)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x610 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x537 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x778 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x445 (and $x778 $x537)))
 (let (($x302 (not $x445)))
 (let (($x347 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x678 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x589 (and $x678 $x347)))
 (let (($x469 (and (not $x589) $x302)))
 (let (($x716 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x36 $x716)))
 (let (($x669 (not $x207)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x829 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x838 (and $x829 $x837)))
 (let (($x148 (and (not $x838) $x669)))
 (let (($x366 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x450 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x481 (and $x450 $x366)))
 (let (($x19 (and (and (and (and (and (and $x481 $x148) $x469) $x610) $x21) $x637) $x885)))
 (let (($x255 (and (and (and (and $x19 $x395) $x312) $x777) $x706)))
 (let (($x213 (= $x255 true)))
 (let (($x636 (= $x213 true)))
 (let (($x653 (= $x636 true)))
 (let (($x479 (= $x481 true)))
 (let (($x153 (= $x479 true)))
 (let (($x578 (= $x153 true)))
 (let (($x619 (= ?x300 input.dst.llvm-%m2)))
 (let (($x464 (= $x619 true)))
 (let (($x712 (= $x464 true)))
 (let (($x579 (and $x712 $x578)))
 (let (($x76 (and $x579 $x653)))
 (let (($x460 (and $x76 $x374)))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x694 (_ bv1 32))))
 (=> $x821 (= ?x249 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x818 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x694 (_ bv1 32))))
 (= $x821 (bvuge ?x228 (_ bv1 32)))))))
 ))
 (let (($x823 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x694 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x860 (= ?x694 (_ bv0 32))))
 (= $x860 (= ?x228 (_ bv0 32)))))))
 ))
 (let (($x814 (and $x823 $x820)))
 (let (($x822 (and $x814 $x818)))
 (let (($x223 (and $x822 $x250)))
 (let (($x283 (and $x223 $x460)))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x864 (_ bv1 32))))
 (=> $x162 (= ?x564 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x864 (_ bv1 32))))
 (= $x162 (bvuge ?x890 (_ bv1 32)))))))
 ))
 (let (($x845 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x864 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x852 (= ?x864 (_ bv0 32))))
 (= $x852 (= ?x890 (_ bv0 32)))))))
 ))
 (let (($x501 (and $x845 $x197)))
 (let (($x432 (and $x501 $x285)))
 (let (($x360 (and $x432 $x590)))
 (let (($x372 (and $x360 $x283)))
 (let (($x362 (=> $x372 $x116)))
 (not $x362))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 188 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x629 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x487 (bvadd ?x629 input.dst.llvm-%m1)))
 (let ((?x828 (concat (select input.dst.llvm-mem (bvadd ?x487 (_ bv1 32))) (select input.dst.llvm-mem ?x487))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x487 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x487 (_ bv2 32))) ?x828))))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x448 (_ bv1 32))))
 (=> $x154 (= ?x156 ?x182))))))))))
 ))
 (let (($x519 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x790 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x790 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x448 (_ bv1 32))))
 (= $x154 $x659))))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x832 (= false false)))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x448 (_ bv0 32))))
 (=> $x85 $x832)))))
 ))
 (let (($x617 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x790 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x790 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x448 (_ bv0 32))))
 (= $x85 $x135))))))
 ))
 (let (($x284 (and $x617 $x210)))
 (let (($x275 (and $x284 $x519)))
 (let (($x232 (and $x275 $x124)))
 (let (($x6 (= $x232 true)))
 (let (($x465 (= $x6 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x805 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x825 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x825 (concat ?x805 (concat ?x244 ?x99)))))
 (let (($x158 (= ?x23 input.dst.llvm-%m1)))
 (let (($x357 (= $x158 true)))
 (let (($x461 (= $x357 true)))
 (let ((?x585 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x861 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x562 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x562 (concat ?x861 (concat ?x315 ?x585)))))
 (let (($x40 (= input.dst.llvm-%m2 ?x101)))
 (let (($x765 (= input.dst.llvm-%m1 ?x23)))
 (let (($x430 (and $x765 $x40)))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x629 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x595 (bvadd ?x629 input.dst.llvm-%m2)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv1 32))) (select input.dst.llvm-mem ?x595))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv2 32))) ?x129))))
 (let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x822 (_ bv1 32))))
 (=> $x844 (= ?x578 ?x386))))))))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x790 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x790 (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x822 (_ bv1 32))))
 (= $x844 $x659))))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x832 (= false false)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x822 (_ bv0 32))))
 (=> $x249 $x832)))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x790 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x790 (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x822 (_ bv0 32))))
 (= $x249 $x135))))))
 ))
 (let (($x397 (and $x631 $x246)))
 (let (($x342 (and $x397 $x120)))
 (let (($x673 (and $x342 $x28)))
 (let (($x405 (and $x673 $x430)))
 (let ((?x748 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x538 (= (_ bv0 32) ?x748)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x521 (= (_ bv0 32) ?x130)))
 (let ((?x840 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x750 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x840)))
 (let ((?x815 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x555 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x815)))
 (let (($x799 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x802 (and $x799 $x555)))
 (let (($x839 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x803 (and $x839 $x802)))
 (let (($x618 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x651 (and $x116 $x362)))
 (let (($x689 (not $x651)))
 (let (($x513 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x485 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x545 (and $x485 $x513)))
 (let (($x86 (and (not $x545) $x689)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x670 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x374 (and $x670 $x309)))
 (let (($x460 (not $x374)))
 (let (($x636 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x653 (and $x255 $x636)))
 (let (($x372 (and (not $x653) $x460)))
 (let (($x73 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x546 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x373 (and $x546 $x73)))
 (let (($x364 (and (and (and (and (and (and $x373 $x372) $x86) $x34) $x618) $x232) $x803)))
 (let (($x739 (and (and (and (and $x364 $x750) $x521) $x538) $x405)))
 (let (($x452 (= $x739 true)))
 (let (($x31 (= $x452 true)))
 (let (($x701 (= $x31 true)))
 (let (($x886 (= $x373 true)))
 (let (($x889 (= $x886 true)))
 (let (($x427 (= $x889 true)))
 (let (($x582 (= ?x101 input.dst.llvm-%m2)))
 (let (($x263 (= $x582 true)))
 (let (($x887 (= $x263 true)))
 (let (($x635 (and $x887 $x427)))
 (let (($x363 (and $x635 $x701)))
 (let (($x696 (and $x363 $x461)))
 (let (($x708 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x448 (_ bv1 32))))
 (=> $x154 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x615 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x448 (_ bv1 32))))
 (= $x154 (bvuge ?x93 (_ bv1 32)))))))
 ))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x448 (_ bv0 32))))
 (= $x85 (= ?x93 (_ bv0 32)))))))
 ))
 (let (($x554 (and $x70 $x210)))
 (let (($x883 (and $x554 $x615)))
 (let (($x149 (and $x883 $x708)))
 (let (($x217 (and $x149 $x696)))
 (let (($x709 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x822 (_ bv1 32))))
 (=> $x844 (= ?x578 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x822 (_ bv1 32))))
 (= $x844 (bvuge ?x664 (_ bv1 32)))))))
 ))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x822 (_ bv0 32))))
 (= $x249 (= ?x664 (_ bv0 32)))))))
 ))
 (let (($x757 (and $x681 $x246)))
 (let (($x712 (and $x757 $x464)))
 (let (($x829 (and $x712 $x709)))
 (let (($x536 (and $x829 $x217)))
 (let (($x753 (=> $x536 $x465)))
 (not $x753)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x629 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x487 (bvadd ?x629 input.dst.llvm-%m1)))
 (let ((?x828 (concat (select input.dst.llvm-mem (bvadd ?x487 (_ bv1 32))) (select input.dst.llvm-mem ?x487))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x487 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x487 (_ bv2 32))) ?x828))))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x448 (_ bv1 32))))
 (=> $x154 (= ?x156 ?x182))))))))))
 ))
 (let (($x519 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x790 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x790 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x448 (_ bv1 32))))
 (= $x154 $x659))))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x832 (= false false)))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x448 (_ bv0 32))))
 (=> $x85 $x832)))))
 ))
 (let (($x617 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x790 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x790 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x448 (_ bv0 32))))
 (= $x85 $x135))))))
 ))
 (let (($x284 (and $x617 $x210)))
 (let (($x275 (and $x284 $x519)))
 (let (($x232 (and $x275 $x124)))
 (let (($x6 (= $x232 true)))
 (let (($x465 (= $x6 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x805 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x825 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x825 (concat ?x805 (concat ?x244 ?x99)))))
 (let (($x158 (= ?x23 input.dst.llvm-%m1)))
 (let (($x357 (= $x158 true)))
 (let (($x461 (= $x357 true)))
 (let ((?x585 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x861 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x562 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x562 (concat ?x861 (concat ?x315 ?x585)))))
 (let (($x40 (= input.dst.llvm-%m2 ?x101)))
 (let (($x765 (= input.dst.llvm-%m1 ?x23)))
 (let (($x430 (and $x765 $x40)))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x629 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x595 (bvadd ?x629 input.dst.llvm-%m2)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv1 32))) (select input.dst.llvm-mem ?x595))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv2 32))) ?x129))))
 (let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x822 (_ bv1 32))))
 (=> $x844 (= ?x578 ?x386))))))))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x790 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x659 (bvuge ?x790 (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x822 (_ bv1 32))))
 (= $x844 $x659))))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x832 (= false false)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x822 (_ bv0 32))))
 (=> $x249 $x832)))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x790 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x790 (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x822 (_ bv0 32))))
 (= $x249 $x135))))))
 ))
 (let (($x397 (and $x631 $x246)))
 (let (($x342 (and $x397 $x120)))
 (let (($x673 (and $x342 $x28)))
 (let (($x405 (and $x673 $x430)))
 (let ((?x748 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x538 (= (_ bv0 32) ?x748)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x521 (= (_ bv0 32) ?x130)))
 (let ((?x840 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x750 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x840)))
 (let ((?x815 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x555 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x815)))
 (let (($x799 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x802 (and $x799 $x555)))
 (let (($x839 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x803 (and $x839 $x802)))
 (let (($x618 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x651 (and $x116 $x362)))
 (let (($x689 (not $x651)))
 (let (($x513 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x485 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x545 (and $x485 $x513)))
 (let (($x86 (and (not $x545) $x689)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x670 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x374 (and $x670 $x309)))
 (let (($x460 (not $x374)))
 (let (($x636 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x653 (and $x255 $x636)))
 (let (($x372 (and (not $x653) $x460)))
 (let (($x73 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x546 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x373 (and $x546 $x73)))
 (let (($x364 (and (and (and (and (and (and $x373 $x372) $x86) $x34) $x618) $x232) $x803)))
 (let (($x739 (and (and (and (and $x364 $x750) $x521) $x538) $x405)))
 (let (($x452 (= $x739 true)))
 (let (($x31 (= $x452 true)))
 (let (($x701 (= $x31 true)))
 (let (($x886 (= $x373 true)))
 (let (($x889 (= $x886 true)))
 (let (($x427 (= $x889 true)))
 (let (($x582 (= ?x101 input.dst.llvm-%m2)))
 (let (($x263 (= $x582 true)))
 (let (($x887 (= $x263 true)))
 (let (($x635 (and $x887 $x427)))
 (let (($x363 (and $x635 $x701)))
 (let (($x696 (and $x363 $x461)))
 (let (($x708 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x448 (_ bv1 32))))
 (=> $x154 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x615 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x448 (_ bv1 32))))
 (= $x154 (bvuge ?x93 (_ bv1 32)))))))
 ))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x93 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x448 (_ bv0 32))))
 (= $x85 (= ?x93 (_ bv0 32)))))))
 ))
 (let (($x554 (and $x70 $x210)))
 (let (($x883 (and $x554 $x615)))
 (let (($x149 (and $x883 $x708)))
 (let (($x217 (and $x149 $x696)))
 (let (($x709 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x822 (_ bv1 32))))
 (=> $x844 (= ?x578 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x844 (bvuge ?x822 (_ bv1 32))))
 (= $x844 (bvuge ?x664 (_ bv1 32)))))))
 ))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (= ?x822 (_ bv0 32))))
 (= $x249 (= ?x664 (_ bv0 32)))))))
 ))
 (let (($x757 (and $x681 $x246)))
 (let (($x712 (and $x757 $x464)))
 (let (($x829 (and $x712 $x709)))
 (let (($x536 (and $x829 $x217)))
 (let (($x753 (=> $x536 $x465)))
 (not $x753)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x274 (bvadd ?x742 input.dst.llvm-%m2)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem ?x274))))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv2 32))) ?x128))))
 (let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x791 (bvuge ?x883 (_ bv1 32))))
 (=> $x791 (= ?x427 ?x610))))))))))
 ))
 (let (($x592 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x859 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x859 (_ bv1 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x791 (bvuge ?x883 (_ bv1 32))))
 (= $x791 $x347))))))
 ))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x412 (= false false)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x883 (_ bv0 32))))
 (=> $x156 $x412)))))
 ))
 (let (($x574 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x859 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x859 (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x883 (_ bv0 32))))
 (= $x156 $x512))))))
 ))
 (let (($x143 (and $x574 $x586)))
 (let (($x29 (and $x143 $x592)))
 (let (($x693 (and $x29 $x21)))
 (let (($x450 (= $x693 true)))
 (let (($x366 (= $x450 true)))
 (let ((?x672 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x19 (concat ?x288 (concat ?x160 ?x672)))))
 (let (($x399 (= ?x78 input.dst.llvm-%m2)))
 (let (($x201 (= $x399 true)))
 (let (($x447 (= $x201 true)))
 (let (($x152 (= input.dst.llvm-%m2 ?x78)))
 (let ((?x595 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x735 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x386 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x260 (concat ?x386 (concat ?x174 (concat ?x735 ?x595)))))
 (let (($x841 (= input.dst.llvm-%m1 ?x260)))
 (let (($x680 (and $x841 $x152)))
 (let (($x312 (and $x693 $x680)))
 (let ((?x755 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x699 (= (_ bv0 32) ?x755)))
 (let ((?x90 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x396 (= (_ bv0 32) ?x90)))
 (let ((?x597 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x715 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x597)))
 (let ((?x470 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x470)))
 (let (($x740 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x239 (and $x740 $x227)))
 (let (($x576 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x576 $x239)))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x498 (bvadd ?x742 input.dst.llvm-%m1)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv1 32))) (select input.dst.llvm-mem ?x498))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv2 32))) ?x241))))
 (let ((?x748 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x519 (_ bv1 32))))
 (=> $x839 (= ?x748 ?x113))))))))))
 ))
 (let (($x683 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x859 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x859 (_ bv1 32))))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x519 (_ bv1 32))))
 (= $x839 $x347))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x412 (= false false)))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x519 (_ bv0 32))))
 (=> $x275 $x412)))))
 ))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x859 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x859 (_ bv0 32))))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x519 (_ bv0 32))))
 (= $x275 $x512))))))
 ))
 (let (($x497 (and $x184 $x94)))
 (let (($x114 (and $x497 $x683)))
 (let (($x500 (and $x114 $x48)))
 (let (($x340 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x643 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x488 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x834 (and $x488 $x240)))
 (let (($x837 (not $x834)))
 (let (($x465 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x753 (and $x6 $x465)))
 (let (($x495 (and (not $x753) $x837)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x461 (and $x158 $x357)))
 (let (($x696 (not $x461)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x739 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x701 (and $x739 $x31)))
 (let (($x536 (and (not $x701) $x696)))
 (let (($x99 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x805 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x414 (and $x805 $x99)))
 (let (($x360 (and (and (and (and (and (and $x414 $x536) $x495) $x643) $x340) $x500) $x106)))
 (let (($x745 (and (and (and (and $x360 $x715) $x396) $x699) $x312)))
 (let (($x823 (= $x745 true)))
 (let (($x824 (= $x823 true)))
 (let (($x820 (= $x824 true)))
 (let (($x819 (= $x414 true)))
 (let (($x23 (= $x819 true)))
 (let (($x765 (= $x23 true)))
 (let (($x28 (= ?x260 input.dst.llvm-%m1)))
 (let (($x673 (= $x28 true)))
 (let (($x816 (= $x673 true)))
 (let (($x40 (and $x816 $x765)))
 (let (($x457 (and $x40 $x820)))
 (let (($x751 (and $x457 $x447)))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x748 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x519 (_ bv1 32))))
 (=> $x839 (= ?x748 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x815 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x519 (_ bv1 32))))
 (= $x839 (bvuge ?x284 (_ bv1 32)))))))
 ))
 (let (($x629 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x519 (_ bv0 32))))
 (= $x275 (= ?x284 (_ bv0 32)))))))
 ))
 (let (($x245 (and $x629 $x94)))
 (let (($x555 (and $x245 $x815)))
 (let (($x631 (and $x555 $x682)))
 (let (($x505 (and $x631 $x751)))
 (let (($x706 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x791 (bvuge ?x883 (_ bv1 32))))
 (=> $x791 (= ?x427 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x791 (bvuge ?x883 (_ bv1 32))))
 (= $x791 (bvuge ?x58 (_ bv1 32)))))))
 ))
 (let (($x777 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x883 (_ bv0 32))))
 (= $x156 (= ?x58 (_ bv0 32)))))))
 ))
 (let (($x433 (and $x777 $x586)))
 (let (($x887 (and $x433 $x263)))
 (let (($x255 (and $x887 $x706)))
 (let (($x39 (and $x255 $x505)))
 (let (($x481 (=> $x39 $x366)))
 (not $x481)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x274 (bvadd ?x742 input.dst.llvm-%m2)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem ?x274))))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv2 32))) ?x128))))
 (let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x791 (bvuge ?x883 (_ bv1 32))))
 (=> $x791 (= ?x427 ?x610))))))))))
 ))
 (let (($x592 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x859 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x859 (_ bv1 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x791 (bvuge ?x883 (_ bv1 32))))
 (= $x791 $x347))))))
 ))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x412 (= false false)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x883 (_ bv0 32))))
 (=> $x156 $x412)))))
 ))
 (let (($x574 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x859 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x859 (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x883 (_ bv0 32))))
 (= $x156 $x512))))))
 ))
 (let (($x143 (and $x574 $x586)))
 (let (($x29 (and $x143 $x592)))
 (let (($x693 (and $x29 $x21)))
 (let (($x450 (= $x693 true)))
 (let (($x366 (= $x450 true)))
 (let ((?x672 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x19 (concat ?x288 (concat ?x160 ?x672)))))
 (let (($x399 (= ?x78 input.dst.llvm-%m2)))
 (let (($x201 (= $x399 true)))
 (let (($x447 (= $x201 true)))
 (let (($x152 (= input.dst.llvm-%m2 ?x78)))
 (let ((?x595 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x735 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x386 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x260 (concat ?x386 (concat ?x174 (concat ?x735 ?x595)))))
 (let (($x841 (= input.dst.llvm-%m1 ?x260)))
 (let (($x680 (and $x841 $x152)))
 (let (($x312 (and $x693 $x680)))
 (let ((?x755 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x699 (= (_ bv0 32) ?x755)))
 (let ((?x90 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x396 (= (_ bv0 32) ?x90)))
 (let ((?x597 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x715 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x597)))
 (let ((?x470 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x470)))
 (let (($x740 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x239 (and $x740 $x227)))
 (let (($x576 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x576 $x239)))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x498 (bvadd ?x742 input.dst.llvm-%m1)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv1 32))) (select input.dst.llvm-mem ?x498))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv2 32))) ?x241))))
 (let ((?x748 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x519 (_ bv1 32))))
 (=> $x839 (= ?x748 ?x113))))))))))
 ))
 (let (($x683 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x859 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x859 (_ bv1 32))))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x519 (_ bv1 32))))
 (= $x839 $x347))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x412 (= false false)))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x519 (_ bv0 32))))
 (=> $x275 $x412)))))
 ))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x859 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x859 (_ bv0 32))))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x519 (_ bv0 32))))
 (= $x275 $x512))))))
 ))
 (let (($x497 (and $x184 $x94)))
 (let (($x114 (and $x497 $x683)))
 (let (($x500 (and $x114 $x48)))
 (let (($x340 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x643 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x488 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x834 (and $x488 $x240)))
 (let (($x837 (not $x834)))
 (let (($x465 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x753 (and $x6 $x465)))
 (let (($x495 (and (not $x753) $x837)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x461 (and $x158 $x357)))
 (let (($x696 (not $x461)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x739 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x701 (and $x739 $x31)))
 (let (($x536 (and (not $x701) $x696)))
 (let (($x99 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x805 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x414 (and $x805 $x99)))
 (let (($x360 (and (and (and (and (and (and $x414 $x536) $x495) $x643) $x340) $x500) $x106)))
 (let (($x745 (and (and (and (and $x360 $x715) $x396) $x699) $x312)))
 (let (($x823 (= $x745 true)))
 (let (($x824 (= $x823 true)))
 (let (($x820 (= $x824 true)))
 (let (($x819 (= $x414 true)))
 (let (($x23 (= $x819 true)))
 (let (($x765 (= $x23 true)))
 (let (($x28 (= ?x260 input.dst.llvm-%m1)))
 (let (($x673 (= $x28 true)))
 (let (($x816 (= $x673 true)))
 (let (($x40 (and $x816 $x765)))
 (let (($x457 (and $x40 $x820)))
 (let (($x751 (and $x457 $x447)))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x748 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x519 (_ bv1 32))))
 (=> $x839 (= ?x748 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x815 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x519 (_ bv1 32))))
 (= $x839 (bvuge ?x284 (_ bv1 32)))))))
 ))
 (let (($x629 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x519 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x519 (_ bv0 32))))
 (= $x275 (= ?x284 (_ bv0 32)))))))
 ))
 (let (($x245 (and $x629 $x94)))
 (let (($x555 (and $x245 $x815)))
 (let (($x631 (and $x555 $x682)))
 (let (($x505 (and $x631 $x751)))
 (let (($x706 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x791 (bvuge ?x883 (_ bv1 32))))
 (=> $x791 (= ?x427 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x791 (bvuge ?x883 (_ bv1 32))))
 (= $x791 (bvuge ?x58 (_ bv1 32)))))))
 ))
 (let (($x777 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x883 (_ bv0 32))))
 (= $x156 (= ?x58 (_ bv0 32)))))))
 ))
 (let (($x433 (and $x777 $x586)))
 (let (($x887 (and $x433 $x263)))
 (let (($x255 (and $x887 $x706)))
 (let (($x39 (and $x255 $x505)))
 (let (($x481 (=> $x39 $x366)))
 (not $x481)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x584 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x247 (bvneg ?x584)))
 (let (($x624 (= ?x247 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x415 (= $x624 true)))
 (let (($x881 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x185 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x49 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x296 (and $x49 $x185)))
 (let (($x350 (and $x296 $x881)))
 (let (($x398 (= $x350 true)))
 (let (($x87 (= $x398 true)))
 (let (($x391 (= $x87 true)))
 (let ((?x383 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x387 (= (_ bv0 32) ?x383)))
 (let ((?x704 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x556 (= (_ bv0 32) ?x704)))
 (let ((?x747 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x400 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x747)))
 (let ((?x355 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x355)))
 (let (($x456 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x627 (and $x456 $x115)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x323 (and $x215 $x627)))
 (let (($x728 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x869 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x868 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x867 (and $x868 $x869)))
 (let (($x870 (not $x867)))
 (let (($x871 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x875 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x872 (and $x875 $x871)))
 (let (($x876 (and (not $x872) $x870)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x507 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x633 (and $x507 $x108)))
 (let (($x865 (not $x633)))
 (let (($x542 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x229 $x542)))
 (let (($x874 (and (not $x346) $x865)))
 (let (($x145 (and (and (and (and (and (and $x874 $x876) $x325) $x728) $x323) $x400) $x556)))
 (let (($x605 (and $x145 $x387)))
 (let (($x378 (= $x605 true)))
 (let (($x882 (= $x378 true)))
 (let (($x877 (= $x882 true)))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x339 (bvadd ?x526 input.dst.llvm-%m2)))
 (let ((?x796 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem ?x339))))
 (let ((?x811 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv2 32))) ?x796))))
 (let ((?x765 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (=> $x171 (= ?x765 ?x811))))))))))
 ))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x329 (_ bv1 32))))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (= $x171 $x402))))))
 ))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x157 (= false false)))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (= ?x555 (_ bv0 32))))
 (=> $x748 $x157)))))
 ))
 (let (($x726 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x329 (_ bv0 32))))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (= ?x555 (_ bv0 32))))
 (= $x748 $x827))))))
 ))
 (let (($x173 (and $x726 $x397)))
 (let (($x395 (and $x173 $x593)))
 (let (($x849 (and $x395 $x327)))
 (let (($x831 (= $x849 true)))
 (let (($x848 (= $x831 true)))
 (let (($x727 (= $x848 true)))
 (let ((?x51 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x730 (= (_ bv0 2) ?x51)))
 (let (($x572 (= $x730 true)))
 (let (($x665 (= $x572 true)))
 (let (($x75 (= $x296 true)))
 (let (($x320 (= $x75 true)))
 (let (($x762 (= $x320 true)))
 (let (($x518 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x757 (bvadd ?x526 input.dst.llvm-%m1)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv1 32))) (select input.dst.llvm-mem ?x757))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv2 32))) ?x410))))
 (let ((?x755 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (=> $x576 (= ?x755 ?x105))))))))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x329 (_ bv1 32))))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (= $x576 $x402))))))
 ))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x157 (= false false)))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x683 (_ bv0 32))))
 (=> $x114 $x157)))))
 ))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x329 (_ bv0 32))))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x683 (_ bv0 32))))
 (= $x114 $x827))))))
 ))
 (let (($x164 (and $x337 $x663)))
 (let (($x364 (and $x164 $x232)))
 (let (($x226 (and $x364 $x518)))
 (let (($x493 (= $x226 true)))
 (let (($x731 (= $x493 true)))
 (let (($x679 (= $x731 true)))
 (let (($x525 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x757 (bvadd ?x526 input.dst.llvm-%m1)))
 (let ((?x528 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x757))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv2 32))) ?x528)))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv3 32))) ?x494)))
 (let ((?x694 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x497 (_ bv1 32))))
 (=> $x590 (= ?x694 ?x349)))))))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x329 (_ bv1 32))))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x497 (_ bv1 32))))
 (= $x590 $x402))))))
 ))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x157 (= false false)))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x497 (_ bv0 32))))
 (=> $x347 $x157)))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x329 (_ bv0 32))))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x497 (_ bv0 32))))
 (= $x347 $x827))))))
 ))
 (let (($x678 (and $x669 $x656)))
 (let (($x804 (and $x678 $x280)))
 (let (($x667 (and $x804 $x525)))
 (let (($x384 (= $x667 true)))
 (let (($x646 (= $x384 true)))
 (let (($x54 (= $x646 true)))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x757 (bvadd ?x526 input.dst.llvm-%m1)))
 (let ((?x528 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x757))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv2 32))) ?x528)))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv3 32))) ?x494)))
 (let ((?x755 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (=> $x576 (= ?x755 ?x349)))))))))))
 ))
 (let (($x73 (and $x364 $x546)))
 (let (($x373 (= $x73 true)))
 (let (($x886 (= $x373 true)))
 (let (($x331 (= $x886 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x757 (bvadd ?x526 input.dst.llvm-%m1)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv1 32))) (select input.dst.llvm-mem ?x757))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv2 32))) ?x410))))
 (let ((?x694 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x497 (_ bv1 32))))
 (=> $x590 (= ?x694 ?x105))))))))))
 ))
 (let (($x530 (and $x804 $x474)))
 (let (($x660 (= $x530 true)))
 (let (($x524 (= $x660 true)))
 (let (($x301 (= $x524 true)))
 (let (($x711 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x339 (bvadd ?x526 input.dst.llvm-%m2)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x339))))
 (let ((?x376 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv2 32))) ?x509)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv3 32))) ?x376)))
 (let ((?x765 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (=> $x171 (= ?x765 ?x96)))))))))))
 ))
 (let (($x290 (and $x395 $x711)))
 (let (($x655 (= $x290 true)))
 (let (($x352 (= $x655 true)))
 (let (($x97 (= $x352 true)))
 (let (($x611 (and $x97 $x301)))
 (let (($x403 (and $x611 $x331)))
 (let (($x112 (and $x403 $x54)))
 (let (($x744 (and $x112 $x679)))
 (let (($x330 (and $x744 $x762)))
 (let (($x514 (and $x330 $x665)))
 (let (($x20 (and $x514 $x727)))
 (let (($x879 (and $x20 $x877)))
 (let (($x165 (and $x879 $x391)))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x694 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x755 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (=> $x576 (= ?x755 ?x694)))))))
 ))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x497 (_ bv1 32))))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (= $x576 $x590))))))
 ))
 (let (($x742 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x497 (_ bv0 32))))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x683 (_ bv0 32))))
 (= $x114 $x347))))))
 ))
 (let (($x677 (and $x742 $x663)))
 (let (($x227 (and $x677 $x470)))
 (let (($x574 (and $x227 $x228)))
 (let (($x319 (and $x574 $x165)))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x765 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (=> $x171 (= ?x765 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x673 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (= $x171 (bvuge ?x175 (_ bv1 32)))))))
 ))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (= ?x555 (_ bv0 32))))
 (= $x748 (= ?x175 (_ bv0 32)))))))
 ))
 (let (($x342 (and $x538 $x397)))
 (let (($x816 (and $x342 $x673)))
 (let (($x739 (and $x816 $x405)))
 (let (($x138 (and $x739 $x319)))
 (let (($x557 (=> $x138 $x415)))
 (not $x557)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x584 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x247 (bvneg ?x584)))
 (let (($x624 (= ?x247 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x415 (= $x624 true)))
 (let (($x881 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x185 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x49 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x296 (and $x49 $x185)))
 (let (($x350 (and $x296 $x881)))
 (let (($x398 (= $x350 true)))
 (let (($x87 (= $x398 true)))
 (let (($x391 (= $x87 true)))
 (let ((?x383 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x387 (= (_ bv0 32) ?x383)))
 (let ((?x704 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x556 (= (_ bv0 32) ?x704)))
 (let ((?x747 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x400 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x747)))
 (let ((?x355 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x355)))
 (let (($x456 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x627 (and $x456 $x115)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x323 (and $x215 $x627)))
 (let (($x728 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x869 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x868 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x867 (and $x868 $x869)))
 (let (($x870 (not $x867)))
 (let (($x871 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x875 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x872 (and $x875 $x871)))
 (let (($x876 (and (not $x872) $x870)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x507 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x633 (and $x507 $x108)))
 (let (($x865 (not $x633)))
 (let (($x542 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x229 $x542)))
 (let (($x874 (and (not $x346) $x865)))
 (let (($x145 (and (and (and (and (and (and $x874 $x876) $x325) $x728) $x323) $x400) $x556)))
 (let (($x605 (and $x145 $x387)))
 (let (($x378 (= $x605 true)))
 (let (($x882 (= $x378 true)))
 (let (($x877 (= $x882 true)))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x339 (bvadd ?x526 input.dst.llvm-%m2)))
 (let ((?x796 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem ?x339))))
 (let ((?x811 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv2 32))) ?x796))))
 (let ((?x765 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (=> $x171 (= ?x765 ?x811))))))))))
 ))
 (let (($x593 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x329 (_ bv1 32))))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (= $x171 $x402))))))
 ))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x157 (= false false)))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (= ?x555 (_ bv0 32))))
 (=> $x748 $x157)))))
 ))
 (let (($x726 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x329 (_ bv0 32))))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (= ?x555 (_ bv0 32))))
 (= $x748 $x827))))))
 ))
 (let (($x173 (and $x726 $x397)))
 (let (($x395 (and $x173 $x593)))
 (let (($x849 (and $x395 $x327)))
 (let (($x831 (= $x849 true)))
 (let (($x848 (= $x831 true)))
 (let (($x727 (= $x848 true)))
 (let ((?x51 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x730 (= (_ bv0 2) ?x51)))
 (let (($x572 (= $x730 true)))
 (let (($x665 (= $x572 true)))
 (let (($x75 (= $x296 true)))
 (let (($x320 (= $x75 true)))
 (let (($x762 (= $x320 true)))
 (let (($x518 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x757 (bvadd ?x526 input.dst.llvm-%m1)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv1 32))) (select input.dst.llvm-mem ?x757))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv2 32))) ?x410))))
 (let ((?x755 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (=> $x576 (= ?x755 ?x105))))))))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x329 (_ bv1 32))))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (= $x576 $x402))))))
 ))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x157 (= false false)))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x683 (_ bv0 32))))
 (=> $x114 $x157)))))
 ))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x329 (_ bv0 32))))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x683 (_ bv0 32))))
 (= $x114 $x827))))))
 ))
 (let (($x164 (and $x337 $x663)))
 (let (($x364 (and $x164 $x232)))
 (let (($x226 (and $x364 $x518)))
 (let (($x493 (= $x226 true)))
 (let (($x731 (= $x493 true)))
 (let (($x679 (= $x731 true)))
 (let (($x525 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x757 (bvadd ?x526 input.dst.llvm-%m1)))
 (let ((?x528 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x757))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv2 32))) ?x528)))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv3 32))) ?x494)))
 (let ((?x694 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x497 (_ bv1 32))))
 (=> $x590 (= ?x694 ?x349)))))))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x329 (_ bv1 32))))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x497 (_ bv1 32))))
 (= $x590 $x402))))))
 ))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x157 (= false false)))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x497 (_ bv0 32))))
 (=> $x347 $x157)))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x329 (_ bv0 32))))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x497 (_ bv0 32))))
 (= $x347 $x827))))))
 ))
 (let (($x678 (and $x669 $x656)))
 (let (($x804 (and $x678 $x280)))
 (let (($x667 (and $x804 $x525)))
 (let (($x384 (= $x667 true)))
 (let (($x646 (= $x384 true)))
 (let (($x54 (= $x646 true)))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x757 (bvadd ?x526 input.dst.llvm-%m1)))
 (let ((?x528 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x757))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv2 32))) ?x528)))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x757 (_ bv3 32))) ?x494)))
 (let ((?x755 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (=> $x576 (= ?x755 ?x349)))))))))))
 ))
 (let (($x73 (and $x364 $x546)))
 (let (($x373 (= $x73 true)))
 (let (($x886 (= $x373 true)))
 (let (($x331 (= $x886 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x757 (bvadd ?x526 input.dst.llvm-%m1)))
 (let ((?x410 (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv1 32))) (select input.dst.llvm-mem ?x757))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x757 (_ bv2 32))) ?x410))))
 (let ((?x694 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x497 (_ bv1 32))))
 (=> $x590 (= ?x694 ?x105))))))))))
 ))
 (let (($x530 (and $x804 $x474)))
 (let (($x660 (= $x530 true)))
 (let (($x524 (= $x660 true)))
 (let (($x301 (= $x524 true)))
 (let (($x711 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x526 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x339 (bvadd ?x526 input.dst.llvm-%m2)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x339))))
 (let ((?x376 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv2 32))) ?x509)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv3 32))) ?x376)))
 (let ((?x765 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (=> $x171 (= ?x765 ?x96)))))))))))
 ))
 (let (($x290 (and $x395 $x711)))
 (let (($x655 (= $x290 true)))
 (let (($x352 (= $x655 true)))
 (let (($x97 (= $x352 true)))
 (let (($x611 (and $x97 $x301)))
 (let (($x403 (and $x611 $x331)))
 (let (($x112 (and $x403 $x54)))
 (let (($x744 (and $x112 $x679)))
 (let (($x330 (and $x744 $x762)))
 (let (($x514 (and $x330 $x665)))
 (let (($x20 (and $x514 $x727)))
 (let (($x879 (and $x20 $x877)))
 (let (($x165 (and $x879 $x391)))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x694 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x755 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (=> $x576 (= ?x755 ?x694)))))))
 ))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x497 (_ bv1 32))))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x576 (bvuge ?x683 (_ bv1 32))))
 (= $x576 $x590))))))
 ))
 (let (($x742 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x497 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (= ?x497 (_ bv0 32))))
 (let ((?x683 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x683 (_ bv0 32))))
 (= $x114 $x347))))))
 ))
 (let (($x677 (and $x742 $x663)))
 (let (($x227 (and $x677 $x470)))
 (let (($x574 (and $x227 $x228)))
 (let (($x319 (and $x574 $x165)))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x765 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (=> $x171 (= ?x765 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x673 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x555 (_ bv1 32))))
 (= $x171 (bvuge ?x175 (_ bv1 32)))))))
 ))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x555 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x748 (= ?x555 (_ bv0 32))))
 (= $x748 (= ?x175 (_ bv0 32)))))))
 ))
 (let (($x342 (and $x538 $x397)))
 (let (($x816 (and $x342 $x673)))
 (let (($x739 (and $x816 $x405)))
 (let (($x138 (and $x739 $x319)))
 (let (($x557 (=> $x138 $x415)))
 (not $x557)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x829 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x85 (bvneg ?x829)))
 (let (($x527 (= ?x85 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x70 (= $x527 true)))
 (let (($x130 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x519 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x255 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x275 (and $x255 $x519)))
 (let (($x826 (and $x275 $x130)))
 (let (($x448 (= $x826 true)))
 (let (($x579 (= $x448 true)))
 (let (($x709 (= $x579 true)))
 (let ((?x304 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x281 (= (_ bv0 32) ?x304)))
 (let ((?x382 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x552 (= (_ bv0 32) ?x382)))
 (let ((?x190 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x759 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x190)))
 (let ((?x687 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x767 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x687)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x426 $x767)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x68 $x95)))
 (let (($x192 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x381 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x842 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x842 $x223)))
 (let (($x598 (not $x246)))
 (let (($x561 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x698 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (and $x698 $x561)))
 (let (($x267 (and (not $x148) $x598)))
 (let (($x847 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x845 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x852 (and $x845 $x847)))
 (let (($x854 (not $x852)))
 (let (($x566 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x891 (and $x162 $x566)))
 (let (($x622 (and (not $x891) $x854)))
 (let (($x790 (and (and (and (and (and (and $x622 $x267) $x381) $x192) $x14) $x759) $x552)))
 (let (($x270 (and $x790 $x281)))
 (let (($x135 (= $x270 true)))
 (let (($x828 (= $x135 true)))
 (let (($x266 (= $x828 true)))
 (let (($x884 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x263 (bvadd ?x582 input.dst.llvm-%m2)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x464 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x116))))
 (let ((?x509 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (=> $x846 (= ?x509 ?x464))))))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (bvuge ?x877 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (= $x846 $x584))))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x860 (= false false)))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x227 (_ bv0 32))))
 (=> $x755 $x860)))))
 ))
 (let (($x880 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x879 (= ?x877 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x227 (_ bv0 32))))
 (= $x755 $x879))))))
 ))
 (let (($x881 (and $x880 $x120)))
 (let (($x415 (and $x881 $x624)))
 (let (($x155 (and $x415 $x884)))
 (let (($x187 (= $x155 true)))
 (let (($x132 (= $x187 true)))
 (let (($x169 (= $x132 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x176 (= (_ bv0 2) ?x174)))
 (let (($x735 (= $x176 true)))
 (let (($x661 (= $x735 true)))
 (let (($x168 (= $x275 true)))
 (let (($x629 (= $x168 true)))
 (let (($x286 (= $x629 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x778 (bvadd ?x582 input.dst.llvm-%m1)))
 (let ((?x498 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem ?x778))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv2 32))) ?x498))))
 (let ((?x744 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (=> $x525 (= ?x744 ?x806))))))))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (bvuge ?x877 (_ bv1 32))))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (= $x525 $x584))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x860 (= false false)))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x124 (_ bv0 32))))
 (=> $x232 $x860)))))
 ))
 (let (($x617 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x879 (= ?x877 (_ bv0 32))))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x124 (_ bv0 32))))
 (= $x232 $x879))))))
 ))
 (let (($x284 (and $x617 $x104)))
 (let (($x42 (and $x284 $x477)))
 (let (($x90 (and $x42 $x224)))
 (let (($x396 (= $x90 true)))
 (let (($x862 (= $x396 true)))
 (let (($x427 (= $x862 true)))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x778 (bvadd ?x582 input.dst.llvm-%m1)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x778))))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv2 32))) ?x193)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv3 32))) ?x236)))
 (let ((?x679 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x618 (_ bv1 32))))
 (=> $x151 (= ?x679 ?x8)))))))))))
 ))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (bvuge ?x877 (_ bv1 32))))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x618 (_ bv1 32))))
 (= $x151 $x584))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x860 (= false false)))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x618 (_ bv0 32))))
 (=> $x337 $x860)))))
 ))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x879 (= ?x877 (_ bv0 32))))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x618 (_ bv0 32))))
 (= $x337 $x879))))))
 ))
 (let (($x411 (and $x465 $x638)))
 (let (($x235 (and $x411 $x5)))
 (let (($x38 (and $x235 $x512)))
 (let (($x241 (= $x38 true)))
 (let (($x191 (= $x241 true)))
 (let (($x113 (= $x191 true)))
 (let (($x834 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x778 (bvadd ?x582 input.dst.llvm-%m1)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x778))))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv2 32))) ?x193)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv3 32))) ?x236)))
 (let ((?x744 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (=> $x525 (= ?x744 ?x8)))))))))))
 ))
 (let (($x837 (and $x42 $x834)))
 (let (($x495 (= $x837 true)))
 (let (($x503 (= $x495 true)))
 (let (($x643 (= $x503 true)))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x778 (bvadd ?x582 input.dst.llvm-%m1)))
 (let ((?x498 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem ?x778))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv2 32))) ?x498))))
 (let ((?x679 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x618 (_ bv1 32))))
 (=> $x151 (= ?x679 ?x806))))))))))
 ))
 (let (($x658 (and $x235 $x504)))
 (let (($x12 (= $x658 true)))
 (let (($x136 (= $x12 true)))
 (let (($x261 (= $x136 true)))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x263 (bvadd ?x582 input.dst.llvm-%m2)))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x263))))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x263 (_ bv2 32))) ?x29)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x263 (_ bv3 32))) ?x84)))
 (let ((?x509 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (=> $x846 (= ?x509 ?x126)))))))))))
 ))
 (let (($x540 (and $x415 $x21)))
 (let (($x445 (= $x540 true)))
 (let (($x186 (= $x445 true)))
 (let (($x436 (= $x186 true)))
 (let (($x239 (and $x436 $x261)))
 (let (($x733 (and $x239 $x643)))
 (let (($x604 (and $x733 $x113)))
 (let (($x889 (and $x604 $x427)))
 (let (($x94 (and $x889 $x286)))
 (let (($x322 (and $x94 $x661)))
 (let (($x56 (and $x322 $x169)))
 (let (($x182 (and $x56 $x266)))
 (let (($x333 (and $x182 $x709)))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x679 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x744 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (=> $x525 (= ?x744 ?x679)))))))
 ))
 (let (($x384 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x618 (_ bv1 32))))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (= $x525 $x151))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x618 (_ bv0 32))))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x124 (_ bv0 32))))
 (= $x232 $x337))))))
 ))
 (let (($x528 (and $x315 $x104)))
 (let (($x646 (and $x528 $x384)))
 (let (($x344 (and $x646 $x49)))
 (let (($x578 (and $x344 $x333)))
 (let (($x830 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x509 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (=> $x846 (= ?x509 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x784 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x590 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (= $x846 (bvuge ?x590 (_ bv1 32)))))))
 ))
 (let (($x699 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x590 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x227 (_ bv0 32))))
 (= $x755 (= ?x590 (_ bv0 32)))))))
 ))
 (let (($x592 (and $x699 $x120)))
 (let (($x339 (and $x592 $x784)))
 (let (($x172 (and $x339 $x830)))
 (let (($x521 (and $x172 $x578)))
 (let (($x370 (=> $x521 $x70)))
 (not $x370)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x829 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x85 (bvneg ?x829)))
 (let (($x527 (= ?x85 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x70 (= $x527 true)))
 (let (($x130 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x519 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x255 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x275 (and $x255 $x519)))
 (let (($x826 (and $x275 $x130)))
 (let (($x448 (= $x826 true)))
 (let (($x579 (= $x448 true)))
 (let (($x709 (= $x579 true)))
 (let ((?x304 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x281 (= (_ bv0 32) ?x304)))
 (let ((?x382 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x552 (= (_ bv0 32) ?x382)))
 (let ((?x190 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x759 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x190)))
 (let ((?x687 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x767 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x687)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x426 $x767)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x68 $x95)))
 (let (($x192 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x381 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x842 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x842 $x223)))
 (let (($x598 (not $x246)))
 (let (($x561 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x698 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (and $x698 $x561)))
 (let (($x267 (and (not $x148) $x598)))
 (let (($x847 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x845 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x852 (and $x845 $x847)))
 (let (($x854 (not $x852)))
 (let (($x566 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x891 (and $x162 $x566)))
 (let (($x622 (and (not $x891) $x854)))
 (let (($x790 (and (and (and (and (and (and $x622 $x267) $x381) $x192) $x14) $x759) $x552)))
 (let (($x270 (and $x790 $x281)))
 (let (($x135 (= $x270 true)))
 (let (($x828 (= $x135 true)))
 (let (($x266 (= $x828 true)))
 (let (($x884 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x263 (bvadd ?x582 input.dst.llvm-%m2)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem ?x263))))
 (let ((?x464 (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x263 (_ bv2 32))) ?x116))))
 (let ((?x509 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (=> $x846 (= ?x509 ?x464))))))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (bvuge ?x877 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (= $x846 $x584))))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x860 (= false false)))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x227 (_ bv0 32))))
 (=> $x755 $x860)))))
 ))
 (let (($x880 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x879 (= ?x877 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x227 (_ bv0 32))))
 (= $x755 $x879))))))
 ))
 (let (($x881 (and $x880 $x120)))
 (let (($x415 (and $x881 $x624)))
 (let (($x155 (and $x415 $x884)))
 (let (($x187 (= $x155 true)))
 (let (($x132 (= $x187 true)))
 (let (($x169 (= $x132 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x176 (= (_ bv0 2) ?x174)))
 (let (($x735 (= $x176 true)))
 (let (($x661 (= $x735 true)))
 (let (($x168 (= $x275 true)))
 (let (($x629 (= $x168 true)))
 (let (($x286 (= $x629 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x778 (bvadd ?x582 input.dst.llvm-%m1)))
 (let ((?x498 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem ?x778))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv2 32))) ?x498))))
 (let ((?x744 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (=> $x525 (= ?x744 ?x806))))))))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (bvuge ?x877 (_ bv1 32))))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (= $x525 $x584))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x860 (= false false)))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x124 (_ bv0 32))))
 (=> $x232 $x860)))))
 ))
 (let (($x617 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x879 (= ?x877 (_ bv0 32))))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x124 (_ bv0 32))))
 (= $x232 $x879))))))
 ))
 (let (($x284 (and $x617 $x104)))
 (let (($x42 (and $x284 $x477)))
 (let (($x90 (and $x42 $x224)))
 (let (($x396 (= $x90 true)))
 (let (($x862 (= $x396 true)))
 (let (($x427 (= $x862 true)))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x778 (bvadd ?x582 input.dst.llvm-%m1)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x778))))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv2 32))) ?x193)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv3 32))) ?x236)))
 (let ((?x679 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x618 (_ bv1 32))))
 (=> $x151 (= ?x679 ?x8)))))))))))
 ))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x584 (bvuge ?x877 (_ bv1 32))))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x618 (_ bv1 32))))
 (= $x151 $x584))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x860 (= false false)))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x618 (_ bv0 32))))
 (=> $x337 $x860)))))
 ))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x877 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x879 (= ?x877 (_ bv0 32))))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x618 (_ bv0 32))))
 (= $x337 $x879))))))
 ))
 (let (($x411 (and $x465 $x638)))
 (let (($x235 (and $x411 $x5)))
 (let (($x38 (and $x235 $x512)))
 (let (($x241 (= $x38 true)))
 (let (($x191 (= $x241 true)))
 (let (($x113 (= $x191 true)))
 (let (($x834 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x778 (bvadd ?x582 input.dst.llvm-%m1)))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x778))))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv2 32))) ?x193)))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x778 (_ bv3 32))) ?x236)))
 (let ((?x744 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (=> $x525 (= ?x744 ?x8)))))))))))
 ))
 (let (($x837 (and $x42 $x834)))
 (let (($x495 (= $x837 true)))
 (let (($x503 (= $x495 true)))
 (let (($x643 (= $x503 true)))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x778 (bvadd ?x582 input.dst.llvm-%m1)))
 (let ((?x498 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem ?x778))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv2 32))) ?x498))))
 (let ((?x679 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x618 (_ bv1 32))))
 (=> $x151 (= ?x679 ?x806))))))))))
 ))
 (let (($x658 (and $x235 $x504)))
 (let (($x12 (= $x658 true)))
 (let (($x136 (= $x12 true)))
 (let (($x261 (= $x136 true)))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x263 (bvadd ?x582 input.dst.llvm-%m2)))
 (let ((?x29 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x263 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x263))))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x263 (_ bv2 32))) ?x29)))
 (let ((?x126 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x263 (_ bv3 32))) ?x84)))
 (let ((?x509 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (=> $x846 (= ?x509 ?x126)))))))))))
 ))
 (let (($x540 (and $x415 $x21)))
 (let (($x445 (= $x540 true)))
 (let (($x186 (= $x445 true)))
 (let (($x436 (= $x186 true)))
 (let (($x239 (and $x436 $x261)))
 (let (($x733 (and $x239 $x643)))
 (let (($x604 (and $x733 $x113)))
 (let (($x889 (and $x604 $x427)))
 (let (($x94 (and $x889 $x286)))
 (let (($x322 (and $x94 $x661)))
 (let (($x56 (and $x322 $x169)))
 (let (($x182 (and $x56 $x266)))
 (let (($x333 (and $x182 $x709)))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x679 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x744 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (=> $x525 (= ?x744 ?x679)))))))
 ))
 (let (($x384 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x618 (_ bv1 32))))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x124 (_ bv1 32))))
 (= $x525 $x151))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x618 (_ bv0 32))))
 (let ((?x124 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x124 (_ bv0 32))))
 (= $x232 $x337))))))
 ))
 (let (($x528 (and $x315 $x104)))
 (let (($x646 (and $x528 $x384)))
 (let (($x344 (and $x646 $x49)))
 (let (($x578 (and $x344 $x333)))
 (let (($x830 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x509 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (=> $x846 (= ?x509 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x784 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x590 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x846 (bvuge ?x227 (_ bv1 32))))
 (= $x846 (bvuge ?x590 (_ bv1 32)))))))
 ))
 (let (($x699 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x590 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (= ?x227 (_ bv0 32))))
 (= $x755 (= ?x590 (_ bv0 32)))))))
 ))
 (let (($x592 (and $x699 $x120)))
 (let (($x339 (and $x592 $x784)))
 (let (($x172 (and $x339 $x830)))
 (let (($x521 (and $x172 $x578)))
 (let (($x370 (=> $x521 $x70)))
 (not $x370)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x554 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x458 (= ?x274 (_ bv0 32))))
 (let ((?x525 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x525)))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x677 (and $x164 $x172)))
 (let (($x469 (and $x677 $x458)))
 (and $x469 $x554)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x554 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x458 (= ?x274 (_ bv0 32))))
 (let ((?x525 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x525)))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x677 (and $x164 $x172)))
 (let (($x469 (and $x677 $x458)))
 (and $x469 $x554)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x585 (= true false)))
 (let (($x117 (= $x585 true)))
 (let ((?x243 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x839 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x761 (concat ?x839 (concat ?x500 (concat ?x9 ?x243)))))
 (let (($x157 (= ?x761 input.dst.llvm-%m)))
 (let (($x631 (= $x157 true)))
 (let (($x397 (= $x631 true)))
 (let (($x442 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x207 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x442)))))))
 (let (($x754 (= $x207 true)))
 (let (($x331 (= $x754 true)))
 (let (($x692 (= $x331 true)))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x536 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x704 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv1 32))) (select input.dst.llvm-mem ?x536))))
 (let ((?x861 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv2 32))) ?x704))))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x835 (_ bv1 32))))
 (=> $x188 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x861))))))))
 ))
 (let (($x614 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x835 (_ bv1 32))))
 (= $x188 (bvuge ?x560 (_ bv1 32)))))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x879 (= false false)))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x835 (_ bv0 32))))
 (=> $x645 $x879)))))
 ))
 (let (($x772 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x835 (_ bv0 32))))
 (= $x645 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x372 (and $x772 $x206)))
 (let (($x513 (and $x372 $x614)))
 (let (($x83 (and $x513 $x50)))
 (let (($x650 (= $x83 true)))
 (let (($x449 (= $x650 true)))
 (let (($x888 (= $x449 true)))
 (let ((?x552 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x790 (= (_ bv0 32) ?x552)))
 (let ((?x759 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x594 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x759)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x382 (and $x190 $x594)))
 (let (($x304 (and $x382 $x790)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x34 $x304)))
 (let (($x270 (= $x281 true)))
 (let (($x135 (= $x270 true)))
 (let (($x828 (= $x135 true)))
 (let ((?x223 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x651 (bvugt ?x223 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x381 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x223 (_ bv3 32)))))
 (let (($x687 (=> (bvule ?x223 (bvsub (bvadd ?x223 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x381 $x651)))))))
 (let (($x246 (= $x687 true)))
 (let (($x598 (= $x246 true)))
 (let (($x767 (= $x598 true)))
 (let ((?x501 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x845 (bvugt ?x501 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x843 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x501 (_ bv3 32)))))
 (let (($x561 (=> (bvule ?x501 (bvsub (bvadd ?x501 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x843 $x845)))))))
 (let (($x162 (= $x561 true)))
 (let (($x432 (= $x162 true)))
 (let (($x148 (= $x432 true)))
 (let ((?x735 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x712 (bvugt ?x735 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x464 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x735 (_ bv3 32)))))
 (let (($x169 (=> (bvule ?x735 (bvsub (bvadd ?x735 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x464 $x712)))))))
 (let (($x322 (= $x169 true)))
 (let (($x619 (= $x322 true)))
 (let (($x56 (= $x619 true)))
 (let (($x492 (and $x56 $x148)))
 (let (($x95 (and $x492 $x767)))
 (let (($x266 (and $x95 $x828)))
 (let (($x147 (and $x266 $x888)))
 (let (($x600 (and $x147 $x692)))
 (let (($x342 (and $x600 $x397)))
 (let ((?x574 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x629 (= ?x574 input.spec-%tmpvar-1.L1%3%d.2)))
 (let ((?x224 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x224 (_ bv1 32))))
 (let (($x286 (=> $x519 $x629)))
 (let (($x571 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x275 (= $x519 $x571)))
 (let (($x879 (= false false)))
 (let (($x90 (= ?x224 (_ bv0 32))))
 (let (($x862 (=> $x90 $x879)))
 (let (($x360 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x396 (= $x90 $x360)))
 (let (($x427 (and $x396 $x862)))
 (let (($x168 (and $x427 $x275)))
 (let (($x94 (and $x168 $x286)))
 (let (($x171 (and $x94 $x342)))
 (let ((?x846 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x733 (= ?x846 input.spec-%tmpvar-5.L1%12%d.2)))
 (let ((?x336 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (bvuge ?x336 (_ bv1 32))))
 (let (($x568 (=> $x495 $x733)))
 (let (($x837 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x503 (= $x495 $x837)))
 (let (($x434 (= ?x336 (_ bv0 32))))
 (let (($x193 (=> $x434 $x879)))
 (let (($x42 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x273 (= $x434 $x42)))
 (let (($x236 (and $x273 $x193)))
 (let (($x643 (and $x236 $x503)))
 (let (($x859 (and $x643 $x568)))
 (let (($x558 (and $x859 $x171)))
 (let ((?x618 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x12 (= ?x618 input.spec-%tmpvar-9.L1%21%d.2)))
 (let ((?x802 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x732 (bvuge ?x802 (_ bv1 32))))
 (let (($x136 (=> $x732 $x12)))
 (let (($x803 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x504 (= $x732 $x803)))
 (let (($x606 (= ?x802 (_ bv0 32))))
 (let (($x285 (=> $x606 $x879)))
 (let (($x778 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x110 (= $x606 $x778)))
 (let (($x529 (and $x110 $x285)))
 (let (($x658 (and $x529 $x504)))
 (let (($x261 (and $x658 $x136)))
 (let (($x745 (and $x261 $x558)))
 (let ((?x699 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x465 (= ?x699 input.spec-%tmpvar-13.L1%30%d.2)))
 (let ((?x850 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x850 (_ bv1 32))))
 (let (($x279 (=> $x186 $x465)))
 (let (($x445 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x436 (= $x186 $x445)))
 (let (($x415 (= ?x850 (_ bv0 32))))
 (let (($x84 (=> $x415 $x879)))
 (let (($x582 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x796 (= $x415 $x582)))
 (let (($x126 (and $x796 $x84)))
 (let (($x6 (and $x126 $x436)))
 (let (($x638 (and $x6 $x279)))
 (let (($x823 (and $x638 $x745)))
 (let (($x344 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x680 (and $x344 $x823)))
 (let (($x523 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x457 (and $x523 $x680)))
 (let (($x679 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x447 (and $x679 $x457)))
 (let (($x646 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x496 (and $x646 $x447)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x684 (and $x315 $x496)))
 (let (($x766 (and $x879 $x684)))
 (let (($x611 (= ?x574 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x708 (and $x611 $x766)))
 (let (($x860 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x855 (and $x860 $x708)))
 (let (($x311 (and $x879 $x855)))
 (let (($x592 (= ?x846 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x299 (and $x592 $x311)))
 (let (($x554 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x607 (and $x554 $x299)))
 (let (($x27 (and $x879 $x607)))
 (let (($x29 (= ?x618 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x348 (and $x29 $x27)))
 (let (($x384 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x93 (and $x384 $x348)))
 (let (($x13 (and $x879 $x93)))
 (let (($x887 (= ?x699 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x482 (and $x887 $x13)))
 (let (($x134 (=> $x482 $x117)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x585 (= true false)))
 (let (($x117 (= $x585 true)))
 (let ((?x243 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x839 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x761 (concat ?x839 (concat ?x500 (concat ?x9 ?x243)))))
 (let (($x157 (= ?x761 input.dst.llvm-%m)))
 (let (($x631 (= $x157 true)))
 (let (($x397 (= $x631 true)))
 (let (($x442 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x207 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x112 $x442)))))))
 (let (($x754 (= $x207 true)))
 (let (($x331 (= $x754 true)))
 (let (($x692 (= $x331 true)))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x536 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x704 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv1 32))) (select input.dst.llvm-mem ?x536))))
 (let ((?x861 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv2 32))) ?x704))))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x835 (_ bv1 32))))
 (=> $x188 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x861))))))))
 ))
 (let (($x614 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x835 (_ bv1 32))))
 (= $x188 (bvuge ?x560 (_ bv1 32)))))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x879 (= false false)))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x835 (_ bv0 32))))
 (=> $x645 $x879)))))
 ))
 (let (($x772 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x835 (_ bv0 32))))
 (= $x645 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x372 (and $x772 $x206)))
 (let (($x513 (and $x372 $x614)))
 (let (($x83 (and $x513 $x50)))
 (let (($x650 (= $x83 true)))
 (let (($x449 (= $x650 true)))
 (let (($x888 (= $x449 true)))
 (let ((?x552 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x790 (= (_ bv0 32) ?x552)))
 (let ((?x759 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x594 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x759)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x382 (and $x190 $x594)))
 (let (($x304 (and $x382 $x790)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x34 $x304)))
 (let (($x270 (= $x281 true)))
 (let (($x135 (= $x270 true)))
 (let (($x828 (= $x135 true)))
 (let ((?x223 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x651 (bvugt ?x223 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x381 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x223 (_ bv3 32)))))
 (let (($x687 (=> (bvule ?x223 (bvsub (bvadd ?x223 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x381 $x651)))))))
 (let (($x246 (= $x687 true)))
 (let (($x598 (= $x246 true)))
 (let (($x767 (= $x598 true)))
 (let ((?x501 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x845 (bvugt ?x501 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x843 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x501 (_ bv3 32)))))
 (let (($x561 (=> (bvule ?x501 (bvsub (bvadd ?x501 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x843 $x845)))))))
 (let (($x162 (= $x561 true)))
 (let (($x432 (= $x162 true)))
 (let (($x148 (= $x432 true)))
 (let ((?x735 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x712 (bvugt ?x735 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x464 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x735 (_ bv3 32)))))
 (let (($x169 (=> (bvule ?x735 (bvsub (bvadd ?x735 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x464 $x712)))))))
 (let (($x322 (= $x169 true)))
 (let (($x619 (= $x322 true)))
 (let (($x56 (= $x619 true)))
 (let (($x492 (and $x56 $x148)))
 (let (($x95 (and $x492 $x767)))
 (let (($x266 (and $x95 $x828)))
 (let (($x147 (and $x266 $x888)))
 (let (($x600 (and $x147 $x692)))
 (let (($x342 (and $x600 $x397)))
 (let ((?x574 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x629 (= ?x574 input.spec-%tmpvar-1.L1%3%d.2)))
 (let ((?x224 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x519 (bvuge ?x224 (_ bv1 32))))
 (let (($x286 (=> $x519 $x629)))
 (let (($x571 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x275 (= $x519 $x571)))
 (let (($x879 (= false false)))
 (let (($x90 (= ?x224 (_ bv0 32))))
 (let (($x862 (=> $x90 $x879)))
 (let (($x360 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x396 (= $x90 $x360)))
 (let (($x427 (and $x396 $x862)))
 (let (($x168 (and $x427 $x275)))
 (let (($x94 (and $x168 $x286)))
 (let (($x171 (and $x94 $x342)))
 (let ((?x846 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x733 (= ?x846 input.spec-%tmpvar-5.L1%12%d.2)))
 (let ((?x336 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (bvuge ?x336 (_ bv1 32))))
 (let (($x568 (=> $x495 $x733)))
 (let (($x837 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x503 (= $x495 $x837)))
 (let (($x434 (= ?x336 (_ bv0 32))))
 (let (($x193 (=> $x434 $x879)))
 (let (($x42 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x273 (= $x434 $x42)))
 (let (($x236 (and $x273 $x193)))
 (let (($x643 (and $x236 $x503)))
 (let (($x859 (and $x643 $x568)))
 (let (($x558 (and $x859 $x171)))
 (let ((?x618 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x12 (= ?x618 input.spec-%tmpvar-9.L1%21%d.2)))
 (let ((?x802 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x732 (bvuge ?x802 (_ bv1 32))))
 (let (($x136 (=> $x732 $x12)))
 (let (($x803 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x504 (= $x732 $x803)))
 (let (($x606 (= ?x802 (_ bv0 32))))
 (let (($x285 (=> $x606 $x879)))
 (let (($x778 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x110 (= $x606 $x778)))
 (let (($x529 (and $x110 $x285)))
 (let (($x658 (and $x529 $x504)))
 (let (($x261 (and $x658 $x136)))
 (let (($x745 (and $x261 $x558)))
 (let ((?x699 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x465 (= ?x699 input.spec-%tmpvar-13.L1%30%d.2)))
 (let ((?x850 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x850 (_ bv1 32))))
 (let (($x279 (=> $x186 $x465)))
 (let (($x445 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x436 (= $x186 $x445)))
 (let (($x415 (= ?x850 (_ bv0 32))))
 (let (($x84 (=> $x415 $x879)))
 (let (($x582 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x796 (= $x415 $x582)))
 (let (($x126 (and $x796 $x84)))
 (let (($x6 (and $x126 $x436)))
 (let (($x638 (and $x6 $x279)))
 (let (($x823 (and $x638 $x745)))
 (let (($x344 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x680 (and $x344 $x823)))
 (let (($x523 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x457 (and $x523 $x680)))
 (let (($x679 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x447 (and $x679 $x457)))
 (let (($x646 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x496 (and $x646 $x447)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x684 (and $x315 $x496)))
 (let (($x766 (and $x879 $x684)))
 (let (($x611 (= ?x574 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x708 (and $x611 $x766)))
 (let (($x860 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x855 (and $x860 $x708)))
 (let (($x311 (and $x879 $x855)))
 (let (($x592 (= ?x846 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x299 (and $x592 $x311)))
 (let (($x554 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x607 (and $x554 $x299)))
 (let (($x27 (and $x879 $x607)))
 (let (($x29 (= ?x618 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x348 (and $x29 $x27)))
 (let (($x384 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x93 (and $x384 $x348)))
 (let (($x13 (and $x879 $x93)))
 (let (($x887 (= ?x699 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x482 (and $x887 $x13)))
 (let (($x134 (=> $x482 $x117)))
 (not $x134)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000020)
  (define-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000020)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000003)
        (= x!0 #x00000002)
        (= x!0 #x00000001)
        (= x!0 #x00000000)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x40000023)
                                     (k!4 #x40000022)
                                     (k!4 #x40000021)
                                     (k!4 #x40000020)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x40000023)
                                     (k!4 #x40000022)
                                     (k!4 #x40000021)
                                     (k!4 #x40000020)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x40000023)
                                     (k!4 #x40000022)
                                     (k!4 #x40000021)
                                     (k!4 #x40000020)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #x40000023)
                                     (k!4 #x40000022)
                                     (k!4 #x40000021)
                                     (k!4 #x40000020))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32)
    #x08000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32)
    #x00080000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x19002580)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x63fffffd)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x19002583)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x19002580)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      false)))))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x19002582) #xff
    (ite (= x!0 #x19002581) #xff
    (ite (= x!0 #x19002583) #x63
    (ite (= x!0 #x19002580) #xfd
      #x00)))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x19002583)
                                     (k!4 #x19002582)
                                     (k!4 #x19002581)
                                     (k!4 #x19002580)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x19002583)
                                     (k!4 #x19002582)
                                     (k!4 #x19002581)
                                     (k!4 #x19002580)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x19002583)
                                     (k!4 #x19002582)
                                     (k!4 #x19002581)
                                     (k!4 #x19002580)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #x19002583)
                                     (k!4 #x19002582)
                                     (k!4 #x19002581)
                                     (k!4 #x19002580))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x148 (_ bv1 32))))
 (let (($x492 (= ?x148 (_ bv0 32))))
 (let (($x653 (or $x492 $x218)))
 (let ((?x382 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x810 (bvuge ?x382 (_ bv1 32))))
 (let (($x213 (and $x810 $x653)))
 (let (($x552 (= ?x382 (_ bv0 32))))
 (let (($x443 (and $x552 $x653)))
 (let (($x283 (or $x443 $x213)))
 (let ((?x188 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x188 (_ bv1 32))))
 (let (($x264 (and $x472 $x283)))
 (let (($x804 (= ?x188 (_ bv0 32))))
 (let (($x543 (and $x804 $x283)))
 (let (($x639 (or $x543 $x264)))
 (let ((?x449 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x573 (bvuge ?x449 (_ bv1 32))))
 (let (($x393 (and $x573 $x639)))
 (let (($x888 (= ?x449 (_ bv0 32))))
 (let (($x483 (and $x888 $x639)))
 (let (($x844 (or $x483 $x393)))
 (let (($x410 (or false $x844)))
 (let (($x616 (= $x410 true)))
 (let (($x105 (= $x616 true)))
 (let ((?x793 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x540 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x497 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x851 (concat ?x228 (concat ?x497 (concat ?x540 ?x793)))))
 (let (($x377 (= ?x851 input.dst.llvm-%m)))
 (let (($x329 (= $x377 true)))
 (let (($x827 (= $x329 true)))
 (let (($x723 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x8))))
 (let ((?x195 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x435 (bvuge ?x195 (_ bv1 32))))
 (=> $x435 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x5))))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x435 (bvuge ?x195 (_ bv1 32))))
 (= $x435 (bvuge ?x794 (_ bv1 32)))))))
 ))
 (let (($x591 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x503 (= false false)))
 (let ((?x195 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x195 (_ bv0 32))))
 (=> $x111 $x503)))))
 ))
 (let (($x609 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x195 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x195 (_ bv0 32))))
 (= $x111 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x685 (and $x609 $x591)))
 (let (($x429 (and $x685 $x24)))
 (let (($x806 (and $x429 $x723)))
 (let (($x378 (= $x806 true)))
 (let (($x75 (= $x378 true)))
 (let (($x605 (= $x75 true)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x470 (= (_ bv0 32) ?x232)))
 (let ((?x458 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x458)))
 (let (($x784 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (and $x784 $x172)))
 (let (($x755 (and $x263 $x470)))
 (let (($x830 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x830 $x755)))
 (let (($x151 (= $x164 true)))
 (let (($x528 (= $x151 true)))
 (let (($x677 (= $x528 true)))
 (let ((?x415 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x624 (= (bvand ?x415 (_ bv4294967292 32)) ?x415)))
 (let ((?x582 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x585 (= (bvand ?x582 (_ bv4294967292 32)) ?x582)))
 (let (($x348 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x582 (bvsub ?x582 (_ bv4 32))) (bvult ?x582 (bvsub ?x582 (_ bv4 32))))))
 (let (($x93 (and true $x348)))
 (let ((?x339 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x855 (= (bvand ?x339 (_ bv4294967292 32)) ?x339)))
 (let (($x13 (and $x855 $x93)))
 (let (($x766 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x415 (bvsub ?x415 (_ bv8 32))) (bvult ?x415 (bvsub ?x415 (_ bv8 32))))))
 (let (($x467 (and (and (and true $x766) $x13) $x585)))
 (let (($x103 (and $x467 $x624)))
 (let (($x227 (= $x103 true)))
 (let (($x469 (= $x227 true)))
 (let (($x740 (= $x469 true)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x631 (and true $x157)))
 (let (($x748 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x397 (and $x748 $x631)))
 (let (($x9 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x339 (bvsub ?x339 (_ bv12 32))) (bvult ?x339 (bvsub ?x339 (_ bv12 32))))))
 (let (($x558 (and (and (and true $x748) $x9) $x397)))
 (let (($x745 (= $x558 true)))
 (let (($x823 (= $x745 true)))
 (let (($x680 (= $x823 true)))
 (let (($x96 (and $x680 $x740)))
 (let (($x590 (and $x96 $x677)))
 (let (($x143 (and $x590 $x605)))
 (let (($x250 (and $x143 $x827)))
 (let ((?x187 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x207 (= ?x187 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x754 (=> $x573 $x207)))
 (let (($x729 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x150 (= $x573 $x729)))
 (let (($x503 (= false false)))
 (let (($x138 (=> $x888 $x503)))
 (let (($x83 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x147 (= $x888 $x83)))
 (let (($x779 (and $x147 $x138)))
 (let (($x746 (and $x779 $x150)))
 (let (($x331 (and $x746 $x754)))
 (let (($x183 (and $x331 $x250)))
 (let ((?x735 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x792 (= ?x735 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x474 (=> $x472 $x792)))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x200 (= $x472 $x383)))
 (let (($x614 (=> $x804 $x503)))
 (let (($x206 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x485 (= $x804 $x206)))
 (let (($x513 (and $x485 $x614)))
 (let (($x556 (and $x513 $x200)))
 (let (($x131 (and $x556 $x474)))
 (let (($x562 (and $x131 $x183)))
 (let ((?x862 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x419 (= ?x862 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x829 (=> $x810 $x419)))
 (let (($x647 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x835 (= $x810 $x647)))
 (let (($x304 (=> $x552 $x503)))
 (let (($x759 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x790 (= $x552 $x759)))
 (let (($x281 (and $x790 $x304)))
 (let (($x645 (and $x281 $x835)))
 (let (($x425 (and $x645 $x829)))
 (let (($x297 (and $x425 $x562)))
 (let ((?x495 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x68 (= ?x495 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x687 (=> $x218 $x68)))
 (let (($x651 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x192 (= $x218 $x651)))
 (let (($x223 (=> $x492 $x503)))
 (let (($x162 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x842 (= $x492 $x162)))
 (let (($x267 (and $x842 $x223)))
 (let (($x86 (and $x267 $x192)))
 (let (($x246 (and $x86 $x687)))
 (let (($x853 (and $x246 $x297)))
 (let (($x843 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x481 (and $x843 $x853)))
 (let (($x698 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x468 (and $x698 $x481)))
 (let (($x566 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x490 (and $x566 $x468)))
 (let (($x197 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x637 (and $x197 $x490)))
 (let (($x619 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x785 (and $x619 $x637)))
 (let (($x751 (and $x503 $x785)))
 (let (($x169 (= ?x187 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x39 (and $x169 $x751)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x505 (and $x132 $x39)))
 (let (($x57 (and $x503 $x505)))
 (let (($x300 (= ?x735 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x636 (and $x300 $x57)))
 (let (($x571 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x822 (and $x571 $x636)))
 (let (($x545 (and $x503 $x822)))
 (let (($x427 (= ?x862 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x366 (and $x427 $x545)))
 (let (($x477 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x479 (and $x477 $x366)))
 (let (($x450 (and $x503 $x479)))
 (let (($x837 (= ?x495 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x814 (and $x837 $x450)))
 (let (($x110 (bvugt ?x582 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x778 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x582 (_ bv3 32)))))
 (let (($x658 (=> (bvule ?x582 (bvsub (bvadd ?x582 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x778 $x110)))))))
 (let (($x186 (bvugt ?x415 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x415 (_ bv3 32)))))
 (let (($x279 (=> (bvule ?x415 (bvsub (bvadd ?x415 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x186)))))))
 (let (($x679 (bvugt ?x339 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x744 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x339 (_ bv3 32)))))
 (let (($x850 (=> (bvule ?x339 (bvsub (bvadd ?x339 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x744 $x679)))))))
 (let (($x592 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x634 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x337 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x634 $x592)))))))
 (let (($x611 (and $x337 $x850)))
 (let (($x882 (and $x611 $x279)))
 (let (($x638 (and $x882 $x658)))
 (let (($x818 (and $x638 $x814)))
 (let (($x530 (=> $x818 $x105)))
 (not $x530)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x148 (_ bv1 32))))
 (let (($x492 (= ?x148 (_ bv0 32))))
 (let (($x653 (or $x492 $x218)))
 (let ((?x382 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x810 (bvuge ?x382 (_ bv1 32))))
 (let (($x213 (and $x810 $x653)))
 (let (($x552 (= ?x382 (_ bv0 32))))
 (let (($x443 (and $x552 $x653)))
 (let (($x283 (or $x443 $x213)))
 (let ((?x188 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x188 (_ bv1 32))))
 (let (($x264 (and $x472 $x283)))
 (let (($x804 (= ?x188 (_ bv0 32))))
 (let (($x543 (and $x804 $x283)))
 (let (($x639 (or $x543 $x264)))
 (let ((?x449 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x573 (bvuge ?x449 (_ bv1 32))))
 (let (($x393 (and $x573 $x639)))
 (let (($x888 (= ?x449 (_ bv0 32))))
 (let (($x483 (and $x888 $x639)))
 (let (($x844 (or $x483 $x393)))
 (let (($x410 (or false $x844)))
 (let (($x616 (= $x410 true)))
 (let (($x105 (= $x616 true)))
 (let ((?x793 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x540 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x497 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x851 (concat ?x228 (concat ?x497 (concat ?x540 ?x793)))))
 (let (($x377 (= ?x851 input.dst.llvm-%m)))
 (let (($x329 (= $x377 true)))
 (let (($x827 (= $x329 true)))
 (let (($x723 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem ?x239))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x239 (_ bv2 32))) ?x8))))
 (let ((?x195 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x435 (bvuge ?x195 (_ bv1 32))))
 (=> $x435 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x5))))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x195 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x435 (bvuge ?x195 (_ bv1 32))))
 (= $x435 (bvuge ?x794 (_ bv1 32)))))))
 ))
 (let (($x591 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x503 (= false false)))
 (let ((?x195 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x195 (_ bv0 32))))
 (=> $x111 $x503)))))
 ))
 (let (($x609 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x195 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x195 (_ bv0 32))))
 (= $x111 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x685 (and $x609 $x591)))
 (let (($x429 (and $x685 $x24)))
 (let (($x806 (and $x429 $x723)))
 (let (($x378 (= $x806 true)))
 (let (($x75 (= $x378 true)))
 (let (($x605 (= $x75 true)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x470 (= (_ bv0 32) ?x232)))
 (let ((?x458 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x458)))
 (let (($x784 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (and $x784 $x172)))
 (let (($x755 (and $x263 $x470)))
 (let (($x830 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x830 $x755)))
 (let (($x151 (= $x164 true)))
 (let (($x528 (= $x151 true)))
 (let (($x677 (= $x528 true)))
 (let ((?x415 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x624 (= (bvand ?x415 (_ bv4294967292 32)) ?x415)))
 (let ((?x582 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x585 (= (bvand ?x582 (_ bv4294967292 32)) ?x582)))
 (let (($x348 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x582 (bvsub ?x582 (_ bv4 32))) (bvult ?x582 (bvsub ?x582 (_ bv4 32))))))
 (let (($x93 (and true $x348)))
 (let ((?x339 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x855 (= (bvand ?x339 (_ bv4294967292 32)) ?x339)))
 (let (($x13 (and $x855 $x93)))
 (let (($x766 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x415 (bvsub ?x415 (_ bv8 32))) (bvult ?x415 (bvsub ?x415 (_ bv8 32))))))
 (let (($x467 (and (and (and true $x766) $x13) $x585)))
 (let (($x103 (and $x467 $x624)))
 (let (($x227 (= $x103 true)))
 (let (($x469 (= $x227 true)))
 (let (($x740 (= $x469 true)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x631 (and true $x157)))
 (let (($x748 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x397 (and $x748 $x631)))
 (let (($x9 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x339 (bvsub ?x339 (_ bv12 32))) (bvult ?x339 (bvsub ?x339 (_ bv12 32))))))
 (let (($x558 (and (and (and true $x748) $x9) $x397)))
 (let (($x745 (= $x558 true)))
 (let (($x823 (= $x745 true)))
 (let (($x680 (= $x823 true)))
 (let (($x96 (and $x680 $x740)))
 (let (($x590 (and $x96 $x677)))
 (let (($x143 (and $x590 $x605)))
 (let (($x250 (and $x143 $x827)))
 (let ((?x187 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x207 (= ?x187 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x754 (=> $x573 $x207)))
 (let (($x729 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x150 (= $x573 $x729)))
 (let (($x503 (= false false)))
 (let (($x138 (=> $x888 $x503)))
 (let (($x83 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x147 (= $x888 $x83)))
 (let (($x779 (and $x147 $x138)))
 (let (($x746 (and $x779 $x150)))
 (let (($x331 (and $x746 $x754)))
 (let (($x183 (and $x331 $x250)))
 (let ((?x735 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x792 (= ?x735 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x474 (=> $x472 $x792)))
 (let (($x383 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x200 (= $x472 $x383)))
 (let (($x614 (=> $x804 $x503)))
 (let (($x206 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x485 (= $x804 $x206)))
 (let (($x513 (and $x485 $x614)))
 (let (($x556 (and $x513 $x200)))
 (let (($x131 (and $x556 $x474)))
 (let (($x562 (and $x131 $x183)))
 (let ((?x862 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x419 (= ?x862 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x829 (=> $x810 $x419)))
 (let (($x647 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x835 (= $x810 $x647)))
 (let (($x304 (=> $x552 $x503)))
 (let (($x759 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x790 (= $x552 $x759)))
 (let (($x281 (and $x790 $x304)))
 (let (($x645 (and $x281 $x835)))
 (let (($x425 (and $x645 $x829)))
 (let (($x297 (and $x425 $x562)))
 (let ((?x495 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x68 (= ?x495 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x687 (=> $x218 $x68)))
 (let (($x651 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x192 (= $x218 $x651)))
 (let (($x223 (=> $x492 $x503)))
 (let (($x162 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x842 (= $x492 $x162)))
 (let (($x267 (and $x842 $x223)))
 (let (($x86 (and $x267 $x192)))
 (let (($x246 (and $x86 $x687)))
 (let (($x853 (and $x246 $x297)))
 (let (($x843 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x481 (and $x843 $x853)))
 (let (($x698 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x468 (and $x698 $x481)))
 (let (($x566 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x490 (and $x566 $x468)))
 (let (($x197 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x637 (and $x197 $x490)))
 (let (($x619 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x785 (and $x619 $x637)))
 (let (($x751 (and $x503 $x785)))
 (let (($x169 (= ?x187 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x39 (and $x169 $x751)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x505 (and $x132 $x39)))
 (let (($x57 (and $x503 $x505)))
 (let (($x300 (= ?x735 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x636 (and $x300 $x57)))
 (let (($x571 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x822 (and $x571 $x636)))
 (let (($x545 (and $x503 $x822)))
 (let (($x427 (= ?x862 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x366 (and $x427 $x545)))
 (let (($x477 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x479 (and $x477 $x366)))
 (let (($x450 (and $x503 $x479)))
 (let (($x837 (= ?x495 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x814 (and $x837 $x450)))
 (let (($x110 (bvugt ?x582 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x778 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x582 (_ bv3 32)))))
 (let (($x658 (=> (bvule ?x582 (bvsub (bvadd ?x582 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x778 $x110)))))))
 (let (($x186 (bvugt ?x415 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x415 (_ bv3 32)))))
 (let (($x279 (=> (bvule ?x415 (bvsub (bvadd ?x415 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x186)))))))
 (let (($x679 (bvugt ?x339 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x744 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x339 (_ bv3 32)))))
 (let (($x850 (=> (bvule ?x339 (bvsub (bvadd ?x339 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x744 $x679)))))))
 (let (($x592 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x634 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x337 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x634 $x592)))))))
 (let (($x611 (and $x337 $x850)))
 (let (($x882 (and $x611 $x279)))
 (let (($x638 (and $x882 $x658)))
 (let (($x818 (and $x638 $x814)))
 (let (($x530 (=> $x818 $x105)))
 (not $x530)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 228 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x843 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x258 (bvmul (_ bv4294967295 32) ?x843)))
 (let ((?x396 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x743 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x396)))
 (let ((?x109 (bvadd ?x743 ?x258)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x541 (concat ?x114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x176 (bvadd ?x110 (_ bv3 32))))
 (let ((?x726 (concat (select input.dst.llvm-mem ?x176) (concat ?x204 ?x541))))
 (let ((?x173 (bvmul (_ bv4294967295 32) ?x726)))
 (let ((?x493 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x731 (concat ?x493 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x765 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x850 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x29 (bvadd ?x850 (_ bv3 32))))
 (let ((?x405 (concat (select input.dst.llvm-mem ?x29) (concat ?x765 ?x731))))
 (let ((?x546 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x73 (concat ?x546 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x886 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x584 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x679 (bvadd ?x584 (_ bv3 32))))
 (let ((?x775 (concat (select input.dst.llvm-mem ?x679) (concat ?x886 ?x73))))
 (let ((?x852 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x852)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x426)))
 (let ((?x395 (bvadd (bvadd (bvadd ?x381 ?x775) ?x405) ?x173)))
 (let (($x416 (= ?x395 ?x109)))
 (let (($x849 (= $x416 true)))
 (let (($x811 (= $x849 true)))
 (let ((?x656 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x623 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x318 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x269 (concat ?x318 (concat ?x623 (concat ?x276 ?x656)))))
 (let (($x889 (= ?x269 input.dst.llvm-%m)))
 (let (($x635 (= $x889 true)))
 (let (($x706 (= $x635 true)))
 (let (($x714 (= input.dst.llvm-%m ?x269)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x532 (= (_ bv0 32) ?x97)))
 (let ((?x670 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x374 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x670)))
 (let (($x795 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x460 (and $x795 $x374)))
 (let (($x669 (and $x460 $x532)))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x805 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd ?x805 (_ bv1 32))) (select input.dst.llvm-mem ?x805))))
 (let ((?x672 (concat (select input.dst.llvm-mem (bvadd ?x805 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x805 (_ bv2 32))) ?x820))))
 (let ((?x583 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x583 (_ bv1 32))))
 (=> $x104 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x672))))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x583 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x583 (_ bv1 32))))
 (= $x104 (bvuge ?x79 (_ bv1 32)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x187 (= false false)))
 (let ((?x583 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x711 (= ?x583 (_ bv0 32))))
 (=> $x711 $x187)))))
 ))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x711 (= ?x583 (_ bv0 32))))
 (= $x711 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x703 (and $x440 $x260)))
 (let (($x509 (and $x703 $x376)))
 (let (($x508 (and $x509 $x53)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x411 (= (bvand ?x850 (_ bv4294967292 32)) ?x850)))
 (let (($x235 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x850 (bvsub ?x850 (_ bv4 32))) (bvult ?x850 (bvsub ?x850 (_ bv4 32))))))
 (let (($x527 (and true $x235)))
 (let (($x435 (= (bvand ?x584 (_ bv4294967292 32)) ?x584)))
 (let (($x255 (and $x435 $x527)))
 (let (($x76 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv8 32))) (bvult ?x110 (bvsub ?x110 (_ bv8 32))))))
 (let (($x564 (and (and (and true $x76) $x255) $x411)))
 (let (($x497 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x21 (and true $x497)))
 (let (($x498 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x540 (and $x498 $x21)))
 (let (($x605 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x584 (bvsub ?x584 (_ bv12 32))) (bvult ?x584 (bvsub ?x584 (_ bv12 32))))))
 (let (($x347 (and (and (and true $x498) $x605) $x540)))
 (let (($x461 (and (and (and (and (and (and $x347 $x564) $x284) $x183) $x508) $x669) $x714)))
 (let (($x257 (= $x461 true)))
 (let (($x158 (= $x257 true)))
 (let (($x512 (= $x158 true)))
 (let (($x851 (= $x347 true)))
 (let (($x377 (= $x851 true)))
 (let (($x329 (= $x377 true)))
 (let (($x404 (and $x564 $x284)))
 (let (($x8 (= $x404 true)))
 (let (($x834 (= $x8 true)))
 (let (($x5 (= $x834 true)))
 (let (($x827 (and $x5 $x329)))
 (let (($x191 (and $x827 $x512)))
 (let (($x704 (and $x191 $x706)))
 (let ((?x200 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x200 (_ bv1 32))))
 (let ((?x748 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x538 (bvuge ?x748 (_ bv1 32))))
 (let (($x521 (and $x538 $x83)))
 (let ((?x117 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x117 (_ bv1 32))))
 (let (($x78 (and $x134 $x521)))
 (let ((?x458 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x458 (_ bv1 32))))
 (let (($x312 (and $x590 $x78)))
 (let (($x145 (and $x312 $x704)))
 (let ((?x304 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x195 (= ?x304 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x111 (=> $x590 $x195)))
 (let (($x677 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x160 (= $x590 $x677)))
 (let (($x187 (= false false)))
 (let (($x172 (= ?x458 (_ bv0 32))))
 (let (($x232 (=> $x172 $x187)))
 (let (($x830 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x263 (= $x172 $x830)))
 (let (($x470 (and $x263 $x232)))
 (let (($x721 (and $x470 $x160)))
 (let (($x201 (and $x721 $x111)))
 (let (($x861 (and $x201 $x145)))
 (let ((?x192 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x467 (= ?x192 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x182 (=> $x134 $x467)))
 (let (($x13 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x482 (= $x134 $x13)))
 (let (($x708 (= ?x117 (_ bv0 32))))
 (let (($x299 (=> $x708 $x187)))
 (let (($x684 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x855 (= $x708 $x684)))
 (let (($x311 (and $x855 $x299)))
 (let (($x585 (and $x311 $x482)))
 (let (($x624 (and $x585 $x182)))
 (let (($x349 (and $x624 $x861)))
 (let (($x631 (= ?x843 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x397 (=> $x538 $x631)))
 (let (($x243 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x761 (= $x538 $x243)))
 (let (($x342 (= ?x748 (_ bv0 32))))
 (let (($x839 (=> $x342 $x187)))
 (let (($x692 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x48 (= $x342 $x692)))
 (let (($x500 (and $x48 $x839)))
 (let (($x157 (and $x500 $x761)))
 (let (($x558 (and $x157 $x397)))
 (let (($x298 (and $x558 $x349)))
 (let (($x779 (= ?x396 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x573 (=> $x83 $x779)))
 (let (($x137 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x147 (= $x83 $x137)))
 (let (($x556 (= ?x200 (_ bv0 32))))
 (let (($x792 (=> $x556 $x187)))
 (let (($x472 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x309 (= $x556 $x472)))
 (let (($x474 (and $x309 $x792)))
 (let (($x138 (and $x474 $x147)))
 (let (($x729 (and $x138 $x573)))
 (let (($x54 (and $x729 $x298)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x112 (and $x188 $x54)))
 (let (($x425 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x442 (and $x425 $x112)))
 (let (($x419 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x632 (and $x419 $x442)))
 (let (($x645 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x560 (and $x645 $x632)))
 (let (($x647 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x262 (and $x647 $x560)))
 (let (($x107 (and $x187 $x262)))
 (let (($x281 (= ?x304 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x494 (and $x281 $x107)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x70 (and $x68 $x494)))
 (let (($x696 (and $x187 $x70)))
 (let (($x86 (= ?x192 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x536 (and $x86 $x696)))
 (let (($x492 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x598 (and $x492 $x536)))
 (let (($x767 (and $x187 $x598)))
 (let (($x432 (= ?x843 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x95 (and $x432 $x767)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x14 (and $x169 $x95)))
 (let (($x270 (and $x187 $x14)))
 (let (($x132 (= ?x396 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x135 (and $x132 $x270)))
 (let (($x504 (bvugt ?x850 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x606 (=> (bvule ?x850 (bvsub (bvadd ?x850 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x285 $x504)))))))
 (let (($x860 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x618 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x799 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x618 $x860)))))))
 (let (($x674 (bvugt ?x584 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x679)))
 (let (($x646 (=> (bvule ?x584 (bvsub (bvadd ?x584 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x674)))))))
 (let (($x436 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x445 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x339 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x445)))
 (let (($x634 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x339 $x436)))))))
 (let (($x744 (and $x634 $x646)))
 (let (($x344 (and $x744 $x799)))
 (let (($x592 (and $x344 $x606)))
 (let (($x828 (and $x592 $x135)))
 (let (($x406 (=> $x828 $x811)))
 (not $x406))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x843 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x258 (bvmul (_ bv4294967295 32) ?x843)))
 (let ((?x396 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x743 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x396)))
 (let ((?x109 (bvadd ?x743 ?x258)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x541 (concat ?x114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x176 (bvadd ?x110 (_ bv3 32))))
 (let ((?x726 (concat (select input.dst.llvm-mem ?x176) (concat ?x204 ?x541))))
 (let ((?x173 (bvmul (_ bv4294967295 32) ?x726)))
 (let ((?x493 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x731 (concat ?x493 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x765 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x850 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x29 (bvadd ?x850 (_ bv3 32))))
 (let ((?x405 (concat (select input.dst.llvm-mem ?x29) (concat ?x765 ?x731))))
 (let ((?x546 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x73 (concat ?x546 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x886 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x584 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x679 (bvadd ?x584 (_ bv3 32))))
 (let ((?x775 (concat (select input.dst.llvm-mem ?x679) (concat ?x886 ?x73))))
 (let ((?x852 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x852)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x426)))
 (let ((?x395 (bvadd (bvadd (bvadd ?x381 ?x775) ?x405) ?x173)))
 (let (($x416 (= ?x395 ?x109)))
 (let (($x849 (= $x416 true)))
 (let (($x811 (= $x849 true)))
 (let ((?x656 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x623 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x318 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x269 (concat ?x318 (concat ?x623 (concat ?x276 ?x656)))))
 (let (($x889 (= ?x269 input.dst.llvm-%m)))
 (let (($x635 (= $x889 true)))
 (let (($x706 (= $x635 true)))
 (let (($x714 (= input.dst.llvm-%m ?x269)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x532 (= (_ bv0 32) ?x97)))
 (let ((?x670 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x374 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x670)))
 (let (($x795 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x460 (and $x795 $x374)))
 (let (($x669 (and $x460 $x532)))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x805 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd ?x805 (_ bv1 32))) (select input.dst.llvm-mem ?x805))))
 (let ((?x672 (concat (select input.dst.llvm-mem (bvadd ?x805 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x805 (_ bv2 32))) ?x820))))
 (let ((?x583 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x583 (_ bv1 32))))
 (=> $x104 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x672))))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x583 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x583 (_ bv1 32))))
 (= $x104 (bvuge ?x79 (_ bv1 32)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x187 (= false false)))
 (let ((?x583 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x711 (= ?x583 (_ bv0 32))))
 (=> $x711 $x187)))))
 ))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x583 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x711 (= ?x583 (_ bv0 32))))
 (= $x711 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x703 (and $x440 $x260)))
 (let (($x509 (and $x703 $x376)))
 (let (($x508 (and $x509 $x53)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x411 (= (bvand ?x850 (_ bv4294967292 32)) ?x850)))
 (let (($x235 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x850 (bvsub ?x850 (_ bv4 32))) (bvult ?x850 (bvsub ?x850 (_ bv4 32))))))
 (let (($x527 (and true $x235)))
 (let (($x435 (= (bvand ?x584 (_ bv4294967292 32)) ?x584)))
 (let (($x255 (and $x435 $x527)))
 (let (($x76 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv8 32))) (bvult ?x110 (bvsub ?x110 (_ bv8 32))))))
 (let (($x564 (and (and (and true $x76) $x255) $x411)))
 (let (($x497 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x21 (and true $x497)))
 (let (($x498 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x540 (and $x498 $x21)))
 (let (($x605 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x584 (bvsub ?x584 (_ bv12 32))) (bvult ?x584 (bvsub ?x584 (_ bv12 32))))))
 (let (($x347 (and (and (and true $x498) $x605) $x540)))
 (let (($x461 (and (and (and (and (and (and $x347 $x564) $x284) $x183) $x508) $x669) $x714)))
 (let (($x257 (= $x461 true)))
 (let (($x158 (= $x257 true)))
 (let (($x512 (= $x158 true)))
 (let (($x851 (= $x347 true)))
 (let (($x377 (= $x851 true)))
 (let (($x329 (= $x377 true)))
 (let (($x404 (and $x564 $x284)))
 (let (($x8 (= $x404 true)))
 (let (($x834 (= $x8 true)))
 (let (($x5 (= $x834 true)))
 (let (($x827 (and $x5 $x329)))
 (let (($x191 (and $x827 $x512)))
 (let (($x704 (and $x191 $x706)))
 (let ((?x200 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x200 (_ bv1 32))))
 (let ((?x748 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x538 (bvuge ?x748 (_ bv1 32))))
 (let (($x521 (and $x538 $x83)))
 (let ((?x117 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x117 (_ bv1 32))))
 (let (($x78 (and $x134 $x521)))
 (let ((?x458 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x590 (bvuge ?x458 (_ bv1 32))))
 (let (($x312 (and $x590 $x78)))
 (let (($x145 (and $x312 $x704)))
 (let ((?x304 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x195 (= ?x304 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x111 (=> $x590 $x195)))
 (let (($x677 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x160 (= $x590 $x677)))
 (let (($x187 (= false false)))
 (let (($x172 (= ?x458 (_ bv0 32))))
 (let (($x232 (=> $x172 $x187)))
 (let (($x830 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x263 (= $x172 $x830)))
 (let (($x470 (and $x263 $x232)))
 (let (($x721 (and $x470 $x160)))
 (let (($x201 (and $x721 $x111)))
 (let (($x861 (and $x201 $x145)))
 (let ((?x192 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x467 (= ?x192 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x182 (=> $x134 $x467)))
 (let (($x13 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x482 (= $x134 $x13)))
 (let (($x708 (= ?x117 (_ bv0 32))))
 (let (($x299 (=> $x708 $x187)))
 (let (($x684 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x855 (= $x708 $x684)))
 (let (($x311 (and $x855 $x299)))
 (let (($x585 (and $x311 $x482)))
 (let (($x624 (and $x585 $x182)))
 (let (($x349 (and $x624 $x861)))
 (let (($x631 (= ?x843 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x397 (=> $x538 $x631)))
 (let (($x243 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x761 (= $x538 $x243)))
 (let (($x342 (= ?x748 (_ bv0 32))))
 (let (($x839 (=> $x342 $x187)))
 (let (($x692 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x48 (= $x342 $x692)))
 (let (($x500 (and $x48 $x839)))
 (let (($x157 (and $x500 $x761)))
 (let (($x558 (and $x157 $x397)))
 (let (($x298 (and $x558 $x349)))
 (let (($x779 (= ?x396 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x573 (=> $x83 $x779)))
 (let (($x137 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x147 (= $x83 $x137)))
 (let (($x556 (= ?x200 (_ bv0 32))))
 (let (($x792 (=> $x556 $x187)))
 (let (($x472 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x309 (= $x556 $x472)))
 (let (($x474 (and $x309 $x792)))
 (let (($x138 (and $x474 $x147)))
 (let (($x729 (and $x138 $x573)))
 (let (($x54 (and $x729 $x298)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x112 (and $x188 $x54)))
 (let (($x425 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x442 (and $x425 $x112)))
 (let (($x419 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x632 (and $x419 $x442)))
 (let (($x645 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x560 (and $x645 $x632)))
 (let (($x647 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x262 (and $x647 $x560)))
 (let (($x107 (and $x187 $x262)))
 (let (($x281 (= ?x304 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x494 (and $x281 $x107)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x70 (and $x68 $x494)))
 (let (($x696 (and $x187 $x70)))
 (let (($x86 (= ?x192 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x536 (and $x86 $x696)))
 (let (($x492 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x598 (and $x492 $x536)))
 (let (($x767 (and $x187 $x598)))
 (let (($x432 (= ?x843 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x95 (and $x432 $x767)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x14 (and $x169 $x95)))
 (let (($x270 (and $x187 $x14)))
 (let (($x132 (= ?x396 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x135 (and $x132 $x270)))
 (let (($x504 (bvugt ?x850 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x606 (=> (bvule ?x850 (bvsub (bvadd ?x850 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x285 $x504)))))))
 (let (($x860 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x618 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x799 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x618 $x860)))))))
 (let (($x674 (bvugt ?x584 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x679)))
 (let (($x646 (=> (bvule ?x584 (bvsub (bvadd ?x584 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x674)))))))
 (let (($x436 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x445 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x339 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x445)))
 (let (($x634 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x339 $x436)))))))
 (let (($x744 (and $x634 $x646)))
 (let (($x344 (and $x744 $x799)))
 (let (($x592 (and $x344 $x606)))
 (let (($x828 (and $x592 $x135)))
 (let (($x406 (=> $x828 $x811)))
 (not $x406))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x518 (bvmul (_ bv4294967295 32) ?x188)))
 (let ((?x772 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x518)))
 (let ((?x607 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x27 (concat ?x607 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x126 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x126 (_ bv3 32))))
 (let ((?x50 (concat (select input.dst.llvm-mem ?x6) (concat ?x93 ?x27))))
 (let ((?x207 (bvmul (_ bv4294967295 32) ?x50)))
 (let ((?x469 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x740 (concat ?x469 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x477 (bvadd ?x176 (_ bv3 32))))
 (let ((?x745 (concat (select input.dst.llvm-mem ?x477) (concat ?x164 ?x740))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x130 (concat ?x51 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x709 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x339 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x523 (bvadd ?x339 (_ bv3 32))))
 (let ((?x578 (concat (select input.dst.llvm-mem ?x523) (concat ?x709 ?x130))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x798 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x245)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x798)))
 (let ((?x171 (bvadd (bvadd (bvadd ?x414 ?x578) ?x745) ?x207)))
 (let (($x206 (= ?x171 ?x772)))
 (let (($x485 (= $x206 true)))
 (let (($x131 (= $x485 true)))
 (let ((?x568 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x604 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x884 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x884 (concat ?x224 (concat ?x604 ?x568)))))
 (let (($x193 (= ?x94 input.dst.llvm-%m)))
 (let (($x694 (= $x193 true)))
 (let (($x175 (= $x694 true)))
 (let (($x434 (= input.dst.llvm-%m ?x94)))
 (let ((?x637 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x785 (= (_ bv0 32) ?x637)))
 (let ((?x853 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x481 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x853)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x490 (and $x297 $x481)))
 (let (($x751 (and $x490 $x785)))
 (let (($x629 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x844 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x660 (concat (select input.dst.llvm-mem (bvadd ?x844 (_ bv1 32))) (select input.dst.llvm-mem ?x844))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x844 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x844 (_ bv2 32))) ?x660))))
 (let ((?x503 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x882 (bvuge ?x503 (_ bv1 32))))
 (=> $x882 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x12))))))))
 ))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x503 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x882 (bvuge ?x503 (_ bv1 32))))
 (= $x882 (bvuge ?x246 (_ bv1 32)))))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x503 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x503 (_ bv0 32))))
 (=> $x622 $x304)))))
 ))
 (let (($x842 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x503 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x503 (_ bv0 32))))
 (= $x622 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x56 (and $x842 $x619)))
 (let (($x822 (and $x56 $x57)))
 (let (($x468 (and $x822 $x629)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (= (bvand ?x126 (_ bv4294967292 32)) ?x126)))
 (let (($x819 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x288 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x316 (and true $x288)))
 (let (($x366 (= (bvand ?x339 (_ bv4294967292 32)) ?x339)))
 (let (($x824 (and $x366 $x316)))
 (let (($x376 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x126 (bvsub ?x126 (_ bv8 32))) (bvult ?x126 (bvsub ?x126 (_ bv8 32))))))
 (let (($x672 (and (and (and true $x376) $x824) $x819)))
 (let (($x678 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x276 (and true $x678)))
 (let (($x374 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x656 (and $x374 $x276)))
 (let (($x189 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x339 (bvsub ?x339 (_ bv12 32))) (bvult ?x339 (bvsub ?x339 (_ bv12 32))))))
 (let (($x269 (and (and (and true $x374) $x189) $x656)))
 (let (($x885 (and (and (and (and (and (and $x269 $x672) $x399) $x191) $x468) $x751) $x434)))
 (let (($x174 (= $x885 true)))
 (let (($x113 (= $x174 true)))
 (let (($x273 (= $x113 true)))
 (let (($x714 (= $x269 true)))
 (let (($x461 (= $x714 true)))
 (let (($x257 (= $x461 true)))
 (let (($x53 (and $x672 $x399)))
 (let (($x508 (= $x53 true)))
 (let (($x357 (= $x508 true)))
 (let (($x795 (= $x357 true)))
 (let (($x158 (and $x795 $x257)))
 (let (($x360 (and $x158 $x273)))
 (let (($x153 (and $x360 $x175)))
 (let ((?x482 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x585 (= ?x482 (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x312 (_ bv1 32))))
 (let (($x440 (and $x343 $x585)))
 (let ((?x8 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x8 (_ bv1 32))))
 (let (($x757 (and $x605 $x440)))
 (let ((?x38 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x636 (bvuge ?x38 (_ bv1 32))))
 (let (($x260 (and $x636 $x757)))
 (let (($x85 (and $x260 $x153)))
 (let ((?x839 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x79 (= ?x839 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x487 (=> $x636 $x79)))
 (let (($x815 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x66 (= $x636 $x815)))
 (let (($x304 (= false false)))
 (let (($x241 (= ?x38 (_ bv0 32))))
 (let (($x183 (=> $x241 $x304)))
 (let (($x329 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x250 (= $x241 $x329)))
 (let (($x363 (and $x250 $x183)))
 (let (($x661 (and $x363 $x66)))
 (let (($x352 (and $x661 $x487)))
 (let (($x525 (and $x352 $x85)))
 (let ((?x147 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x143 (= ?x147 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x228 (=> $x605 $x143)))
 (let (($x75 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x55 (= $x605 $x75)))
 (let (($x834 (= ?x8 (_ bv0 32))))
 (let (($x537 (=> $x834 $x304)))
 (let (($x284 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x5 (= $x834 $x284)))
 (let (($x498 (and $x5 $x537)))
 (let (($x387 (and $x498 $x55)))
 (let (($x184 (and $x387 $x228)))
 (let (($x881 (and $x184 $x525)))
 (let (($x429 (= ?x188 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x235 (=> $x343 $x429)))
 (let (($x435 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x15 (= $x343 $x435)))
 (let (($x621 (= ?x312 (_ bv0 32))))
 (let (($x358 (=> $x621 $x304)))
 (let (($x521 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x794 (= $x621 $x521)))
 (let (($x609 (and $x794 $x358)))
 (let (($x24 (and $x609 $x15)))
 (let (($x527 (and $x24 $x235)))
 (let (($x370 (and $x527 $x881)))
 (let ((?x561 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x470 (= ?x561 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x830 (bvuge ?x482 (_ bv1 32))))
 (let (($x590 (=> $x830 $x470)))
 (let (($x96 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x263 (= $x830 $x96)))
 (let (($x467 (=> $x585 $x304)))
 (let (($x134 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x496 (= $x585 $x134)))
 (let (($x182 (and $x496 $x467)))
 (let (($x232 (and $x182 $x263)))
 (let (($x677 (and $x232 $x590)))
 (let (($x19 (and $x677 $x370)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x554 (and $x117 $x19)))
 (let (($x558 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x369 (and $x558 $x554)))
 (let (($x631 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x290 (and $x631 $x369)))
 (let (($x157 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x58 (and $x157 $x290)))
 (let (($x243 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x28 (and $x243 $x58)))
 (let (($x320 (and $x304 $x28)))
 (let (($x500 (= ?x839 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x762 (and $x500 $x320)))
 (let (($x779 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x327 (and $x779 $x762)))
 (let (($x572 (and $x304 $x327)))
 (let (($x138 (= ?x147 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x185 (and $x138 $x572)))
 (let (($x556 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x816 (and $x556 $x185)))
 (let (($x673 (and $x304 $x816)))
 (let (($x383 (= ?x188 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x514 (and $x383 $x673)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x69 (and $x281 $x514)))
 (let (($x296 (and $x304 $x69)))
 (let (($x68 (= ?x561 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x364 (and $x68 $x296)))
 (let (($x643 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x519 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x477)))
 (let (($x132 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x519 $x643)))))))
 (let (($x878 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x247 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x300 $x878)))))))
 (let (($x384 (bvugt ?x339 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x574 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x523)))
 (let (($x84 (=> (bvule ?x339 (bvsub (bvadd ?x339 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x574 $x384)))))))
 (let (($x336 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x584 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x584)))
 (let (($x337 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x279 $x336)))))))
 (let (($x735 (and $x337 $x84)))
 (let (($x124 (and $x735 $x247)))
 (let (($x658 (and $x124 $x132)))
 (let (($x880 (and $x658 $x364)))
 (let (($x650 (=> $x880 $x131)))
 (not $x650)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x518 (bvmul (_ bv4294967295 32) ?x188)))
 (let ((?x772 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x518)))
 (let ((?x607 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x27 (concat ?x607 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x126 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x126 (_ bv3 32))))
 (let ((?x50 (concat (select input.dst.llvm-mem ?x6) (concat ?x93 ?x27))))
 (let ((?x207 (bvmul (_ bv4294967295 32) ?x50)))
 (let ((?x469 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x740 (concat ?x469 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x477 (bvadd ?x176 (_ bv3 32))))
 (let ((?x745 (concat (select input.dst.llvm-mem ?x477) (concat ?x164 ?x740))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x130 (concat ?x51 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x709 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x339 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x523 (bvadd ?x339 (_ bv3 32))))
 (let ((?x578 (concat (select input.dst.llvm-mem ?x523) (concat ?x709 ?x130))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x798 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x245)))
 (let ((?x414 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x798)))
 (let ((?x171 (bvadd (bvadd (bvadd ?x414 ?x578) ?x745) ?x207)))
 (let (($x206 (= ?x171 ?x772)))
 (let (($x485 (= $x206 true)))
 (let (($x131 (= $x485 true)))
 (let ((?x568 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x604 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x884 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x884 (concat ?x224 (concat ?x604 ?x568)))))
 (let (($x193 (= ?x94 input.dst.llvm-%m)))
 (let (($x694 (= $x193 true)))
 (let (($x175 (= $x694 true)))
 (let (($x434 (= input.dst.llvm-%m ?x94)))
 (let ((?x637 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x785 (= (_ bv0 32) ?x637)))
 (let ((?x853 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x481 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x853)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x490 (and $x297 $x481)))
 (let (($x751 (and $x490 $x785)))
 (let (($x629 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x844 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x660 (concat (select input.dst.llvm-mem (bvadd ?x844 (_ bv1 32))) (select input.dst.llvm-mem ?x844))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x844 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x844 (_ bv2 32))) ?x660))))
 (let ((?x503 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x882 (bvuge ?x503 (_ bv1 32))))
 (=> $x882 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x12))))))))
 ))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x503 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x882 (bvuge ?x503 (_ bv1 32))))
 (= $x882 (bvuge ?x246 (_ bv1 32)))))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x503 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x503 (_ bv0 32))))
 (=> $x622 $x304)))))
 ))
 (let (($x842 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x503 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x503 (_ bv0 32))))
 (= $x622 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x56 (and $x842 $x619)))
 (let (($x822 (and $x56 $x57)))
 (let (($x468 (and $x822 $x629)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (= (bvand ?x126 (_ bv4294967292 32)) ?x126)))
 (let (($x819 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x288 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x316 (and true $x288)))
 (let (($x366 (= (bvand ?x339 (_ bv4294967292 32)) ?x339)))
 (let (($x824 (and $x366 $x316)))
 (let (($x376 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x126 (bvsub ?x126 (_ bv8 32))) (bvult ?x126 (bvsub ?x126 (_ bv8 32))))))
 (let (($x672 (and (and (and true $x376) $x824) $x819)))
 (let (($x678 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x276 (and true $x678)))
 (let (($x374 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x656 (and $x374 $x276)))
 (let (($x189 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x339 (bvsub ?x339 (_ bv12 32))) (bvult ?x339 (bvsub ?x339 (_ bv12 32))))))
 (let (($x269 (and (and (and true $x374) $x189) $x656)))
 (let (($x885 (and (and (and (and (and (and $x269 $x672) $x399) $x191) $x468) $x751) $x434)))
 (let (($x174 (= $x885 true)))
 (let (($x113 (= $x174 true)))
 (let (($x273 (= $x113 true)))
 (let (($x714 (= $x269 true)))
 (let (($x461 (= $x714 true)))
 (let (($x257 (= $x461 true)))
 (let (($x53 (and $x672 $x399)))
 (let (($x508 (= $x53 true)))
 (let (($x357 (= $x508 true)))
 (let (($x795 (= $x357 true)))
 (let (($x158 (and $x795 $x257)))
 (let (($x360 (and $x158 $x273)))
 (let (($x153 (and $x360 $x175)))
 (let ((?x482 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x585 (= ?x482 (_ bv0 32))))
 (let ((?x312 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (bvuge ?x312 (_ bv1 32))))
 (let (($x440 (and $x343 $x585)))
 (let ((?x8 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x8 (_ bv1 32))))
 (let (($x757 (and $x605 $x440)))
 (let ((?x38 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x636 (bvuge ?x38 (_ bv1 32))))
 (let (($x260 (and $x636 $x757)))
 (let (($x85 (and $x260 $x153)))
 (let ((?x839 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x79 (= ?x839 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x487 (=> $x636 $x79)))
 (let (($x815 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x66 (= $x636 $x815)))
 (let (($x304 (= false false)))
 (let (($x241 (= ?x38 (_ bv0 32))))
 (let (($x183 (=> $x241 $x304)))
 (let (($x329 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x250 (= $x241 $x329)))
 (let (($x363 (and $x250 $x183)))
 (let (($x661 (and $x363 $x66)))
 (let (($x352 (and $x661 $x487)))
 (let (($x525 (and $x352 $x85)))
 (let ((?x147 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x143 (= ?x147 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x228 (=> $x605 $x143)))
 (let (($x75 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x55 (= $x605 $x75)))
 (let (($x834 (= ?x8 (_ bv0 32))))
 (let (($x537 (=> $x834 $x304)))
 (let (($x284 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x5 (= $x834 $x284)))
 (let (($x498 (and $x5 $x537)))
 (let (($x387 (and $x498 $x55)))
 (let (($x184 (and $x387 $x228)))
 (let (($x881 (and $x184 $x525)))
 (let (($x429 (= ?x188 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x235 (=> $x343 $x429)))
 (let (($x435 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x15 (= $x343 $x435)))
 (let (($x621 (= ?x312 (_ bv0 32))))
 (let (($x358 (=> $x621 $x304)))
 (let (($x521 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x794 (= $x621 $x521)))
 (let (($x609 (and $x794 $x358)))
 (let (($x24 (and $x609 $x15)))
 (let (($x527 (and $x24 $x235)))
 (let (($x370 (and $x527 $x881)))
 (let ((?x561 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x470 (= ?x561 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x830 (bvuge ?x482 (_ bv1 32))))
 (let (($x590 (=> $x830 $x470)))
 (let (($x96 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x263 (= $x830 $x96)))
 (let (($x467 (=> $x585 $x304)))
 (let (($x134 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x496 (= $x585 $x134)))
 (let (($x182 (and $x496 $x467)))
 (let (($x232 (and $x182 $x263)))
 (let (($x677 (and $x232 $x590)))
 (let (($x19 (and $x677 $x370)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x554 (and $x117 $x19)))
 (let (($x558 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x369 (and $x558 $x554)))
 (let (($x631 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x290 (and $x631 $x369)))
 (let (($x157 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x58 (and $x157 $x290)))
 (let (($x243 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x28 (and $x243 $x58)))
 (let (($x320 (and $x304 $x28)))
 (let (($x500 (= ?x839 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x762 (and $x500 $x320)))
 (let (($x779 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x327 (and $x779 $x762)))
 (let (($x572 (and $x304 $x327)))
 (let (($x138 (= ?x147 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x185 (and $x138 $x572)))
 (let (($x556 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x816 (and $x556 $x185)))
 (let (($x673 (and $x304 $x816)))
 (let (($x383 (= ?x188 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x514 (and $x383 $x673)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x69 (and $x281 $x514)))
 (let (($x296 (and $x304 $x69)))
 (let (($x68 (= ?x561 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x364 (and $x68 $x296)))
 (let (($x643 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x519 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x477)))
 (let (($x132 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x519 $x643)))))))
 (let (($x878 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x247 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x300 $x878)))))))
 (let (($x384 (bvugt ?x339 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x574 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x523)))
 (let (($x84 (=> (bvule ?x339 (bvsub (bvadd ?x339 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x574 $x384)))))))
 (let (($x336 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x584 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x584)))
 (let (($x337 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x279 $x336)))))))
 (let (($x735 (and $x337 $x84)))
 (let (($x124 (and $x735 $x247)))
 (let (($x658 (and $x124 $x132)))
 (let (($x880 (and $x658 $x364)))
 (let (($x650 (=> $x880 $x131)))
 (not $x650)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x513 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x457 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x513)))
 (let ((?x806 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x723 (concat ?x806 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x860 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x186 (bvadd ?x860 (_ bv3 32))))
 (let ((?x195 (concat (select input.dst.llvm-mem ?x186) (concat ?x160 ?x723))))
 (let ((?x76 (bvmul (_ bv4294967295 32) ?x195)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x655 (concat ?x347 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x583 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x6 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x427 (bvadd ?x6 (_ bv3 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem ?x427) (concat ?x583 ?x655))))
 (let ((?x639 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x818 (concat ?x639 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x543 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x279 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x465 (bvadd ?x279 (_ bv3 32))))
 (let ((?x497 (concat (select input.dst.llvm-mem ?x465) (concat ?x543 ?x818))))
 (let ((?x716 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x716)))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x213)))
 (let ((?x685 (bvadd (bvadd (bvadd ?x450 ?x497) ?x238) ?x76)))
 (let (($x684 (= ?x685 ?x457)))
 (let (($x855 (= $x684 true)))
 (let (($x624 (= $x855 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x430 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x731 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x695 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x742 (concat ?x695 (concat ?x731 (concat ?x430 ?x40)))))
 (let (($x439 (= ?x742 input.dst.llvm-%m)))
 (let (($x743 (= $x439 true)))
 (let (($x258 (= $x743 true)))
 (let (($x204 (= input.dst.llvm-%m ?x742)))
 (let ((?x298 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x54 (= (_ bv0 32) ?x298)))
 (let ((?x704 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x861 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x704)))
 (let (($x706 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x349 (and $x706 $x861)))
 (let (($x112 (and $x349 $x54)))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x644 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x403))))
 (let ((?x614 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (bvuge ?x614 (_ bv1 32))))
 (=> $x442 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x644))))))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x600 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x614 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (bvuge ?x614 (_ bv1 32))))
 (= $x442 (bvuge ?x600 (_ bv1 32)))))))
 ))
 (let (($x835 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x839 (= false false)))
 (let ((?x614 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x614 (_ bv0 32))))
 (=> $x472 $x839)))))
 ))
 (let (($x792 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x614 (_ bv0 32))))
 (= $x472 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x645 (and $x792 $x835)))
 (let (($x107 (and $x645 $x262)))
 (let (($x635 (and $x107 $x145)))
 (let (($x360 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (= (bvand ?x860 (_ bv4294967292 32)) ?x860)))
 (let (($x616 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x464 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv4 32))) (bvult ?x6 (bvsub ?x6 (_ bv4 32))))))
 (let (($x712 (and true $x464)))
 (let (($x494 (= (bvand ?x279 (_ bv4294967292 32)) ?x279)))
 (let (($x105 (and $x494 $x712)))
 (let (($x57 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x860 (bvsub ?x860 (_ bv8 32))) (bvult ?x860 (bvsub ?x860 (_ bv8 32))))))
 (let (($x12 (and (and (and true $x57) $x105) $x616)))
 (let (($x275 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x604 (and true $x275)))
 (let (($x481 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x568 (and $x481 $x604)))
 (let (($x244 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x279 (bvsub ?x279 (_ bv12 32))) (bvult ?x279 (bvsub ?x279 (_ bv12 32))))))
 (let (($x94 (and (and (and true $x481) $x244) $x568)))
 (let (($x541 (and (and (and (and (and (and $x94 $x12) $x362) $x360) $x635) $x112) $x204)))
 (let (($x663 (= $x541 true)))
 (let (($x173 (= $x663 true)))
 (let (($x726 (= $x173 true)))
 (let (($x434 (= $x94 true)))
 (let (($x885 (= $x434 true)))
 (let (($x174 (= $x885 true)))
 (let (($x629 (and $x12 $x362)))
 (let (($x468 (= $x629 true)))
 (let (($x90 (= $x468 true)))
 (let (($x297 (= $x90 true)))
 (let (($x113 (and $x297 $x174)))
 (let (($x395 (and $x113 $x726)))
 (let (($x109 (and $x395 $x258)))
 (let ((?x55 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x55 (_ bv1 32))))
 (let ((?x260 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x260 (_ bv0 32))))
 (let (($x842 (and $x104 $x329)))
 (let ((?x508 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x508 (_ bv1 32))))
 (let (($x501 (and $x189 $x842)))
 (let ((?x42 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x42 (_ bv1 32))))
 (let (($x619 (and $x560 $x501)))
 (let (($x416 (and $x619 $x109)))
 (let ((?x358 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x246 (= ?x358 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x594 (=> $x560 $x246)))
 (let (($x382 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x529 (= $x560 $x382)))
 (let (($x839 (= false false)))
 (let (($x407 (= ?x42 (_ bv0 32))))
 (let (($x191 (=> $x407 $x839)))
 (let (($x257 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x512 (= $x407 $x257)))
 (let (($x261 (and $x512 $x191)))
 (let (($x687 (and $x261 $x529)))
 (let (($x162 (and $x687 $x594)))
 (let (($x811 (and $x162 $x416)))
 (let ((?x263 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x563 (= ?x263 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x307 (=> $x189 $x563)))
 (let (($x669 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x22 (= $x189 $x669)))
 (let (($x357 (= ?x508 (_ bv0 32))))
 (let (($x670 (=> $x357 $x839)))
 (let (($x399 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x795 (= $x357 $x399)))
 (let (($x374 (and $x795 $x670)))
 (let (($x318 (and $x374 $x22)))
 (let (($x623 (and $x318 $x307)))
 (let (($x849 (and $x623 $x811)))
 (let ((?x117 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x610 (= ?x117 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x805 (bvuge ?x260 (_ bv1 32))))
 (let (($x288 (=> $x805 $x610)))
 (let (($x366 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x797 (= $x805 $x366)))
 (let (($x665 (=> $x104 $x839)))
 (let (($x440 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x703 (= $x104 $x440)))
 (let (($x576 (and $x703 $x665)))
 (let (($x128 (and $x576 $x797)))
 (let (($x316 (and $x128 $x288)))
 (let (($x406 (and $x316 $x849)))
 (let (($x363 (= ?x513 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x636 (=> $x329 $x363)))
 (let (($x851 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x250 (= $x329 $x851)))
 (let (($x387 (= ?x55 (_ bv0 32))))
 (let (($x143 (=> $x387 $x839)))
 (let (($x605 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x617 (= $x387 $x605)))
 (let (($x228 (and $x617 $x143)))
 (let (($x183 (and $x228 $x250)))
 (let (($x815 (and $x183 $x636)))
 (let (($x809 (and $x815 $x406)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x49 (and $x8 $x809)))
 (let (($x527 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x732 (and $x527 $x49)))
 (let (($x429 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x223 (and $x429 $x732)))
 (let (($x24 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x197 (and $x24 $x223)))
 (let (($x435 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x566 (and $x435 $x197)))
 (let (($x611 (and $x839 $x566)))
 (let (($x609 (= ?x358 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x582 (and $x609 $x611)))
 (let (($x470 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x803 (and $x470 $x582)))
 (let (($x638 (and $x839 $x803)))
 (let (($x232 (= ?x263 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x733 (and $x232 $x638)))
 (let (($x585 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x34 (and $x585 $x733)))
 (let (($x759 (and $x839 $x34)))
 (let (($x13 (= ?x117 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x267 (and $x13 $x759)))
 (let (($x500 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x218 (and $x500 $x267)))
 (let (($x891 (and $x839 $x218)))
 (let (($x779 (= ?x513 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x698 (and $x779 $x891)))
 (let (($x592 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x606 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x427)))
 (let (($x68 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x606 $x592)))))))
 (let (($x344 (bvugt ?x860 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x799 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x504 (=> (bvule ?x860 (bvsub (bvadd ?x860 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x799 $x344)))))))
 (let (($x744 (bvugt ?x279 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x646 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x618 (=> (bvule ?x279 (bvsub (bvadd ?x279 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x646 $x744)))))))
 (let (($x584 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x436 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x436)))
 (let (($x674 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x315 $x584)))))))
 (let (($x110 (and $x674 $x618)))
 (let (($x302 (and $x110 $x504)))
 (let (($x415 (and $x302 $x68)))
 (let (($x545 (and $x415 $x698)))
 (let (($x784 (=> $x545 $x624)))
 (not $x784))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x513 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x457 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x513)))
 (let ((?x806 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x723 (concat ?x806 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x860 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x186 (bvadd ?x860 (_ bv3 32))))
 (let ((?x195 (concat (select input.dst.llvm-mem ?x186) (concat ?x160 ?x723))))
 (let ((?x76 (bvmul (_ bv4294967295 32) ?x195)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x655 (concat ?x347 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x583 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x6 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x427 (bvadd ?x6 (_ bv3 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem ?x427) (concat ?x583 ?x655))))
 (let ((?x639 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x818 (concat ?x639 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x543 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x279 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x465 (bvadd ?x279 (_ bv3 32))))
 (let ((?x497 (concat (select input.dst.llvm-mem ?x465) (concat ?x543 ?x818))))
 (let ((?x716 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x716)))
 (let ((?x450 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x213)))
 (let ((?x685 (bvadd (bvadd (bvadd ?x450 ?x497) ?x238) ?x76)))
 (let (($x684 (= ?x685 ?x457)))
 (let (($x855 (= $x684 true)))
 (let (($x624 (= $x855 true)))
 (let ((?x40 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x430 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x731 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x695 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x742 (concat ?x695 (concat ?x731 (concat ?x430 ?x40)))))
 (let (($x439 (= ?x742 input.dst.llvm-%m)))
 (let (($x743 (= $x439 true)))
 (let (($x258 (= $x743 true)))
 (let (($x204 (= input.dst.llvm-%m ?x742)))
 (let ((?x298 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x54 (= (_ bv0 32) ?x298)))
 (let ((?x704 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x861 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x704)))
 (let (($x706 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x349 (and $x706 $x861)))
 (let (($x112 (and $x349 $x54)))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x644 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x403))))
 (let ((?x614 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (bvuge ?x614 (_ bv1 32))))
 (=> $x442 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x644))))))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x600 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x614 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (bvuge ?x614 (_ bv1 32))))
 (= $x442 (bvuge ?x600 (_ bv1 32)))))))
 ))
 (let (($x835 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x839 (= false false)))
 (let ((?x614 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x614 (_ bv0 32))))
 (=> $x472 $x839)))))
 ))
 (let (($x792 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x614 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (= ?x614 (_ bv0 32))))
 (= $x472 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x645 (and $x792 $x835)))
 (let (($x107 (and $x645 $x262)))
 (let (($x635 (and $x107 $x145)))
 (let (($x360 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (= (bvand ?x860 (_ bv4294967292 32)) ?x860)))
 (let (($x616 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x464 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv4 32))) (bvult ?x6 (bvsub ?x6 (_ bv4 32))))))
 (let (($x712 (and true $x464)))
 (let (($x494 (= (bvand ?x279 (_ bv4294967292 32)) ?x279)))
 (let (($x105 (and $x494 $x712)))
 (let (($x57 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x860 (bvsub ?x860 (_ bv8 32))) (bvult ?x860 (bvsub ?x860 (_ bv8 32))))))
 (let (($x12 (and (and (and true $x57) $x105) $x616)))
 (let (($x275 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x604 (and true $x275)))
 (let (($x481 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x568 (and $x481 $x604)))
 (let (($x244 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x279 (bvsub ?x279 (_ bv12 32))) (bvult ?x279 (bvsub ?x279 (_ bv12 32))))))
 (let (($x94 (and (and (and true $x481) $x244) $x568)))
 (let (($x541 (and (and (and (and (and (and $x94 $x12) $x362) $x360) $x635) $x112) $x204)))
 (let (($x663 (= $x541 true)))
 (let (($x173 (= $x663 true)))
 (let (($x726 (= $x173 true)))
 (let (($x434 (= $x94 true)))
 (let (($x885 (= $x434 true)))
 (let (($x174 (= $x885 true)))
 (let (($x629 (and $x12 $x362)))
 (let (($x468 (= $x629 true)))
 (let (($x90 (= $x468 true)))
 (let (($x297 (= $x90 true)))
 (let (($x113 (and $x297 $x174)))
 (let (($x395 (and $x113 $x726)))
 (let (($x109 (and $x395 $x258)))
 (let ((?x55 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x55 (_ bv1 32))))
 (let ((?x260 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x260 (_ bv0 32))))
 (let (($x842 (and $x104 $x329)))
 (let ((?x508 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x508 (_ bv1 32))))
 (let (($x501 (and $x189 $x842)))
 (let ((?x42 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x560 (bvuge ?x42 (_ bv1 32))))
 (let (($x619 (and $x560 $x501)))
 (let (($x416 (and $x619 $x109)))
 (let ((?x358 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x246 (= ?x358 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x594 (=> $x560 $x246)))
 (let (($x382 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x529 (= $x560 $x382)))
 (let (($x839 (= false false)))
 (let (($x407 (= ?x42 (_ bv0 32))))
 (let (($x191 (=> $x407 $x839)))
 (let (($x257 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x512 (= $x407 $x257)))
 (let (($x261 (and $x512 $x191)))
 (let (($x687 (and $x261 $x529)))
 (let (($x162 (and $x687 $x594)))
 (let (($x811 (and $x162 $x416)))
 (let ((?x263 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x563 (= ?x263 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x307 (=> $x189 $x563)))
 (let (($x669 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x22 (= $x189 $x669)))
 (let (($x357 (= ?x508 (_ bv0 32))))
 (let (($x670 (=> $x357 $x839)))
 (let (($x399 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x795 (= $x357 $x399)))
 (let (($x374 (and $x795 $x670)))
 (let (($x318 (and $x374 $x22)))
 (let (($x623 (and $x318 $x307)))
 (let (($x849 (and $x623 $x811)))
 (let ((?x117 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x610 (= ?x117 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x805 (bvuge ?x260 (_ bv1 32))))
 (let (($x288 (=> $x805 $x610)))
 (let (($x366 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x797 (= $x805 $x366)))
 (let (($x665 (=> $x104 $x839)))
 (let (($x440 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x703 (= $x104 $x440)))
 (let (($x576 (and $x703 $x665)))
 (let (($x128 (and $x576 $x797)))
 (let (($x316 (and $x128 $x288)))
 (let (($x406 (and $x316 $x849)))
 (let (($x363 (= ?x513 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x636 (=> $x329 $x363)))
 (let (($x851 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x250 (= $x329 $x851)))
 (let (($x387 (= ?x55 (_ bv0 32))))
 (let (($x143 (=> $x387 $x839)))
 (let (($x605 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x617 (= $x387 $x605)))
 (let (($x228 (and $x617 $x143)))
 (let (($x183 (and $x228 $x250)))
 (let (($x815 (and $x183 $x636)))
 (let (($x809 (and $x815 $x406)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x49 (and $x8 $x809)))
 (let (($x527 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x732 (and $x527 $x49)))
 (let (($x429 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x223 (and $x429 $x732)))
 (let (($x24 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x197 (and $x24 $x223)))
 (let (($x435 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x566 (and $x435 $x197)))
 (let (($x611 (and $x839 $x566)))
 (let (($x609 (= ?x358 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x582 (and $x609 $x611)))
 (let (($x470 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x803 (and $x470 $x582)))
 (let (($x638 (and $x839 $x803)))
 (let (($x232 (= ?x263 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x733 (and $x232 $x638)))
 (let (($x585 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x34 (and $x585 $x733)))
 (let (($x759 (and $x839 $x34)))
 (let (($x13 (= ?x117 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x267 (and $x13 $x759)))
 (let (($x500 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x218 (and $x500 $x267)))
 (let (($x891 (and $x839 $x218)))
 (let (($x779 (= ?x513 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x698 (and $x779 $x891)))
 (let (($x592 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x606 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x427)))
 (let (($x68 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x606 $x592)))))))
 (let (($x344 (bvugt ?x860 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x799 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x504 (=> (bvule ?x860 (bvsub (bvadd ?x860 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x799 $x344)))))))
 (let (($x744 (bvugt ?x279 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x646 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x618 (=> (bvule ?x279 (bvsub (bvadd ?x279 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x646 $x744)))))))
 (let (($x584 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x436 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x436)))
 (let (($x674 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x315 $x584)))))))
 (let (($x110 (and $x674 $x618)))
 (let (($x302 (and $x110 $x504)))
 (let (($x415 (and $x302 $x68)))
 (let (($x545 (and $x415 $x698)))
 (let (($x784 (=> $x545 $x624)))
 (not $x784))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x250 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x665 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x564 (bvadd ?x665 ?x250)))
 (let ((?x460 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x532 (concat ?x460 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x661 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x878 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x850 (bvadd ?x878 (_ bv3 32))))
 (let ((?x376 (concat (select input.dst.llvm-mem ?x850) (concat ?x661 ?x532))))
 (let ((?x820 (bvmul (_ bv4294967295 32) ?x376)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x552 (concat ?x236 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x186 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x396 (bvadd ?x186 (_ bv3 32))))
 (let ((?x693 (concat (select input.dst.llvm-mem ?x396) (concat ?x622 ?x552))))
 (let ((?x767 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x135 (concat ?x767 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x315 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x877 (bvadd ?x315 (_ bv3 32))))
 (let ((?x276 (concat (select input.dst.llvm-mem ?x877) (concat ?x689 ?x135))))
 (let ((?x536 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x598 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x536)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x598)))
 (let ((?x834 (bvadd (bvadd (bvadd ?x424 ?x276) ?x693) ?x820)))
 (let (($x284 (= ?x834 ?x564)))
 (let (($x5 (= $x284 true)))
 (let (($x184 (= $x5 true)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x348 (concat ?x151 (concat ?x227 ?x164)))))
 (let (($x518 (= ?x93 input.dst.llvm-%m)))
 (let (($x772 (= $x518 true)))
 (let (($x206 (= $x772 true)))
 (let (($x9 (= input.dst.llvm-%m ?x93)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x554 (= (_ bv0 32) ?x19)))
 (let ((?x525 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x881 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x525)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (and $x153 $x881)))
 (let (($x103 (and $x370 $x554)))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x578 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x840 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x578))))
 (let ((?x134 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x134 (_ bv1 32))))
 (=> $x290 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x840))))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x621 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x134 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x134 (_ bv1 32))))
 (= $x290 (bvuge ?x621 (_ bv1 32)))))))
 ))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x358 (= false false)))
 (let ((?x134 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x134 (_ bv0 32))))
 (=> $x496 $x358)))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x134 (_ bv0 32))))
 (= $x496 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x631 (and $x331 $x157)))
 (let (($x193 (and $x631 $x320)))
 (let (($x175 (and $x193 $x694)))
 (let (($x395 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x402 (= (bvand ?x878 (_ bv4294967292 32)) ?x878)))
 (let (($x852 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let (($x775 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv4 32))) (bvult ?x186 (bvsub ?x186 (_ bv4 32))))))
 (let (($x546 (and true $x775)))
 (let (($x762 (= (bvand ?x315 (_ bv4294967292 32)) ?x315)))
 (let (($x426 (and $x762 $x546)))
 (let (($x262 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x878 (bvsub ?x878 (_ bv8 32))) (bvult ?x878 (bvsub ?x878 (_ bv8 32))))))
 (let (($x644 (and (and (and true $x262) $x426) $x852)))
 (let (($x765 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x430 (and true $x765)))
 (let (($x861 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x40 (and $x861 $x430)))
 (let (($x683 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x315 (bvsub ?x315 (_ bv12 32))) (bvult ?x315 (bvsub ?x315 (_ bv12 32))))))
 (let (($x742 (and (and (and true $x861) $x683) $x40)))
 (let (($x150 (and (and (and (and (and (and $x742 $x644) $x402) $x395) $x175) $x103) $x9)))
 (let (($x207 (= $x150 true)))
 (let (($x50 (= $x207 true)))
 (let (($x171 (= $x50 true)))
 (let (($x204 (= $x742 true)))
 (let (($x541 (= $x204 true)))
 (let (($x663 (= $x541 true)))
 (let (($x145 (and $x644 $x402)))
 (let (($x635 (= $x145 true)))
 (let (($x580 (= $x635 true)))
 (let (($x706 (= $x580 true)))
 (let (($x173 (and $x706 $x663)))
 (let (($x804 (and $x173 $x171)))
 (let (($x485 (and $x804 $x206)))
 (let ((?x22 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x22 (_ bv0 32))))
 (let ((?x619 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x882 (= ?x619 (_ bv0 32))))
 (let (($x792 (and $x882 $x318)))
 (let ((?x468 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x468 (_ bv1 32))))
 (let (($x647 (and $x244 $x792)))
 (let ((?x593 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x593 (_ bv1 32))))
 (let (($x835 (and $x58 $x647)))
 (let (($x650 (and $x835 $x485)))
 (let (($x600 (= ?x665 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x342 (=> $x58 $x600)))
 (let (($x573 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x748 (= $x58 $x573)))
 (let (($x358 (= false false)))
 (let (($x739 (= ?x593 (_ bv0 32))))
 (let (($x360 (=> $x739 $x358)))
 (let (($x174 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x273 (= $x739 $x174)))
 (let (($x405 (and $x273 $x360)))
 (let (($x729 (and $x405 $x748)))
 (let (($x309 (and $x729 $x342)))
 (let (($x131 (and $x309 $x650)))
 (let (($x597 (= ?x250 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x286 (=> $x244 $x597)))
 (let (($x751 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x859 (= $x244 $x751)))
 (let (($x90 (= ?x468 (_ bv0 32))))
 (let (($x853 (=> $x90 $x358)))
 (let (($x362 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x297 (= $x90 $x362)))
 (let (($x481 (and $x297 $x853)))
 (let (($x884 (and $x481 $x859)))
 (let (($x224 (and $x884 $x286)))
 (let (($x449 (and $x224 $x131)))
 (let ((?x8 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x789 (= ?x8 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x844 (bvuge ?x619 (_ bv1 32))))
 (let (($x464 (=> $x844 $x789)))
 (let (($x494 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x410 (= $x844 $x494)))
 (let (($x495 (=> $x882 $x358)))
 (let (($x842 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x56 (= $x882 $x842)))
 (let (($x505 (and $x56 $x495)))
 (let (($x890 (and $x505 $x410)))
 (let (($x712 (and $x890 $x464)))
 (let (($x29 (and $x712 $x449)))
 (let ((?x311 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x261 (= ?x311 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x257 (bvuge ?x22 (_ bv1 32))))
 (let (($x560 (=> $x257 $x261)))
 (let (($x714 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x512 (= $x257 $x714)))
 (let (($x563 (=> $x318 $x358)))
 (let (($x189 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x152 (= $x318 $x189)))
 (let (($x307 (and $x152 $x563)))
 (let (($x191 (and $x307 $x512)))
 (let (($x382 (and $x191 $x560)))
 (let (($x879 (and $x382 $x29)))
 (let (($x508 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x155 (and $x508 $x879)))
 (let (($x316 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x190 (and $x316 $x155)))
 (let (($x610 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x419 (and $x610 $x190)))
 (let (($x128 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x148 (and $x128 $x419)))
 (let (($x366 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x322 (and $x366 $x148)))
 (let (($x843 (and $x358 $x322)))
 (let (($x576 (= ?x665 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x432 (and $x576 $x843)))
 (let (($x363 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x754 (and $x363 $x432)))
 (let (($x492 (and $x358 $x754)))
 (let (($x183 (= ?x250 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x692 (and $x183 $x492)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x474 (and $x387 $x692)))
 (let (($x83 (and $x358 $x474)))
 (let (($x75 (= ?x8 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x829 (and $x75 $x83)))
 (let (($x609 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x425 (and $x609 $x829)))
 (let (($x192 (and $x358 $x425)))
 (let (($x470 (= ?x311 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x889 (and $x470 $x192)))
 (let (($x658 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x396)))
 (let (($x779 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x658)))))))
 (let (($x124 (bvugt ?x878 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x850)))
 (let (($x643 (=> (bvule ?x878 (bvsub (bvadd ?x878 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x124)))))))
 (let (($x735 (bvugt ?x315 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x877)))
 (let (($x300 (=> (bvule ?x315 (bvsub (bvadd ?x315 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x735)))))))
 (let (($x445 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x634 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x436 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x634)))
 (let (($x384 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x436 $x445)))))))
 (let (($x126 (and $x384 $x300)))
 (let (($x285 (and $x126 $x643)))
 (let (($x86 (and $x285 $x779)))
 (let (($x70 (and $x86 $x889)))
 (let (($x827 (=> $x70 $x184)))
 (not $x827))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x250 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x665 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x564 (bvadd ?x665 ?x250)))
 (let ((?x460 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x532 (concat ?x460 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x661 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x878 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x850 (bvadd ?x878 (_ bv3 32))))
 (let ((?x376 (concat (select input.dst.llvm-mem ?x850) (concat ?x661 ?x532))))
 (let ((?x820 (bvmul (_ bv4294967295 32) ?x376)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x552 (concat ?x236 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x186 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x396 (bvadd ?x186 (_ bv3 32))))
 (let ((?x693 (concat (select input.dst.llvm-mem ?x396) (concat ?x622 ?x552))))
 (let ((?x767 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x135 (concat ?x767 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x315 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x877 (bvadd ?x315 (_ bv3 32))))
 (let ((?x276 (concat (select input.dst.llvm-mem ?x877) (concat ?x689 ?x135))))
 (let ((?x536 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x598 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x536)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x598)))
 (let ((?x834 (bvadd (bvadd (bvadd ?x424 ?x276) ?x693) ?x820)))
 (let (($x284 (= ?x834 ?x564)))
 (let (($x5 (= $x284 true)))
 (let (($x184 (= $x5 true)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x348 (concat ?x151 (concat ?x227 ?x164)))))
 (let (($x518 (= ?x93 input.dst.llvm-%m)))
 (let (($x772 (= $x518 true)))
 (let (($x206 (= $x772 true)))
 (let (($x9 (= input.dst.llvm-%m ?x93)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x554 (= (_ bv0 32) ?x19)))
 (let ((?x525 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x881 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x525)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (and $x153 $x881)))
 (let (($x103 (and $x370 $x554)))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x578 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x840 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x578))))
 (let ((?x134 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x134 (_ bv1 32))))
 (=> $x290 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x840))))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x621 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x134 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x134 (_ bv1 32))))
 (= $x290 (bvuge ?x621 (_ bv1 32)))))))
 ))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x358 (= false false)))
 (let ((?x134 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x134 (_ bv0 32))))
 (=> $x496 $x358)))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x496 (= ?x134 (_ bv0 32))))
 (= $x496 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x631 (and $x331 $x157)))
 (let (($x193 (and $x631 $x320)))
 (let (($x175 (and $x193 $x694)))
 (let (($x395 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x402 (= (bvand ?x878 (_ bv4294967292 32)) ?x878)))
 (let (($x852 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let (($x775 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv4 32))) (bvult ?x186 (bvsub ?x186 (_ bv4 32))))))
 (let (($x546 (and true $x775)))
 (let (($x762 (= (bvand ?x315 (_ bv4294967292 32)) ?x315)))
 (let (($x426 (and $x762 $x546)))
 (let (($x262 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x878 (bvsub ?x878 (_ bv8 32))) (bvult ?x878 (bvsub ?x878 (_ bv8 32))))))
 (let (($x644 (and (and (and true $x262) $x426) $x852)))
 (let (($x765 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x430 (and true $x765)))
 (let (($x861 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x40 (and $x861 $x430)))
 (let (($x683 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x315 (bvsub ?x315 (_ bv12 32))) (bvult ?x315 (bvsub ?x315 (_ bv12 32))))))
 (let (($x742 (and (and (and true $x861) $x683) $x40)))
 (let (($x150 (and (and (and (and (and (and $x742 $x644) $x402) $x395) $x175) $x103) $x9)))
 (let (($x207 (= $x150 true)))
 (let (($x50 (= $x207 true)))
 (let (($x171 (= $x50 true)))
 (let (($x204 (= $x742 true)))
 (let (($x541 (= $x204 true)))
 (let (($x663 (= $x541 true)))
 (let (($x145 (and $x644 $x402)))
 (let (($x635 (= $x145 true)))
 (let (($x580 (= $x635 true)))
 (let (($x706 (= $x580 true)))
 (let (($x173 (and $x706 $x663)))
 (let (($x804 (and $x173 $x171)))
 (let (($x485 (and $x804 $x206)))
 (let ((?x22 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x22 (_ bv0 32))))
 (let ((?x619 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x882 (= ?x619 (_ bv0 32))))
 (let (($x792 (and $x882 $x318)))
 (let ((?x468 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x468 (_ bv1 32))))
 (let (($x647 (and $x244 $x792)))
 (let ((?x593 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x593 (_ bv1 32))))
 (let (($x835 (and $x58 $x647)))
 (let (($x650 (and $x835 $x485)))
 (let (($x600 (= ?x665 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x342 (=> $x58 $x600)))
 (let (($x573 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x748 (= $x58 $x573)))
 (let (($x358 (= false false)))
 (let (($x739 (= ?x593 (_ bv0 32))))
 (let (($x360 (=> $x739 $x358)))
 (let (($x174 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x273 (= $x739 $x174)))
 (let (($x405 (and $x273 $x360)))
 (let (($x729 (and $x405 $x748)))
 (let (($x309 (and $x729 $x342)))
 (let (($x131 (and $x309 $x650)))
 (let (($x597 (= ?x250 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x286 (=> $x244 $x597)))
 (let (($x751 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x859 (= $x244 $x751)))
 (let (($x90 (= ?x468 (_ bv0 32))))
 (let (($x853 (=> $x90 $x358)))
 (let (($x362 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x297 (= $x90 $x362)))
 (let (($x481 (and $x297 $x853)))
 (let (($x884 (and $x481 $x859)))
 (let (($x224 (and $x884 $x286)))
 (let (($x449 (and $x224 $x131)))
 (let ((?x8 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x789 (= ?x8 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x844 (bvuge ?x619 (_ bv1 32))))
 (let (($x464 (=> $x844 $x789)))
 (let (($x494 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x410 (= $x844 $x494)))
 (let (($x495 (=> $x882 $x358)))
 (let (($x842 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x56 (= $x882 $x842)))
 (let (($x505 (and $x56 $x495)))
 (let (($x890 (and $x505 $x410)))
 (let (($x712 (and $x890 $x464)))
 (let (($x29 (and $x712 $x449)))
 (let ((?x311 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x261 (= ?x311 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x257 (bvuge ?x22 (_ bv1 32))))
 (let (($x560 (=> $x257 $x261)))
 (let (($x714 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x512 (= $x257 $x714)))
 (let (($x563 (=> $x318 $x358)))
 (let (($x189 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x152 (= $x318 $x189)))
 (let (($x307 (and $x152 $x563)))
 (let (($x191 (and $x307 $x512)))
 (let (($x382 (and $x191 $x560)))
 (let (($x879 (and $x382 $x29)))
 (let (($x508 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x155 (and $x508 $x879)))
 (let (($x316 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x190 (and $x316 $x155)))
 (let (($x610 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x419 (and $x610 $x190)))
 (let (($x128 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x148 (and $x128 $x419)))
 (let (($x366 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x322 (and $x366 $x148)))
 (let (($x843 (and $x358 $x322)))
 (let (($x576 (= ?x665 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x432 (and $x576 $x843)))
 (let (($x363 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x754 (and $x363 $x432)))
 (let (($x492 (and $x358 $x754)))
 (let (($x183 (= ?x250 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x692 (and $x183 $x492)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x474 (and $x387 $x692)))
 (let (($x83 (and $x358 $x474)))
 (let (($x75 (= ?x8 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x829 (and $x75 $x83)))
 (let (($x609 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x425 (and $x609 $x829)))
 (let (($x192 (and $x358 $x425)))
 (let (($x470 (= ?x311 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x889 (and $x470 $x192)))
 (let (($x658 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x396)))
 (let (($x779 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x658)))))))
 (let (($x124 (bvugt ?x878 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x850)))
 (let (($x643 (=> (bvule ?x878 (bvsub (bvadd ?x878 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x124)))))))
 (let (($x735 (bvugt ?x315 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x877)))
 (let (($x300 (=> (bvule ?x315 (bvsub (bvadd ?x315 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x84 $x735)))))))
 (let (($x445 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x634 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x436 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x634)))
 (let (($x384 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x436 $x445)))))))
 (let (($x126 (and $x384 $x300)))
 (let (($x285 (and $x126 $x643)))
 (let (($x86 (and $x285 $x779)))
 (let (($x70 (and $x86 $x889)))
 (let (($x827 (=> $x70 $x184)))
 (not $x827))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x508 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x399 (bvmul (_ bv4294967295 32) ?x508)))
 (let ((?x623 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x399)))
 (let ((?x785 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x529 (concat ?x785 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x461 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x344 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x176 (bvadd ?x344 (_ bv3 32))))
 (let ((?x660 (concat (select input.dst.llvm-mem ?x176) (concat ?x461 ?x529))))
 (let ((?x822 (bvmul (_ bv4294967295 32) ?x660)))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x614 (concat ?x187 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x850 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x561 (bvadd ?x850 (_ bv3 32))))
 (let ((?x616 (concat (select input.dst.llvm-mem ?x561) (concat ?x105 ?x614))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x122 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x436 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x679 (bvadd ?x436 (_ bv3 32))))
 (let ((?x568 (concat (select input.dst.llvm-mem ?x679) (concat ?x330 ?x99))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x364)))
 (let ((?x880 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x448)))
 (let ((?x672 (bvadd (bvadd (bvadd ?x880 ?x568) ?x616) ?x822)))
 (let (($x158 (= ?x672 ?x623)))
 (let (($x42 (= $x158 true)))
 (let (($x407 (= $x42 true)))
 (let ((?x555 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x806 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x591 (concat ?x160 (concat ?x806 (concat ?x347 ?x555)))))
 (let (($x684 (= ?x591 input.dst.llvm-%m)))
 (let (($x855 (= $x684 true)))
 (let (($x624 (= $x855 true)))
 (let (($x239 (= input.dst.llvm-%m ?x591)))
 (let ((?x49 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x21 (= (_ bv0 32) ?x49)))
 (let ((?x849 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x849)))
 (let (($x811 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x809 (and $x811 $x406)))
 (let (($x255 (and $x809 $x21)))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem ?x213))))
 (let ((?x818 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv2 32))) ?x639))))
 (let ((?x617 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x617 (_ bv1 32))))
 (=> $x566 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x818))))))))
 ))
 (let (($x439 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x839 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x617 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x617 (_ bv1 32))))
 (= $x566 (bvuge ?x839 (_ bv1 32)))))))
 ))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x665 (= false false)))
 (let ((?x617 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x617 (_ bv0 32))))
 (=> $x143 $x665)))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x617 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x617 (_ bv0 32))))
 (= $x143 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x482 (and $x435 $x429)))
 (let (($x803 (and $x482 $x439)))
 (let (($x109 (and $x803 $x258)))
 (let (($x804 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= (bvand ?x344 (_ bv4294967292 32)) ?x344)))
 (let (($x798 (= (bvand ?x850 (_ bv4294967292 32)) ?x850)))
 (let (($x51 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x850 (bvsub ?x850 (_ bv4 32))) (bvult ?x850 (bvsub ?x850 (_ bv4 32))))))
 (let (($x826 (and true $x51)))
 (let (($x582 (= (bvand ?x436 (_ bv4294967292 32)) ?x436)))
 (let (($x414 (and $x582 $x826)))
 (let (($x320 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x344 (bvsub ?x344 (_ bv8 32))) (bvult ?x344 (bvsub ?x344 (_ bv8 32))))))
 (let (($x840 (and (and (and true $x320) $x414) $x798)))
 (let (($x755 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x227 (and true $x755)))
 (let (($x881 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x164 (and $x881 $x227)))
 (let (($x27 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x436 (bvsub ?x436 (_ bv12 32))) (bvult ?x436 (bvsub ?x436 (_ bv12 32))))))
 (let (($x93 (and (and (and true $x881) $x27) $x164)))
 (let (($x76 (and (and (and (and (and (and $x93 $x840) $x85) $x804) $x109) $x255) $x239)))
 (let (($x195 (= $x76 true)))
 (let (($x685 (= $x195 true)))
 (let (($x708 (= $x685 true)))
 (let (($x9 (= $x93 true)))
 (let (($x150 (= $x9 true)))
 (let (($x207 (= $x150 true)))
 (let (($x694 (and $x840 $x85)))
 (let (($x175 (= $x694 true)))
 (let (($x447 (= $x175 true)))
 (let (($x153 (= $x447 true)))
 (let (($x50 (and $x153 $x207)))
 (let (($x457 (and $x50 $x708)))
 (let (($x458 (and $x457 $x624)))
 (let ((?x859 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x859 (_ bv1 32))))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x835 (_ bv1 32))))
 (let (($x331 (and $x266 $x174)))
 (let ((?x635 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (= ?x635 (_ bv0 32))))
 (let (($x761 (and $x580 $x331)))
 (let ((?x823 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x823 (_ bv1 32))))
 (let (($x157 (and $x197 $x761)))
 (let (($x784 (and $x157 $x458)))
 (let ((?x495 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x621 (= ?x495 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x304 (=> $x197 $x621)))
 (let (($x677 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x590 (= $x197 $x677)))
 (let (($x665 (= false false)))
 (let (($x745 (= ?x823 (_ bv0 32))))
 (let (($x395 (=> $x745 $x665)))
 (let (($x663 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x726 (= $x745 $x663)))
 (let (($x746 (and $x726 $x395)))
 (let (($x78 (and $x746 $x590)))
 (let (($x467 (and $x78 $x304)))
 (let (($x477 (and $x467 $x784)))
 (let ((?x512 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x114 (= ?x512 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x683 (bvuge ?x635 (_ bv1 32))))
 (let (($x493 (=> $x683 $x114)))
 (let (($x112 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x23 (= $x683 $x112)))
 (let (($x704 (=> $x580 $x665)))
 (let (($x402 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x706 (= $x580 $x402)))
 (let (($x861 (and $x706 $x704)))
 (let (($x695 (and $x861 $x23)))
 (let (($x731 (and $x695 $x493)))
 (let (($x254 (and $x731 $x477)))
 (let (($x886 (= ?x508 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x775 (=> $x266 $x886)))
 (let (($x762 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x845 (= $x266 $x762)))
 (let (($x442 (= ?x835 (_ bv0 32))))
 (let (($x651 (=> $x442 $x665)))
 (let (($x792 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x645 (= $x442 $x792)))
 (let (($x632 (and $x645 $x651)))
 (let (($x373 (and $x632 $x845)))
 (let (($x546 (and $x373 $x775)))
 (let (($x790 (and $x546 $x254)))
 (let ((?x498 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x405 (= ?x498 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x58 (=> $x174 $x405)))
 (let (($x434 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x273 (= $x174 $x434)))
 (let (($x884 (= ?x859 (_ bv0 32))))
 (let (($x597 (=> $x884 $x665)))
 (let (($x244 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x136 (= $x884 $x244)))
 (let (($x286 (and $x136 $x597)))
 (let (($x360 (and $x286 $x273)))
 (let (($x573 (and $x360 $x58)))
 (let (($x281 (and $x573 $x790)))
 (let (($x468 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x243 (and $x468 $x281)))
 (let (($x712 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x200 (and $x712 $x243)))
 (let (($x789 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x810 (and $x789 $x200)))
 (let (($x890 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x188 (and $x890 $x810)))
 (let (($x494 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x383 (and $x494 $x188)))
 (let (($x556 (and $x665 $x383)))
 (let (($x505 (= ?x495 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x521 (and $x505 $x556)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x111 (and $x261 $x521)))
 (let (($x182 (and $x665 $x111)))
 (let (($x191 (= ?x512 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x830 (and $x191 $x182)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x397 (and $x318 $x830)))
 (let (($x558 (and $x665 $x397)))
 (let (($x669 (= ?x508 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x147 (and $x669 $x558)))
 (let (($x576 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x137 (and $x576 $x147)))
 (let (($x327 (and $x665 $x137)))
 (let (($x363 (= ?x498 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x887 (and $x363 $x327)))
 (let (($x415 (bvugt ?x850 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x561)))
 (let (($x470 (=> (bvule ?x850 (bvsub (bvadd ?x850 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x415)))))))
 (let (($x302 (bvugt ?x344 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x504 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x592 (=> (bvule ?x344 (bvsub (bvadd ?x344 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x504 $x302)))))))
 (let (($x110 (bvugt ?x436 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x618 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x679)))
 (let (($x799 (=> (bvule ?x436 (bvsub (bvadd ?x436 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x618 $x110)))))))
 (let (($x584 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x315 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x574 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x315)))
 (let (($x744 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x574 $x584)))))))
 (let (($x860 (and $x744 $x799)))
 (let (($x519 (and $x860 $x592)))
 (let (($x138 (and $x519 $x470)))
 (let (($x780 (and $x138 $x887)))
 (let (($x241 (=> $x780 $x407)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x508 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x399 (bvmul (_ bv4294967295 32) ?x508)))
 (let ((?x623 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x399)))
 (let ((?x785 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x529 (concat ?x785 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x461 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x344 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x176 (bvadd ?x344 (_ bv3 32))))
 (let ((?x660 (concat (select input.dst.llvm-mem ?x176) (concat ?x461 ?x529))))
 (let ((?x822 (bvmul (_ bv4294967295 32) ?x660)))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x614 (concat ?x187 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x850 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x561 (bvadd ?x850 (_ bv3 32))))
 (let ((?x616 (concat (select input.dst.llvm-mem ?x561) (concat ?x105 ?x614))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x122 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x436 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x679 (bvadd ?x436 (_ bv3 32))))
 (let ((?x568 (concat (select input.dst.llvm-mem ?x679) (concat ?x330 ?x99))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x364)))
 (let ((?x880 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x448)))
 (let ((?x672 (bvadd (bvadd (bvadd ?x880 ?x568) ?x616) ?x822)))
 (let (($x158 (= ?x672 ?x623)))
 (let (($x42 (= $x158 true)))
 (let (($x407 (= $x42 true)))
 (let ((?x555 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x806 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x591 (concat ?x160 (concat ?x806 (concat ?x347 ?x555)))))
 (let (($x684 (= ?x591 input.dst.llvm-%m)))
 (let (($x855 (= $x684 true)))
 (let (($x624 (= $x855 true)))
 (let (($x239 (= input.dst.llvm-%m ?x591)))
 (let ((?x49 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x21 (= (_ bv0 32) ?x49)))
 (let ((?x849 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x849)))
 (let (($x811 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x809 (and $x811 $x406)))
 (let (($x255 (and $x809 $x21)))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv1 32))) (select input.dst.llvm-mem ?x213))))
 (let ((?x818 (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x213 (_ bv2 32))) ?x639))))
 (let ((?x617 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x617 (_ bv1 32))))
 (=> $x566 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x818))))))))
 ))
 (let (($x439 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x839 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x617 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x617 (_ bv1 32))))
 (= $x566 (bvuge ?x839 (_ bv1 32)))))))
 ))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x665 (= false false)))
 (let ((?x617 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x617 (_ bv0 32))))
 (=> $x143 $x665)))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x617 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x617 (_ bv0 32))))
 (= $x143 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x482 (and $x435 $x429)))
 (let (($x803 (and $x482 $x439)))
 (let (($x109 (and $x803 $x258)))
 (let (($x804 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= (bvand ?x344 (_ bv4294967292 32)) ?x344)))
 (let (($x798 (= (bvand ?x850 (_ bv4294967292 32)) ?x850)))
 (let (($x51 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x850 (bvsub ?x850 (_ bv4 32))) (bvult ?x850 (bvsub ?x850 (_ bv4 32))))))
 (let (($x826 (and true $x51)))
 (let (($x582 (= (bvand ?x436 (_ bv4294967292 32)) ?x436)))
 (let (($x414 (and $x582 $x826)))
 (let (($x320 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x344 (bvsub ?x344 (_ bv8 32))) (bvult ?x344 (bvsub ?x344 (_ bv8 32))))))
 (let (($x840 (and (and (and true $x320) $x414) $x798)))
 (let (($x755 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x227 (and true $x755)))
 (let (($x881 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x164 (and $x881 $x227)))
 (let (($x27 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x436 (bvsub ?x436 (_ bv12 32))) (bvult ?x436 (bvsub ?x436 (_ bv12 32))))))
 (let (($x93 (and (and (and true $x881) $x27) $x164)))
 (let (($x76 (and (and (and (and (and (and $x93 $x840) $x85) $x804) $x109) $x255) $x239)))
 (let (($x195 (= $x76 true)))
 (let (($x685 (= $x195 true)))
 (let (($x708 (= $x685 true)))
 (let (($x9 (= $x93 true)))
 (let (($x150 (= $x9 true)))
 (let (($x207 (= $x150 true)))
 (let (($x694 (and $x840 $x85)))
 (let (($x175 (= $x694 true)))
 (let (($x447 (= $x175 true)))
 (let (($x153 (= $x447 true)))
 (let (($x50 (and $x153 $x207)))
 (let (($x457 (and $x50 $x708)))
 (let (($x458 (and $x457 $x624)))
 (let ((?x859 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x859 (_ bv1 32))))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x835 (_ bv1 32))))
 (let (($x331 (and $x266 $x174)))
 (let ((?x635 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x580 (= ?x635 (_ bv0 32))))
 (let (($x761 (and $x580 $x331)))
 (let ((?x823 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x823 (_ bv1 32))))
 (let (($x157 (and $x197 $x761)))
 (let (($x784 (and $x157 $x458)))
 (let ((?x495 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x621 (= ?x495 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x304 (=> $x197 $x621)))
 (let (($x677 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x590 (= $x197 $x677)))
 (let (($x665 (= false false)))
 (let (($x745 (= ?x823 (_ bv0 32))))
 (let (($x395 (=> $x745 $x665)))
 (let (($x663 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x726 (= $x745 $x663)))
 (let (($x746 (and $x726 $x395)))
 (let (($x78 (and $x746 $x590)))
 (let (($x467 (and $x78 $x304)))
 (let (($x477 (and $x467 $x784)))
 (let ((?x512 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x114 (= ?x512 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x683 (bvuge ?x635 (_ bv1 32))))
 (let (($x493 (=> $x683 $x114)))
 (let (($x112 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x23 (= $x683 $x112)))
 (let (($x704 (=> $x580 $x665)))
 (let (($x402 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x706 (= $x580 $x402)))
 (let (($x861 (and $x706 $x704)))
 (let (($x695 (and $x861 $x23)))
 (let (($x731 (and $x695 $x493)))
 (let (($x254 (and $x731 $x477)))
 (let (($x886 (= ?x508 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x775 (=> $x266 $x886)))
 (let (($x762 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x845 (= $x266 $x762)))
 (let (($x442 (= ?x835 (_ bv0 32))))
 (let (($x651 (=> $x442 $x665)))
 (let (($x792 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x645 (= $x442 $x792)))
 (let (($x632 (and $x645 $x651)))
 (let (($x373 (and $x632 $x845)))
 (let (($x546 (and $x373 $x775)))
 (let (($x790 (and $x546 $x254)))
 (let ((?x498 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x405 (= ?x498 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x58 (=> $x174 $x405)))
 (let (($x434 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x273 (= $x174 $x434)))
 (let (($x884 (= ?x859 (_ bv0 32))))
 (let (($x597 (=> $x884 $x665)))
 (let (($x244 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x136 (= $x884 $x244)))
 (let (($x286 (and $x136 $x597)))
 (let (($x360 (and $x286 $x273)))
 (let (($x573 (and $x360 $x58)))
 (let (($x281 (and $x573 $x790)))
 (let (($x468 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x243 (and $x468 $x281)))
 (let (($x712 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x200 (and $x712 $x243)))
 (let (($x789 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x810 (and $x789 $x200)))
 (let (($x890 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x188 (and $x890 $x810)))
 (let (($x494 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x383 (and $x494 $x188)))
 (let (($x556 (and $x665 $x383)))
 (let (($x505 (= ?x495 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x521 (and $x505 $x556)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x111 (and $x261 $x521)))
 (let (($x182 (and $x665 $x111)))
 (let (($x191 (= ?x512 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x830 (and $x191 $x182)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x397 (and $x318 $x830)))
 (let (($x558 (and $x665 $x397)))
 (let (($x669 (= ?x508 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x147 (and $x669 $x558)))
 (let (($x576 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x137 (and $x576 $x147)))
 (let (($x327 (and $x665 $x137)))
 (let (($x363 (= ?x498 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x887 (and $x363 $x327)))
 (let (($x415 (bvugt ?x850 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x561)))
 (let (($x470 (=> (bvule ?x850 (bvsub (bvadd ?x850 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x415)))))))
 (let (($x302 (bvugt ?x344 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x504 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x592 (=> (bvule ?x344 (bvsub (bvadd ?x344 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x504 $x302)))))))
 (let (($x110 (bvugt ?x436 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x618 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x679)))
 (let (($x799 (=> (bvule ?x436 (bvsub (bvadd ?x436 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x618 $x110)))))))
 (let (($x584 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x315 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x574 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x315)))
 (let (($x744 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x574 $x584)))))))
 (let (($x860 (and $x744 $x799)))
 (let (($x519 (and $x860 $x592)))
 (let (($x138 (and $x519 $x470)))
 (let (($x780 (and $x138 $x887)))
 (let (($x241 (=> $x780 $x407)))
 (not $x241)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x468 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x90 (bvmul (_ bv4294967295 32) ?x468)))
 (let ((?x651 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x12 (bvadd ?x651 ?x90)))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x349 (concat ?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x748 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x124 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x124 (_ bv3 32))))
 (let ((?x600 (concat (select input.dst.llvm-mem ?x6) (concat ?x748 ?x349))))
 (let ((?x262 (bvmul (_ bv4294967295 32) ?x600)))
 (let ((?x742 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x312 (concat ?x742 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x513 (bvadd ?x176 (_ bv3 32))))
 (let ((?x524 (concat (select input.dst.llvm-mem ?x513) (concat ?x134 ?x312))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x267 (concat ?x34 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x574 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x523 (bvadd ?x574 (_ bv3 32))))
 (let ((?x765 (concat (select input.dst.llvm-mem ?x523) (concat ?x120 ?x267))))
 (let ((?x545 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x759 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x545)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x759)))
 (let ((?x301 (bvadd (bvadd (bvadd ?x218 ?x765) ?x524) ?x262)))
 (let (($x362 (= ?x301 ?x12)))
 (let (($x297 (= $x362 true)))
 (let (($x224 (= $x297 true)))
 (let ((?x782 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x503 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x552 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x280 (concat ?x552 (concat ?x503 ?x782)))))
 (let (($x564 (= ?x66 input.dst.llvm-%m)))
 (let (($x284 (= $x564 true)))
 (let (($x5 (= $x284 true)))
 (let (($x661 (= input.dst.llvm-%m ?x66)))
 (let ((?x29 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x879 (= (_ bv0 32) ?x29)))
 (let ((?x485 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x485)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x449 (and $x206 $x131)))
 (let (($x155 (and $x449 $x879)))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x699 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd ?x699 (_ bv1 32))) (select input.dst.llvm-mem ?x699))))
 (let ((?x678 (concat (select input.dst.llvm-mem (bvadd ?x699 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x699 (_ bv2 32))) ?x847))))
 (let ((?x670 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x670 (_ bv1 32))))
 (=> $x190 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x678))))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x501 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x670 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x670 (_ bv1 32))))
 (= $x190 (bvuge ?x501 (_ bv1 32)))))))
 ))
 (let (($x797 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x495 (= false false)))
 (let ((?x670 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x670 (_ bv0 32))))
 (=> $x189 $x495)))))
 ))
 (let (($x563 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x670 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x670 (_ bv0 32))))
 (= $x189 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x128 (and $x563 $x797)))
 (let (($x843 (and $x128 $x322)))
 (let (($x772 (and $x843 $x650)))
 (let (($x457 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x743 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x450 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x264 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x443 (and true $x264)))
 (let (($x432 (= (bvand ?x574 (_ bv4294967292 32)) ?x574)))
 (let (($x483 (and $x432 $x443)))
 (let (($x439 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv8 32))) (bvult ?x124 (bvsub ?x124 (_ bv8 32))))))
 (let (($x818 (and (and (and true $x439) $x483) $x450)))
 (let (($x540 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x347 (and true $x540)))
 (let (($x406 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x555 (and $x406 $x347)))
 (let (($x721 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x574 (bvsub ?x574 (_ bv12 32))) (bvult ?x574 (bvsub ?x574 (_ bv12 32))))))
 (let (($x591 (and (and (and true $x406) $x721) $x555)))
 (let (($x532 (and (and (and (and (and (and $x591 $x818) $x743) $x457) $x772) $x155) $x661)))
 (let (($x377 (= $x532 true)))
 (let (($x820 (= $x377 true)))
 (let (($x376 (= $x820 true)))
 (let (($x239 (= $x591 true)))
 (let (($x76 (= $x239 true)))
 (let (($x195 (= $x76 true)))
 (let (($x258 (and $x818 $x743)))
 (let (($x109 (= $x258 true)))
 (let (($x723 (= $x109 true)))
 (let (($x811 (= $x723 true)))
 (let (($x685 (and $x811 $x195)))
 (let (($x834 (and $x685 $x376)))
 (let (($x184 (and $x834 $x5)))
 (let ((?x23 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (= ?x23 (_ bv0 32))))
 (let ((?x157 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x157 (_ bv1 32))))
 (let (($x435 (and $x245 $x695)))
 (let ((?x175 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x175 (_ bv0 32))))
 (let (($x24 (and $x447 $x435)))
 (let ((?x238 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x238 (_ bv1 32))))
 (let (($x429 (and $x148 $x24)))
 (let (($x827 (and $x429 $x184)))
 (let (($x839 (= ?x651 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x537 (=> $x148 $x839)))
 (let (($x757 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x815 (= $x148 $x757)))
 (let (($x495 (= false false)))
 (let (($x667 (= ?x238 (_ bv0 32))))
 (let (($x804 (=> $x667 $x495)))
 (let (($x207 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x171 (= $x667 $x207)))
 (let (($x793 (and $x171 $x804)))
 (let (($x104 (and $x793 $x815)))
 (let (($x201 (and $x104 $x537)))
 (let (($x427 (and $x201 $x827)))
 (let ((?x273 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x680 (= ?x273 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x27 (bvuge ?x175 (_ bv1 32))))
 (let (($x740 (=> $x27 $x680)))
 (let (($x103 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x607 (= $x27 $x103)))
 (let (($x525 (=> $x447 $x495)))
 (let (($x85 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x153 (= $x447 $x85)))
 (let (($x881 (and $x153 $x525)))
 (let (($x348 (and $x881 $x607)))
 (let (($x151 (and $x348 $x740)))
 (let (($x38 (and $x151 $x427)))
 (let (($x579 (= ?x468 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x51 (=> $x245 $x579)))
 (let (($x582 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x274 (= $x245 $x582)))
 (let (($x290 (= ?x157 (_ bv0 32))))
 (let (($x369 (=> $x290 $x495)))
 (let (($x331 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x631 (= $x290 $x331)))
 (let (($x28 (and $x631 $x369)))
 (let (($x709 (and $x28 $x274)))
 (let (($x826 (and $x709 $x51)))
 (let (($x372 (and $x826 $x38)))
 (let ((?x374 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x746 (= ?x374 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x663 (bvuge ?x23 (_ bv1 32))))
 (let (($x197 (=> $x663 $x746)))
 (let (($x204 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x726 (= $x663 $x204)))
 (let (($x114 (=> $x695 $x495)))
 (let (($x683 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x73 (= $x695 $x683)))
 (let (($x493 (and $x73 $x114)))
 (let (($x395 (and $x493 $x726)))
 (let (($x677 (and $x395 $x197)))
 (let (($x48 (and $x677 $x372)))
 (let (($x635 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x500 (and $x635 $x48)))
 (let (($x546 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x260 (and $x546 $x500)))
 (let (($x886 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x15 (and $x886 $x260)))
 (let (($x373 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x538 (and $x373 $x15)))
 (let (($x762 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x117 (and $x762 $x538)))
 (let (($x13 (and $x495 $x117)))
 (let (($x632 (= ?x651 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x585 (and $x632 $x13)))
 (let (($x405 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x487 (and $x405 $x585)))
 (let (($x228 (and $x495 $x487)))
 (let (($x360 (= ?x273 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x440 (and $x360 $x228)))
 (let (($x884 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x329 (and $x884 $x440)))
 (let (($x235 (and $x495 $x329)))
 (let (($x751 (= ?x468 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x527 (and $x751 $x235)))
 (let (($x505 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x263 (and $x505 $x527)))
 (let (($x96 (and $x495 $x263)))
 (let (($x261 (= ?x374 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x732 (and $x261 $x96)))
 (let (($x86 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x779 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x513)))
 (let (($x363 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x779 $x86)))))))
 (let (($x285 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x643 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x658 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x643 $x285)))))))
 (let (($x126 (bvugt ?x574 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x523)))
 (let (($x247 (=> (bvule ?x574 (bvsub (bvadd ?x574 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x300 $x126)))))))
 (let (($x315 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x445 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x862 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x445)))
 (let (($x735 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x862 $x315)))))))
 (let (($x878 (and $x735 $x247)))
 (let (($x606 (and $x878 $x658)))
 (let (($x232 (and $x606 $x363)))
 (let (($x571 (and $x232 $x732)))
 (let (($x113 (=> $x571 $x224)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x468 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x90 (bvmul (_ bv4294967295 32) ?x468)))
 (let ((?x651 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x12 (bvadd ?x651 ?x90)))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x349 (concat ?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x748 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x124 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x124 (_ bv3 32))))
 (let ((?x600 (concat (select input.dst.llvm-mem ?x6) (concat ?x748 ?x349))))
 (let ((?x262 (bvmul (_ bv4294967295 32) ?x600)))
 (let ((?x742 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x312 (concat ?x742 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x513 (bvadd ?x176 (_ bv3 32))))
 (let ((?x524 (concat (select input.dst.llvm-mem ?x513) (concat ?x134 ?x312))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x267 (concat ?x34 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x574 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x523 (bvadd ?x574 (_ bv3 32))))
 (let ((?x765 (concat (select input.dst.llvm-mem ?x523) (concat ?x120 ?x267))))
 (let ((?x545 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x759 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x545)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x759)))
 (let ((?x301 (bvadd (bvadd (bvadd ?x218 ?x765) ?x524) ?x262)))
 (let (($x362 (= ?x301 ?x12)))
 (let (($x297 (= $x362 true)))
 (let (($x224 (= $x297 true)))
 (let ((?x782 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x503 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x552 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x280 (concat ?x552 (concat ?x503 ?x782)))))
 (let (($x564 (= ?x66 input.dst.llvm-%m)))
 (let (($x284 (= $x564 true)))
 (let (($x5 (= $x284 true)))
 (let (($x661 (= input.dst.llvm-%m ?x66)))
 (let ((?x29 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x879 (= (_ bv0 32) ?x29)))
 (let ((?x485 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x485)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x449 (and $x206 $x131)))
 (let (($x155 (and $x449 $x879)))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x699 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd ?x699 (_ bv1 32))) (select input.dst.llvm-mem ?x699))))
 (let ((?x678 (concat (select input.dst.llvm-mem (bvadd ?x699 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x699 (_ bv2 32))) ?x847))))
 (let ((?x670 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x670 (_ bv1 32))))
 (=> $x190 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x678))))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x501 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x670 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x670 (_ bv1 32))))
 (= $x190 (bvuge ?x501 (_ bv1 32)))))))
 ))
 (let (($x797 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x495 (= false false)))
 (let ((?x670 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x670 (_ bv0 32))))
 (=> $x189 $x495)))))
 ))
 (let (($x563 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x670 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x670 (_ bv0 32))))
 (= $x189 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x128 (and $x563 $x797)))
 (let (($x843 (and $x128 $x322)))
 (let (($x772 (and $x843 $x650)))
 (let (($x457 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x743 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x450 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x264 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x443 (and true $x264)))
 (let (($x432 (= (bvand ?x574 (_ bv4294967292 32)) ?x574)))
 (let (($x483 (and $x432 $x443)))
 (let (($x439 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv8 32))) (bvult ?x124 (bvsub ?x124 (_ bv8 32))))))
 (let (($x818 (and (and (and true $x439) $x483) $x450)))
 (let (($x540 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x347 (and true $x540)))
 (let (($x406 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x555 (and $x406 $x347)))
 (let (($x721 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x574 (bvsub ?x574 (_ bv12 32))) (bvult ?x574 (bvsub ?x574 (_ bv12 32))))))
 (let (($x591 (and (and (and true $x406) $x721) $x555)))
 (let (($x532 (and (and (and (and (and (and $x591 $x818) $x743) $x457) $x772) $x155) $x661)))
 (let (($x377 (= $x532 true)))
 (let (($x820 (= $x377 true)))
 (let (($x376 (= $x820 true)))
 (let (($x239 (= $x591 true)))
 (let (($x76 (= $x239 true)))
 (let (($x195 (= $x76 true)))
 (let (($x258 (and $x818 $x743)))
 (let (($x109 (= $x258 true)))
 (let (($x723 (= $x109 true)))
 (let (($x811 (= $x723 true)))
 (let (($x685 (and $x811 $x195)))
 (let (($x834 (and $x685 $x376)))
 (let (($x184 (and $x834 $x5)))
 (let ((?x23 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x695 (= ?x23 (_ bv0 32))))
 (let ((?x157 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x157 (_ bv1 32))))
 (let (($x435 (and $x245 $x695)))
 (let ((?x175 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x447 (= ?x175 (_ bv0 32))))
 (let (($x24 (and $x447 $x435)))
 (let ((?x238 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x238 (_ bv1 32))))
 (let (($x429 (and $x148 $x24)))
 (let (($x827 (and $x429 $x184)))
 (let (($x839 (= ?x651 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x537 (=> $x148 $x839)))
 (let (($x757 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x815 (= $x148 $x757)))
 (let (($x495 (= false false)))
 (let (($x667 (= ?x238 (_ bv0 32))))
 (let (($x804 (=> $x667 $x495)))
 (let (($x207 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x171 (= $x667 $x207)))
 (let (($x793 (and $x171 $x804)))
 (let (($x104 (and $x793 $x815)))
 (let (($x201 (and $x104 $x537)))
 (let (($x427 (and $x201 $x827)))
 (let ((?x273 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x680 (= ?x273 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x27 (bvuge ?x175 (_ bv1 32))))
 (let (($x740 (=> $x27 $x680)))
 (let (($x103 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x607 (= $x27 $x103)))
 (let (($x525 (=> $x447 $x495)))
 (let (($x85 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x153 (= $x447 $x85)))
 (let (($x881 (and $x153 $x525)))
 (let (($x348 (and $x881 $x607)))
 (let (($x151 (and $x348 $x740)))
 (let (($x38 (and $x151 $x427)))
 (let (($x579 (= ?x468 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x51 (=> $x245 $x579)))
 (let (($x582 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x274 (= $x245 $x582)))
 (let (($x290 (= ?x157 (_ bv0 32))))
 (let (($x369 (=> $x290 $x495)))
 (let (($x331 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x631 (= $x290 $x331)))
 (let (($x28 (and $x631 $x369)))
 (let (($x709 (and $x28 $x274)))
 (let (($x826 (and $x709 $x51)))
 (let (($x372 (and $x826 $x38)))
 (let ((?x374 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x746 (= ?x374 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x663 (bvuge ?x23 (_ bv1 32))))
 (let (($x197 (=> $x663 $x746)))
 (let (($x204 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x726 (= $x663 $x204)))
 (let (($x114 (=> $x695 $x495)))
 (let (($x683 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x73 (= $x695 $x683)))
 (let (($x493 (and $x73 $x114)))
 (let (($x395 (and $x493 $x726)))
 (let (($x677 (and $x395 $x197)))
 (let (($x48 (and $x677 $x372)))
 (let (($x635 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x500 (and $x635 $x48)))
 (let (($x546 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x260 (and $x546 $x500)))
 (let (($x886 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x15 (and $x886 $x260)))
 (let (($x373 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x538 (and $x373 $x15)))
 (let (($x762 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x117 (and $x762 $x538)))
 (let (($x13 (and $x495 $x117)))
 (let (($x632 (= ?x651 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x585 (and $x632 $x13)))
 (let (($x405 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x487 (and $x405 $x585)))
 (let (($x228 (and $x495 $x487)))
 (let (($x360 (= ?x273 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x440 (and $x360 $x228)))
 (let (($x884 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x329 (and $x884 $x440)))
 (let (($x235 (and $x495 $x329)))
 (let (($x751 (= ?x468 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x527 (and $x751 $x235)))
 (let (($x505 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x263 (and $x505 $x527)))
 (let (($x96 (and $x495 $x263)))
 (let (($x261 (= ?x374 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x732 (and $x261 $x96)))
 (let (($x86 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x779 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x513)))
 (let (($x363 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x779 $x86)))))))
 (let (($x285 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x643 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x658 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x643 $x285)))))))
 (let (($x126 (bvugt ?x574 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x523)))
 (let (($x247 (=> (bvule ?x574 (bvsub (bvadd ?x574 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x300 $x126)))))))
 (let (($x315 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x445 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x862 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x445)))
 (let (($x735 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x862 $x315)))))))
 (let (($x878 (and $x735 $x247)))
 (let (($x606 (and $x878 $x658)))
 (let (($x232 (and $x606 $x363)))
 (let (($x571 (and $x232 $x732)))
 (let (($x113 (=> $x571 $x224)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x481 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x369 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x644 (bvadd ?x369 ?x481)))
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x554 (concat ?x370 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x302 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x186 (bvadd ?x302 (_ bv3 32))))
 (let ((?x320 (concat (select input.dst.llvm-mem ?x186) (concat ?x78 ?x554))))
 (let ((?x578 (bvmul (_ bv4294967295 32) ?x320)))
 (let ((?x636 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x605 (concat ?x636 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x6 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x311 (bvadd ?x6 (_ bv3 32))))
 (let ((?x333 (concat (select input.dst.llvm-mem ?x311) (concat ?x143 ?x605))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x889 (concat ?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x862 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x465 (bvadd ?x862 (_ bv3 32))))
 (let ((?x227 (concat (select input.dst.llvm-mem ?x465) (concat ?x270 ?x889))))
 (let ((?x692 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x692)))
 (let ((?x828 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x474)))
 (let ((?x580 (bvadd (bvadd (bvadd ?x828 ?x227) ?x333) ?x578)))
 (let (($x402 (= ?x580 ?x644)))
 (let (($x706 (= $x402 true)))
 (let (($x731 (= $x706 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x687 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x461 (concat ?x687 (concat ?x116 (concat ?x169 ?x105)))))
 (let (($x399 (= ?x461 input.dst.llvm-%m)))
 (let (($x623 (= $x399 true)))
 (let (($x158 (= $x623 true)))
 (let (($x357 (= input.dst.llvm-%m ?x461)))
 (let ((?x281 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x243 (= (_ bv0 32) ?x281)))
 (let ((?x477 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x477)))
 (let (($x458 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x790 (and $x458 $x254)))
 (let (($x94 (and $x790 $x243)))
 (let (($x855 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x568 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv1 32))) (select input.dst.llvm-mem ?x364))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv2 32))) ?x568))))
 (let ((?x244 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x810 (bvuge ?x244 (_ bv1 32))))
 (=> $x810 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x185))))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x442 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x244 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x810 (bvuge ?x244 (_ bv1 32))))
 (= $x810 (bvuge ?x442 (_ bv1 32)))))))
 ))
 (let (($x890 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x651 (= false false)))
 (let ((?x244 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x244 (_ bv0 32))))
 (=> $x136 $x651)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x244 (_ bv0 32))))
 (= $x136 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x789 (and $x162 $x890)))
 (let (($x684 (and $x789 $x556)))
 (let (($x624 (and $x684 $x855)))
 (let (($x834 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x509 (= (bvand ?x302 (_ bv4294967292 32)) ?x302)))
 (let (($x536 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x276 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv4 32))) (bvult ?x6 (bvsub ?x6 (_ bv4 32))))))
 (let (($x767 (and true $x276)))
 (let (($x521 (= (bvand ?x862 (_ bv4294967292 32)) ?x862)))
 (let (($x598 (and $x521 $x767)))
 (let (($x322 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x302 (bvsub ?x302 (_ bv8 32))) (bvult ?x302 (bvsub ?x302 (_ bv8 32))))))
 (let (($x678 (and (and (and true $x322) $x598) $x536)))
 (let (($x622 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x503 (and true $x622)))
 (let (($x131 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x782 (and $x131 $x503)))
 (let (($x97 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x862 (bvsub ?x862 (_ bv12 32))) (bvult ?x862 (bvsub ?x862 (_ bv12 32))))))
 (let (($x66 (and (and (and true $x131) $x97) $x782)))
 (let (($x246 (and (and (and (and (and (and $x66 $x678) $x509) $x834) $x624) $x94) $x357)))
 (let (($x822 (= $x246 true)))
 (let (($x660 (= $x822 true)))
 (let (($x672 (= $x660 true)))
 (let (($x661 (= $x66 true)))
 (let (($x532 (= $x661 true)))
 (let (($x377 (= $x532 true)))
 (let (($x650 (and $x678 $x509)))
 (let (($x772 (= $x650 true)))
 (let (($x79 (= $x772 true)))
 (let (($x206 (= $x79 true)))
 (let (($x820 (and $x206 $x377)))
 (let (($x795 (and $x820 $x672)))
 (let (($x42 (and $x795 $x158)))
 (let ((?x607 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x607 (_ bv1 32))))
 (let ((?x429 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (= ?x429 (_ bv0 32))))
 (let (($x563 (and $x566 $x207)))
 (let ((?x109 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x723 (= ?x109 (_ bv0 32))))
 (let (($x366 (and $x723 $x563)))
 (let ((?x841 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x841 (_ bv1 32))))
 (let (($x797 (and $x188 $x366)))
 (let (($x241 (and $x797 $x42)))
 (let (($x501 (= ?x369 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x882 (=> $x188 $x501)))
 (let (($x560 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x619 (= $x188 $x560)))
 (let (($x651 (= false false)))
 (let (($x819 (= ?x841 (_ bv0 32))))
 (let (($x457 (=> $x819 $x651)))
 (let (($x195 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x708 (= $x819 $x195)))
 (let (($x693 (and $x708 $x457)))
 (let (($x382 (and $x693 $x619)))
 (let (($x152 (and $x382 $x882)))
 (let (($x407 (and $x152 $x241)))
 (let ((?x726 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x378 (= ?x726 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x721 (bvuge ?x109 (_ bv1 32))))
 (let (($x711 (=> $x721 $x378)))
 (let (($x255 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x411 (= $x721 $x255)))
 (let (($x849 (=> $x723 $x651)))
 (let (($x743 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x811 (= $x723 $x743)))
 (let (($x406 (and $x811 $x849)))
 (let (($x160 (and $x406 $x411)))
 (let (($x806 (and $x160 $x711)))
 (let (($x172 (and $x806 $x407)))
 (let ((?x635 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x846 (= ?x635 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x213 (bvuge ?x429 (_ bv1 32))))
 (let (($x264 (=> $x213 $x846)))
 (let (($x432 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x716 (= $x213 $x432)))
 (let (($x223 (=> $x566 $x651)))
 (let (($x435 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x482 (= $x566 $x435)))
 (let (($x611 (and $x482 $x223)))
 (let (($x393 (and $x611 $x716)))
 (let (($x443 (and $x393 $x264)))
 (let (($x396 (and $x443 $x172)))
 (let (($x793 (= ?x481 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x148 (=> $x207 $x793)))
 (let (($x9 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x171 (= $x207 $x9)))
 (let (($x348 (= ?x607 (_ bv0 32))))
 (let (($x680 (=> $x348 $x651)))
 (let (($x27 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x36 (= $x348 $x27)))
 (let (($x740 (and $x36 $x680)))
 (let (($x804 (and $x740 $x171)))
 (let (($x757 (and $x804 $x148)))
 (let (($x766 (and $x757 $x396)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x794 (and $x175 $x766)))
 (let (($x826 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x352 (and $x826 $x794)))
 (let (($x579 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x610 (and $x579 $x352)))
 (let (($x709 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x55 (and $x709 $x610)))
 (let (($x582 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x343 (and $x582 $x55)))
 (let (($x8 (and $x651 $x343)))
 (let (($x28 (= ?x369 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x75 (and $x28 $x8)))
 (let (($x746 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x594 (and $x746 $x75)))
 (let (($x387 (and $x651 $x594)))
 (let (($x395 (= ?x726 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x842 (and $x395 $x387)))
 (let (($x695 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x307 (and $x695 $x842)))
 (let (($x257 (and $x651 $x307)))
 (let (($x112 (= ?x635 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x288 (and $x112 $x257)))
 (let (($x632 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x316 (and $x632 $x288)))
 (let (($x250 (and $x651 $x316)))
 (let (($x405 (= ?x481 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x518 (and $x405 $x250)))
 (let (($x138 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x470 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x261 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x470 $x138)))))))
 (let (($x519 (bvugt ?x302 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x592 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x415 (=> (bvule ?x302 (bvsub (bvadd ?x302 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x592 $x519)))))))
 (let (($x860 (bvugt ?x862 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x799 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x504 (=> (bvule ?x862 (bvsub (bvadd ?x862 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x799 $x860)))))))
 (let (($x674 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x445 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x110 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x445 $x674)))))))
 (let (($x344 (and $x110 $x504)))
 (let (($x132 (and $x344 $x415)))
 (let (($x183 (and $x132 $x261)))
 (let (($x754 (and $x183 $x518)))
 (let (($x173 (=> $x754 $x731)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x481 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x369 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x644 (bvadd ?x369 ?x481)))
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x554 (concat ?x370 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x302 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x186 (bvadd ?x302 (_ bv3 32))))
 (let ((?x320 (concat (select input.dst.llvm-mem ?x186) (concat ?x78 ?x554))))
 (let ((?x578 (bvmul (_ bv4294967295 32) ?x320)))
 (let ((?x636 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x605 (concat ?x636 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x6 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x311 (bvadd ?x6 (_ bv3 32))))
 (let ((?x333 (concat (select input.dst.llvm-mem ?x311) (concat ?x143 ?x605))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x889 (concat ?x83 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x862 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x465 (bvadd ?x862 (_ bv3 32))))
 (let ((?x227 (concat (select input.dst.llvm-mem ?x465) (concat ?x270 ?x889))))
 (let ((?x692 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x692)))
 (let ((?x828 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x474)))
 (let ((?x580 (bvadd (bvadd (bvadd ?x828 ?x227) ?x333) ?x578)))
 (let (($x402 (= ?x580 ?x644)))
 (let (($x706 (= $x402 true)))
 (let (($x731 (= $x706 true)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x687 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x461 (concat ?x687 (concat ?x116 (concat ?x169 ?x105)))))
 (let (($x399 (= ?x461 input.dst.llvm-%m)))
 (let (($x623 (= $x399 true)))
 (let (($x158 (= $x623 true)))
 (let (($x357 (= input.dst.llvm-%m ?x461)))
 (let ((?x281 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x243 (= (_ bv0 32) ?x281)))
 (let ((?x477 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x477)))
 (let (($x458 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x790 (and $x458 $x254)))
 (let (($x94 (and $x790 $x243)))
 (let (($x855 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x568 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv1 32))) (select input.dst.llvm-mem ?x364))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv2 32))) ?x568))))
 (let ((?x244 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x810 (bvuge ?x244 (_ bv1 32))))
 (=> $x810 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x185))))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x442 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x244 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x810 (bvuge ?x244 (_ bv1 32))))
 (= $x810 (bvuge ?x442 (_ bv1 32)))))))
 ))
 (let (($x890 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x651 (= false false)))
 (let ((?x244 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x244 (_ bv0 32))))
 (=> $x136 $x651)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x244 (_ bv0 32))))
 (= $x136 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x789 (and $x162 $x890)))
 (let (($x684 (and $x789 $x556)))
 (let (($x624 (and $x684 $x855)))
 (let (($x834 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x509 (= (bvand ?x302 (_ bv4294967292 32)) ?x302)))
 (let (($x536 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x276 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv4 32))) (bvult ?x6 (bvsub ?x6 (_ bv4 32))))))
 (let (($x767 (and true $x276)))
 (let (($x521 (= (bvand ?x862 (_ bv4294967292 32)) ?x862)))
 (let (($x598 (and $x521 $x767)))
 (let (($x322 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x302 (bvsub ?x302 (_ bv8 32))) (bvult ?x302 (bvsub ?x302 (_ bv8 32))))))
 (let (($x678 (and (and (and true $x322) $x598) $x536)))
 (let (($x622 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x503 (and true $x622)))
 (let (($x131 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x782 (and $x131 $x503)))
 (let (($x97 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x862 (bvsub ?x862 (_ bv12 32))) (bvult ?x862 (bvsub ?x862 (_ bv12 32))))))
 (let (($x66 (and (and (and true $x131) $x97) $x782)))
 (let (($x246 (and (and (and (and (and (and $x66 $x678) $x509) $x834) $x624) $x94) $x357)))
 (let (($x822 (= $x246 true)))
 (let (($x660 (= $x822 true)))
 (let (($x672 (= $x660 true)))
 (let (($x661 (= $x66 true)))
 (let (($x532 (= $x661 true)))
 (let (($x377 (= $x532 true)))
 (let (($x650 (and $x678 $x509)))
 (let (($x772 (= $x650 true)))
 (let (($x79 (= $x772 true)))
 (let (($x206 (= $x79 true)))
 (let (($x820 (and $x206 $x377)))
 (let (($x795 (and $x820 $x672)))
 (let (($x42 (and $x795 $x158)))
 (let ((?x607 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x607 (_ bv1 32))))
 (let ((?x429 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (= ?x429 (_ bv0 32))))
 (let (($x563 (and $x566 $x207)))
 (let ((?x109 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x723 (= ?x109 (_ bv0 32))))
 (let (($x366 (and $x723 $x563)))
 (let ((?x841 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x841 (_ bv1 32))))
 (let (($x797 (and $x188 $x366)))
 (let (($x241 (and $x797 $x42)))
 (let (($x501 (= ?x369 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x882 (=> $x188 $x501)))
 (let (($x560 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x619 (= $x188 $x560)))
 (let (($x651 (= false false)))
 (let (($x819 (= ?x841 (_ bv0 32))))
 (let (($x457 (=> $x819 $x651)))
 (let (($x195 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x708 (= $x819 $x195)))
 (let (($x693 (and $x708 $x457)))
 (let (($x382 (and $x693 $x619)))
 (let (($x152 (and $x382 $x882)))
 (let (($x407 (and $x152 $x241)))
 (let ((?x726 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x378 (= ?x726 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x721 (bvuge ?x109 (_ bv1 32))))
 (let (($x711 (=> $x721 $x378)))
 (let (($x255 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x411 (= $x721 $x255)))
 (let (($x849 (=> $x723 $x651)))
 (let (($x743 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x811 (= $x723 $x743)))
 (let (($x406 (and $x811 $x849)))
 (let (($x160 (and $x406 $x411)))
 (let (($x806 (and $x160 $x711)))
 (let (($x172 (and $x806 $x407)))
 (let ((?x635 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x846 (= ?x635 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x213 (bvuge ?x429 (_ bv1 32))))
 (let (($x264 (=> $x213 $x846)))
 (let (($x432 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x716 (= $x213 $x432)))
 (let (($x223 (=> $x566 $x651)))
 (let (($x435 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x482 (= $x566 $x435)))
 (let (($x611 (and $x482 $x223)))
 (let (($x393 (and $x611 $x716)))
 (let (($x443 (and $x393 $x264)))
 (let (($x396 (and $x443 $x172)))
 (let (($x793 (= ?x481 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x148 (=> $x207 $x793)))
 (let (($x9 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x171 (= $x207 $x9)))
 (let (($x348 (= ?x607 (_ bv0 32))))
 (let (($x680 (=> $x348 $x651)))
 (let (($x27 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x36 (= $x348 $x27)))
 (let (($x740 (and $x36 $x680)))
 (let (($x804 (and $x740 $x171)))
 (let (($x757 (and $x804 $x148)))
 (let (($x766 (and $x757 $x396)))
 (let (($x175 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x794 (and $x175 $x766)))
 (let (($x826 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x352 (and $x826 $x794)))
 (let (($x579 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x610 (and $x579 $x352)))
 (let (($x709 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x55 (and $x709 $x610)))
 (let (($x582 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x343 (and $x582 $x55)))
 (let (($x8 (and $x651 $x343)))
 (let (($x28 (= ?x369 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x75 (and $x28 $x8)))
 (let (($x746 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x594 (and $x746 $x75)))
 (let (($x387 (and $x651 $x594)))
 (let (($x395 (= ?x726 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x842 (and $x395 $x387)))
 (let (($x695 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x307 (and $x695 $x842)))
 (let (($x257 (and $x651 $x307)))
 (let (($x112 (= ?x635 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x288 (and $x112 $x257)))
 (let (($x632 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x316 (and $x632 $x288)))
 (let (($x250 (and $x651 $x316)))
 (let (($x405 (= ?x481 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x518 (and $x405 $x250)))
 (let (($x138 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x470 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x261 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x470 $x138)))))))
 (let (($x519 (bvugt ?x302 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x592 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x415 (=> (bvule ?x302 (bvsub (bvadd ?x302 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x592 $x519)))))))
 (let (($x860 (bvugt ?x862 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x799 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x504 (=> (bvule ?x862 (bvsub (bvadd ?x862 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x799 $x860)))))))
 (let (($x674 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x445 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x110 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x445 $x674)))))))
 (let (($x344 (and $x110 $x504)))
 (let (($x132 (and $x344 $x415)))
 (let (($x183 (and $x132 $x261)))
 (let (($x754 (and $x183 $x518)))
 (let (($x173 (=> $x754 $x731)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x815 (concat ?x21 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x285 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x850 (bvadd ?x285 (_ bv3 32))))
 (let ((?x639 (concat (select input.dst.llvm-mem ?x850) (concat ?x150 ?x815))))
 (let ((?x803 (bvmul (_ bv4294967295 32) ?x639)))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x670 (concat ?x358 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x483 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x186 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x498 (bvadd ?x186 (_ bv3 32))))
 (let ((?x450 (concat (select input.dst.llvm-mem ?x498) (concat ?x483 ?x670))))
 (let ((?x816 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x673 (concat ?x816 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x572 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x674 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x877 (bvadd ?x674 (_ bv3 32))))
 (let ((?x555 (concat (select input.dst.llvm-mem ?x877) (concat ?x572 ?x673))))
 (let ((?x887 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x887)))
 (let ((?x780 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x69)))
 (let ((?x840 (bvadd (bvadd (bvadd ?x780 ?x555) ?x450) ?x803)))
 (let ((?x223 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x85 (= ?x223 ?x840)))
 (let (($x153 (= $x85 true)))
 (let (($x151 (= $x153 true)))
 (let ((?x299 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x742 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x748 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x748 (concat ?x298 (concat ?x742 ?x299)))))
 (let (($x362 (= ?x107 input.dst.llvm-%m)))
 (let (($x297 (= $x362 true)))
 (let (($x224 (= $x297 true)))
 (let (($x381 (= input.dst.llvm-%m ?x107)))
 (let ((?x500 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x430 (= (_ bv0 32) ?x500)))
 (let ((?x38 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x372 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x427 $x372)))
 (let (($x426 (and $x48 $x430)))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x759 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x759 (_ bv1 32))) (select input.dst.llvm-mem ?x759))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x759 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x759 (_ bv2 32))) ?x34))))
 (let ((?x73 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x73 (_ bv1 32))))
 (=> $x117 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x267))))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x495 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x73 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x73 (_ bv1 32))))
 (= $x117 (bvuge ?x495 (_ bv1 32)))))))
 ))
 (let (($x886 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x73 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x73 (_ bv0 32))))
 (=> $x114 $x369)))))
 ))
 (let (($x762 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x73 (_ bv0 32))))
 (= $x114 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x859 (and $x762 $x886)))
 (let (($x487 (and $x859 $x564)))
 (let (($x184 (and $x487 $x5)))
 (let (($x795 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x784 (= (bvand ?x285 (_ bv4294967292 32)) ?x285)))
 (let (($x448 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv4 32))) (bvult ?x186 (bvsub ?x186 (_ bv4 32))))))
 (let (($x296 (and true $x122)))
 (let (($x585 (= (bvand ?x674 (_ bv4294967292 32)) ?x674)))
 (let (($x880 (and $x585 $x296)))
 (let (($x556 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x285 (bvsub ?x285 (_ bv8 32))) (bvult ?x285 (bvsub ?x285 (_ bv8 32))))))
 (let (($x185 (and (and (and true $x556) $x880) $x448)))
 (let (($x472 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x169 (and true $x472)))
 (let (($x254 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x105 (and $x254 $x169)))
 (let (($x529 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x674 (bvsub ?x674 (_ bv12 32))) (bvult ?x674 (bvsub ?x674 (_ bv12 32))))))
 (let (($x461 (and (and (and true $x254) $x529) $x105)))
 (let (($x262 (and (and (and (and (and (and $x461 $x185) $x784) $x795) $x184) $x426) $x381)))
 (let (($x600 (= $x262 true)))
 (let (($x301 (= $x600 true)))
 (let (($x90 (= $x301 true)))
 (let (($x357 (= $x461 true)))
 (let (($x246 (= $x357 true)))
 (let (($x822 (= $x246 true)))
 (let (($x855 (and $x185 $x784)))
 (let (($x624 (= $x855 true)))
 (let (($x490 (= $x624 true)))
 (let (($x458 (= $x490 true)))
 (let (($x660 (and $x458 $x822)))
 (let (($x12 (and $x660 $x90)))
 (let (($x593 (and $x12 $x224)))
 (let ((?x411 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x411 (_ bv0 32))))
 (let ((?x797 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x797 (_ bv0 32))))
 (let (($x162 (and $x190 $x160)))
 (let ((?x772 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x772 (_ bv0 32))))
 (let (($x410 (and $x79 $x162)))
 (let ((?x168 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x538 (bvuge ?x168 (_ bv1 32))))
 (let (($x890 (and $x538 $x410)))
 (let (($x113 (and $x890 $x593)))
 (let (($x442 (= ?x223 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x665 (=> $x538 $x442)))
 (let (($x573 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x58 (= $x538 $x573)))
 (let (($x369 (= false false)))
 (let (($x616 (= ?x168 (_ bv0 32))))
 (let (($x834 (=> $x616 $x369)))
 (let (($x377 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x376 (= $x616 $x377)))
 (let (($x57 (and $x376 $x834)))
 (let (($x647 (and $x57 $x58)))
 (let (($x597 (and $x647 $x665)))
 (let (($x561 (and $x597 $x113)))
 (let ((?x171 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x460 (= ?x171 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x97 (bvuge ?x772 (_ bv1 32))))
 (let (($x236 (=> $x97 $x460)))
 (let (($x155 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x824 (= $x97 $x155)))
 (let (($x485 (=> $x79 $x369)))
 (let (($x509 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x206 (= $x79 $x509)))
 (let (($x131 (and $x206 $x485)))
 (let (($x280 (and $x131 $x824)))
 (let (($x552 (and $x280 $x236)))
 (let (($x404 (and $x552 $x561)))
 (let ((?x175 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x689 (= ?x175 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x699 (bvuge ?x797 (_ bv1 32))))
 (let (($x276 (=> $x699 $x689)))
 (let (($x521 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x39 (= $x699 $x521)))
 (let (($x851 (=> $x190 $x369)))
 (let (($x563 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x128 (= $x190 $x563)))
 (let (($x419 (and $x128 $x851)))
 (let (($x854 (and $x419 $x39)))
 (let (($x767 (and $x854 $x276)))
 (let (($x703 (and $x767 $x404)))
 (let ((?x861 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x693 (= ?x861 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x195 (bvuge ?x411 (_ bv1 32))))
 (let (($x188 (=> $x195 $x693)))
 (let (($x239 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x708 (= $x195 $x239)))
 (let (($x378 (=> $x160 $x369)))
 (let (($x721 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x416 (= $x160 $x721)))
 (let (($x711 (and $x416 $x378)))
 (let (($x457 (and $x711 $x708)))
 (let (($x560 (and $x457 $x188)))
 (let (($x576 (and $x560 $x703)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x494 (and $x109 $x576)))
 (let (($x443 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x22 (and $x443 $x494)))
 (let (($x846 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x805 (and $x846 $x22)))
 (let (($x393 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x508 (and $x393 $x805)))
 (let (($x432 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x669 (and $x432 $x508)))
 (let (($x318 (and $x369 $x669)))
 (let (($x611 (= ?x223 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x792 (and $x611 $x318)))
 (let (($x793 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x342 (and $x793 $x792)))
 (let (($x286 (and $x369 $x342)))
 (let (($x804 (= ?x171 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x174 (and $x804 $x286)))
 (let (($x348 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x464 (and $x348 $x174)))
 (let (($x712 (and $x369 $x464)))
 (let (($x103 (= ?x175 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x512 (and $x103 $x712)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x714 (and $x28 $x512)))
 (let (($x111 (and $x369 $x714)))
 (let (($x746 (= ?x861 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x166 (and $x746 $x111)))
 (let (($x232 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x498)))
 (let (($x405 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x363 $x232)))))))
 (let (($x606 (bvugt ?x285 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x658 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x850)))
 (let (($x86 (=> (bvule ?x285 (bvsub (bvadd ?x285 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x658 $x606)))))))
 (let (($x878 (bvugt ?x674 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x877)))
 (let (($x643 (=> (bvule ?x674 (bvsub (bvadd ?x674 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x878)))))))
 (let (($x837 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x384 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x735 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x384)))
 (let (($x126 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x735 $x837)))))))
 (let (($x124 (and $x126 $x643)))
 (let (($x68 (and $x124 $x86)))
 (let (($x191 (and $x68 $x405)))
 (let (($x656 (and $x191 $x166)))
 (let (($x50 (=> $x656 $x151)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x815 (concat ?x21 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x285 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x850 (bvadd ?x285 (_ bv3 32))))
 (let ((?x639 (concat (select input.dst.llvm-mem ?x850) (concat ?x150 ?x815))))
 (let ((?x803 (bvmul (_ bv4294967295 32) ?x639)))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x670 (concat ?x358 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x483 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x186 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x498 (bvadd ?x186 (_ bv3 32))))
 (let ((?x450 (concat (select input.dst.llvm-mem ?x498) (concat ?x483 ?x670))))
 (let ((?x816 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x673 (concat ?x816 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x572 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x674 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x877 (bvadd ?x674 (_ bv3 32))))
 (let ((?x555 (concat (select input.dst.llvm-mem ?x877) (concat ?x572 ?x673))))
 (let ((?x887 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x887)))
 (let ((?x780 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x69)))
 (let ((?x840 (bvadd (bvadd (bvadd ?x780 ?x555) ?x450) ?x803)))
 (let ((?x223 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x85 (= ?x223 ?x840)))
 (let (($x153 (= $x85 true)))
 (let (($x151 (= $x153 true)))
 (let ((?x299 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x742 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x748 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x748 (concat ?x298 (concat ?x742 ?x299)))))
 (let (($x362 (= ?x107 input.dst.llvm-%m)))
 (let (($x297 (= $x362 true)))
 (let (($x224 (= $x297 true)))
 (let (($x381 (= input.dst.llvm-%m ?x107)))
 (let ((?x500 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x430 (= (_ bv0 32) ?x500)))
 (let ((?x38 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x372 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x427 $x372)))
 (let (($x426 (and $x48 $x430)))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x759 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x759 (_ bv1 32))) (select input.dst.llvm-mem ?x759))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x759 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x759 (_ bv2 32))) ?x34))))
 (let ((?x73 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x73 (_ bv1 32))))
 (=> $x117 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x267))))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x495 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x73 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x73 (_ bv1 32))))
 (= $x117 (bvuge ?x495 (_ bv1 32)))))))
 ))
 (let (($x886 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x73 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x73 (_ bv0 32))))
 (=> $x114 $x369)))))
 ))
 (let (($x762 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x73 (_ bv0 32))))
 (= $x114 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x859 (and $x762 $x886)))
 (let (($x487 (and $x859 $x564)))
 (let (($x184 (and $x487 $x5)))
 (let (($x795 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x784 (= (bvand ?x285 (_ bv4294967292 32)) ?x285)))
 (let (($x448 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let (($x122 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv4 32))) (bvult ?x186 (bvsub ?x186 (_ bv4 32))))))
 (let (($x296 (and true $x122)))
 (let (($x585 (= (bvand ?x674 (_ bv4294967292 32)) ?x674)))
 (let (($x880 (and $x585 $x296)))
 (let (($x556 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x285 (bvsub ?x285 (_ bv8 32))) (bvult ?x285 (bvsub ?x285 (_ bv8 32))))))
 (let (($x185 (and (and (and true $x556) $x880) $x448)))
 (let (($x472 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x169 (and true $x472)))
 (let (($x254 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x105 (and $x254 $x169)))
 (let (($x529 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x674 (bvsub ?x674 (_ bv12 32))) (bvult ?x674 (bvsub ?x674 (_ bv12 32))))))
 (let (($x461 (and (and (and true $x254) $x529) $x105)))
 (let (($x262 (and (and (and (and (and (and $x461 $x185) $x784) $x795) $x184) $x426) $x381)))
 (let (($x600 (= $x262 true)))
 (let (($x301 (= $x600 true)))
 (let (($x90 (= $x301 true)))
 (let (($x357 (= $x461 true)))
 (let (($x246 (= $x357 true)))
 (let (($x822 (= $x246 true)))
 (let (($x855 (and $x185 $x784)))
 (let (($x624 (= $x855 true)))
 (let (($x490 (= $x624 true)))
 (let (($x458 (= $x490 true)))
 (let (($x660 (and $x458 $x822)))
 (let (($x12 (and $x660 $x90)))
 (let (($x593 (and $x12 $x224)))
 (let ((?x411 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x411 (_ bv0 32))))
 (let ((?x797 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x797 (_ bv0 32))))
 (let (($x162 (and $x190 $x160)))
 (let ((?x772 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x772 (_ bv0 32))))
 (let (($x410 (and $x79 $x162)))
 (let ((?x168 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x538 (bvuge ?x168 (_ bv1 32))))
 (let (($x890 (and $x538 $x410)))
 (let (($x113 (and $x890 $x593)))
 (let (($x442 (= ?x223 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x665 (=> $x538 $x442)))
 (let (($x573 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x58 (= $x538 $x573)))
 (let (($x369 (= false false)))
 (let (($x616 (= ?x168 (_ bv0 32))))
 (let (($x834 (=> $x616 $x369)))
 (let (($x377 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x376 (= $x616 $x377)))
 (let (($x57 (and $x376 $x834)))
 (let (($x647 (and $x57 $x58)))
 (let (($x597 (and $x647 $x665)))
 (let (($x561 (and $x597 $x113)))
 (let ((?x171 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x460 (= ?x171 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x97 (bvuge ?x772 (_ bv1 32))))
 (let (($x236 (=> $x97 $x460)))
 (let (($x155 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x824 (= $x97 $x155)))
 (let (($x485 (=> $x79 $x369)))
 (let (($x509 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x206 (= $x79 $x509)))
 (let (($x131 (and $x206 $x485)))
 (let (($x280 (and $x131 $x824)))
 (let (($x552 (and $x280 $x236)))
 (let (($x404 (and $x552 $x561)))
 (let ((?x175 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x689 (= ?x175 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x699 (bvuge ?x797 (_ bv1 32))))
 (let (($x276 (=> $x699 $x689)))
 (let (($x521 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x39 (= $x699 $x521)))
 (let (($x851 (=> $x190 $x369)))
 (let (($x563 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x128 (= $x190 $x563)))
 (let (($x419 (and $x128 $x851)))
 (let (($x854 (and $x419 $x39)))
 (let (($x767 (and $x854 $x276)))
 (let (($x703 (and $x767 $x404)))
 (let ((?x861 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x693 (= ?x861 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x195 (bvuge ?x411 (_ bv1 32))))
 (let (($x188 (=> $x195 $x693)))
 (let (($x239 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x708 (= $x195 $x239)))
 (let (($x378 (=> $x160 $x369)))
 (let (($x721 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x416 (= $x160 $x721)))
 (let (($x711 (and $x416 $x378)))
 (let (($x457 (and $x711 $x708)))
 (let (($x560 (and $x457 $x188)))
 (let (($x576 (and $x560 $x703)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x494 (and $x109 $x576)))
 (let (($x443 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x22 (and $x443 $x494)))
 (let (($x846 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x805 (and $x846 $x22)))
 (let (($x393 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x508 (and $x393 $x805)))
 (let (($x432 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x669 (and $x432 $x508)))
 (let (($x318 (and $x369 $x669)))
 (let (($x611 (= ?x223 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x792 (and $x611 $x318)))
 (let (($x793 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x342 (and $x793 $x792)))
 (let (($x286 (and $x369 $x342)))
 (let (($x804 (= ?x171 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x174 (and $x804 $x286)))
 (let (($x348 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x464 (and $x348 $x174)))
 (let (($x712 (and $x369 $x464)))
 (let (($x103 (= ?x175 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x512 (and $x103 $x712)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x714 (and $x28 $x512)))
 (let (($x111 (and $x369 $x714)))
 (let (($x746 (= ?x861 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x166 (and $x746 $x111)))
 (let (($x232 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x498)))
 (let (($x405 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x363 $x232)))))))
 (let (($x606 (bvugt ?x285 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x658 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x850)))
 (let (($x86 (=> (bvule ?x285 (bvsub (bvadd ?x285 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x658 $x606)))))))
 (let (($x878 (bvugt ?x674 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x877)))
 (let (($x643 (=> (bvule ?x674 (bvsub (bvadd ?x674 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x247 $x878)))))))
 (let (($x837 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x384 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x735 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x384)))
 (let (($x126 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x735 $x837)))))))
 (let (($x124 (and $x126 $x643)))
 (let (($x68 (and $x124 $x86)))
 (let (($x191 (and $x68 $x405)))
 (let (($x656 (and $x191 $x166)))
 (let (($x50 (=> $x656 $x151)))
 (not $x50)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 240 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x109 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x811 (bvmul (_ bv4294967295 32) ?x109)))
 (let ((?x685 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x811)))
 (let ((?x619 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x382 (concat ?x619 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x501 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x519 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x176 (bvadd ?x519 (_ bv3 32))))
 (let ((?x843 (concat (select input.dst.llvm-mem ?x176) (concat ?x501 ?x382))))
 (let ((?x14 (bvmul (_ bv4294967295 32) ?x843)))
 (let ((?x244 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x136 (concat ?x244 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x696 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x850 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x374 (bvadd ?x850 (_ bv3 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem ?x374) (concat ?x696 ?x136))))
 (let ((?x638 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x730 (concat ?x638 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x735 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x679 (bvadd ?x735 (_ bv3 32))))
 (let ((?x66 (concat (select input.dst.llvm-mem ?x679) (concat ?x622 ?x730))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x235)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x96)))
 (let ((?x743 (bvadd (bvadd (bvadd ?x329 ?x66) ?x269) ?x14)))
 (let (($x841 (= ?x743 ?x685)))
 (let (($x819 (= $x841 true)))
 (let (($x667 (= $x819 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x605 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x469 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x798 (concat ?x130 (concat ?x469 (concat ?x605 ?x93)))))
 (let (($x731 (= ?x798 input.dst.llvm-%m)))
 (let (($x173 (= $x731 true)))
 (let (($x513 (= $x173 true)))
 (let (($x333 (= input.dst.llvm-%m ?x798)))
 (let ((?x164 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x37 (= (_ bv0 32) ?x164)))
 (let ((?x396 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x766 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x396)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x794 (and $x172 $x766)))
 (let (($x143 (and $x794 $x37)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x828 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x492))))
 (let ((?x680 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x680 (_ bv1 32))))
 (=> $x8 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x193))))))))
 ))
 (let (($x594 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x525 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x680 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x680 (_ bv1 32))))
 (= $x8 (bvuge ?x525 (_ bv1 32)))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x223 (= false false)))
 (let ((?x680 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x680 (_ bv0 32))))
 (=> $x467 $x223)))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x680 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x680 (_ bv0 32))))
 (= $x467 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x266 (and $x274 $x23)))
 (let (($x336 (and $x266 $x594)))
 (let (($x407 (and $x336 $x42)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= (bvand ?x519 (_ bv4294967292 32)) ?x519)))
 (let (($x218 (= (bvand ?x850 (_ bv4294967292 32)) ?x850)))
 (let (($x891 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x850 (bvsub ?x850 (_ bv4 32))) (bvult ?x850 (bvsub ?x850 (_ bv4 32))))))
 (let (($x814 (and true $x891)))
 (let (($x75 (= (bvand ?x735 (_ bv4294967292 32)) ?x735)))
 (let (($x479 (and $x75 $x814)))
 (let (($x564 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x519 (bvsub ?x519 (_ bv8 32))) (bvult ?x519 (bvsub ?x519 (_ bv8 32))))))
 (let (($x267 (and (and (and true $x564) $x479) $x218)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x742 (and true $x40)))
 (let (($x372 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x299 (and $x372 $x742)))
 (let (($x729 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x735 (bvsub ?x735 (_ bv12 32))) (bvult ?x735 (bvsub ?x735 (_ bv12 32))))))
 (let (($x107 (and (and (and true $x372) $x729) $x299)))
 (let (($x320 (and (and (and (and (and (and $x107 $x267) $x284) $x12) $x407) $x143) $x333)))
 (let (($x580 (= $x320 true)))
 (let (($x644 (= $x580 true)))
 (let (($x402 (= $x644 true)))
 (let (($x381 (= $x107 true)))
 (let (($x262 (= $x381 true)))
 (let (($x600 (= $x262 true)))
 (let (($x5 (and $x267 $x284)))
 (let (($x184 (= $x5 true)))
 (let (($x349 (= $x184 true)))
 (let (($x427 (= $x349 true)))
 (let (($x301 (and $x427 $x600)))
 (let (($x706 (and $x301 $x402)))
 (let (($x823 (and $x706 $x513)))
 (let ((?x824 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x824 (_ bv1 32))))
 (let ((?x890 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x890 (_ bv1 32))))
 (let (($x762 (and $x364 $x377)))
 (let ((?x624 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x529 (bvuge ?x624 (_ bv1 32))))
 (let (($x373 (and $x529 $x762)))
 (let ((?x524 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x885 (= ?x524 (_ bv0 32))))
 (let (($x886 (and $x885 $x373)))
 (let (($x53 (and $x886 $x823)))
 (let ((?x851 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x495 (= ?x851 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x55 (bvuge ?x524 (_ bv1 32))))
 (let (($x704 (=> $x55 $x495)))
 (let (($x761 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x677 (= $x55 $x761)))
 (let (($x223 (= false false)))
 (let (($x795 (=> $x885 $x223)))
 (let (($x822 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x672 (= $x885 $x822)))
 (let (($x226 (and $x672 $x795)))
 (let (($x290 (and $x226 $x677)))
 (let (($x309 (and $x290 $x704)))
 (let (($x56 (and $x309 $x53)))
 (let ((?x708 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x637 (= ?x708 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x614 (=> $x529 $x637)))
 (let (($x94 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x785 (= $x529 $x94)))
 (let (($x490 (= ?x624 (_ bv0 32))))
 (let (($x477 (=> $x490 $x223)))
 (let (($x784 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x458 (= $x490 $x784)))
 (let (($x254 (and $x458 $x477)))
 (let (($x687 (and $x254 $x785)))
 (let (($x116 (and $x687 $x614)))
 (let (($x505 (and $x116 $x56)))
 (let (($x604 (= ?x109 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x122 (=> $x364 $x604)))
 (let (($x585 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x210 (= $x364 $x585)))
 (let (($x810 (= ?x890 (_ bv0 32))))
 (let (($x200 (=> $x810 $x223)))
 (let (($x162 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x789 (= $x810 $x162)))
 (let (($x383 (and $x789 $x200)))
 (let (($x330 (and $x383 $x210)))
 (let (($x296 (and $x330 $x122)))
 (let (($x157 (and $x296 $x505)))
 (let ((?x881 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x57 (= ?x881 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x538 (=> $x377 $x57)))
 (let (($x661 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x376 (= $x377 $x661)))
 (let (($x280 (= ?x824 (_ bv0 32))))
 (let (($x460 (=> $x280 $x223)))
 (let (($x97 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x135 (= $x280 $x97)))
 (let (($x236 (and $x135 $x460)))
 (let (($x834 (and $x236 $x376)))
 (let (($x573 (and $x834 $x538)))
 (let (($x845 (and $x573 $x157)))
 (let (($x772 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x844 (and $x772 $x845)))
 (let (($x767 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x468 (and $x767 $x844)))
 (let (($x689 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x751 (and $x689 $x468)))
 (let (($x854 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x884 (and $x854 $x751)))
 (let (($x521 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x304 (and $x521 $x884)))
 (let (($x493 (and $x223 $x304)))
 (let (($x419 (= ?x851 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x331 (and $x419 $x493)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x663 (and $x693 $x331)))
 (let (($x775 (and $x223 $x663)))
 (let (($x457 (= ?x708 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x546 (and $x457 $x775)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x273 (and $x160 $x546)))
 (let (($x434 (and $x223 $x273)))
 (let (($x255 (= ?x109 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x260 (and $x255 $x434)))
 (let (($x611 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x7 (and $x611 $x260)))
 (let (($x530 (and $x223 $x7)))
 (let (($x793 (= ?x881 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x339 (and $x793 $x530)))
 (let (($x183 (bvugt ?x850 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x374)))
 (let (($x746 (=> (bvule ?x850 (bvsub (bvadd ?x850 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x261 $x183)))))))
 (let (($x132 (bvugt ?x519 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x415 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x138 (=> (bvule ?x519 (bvsub (bvadd ?x519 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x415 $x132)))))))
 (let (($x344 (bvugt ?x735 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x504 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x679)))
 (let (($x592 (=> (bvule ?x735 (bvsub (bvadd ?x735 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x504 $x344)))))))
 (let (($x584 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x674 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x674)))
 (let (($x860 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x300 $x584)))))))
 (let (($x302 (and $x860 $x592)))
 (let (($x779 (and $x302 $x138)))
 (let (($x360 (and $x779 $x746)))
 (let (($x228 (and $x360 $x339)))
 (let (($x745 (=> $x228 $x667)))
 (not $x745)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x109 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x811 (bvmul (_ bv4294967295 32) ?x109)))
 (let ((?x685 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x811)))
 (let ((?x619 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x382 (concat ?x619 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x501 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x519 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x176 (bvadd ?x519 (_ bv3 32))))
 (let ((?x843 (concat (select input.dst.llvm-mem ?x176) (concat ?x501 ?x382))))
 (let ((?x14 (bvmul (_ bv4294967295 32) ?x843)))
 (let ((?x244 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x136 (concat ?x244 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x696 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x850 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x374 (bvadd ?x850 (_ bv3 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem ?x374) (concat ?x696 ?x136))))
 (let ((?x638 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x730 (concat ?x638 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x735 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x679 (bvadd ?x735 (_ bv3 32))))
 (let ((?x66 (concat (select input.dst.llvm-mem ?x679) (concat ?x622 ?x730))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x235)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x96)))
 (let ((?x743 (bvadd (bvadd (bvadd ?x329 ?x66) ?x269) ?x14)))
 (let (($x841 (= ?x743 ?x685)))
 (let (($x819 (= $x841 true)))
 (let (($x667 (= $x819 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x605 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x469 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x798 (concat ?x130 (concat ?x469 (concat ?x605 ?x93)))))
 (let (($x731 (= ?x798 input.dst.llvm-%m)))
 (let (($x173 (= $x731 true)))
 (let (($x513 (= $x173 true)))
 (let (($x333 (= input.dst.llvm-%m ?x798)))
 (let ((?x164 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x37 (= (_ bv0 32) ?x164)))
 (let ((?x396 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x766 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x396)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x794 (and $x172 $x766)))
 (let (($x143 (and $x794 $x37)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x828 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x492))))
 (let ((?x680 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x680 (_ bv1 32))))
 (=> $x8 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x193))))))))
 ))
 (let (($x594 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x525 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x680 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x680 (_ bv1 32))))
 (= $x8 (bvuge ?x525 (_ bv1 32)))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x223 (= false false)))
 (let ((?x680 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x680 (_ bv0 32))))
 (=> $x467 $x223)))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x680 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (= ?x680 (_ bv0 32))))
 (= $x467 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x266 (and $x274 $x23)))
 (let (($x336 (and $x266 $x594)))
 (let (($x407 (and $x336 $x42)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= (bvand ?x519 (_ bv4294967292 32)) ?x519)))
 (let (($x218 (= (bvand ?x850 (_ bv4294967292 32)) ?x850)))
 (let (($x891 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x850 (bvsub ?x850 (_ bv4 32))) (bvult ?x850 (bvsub ?x850 (_ bv4 32))))))
 (let (($x814 (and true $x891)))
 (let (($x75 (= (bvand ?x735 (_ bv4294967292 32)) ?x735)))
 (let (($x479 (and $x75 $x814)))
 (let (($x564 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x519 (bvsub ?x519 (_ bv8 32))) (bvult ?x519 (bvsub ?x519 (_ bv8 32))))))
 (let (($x267 (and (and (and true $x564) $x479) $x218)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x742 (and true $x40)))
 (let (($x372 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x299 (and $x372 $x742)))
 (let (($x729 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x735 (bvsub ?x735 (_ bv12 32))) (bvult ?x735 (bvsub ?x735 (_ bv12 32))))))
 (let (($x107 (and (and (and true $x372) $x729) $x299)))
 (let (($x320 (and (and (and (and (and (and $x107 $x267) $x284) $x12) $x407) $x143) $x333)))
 (let (($x580 (= $x320 true)))
 (let (($x644 (= $x580 true)))
 (let (($x402 (= $x644 true)))
 (let (($x381 (= $x107 true)))
 (let (($x262 (= $x381 true)))
 (let (($x600 (= $x262 true)))
 (let (($x5 (and $x267 $x284)))
 (let (($x184 (= $x5 true)))
 (let (($x349 (= $x184 true)))
 (let (($x427 (= $x349 true)))
 (let (($x301 (and $x427 $x600)))
 (let (($x706 (and $x301 $x402)))
 (let (($x823 (and $x706 $x513)))
 (let ((?x824 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x824 (_ bv1 32))))
 (let ((?x890 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x890 (_ bv1 32))))
 (let (($x762 (and $x364 $x377)))
 (let ((?x624 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x529 (bvuge ?x624 (_ bv1 32))))
 (let (($x373 (and $x529 $x762)))
 (let ((?x524 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x885 (= ?x524 (_ bv0 32))))
 (let (($x886 (and $x885 $x373)))
 (let (($x53 (and $x886 $x823)))
 (let ((?x851 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x495 (= ?x851 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x55 (bvuge ?x524 (_ bv1 32))))
 (let (($x704 (=> $x55 $x495)))
 (let (($x761 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x677 (= $x55 $x761)))
 (let (($x223 (= false false)))
 (let (($x795 (=> $x885 $x223)))
 (let (($x822 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x672 (= $x885 $x822)))
 (let (($x226 (and $x672 $x795)))
 (let (($x290 (and $x226 $x677)))
 (let (($x309 (and $x290 $x704)))
 (let (($x56 (and $x309 $x53)))
 (let ((?x708 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x637 (= ?x708 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x614 (=> $x529 $x637)))
 (let (($x94 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x785 (= $x529 $x94)))
 (let (($x490 (= ?x624 (_ bv0 32))))
 (let (($x477 (=> $x490 $x223)))
 (let (($x784 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x458 (= $x490 $x784)))
 (let (($x254 (and $x458 $x477)))
 (let (($x687 (and $x254 $x785)))
 (let (($x116 (and $x687 $x614)))
 (let (($x505 (and $x116 $x56)))
 (let (($x604 (= ?x109 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x122 (=> $x364 $x604)))
 (let (($x585 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x210 (= $x364 $x585)))
 (let (($x810 (= ?x890 (_ bv0 32))))
 (let (($x200 (=> $x810 $x223)))
 (let (($x162 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x789 (= $x810 $x162)))
 (let (($x383 (and $x789 $x200)))
 (let (($x330 (and $x383 $x210)))
 (let (($x296 (and $x330 $x122)))
 (let (($x157 (and $x296 $x505)))
 (let ((?x881 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x57 (= ?x881 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x538 (=> $x377 $x57)))
 (let (($x661 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x376 (= $x377 $x661)))
 (let (($x280 (= ?x824 (_ bv0 32))))
 (let (($x460 (=> $x280 $x223)))
 (let (($x97 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x135 (= $x280 $x97)))
 (let (($x236 (and $x135 $x460)))
 (let (($x834 (and $x236 $x376)))
 (let (($x573 (and $x834 $x538)))
 (let (($x845 (and $x573 $x157)))
 (let (($x772 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x844 (and $x772 $x845)))
 (let (($x767 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x468 (and $x767 $x844)))
 (let (($x689 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x751 (and $x689 $x468)))
 (let (($x854 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x884 (and $x854 $x751)))
 (let (($x521 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x304 (and $x521 $x884)))
 (let (($x493 (and $x223 $x304)))
 (let (($x419 (= ?x851 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x331 (and $x419 $x493)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x663 (and $x693 $x331)))
 (let (($x775 (and $x223 $x663)))
 (let (($x457 (= ?x708 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x546 (and $x457 $x775)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x273 (and $x160 $x546)))
 (let (($x434 (and $x223 $x273)))
 (let (($x255 (= ?x109 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x260 (and $x255 $x434)))
 (let (($x611 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x7 (and $x611 $x260)))
 (let (($x530 (and $x223 $x7)))
 (let (($x793 (= ?x881 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x339 (and $x793 $x530)))
 (let (($x183 (bvugt ?x850 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x374)))
 (let (($x746 (=> (bvule ?x850 (bvsub (bvadd ?x850 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x261 $x183)))))))
 (let (($x132 (bvugt ?x519 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x415 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x138 (=> (bvule ?x519 (bvsub (bvadd ?x519 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x415 $x132)))))))
 (let (($x344 (bvugt ?x735 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x504 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x679)))
 (let (($x592 (=> (bvule ?x735 (bvsub (bvadd ?x735 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x504 $x344)))))))
 (let (($x584 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x674 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x674)))
 (let (($x860 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x300 $x584)))))))
 (let (($x302 (and $x860 $x592)))
 (let (($x779 (and $x302 $x138)))
 (let (($x360 (and $x779 $x746)))
 (let (($x228 (and $x360 $x339)))
 (let (($x745 (=> $x228 $x667)))
 (not $x745)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x772 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x79 (bvmul (_ bv4294967295 32) ?x772)))
 (let ((?x376 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x678 (bvadd ?x376 ?x79)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x790 (concat ?x281 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x606 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x606 (_ bv3 32))))
 (let ((?x442 (concat (select input.dst.llvm-mem ?x6) (concat ?x58 ?x790))))
 (let ((?x556 (bvmul (_ bv4294967295 32) ?x442)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x197 (concat ?x461 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x481 (bvadd ?x176 (_ bv3 32))))
 (let ((?x776 (concat (select input.dst.llvm-mem ?x481) (concat ?x73 ?x197))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x518 (concat ?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x583 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x300 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x523 (bvadd ?x300 (_ bv3 32))))
 (let ((?x472 (concat (select input.dst.llvm-mem ?x523) (concat ?x583 ?x518))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x842 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x70)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x842)))
 (let ((?x99 (bvadd (bvadd (bvadd ?x250 ?x472) ?x776) ?x556)))
 (let (($x509 (= ?x99 ?x678)))
 (let (($x206 (= $x509 true)))
 (let (($x552 (= $x206 true)))
 (let ((?x497 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x670 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x49 (concat ?x670 (concat ?x189 ?x497)))))
 (let (($x85 (= ?x104 input.dst.llvm-%m)))
 (let (($x153 (= $x85 true)))
 (let (($x151 (= $x153 true)))
 (let (($x150 (= input.dst.llvm-%m ?x104)))
 (let ((?x703 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x576 (= (_ bv0 32) ?x703)))
 (let ((?x593 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x561 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x593)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x404 (and $x224 $x561)))
 (let (($x494 (and $x404 $x576)))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x802 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv1 32))) (select input.dst.llvm-mem ?x802))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv2 32))) ?x540))))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x849 (_ bv1 32))))
 (=> $x22 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x347))))))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x849 (_ bv1 32))))
 (= $x22 (bvuge ?x366 (_ bv1 32)))))))
 ))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x851 (= false false)))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x849 (_ bv0 32))))
 (=> $x721 $x851)))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x849 (_ bv0 32))))
 (= $x721 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x393 (and $x378 $x716)))
 (let (($x318 (and $x393 $x669)))
 (let (($x297 (and $x318 $x113)))
 (let (($x706 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= (bvand ?x606 (_ bv4294967292 32)) ?x606)))
 (let (($x796 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x95 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x270 (and true $x95)))
 (let (($x792 (= (bvand ?x300 (_ bv4294967292 32)) ?x300)))
 (let (($x227 (and $x792 $x270)))
 (let (($x594 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x606 (bvsub ?x606 (_ bv8 32))) (bvult ?x606 (bvsub ?x606 (_ bv8 32))))))
 (let (($x193 (and (and (and true $x594) $x227) $x796)))
 (let (($x636 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x605 (and true $x636)))
 (let (($x766 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x93 (and $x766 $x605)))
 (let (($x578 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x300 (bvsub ?x300 (_ bv12 32))) (bvult ?x300 (bvsub ?x300 (_ bv12 32))))))
 (let (($x798 (and (and (and true $x766) $x578) $x93)))
 (let (($x815 (and (and (and (and (and (and $x798 $x193) $x158) $x706) $x297) $x494) $x150)))
 (let (($x839 (= $x815 true)))
 (let (($x803 (= $x839 true)))
 (let (($x639 (= $x803 true)))
 (let (($x333 (= $x798 true)))
 (let (($x320 (= $x333 true)))
 (let (($x580 (= $x320 true)))
 (let (($x42 (and $x193 $x158)))
 (let (($x407 (= $x42 true)))
 (let (($x541 (= $x407 true)))
 (let (($x172 (= $x541 true)))
 (let (($x644 (and $x172 $x580)))
 (let (($x840 (and $x644 $x639)))
 (let (($x50 (and $x840 $x151)))
 (let ((?x785 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (= ?x785 (_ bv0 32))))
 (let ((?x886 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x759 (bvuge ?x886 (_ bv1 32))))
 (let (($x274 (and $x759 $x687)))
 (let ((?x184 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x729 (bvuge ?x184 (_ bv1 32))))
 (let (($x579 (and $x729 $x274)))
 (let ((?x621 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x621 (_ bv0 32))))
 (let (($x23 (and $x19 $x579)))
 (let (($x238 (and $x23 $x50)))
 (let ((?x200 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x525 (= ?x200 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x508 (bvuge ?x621 (_ bv1 32))))
 (let (($x27 (=> $x508 $x525)))
 (let (($x566 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x24 (= $x508 $x566)))
 (let (($x851 (= false false)))
 (let (($x12 (=> $x19 $x851)))
 (let (($x600 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x90 (= $x19 $x600)))
 (let (($x554 (and $x90 $x12)))
 (let (($x651 (and $x554 $x24)))
 (let (($x582 (and $x651 $x27)))
 (let (($x629 (and $x582 $x238)))
 (let (($x54 (= ?x376 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x496 (=> $x729 $x54)))
 (let (($x426 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x852 (= $x729 $x426)))
 (let (($x349 (= ?x184 (_ bv0 32))))
 (let (($x38 (=> $x349 $x851)))
 (let (($x284 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x427 (= $x349 $x284)))
 (let (($x372 (and $x427 $x38)))
 (let (($x748 (and $x372 $x852)))
 (let (($x298 (and $x748 $x496)))
 (let (($x311 (and $x298 $x629)))
 (let (($x283 (= ?x772 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x891 (=> $x759 $x283)))
 (let (($x75 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x545 (= $x759 $x75)))
 (let (($x117 (= ?x886 (_ bv0 32))))
 (let (($x15 (=> $x117 $x851)))
 (let (($x762 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x859 (= $x117 $x762)))
 (let (($x13 (and $x859 $x15)))
 (let (($x562 (and $x13 $x545)))
 (let (($x814 (and $x562 $x891)))
 (let (($x645 (and $x814 $x311)))
 (let ((?x406 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x226 (= ?x406 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x822 (bvuge ?x785 (_ bv1 32))))
 (let (($x55 (=> $x822 $x226)))
 (let (($x357 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x672 (= $x822 $x357)))
 (let (($x637 (=> $x687 $x851)))
 (let (($x529 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x771 (= $x687 $x529)))
 (let (($x614 (and $x771 $x637)))
 (let (($x795 (and $x614 $x672)))
 (let (($x761 (and $x795 $x55)))
 (let (($x632 (and $x761 $x645)))
 (let (($x624 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x429 (and $x624 $x632)))
 (let (($x296 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x148 (and $x296 $x429)))
 (let (($x604 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x709 (and $x604 $x148)))
 (let (($x330 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x635 (and $x330 $x709)))
 (let (($x585 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x112 (and $x585 $x635)))
 (let (($x695 (and $x851 $x112)))
 (let (($x383 (= ?x200 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x537 (and $x383 $x695)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x435 (and $x57 $x537)))
 (let (($x207 (and $x851 $x435)))
 (let (($x834 (= ?x376 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x740 (and $x834 $x207)))
 (let (($x280 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x51 (and $x280 $x740)))
 (let (($x826 (and $x851 $x51)))
 (let (($x155 (= ?x772 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x726 (and $x155 $x826)))
 (let (($x419 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x204 (and $x419 $x726)))
 (let (($x352 (and $x851 $x204)))
 (let (($x693 (= ?x406 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x610 (and $x693 $x352)))
 (let (($x191 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x405 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x481)))
 (let (($x793 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x405 $x191)))))))
 (let (($x68 (bvugt ?x606 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x232 (=> (bvule ?x606 (bvsub (bvadd ?x606 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x68)))))))
 (let (($x124 (bvugt ?x300 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x643 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x523)))
 (let (($x658 (=> (bvule ?x300 (bvsub (bvadd ?x300 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x643 $x124)))))))
 (let (($x674 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x837 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x837)))
 (let (($x878 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x315 $x674)))))))
 (let (($x285 (and $x878 $x658)))
 (let (($x470 (and $x285 $x232)))
 (let (($x395 (and $x470 $x793)))
 (let (($x134 (and $x395 $x610)))
 (let (($x820 (=> $x134 $x552)))
 (not $x820)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x772 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x79 (bvmul (_ bv4294967295 32) ?x772)))
 (let ((?x376 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x678 (bvadd ?x376 ?x79)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x790 (concat ?x281 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x606 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x606 (_ bv3 32))))
 (let ((?x442 (concat (select input.dst.llvm-mem ?x6) (concat ?x58 ?x790))))
 (let ((?x556 (bvmul (_ bv4294967295 32) ?x442)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x197 (concat ?x461 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x176 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x481 (bvadd ?x176 (_ bv3 32))))
 (let ((?x776 (concat (select input.dst.llvm-mem ?x481) (concat ?x73 ?x197))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x518 (concat ?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x583 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x300 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x523 (bvadd ?x300 (_ bv3 32))))
 (let ((?x472 (concat (select input.dst.llvm-mem ?x523) (concat ?x583 ?x518))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x842 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x70)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x842)))
 (let ((?x99 (bvadd (bvadd (bvadd ?x250 ?x472) ?x776) ?x556)))
 (let (($x509 (= ?x99 ?x678)))
 (let (($x206 (= $x509 true)))
 (let (($x552 (= $x206 true)))
 (let ((?x497 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x670 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x49 (concat ?x670 (concat ?x189 ?x497)))))
 (let (($x85 (= ?x104 input.dst.llvm-%m)))
 (let (($x153 (= $x85 true)))
 (let (($x151 (= $x153 true)))
 (let (($x150 (= input.dst.llvm-%m ?x104)))
 (let ((?x703 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x576 (= (_ bv0 32) ?x703)))
 (let ((?x593 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x561 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x593)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x404 (and $x224 $x561)))
 (let (($x494 (and $x404 $x576)))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x802 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv1 32))) (select input.dst.llvm-mem ?x802))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv2 32))) ?x540))))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x849 (_ bv1 32))))
 (=> $x22 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x347))))))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x849 (_ bv1 32))))
 (= $x22 (bvuge ?x366 (_ bv1 32)))))))
 ))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x851 (= false false)))
 (let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x849 (_ bv0 32))))
 (=> $x721 $x851)))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x849 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x849 (_ bv0 32))))
 (= $x721 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x393 (and $x378 $x716)))
 (let (($x318 (and $x393 $x669)))
 (let (($x297 (and $x318 $x113)))
 (let (($x706 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= (bvand ?x606 (_ bv4294967292 32)) ?x606)))
 (let (($x796 (= (bvand ?x176 (_ bv4294967292 32)) ?x176)))
 (let (($x95 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x176 (bvsub ?x176 (_ bv4 32))) (bvult ?x176 (bvsub ?x176 (_ bv4 32))))))
 (let (($x270 (and true $x95)))
 (let (($x792 (= (bvand ?x300 (_ bv4294967292 32)) ?x300)))
 (let (($x227 (and $x792 $x270)))
 (let (($x594 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x606 (bvsub ?x606 (_ bv8 32))) (bvult ?x606 (bvsub ?x606 (_ bv8 32))))))
 (let (($x193 (and (and (and true $x594) $x227) $x796)))
 (let (($x636 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x605 (and true $x636)))
 (let (($x766 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x93 (and $x766 $x605)))
 (let (($x578 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x300 (bvsub ?x300 (_ bv12 32))) (bvult ?x300 (bvsub ?x300 (_ bv12 32))))))
 (let (($x798 (and (and (and true $x766) $x578) $x93)))
 (let (($x815 (and (and (and (and (and (and $x798 $x193) $x158) $x706) $x297) $x494) $x150)))
 (let (($x839 (= $x815 true)))
 (let (($x803 (= $x839 true)))
 (let (($x639 (= $x803 true)))
 (let (($x333 (= $x798 true)))
 (let (($x320 (= $x333 true)))
 (let (($x580 (= $x320 true)))
 (let (($x42 (and $x193 $x158)))
 (let (($x407 (= $x42 true)))
 (let (($x541 (= $x407 true)))
 (let (($x172 (= $x541 true)))
 (let (($x644 (and $x172 $x580)))
 (let (($x840 (and $x644 $x639)))
 (let (($x50 (and $x840 $x151)))
 (let ((?x785 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (= ?x785 (_ bv0 32))))
 (let ((?x886 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x759 (bvuge ?x886 (_ bv1 32))))
 (let (($x274 (and $x759 $x687)))
 (let ((?x184 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x729 (bvuge ?x184 (_ bv1 32))))
 (let (($x579 (and $x729 $x274)))
 (let ((?x621 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (= ?x621 (_ bv0 32))))
 (let (($x23 (and $x19 $x579)))
 (let (($x238 (and $x23 $x50)))
 (let ((?x200 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x525 (= ?x200 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x508 (bvuge ?x621 (_ bv1 32))))
 (let (($x27 (=> $x508 $x525)))
 (let (($x566 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x24 (= $x508 $x566)))
 (let (($x851 (= false false)))
 (let (($x12 (=> $x19 $x851)))
 (let (($x600 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x90 (= $x19 $x600)))
 (let (($x554 (and $x90 $x12)))
 (let (($x651 (and $x554 $x24)))
 (let (($x582 (and $x651 $x27)))
 (let (($x629 (and $x582 $x238)))
 (let (($x54 (= ?x376 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x496 (=> $x729 $x54)))
 (let (($x426 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x852 (= $x729 $x426)))
 (let (($x349 (= ?x184 (_ bv0 32))))
 (let (($x38 (=> $x349 $x851)))
 (let (($x284 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x427 (= $x349 $x284)))
 (let (($x372 (and $x427 $x38)))
 (let (($x748 (and $x372 $x852)))
 (let (($x298 (and $x748 $x496)))
 (let (($x311 (and $x298 $x629)))
 (let (($x283 (= ?x772 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x891 (=> $x759 $x283)))
 (let (($x75 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x545 (= $x759 $x75)))
 (let (($x117 (= ?x886 (_ bv0 32))))
 (let (($x15 (=> $x117 $x851)))
 (let (($x762 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x859 (= $x117 $x762)))
 (let (($x13 (and $x859 $x15)))
 (let (($x562 (and $x13 $x545)))
 (let (($x814 (and $x562 $x891)))
 (let (($x645 (and $x814 $x311)))
 (let ((?x406 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x226 (= ?x406 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x822 (bvuge ?x785 (_ bv1 32))))
 (let (($x55 (=> $x822 $x226)))
 (let (($x357 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x672 (= $x822 $x357)))
 (let (($x637 (=> $x687 $x851)))
 (let (($x529 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x771 (= $x687 $x529)))
 (let (($x614 (and $x771 $x637)))
 (let (($x795 (and $x614 $x672)))
 (let (($x761 (and $x795 $x55)))
 (let (($x632 (and $x761 $x645)))
 (let (($x624 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x429 (and $x624 $x632)))
 (let (($x296 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x148 (and $x296 $x429)))
 (let (($x604 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x709 (and $x604 $x148)))
 (let (($x330 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x635 (and $x330 $x709)))
 (let (($x585 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x112 (and $x585 $x635)))
 (let (($x695 (and $x851 $x112)))
 (let (($x383 (= ?x200 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x537 (and $x383 $x695)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x435 (and $x57 $x537)))
 (let (($x207 (and $x851 $x435)))
 (let (($x834 (= ?x376 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x740 (and $x834 $x207)))
 (let (($x280 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x51 (and $x280 $x740)))
 (let (($x826 (and $x851 $x51)))
 (let (($x155 (= ?x772 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x726 (and $x155 $x826)))
 (let (($x419 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x204 (and $x419 $x726)))
 (let (($x352 (and $x851 $x204)))
 (let (($x693 (= ?x406 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x610 (and $x693 $x352)))
 (let (($x191 (bvugt ?x176 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x405 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x481)))
 (let (($x793 (=> (bvule ?x176 (bvsub (bvadd ?x176 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x405 $x191)))))))
 (let (($x68 (bvugt ?x606 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x232 (=> (bvule ?x606 (bvsub (bvadd ?x606 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x86 $x68)))))))
 (let (($x124 (bvugt ?x300 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x643 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x523)))
 (let (($x658 (=> (bvule ?x300 (bvsub (bvadd ?x300 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x643 $x124)))))))
 (let (($x674 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x837 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x837)))
 (let (($x878 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x315 $x674)))))))
 (let (($x285 (and $x878 $x658)))
 (let (($x470 (and $x285 $x232)))
 (let (($x395 (and $x470 $x793)))
 (let (($x134 (and $x395 $x610)))
 (let (($x820 (=> $x134 $x552)))
 (not $x820)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x672 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x185 (bvadd ?x672 ?x131)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x430 (concat ?x48 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x186 (bvadd ?x132 (_ bv3 32))))
 (let ((?x564 (concat (select input.dst.llvm-mem ?x186) (concat ?x290 ?x430))))
 (let ((?x34 (bvmul (_ bv4294967295 32) ?x564)))
 (let ((?x757 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x36 (concat ?x757 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x467 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x6 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x861 (bvadd ?x6 (_ bv3 32))))
 (let ((?x765 (concat (select input.dst.llvm-mem ?x861) (concat ?x467 ?x36))))
 (let ((?x712 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x166 (concat ?x712 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x558 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x315 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x465 (bvadd ?x315 (_ bv3 32))))
 (let ((?x742 (concat (select input.dst.llvm-mem ?x465) (concat ?x558 ?x166))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x464 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x174)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x464)))
 (let ((?x490 (bvadd (bvadd (bvadd ?x137 ?x742) ?x765) ?x34)))
 (let (($x784 (= ?x490 ?x185)))
 (let (($x458 (= $x784 true)))
 (let (($x116 (= $x458 true)))
 (let ((?x696 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x853 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x501 (concat ?x76 (concat ?x424 (concat ?x853 ?x696)))))
 (let (($x811 (= ?x501 input.dst.llvm-%m)))
 (let (($x685 (= $x811 true)))
 (let (($x841 (= $x685 true)))
 (let (($x818 (= input.dst.llvm-%m ?x501)))
 (let ((?x845 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x844 (= (_ bv0 32) ?x845)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x505 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x823 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x823 $x505)))
 (let (($x835 (and $x157 $x844)))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x653 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x66))))
 (let ((?x97 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x97 (_ bv1 32))))
 (=> $x751 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x653))))))))
 ))
 (let (($x493 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x810 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x97 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x97 (_ bv1 32))))
 (= $x751 (bvuge ?x810 (_ bv1 32)))))))
 ))
 (let (($x854 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x200 (= false false)))
 (let ((?x97 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x97 (_ bv0 32))))
 (=> $x135 $x200)))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x97 (_ bv0 32))))
 (= $x135 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x689 (and $x152 $x854)))
 (let (($x731 (and $x689 $x493)))
 (let (($x513 (and $x731 $x173)))
 (let (($x840 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x516 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x887 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x555 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv4 32))) (bvult ?x6 (bvsub ?x6 (_ bv4 32))))))
 (let (($x816 (and true $x555)))
 (let (($x331 (= (bvand ?x315 (_ bv4294967292 32)) ?x315)))
 (let (($x69 (and $x331 $x816)))
 (let (($x669 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x132 (bvsub ?x132 (_ bv8 32))) (bvult ?x132 (bvsub ?x132 (_ bv8 32))))))
 (let (($x347 (and (and (and true $x669) $x69) $x887)))
 (let (($x483 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x189 (and true $x483)))
 (let (($x561 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x497 (and $x561 $x189)))
 (let (($x809 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x315 (bvsub ?x315 (_ bv12 32))) (bvult ?x315 (bvsub ?x315 (_ bv12 32))))))
 (let (($x104 (and (and (and true $x561) $x809) $x497)))
 (let (($x322 (and (and (and (and (and (and $x104 $x347) $x516) $x840) $x513) $x835) $x818)))
 (let (($x14 (= $x322 true)))
 (let (($x843 (= $x14 true)))
 (let (($x743 (= $x843 true)))
 (let (($x150 (= $x104 true)))
 (let (($x815 (= $x150 true)))
 (let (($x839 (= $x815 true)))
 (let (($x113 (and $x347 $x516)))
 (let (($x297 (= $x113 true)))
 (let (($x439 (= $x297 true)))
 (let (($x224 (= $x439 true)))
 (let (($x803 (and $x224 $x839)))
 (let (($x806 (and $x803 $x743)))
 (let (($x819 (and $x806 $x841)))
 (let ((?x852 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x852 (_ bv1 32))))
 (let ((?x23 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x23 (_ bv0 32))))
 (let (($x378 (and $x8 $x600)))
 (let ((?x407 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x407 (_ bv1 32))))
 (let (($x432 (and $x578 $x378)))
 (let ((?x447 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x447 (_ bv0 32))))
 (let (($x716 (and $x655 $x432)))
 (let (($x745 (and $x716 $x819)))
 (let ((?x15 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x366 (= ?x15 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x884 (bvuge ?x447 (_ bv1 32))))
 (let (($x190 (=> $x884 $x366)))
 (let (($x188 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x797 (= $x884 $x188)))
 (let (($x200 (= false false)))
 (let (($x706 (=> $x655 $x200)))
 (let (($x580 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x402 (= $x655 $x580)))
 (let (($x450 (and $x402 $x706)))
 (let (($x560 (and $x450 $x797)))
 (let (($x416 (and $x560 $x190)))
 (let (($x667 (and $x416 $x745)))
 (let (($x78 (= ?x672 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x370 (=> $x578 $x78)))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x590 (= $x578 $x143)))
 (let (($x541 (= ?x407 (_ bv0 32))))
 (let (($x396 (=> $x541 $x200)))
 (let (($x158 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x172 (= $x541 $x158)))
 (let (($x766 (and $x172 $x396)))
 (let (($x130 (and $x766 $x590)))
 (let (($x469 (and $x130 $x370)))
 (let (($x739 (and $x469 $x667)))
 (let ((?x624 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x889 (= ?x624 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x828 (bvuge ?x23 (_ bv1 32))))
 (let (($x95 (=> $x828 $x889)))
 (let (($x792 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x474 (= $x828 $x792)))
 (let (($x343 (=> $x8 $x200)))
 (let (($x274 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x266 (= $x8 $x274)))
 (let (($x399 (and $x266 $x343)))
 (let (($x425 (and $x399 $x474)))
 (let (($x270 (and $x425 $x95)))
 (let (($x498 (and $x270 $x739)))
 (let (($x554 (= ?x131 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x508 (=> $x600 $x554)))
 (let (($x381 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x90 (= $x600 $x381)))
 (let (($x748 (= ?x852 (_ bv0 32))))
 (let (($x54 (=> $x748 $x200)))
 (let (($x729 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x827 (= $x748 $x729)))
 (let (($x496 (and $x827 $x54)))
 (let (($x12 (and $x496 $x90)))
 (let (($x566 (and $x12 $x508)))
 (let (($x145 (and $x566 $x498)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x631 (and $x184 $x145)))
 (let (($x814 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x201 (and $x814 $x631)))
 (let (($x283 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x846 (and $x283 $x201)))
 (let (($x562 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x607 (and $x562 $x846)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x245 (and $x75 $x607)))
 (let (($x175 (and $x200 $x245)))
 (let (($x13 (= ?x15 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x103 (and $x13 $x175)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x882 (and $x226 $x103)))
 (let (($x348 (and $x200 $x882)))
 (let (($x795 (= ?x672 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x563 (and $x795 $x348)))
 (let (($x687 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x711 (and $x687 $x563)))
 (let (($x195 (and $x200 $x711)))
 (let (($x94 (= ?x624 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x264 (and $x94 $x195)))
 (let (($x383 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x443 (and $x383 $x264)))
 (let (($x171 (and $x200 $x443)))
 (let (($x57 (= ?x131 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x362 (and $x57 $x171)))
 (let (($x360 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x746 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x861)))
 (let (($x693 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x746 $x360)))))))
 (let (($x779 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x183 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x779)))))))
 (let (($x302 (bvugt ?x315 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x592 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x415 (=> (bvule ?x315 (bvsub (bvadd ?x315 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x592 $x302)))))))
 (let (($x110 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x862 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x837 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x862)))
 (let (($x344 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x837 $x110)))))))
 (let (($x519 (and $x344 $x415)))
 (let (($x363 (and $x519 $x183)))
 (let (($x804 (and $x363 $x693)))
 (let (($x342 (and $x804 $x362)))
 (let (($x660 (=> $x342 $x116)))
 (not $x660))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x672 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x185 (bvadd ?x672 ?x131)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x430 (concat ?x48 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x186 (bvadd ?x132 (_ bv3 32))))
 (let ((?x564 (concat (select input.dst.llvm-mem ?x186) (concat ?x290 ?x430))))
 (let ((?x34 (bvmul (_ bv4294967295 32) ?x564)))
 (let ((?x757 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x36 (concat ?x757 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x467 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x6 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x861 (bvadd ?x6 (_ bv3 32))))
 (let ((?x765 (concat (select input.dst.llvm-mem ?x861) (concat ?x467 ?x36))))
 (let ((?x712 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x166 (concat ?x712 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x558 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x315 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x465 (bvadd ?x315 (_ bv3 32))))
 (let ((?x742 (concat (select input.dst.llvm-mem ?x465) (concat ?x558 ?x166))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x464 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x174)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x464)))
 (let ((?x490 (bvadd (bvadd (bvadd ?x137 ?x742) ?x765) ?x34)))
 (let (($x784 (= ?x490 ?x185)))
 (let (($x458 (= $x784 true)))
 (let (($x116 (= $x458 true)))
 (let ((?x696 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x853 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x501 (concat ?x76 (concat ?x424 (concat ?x853 ?x696)))))
 (let (($x811 (= ?x501 input.dst.llvm-%m)))
 (let (($x685 (= $x811 true)))
 (let (($x841 (= $x685 true)))
 (let (($x818 (= input.dst.llvm-%m ?x501)))
 (let ((?x845 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x844 (= (_ bv0 32) ?x845)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x505 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x56)))
 (let (($x823 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (and $x823 $x505)))
 (let (($x835 (and $x157 $x844)))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x653 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x66))))
 (let ((?x97 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x97 (_ bv1 32))))
 (=> $x751 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x653))))))))
 ))
 (let (($x493 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x810 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x97 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x751 (bvuge ?x97 (_ bv1 32))))
 (= $x751 (bvuge ?x810 (_ bv1 32)))))))
 ))
 (let (($x854 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x200 (= false false)))
 (let ((?x97 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x97 (_ bv0 32))))
 (=> $x135 $x200)))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x97 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x97 (_ bv0 32))))
 (= $x135 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x689 (and $x152 $x854)))
 (let (($x731 (and $x689 $x493)))
 (let (($x513 (and $x731 $x173)))
 (let (($x840 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x516 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x887 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x555 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv4 32))) (bvult ?x6 (bvsub ?x6 (_ bv4 32))))))
 (let (($x816 (and true $x555)))
 (let (($x331 (= (bvand ?x315 (_ bv4294967292 32)) ?x315)))
 (let (($x69 (and $x331 $x816)))
 (let (($x669 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x132 (bvsub ?x132 (_ bv8 32))) (bvult ?x132 (bvsub ?x132 (_ bv8 32))))))
 (let (($x347 (and (and (and true $x669) $x69) $x887)))
 (let (($x483 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x189 (and true $x483)))
 (let (($x561 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x497 (and $x561 $x189)))
 (let (($x809 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x315 (bvsub ?x315 (_ bv12 32))) (bvult ?x315 (bvsub ?x315 (_ bv12 32))))))
 (let (($x104 (and (and (and true $x561) $x809) $x497)))
 (let (($x322 (and (and (and (and (and (and $x104 $x347) $x516) $x840) $x513) $x835) $x818)))
 (let (($x14 (= $x322 true)))
 (let (($x843 (= $x14 true)))
 (let (($x743 (= $x843 true)))
 (let (($x150 (= $x104 true)))
 (let (($x815 (= $x150 true)))
 (let (($x839 (= $x815 true)))
 (let (($x113 (and $x347 $x516)))
 (let (($x297 (= $x113 true)))
 (let (($x439 (= $x297 true)))
 (let (($x224 (= $x439 true)))
 (let (($x803 (and $x224 $x839)))
 (let (($x806 (and $x803 $x743)))
 (let (($x819 (and $x806 $x841)))
 (let ((?x852 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x852 (_ bv1 32))))
 (let ((?x23 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x23 (_ bv0 32))))
 (let (($x378 (and $x8 $x600)))
 (let ((?x407 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x407 (_ bv1 32))))
 (let (($x432 (and $x578 $x378)))
 (let ((?x447 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x655 (= ?x447 (_ bv0 32))))
 (let (($x716 (and $x655 $x432)))
 (let (($x745 (and $x716 $x819)))
 (let ((?x15 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x366 (= ?x15 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x884 (bvuge ?x447 (_ bv1 32))))
 (let (($x190 (=> $x884 $x366)))
 (let (($x188 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x797 (= $x884 $x188)))
 (let (($x200 (= false false)))
 (let (($x706 (=> $x655 $x200)))
 (let (($x580 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x402 (= $x655 $x580)))
 (let (($x450 (and $x402 $x706)))
 (let (($x560 (and $x450 $x797)))
 (let (($x416 (and $x560 $x190)))
 (let (($x667 (and $x416 $x745)))
 (let (($x78 (= ?x672 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x370 (=> $x578 $x78)))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x590 (= $x578 $x143)))
 (let (($x541 (= ?x407 (_ bv0 32))))
 (let (($x396 (=> $x541 $x200)))
 (let (($x158 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x172 (= $x541 $x158)))
 (let (($x766 (and $x172 $x396)))
 (let (($x130 (and $x766 $x590)))
 (let (($x469 (and $x130 $x370)))
 (let (($x739 (and $x469 $x667)))
 (let ((?x624 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x889 (= ?x624 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x828 (bvuge ?x23 (_ bv1 32))))
 (let (($x95 (=> $x828 $x889)))
 (let (($x792 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x474 (= $x828 $x792)))
 (let (($x343 (=> $x8 $x200)))
 (let (($x274 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x266 (= $x8 $x274)))
 (let (($x399 (and $x266 $x343)))
 (let (($x425 (and $x399 $x474)))
 (let (($x270 (and $x425 $x95)))
 (let (($x498 (and $x270 $x739)))
 (let (($x554 (= ?x131 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x508 (=> $x600 $x554)))
 (let (($x381 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x90 (= $x600 $x381)))
 (let (($x748 (= ?x852 (_ bv0 32))))
 (let (($x54 (=> $x748 $x200)))
 (let (($x729 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x827 (= $x748 $x729)))
 (let (($x496 (and $x827 $x54)))
 (let (($x12 (and $x496 $x90)))
 (let (($x566 (and $x12 $x508)))
 (let (($x145 (and $x566 $x498)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x631 (and $x184 $x145)))
 (let (($x814 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x201 (and $x814 $x631)))
 (let (($x283 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x846 (and $x283 $x201)))
 (let (($x562 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x607 (and $x562 $x846)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x245 (and $x75 $x607)))
 (let (($x175 (and $x200 $x245)))
 (let (($x13 (= ?x15 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x103 (and $x13 $x175)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x882 (and $x226 $x103)))
 (let (($x348 (and $x200 $x882)))
 (let (($x795 (= ?x672 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x563 (and $x795 $x348)))
 (let (($x687 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x711 (and $x687 $x563)))
 (let (($x195 (and $x200 $x711)))
 (let (($x94 (= ?x624 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x264 (and $x94 $x195)))
 (let (($x383 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x443 (and $x383 $x264)))
 (let (($x171 (and $x200 $x443)))
 (let (($x57 (= ?x131 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x362 (and $x57 $x171)))
 (let (($x360 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x746 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x861)))
 (let (($x693 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x746 $x360)))))))
 (let (($x779 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x183 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x138 $x779)))))))
 (let (($x302 (bvugt ?x315 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x592 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x465)))
 (let (($x415 (=> (bvule ?x315 (bvsub (bvadd ?x315 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x592 $x302)))))))
 (let (($x110 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x862 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x837 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x862)))
 (let (($x344 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x837 $x110)))))))
 (let (($x519 (and $x344 $x415)))
 (let (($x363 (and $x519 $x183)))
 (let (($x804 (and $x363 $x693)))
 (let (($x342 (and $x804 $x362)))
 (let (($x660 (=> $x342 $x116)))
 (not $x660))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x24 (concat ?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x850 (bvadd ?x68 (_ bv3 32))))
 (let ((?x492 (concat (select input.dst.llvm-mem ?x850) (concat ?x262 ?x24))))
 (let ((?x336 (bvmul (_ bv4294967295 32) ?x492)))
 (let ((?x369 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x849 (concat ?x369 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x186 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x881 (bvadd ?x186 (_ bv3 32))))
 (let ((?x796 (concat (select input.dst.llvm-mem ?x881) (concat ?x227 ?x849))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x263 (concat ?x440 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x732 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x877 (bvadd ?x110 (_ bv3 32))))
 (let ((?x93 (concat (select input.dst.llvm-mem ?x877) (concat ?x732 ?x263))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x733 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x339)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x733)))
 (let ((?x267 (bvadd (bvadd (bvadd ?x228 ?x93) ?x796) ?x336)))
 (let ((?x90 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x284 (= ?x90 ?x267)))
 (let (($x427 (= $x284 true)))
 (let (($x298 (= $x427 true)))
 (let ((?x683 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x684 (concat ?x58 (concat ?x281 (concat ?x461 ?x683)))))
 (let (($x509 (= ?x684 input.dst.llvm-%m)))
 (let (($x206 (= $x509 true)))
 (let (($x552 (= $x206 true)))
 (let (($x275 (= input.dst.llvm-%m ?x684)))
 (let ((?x429 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x169 (= (_ bv0 32) ?x429)))
 (let ((?x311 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x645 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x311)))
 (let (($x629 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x632 (and $x629 $x645)))
 (let (($x880 (and $x632 $x169)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x842 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv1 32))) (select input.dst.llvm-mem ?x842))))
 (let ((?x518 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv2 32))) ?x257))))
 (let ((?x771 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x771 (_ bv1 32))))
 (=> $x112 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x518))))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x771 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x771 (_ bv1 32))))
 (= $x112 (bvuge ?x851 (_ bv1 32)))))))
 ))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x15 (= false false)))
 (let ((?x771 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x771 (_ bv0 32))))
 (=> $x637 $x15)))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x771 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x771 (_ bv0 32))))
 (= $x637 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x824 (and $x585 $x604)))
 (let (($x435 (and $x824 $x85)))
 (let (($x50 (and $x435 $x151)))
 (let (($x806 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x96 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let (($x638 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv4 32))) (bvult ?x186 (bvsub ?x186 (_ bv4 32))))))
 (let (($x527 (and true $x638)))
 (let (($x537 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x329 (and $x537 $x527)))
 (let (($x493 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv8 32))) (bvult ?x68 (bvsub ?x68 (_ bv8 32))))))
 (let (($x653 (and (and (and true $x493) $x329) $x96)))
 (let (($x598 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x853 (and true $x598)))
 (let (($x505 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x696 (and $x505 $x853)))
 (let (($x382 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv12 32))) (bvult ?x110 (bvsub ?x110 (_ bv12 32))))))
 (let (($x501 (and (and (and true $x505) $x382) $x696)))
 (let (($x556 (and (and (and (and (and (and $x501 $x653) $x53) $x806) $x50) $x880) $x275)))
 (let (($x442 (= $x556 true)))
 (let (($x99 (= $x442 true)))
 (let (($x79 (= $x99 true)))
 (let (($x818 (= $x501 true)))
 (let (($x322 (= $x818 true)))
 (let (($x14 (= $x322 true)))
 (let (($x173 (and $x653 $x53)))
 (let (($x513 (= $x173 true)))
 (let (($x879 (= $x513 true)))
 (let (($x823 (= $x879 true)))
 (let (($x843 (and $x823 $x14)))
 (let (($x678 (and $x843 $x79)))
 (let (($x168 (and $x678 $x552)))
 (let ((?x590 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x590 (_ bv0 32))))
 (let ((?x716 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x716 (_ bv0 32))))
 (let (($x152 (and $x22 $x130)))
 (let ((?x297 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x297 (_ bv1 32))))
 (let (($x39 (and $x809 $x152)))
 (let ((?x29 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x29 (_ bv0 32))))
 (let (($x854 (and $x269 $x39)))
 (let (($x820 (and $x854 $x168)))
 (let ((?x343 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x810 (= ?x343 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x635 (bvuge ?x29 (_ bv1 32))))
 (let (($x223 (=> $x635 $x810)))
 (let (($x573 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x538 (= $x635 $x573)))
 (let (($x15 (= false false)))
 (let (($x840 (=> $x269 $x15)))
 (let (($x839 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x639 (= $x269 $x839)))
 (let (($x847 (and $x639 $x840)))
 (let (($x410 (and $x847 $x538)))
 (let (($x460 (and $x410 $x223)))
 (let (($x374 (and $x460 $x820)))
 (let (($x21 (= ?x90 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x358 (=> $x809 $x21)))
 (let (($x494 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x543 (= $x809 $x494)))
 (let (($x439 (= ?x297 (_ bv0 32))))
 (let (($x593 (=> $x439 $x15)))
 (let (($x516 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x224 (= $x439 $x516)))
 (let (($x561 (and $x224 $x593)))
 (let (($x49 (and $x561 $x543)))
 (let (($x670 (and $x49 $x358)))
 (let (($x694 (and $x670 $x374)))
 (let ((?x184 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x572 (= ?x184 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x802 (bvuge ?x716 (_ bv1 32))))
 (let (($x555 (=> $x802 $x572)))
 (let (($x331 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x182 (= $x802 $x331)))
 (let (($x9 (=> $x22 $x15)))
 (let (($x378 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x393 (= $x22 $x378)))
 (let (($x805 (and $x393 $x9)))
 (let (($x514 (and $x805 $x182)))
 (let (($x816 (and $x514 $x555)))
 (let (($x482 (and $x816 $x694)))
 (let ((?x254 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x450 (= ?x254 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x580 (bvuge ?x590 (_ bv1 32))))
 (let (($x884 (=> $x580 $x450)))
 (let (($x333 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x402 (= $x580 $x333)))
 (let (($x78 (=> $x130 $x15)))
 (let (($x578 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x623 (= $x130 $x578)))
 (let (($x370 (and $x623 $x78)))
 (let (($x706 (and $x370 $x402)))
 (let (($x188 (and $x706 $x884)))
 (let (($x611 (and $x188 $x482)))
 (let (($x407 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x521 (and $x407 $x611)))
 (let (($x270 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x411 (and $x270 $x521)))
 (let (($x889 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x213 (and $x889 $x411)))
 (let (($x425 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x109 (and $x425 $x213)))
 (let (($x792 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x255 (and $x792 $x109)))
 (let (($x160 (and $x15 $x255)))
 (let (($x399 (= ?x343 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x162 (and $x399 $x160)))
 (let (($x554 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x665 (and $x554 $x162)))
 (let (($x236 (and $x15 $x665)))
 (let (($x12 (= ?x90 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x377 (and $x12 $x236)))
 (let (($x748 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x276 (and $x748 $x377)))
 (let (($x767 (and $x15 $x276)))
 (let (($x426 (= ?x184 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x708 (and $x426 $x767)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x239 (and $x13 $x708)))
 (let (($x663 (and $x15 $x239)))
 (let (($x226 (= ?x254 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x84 (and $x226 $x663)))
 (let (($x395 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x793 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x881)))
 (let (($x57 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x793 $x395)))))))
 (let (($x470 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x850)))
 (let (($x191 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x232 $x470)))))))
 (let (($x285 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x658 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x877)))
 (let (($x86 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x658 $x285)))))))
 (let (($x744 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x878 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x124 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x878 $x744)))))))
 (let (($x606 (and $x124 $x86)))
 (let (($x261 (and $x606 $x191)))
 (let (($x457 (and $x261 $x57)))
 (let (($x591 (and $x457 $x84)))
 (let (($x301 (=> $x591 $x298)))
 (not $x301)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x24 (concat ?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x850 (bvadd ?x68 (_ bv3 32))))
 (let ((?x492 (concat (select input.dst.llvm-mem ?x850) (concat ?x262 ?x24))))
 (let ((?x336 (bvmul (_ bv4294967295 32) ?x492)))
 (let ((?x369 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x849 (concat ?x369 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x186 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x881 (bvadd ?x186 (_ bv3 32))))
 (let ((?x796 (concat (select input.dst.llvm-mem ?x881) (concat ?x227 ?x849))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x263 (concat ?x440 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x732 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x110 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x877 (bvadd ?x110 (_ bv3 32))))
 (let ((?x93 (concat (select input.dst.llvm-mem ?x877) (concat ?x732 ?x263))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x733 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x339)))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x733)))
 (let ((?x267 (bvadd (bvadd (bvadd ?x228 ?x93) ?x796) ?x336)))
 (let ((?x90 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x284 (= ?x90 ?x267)))
 (let (($x427 (= $x284 true)))
 (let (($x298 (= $x427 true)))
 (let ((?x683 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x684 (concat ?x58 (concat ?x281 (concat ?x461 ?x683)))))
 (let (($x509 (= ?x684 input.dst.llvm-%m)))
 (let (($x206 (= $x509 true)))
 (let (($x552 (= $x206 true)))
 (let (($x275 (= input.dst.llvm-%m ?x684)))
 (let ((?x429 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x169 (= (_ bv0 32) ?x429)))
 (let ((?x311 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x645 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x311)))
 (let (($x629 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x632 (and $x629 $x645)))
 (let (($x880 (and $x632 $x169)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x842 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv1 32))) (select input.dst.llvm-mem ?x842))))
 (let ((?x518 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv2 32))) ?x257))))
 (let ((?x771 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x771 (_ bv1 32))))
 (=> $x112 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x518))))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x771 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x771 (_ bv1 32))))
 (= $x112 (bvuge ?x851 (_ bv1 32)))))))
 ))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x15 (= false false)))
 (let ((?x771 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x771 (_ bv0 32))))
 (=> $x637 $x15)))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x771 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x771 (_ bv0 32))))
 (= $x637 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x824 (and $x585 $x604)))
 (let (($x435 (and $x824 $x85)))
 (let (($x50 (and $x435 $x151)))
 (let (($x806 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x96 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let (($x638 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv4 32))) (bvult ?x186 (bvsub ?x186 (_ bv4 32))))))
 (let (($x527 (and true $x638)))
 (let (($x537 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x329 (and $x537 $x527)))
 (let (($x493 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv8 32))) (bvult ?x68 (bvsub ?x68 (_ bv8 32))))))
 (let (($x653 (and (and (and true $x493) $x329) $x96)))
 (let (($x598 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x853 (and true $x598)))
 (let (($x505 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x696 (and $x505 $x853)))
 (let (($x382 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x110 (bvsub ?x110 (_ bv12 32))) (bvult ?x110 (bvsub ?x110 (_ bv12 32))))))
 (let (($x501 (and (and (and true $x505) $x382) $x696)))
 (let (($x556 (and (and (and (and (and (and $x501 $x653) $x53) $x806) $x50) $x880) $x275)))
 (let (($x442 (= $x556 true)))
 (let (($x99 (= $x442 true)))
 (let (($x79 (= $x99 true)))
 (let (($x818 (= $x501 true)))
 (let (($x322 (= $x818 true)))
 (let (($x14 (= $x322 true)))
 (let (($x173 (and $x653 $x53)))
 (let (($x513 (= $x173 true)))
 (let (($x879 (= $x513 true)))
 (let (($x823 (= $x879 true)))
 (let (($x843 (and $x823 $x14)))
 (let (($x678 (and $x843 $x79)))
 (let (($x168 (and $x678 $x552)))
 (let ((?x590 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x590 (_ bv0 32))))
 (let ((?x716 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x716 (_ bv0 32))))
 (let (($x152 (and $x22 $x130)))
 (let ((?x297 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x297 (_ bv1 32))))
 (let (($x39 (and $x809 $x152)))
 (let ((?x29 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x29 (_ bv0 32))))
 (let (($x854 (and $x269 $x39)))
 (let (($x820 (and $x854 $x168)))
 (let ((?x343 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x810 (= ?x343 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x635 (bvuge ?x29 (_ bv1 32))))
 (let (($x223 (=> $x635 $x810)))
 (let (($x573 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x538 (= $x635 $x573)))
 (let (($x15 (= false false)))
 (let (($x840 (=> $x269 $x15)))
 (let (($x839 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x639 (= $x269 $x839)))
 (let (($x847 (and $x639 $x840)))
 (let (($x410 (and $x847 $x538)))
 (let (($x460 (and $x410 $x223)))
 (let (($x374 (and $x460 $x820)))
 (let (($x21 (= ?x90 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x358 (=> $x809 $x21)))
 (let (($x494 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x543 (= $x809 $x494)))
 (let (($x439 (= ?x297 (_ bv0 32))))
 (let (($x593 (=> $x439 $x15)))
 (let (($x516 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x224 (= $x439 $x516)))
 (let (($x561 (and $x224 $x593)))
 (let (($x49 (and $x561 $x543)))
 (let (($x670 (and $x49 $x358)))
 (let (($x694 (and $x670 $x374)))
 (let ((?x184 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x572 (= ?x184 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x802 (bvuge ?x716 (_ bv1 32))))
 (let (($x555 (=> $x802 $x572)))
 (let (($x331 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x182 (= $x802 $x331)))
 (let (($x9 (=> $x22 $x15)))
 (let (($x378 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x393 (= $x22 $x378)))
 (let (($x805 (and $x393 $x9)))
 (let (($x514 (and $x805 $x182)))
 (let (($x816 (and $x514 $x555)))
 (let (($x482 (and $x816 $x694)))
 (let ((?x254 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x450 (= ?x254 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x580 (bvuge ?x590 (_ bv1 32))))
 (let (($x884 (=> $x580 $x450)))
 (let (($x333 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x402 (= $x580 $x333)))
 (let (($x78 (=> $x130 $x15)))
 (let (($x578 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x623 (= $x130 $x578)))
 (let (($x370 (and $x623 $x78)))
 (let (($x706 (and $x370 $x402)))
 (let (($x188 (and $x706 $x884)))
 (let (($x611 (and $x188 $x482)))
 (let (($x407 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x521 (and $x407 $x611)))
 (let (($x270 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x411 (and $x270 $x521)))
 (let (($x889 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x213 (and $x889 $x411)))
 (let (($x425 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x109 (and $x425 $x213)))
 (let (($x792 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x255 (and $x792 $x109)))
 (let (($x160 (and $x15 $x255)))
 (let (($x399 (= ?x343 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x162 (and $x399 $x160)))
 (let (($x554 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x665 (and $x554 $x162)))
 (let (($x236 (and $x15 $x665)))
 (let (($x12 (= ?x90 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x377 (and $x12 $x236)))
 (let (($x748 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x276 (and $x748 $x377)))
 (let (($x767 (and $x15 $x276)))
 (let (($x426 (= ?x184 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x708 (and $x426 $x767)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x239 (and $x13 $x708)))
 (let (($x663 (and $x15 $x239)))
 (let (($x226 (= ?x254 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x84 (and $x226 $x663)))
 (let (($x395 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x793 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x881)))
 (let (($x57 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x793 $x395)))))))
 (let (($x470 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x850)))
 (let (($x191 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x232 $x470)))))))
 (let (($x285 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x658 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x877)))
 (let (($x86 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x658 $x285)))))))
 (let (($x744 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x878 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x124 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x878 $x744)))))))
 (let (($x606 (and $x124 $x86)))
 (let (($x261 (and $x606 $x191)))
 (let (($x457 (and $x261 $x57)))
 (let (($x591 (and $x457 $x84)))
 (let (($x301 (=> $x591 $x298)))
 (not $x301)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 240 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x407 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x172 (bvmul (_ bv4294967295 32) ?x407)))
 (let ((?x372 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x469 (bvadd ?x372 ?x172)))
 (let ((?x797 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x560 (concat ?x797 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x779 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x176 (bvadd ?x779 (_ bv3 32))))
 (let ((?x318 (concat (select input.dst.llvm-mem ?x176) (concat ?x366 ?x560))))
 (let ((?x830 (bvmul (_ bv4294967295 32) ?x318)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x135 (concat ?x97 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x850 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x406 (bvadd ?x850 (_ bv3 32))))
 (let ((?x609 (concat (select input.dst.llvm-mem ?x406) (concat ?x327 ?x135))))
 (let ((?x754 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x387 (concat ?x754 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x483 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x878 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x679 (bvadd ?x878 (_ bv3 32))))
 (let ((?x104 (concat (select input.dst.llvm-mem ?x679) (concat ?x483 ?x387))))
 (let ((?x826 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x826)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x352)))
 (let ((?x158 (bvadd (bvadd (bvadd ?x51 ?x104) ?x609) ?x830)))
 (let (($x644 (= ?x158 ?x469)))
 (let (($x447 (= $x644 true)))
 (let (($x655 (= $x447 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x403 (concat ?x312 (concat ?x36 ?x107)))))
 (let (($x116 (= ?x218 input.dst.llvm-%m)))
 (let (($x660 (= $x116 true)))
 (let (($x481 (= $x660 true)))
 (let (($x765 (= input.dst.llvm-%m ?x218)))
 (let ((?x299 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x120 (= (_ bv0 32) ?x299)))
 (let ((?x498 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x498)))
 (let (($x739 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x631 (and $x739 $x145)))
 (let (($x467 (and $x631 $x120)))
 (let (($x819 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x137 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x286))))
 (let ((?x54 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x54 (_ bv1 32))))
 (=> $x175 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x487))))))))
 ))
 (let (($x882 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x38 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x54 (_ bv1 32))))
 (= $x175 (bvuge ?x38 (_ bv1 32)))))))
 ))
 (let (($x785 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x343 (= false false)))
 (let ((?x54 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x54 (_ bv0 32))))
 (=> $x309 $x343)))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x54 (_ bv0 32))))
 (= $x309 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x364 (and $x545 $x785)))
 (let (($x436 (and $x364 $x882)))
 (let (($x667 (and $x436 $x819)))
 (let (($x678 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= (bvand ?x779 (_ bv4294967292 32)) ?x779)))
 (let (($x250 (= (bvand ?x850 (_ bv4294967292 32)) ?x850)))
 (let (($x307 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x850 (bvsub ?x850 (_ bv4 32))) (bvult ?x850 (bvsub ?x850 (_ bv4 32))))))
 (let (($x337 (and true $x307)))
 (let (($x103 (= (bvand ?x878 (_ bv4294967292 32)) ?x878)))
 (let (($x778 (and $x103 $x337)))
 (let (($x85 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x779 (bvsub ?x779 (_ bv8 32))) (bvult ?x779 (bvsub ?x779 (_ bv8 32))))))
 (let (($x518 (and (and (and true $x85) $x778) $x250)))
 (let (($x105 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x461 (and true $x105)))
 (let (($x645 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x683 (and $x645 $x461)))
 (let (($x647 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x878 (bvsub ?x878 (_ bv12 32))) (bvult ?x878 (bvsub ?x878 (_ bv12 32))))))
 (let (($x684 (and (and (and true $x645) $x647) $x683)))
 (let (($x564 (and (and (and (and (and (and $x684 $x518) $x153) $x678) $x667) $x467) $x765)))
 (let (($x490 (= $x564 true)))
 (let (($x185 (= $x490 true)))
 (let (($x784 (= $x185 true)))
 (let (($x275 (= $x684 true)))
 (let (($x556 (= $x275 true)))
 (let (($x442 (= $x556 true)))
 (let (($x151 (and $x518 $x153)))
 (let (($x50 (= $x151 true)))
 (let (($x790 (= $x50 true)))
 (let (($x629 (= $x790 true)))
 (let (($x99 (and $x629 $x442)))
 (let (($x458 (and $x99 $x784)))
 (let (($x524 (and $x458 $x481)))
 (let ((?x543 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x543 (_ bv1 32))))
 (let ((?x854 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x854 (_ bv1 32))))
 (let (($x585 (and $x235 $x839)))
 (let ((?x513 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x879 (= ?x513 (_ bv0 32))))
 (let (($x330 (and $x879 $x585)))
 (let ((?x776 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x532 (= ?x776 (_ bv0 32))))
 (let (($x604 (and $x532 $x330)))
 (let (($x258 (and $x604 $x524)))
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x851 (= ?x9 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x607 (bvuge ?x776 (_ bv1 32))))
 (let (($x477 (=> $x607 $x851)))
 (let (($x373 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x761 (= $x607 $x373)))
 (let (($x343 (= false false)))
 (let (($x806 (=> $x532 $x343)))
 (let (($x14 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x743 (= $x532 $x14)))
 (let (($x187 (and $x743 $x806)))
 (let (($x117 (and $x187 $x761)))
 (let (($x597 (and $x117 $x477)))
 (let (($x128 (and $x597 $x258)))
 (let ((?x402 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x449 (= ?x402 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x382 (bvuge ?x513 (_ bv1 32))))
 (let (($x136 (=> $x382 $x449)))
 (let (($x835 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x619 (= $x382 $x835)))
 (let (($x56 (=> $x879 $x343)))
 (let (($x53 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x823 (= $x879 $x53)))
 (let (($x505 (and $x823 $x56)))
 (let (($x76 (and $x505 $x619)))
 (let (($x424 (and $x76 $x136)))
 (let (($x419 (and $x424 $x128)))
 (let (($x782 (= ?x407 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x638 (=> $x235 $x782)))
 (let (($x537 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x571 (= $x235 $x537)))
 (let (($x751 (= ?x854 (_ bv0 32))))
 (let (($x468 (=> $x751 $x343)))
 (let (($x152 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x689 (= $x751 $x152)))
 (let (($x304 (and $x689 $x468)))
 (let (($x622 (and $x304 $x571)))
 (let (($x527 (and $x622 $x638)))
 (let (($x886 (and $x527 $x419)))
 (let (($x847 (= ?x372 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x635 (=> $x839 $x847)))
 (let (($x150 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x639 (= $x839 $x150)))
 (let (($x49 (= ?x543 (_ bv0 32))))
 (let (($x21 (=> $x49 $x343)))
 (let (($x809 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x673 (= $x49 $x809)))
 (let (($x358 (and $x673 $x21)))
 (let (($x840 (and $x358 $x639)))
 (let (($x573 (and $x840 $x635)))
 (let (($x210 (and $x573 $x886)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x699 (and $x297 $x210)))
 (let (($x816 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x772 (and $x816 $x699)))
 (let (($x572 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x155 (and $x572 $x772)))
 (let (($x514 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x280 (and $x514 $x155)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x704 (and $x331 $x280)))
 (let (($x614 (and $x343 $x704)))
 (let (($x805 (= ?x9 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x762 (and $x805 $x614)))
 (let (($x450 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x822 (and $x450 $x762)))
 (let (($x122 (and $x343 $x822)))
 (let (($x706 (= ?x402 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x296 (and $x706 $x122)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x376 (and $x130 $x296)))
 (let (($x661 (and $x343 $x376)))
 (let (($x143 (= ?x407 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x148 (and $x143 $x661)))
 (let (($x399 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x618 (and $x399 $x148)))
 (let (($x536 (and $x343 $x618)))
 (let (($x554 (= ?x372 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x799 (and $x554 $x536)))
 (let (($x804 (bvugt ?x850 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x693 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x406)))
 (let (($x226 (=> (bvule ?x850 (bvsub (bvadd ?x850 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x693 $x804)))))))
 (let (($x363 (bvugt ?x779 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x360 (=> (bvule ?x779 (bvsub (bvadd ?x779 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x363)))))))
 (let (($x519 (bvugt ?x878 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x415 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x679)))
 (let (($x138 (=> (bvule ?x878 (bvsub (bvadd ?x878 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x415 $x519)))))))
 (let (($x126 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x584 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x837 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x584)))
 (let (($x302 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x837 $x126)))))))
 (let (($x132 (and $x302 $x138)))
 (let (($x405 (and $x132 $x360)))
 (let (($x834 (and $x405 $x226)))
 (let (($x207 (and $x834 $x799)))
 (let (($x19 (=> $x207 $x655)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x407 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x172 (bvmul (_ bv4294967295 32) ?x407)))
 (let ((?x372 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x469 (bvadd ?x372 ?x172)))
 (let ((?x797 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x560 (concat ?x797 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x779 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x176 (bvadd ?x779 (_ bv3 32))))
 (let ((?x318 (concat (select input.dst.llvm-mem ?x176) (concat ?x366 ?x560))))
 (let ((?x830 (bvmul (_ bv4294967295 32) ?x318)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x135 (concat ?x97 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x850 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x406 (bvadd ?x850 (_ bv3 32))))
 (let ((?x609 (concat (select input.dst.llvm-mem ?x406) (concat ?x327 ?x135))))
 (let ((?x754 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x387 (concat ?x754 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x483 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x878 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x679 (bvadd ?x878 (_ bv3 32))))
 (let ((?x104 (concat (select input.dst.llvm-mem ?x679) (concat ?x483 ?x387))))
 (let ((?x826 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x826)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x352)))
 (let ((?x158 (bvadd (bvadd (bvadd ?x51 ?x104) ?x609) ?x830)))
 (let (($x644 (= ?x158 ?x469)))
 (let (($x447 (= $x644 true)))
 (let (($x655 (= $x447 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x403 (concat ?x312 (concat ?x36 ?x107)))))
 (let (($x116 (= ?x218 input.dst.llvm-%m)))
 (let (($x660 (= $x116 true)))
 (let (($x481 (= $x660 true)))
 (let (($x765 (= input.dst.llvm-%m ?x218)))
 (let ((?x299 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x120 (= (_ bv0 32) ?x299)))
 (let ((?x498 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x498)))
 (let (($x739 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x631 (and $x739 $x145)))
 (let (($x467 (and $x631 $x120)))
 (let (($x819 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x137 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x487 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x286))))
 (let ((?x54 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x54 (_ bv1 32))))
 (=> $x175 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x487))))))))
 ))
 (let (($x882 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x38 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x54 (_ bv1 32))))
 (= $x175 (bvuge ?x38 (_ bv1 32)))))))
 ))
 (let (($x785 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x343 (= false false)))
 (let ((?x54 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x54 (_ bv0 32))))
 (=> $x309 $x343)))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x54 (_ bv0 32))))
 (= $x309 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x364 (and $x545 $x785)))
 (let (($x436 (and $x364 $x882)))
 (let (($x667 (and $x436 $x819)))
 (let (($x678 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= (bvand ?x779 (_ bv4294967292 32)) ?x779)))
 (let (($x250 (= (bvand ?x850 (_ bv4294967292 32)) ?x850)))
 (let (($x307 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x850 (bvsub ?x850 (_ bv4 32))) (bvult ?x850 (bvsub ?x850 (_ bv4 32))))))
 (let (($x337 (and true $x307)))
 (let (($x103 (= (bvand ?x878 (_ bv4294967292 32)) ?x878)))
 (let (($x778 (and $x103 $x337)))
 (let (($x85 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x779 (bvsub ?x779 (_ bv8 32))) (bvult ?x779 (bvsub ?x779 (_ bv8 32))))))
 (let (($x518 (and (and (and true $x85) $x778) $x250)))
 (let (($x105 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x461 (and true $x105)))
 (let (($x645 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x683 (and $x645 $x461)))
 (let (($x647 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x878 (bvsub ?x878 (_ bv12 32))) (bvult ?x878 (bvsub ?x878 (_ bv12 32))))))
 (let (($x684 (and (and (and true $x645) $x647) $x683)))
 (let (($x564 (and (and (and (and (and (and $x684 $x518) $x153) $x678) $x667) $x467) $x765)))
 (let (($x490 (= $x564 true)))
 (let (($x185 (= $x490 true)))
 (let (($x784 (= $x185 true)))
 (let (($x275 (= $x684 true)))
 (let (($x556 (= $x275 true)))
 (let (($x442 (= $x556 true)))
 (let (($x151 (and $x518 $x153)))
 (let (($x50 (= $x151 true)))
 (let (($x790 (= $x50 true)))
 (let (($x629 (= $x790 true)))
 (let (($x99 (and $x629 $x442)))
 (let (($x458 (and $x99 $x784)))
 (let (($x524 (and $x458 $x481)))
 (let ((?x543 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x543 (_ bv1 32))))
 (let ((?x854 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x854 (_ bv1 32))))
 (let (($x585 (and $x235 $x839)))
 (let ((?x513 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x879 (= ?x513 (_ bv0 32))))
 (let (($x330 (and $x879 $x585)))
 (let ((?x776 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x532 (= ?x776 (_ bv0 32))))
 (let (($x604 (and $x532 $x330)))
 (let (($x258 (and $x604 $x524)))
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x851 (= ?x9 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x607 (bvuge ?x776 (_ bv1 32))))
 (let (($x477 (=> $x607 $x851)))
 (let (($x373 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x761 (= $x607 $x373)))
 (let (($x343 (= false false)))
 (let (($x806 (=> $x532 $x343)))
 (let (($x14 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x743 (= $x532 $x14)))
 (let (($x187 (and $x743 $x806)))
 (let (($x117 (and $x187 $x761)))
 (let (($x597 (and $x117 $x477)))
 (let (($x128 (and $x597 $x258)))
 (let ((?x402 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x449 (= ?x402 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x382 (bvuge ?x513 (_ bv1 32))))
 (let (($x136 (=> $x382 $x449)))
 (let (($x835 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x619 (= $x382 $x835)))
 (let (($x56 (=> $x879 $x343)))
 (let (($x53 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x823 (= $x879 $x53)))
 (let (($x505 (and $x823 $x56)))
 (let (($x76 (and $x505 $x619)))
 (let (($x424 (and $x76 $x136)))
 (let (($x419 (and $x424 $x128)))
 (let (($x782 (= ?x407 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x638 (=> $x235 $x782)))
 (let (($x537 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x571 (= $x235 $x537)))
 (let (($x751 (= ?x854 (_ bv0 32))))
 (let (($x468 (=> $x751 $x343)))
 (let (($x152 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x689 (= $x751 $x152)))
 (let (($x304 (and $x689 $x468)))
 (let (($x622 (and $x304 $x571)))
 (let (($x527 (and $x622 $x638)))
 (let (($x886 (and $x527 $x419)))
 (let (($x847 (= ?x372 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x635 (=> $x839 $x847)))
 (let (($x150 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x639 (= $x839 $x150)))
 (let (($x49 (= ?x543 (_ bv0 32))))
 (let (($x21 (=> $x49 $x343)))
 (let (($x809 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x673 (= $x49 $x809)))
 (let (($x358 (and $x673 $x21)))
 (let (($x840 (and $x358 $x639)))
 (let (($x573 (and $x840 $x635)))
 (let (($x210 (and $x573 $x886)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x699 (and $x297 $x210)))
 (let (($x816 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x772 (and $x816 $x699)))
 (let (($x572 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x155 (and $x572 $x772)))
 (let (($x514 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x280 (and $x514 $x155)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x704 (and $x331 $x280)))
 (let (($x614 (and $x343 $x704)))
 (let (($x805 (= ?x9 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x762 (and $x805 $x614)))
 (let (($x450 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x822 (and $x450 $x762)))
 (let (($x122 (and $x343 $x822)))
 (let (($x706 (= ?x402 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x296 (and $x706 $x122)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x376 (and $x130 $x296)))
 (let (($x661 (and $x343 $x376)))
 (let (($x143 (= ?x407 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x148 (and $x143 $x661)))
 (let (($x399 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x618 (and $x399 $x148)))
 (let (($x536 (and $x343 $x618)))
 (let (($x554 (= ?x372 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x799 (and $x554 $x536)))
 (let (($x804 (bvugt ?x850 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x693 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x406)))
 (let (($x226 (=> (bvule ?x850 (bvsub (bvadd ?x850 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x693 $x804)))))))
 (let (($x363 (bvugt ?x779 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x360 (=> (bvule ?x779 (bvsub (bvadd ?x779 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x183 $x363)))))))
 (let (($x519 (bvugt ?x878 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x415 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x679)))
 (let (($x138 (=> (bvule ?x878 (bvsub (bvadd ?x878 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x415 $x519)))))))
 (let (($x126 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x584 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x837 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x584)))
 (let (($x302 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x837 $x126)))))))
 (let (($x132 (and $x302 $x138)))
 (let (($x405 (and $x132 $x360)))
 (let (($x834 (and $x405 $x226)))
 (let (($x207 (and $x834 $x799)))
 (let (($x19 (=> $x207 $x655)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x347 (bvmul (_ bv4294967295 32) ?x113)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x844 (concat ?x157 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x410 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x363 (bvadd ?x232 (_ bv3 32))))
 (let ((?x493 (concat (select input.dst.llvm-mem ?x363) (concat ?x410 ?x844))))
 (let ((?x66 (bvmul (_ bv4294967295 32) ?x493)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x529 (concat ?x55 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x637 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x746 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x804 (bvadd ?x746 (_ bv3 32))))
 (let ((?x503 (concat (select input.dst.llvm-mem ?x804) (concat ?x637 ?x529))))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x526 (concat ?x362 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x646 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x584 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x519 (bvadd ?x584 (_ bv3 32))))
 (let ((?x853 (concat (select input.dst.llvm-mem ?x519) (concat ?x646 ?x526))))
 (let ((?x512 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x512)))
 (let ((?x711 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x264)))
 (let ((?x439 (bvadd (bvadd (bvadd ?x711 ?x853) ?x503) ?x66)))
 (let (($x516 (= ?x439 ?x347)))
 (let (($x224 (= $x516 true)))
 (let (($x670 (= $x224 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x755 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x262 (concat ?x651 (concat ?x755 (concat ?x28 ?x227)))))
 (let (($x427 (= ?x262 input.dst.llvm-%m)))
 (let (($x298 (= $x427 true)))
 (let (($x301 (= $x298 true)))
 (let (($x349 (= input.dst.llvm-%m ?x262)))
 (let ((?x611 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x521 (= (_ bv0 32) ?x611)))
 (let ((?x374 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x694 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x374)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x482 (and $x168 $x694)))
 (let (($x798 (and $x482 $x521)))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x339 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem ?x339))))
 (let ((?x546 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv2 32))) ?x93))))
 (let ((?x578 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x578 (_ bv1 32))))
 (=> $x213 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x546))))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x578 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x578 (_ bv1 32))))
 (= $x213 (bvuge ?x22 (_ bv1 32)))))))
 ))
 (let (($x425 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x450 (= false false)))
 (let ((?x578 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x578 (_ bv0 32))))
 (=> $x623 $x450)))))
 ))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x578 (_ bv0 32))))
 (= $x623 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x889 (and $x582 $x425)))
 (let (($x509 (and $x889 $x160)))
 (let (($x552 (and $x509 $x206)))
 (let (($x784 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x685 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x712 (= (bvand ?x746 (_ bv4294967292 32)) ?x746)))
 (let (($x166 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x746 (bvsub ?x746 (_ bv4 32))) (bvult ?x746 (bvsub ?x746 (_ bv4 32))))))
 (let (($x397 (and true $x166)))
 (let (($x745 (= (bvand ?x584 (_ bv4294967292 32)) ?x584)))
 (let (($x558 (and $x745 $x397)))
 (let (($x811 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv8 32))) (bvult ?x232 (bvsub ?x232 (_ bv8 32))))))
 (let (($x40 (and (and (and true $x811) $x558) $x712)))
 (let (($x312 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x757 (and true $x312)))
 (let (($x498 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x36 (and $x498 $x757)))
 (let (($x467 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x584 (bvsub ?x584 (_ bv12 32))) (bvult ?x584 (bvsub ?x584 (_ bv12 32))))))
 (let (($x677 (and (and (and true $x498) $x467) $x36)))
 (let (($x525 (and (and (and (and (and (and $x677 $x40) $x685) $x784) $x552) $x798) $x349)))
 (let (($x336 (= $x525 true)))
 (let (($x492 (= $x336 true)))
 (let (($x267 (= $x492 true)))
 (let (($x218 (= $x677 true)))
 (let (($x765 (= $x218 true)))
 (let (($x564 (= $x765 true)))
 (let (($x841 (and $x40 $x685)))
 (let (($x819 (= $x841 true)))
 (let (($x667 (= $x819 true)))
 (let (($x246 (= $x667 true)))
 (let (($x490 (and $x246 $x564)))
 (let (($x284 (and $x490 $x267)))
 (let (($x621 (and $x284 $x301)))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x835 (_ bv0 32))))
 (let ((?x330 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x330 (_ bv1 32))))
 (let (($x75 (and $x103 $x619)))
 (let ((?x151 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x151 (_ bv0 32))))
 (let (($x545 (and $x50 $x75)))
 (let ((?x99 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (= ?x99 (_ bv0 32))))
 (let (($x283 (and $x495 $x545)))
 (let (($x650 (and $x283 $x621)))
 (let ((?x689 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x200 (= ?x689 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x8 (bvuge ?x99 (_ bv1 32))))
 (let (($x38 (=> $x8 $x200)))
 (let (($x309 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x109 (= $x8 $x309)))
 (let (($x450 (= false false)))
 (let (($x79 (=> $x495 $x450)))
 (let (($x556 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x500 (= $x495 $x556)))
 (let (($x678 (and $x500 $x79)))
 (let (($x579 (and $x678 $x109)))
 (let (($x729 (and $x579 $x38)))
 (let (($x861 (and $x729 $x650)))
 (let ((?x150 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x58 (= ?x150 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x880 (bvuge ?x151 (_ bv1 32))))
 (let (($x243 (=> $x880 $x58)))
 (let (($x169 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x647 (= $x880 $x169)))
 (let (($x629 (=> $x50 $x450)))
 (let (($x238 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x790 (= $x50 $x238)))
 (let (($x311 (and $x790 $x629)))
 (let (($x448 (and $x311 $x647)))
 (let (($x114 (and $x448 $x243)))
 (let (($x789 (and $x114 $x861)))
 (let (($x692 (= ?x113 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x316 (=> $x103 $x692)))
 (let (($x568 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x842 (= $x103 $x568)))
 (let (($x604 (= ?x330 (_ bv0 32))))
 (let (($x824 (=> $x604 $x450)))
 (let (($x597 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x112 (= $x604 $x597)))
 (let (($x709 (and $x112 $x824)))
 (let (($x70 (and $x709 $x842)))
 (let (($x307 (and $x70 $x316)))
 (let (($x383 (and $x307 $x789)))
 (let ((?x706 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x806 (= ?x706 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x818 (bvuge ?x835 (_ bv1 32))))
 (let (($x187 (=> $x818 $x806)))
 (let (($x532 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x14 (= $x818 $x532)))
 (let (($x723 (=> $x619 $x450)))
 (let (($x505 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x76 (= $x619 $x505)))
 (let (($x449 (and $x76 $x723)))
 (let (($x743 (and $x449 $x14)))
 (let (($x607 (and $x743 $x187)))
 (let (($x23 (and $x607 $x383)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x508 (and $x173 $x23)))
 (let (($x638 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x562 (and $x638 $x508)))
 (let (($x460 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x624 (and $x460 $x562)))
 (let (($x571 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x94 (and $x571 $x624)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x687 (and $x235 $x94)))
 (let (($x27 (and $x450 $x687)))
 (let (($x468 (= ?x689 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x274 (and $x468 $x27)))
 (let (($x561 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x600 (and $x561 $x274)))
 (let (($x496 (and $x450 $x600)))
 (let (($x639 (= ?x150 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x891 (and $x639 $x496)))
 (let (($x543 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x814 (and $x543 $x891)))
 (let (($x672 (and $x450 $x814)))
 (let (($x297 (= ?x113 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x357 (and $x297 $x672)))
 (let (($x393 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x201 (and $x393 $x357)))
 (let (($x846 (and $x450 $x201)))
 (let (($x766 (= ?x706 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x73 (and $x766 $x846)))
 (let (($x57 (bvugt ?x746 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x804)))
 (let (($x12 (=> (bvule ?x746 (bvsub (bvadd ?x746 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x57)))))))
 (let (($x191 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x363)))
 (let (($x793 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x191)))))))
 (let (($x86 (bvugt ?x584 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x523 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x519)))
 (let (($x779 (=> (bvule ?x584 (bvsub (bvadd ?x584 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x523 $x86)))))))
 (let (($x124 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x744 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x744)))
 (let (($x658 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x300 $x124)))))))
 (let (($x285 (and $x658 $x779)))
 (let (($x470 (and $x285 $x793)))
 (let (($x395 (and $x470 $x12)))
 (let (($x247 (and $x395 $x73)))
 (let (($x803 (=> $x247 $x670)))
 (not $x803))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x113 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x347 (bvmul (_ bv4294967295 32) ?x113)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x844 (concat ?x157 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x410 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x363 (bvadd ?x232 (_ bv3 32))))
 (let ((?x493 (concat (select input.dst.llvm-mem ?x363) (concat ?x410 ?x844))))
 (let ((?x66 (bvmul (_ bv4294967295 32) ?x493)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x529 (concat ?x55 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x637 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x746 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x804 (bvadd ?x746 (_ bv3 32))))
 (let ((?x503 (concat (select input.dst.llvm-mem ?x804) (concat ?x637 ?x529))))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x526 (concat ?x362 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x646 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x584 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x519 (bvadd ?x584 (_ bv3 32))))
 (let ((?x853 (concat (select input.dst.llvm-mem ?x519) (concat ?x646 ?x526))))
 (let ((?x512 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x512)))
 (let ((?x711 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x264)))
 (let ((?x439 (bvadd (bvadd (bvadd ?x711 ?x853) ?x503) ?x66)))
 (let (($x516 (= ?x439 ?x347)))
 (let (($x224 (= $x516 true)))
 (let (($x670 (= $x224 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x755 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x262 (concat ?x651 (concat ?x755 (concat ?x28 ?x227)))))
 (let (($x427 (= ?x262 input.dst.llvm-%m)))
 (let (($x298 (= $x427 true)))
 (let (($x301 (= $x298 true)))
 (let (($x349 (= input.dst.llvm-%m ?x262)))
 (let ((?x611 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x521 (= (_ bv0 32) ?x611)))
 (let ((?x374 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x694 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x374)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x482 (and $x168 $x694)))
 (let (($x798 (and $x482 $x521)))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x339 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem ?x339))))
 (let ((?x546 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv2 32))) ?x93))))
 (let ((?x578 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x578 (_ bv1 32))))
 (=> $x213 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x546))))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x22 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x578 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x578 (_ bv1 32))))
 (= $x213 (bvuge ?x22 (_ bv1 32)))))))
 ))
 (let (($x425 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x450 (= false false)))
 (let ((?x578 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x578 (_ bv0 32))))
 (=> $x623 $x450)))))
 ))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x578 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x578 (_ bv0 32))))
 (= $x623 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x889 (and $x582 $x425)))
 (let (($x509 (and $x889 $x160)))
 (let (($x552 (and $x509 $x206)))
 (let (($x784 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x685 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x712 (= (bvand ?x746 (_ bv4294967292 32)) ?x746)))
 (let (($x166 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x746 (bvsub ?x746 (_ bv4 32))) (bvult ?x746 (bvsub ?x746 (_ bv4 32))))))
 (let (($x397 (and true $x166)))
 (let (($x745 (= (bvand ?x584 (_ bv4294967292 32)) ?x584)))
 (let (($x558 (and $x745 $x397)))
 (let (($x811 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv8 32))) (bvult ?x232 (bvsub ?x232 (_ bv8 32))))))
 (let (($x40 (and (and (and true $x811) $x558) $x712)))
 (let (($x312 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x757 (and true $x312)))
 (let (($x498 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x36 (and $x498 $x757)))
 (let (($x467 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x584 (bvsub ?x584 (_ bv12 32))) (bvult ?x584 (bvsub ?x584 (_ bv12 32))))))
 (let (($x677 (and (and (and true $x498) $x467) $x36)))
 (let (($x525 (and (and (and (and (and (and $x677 $x40) $x685) $x784) $x552) $x798) $x349)))
 (let (($x336 (= $x525 true)))
 (let (($x492 (= $x336 true)))
 (let (($x267 (= $x492 true)))
 (let (($x218 (= $x677 true)))
 (let (($x765 (= $x218 true)))
 (let (($x564 (= $x765 true)))
 (let (($x841 (and $x40 $x685)))
 (let (($x819 (= $x841 true)))
 (let (($x667 (= $x819 true)))
 (let (($x246 (= $x667 true)))
 (let (($x490 (and $x246 $x564)))
 (let (($x284 (and $x490 $x267)))
 (let (($x621 (and $x284 $x301)))
 (let ((?x835 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x835 (_ bv0 32))))
 (let ((?x330 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x330 (_ bv1 32))))
 (let (($x75 (and $x103 $x619)))
 (let ((?x151 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x50 (= ?x151 (_ bv0 32))))
 (let (($x545 (and $x50 $x75)))
 (let ((?x99 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x495 (= ?x99 (_ bv0 32))))
 (let (($x283 (and $x495 $x545)))
 (let (($x650 (and $x283 $x621)))
 (let ((?x689 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x200 (= ?x689 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x8 (bvuge ?x99 (_ bv1 32))))
 (let (($x38 (=> $x8 $x200)))
 (let (($x309 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x109 (= $x8 $x309)))
 (let (($x450 (= false false)))
 (let (($x79 (=> $x495 $x450)))
 (let (($x556 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x500 (= $x495 $x556)))
 (let (($x678 (and $x500 $x79)))
 (let (($x579 (and $x678 $x109)))
 (let (($x729 (and $x579 $x38)))
 (let (($x861 (and $x729 $x650)))
 (let ((?x150 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x58 (= ?x150 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x880 (bvuge ?x151 (_ bv1 32))))
 (let (($x243 (=> $x880 $x58)))
 (let (($x169 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x647 (= $x880 $x169)))
 (let (($x629 (=> $x50 $x450)))
 (let (($x238 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x790 (= $x50 $x238)))
 (let (($x311 (and $x790 $x629)))
 (let (($x448 (and $x311 $x647)))
 (let (($x114 (and $x448 $x243)))
 (let (($x789 (and $x114 $x861)))
 (let (($x692 (= ?x113 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x316 (=> $x103 $x692)))
 (let (($x568 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x842 (= $x103 $x568)))
 (let (($x604 (= ?x330 (_ bv0 32))))
 (let (($x824 (=> $x604 $x450)))
 (let (($x597 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x112 (= $x604 $x597)))
 (let (($x709 (and $x112 $x824)))
 (let (($x70 (and $x709 $x842)))
 (let (($x307 (and $x70 $x316)))
 (let (($x383 (and $x307 $x789)))
 (let ((?x706 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x806 (= ?x706 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x818 (bvuge ?x835 (_ bv1 32))))
 (let (($x187 (=> $x818 $x806)))
 (let (($x532 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x14 (= $x818 $x532)))
 (let (($x723 (=> $x619 $x450)))
 (let (($x505 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x76 (= $x619 $x505)))
 (let (($x449 (and $x76 $x723)))
 (let (($x743 (and $x449 $x14)))
 (let (($x607 (and $x743 $x187)))
 (let (($x23 (and $x607 $x383)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x508 (and $x173 $x23)))
 (let (($x638 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x562 (and $x638 $x508)))
 (let (($x460 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x624 (and $x460 $x562)))
 (let (($x571 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x94 (and $x571 $x624)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x687 (and $x235 $x94)))
 (let (($x27 (and $x450 $x687)))
 (let (($x468 (= ?x689 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x274 (and $x468 $x27)))
 (let (($x561 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x600 (and $x561 $x274)))
 (let (($x496 (and $x450 $x600)))
 (let (($x639 (= ?x150 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x891 (and $x639 $x496)))
 (let (($x543 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x814 (and $x543 $x891)))
 (let (($x672 (and $x450 $x814)))
 (let (($x297 (= ?x113 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x357 (and $x297 $x672)))
 (let (($x393 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x201 (and $x393 $x357)))
 (let (($x846 (and $x450 $x201)))
 (let (($x766 (= ?x706 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x73 (and $x766 $x846)))
 (let (($x57 (bvugt ?x746 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x804)))
 (let (($x12 (=> (bvule ?x746 (bvsub (bvadd ?x746 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x57)))))))
 (let (($x191 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x363)))
 (let (($x793 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x191)))))))
 (let (($x86 (bvugt ?x584 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x523 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x519)))
 (let (($x779 (=> (bvule ?x584 (bvsub (bvadd ?x584 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x523 $x86)))))))
 (let (($x124 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x744 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x300 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x744)))
 (let (($x658 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x300 $x124)))))))
 (let (($x285 (and $x658 $x779)))
 (let (($x470 (and $x285 $x793)))
 (let (($x395 (and $x470 $x12)))
 (let (($x247 (and $x395 $x73)))
 (let (($x803 (=> $x247 $x670)))
 (not $x803))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 241 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x632 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x373 (concat ?x632 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x183 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x261 (bvadd ?x183 (_ bv3 32))))
 (let ((?x85 (concat (select input.dst.llvm-mem ?x261) (concat ?x117 ?x373))))
 (let ((?x257 (bvmul (_ bv4294967295 32) ?x85)))
 (let ((?x566 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x827 (concat ?x566 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x363 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x457 (bvadd ?x363 (_ bv3 32))))
 (let ((?x472 (concat (select input.dst.llvm-mem ?x457) (concat ?x337 ?x827))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x434 (concat ?x273 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x775 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x124 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x606 (bvadd ?x124 (_ bv3 32))))
 (let ((?x461 (concat (select input.dst.llvm-mem ?x606) (concat ?x775 ?x434))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x84)))
 (let ((?x591 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x7)))
 (let ((?x879 (bvadd (bvadd (bvadd ?x591 ?x461) ?x472) ?x257)))
 (let ((?x840 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x653 (= ?x840 ?x879)))
 (let (($x53 (= $x653 true)))
 (let (($x136 (= $x53 true)))
 (let ((?x887 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x485 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x797 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x609 (concat ?x366 (concat ?x797 (concat ?x485 ?x887)))))
 (let (($x644 (= ?x609 input.dst.llvm-%m)))
 (let (($x447 (= $x644 true)))
 (let (($x655 (= $x447 true)))
 (let (($x193 (= input.dst.llvm-%m ?x609)))
 (let ((?x210 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x97 (= (_ bv0 32) ?x210)))
 (let ((?x128 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x419 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x886 (and $x258 $x419)))
 (let (($x541 (and $x886 $x97)))
 (let (($x660 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x826 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x826 (_ bv1 32))) (select input.dst.llvm-mem ?x826))))
 (let ((?x726 (concat (select input.dst.llvm-mem (bvadd ?x826 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x826 (_ bv2 32))) ?x192))))
 (let ((?x809 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x809 (_ bv1 32))))
 (=> $x280 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x726))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x673 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x809 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x809 (_ bv1 32))))
 (= $x280 (bvuge ?x673 (_ bv1 32)))))))
 ))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x689 (= false false)))
 (let ((?x809 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x809 (_ bv0 32))))
 (=> $x343 $x689)))))
 ))
 (let (($x802 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x809 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x809 (_ bv0 32))))
 (= $x343 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x143 (and $x802 $x416)))
 (let (($x762 (and $x143 $x458)))
 (let (($x481 (and $x762 $x660)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x820 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x733 (= (bvand ?x363 (_ bv4294967292 32)) ?x363)))
 (let (($x440 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x363 (bvsub ?x363 (_ bv4 32))) (bvult ?x363 (bvsub ?x363 (_ bv4 32))))))
 (let (($x530 (and true $x440)))
 (let (($x614 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x228 (and $x614 $x530)))
 (let (($x160 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x183 (bvsub ?x183 (_ bv8 32))) (bvult ?x183 (bvsub ?x183 (_ bv8 32))))))
 (let (($x546 (and (and (and true $x160) $x228) $x733)))
 (let (($x721 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x28 (and true $x721)))
 (let (($x694 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x227 (and $x694 $x28)))
 (let (($x24 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv12 32))) (bvult ?x124 (bvsub ?x124 (_ bv12 32))))))
 (let (($x262 (and (and (and true $x694) $x24) $x227)))
 (let (($x830 (and (and (and (and (and (and $x262 $x546) $x820) $x284) $x481) $x541) $x193)))
 (let (($x318 (= $x830 true)))
 (let (($x158 (= $x318 true)))
 (let (($x172 (= $x158 true)))
 (let (($x349 (= $x262 true)))
 (let (($x525 (= $x349 true)))
 (let (($x336 (= $x525 true)))
 (let (($x206 (and $x546 $x820)))
 (let (($x552 (= $x206 true)))
 (let (($x794 (= $x552 true)))
 (let (($x168 (= $x794 true)))
 (let (($x492 (and $x168 $x336)))
 (let (($x469 (and $x492 $x172)))
 (let (($x885 (and $x469 $x655)))
 (let ((?x647 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x556 (bvuge ?x647 (_ bv1 32))))
 (let ((?x283 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x283 (_ bv0 32))))
 (let (($x582 (and $x364 $x556)))
 (let ((?x819 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (= ?x819 (_ bv0 32))))
 (let (($x474 (and $x667 $x582)))
 (let ((?x414 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x796 (= ?x414 (_ bv0 32))))
 (let (($x425 (and $x796 $x474)))
 (let (($x19 (and $x425 $x885)))
 (let ((?x824 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x22 (= ?x824 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x155 (bvuge ?x414 (_ bv1 32))))
 (let (($x15 (=> $x155 $x22)))
 (let (($x188 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x884 (= $x155 $x188)))
 (let (($x689 (= false false)))
 (let (($x784 (=> $x796 $x689)))
 (let (($x564 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x185 (= $x796 $x564)))
 (let (($x594 (and $x185 $x784)))
 (let (($x432 (and $x594 $x884)))
 (let (($x78 (and $x432 $x15)))
 (let (($x881 (and $x78 $x19)))
 (let ((?x14 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x34 (= ?x14 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x467 (bvuge ?x819 (_ bv1 32))))
 (let (($x403 (=> $x467 $x34)))
 (let (($x120 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x479 (= $x467 $x120)))
 (let (($x739 (=> $x667 $x689)))
 (let (($x685 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x246 (= $x667 $x685)))
 (let (($x498 (and $x246 $x739)))
 (let (($x290 (and $x498 $x479)))
 (let (($x48 (and $x290 $x403)))
 (let (($x855 (and $x48 $x881)))
 (let ((?x173 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x714 (= ?x173 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x464 (bvuge ?x283 (_ bv1 32))))
 (let (($x166 (=> $x464 $x714)))
 (let (($x745 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x162 (= $x464 $x745)))
 (let (($x175 (=> $x364 $x689)))
 (let (($x75 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x785 (= $x364 $x75)))
 (let (($x245 (and $x785 $x175)))
 (let (($x137 (and $x245 $x162)))
 (let (($x397 (and $x137 $x166)))
 (let (($x859 (and $x397 $x855)))
 (let (($x678 (= ?x840 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x8 (=> $x556 $x678)))
 (let (($x684 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x500 (= $x556 $x684)))
 (let (($x448 (= ?x647 (_ bv0 32))))
 (let (($x58 (=> $x448 $x689)))
 (let (($x880 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x518 (= $x448 $x880)))
 (let (($x243 (and $x518 $x58)))
 (let (($x79 (and $x243 $x500)))
 (let (($x309 (and $x79 $x8)))
 (let (($x13 (and $x309 $x859)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x792 (and $x151 $x13)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x852 (and $x307 $x792)))
 (let (($x692 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x759 (and $x692 $x852)))
 (let (($x70 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x184 (and $x70 $x759)))
 (let (($x568 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x426 (and $x568 $x184)))
 (let (($x748 (and $x689 $x426)))
 (let (($x709 (= ?x824 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x378 (and $x709 $x748)))
 (let (($x806 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x190 (and $x806 $x378)))
 (let (($x370 (and $x689 $x190)))
 (let (($x743 (= ?x14 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x580 (and $x743 $x370)))
 (let (($x619 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x95 (and $x619 $x580)))
 (let (($x270 (and $x689 $x95)))
 (let (($x382 (= ?x173 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x90 (and $x382 $x270)))
 (let (($x468 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x381 (and $x468 $x90)))
 (let (($x665 (and $x689 $x381)))
 (let (($x561 (= ?x840 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x279 (and $x561 $x665)))
 (let (($x226 (bvugt ?x363 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x457)))
 (let (($x766 (=> (bvule ?x363 (bvsub (bvadd ?x363 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x226)))))))
 (let (($x360 (bvugt ?x183 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x693 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x186 $x360)))))))
 (let (($x138 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x465 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x606)))
 (let (($x176 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x465 $x138)))))))
 (let (($x302 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x862 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x862)))
 (let (($x415 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x302)))))))
 (let (($x877 (and $x415 $x176)))
 (let (($x850 (and $x877 $x693)))
 (let (($x372 (and $x850 $x766)))
 (let (($x680 (and $x372 $x279)))
 (let (($x424 (=> $x680 $x136)))
 (not $x424)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x632 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x373 (concat ?x632 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x183 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x261 (bvadd ?x183 (_ bv3 32))))
 (let ((?x85 (concat (select input.dst.llvm-mem ?x261) (concat ?x117 ?x373))))
 (let ((?x257 (bvmul (_ bv4294967295 32) ?x85)))
 (let ((?x566 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x827 (concat ?x566 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x363 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x457 (bvadd ?x363 (_ bv3 32))))
 (let ((?x472 (concat (select input.dst.llvm-mem ?x457) (concat ?x337 ?x827))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x434 (concat ?x273 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x775 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x124 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x606 (bvadd ?x124 (_ bv3 32))))
 (let ((?x461 (concat (select input.dst.llvm-mem ?x606) (concat ?x775 ?x434))))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x84)))
 (let ((?x591 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x7)))
 (let ((?x879 (bvadd (bvadd (bvadd ?x591 ?x461) ?x472) ?x257)))
 (let ((?x840 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x653 (= ?x840 ?x879)))
 (let (($x53 (= $x653 true)))
 (let (($x136 (= $x53 true)))
 (let ((?x887 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x485 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x797 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x609 (concat ?x366 (concat ?x797 (concat ?x485 ?x887)))))
 (let (($x644 (= ?x609 input.dst.llvm-%m)))
 (let (($x447 (= $x644 true)))
 (let (($x655 (= $x447 true)))
 (let (($x193 (= input.dst.llvm-%m ?x609)))
 (let ((?x210 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x97 (= (_ bv0 32) ?x210)))
 (let ((?x128 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x419 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x886 (and $x258 $x419)))
 (let (($x541 (and $x886 $x97)))
 (let (($x660 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x826 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x826 (_ bv1 32))) (select input.dst.llvm-mem ?x826))))
 (let ((?x726 (concat (select input.dst.llvm-mem (bvadd ?x826 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x826 (_ bv2 32))) ?x192))))
 (let ((?x809 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x809 (_ bv1 32))))
 (=> $x280 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x726))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x673 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x809 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x809 (_ bv1 32))))
 (= $x280 (bvuge ?x673 (_ bv1 32)))))))
 ))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x689 (= false false)))
 (let ((?x809 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x809 (_ bv0 32))))
 (=> $x343 $x689)))))
 ))
 (let (($x802 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x809 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x809 (_ bv0 32))))
 (= $x343 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x143 (and $x802 $x416)))
 (let (($x762 (and $x143 $x458)))
 (let (($x481 (and $x762 $x660)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x820 (= (bvand ?x183 (_ bv4294967292 32)) ?x183)))
 (let (($x733 (= (bvand ?x363 (_ bv4294967292 32)) ?x363)))
 (let (($x440 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x363 (bvsub ?x363 (_ bv4 32))) (bvult ?x363 (bvsub ?x363 (_ bv4 32))))))
 (let (($x530 (and true $x440)))
 (let (($x614 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x228 (and $x614 $x530)))
 (let (($x160 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x183 (bvsub ?x183 (_ bv8 32))) (bvult ?x183 (bvsub ?x183 (_ bv8 32))))))
 (let (($x546 (and (and (and true $x160) $x228) $x733)))
 (let (($x721 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x28 (and true $x721)))
 (let (($x694 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x227 (and $x694 $x28)))
 (let (($x24 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x124 (bvsub ?x124 (_ bv12 32))) (bvult ?x124 (bvsub ?x124 (_ bv12 32))))))
 (let (($x262 (and (and (and true $x694) $x24) $x227)))
 (let (($x830 (and (and (and (and (and (and $x262 $x546) $x820) $x284) $x481) $x541) $x193)))
 (let (($x318 (= $x830 true)))
 (let (($x158 (= $x318 true)))
 (let (($x172 (= $x158 true)))
 (let (($x349 (= $x262 true)))
 (let (($x525 (= $x349 true)))
 (let (($x336 (= $x525 true)))
 (let (($x206 (and $x546 $x820)))
 (let (($x552 (= $x206 true)))
 (let (($x794 (= $x552 true)))
 (let (($x168 (= $x794 true)))
 (let (($x492 (and $x168 $x336)))
 (let (($x469 (and $x492 $x172)))
 (let (($x885 (and $x469 $x655)))
 (let ((?x647 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x556 (bvuge ?x647 (_ bv1 32))))
 (let ((?x283 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x364 (= ?x283 (_ bv0 32))))
 (let (($x582 (and $x364 $x556)))
 (let ((?x819 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x667 (= ?x819 (_ bv0 32))))
 (let (($x474 (and $x667 $x582)))
 (let ((?x414 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x796 (= ?x414 (_ bv0 32))))
 (let (($x425 (and $x796 $x474)))
 (let (($x19 (and $x425 $x885)))
 (let ((?x824 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x22 (= ?x824 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x155 (bvuge ?x414 (_ bv1 32))))
 (let (($x15 (=> $x155 $x22)))
 (let (($x188 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x884 (= $x155 $x188)))
 (let (($x689 (= false false)))
 (let (($x784 (=> $x796 $x689)))
 (let (($x564 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x185 (= $x796 $x564)))
 (let (($x594 (and $x185 $x784)))
 (let (($x432 (and $x594 $x884)))
 (let (($x78 (and $x432 $x15)))
 (let (($x881 (and $x78 $x19)))
 (let ((?x14 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x34 (= ?x14 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x467 (bvuge ?x819 (_ bv1 32))))
 (let (($x403 (=> $x467 $x34)))
 (let (($x120 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x479 (= $x467 $x120)))
 (let (($x739 (=> $x667 $x689)))
 (let (($x685 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x246 (= $x667 $x685)))
 (let (($x498 (and $x246 $x739)))
 (let (($x290 (and $x498 $x479)))
 (let (($x48 (and $x290 $x403)))
 (let (($x855 (and $x48 $x881)))
 (let ((?x173 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x714 (= ?x173 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x464 (bvuge ?x283 (_ bv1 32))))
 (let (($x166 (=> $x464 $x714)))
 (let (($x745 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x162 (= $x464 $x745)))
 (let (($x175 (=> $x364 $x689)))
 (let (($x75 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x785 (= $x364 $x75)))
 (let (($x245 (and $x785 $x175)))
 (let (($x137 (and $x245 $x162)))
 (let (($x397 (and $x137 $x166)))
 (let (($x859 (and $x397 $x855)))
 (let (($x678 (= ?x840 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x8 (=> $x556 $x678)))
 (let (($x684 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x500 (= $x556 $x684)))
 (let (($x448 (= ?x647 (_ bv0 32))))
 (let (($x58 (=> $x448 $x689)))
 (let (($x880 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x518 (= $x448 $x880)))
 (let (($x243 (and $x518 $x58)))
 (let (($x79 (and $x243 $x500)))
 (let (($x309 (and $x79 $x8)))
 (let (($x13 (and $x309 $x859)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x792 (and $x151 $x13)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x852 (and $x307 $x792)))
 (let (($x692 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x759 (and $x692 $x852)))
 (let (($x70 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x184 (and $x70 $x759)))
 (let (($x568 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x426 (and $x568 $x184)))
 (let (($x748 (and $x689 $x426)))
 (let (($x709 (= ?x824 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x378 (and $x709 $x748)))
 (let (($x806 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x190 (and $x806 $x378)))
 (let (($x370 (and $x689 $x190)))
 (let (($x743 (= ?x14 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x580 (and $x743 $x370)))
 (let (($x619 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x95 (and $x619 $x580)))
 (let (($x270 (and $x689 $x95)))
 (let (($x382 (= ?x173 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x90 (and $x382 $x270)))
 (let (($x468 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x381 (and $x468 $x90)))
 (let (($x665 (and $x689 $x381)))
 (let (($x561 (= ?x840 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x279 (and $x561 $x665)))
 (let (($x226 (bvugt ?x363 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x457)))
 (let (($x766 (=> (bvule ?x363 (bvsub (bvadd ?x363 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x226)))))))
 (let (($x360 (bvugt ?x183 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x693 (=> (bvule ?x183 (bvsub (bvadd ?x183 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x186 $x360)))))))
 (let (($x138 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x465 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x606)))
 (let (($x176 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x465 $x138)))))))
 (let (($x302 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x862 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x862)))
 (let (($x415 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x110 $x302)))))))
 (let (($x877 (and $x415 $x176)))
 (let (($x850 (and $x877 $x693)))
 (let (($x372 (and $x850 $x766)))
 (let (($x680 (and $x372 $x279)))
 (let (($x424 (=> $x680 $x136)))
 (not $x424)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 240 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x579 (concat ?x109 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x360 (bvadd ?x6 (_ bv3 32))))
 (let ((?x882 (concat (select input.dst.llvm-mem ?x360) (concat ?x200 ?x579))))
 (let ((?x436 (bvmul (_ bv4294967295 32) ?x882)))
 (let ((?x578 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x623 (concat ?x578 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x406 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x226 (bvadd ?x406 (_ bv3 32))))
 (let ((?x107 (concat (select input.dst.llvm-mem ?x226) (concat ?x286 ?x623))))
 (let ((?x610 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x204 (concat ?x610 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x523 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x138 (bvadd ?x523 (_ bv3 32))))
 (let ((?x677 (concat (select input.dst.llvm-mem ?x138) (concat ?x312 ?x204))))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x618 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x376)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x618)))
 (let ((?x238 (bvadd (bvadd (bvadd ?x296 ?x677) ?x107) ?x436)))
 (let (($x790 (= (_ bv0 32) ?x238)))
 (let (($x114 (= $x790 true)))
 (let (($x442 (= $x114 true)))
 (let ((?x501 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x529 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x730 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x730 (concat ?x244 (concat ?x529 ?x501)))))
 (let (($x670 (= ?x96 input.dst.llvm-%m)))
 (let (($x803 (= $x670 true)))
 (let (($x795 (= $x803 true)))
 (let (($x503 (= input.dst.llvm-%m ?x96)))
 (let ((?x696 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x528 (= (_ bv0 32) ?x696)))
 (let ((?x383 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x383)))
 (let (($x789 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x508 (and $x789 $x23)))
 (let (($x637 (and $x508 $x528)))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x711 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv1 32))) (select input.dst.llvm-mem ?x711))))
 (let ((?x731 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv2 32))) ?x443))))
 (let ((?x723 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x723 (_ bv1 32))))
 (=> $x27 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x731))))))))
 ))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x723 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x723 (_ bv1 32))))
 (= $x27 (bvuge ?x823 (_ bv1 32)))))))
 ))
 (let (($x494 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x824 (= false false)))
 (let ((?x723 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x723 (_ bv0 32))))
 (=> $x622 $x824)))))
 ))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x723 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x723 (_ bv0 32))))
 (= $x622 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x805 (and $x537 $x494)))
 (let (($x315 (and $x805 $x600)))
 (let (($x861 (and $x315 $x621)))
 (let (($x469 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x352 (= (bvand ?x406 (_ bv4294967292 32)) ?x406)))
 (let (($x754 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x406 (bvsub ?x406 (_ bv4 32))) (bvult ?x406 (bvsub ?x406 (_ bv4 32))))))
 (let (($x497 (and true $x754)))
 (let (($x274 (= (bvand ?x523 (_ bv4294967292 32)) ?x523)))
 (let (($x387 (and $x274 $x497)))
 (let (($x458 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x726 (and (and (and true $x458) $x387) $x352)))
 (let (($x327 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x485 (and true $x327)))
 (let (($x419 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x887 (and $x419 $x485)))
 (let (($x669 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x523 (bvsub ?x523 (_ bv12 32))) (bvult ?x523 (bvsub ?x523 (_ bv12 32))))))
 (let (($x609 (and (and (and true $x419) $x669) $x887)))
 (let (($x493 (and (and (and (and (and (and $x609 $x726) $x116) $x469) $x861) $x637) $x503)))
 (let (($x439 (= $x493 true)))
 (let (($x347 (= $x439 true)))
 (let (($x516 (= $x347 true)))
 (let (($x193 (= $x609 true)))
 (let (($x830 (= $x193 true)))
 (let (($x318 (= $x830 true)))
 (let (($x660 (and $x726 $x116)))
 (let (($x481 (= $x660 true)))
 (let (($x560 (= $x481 true)))
 (let (($x258 (= $x560 true)))
 (let (($x158 (and $x258 $x318)))
 (let (($x224 (and $x158 $x516)))
 (let (($x29 (and $x224 $x795)))
 (let ((?x479 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x479 (_ bv0 32))))
 (let ((?x425 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x425 (_ bv0 32))))
 (let (($x802 (and $x213 $x290)))
 (let ((?x552 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x794 (= ?x552 (_ bv0 32))))
 (let (($x182 (and $x794 $x802)))
 (let ((?x780 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (= ?x780 (_ bv0 32))))
 (let (($x416 (and $x540 $x182)))
 (let (($x554 (and $x416 $x29)))
 (let ((?x175 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x673 (= ?x175 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x94 (bvuge ?x780 (_ bv1 32))))
 (let (($x49 (=> $x94 $x673)))
 (let (($x573 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x635 (= $x94 $x573)))
 (let (($x824 (= false false)))
 (let (($x284 (=> $x540 $x824)))
 (let (($x336 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x267 (= $x540 $x336)))
 (let (($x576 (and $x267 $x284)))
 (let (($x854 (and $x576 $x635)))
 (let (($x514 (and $x854 $x49)))
 (let (($x5 (and $x514 $x554)))
 (let ((?x500 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x164 (= ?x500 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x24 (bvuge ?x552 (_ bv1 32))))
 (let (($x849 (=> $x24 $x164)))
 (let (($x798 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x37 (= $x24 $x798)))
 (let (($x374 (=> $x794 $x824)))
 (let (($x820 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x168 (= $x794 $x820)))
 (let (($x694 (and $x168 $x374)))
 (let (($x651 (and $x694 $x37)))
 (let (($x755 (and $x651 $x849)))
 (let (($x266 (and $x755 $x5)))
 (let ((?x151 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x605 (= ?x151 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x339 (bvuge ?x425 (_ bv1 32))))
 (let (($x440 (=> $x339 $x605)))
 (let (($x614 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x445 (= $x339 $x614)))
 (let (($x411 (=> $x213 $x824)))
 (let (($x582 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x889 (= $x213 $x582)))
 (let (($x255 (and $x889 $x411)))
 (let (($x732 (and $x255 $x445)))
 (let (($x530 (and $x732 $x440)))
 (let (($x39 (and $x530 $x266)))
 (let ((?x56 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x594 (= ?x56 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x564 (bvuge ?x479 (_ bv1 32))))
 (let (($x155 (=> $x564 $x594)))
 (let (($x218 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x185 (= $x564 $x218)))
 (let (($x34 (=> $x290 $x824)))
 (let (($x467 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x487 (= $x290 $x467)))
 (let (($x403 (and $x487 $x34)))
 (let (($x784 (and $x403 $x185)))
 (let (($x188 (and $x784 $x155)))
 (let (($x331 (and $x188 $x39)))
 (let (($x819 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x399 (and $x819 $x331)))
 (let (($x397 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x828 (and $x397 $x399)))
 (let (($x714 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x42 (and $x714 $x828)))
 (let (($x137 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x590 (and $x137 $x42)))
 (let (($x745 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x751 (and $x745 $x590)))
 (let (($x21 (and $x824 $x751)))
 (let (($x245 (= ?x175 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x223 (and $x245 $x21)))
 (let (($x678 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x358 (and $x678 $x223)))
 (let (($x572 (and $x824 $x358)))
 (let (($x79 (= ?x500 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x555 (and $x79 $x572)))
 (let (($x448 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x130 (and $x448 $x555)))
 (let (($x402 (and $x824 $x130)))
 (let (($x169 (= ?x151 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x699 (and $x169 $x402)))
 (let (($x709 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x703 (and $x709 $x699)))
 (let (($x83 (and $x824 $x703)))
 (let (($x806 (= ?x56 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x384 (and $x806 $x83)))
 (let (($x12 (bvugt ?x406 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x834 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x639 (=> (bvule ?x406 (bvsub (bvadd ?x406 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x834 $x12)))))))
 (let (($x793 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x405 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x360)))
 (let (($x131 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x405 $x793)))))))
 (let (($x779 (bvugt ?x523 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x183 (=> (bvule ?x523 (bvsub (bvadd ?x523 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x779)))))))
 (let (($x110 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x674 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x862 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x674)))
 (let (($x860 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x862 $x110)))))))
 (let (($x658 (and $x860 $x183)))
 (let (($x191 (and $x658 $x131)))
 (let (($x57 (and $x191 $x639)))
 (let (($x822 (and $x57 $x384)))
 (let (($x99 (=> $x822 $x442)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x109 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x579 (concat ?x109 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x360 (bvadd ?x6 (_ bv3 32))))
 (let ((?x882 (concat (select input.dst.llvm-mem ?x360) (concat ?x200 ?x579))))
 (let ((?x436 (bvmul (_ bv4294967295 32) ?x882)))
 (let ((?x578 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x623 (concat ?x578 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x406 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x226 (bvadd ?x406 (_ bv3 32))))
 (let ((?x107 (concat (select input.dst.llvm-mem ?x226) (concat ?x286 ?x623))))
 (let ((?x610 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x204 (concat ?x610 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x523 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x138 (bvadd ?x523 (_ bv3 32))))
 (let ((?x677 (concat (select input.dst.llvm-mem ?x138) (concat ?x312 ?x204))))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x618 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x376)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x618)))
 (let ((?x238 (bvadd (bvadd (bvadd ?x296 ?x677) ?x107) ?x436)))
 (let (($x790 (= (_ bv0 32) ?x238)))
 (let (($x114 (= $x790 true)))
 (let (($x442 (= $x114 true)))
 (let ((?x501 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x529 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x730 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x730 (concat ?x244 (concat ?x529 ?x501)))))
 (let (($x670 (= ?x96 input.dst.llvm-%m)))
 (let (($x803 (= $x670 true)))
 (let (($x795 (= $x803 true)))
 (let (($x503 (= input.dst.llvm-%m ?x96)))
 (let ((?x696 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x528 (= (_ bv0 32) ?x696)))
 (let ((?x383 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x383)))
 (let (($x789 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x508 (and $x789 $x23)))
 (let (($x637 (and $x508 $x528)))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x711 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x443 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv1 32))) (select input.dst.llvm-mem ?x711))))
 (let ((?x731 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv2 32))) ?x443))))
 (let ((?x723 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x723 (_ bv1 32))))
 (=> $x27 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x731))))))))
 ))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x723 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x723 (_ bv1 32))))
 (= $x27 (bvuge ?x823 (_ bv1 32)))))))
 ))
 (let (($x494 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x824 (= false false)))
 (let ((?x723 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x723 (_ bv0 32))))
 (=> $x622 $x824)))))
 ))
 (let (($x537 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x723 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x723 (_ bv0 32))))
 (= $x622 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x805 (and $x537 $x494)))
 (let (($x315 (and $x805 $x600)))
 (let (($x861 (and $x315 $x621)))
 (let (($x469 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x352 (= (bvand ?x406 (_ bv4294967292 32)) ?x406)))
 (let (($x754 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x406 (bvsub ?x406 (_ bv4 32))) (bvult ?x406 (bvsub ?x406 (_ bv4 32))))))
 (let (($x497 (and true $x754)))
 (let (($x274 (= (bvand ?x523 (_ bv4294967292 32)) ?x523)))
 (let (($x387 (and $x274 $x497)))
 (let (($x458 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x726 (and (and (and true $x458) $x387) $x352)))
 (let (($x327 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x485 (and true $x327)))
 (let (($x419 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x887 (and $x419 $x485)))
 (let (($x669 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x523 (bvsub ?x523 (_ bv12 32))) (bvult ?x523 (bvsub ?x523 (_ bv12 32))))))
 (let (($x609 (and (and (and true $x419) $x669) $x887)))
 (let (($x493 (and (and (and (and (and (and $x609 $x726) $x116) $x469) $x861) $x637) $x503)))
 (let (($x439 (= $x493 true)))
 (let (($x347 (= $x439 true)))
 (let (($x516 (= $x347 true)))
 (let (($x193 (= $x609 true)))
 (let (($x830 (= $x193 true)))
 (let (($x318 (= $x830 true)))
 (let (($x660 (and $x726 $x116)))
 (let (($x481 (= $x660 true)))
 (let (($x560 (= $x481 true)))
 (let (($x258 (= $x560 true)))
 (let (($x158 (and $x258 $x318)))
 (let (($x224 (and $x158 $x516)))
 (let (($x29 (and $x224 $x795)))
 (let ((?x479 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x479 (_ bv0 32))))
 (let ((?x425 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (= ?x425 (_ bv0 32))))
 (let (($x802 (and $x213 $x290)))
 (let ((?x552 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x794 (= ?x552 (_ bv0 32))))
 (let (($x182 (and $x794 $x802)))
 (let ((?x780 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (= ?x780 (_ bv0 32))))
 (let (($x416 (and $x540 $x182)))
 (let (($x554 (and $x416 $x29)))
 (let ((?x175 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x673 (= ?x175 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x94 (bvuge ?x780 (_ bv1 32))))
 (let (($x49 (=> $x94 $x673)))
 (let (($x573 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x635 (= $x94 $x573)))
 (let (($x824 (= false false)))
 (let (($x284 (=> $x540 $x824)))
 (let (($x336 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x267 (= $x540 $x336)))
 (let (($x576 (and $x267 $x284)))
 (let (($x854 (and $x576 $x635)))
 (let (($x514 (and $x854 $x49)))
 (let (($x5 (and $x514 $x554)))
 (let ((?x500 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x164 (= ?x500 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x24 (bvuge ?x552 (_ bv1 32))))
 (let (($x849 (=> $x24 $x164)))
 (let (($x798 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x37 (= $x24 $x798)))
 (let (($x374 (=> $x794 $x824)))
 (let (($x820 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x168 (= $x794 $x820)))
 (let (($x694 (and $x168 $x374)))
 (let (($x651 (and $x694 $x37)))
 (let (($x755 (and $x651 $x849)))
 (let (($x266 (and $x755 $x5)))
 (let ((?x151 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x605 (= ?x151 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x339 (bvuge ?x425 (_ bv1 32))))
 (let (($x440 (=> $x339 $x605)))
 (let (($x614 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x445 (= $x339 $x614)))
 (let (($x411 (=> $x213 $x824)))
 (let (($x582 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x889 (= $x213 $x582)))
 (let (($x255 (and $x889 $x411)))
 (let (($x732 (and $x255 $x445)))
 (let (($x530 (and $x732 $x440)))
 (let (($x39 (and $x530 $x266)))
 (let ((?x56 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x594 (= ?x56 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x564 (bvuge ?x479 (_ bv1 32))))
 (let (($x155 (=> $x564 $x594)))
 (let (($x218 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x185 (= $x564 $x218)))
 (let (($x34 (=> $x290 $x824)))
 (let (($x467 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x487 (= $x290 $x467)))
 (let (($x403 (and $x487 $x34)))
 (let (($x784 (and $x403 $x185)))
 (let (($x188 (and $x784 $x155)))
 (let (($x331 (and $x188 $x39)))
 (let (($x819 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x399 (and $x819 $x331)))
 (let (($x397 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x828 (and $x397 $x399)))
 (let (($x714 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x42 (and $x714 $x828)))
 (let (($x137 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x590 (and $x137 $x42)))
 (let (($x745 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x751 (and $x745 $x590)))
 (let (($x21 (and $x824 $x751)))
 (let (($x245 (= ?x175 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x223 (and $x245 $x21)))
 (let (($x678 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x358 (and $x678 $x223)))
 (let (($x572 (and $x824 $x358)))
 (let (($x79 (= ?x500 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x555 (and $x79 $x572)))
 (let (($x448 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x130 (and $x448 $x555)))
 (let (($x402 (and $x824 $x130)))
 (let (($x169 (= ?x151 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x699 (and $x169 $x402)))
 (let (($x709 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x703 (and $x709 $x699)))
 (let (($x83 (and $x824 $x703)))
 (let (($x806 (= ?x56 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x384 (and $x806 $x83)))
 (let (($x12 (bvugt ?x406 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x834 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x639 (=> (bvule ?x406 (bvsub (bvadd ?x406 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x834 $x12)))))))
 (let (($x793 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x405 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x360)))
 (let (($x131 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x405 $x793)))))))
 (let (($x779 (bvugt ?x523 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x183 (=> (bvule ?x523 (bvsub (bvadd ?x523 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x779)))))))
 (let (($x110 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x674 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x862 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x674)))
 (let (($x860 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x862 $x110)))))))
 (let (($x658 (and $x860 $x183)))
 (let (($x191 (and $x658 $x131)))
 (let (($x57 (and $x191 $x639)))
 (let (($x822 (and $x57 $x384)))
 (let (($x99 (=> $x822 $x442)))
 (not $x99)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 240 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x37 (_ bv1 32))))
 (let (($x651 (= ?x37 (_ bv0 32))))
 (let (($x562 (or $x651 $x336)))
 (let ((?x416 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x826 (bvuge ?x416 (_ bv1 32))))
 (let (($x69 (and $x826 $x562)))
 (let (($x280 (= ?x416 (_ bv0 32))))
 (let (($x624 (and $x280 $x562)))
 (let (($x643 (or $x624 $x69)))
 (let ((?x481 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x669 (bvuge ?x481 (_ bv1 32))))
 (let (($x247 (and $x669 $x643)))
 (let (($x560 (= ?x481 (_ bv0 32))))
 (let (($x496 (and $x560 $x643)))
 (let (($x171 (or $x496 $x247)))
 (let ((?x810 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x810 (_ bv1 32))))
 (let (($x563 (and $x184 $x171)))
 (let (($x845 (= ?x810 (_ bv0 32))))
 (let (($x111 (and $x845 $x171)))
 (let (($x891 (or $x111 $x563)))
 (let (($x357 (or false $x891)))
 (let (($x846 (= $x357 true)))
 (let (($x814 (= $x846 true)))
 (let ((?x761 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x513 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x695 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x322 (concat ?x695 (concat ?x513 ?x761)))))
 (let (($x85 (= ?x257 input.dst.llvm-%m)))
 (let (($x879 (= $x85 true)))
 (let (($x653 (= $x879 true)))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x434 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x655 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv1 32))) (select input.dst.llvm-mem ?x434))))
 (let ((?x792 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv2 32))) ?x655))))
 (let ((?x382 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x382 (_ bv1 32))))
 (=> $x381 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x792))))))))
 ))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x382 (_ bv1 32))))
 (= $x381 (bvuge ?x835 (_ bv1 32)))))))
 ))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x382 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x382 (_ bv0 32))))
 (=> $x619 $x175)))))
 ))
 (let (($x75 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x382 (_ bv0 32))))
 (= $x619 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x307 (and $x75 $x316)))
 (let (($x270 (and $x307 $x95)))
 (let (($x430 (and $x270 $x54)))
 (let (($x566 (= $x430 true)))
 (let (($x827 (= $x566 true)))
 (let (($x778 (= $x827 true)))
 (let ((?x803 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x795 (= (_ bv0 32) ?x803)))
 (let ((?x516 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x516)))
 (let (($x347 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x670 (and $x347 $x224)))
 (let (($x29 (and $x670 $x795)))
 (let (($x439 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (and $x439 $x29)))
 (let (($x5 (= $x554 true)))
 (let (($x266 (= $x5 true)))
 (let (($x39 (= $x266 true)))
 (let (($x730 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x157 (and true $x730)))
 (let (($x815 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x244 (and $x815 $x157)))
 (let ((?x124 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x789 (bvsub ?x124 (_ bv12 32))))
 (let (($x696 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x124 ?x789) (bvult ?x124 ?x789))))
 (let (($x501 (and (and (and true $x815) $x696) $x244)))
 (let (($x329 (= $x501 true)))
 (let (($x538 (= $x329 true)))
 (let (($x96 (= $x538 true)))
 (let ((?x186 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x598 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let ((?x360 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x646 (= (bvand ?x360 (_ bv4294967292 32)) ?x360)))
 (let (($x711 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x360 (bvsub ?x360 (_ bv4 32))) (bvult ?x360 (bvsub ?x360 (_ bv4 32))))))
 (let (($x195 (and true $x711)))
 (let (($x600 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x526 (and $x600 $x195)))
 (let (($x27 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv8 32))) (bvult ?x186 (bvsub ?x186 (_ bv8 32))))))
 (let (($x174 (and (and (and true $x27) $x526) $x646)))
 (let (($x731 (and $x174 $x598)))
 (let (($x298 (= $x731 true)))
 (let (($x301 (= $x298 true)))
 (let (($x621 (= $x301 true)))
 (let (($x503 (and $x621 $x96)))
 (let (($x331 (and $x503 $x39)))
 (let (($x632 (and $x331 $x778)))
 (let (($x53 (and $x632 $x653)))
 (let ((?x411 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x823 (= ?x411 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x505 (=> $x184 $x823)))
 (let (($x604 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x585 (= $x184 $x604)))
 (let (($x175 (= false false)))
 (let (($x469 (=> $x845 $x175)))
 (let (($x318 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x172 (= $x845 $x318)))
 (let (($x844 (and $x172 $x469)))
 (let (($x450 (and $x844 $x585)))
 (let (($x235 (and $x450 $x505)))
 (let (($x136 (and $x235 $x53)))
 (let ((?x185 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x320 (= ?x185 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x135 (=> $x669 $x320)))
 (let (($x541 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x404 (= $x669 $x541)))
 (let (($x128 (=> $x560 $x175)))
 (let (($x116 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x258 (= $x560 $x116)))
 (let (($x419 (and $x258 $x128)))
 (let (($x366 (and $x419 $x404)))
 (let (($x797 (and $x366 $x135)))
 (let (($x424 (and $x797 $x136)))
 (let ((?x819 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x483 (= ?x819 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x754 (=> $x826 $x483)))
 (let (($x274 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x134 (= $x826 $x274)))
 (let (($x772 (=> $x280 $x175)))
 (let (($x802 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x143 (= $x280 $x802)))
 (let (($x704 (and $x143 $x772)))
 (let (($x51 (and $x704 $x134)))
 (let (($x497 (and $x51 $x754)))
 (let (($x843 (and $x497 $x424)))
 (let ((?x311 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x576 (= ?x311 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x94 (=> $x336 $x576)))
 (let (($x349 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x267 (= $x336 $x349)))
 (let (($x164 (=> $x651 $x175)))
 (let (($x24 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x241 (= $x651 $x24)))
 (let (($x849 (and $x241 $x164)))
 (let (($x284 (and $x849 $x267)))
 (let (($x573 (and $x284 $x94)))
 (let (($x407 (and $x573 $x843)))
 (let (($x552 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x804 (and $x552 $x407)))
 (let (($x530 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x9 (and $x530 $x804)))
 (let (($x605 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x393 (and $x605 $x9)))
 (let (($x732 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x330 (and $x732 $x393)))
 (let (($x614 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x187 (and $x614 $x330)))
 (let (($x571 (and $x175 $x187)))
 (let (($x255 (= ?x411 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x113 (and $x255 $x571)))
 (let (($x594 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x297 (and $x594 $x113)))
 (let (($x543 (and $x175 $x297)))
 (let (($x784 (= ?x185 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x851 (and $x784 $x543)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x597 (and $x290 $x851)))
 (let (($x818 (and $x175 $x597)))
 (let (($x120 (= ?x819 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x449 (and $x120 $x818)))
 (let (($x245 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x782 (and $x245 $x449)))
 (let (($x638 (and $x175 $x782)))
 (let (($x678 (= ?x311 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x150 (and $x678 $x638)))
 (let (($x766 (bvugt ?x360 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x706 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x360 (_ bv3 32)))))
 (let (($x806 (=> (bvule ?x360 (bvsub (bvadd ?x360 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x706 $x766)))))))
 (let (($x693 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x746 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x186 (_ bv3 32)))))
 (let (($x254 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x746 $x693)))))))
 (let (($x176 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x124 (_ bv3 32)))))
 (let (($x261 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x176)))))))
 (let (($x126 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x744 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x465 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x744 $x126)))))))
 (let (($x519 (and $x465 $x261)))
 (let (($x363 (and $x519 $x254)))
 (let (($x840 (and $x363 $x806)))
 (let (($x839 (and $x840 $x150)))
 (let (($x201 (=> $x839 $x814)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x37 (_ bv1 32))))
 (let (($x651 (= ?x37 (_ bv0 32))))
 (let (($x562 (or $x651 $x336)))
 (let ((?x416 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x826 (bvuge ?x416 (_ bv1 32))))
 (let (($x69 (and $x826 $x562)))
 (let (($x280 (= ?x416 (_ bv0 32))))
 (let (($x624 (and $x280 $x562)))
 (let (($x643 (or $x624 $x69)))
 (let ((?x481 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x669 (bvuge ?x481 (_ bv1 32))))
 (let (($x247 (and $x669 $x643)))
 (let (($x560 (= ?x481 (_ bv0 32))))
 (let (($x496 (and $x560 $x643)))
 (let (($x171 (or $x496 $x247)))
 (let ((?x810 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x810 (_ bv1 32))))
 (let (($x563 (and $x184 $x171)))
 (let (($x845 (= ?x810 (_ bv0 32))))
 (let (($x111 (and $x845 $x171)))
 (let (($x891 (or $x111 $x563)))
 (let (($x357 (or false $x891)))
 (let (($x846 (= $x357 true)))
 (let (($x814 (= $x846 true)))
 (let ((?x761 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x513 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x695 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x322 (concat ?x695 (concat ?x513 ?x761)))))
 (let (($x85 (= ?x257 input.dst.llvm-%m)))
 (let (($x879 (= $x85 true)))
 (let (($x653 (= $x879 true)))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x434 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x655 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv1 32))) (select input.dst.llvm-mem ?x434))))
 (let ((?x792 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv2 32))) ?x655))))
 (let ((?x382 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x382 (_ bv1 32))))
 (=> $x381 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x792))))))))
 ))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x835 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x382 (_ bv1 32))))
 (= $x381 (bvuge ?x835 (_ bv1 32)))))))
 ))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x382 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x382 (_ bv0 32))))
 (=> $x619 $x175)))))
 ))
 (let (($x75 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x382 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x382 (_ bv0 32))))
 (= $x619 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x307 (and $x75 $x316)))
 (let (($x270 (and $x307 $x95)))
 (let (($x430 (and $x270 $x54)))
 (let (($x566 (= $x430 true)))
 (let (($x827 (= $x566 true)))
 (let (($x778 (= $x827 true)))
 (let ((?x803 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x795 (= (_ bv0 32) ?x803)))
 (let ((?x516 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x516)))
 (let (($x347 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x670 (and $x347 $x224)))
 (let (($x29 (and $x670 $x795)))
 (let (($x439 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (and $x439 $x29)))
 (let (($x5 (= $x554 true)))
 (let (($x266 (= $x5 true)))
 (let (($x39 (= $x266 true)))
 (let (($x730 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x157 (and true $x730)))
 (let (($x815 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x244 (and $x815 $x157)))
 (let ((?x124 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x789 (bvsub ?x124 (_ bv12 32))))
 (let (($x696 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x124 ?x789) (bvult ?x124 ?x789))))
 (let (($x501 (and (and (and true $x815) $x696) $x244)))
 (let (($x329 (= $x501 true)))
 (let (($x538 (= $x329 true)))
 (let (($x96 (= $x538 true)))
 (let ((?x186 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x598 (= (bvand ?x186 (_ bv4294967292 32)) ?x186)))
 (let ((?x360 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x646 (= (bvand ?x360 (_ bv4294967292 32)) ?x360)))
 (let (($x711 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x360 (bvsub ?x360 (_ bv4 32))) (bvult ?x360 (bvsub ?x360 (_ bv4 32))))))
 (let (($x195 (and true $x711)))
 (let (($x600 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x526 (and $x600 $x195)))
 (let (($x27 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x186 (bvsub ?x186 (_ bv8 32))) (bvult ?x186 (bvsub ?x186 (_ bv8 32))))))
 (let (($x174 (and (and (and true $x27) $x526) $x646)))
 (let (($x731 (and $x174 $x598)))
 (let (($x298 (= $x731 true)))
 (let (($x301 (= $x298 true)))
 (let (($x621 (= $x301 true)))
 (let (($x503 (and $x621 $x96)))
 (let (($x331 (and $x503 $x39)))
 (let (($x632 (and $x331 $x778)))
 (let (($x53 (and $x632 $x653)))
 (let ((?x411 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x823 (= ?x411 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x505 (=> $x184 $x823)))
 (let (($x604 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x585 (= $x184 $x604)))
 (let (($x175 (= false false)))
 (let (($x469 (=> $x845 $x175)))
 (let (($x318 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x172 (= $x845 $x318)))
 (let (($x844 (and $x172 $x469)))
 (let (($x450 (and $x844 $x585)))
 (let (($x235 (and $x450 $x505)))
 (let (($x136 (and $x235 $x53)))
 (let ((?x185 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x320 (= ?x185 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x135 (=> $x669 $x320)))
 (let (($x541 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x404 (= $x669 $x541)))
 (let (($x128 (=> $x560 $x175)))
 (let (($x116 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x258 (= $x560 $x116)))
 (let (($x419 (and $x258 $x128)))
 (let (($x366 (and $x419 $x404)))
 (let (($x797 (and $x366 $x135)))
 (let (($x424 (and $x797 $x136)))
 (let ((?x819 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x483 (= ?x819 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x754 (=> $x826 $x483)))
 (let (($x274 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x134 (= $x826 $x274)))
 (let (($x772 (=> $x280 $x175)))
 (let (($x802 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x143 (= $x280 $x802)))
 (let (($x704 (and $x143 $x772)))
 (let (($x51 (and $x704 $x134)))
 (let (($x497 (and $x51 $x754)))
 (let (($x843 (and $x497 $x424)))
 (let ((?x311 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x576 (= ?x311 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x94 (=> $x336 $x576)))
 (let (($x349 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x267 (= $x336 $x349)))
 (let (($x164 (=> $x651 $x175)))
 (let (($x24 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x241 (= $x651 $x24)))
 (let (($x849 (and $x241 $x164)))
 (let (($x284 (and $x849 $x267)))
 (let (($x573 (and $x284 $x94)))
 (let (($x407 (and $x573 $x843)))
 (let (($x552 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x804 (and $x552 $x407)))
 (let (($x530 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x9 (and $x530 $x804)))
 (let (($x605 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x393 (and $x605 $x9)))
 (let (($x732 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x330 (and $x732 $x393)))
 (let (($x614 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x187 (and $x614 $x330)))
 (let (($x571 (and $x175 $x187)))
 (let (($x255 (= ?x411 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x113 (and $x255 $x571)))
 (let (($x594 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x297 (and $x594 $x113)))
 (let (($x543 (and $x175 $x297)))
 (let (($x784 (= ?x185 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x851 (and $x784 $x543)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x597 (and $x290 $x851)))
 (let (($x818 (and $x175 $x597)))
 (let (($x120 (= ?x819 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x449 (and $x120 $x818)))
 (let (($x245 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x782 (and $x245 $x449)))
 (let (($x638 (and $x175 $x782)))
 (let (($x678 (= ?x311 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x150 (and $x678 $x638)))
 (let (($x766 (bvugt ?x360 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x706 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x360 (_ bv3 32)))))
 (let (($x806 (=> (bvule ?x360 (bvsub (bvadd ?x360 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x706 $x766)))))))
 (let (($x693 (bvugt ?x186 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x746 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x186 (_ bv3 32)))))
 (let (($x254 (=> (bvule ?x186 (bvsub (bvadd ?x186 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x746 $x693)))))))
 (let (($x176 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x124 (_ bv3 32)))))
 (let (($x261 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x176)))))))
 (let (($x126 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x744 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x465 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x744 $x126)))))))
 (let (($x519 (and $x465 $x261)))
 (let (($x363 (and $x519 $x254)))
 (let (($x840 (and $x363 $x806)))
 (let (($x839 (and $x840 $x150)))
 (let (($x201 (=> $x839 $x814)))
 (not $x201))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 229 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2311339/query
