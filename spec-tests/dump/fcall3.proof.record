==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x9 $x12)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x9 $x12)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x288 (= true false)))
 (let (($x289 (= $x288 true)))
 (let ((?x273 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x282 (concat ?x281 (concat ?x278 (concat ?x275 ?x273)))))
 (let (($x283 (= ?x282 input.dst.llvm-%m2)))
 (let (($x284 (= $x283 true)))
 (let ((?x259 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x267 (concat ?x264 (concat ?x261 ?x259)))))
 (let (($x269 (= ?x268 input.dst.llvm-%m1)))
 (let (($x270 (= $x269 true)))
 (let (($x253 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x199 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x240 (bvadd ?x199 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x244))))
 (let ((?x84 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x28 (_ bv1 32))))
 (=> $x19 (= ?x84 ?x250)))))))))))
 ))
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x169 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x169 (_ bv1 32))))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x28 (_ bv1 32))))
 (= $x19 $x176)))))))
 ))
 (let (($x89 (forall ((Lambda5 (_ BitVec 32)) )(let (($x64 (= false false)))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x28 (_ bv0 32))))
 (=> $x70 $x64))))))
 ))
 (let (($x220 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x169 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x28 (_ bv0 32))))
 (= $x70 $x170)))))))
 ))
 (let (($x221 (and $x220 $x89)))
 (let (($x225 (and $x221 $x224)))
 (let (($x254 (and $x225 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x256 (= $x255 true)))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x199 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x200 (bvadd ?x199 input.dst.llvm-%m2)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x204))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x26 (_ bv1 32))))
 (=> $x9 (= ?x80 ?x210)))))))))))
 ))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x169 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x169 (_ bv1 32))))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x26 (_ bv1 32))))
 (= $x9 $x176)))))))
 ))
 (let (($x38 (forall ((Lambda5 (_ BitVec 32)) )(let (($x64 (= false false)))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x26 (_ bv0 32))))
 (=> $x76 $x64))))))
 ))
 (let (($x172 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x169 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x26 (_ bv0 32))))
 (= $x76 $x170)))))))
 ))
 (let (($x173 (and $x172 $x38)))
 (let (($x179 (and $x173 $x178)))
 (let (($x214 (and $x179 $x213)))
 (let (($x215 (= $x214 true)))
 (let (($x216 (= $x215 true)))
 (let ((?x147 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x148 (= (_ bv0 32) ?x147)))
 (let ((?x145 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x146 (= (_ bv0 32) ?x145)))
 (let ((?x143 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x139 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x137 $x140)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x136 $x141)))
 (let (($x135 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x126 $x127)))
 (let (($x129 (not $x128)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x123 $x124)))
 (let (($x131 (and (not $x125) $x129)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x117 $x118)))
 (let (($x120 (not $x119)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x95 $x96)))
 (let (($x122 (and (not $x116) $x120)))
 (let (($x154 (and (and (and (and (and (and $x122 $x131) $x133) $x135) $x142) $x144) $x146)))
 (let (($x155 (and $x154 $x148)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x113 (or false (or false (and (and true (or $x102 $x103)) (or $x108 $x109))))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x113)))
 (let (($x156 (and $x115 $x155)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x217 (and $x158 $x216)))
 (let (($x257 (and $x217 $x256)))
 (let (($x271 (and $x257 $x270)))
 (let (($x285 (and $x271 $x284)))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x87 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x28 (_ bv1 32))))
 (=> $x19 (= ?x84 ?x87))))))))
 ))
 (let (($x49 (forall ((Lambda5 (_ BitVec 32)) )(let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x32 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x28 (_ bv1 32))))
 (= $x19 (bvuge ?x32 (_ bv1 32)))))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x32 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x28 (_ bv0 32))))
 (= $x70 (= ?x32 (_ bv0 32)))))))))
 ))
 (let (($x46 (and $x69 $x89)))
 (let (($x83 (and $x46 $x49)))
 (let (($x92 (and $x83 $x91)))
 (let (($x286 (and $x92 $x285)))
 (let (($x22 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x75 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x26 (_ bv1 32))))
 (=> $x9 (= ?x80 ?x75))))))))
 ))
 (let (($x50 (forall ((Lambda5 (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x29 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x26 (_ bv1 32))))
 (= $x9 (bvuge ?x29 (_ bv1 32)))))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x29 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x26 (_ bv0 32))))
 (= $x76 (= ?x29 (_ bv0 32)))))))))
 ))
 (let (($x65 (and $x73 $x38)))
 (let (($x55 (and $x65 $x50)))
 (let (($x60 (and $x55 $x22)))
 (let (($x287 (and $x60 $x286)))
 (let (($x290 (=> $x287 $x289)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x288 (= true false)))
 (let (($x289 (= $x288 true)))
 (let ((?x273 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x282 (concat ?x281 (concat ?x278 (concat ?x275 ?x273)))))
 (let (($x283 (= ?x282 input.dst.llvm-%m2)))
 (let (($x284 (= $x283 true)))
 (let ((?x259 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x267 (concat ?x264 (concat ?x261 ?x259)))))
 (let (($x269 (= ?x268 input.dst.llvm-%m1)))
 (let (($x270 (= $x269 true)))
 (let (($x253 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x199 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x240 (bvadd ?x199 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x244))))
 (let ((?x84 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x28 (_ bv1 32))))
 (=> $x19 (= ?x84 ?x250)))))))))))
 ))
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x169 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x169 (_ bv1 32))))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x28 (_ bv1 32))))
 (= $x19 $x176)))))))
 ))
 (let (($x89 (forall ((Lambda5 (_ BitVec 32)) )(let (($x64 (= false false)))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x28 (_ bv0 32))))
 (=> $x70 $x64))))))
 ))
 (let (($x220 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x169 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x28 (_ bv0 32))))
 (= $x70 $x170)))))))
 ))
 (let (($x221 (and $x220 $x89)))
 (let (($x225 (and $x221 $x224)))
 (let (($x254 (and $x225 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x256 (= $x255 true)))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x199 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x200 (bvadd ?x199 input.dst.llvm-%m2)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x204))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x26 (_ bv1 32))))
 (=> $x9 (= ?x80 ?x210)))))))))))
 ))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x169 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x169 (_ bv1 32))))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x26 (_ bv1 32))))
 (= $x9 $x176)))))))
 ))
 (let (($x38 (forall ((Lambda5 (_ BitVec 32)) )(let (($x64 (= false false)))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x26 (_ bv0 32))))
 (=> $x76 $x64))))))
 ))
 (let (($x172 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x169 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x26 (_ bv0 32))))
 (= $x76 $x170)))))))
 ))
 (let (($x173 (and $x172 $x38)))
 (let (($x179 (and $x173 $x178)))
 (let (($x214 (and $x179 $x213)))
 (let (($x215 (= $x214 true)))
 (let (($x216 (= $x215 true)))
 (let ((?x147 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x148 (= (_ bv0 32) ?x147)))
 (let ((?x145 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x146 (= (_ bv0 32) ?x145)))
 (let ((?x143 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x139 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x137 $x140)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x136 $x141)))
 (let (($x135 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x126 $x127)))
 (let (($x129 (not $x128)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x123 $x124)))
 (let (($x131 (and (not $x125) $x129)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x117 $x118)))
 (let (($x120 (not $x119)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x95 $x96)))
 (let (($x122 (and (not $x116) $x120)))
 (let (($x154 (and (and (and (and (and (and $x122 $x131) $x133) $x135) $x142) $x144) $x146)))
 (let (($x155 (and $x154 $x148)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x113 (or false (or false (and (and true (or $x102 $x103)) (or $x108 $x109))))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x113)))
 (let (($x156 (and $x115 $x155)))
 (let (($x157 (= $x156 true)))
 (let (($x158 (= $x157 true)))
 (let (($x217 (and $x158 $x216)))
 (let (($x257 (and $x217 $x256)))
 (let (($x271 (and $x257 $x270)))
 (let (($x285 (and $x271 $x284)))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x87 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x84 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x28 (_ bv1 32))))
 (=> $x19 (= ?x84 ?x87))))))))
 ))
 (let (($x49 (forall ((Lambda5 (_ BitVec 32)) )(let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x32 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x28 (_ bv1 32))))
 (= $x19 (bvuge ?x32 (_ bv1 32)))))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x32 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x28 (_ bv0 32))))
 (= $x70 (= ?x32 (_ bv0 32)))))))))
 ))
 (let (($x46 (and $x69 $x89)))
 (let (($x83 (and $x46 $x49)))
 (let (($x92 (and $x83 $x91)))
 (let (($x286 (and $x92 $x285)))
 (let (($x22 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x75 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x26 (_ bv1 32))))
 (=> $x9 (= ?x80 ?x75))))))))
 ))
 (let (($x50 (forall ((Lambda5 (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x29 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x26 (_ bv1 32))))
 (= $x9 (bvuge ?x29 (_ bv1 32)))))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x29 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x26 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x26 (_ bv0 32))))
 (= $x76 (= ?x29 (_ bv0 32)))))))))
 ))
 (let (($x65 (and $x73 $x38)))
 (let (($x55 (and $x65 $x50)))
 (let (($x60 (and $x55 $x22)))
 (let (($x287 (and $x60 $x286)))
 (let (($x290 (=> $x287 $x289)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000003)
                                      (k!13 #x80000002)
                                      (k!13 #x80000001)
                                      (k!13 #x80000000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000003)
                                      (k!13 #x80000002)
                                      (k!13 #x80000001)
                                      (k!13 #x80000000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000003)
                                      (k!13 #x80000002)
                                      (k!13 #x80000001)
                                      (k!13 #x80000000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000003)
                                      (k!13 #x80000002)
                                      (k!13 #x80000001)
                                      (k!13 #x80000000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000007)
                                      (k!13 #x80000006)
                                      (k!13 #x80000005)
                                      (k!13 #x80000004)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000007)
                                      (k!13 #x80000006)
                                      (k!13 #x80000005)
                                      (k!13 #x80000004)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000007)
                                      (k!13 #x80000006)
                                      (k!13 #x80000005)
                                      (k!13 #x80000004)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000007)
                                      (k!13 #x80000006)
                                      (k!13 #x80000005)
                                      (k!13 #x80000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2801fda8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf130fb6c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x1bdf9dfa)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x7dee093d)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf130fb6f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2801fdab)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf130fb6c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2801fda8)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf130fb6f) #x7d
    (ite (= x!0 #x2801fda9) #x9d
    (ite (= x!0 #xf130fb6c) #x3d
    (ite (= x!0 #x2801fdab) #x1b
    (ite (= x!0 #x2801fda8) #xfa
    (ite (= x!0 #x2801fdaa) #xdf
    (ite (= x!0 #xf130fb6e) #xee
    (ite (= x!0 #xf130fb6d) #x09
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xf130fb6f)
                                      (k!13 #xf130fb6e)
                                      (k!13 #xf130fb6d)
                                      (k!13 #xf130fb6c)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xf130fb6f)
                                      (k!13 #xf130fb6e)
                                      (k!13 #xf130fb6d)
                                      (k!13 #xf130fb6c)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xf130fb6f)
                                      (k!13 #xf130fb6e)
                                      (k!13 #xf130fb6d)
                                      (k!13 #xf130fb6c)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xf130fb6f)
                                      (k!13 #xf130fb6e)
                                      (k!13 #xf130fb6d)
                                      (k!13 #xf130fb6c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2801fdab)
                                      (k!13 #x2801fdaa)
                                      (k!13 #x2801fda9)
                                      (k!13 #x2801fda8)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2801fdab)
                                      (k!13 #x2801fdaa)
                                      (k!13 #x2801fda9)
                                      (k!13 #x2801fda8)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2801fdab)
                                      (k!13 #x2801fdaa)
                                      (k!13 #x2801fda9)
                                      (k!13 #x2801fda8)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x2801fdab)
                                      (k!13 #x2801fdaa)
                                      (k!13 #x2801fda9)
                                      (k!13 #x2801fda8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x283 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x284 (= (_ bv0 32) ?x283)))
 (let ((?x279 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x282 (= (_ bv0 32) ?x279)))
 (let ((?x273 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x273)))
 (let ((?x277 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x277)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x274 (and $x281 $x278)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x280 $x274)))
 (let (($x271 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x264 $x260)))
 (let (($x259 (not $x261)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (and $x266 $x267)))
 (let (($x265 (and (not $x263) $x259)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x252 $x253)))
 (let (($x255 (not $x254)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x247 $x250)))
 (let (($x257 (and (not $x251) $x255)))
 (let (($x290 (and (and (and (and (and (and $x257 $x265) $x269) $x271) $x275) $x276) $x282)))
 (let (($x291 (and $x290 $x284)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x119)))
 (let (($x147 (or false (or false (and (and true (or $x107 $x127)) (or $x141 $x153))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x237 (and $x155 $x291)))
 (let (($x238 (= $x237 true)))
 (let (($x239 (= $x238 true)))
 (let ((?x191 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x197 (concat ?x189 (concat ?x187 ?x191)))))
 (let (($x218 (= input.dst.llvm-%m2 ?x198)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x183 (concat ?x165 (concat ?x162 ?x159)))))
 (let (($x194 (= input.dst.llvm-%m1 ?x185)))
 (let (($x90 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x82 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x235 (and (and (and $x82 $x90) $x194) $x218)))
 (let (($x56 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x219 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x67 (bvadd ?x219 input.dst.llvm-%m1)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x68))))
 (let ((?x134 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x32 (_ bv1 32))))
 (=> $x123 (= ?x134 ?x47)))))))))))
 ))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x170 (_ bv1 32))))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x32 (_ bv1 32))))
 (= $x123 $x179)))))))
 ))
 (let (($x19 (forall ((Lambda5 (_ BitVec 32)) )(let (($x96 (= false false)))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x32 (_ bv0 32))))
 (=> $x105 $x96))))))
 ))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x32 (_ bv0 32))))
 (= $x105 $x171)))))))
 ))
 (let (($x181 (and $x258 $x19)))
 (let (($x53 (and $x181 $x16)))
 (let (($x36 (and $x53 $x56)))
 (let (($x236 (and $x36 $x235)))
 (let (($x241 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x219 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x220 (bvadd ?x219 input.dst.llvm-%m2)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x225))))
 (let ((?x75 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x128 (_ bv1 32))))
 (=> $x11 (= ?x75 ?x246)))))))))))
 ))
 (let (($x182 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x170 (_ bv1 32))))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x128 (_ bv1 32))))
 (= $x11 $x179)))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x96 (= false false)))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x128 (_ bv0 32))))
 (=> $x108 $x96))))))
 ))
 (let (($x173 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x128 (_ bv0 32))))
 (= $x108 $x171)))))))
 ))
 (let (($x176 (and $x173 $x91)))
 (let (($x199 (and $x176 $x182)))
 (let (($x244 (and $x199 $x241)))
 (let (($x229 (and (and (and $x155 $x244) $x291) $x236)))
 (let (($x230 (= $x229 true)))
 (let (($x228 (= $x230 true)))
 (let (($x103 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x134 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x32 (_ bv1 32))))
 (=> $x123 (= ?x134 ?x116))))))))
 ))
 (let (($x124 (forall ((Lambda5 (_ BitVec 32)) )(let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x32 (_ bv1 32))))
 (= $x123 (bvuge ?x99 (_ bv1 32)))))))))
 ))
 (let (($x70 (forall ((Lambda5 (_ BitVec 32)) )(let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x32 (_ bv0 32))))
 (= $x105 (= ?x99 (_ bv0 32)))))))))
 ))
 (let (($x102 (and $x70 $x19)))
 (let (($x139 (and $x102 $x124)))
 (let (($x104 (and $x139 $x103)))
 (let (($x231 (and $x104 $x228)))
 (let (($x9 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x21 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x75 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x128 (_ bv1 32))))
 (=> $x11 (= ?x75 ?x21))))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x51 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x128 (_ bv1 32))))
 (= $x11 (bvuge ?x51 (_ bv1 32)))))))))
 ))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x51 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x128 (_ bv0 32))))
 (= $x108 (= ?x51 (_ bv0 32)))))))))
 ))
 (let (($x92 (and $x111 $x91)))
 (let (($x55 (and $x92 $x73)))
 (let (($x27 (and $x55 $x9)))
 (let (($x234 (and $x27 $x231)))
 (let (($x292 (=> $x234 $x239)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x283 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x284 (= (_ bv0 32) ?x283)))
 (let ((?x279 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x282 (= (_ bv0 32) ?x279)))
 (let ((?x273 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x273)))
 (let ((?x277 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x277)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x274 (and $x281 $x278)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x280 $x274)))
 (let (($x271 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x264 $x260)))
 (let (($x259 (not $x261)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (and $x266 $x267)))
 (let (($x265 (and (not $x263) $x259)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x252 $x253)))
 (let (($x255 (not $x254)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x247 $x250)))
 (let (($x257 (and (not $x251) $x255)))
 (let (($x290 (and (and (and (and (and (and $x257 $x265) $x269) $x271) $x275) $x276) $x282)))
 (let (($x291 (and $x290 $x284)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x119)))
 (let (($x147 (or false (or false (and (and true (or $x107 $x127)) (or $x141 $x153))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x237 (and $x155 $x291)))
 (let (($x238 (= $x237 true)))
 (let (($x239 (= $x238 true)))
 (let ((?x191 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x187 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x197 (concat ?x189 (concat ?x187 ?x191)))))
 (let (($x218 (= input.dst.llvm-%m2 ?x198)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x183 (concat ?x165 (concat ?x162 ?x159)))))
 (let (($x194 (= input.dst.llvm-%m1 ?x185)))
 (let (($x90 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x82 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x235 (and (and (and $x82 $x90) $x194) $x218)))
 (let (($x56 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x219 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x67 (bvadd ?x219 input.dst.llvm-%m1)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem ?x67))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x67 (_ bv2 32))) ?x68))))
 (let ((?x134 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x32 (_ bv1 32))))
 (=> $x123 (= ?x134 ?x47)))))))))))
 ))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x170 (_ bv1 32))))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x32 (_ bv1 32))))
 (= $x123 $x179)))))))
 ))
 (let (($x19 (forall ((Lambda5 (_ BitVec 32)) )(let (($x96 (= false false)))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x32 (_ bv0 32))))
 (=> $x105 $x96))))))
 ))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x32 (_ bv0 32))))
 (= $x105 $x171)))))))
 ))
 (let (($x181 (and $x258 $x19)))
 (let (($x53 (and $x181 $x16)))
 (let (($x36 (and $x53 $x56)))
 (let (($x236 (and $x36 $x235)))
 (let (($x241 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x219 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x220 (bvadd ?x219 input.dst.llvm-%m2)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x225))))
 (let ((?x75 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x128 (_ bv1 32))))
 (=> $x11 (= ?x75 ?x246)))))))))))
 ))
 (let (($x182 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x170 (_ bv1 32))))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x128 (_ bv1 32))))
 (= $x11 $x179)))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x96 (= false false)))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x128 (_ bv0 32))))
 (=> $x108 $x96))))))
 ))
 (let (($x173 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x170 (_ bv0 32))))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x128 (_ bv0 32))))
 (= $x108 $x171)))))))
 ))
 (let (($x176 (and $x173 $x91)))
 (let (($x199 (and $x176 $x182)))
 (let (($x244 (and $x199 $x241)))
 (let (($x229 (and (and (and $x155 $x244) $x291) $x236)))
 (let (($x230 (= $x229 true)))
 (let (($x228 (= $x230 true)))
 (let (($x103 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x134 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x32 (_ bv1 32))))
 (=> $x123 (= ?x134 ?x116))))))))
 ))
 (let (($x124 (forall ((Lambda5 (_ BitVec 32)) )(let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x32 (_ bv1 32))))
 (= $x123 (bvuge ?x99 (_ bv1 32)))))))))
 ))
 (let (($x70 (forall ((Lambda5 (_ BitVec 32)) )(let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x32 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x32 (_ bv0 32))))
 (= $x105 (= ?x99 (_ bv0 32)))))))))
 ))
 (let (($x102 (and $x70 $x19)))
 (let (($x139 (and $x102 $x124)))
 (let (($x104 (and $x139 $x103)))
 (let (($x231 (and $x104 $x228)))
 (let (($x9 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x21 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x75 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x128 (_ bv1 32))))
 (=> $x11 (= ?x75 ?x21))))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x51 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x128 (_ bv1 32))))
 (= $x11 (bvuge ?x51 (_ bv1 32)))))))))
 ))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x51 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x128 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x128 (_ bv0 32))))
 (= $x108 (= ?x51 (_ bv0 32)))))))))
 ))
 (let (($x92 (and $x111 $x91)))
 (let (($x55 (and $x92 $x73)))
 (let (($x27 (and $x55 $x9)))
 (let (($x234 (and $x27 $x231)))
 (let (($x292 (=> $x234 $x239)))
 (not $x292))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x30 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x72 (= $x30 true)))
 (let ((?x213 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x211 (concat ?x203 (concat ?x207 ?x213)))))
 (let (($x216 (= input.dst.llvm-%m2 ?x215)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x178 (concat ?x177 (concat ?x158 (concat ?x136 ?x137)))))
 (let (($x209 (= input.dst.llvm-%m1 ?x178)))
 (let (($x132 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x130 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x48 (and (and (and $x130 $x132) $x209) $x216)))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x80 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv1 32))) (select input.dst.llvm-mem ?x80))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv2 32))) ?x135))))
 (let ((?x179 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x141 (_ bv1 32))))
 (=> $x170 (= ?x179 ?x83)))))))))))
 ))
 (let (($x34 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x259 (_ bv1 32))))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x141 (_ bv1 32))))
 (= $x170 $x271)))))))
 ))
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let (($x21 (= false false)))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x141 (_ bv0 32))))
 (=> $x140 $x21))))))
 ))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x259 (_ bv0 32))))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x141 (_ bv0 32))))
 (= $x140 $x265)))))))
 ))
 (let (($x195 (and $x126 $x147)))
 (let (($x25 (and $x195 $x34)))
 (let (($x114 (and $x25 $x98)))
 (let (($x14 (and $x114 $x48)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x230 (= (_ bv0 32) ?x229)))
 (let ((?x235 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x236 (= (_ bv0 32) ?x235)))
 (let ((?x198 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x187 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x192 $x191)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x189 $x188)))
 (let (($x186 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x162 $x159)))
 (let (($x174 (not $x163)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x164 $x165)))
 (let (($x194 (and (not $x161) $x174)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x82 $x86)))
 (let (($x222 (not $x90)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x36 $x37)))
 (let (($x183 (and (not $x74) $x222)))
 (let (($x239 (and (and (and (and (and (and $x183 $x194) $x196) $x186) $x193) $x218) $x236)))
 (let (($x292 (and $x239 $x230)))
 (let (($x17 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x42 (bvadd ?x53 input.dst.llvm-%m2)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x88))))
 (let ((?x19 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x76 (_ bv1 32))))
 (=> $x99 (= ?x19 ?x31)))))))))))
 ))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x259 (_ bv1 32))))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x76 (_ bv1 32))))
 (= $x99 $x271)))))))
 ))
 (let (($x9 (forall ((Lambda5 (_ BitVec 32)) )(let (($x21 (= false false)))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x76 (_ bv0 32))))
 (=> $x73 $x21))))))
 ))
 (let (($x268 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x259 (_ bv0 32))))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x76 (_ bv0 32))))
 (= $x73 $x265)))))))
 ))
 (let (($x269 (and $x268 $x9)))
 (let (($x281 (and $x269 $x280)))
 (let (($x56 (and $x281 $x17)))
 (let (($x250 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x248 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x248)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x248)))
 (let (($x253 (or false (or false (and (and true (or $x246 $x242)) (or $x247 $x250))))))
 (let (($x255 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x253)))
 (let (($x20 (and (and (and $x255 $x56) $x292) $x14)))
 (let (($x10 (= $x20 true)))
 (let (($x35 (= $x10 true)))
 (let (($x212 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x199 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x179 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x141 (_ bv1 32))))
 (=> $x170 (= ?x179 ?x199))))))))
 ))
 (let (($x172 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x121 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x141 (_ bv1 32))))
 (= $x170 (bvuge ?x121 (_ bv1 32)))))))))
 ))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x121 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x141 (_ bv0 32))))
 (= $x140 (= ?x121 (_ bv0 32)))))))))
 ))
 (let (($x155 (and $x145 $x147)))
 (let (($x173 (and $x155 $x172)))
 (let (($x249 (and $x173 $x212)))
 (let (($x43 (and $x249 $x35)))
 (let (($x125 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x59 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x19 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x76 (_ bv1 32))))
 (=> $x99 (= ?x19 ?x59))))))))
 ))
 (let (($x28 (forall ((Lambda5 (_ BitVec 32)) )(let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x11 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x76 (_ bv1 32))))
 (= $x99 (bvuge ?x11 (_ bv1 32)))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x11 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x76 (_ bv0 32))))
 (= $x73 (= ?x11 (_ bv0 32)))))))))
 ))
 (let (($x27 (and $x75 $x9)))
 (let (($x70 (and $x27 $x28)))
 (let (($x100 (and $x70 $x125)))
 (let (($x15 (and $x100 $x43)))
 (let (($x45 (=> $x15 $x72)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x30 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x72 (= $x30 true)))
 (let ((?x213 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x211 (concat ?x203 (concat ?x207 ?x213)))))
 (let (($x216 (= input.dst.llvm-%m2 ?x215)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x178 (concat ?x177 (concat ?x158 (concat ?x136 ?x137)))))
 (let (($x209 (= input.dst.llvm-%m1 ?x178)))
 (let (($x132 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x130 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x48 (and (and (and $x130 $x132) $x209) $x216)))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x80 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv1 32))) (select input.dst.llvm-mem ?x80))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv2 32))) ?x135))))
 (let ((?x179 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x141 (_ bv1 32))))
 (=> $x170 (= ?x179 ?x83)))))))))))
 ))
 (let (($x34 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x259 (_ bv1 32))))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x141 (_ bv1 32))))
 (= $x170 $x271)))))))
 ))
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let (($x21 (= false false)))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x141 (_ bv0 32))))
 (=> $x140 $x21))))))
 ))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x259 (_ bv0 32))))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x141 (_ bv0 32))))
 (= $x140 $x265)))))))
 ))
 (let (($x195 (and $x126 $x147)))
 (let (($x25 (and $x195 $x34)))
 (let (($x114 (and $x25 $x98)))
 (let (($x14 (and $x114 $x48)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x230 (= (_ bv0 32) ?x229)))
 (let ((?x235 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x236 (= (_ bv0 32) ?x235)))
 (let ((?x198 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x198)))
 (let ((?x187 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x192 $x191)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x189 $x188)))
 (let (($x186 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x162 $x159)))
 (let (($x174 (not $x163)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x164 $x165)))
 (let (($x194 (and (not $x161) $x174)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x82 $x86)))
 (let (($x222 (not $x90)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x36 $x37)))
 (let (($x183 (and (not $x74) $x222)))
 (let (($x239 (and (and (and (and (and (and $x183 $x194) $x196) $x186) $x193) $x218) $x236)))
 (let (($x292 (and $x239 $x230)))
 (let (($x17 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x42 (bvadd ?x53 input.dst.llvm-%m2)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x88))))
 (let ((?x19 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x76 (_ bv1 32))))
 (=> $x99 (= ?x19 ?x31)))))))))))
 ))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x259 (_ bv1 32))))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x76 (_ bv1 32))))
 (= $x99 $x271)))))))
 ))
 (let (($x9 (forall ((Lambda5 (_ BitVec 32)) )(let (($x21 (= false false)))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x76 (_ bv0 32))))
 (=> $x73 $x21))))))
 ))
 (let (($x268 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x259 (_ bv0 32))))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x76 (_ bv0 32))))
 (= $x73 $x265)))))))
 ))
 (let (($x269 (and $x268 $x9)))
 (let (($x281 (and $x269 $x280)))
 (let (($x56 (and $x281 $x17)))
 (let (($x250 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x248 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x248)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x248)))
 (let (($x253 (or false (or false (and (and true (or $x246 $x242)) (or $x247 $x250))))))
 (let (($x255 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x253)))
 (let (($x20 (and (and (and $x255 $x56) $x292) $x14)))
 (let (($x10 (= $x20 true)))
 (let (($x35 (= $x10 true)))
 (let (($x212 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x199 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x179 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x141 (_ bv1 32))))
 (=> $x170 (= ?x179 ?x199))))))))
 ))
 (let (($x172 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x121 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x141 (_ bv1 32))))
 (= $x170 (bvuge ?x121 (_ bv1 32)))))))))
 ))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x121 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x141 (ite $x104 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x141 (_ bv0 32))))
 (= $x140 (= ?x121 (_ bv0 32)))))))))
 ))
 (let (($x155 (and $x145 $x147)))
 (let (($x173 (and $x155 $x172)))
 (let (($x249 (and $x173 $x212)))
 (let (($x43 (and $x249 $x35)))
 (let (($x125 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x59 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x19 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x76 (_ bv1 32))))
 (=> $x99 (= ?x19 ?x59))))))))
 ))
 (let (($x28 (forall ((Lambda5 (_ BitVec 32)) )(let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x11 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x76 (_ bv1 32))))
 (= $x99 (bvuge ?x11 (_ bv1 32)))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x11 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x76 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (= ?x76 (_ bv0 32))))
 (= $x73 (= ?x11 (_ bv0 32)))))))))
 ))
 (let (($x27 (and $x75 $x9)))
 (let (($x70 (and $x27 $x28)))
 (let (($x100 (and $x70 $x125)))
 (let (($x15 (and $x100 $x43)))
 (let (($x45 (=> $x15 $x72)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x080a8b9c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00015798)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x01404000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0001579b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x080a8b9f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00015798)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x080a8b9c)
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x080a8b9d) #x40
    (ite (= x!0 #x080a8b9e) #x40
    (ite (= x!0 #x080a8b9f) #x01
      #x00))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x080a8b9f)
                                      (k!13 #x080a8b9e)
                                      (k!13 #x080a8b9d)
                                      (k!13 #x080a8b9c)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x080a8b9f)
                                      (k!13 #x080a8b9e)
                                      (k!13 #x080a8b9d)
                                      (k!13 #x080a8b9c)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x080a8b9f)
                                      (k!13 #x080a8b9e)
                                      (k!13 #x080a8b9d)
                                      (k!13 #x080a8b9c)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x080a8b9f)
                                      (k!13 #x080a8b9e)
                                      (k!13 #x080a8b9d)
                                      (k!13 #x080a8b9c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0001579b)
                                      (k!13 #x0001579a)
                                      (k!13 #x00015799)
                                      (k!13 #x00015798)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0001579b)
                                      (k!13 #x0001579a)
                                      (k!13 #x00015799)
                                      (k!13 #x00015798)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0001579b)
                                      (k!13 #x0001579a)
                                      (k!13 #x00015799)
                                      (k!13 #x00015798)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x0001579b)
                                      (k!13 #x0001579a)
                                      (k!13 #x00015799)
                                      (k!13 #x00015798))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x055207f0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa2ca05f4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00008010)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x0df58800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa2ca05f7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x055207f3)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa2ca05f4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x055207f0)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x055207f1) #x80
    (ite (= x!0 #xa2ca05f7) #x0d
    (ite (= x!0 #x055207f0) #x10
    (ite (= x!0 #xa2ca05f6) #xf5
    (ite (= x!0 #xa2ca05f5) #x88
      #x00))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xa2ca05f7)
                                      (k!13 #xa2ca05f6)
                                      (k!13 #xa2ca05f5)
                                      (k!13 #xa2ca05f4)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xa2ca05f7)
                                      (k!13 #xa2ca05f6)
                                      (k!13 #xa2ca05f5)
                                      (k!13 #xa2ca05f4)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xa2ca05f7)
                                      (k!13 #xa2ca05f6)
                                      (k!13 #xa2ca05f5)
                                      (k!13 #xa2ca05f4)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xa2ca05f7)
                                      (k!13 #xa2ca05f6)
                                      (k!13 #xa2ca05f5)
                                      (k!13 #xa2ca05f4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x055207f3)
                                      (k!13 #x055207f2)
                                      (k!13 #x055207f1)
                                      (k!13 #x055207f0)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x055207f3)
                                      (k!13 #x055207f2)
                                      (k!13 #x055207f1)
                                      (k!13 #x055207f0)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x055207f3)
                                      (k!13 #x055207f2)
                                      (k!13 #x055207f1)
                                      (k!13 #x055207f0)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x055207f3)
                                      (k!13 #x055207f2)
                                      (k!13 #x055207f1)
                                      (k!13 #x055207f0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x97 ((_ extract 10 0) input.dst.llvm-%m1)))
 (let (($x143 (= (_ bv0 11) ?x97)))
 (let (($x22 (= $x143 true)))
 (let ((?x258 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x284 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x181 (concat ?x276 (concat ?x284 ?x258)))))
 (let (($x16 (= input.dst.llvm-%m2 ?x24)))
 (let ((?x219 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x275 (concat ?x270 (concat ?x263 (concat ?x257 ?x219)))))
 (let (($x273 (= input.dst.llvm-%m1 ?x275)))
 (let (($x182 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x166 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x50 (and (and (and $x166 $x182) $x273) $x16)))
 (let (($x115 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x123 (bvadd ?x34 input.dst.llvm-%m1)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x180))))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x244 (_ bv1 32))))
 (=> $x261 (= ?x269 ?x131)))))))))))
 ))
 (let (($x102 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x163 (_ bv1 32))))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x244 (_ bv1 32))))
 (= $x261 $x197)))))))
 ))
 (let (($x252 (forall ((Lambda5 (_ BitVec 32)) )(let (($x19 (= false false)))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x244 (_ bv0 32))))
 (=> $x247 $x19))))))
 ))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x163 (_ bv0 32))))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x244 (_ bv0 32))))
 (= $x247 $x174)))))))
 ))
 (let (($x120 (and $x205 $x252)))
 (let (($x29 (and $x120 $x102)))
 (let (($x146 (and $x29 $x115)))
 (let (($x38 (and $x146 $x50)))
 (let ((?x20 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x10 (= (_ bv0 32) ?x20)))
 (let ((?x48 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x14 (= (_ bv0 32) ?x48)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x207 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x207)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x210 (and $x214 $x213)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x203 $x210)))
 (let (($x202 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x136 $x137)))
 (let (($x167 (not $x156)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x157 $x158)))
 (let (($x209 (and (not $x138) $x167)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x130 $x117)))
 (let (($x217 (not $x132)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x114 $x89)))
 (let (($x177 (and (not $x57) $x217)))
 (let (($x45 (and (and (and (and (and (and $x177 $x209) $x201) $x202) $x206) $x216) $x14)))
 (let (($x79 (and $x45 $x10)))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x25 (bvadd ?x34 input.dst.llvm-%m2)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x150))))
 (let ((?x154 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x78 (_ bv1 32))))
 (=> $x119 (= ?x154 ?x113)))))))))))
 ))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x163 (_ bv1 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x78 (_ bv1 32))))
 (= $x119 $x197)))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let (($x19 (= false false)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x78 (_ bv0 32))))
 (=> $x101 $x19))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x163 (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x78 (_ bv0 32))))
 (= $x101 $x174)))))))
 ))
 (let (($x227 (and $x228 $x116)))
 (let (($x189 (and $x227 $x234)))
 (let (($x98 (and $x189 $x106)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x82 (or false (or false (and (and true (or $x85 $x31)) (or $x8 $x36))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x12 (and (and (and $x90 $x98) $x79) $x38)))
 (let (($x5 (= $x12 true)))
 (let (($x44 (= $x5 true)))
 (let (($x42 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x280 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x244 (_ bv1 32))))
 (=> $x261 (= ?x269 ?x280))))))))
 ))
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x244 (_ bv1 32))))
 (= $x261 (bvuge ?x243 (_ bv1 32)))))))))
 ))
 (let (($x250 (forall ((Lambda5 (_ BitVec 32)) )(let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x244 (_ bv0 32))))
 (= $x247 (= ?x243 (_ bv0 32)))))))))
 ))
 (let (($x253 (and $x250 $x252)))
 (let (($x285 (and $x253 $x265)))
 (let (($x233 (and $x285 $x42)))
 (let (($x144 (and $x233 $x44)))
 (let (($x199 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x154 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x78 (_ bv1 32))))
 (=> $x119 (= ?x154 ?x170))))))))
 ))
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let (($x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x27 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x78 (_ bv1 32))))
 (= $x119 (bvuge ?x27 (_ bv1 32)))))))))
 ))
 (let (($x70 (forall ((Lambda5 (_ BitVec 32)) )(let (($x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x27 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x78 (_ bv0 32))))
 (= $x101 (= ?x27 (_ bv0 32)))))))))
 ))
 (let (($x125 (and $x70 $x116)))
 (let (($x153 (and $x125 $x118)))
 (let (($x190 (and $x153 $x199)))
 (let (($x6 (and $x190 $x144)))
 (let (($x71 (=> $x6 $x22)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x97 ((_ extract 10 0) input.dst.llvm-%m1)))
 (let (($x143 (= (_ bv0 11) ?x97)))
 (let (($x22 (= $x143 true)))
 (let ((?x258 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x284 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x181 (concat ?x276 (concat ?x284 ?x258)))))
 (let (($x16 (= input.dst.llvm-%m2 ?x24)))
 (let ((?x219 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x275 (concat ?x270 (concat ?x263 (concat ?x257 ?x219)))))
 (let (($x273 (= input.dst.llvm-%m1 ?x275)))
 (let (($x182 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x166 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x50 (and (and (and $x166 $x182) $x273) $x16)))
 (let (($x115 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x123 (bvadd ?x34 input.dst.llvm-%m1)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x180))))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x244 (_ bv1 32))))
 (=> $x261 (= ?x269 ?x131)))))))))))
 ))
 (let (($x102 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x163 (_ bv1 32))))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x244 (_ bv1 32))))
 (= $x261 $x197)))))))
 ))
 (let (($x252 (forall ((Lambda5 (_ BitVec 32)) )(let (($x19 (= false false)))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x244 (_ bv0 32))))
 (=> $x247 $x19))))))
 ))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x163 (_ bv0 32))))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x244 (_ bv0 32))))
 (= $x247 $x174)))))))
 ))
 (let (($x120 (and $x205 $x252)))
 (let (($x29 (and $x120 $x102)))
 (let (($x146 (and $x29 $x115)))
 (let (($x38 (and $x146 $x50)))
 (let ((?x20 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x10 (= (_ bv0 32) ?x20)))
 (let ((?x48 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x14 (= (_ bv0 32) ?x48)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x207 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x207)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x210 (and $x214 $x213)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x203 $x210)))
 (let (($x202 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x136 $x137)))
 (let (($x167 (not $x156)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x157 $x158)))
 (let (($x209 (and (not $x138) $x167)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x130 $x117)))
 (let (($x217 (not $x132)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x114 $x89)))
 (let (($x177 (and (not $x57) $x217)))
 (let (($x45 (and (and (and (and (and (and $x177 $x209) $x201) $x202) $x206) $x216) $x14)))
 (let (($x79 (and $x45 $x10)))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x25 (bvadd ?x34 input.dst.llvm-%m2)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x150))))
 (let ((?x154 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x78 (_ bv1 32))))
 (=> $x119 (= ?x154 ?x113)))))))))))
 ))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x163 (_ bv1 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x78 (_ bv1 32))))
 (= $x119 $x197)))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let (($x19 (= false false)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x78 (_ bv0 32))))
 (=> $x101 $x19))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x174 (= ?x163 (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x78 (_ bv0 32))))
 (= $x101 $x174)))))))
 ))
 (let (($x227 (and $x228 $x116)))
 (let (($x189 (and $x227 $x234)))
 (let (($x98 (and $x189 $x106)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x82 (or false (or false (and (and true (or $x85 $x31)) (or $x8 $x36))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x12 (and (and (and $x90 $x98) $x79) $x38)))
 (let (($x5 (= $x12 true)))
 (let (($x44 (= $x5 true)))
 (let (($x42 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x280 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x269 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x244 (_ bv1 32))))
 (=> $x261 (= ?x269 ?x280))))))))
 ))
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x244 (_ bv1 32))))
 (= $x261 (bvuge ?x243 (_ bv1 32)))))))))
 ))
 (let (($x250 (forall ((Lambda5 (_ BitVec 32)) )(let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x244 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (= ?x244 (_ bv0 32))))
 (= $x247 (= ?x243 (_ bv0 32)))))))))
 ))
 (let (($x253 (and $x250 $x252)))
 (let (($x285 (and $x253 $x265)))
 (let (($x233 (and $x285 $x42)))
 (let (($x144 (and $x233 $x44)))
 (let (($x199 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x170 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x154 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x78 (_ bv1 32))))
 (=> $x119 (= ?x154 ?x170))))))))
 ))
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let (($x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x27 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x119 (bvuge ?x78 (_ bv1 32))))
 (= $x119 (bvuge ?x27 (_ bv1 32)))))))))
 ))
 (let (($x70 (forall ((Lambda5 (_ BitVec 32)) )(let (($x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x27 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x78 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x78 (_ bv0 32))))
 (= $x101 (= ?x27 (_ bv0 32)))))))))
 ))
 (let (($x125 (and $x70 $x116)))
 (let (($x153 (and $x125 $x118)))
 (let (($x190 (and $x153 $x199)))
 (let (($x6 (and $x190 $x144)))
 (let (($x71 (=> $x6 $x22)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000014)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000108)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000017)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000014)
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000009) #x01
    (ite (= x!0 #x00000008) #x08
      #x00)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000017)
                                      (k!13 #x00000016)
                                      (k!13 #x00000015)
                                      (k!13 #x00000014)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000017)
                                      (k!13 #x00000016)
                                      (k!13 #x00000015)
                                      (k!13 #x00000014)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000017)
                                      (k!13 #x00000016)
                                      (k!13 #x00000015)
                                      (k!13 #x00000014)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000017)
                                      (k!13 #x00000016)
                                      (k!13 #x00000015)
                                      (k!13 #x00000014))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7e892a14)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0e986848)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xcfafea00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xffeb0004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0e98684b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7e892a17)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0e986848)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7e892a14)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0e986848) #x04
    (ite (= x!0 #x7e892a15) #xea
    (ite (= x!0 #x0e98684b) #xff
    (ite (= x!0 #x7e892a17) #xcf
    (ite (= x!0 #x7e892a16) #xaf
    (ite (= x!0 #x0e98684a) #xeb
      #x00)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0e98684b)
                                      (k!13 #x0e98684a)
                                      (k!13 #x0e986849)
                                      (k!13 #x0e986848)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0e98684b)
                                      (k!13 #x0e98684a)
                                      (k!13 #x0e986849)
                                      (k!13 #x0e986848)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0e98684b)
                                      (k!13 #x0e98684a)
                                      (k!13 #x0e986849)
                                      (k!13 #x0e986848)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x0e98684b)
                                      (k!13 #x0e98684a)
                                      (k!13 #x0e986849)
                                      (k!13 #x0e986848))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x7e892a17)
                                      (k!13 #x7e892a16)
                                      (k!13 #x7e892a15)
                                      (k!13 #x7e892a14)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x7e892a17)
                                      (k!13 #x7e892a16)
                                      (k!13 #x7e892a15)
                                      (k!13 #x7e892a14)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x7e892a17)
                                      (k!13 #x7e892a16)
                                      (k!13 #x7e892a15)
                                      (k!13 #x7e892a14)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x7e892a17)
                                      (k!13 #x7e892a16)
                                      (k!13 #x7e892a15)
                                      (k!13 #x7e892a14))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x110 ((_ extract 3 0) input.dst.llvm-%m2)))
 (let (($x92 (= (_ bv0 4) ?x110)))
 (let (($x32 (= $x92 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x230 (concat ?x235 (concat ?x218 (concat ?x151 ?x237)))))
 (let (($x126 (= input.dst.llvm-%m2 ?x230)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x196 (concat ?x161 (concat ?x183 (concat ?x274 ?x287)))))
 (let (($x231 (= input.dst.llvm-%m1 ?x196)))
 (let (($x240 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x255 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x245 (and (and (and $x255 $x240) $x231) $x126)))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x102 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x141 (bvadd ?x102 input.dst.llvm-%m1)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x172))))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x17 (_ bv1 32))))
 (=> $x159 (= ?x227 ?x223)))))))))))
 ))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x156 (_ bv1 32))))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x17 (_ bv1 32))))
 (= $x159 $x211)))))))
 ))
 (let (($x175 (forall ((Lambda5 (_ BitVec 32)) )(let (($x154 (= false false)))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x17 (_ bv0 32))))
 (=> $x8 $x154))))))
 ))
 (let (($x40 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x156 (_ bv0 32))))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x17 (_ bv0 32))))
 (= $x8 $x167)))))))
 ))
 (let (($x68 (and $x40 $x175)))
 (let (($x108 (and $x68 $x187)))
 (let (($x225 (and $x108 $x246)))
 (let (($x278 (and $x225 $x245)))
 (let ((?x12 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x5 (= (_ bv0 32) ?x12)))
 (let ((?x50 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x38 (= (_ bv0 32) ?x50)))
 (let ((?x24 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x284 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x284)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x289 (and $x283 $x258)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x282 (and $x276 $x289)))
 (let (($x279 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (and $x257 $x219)))
 (let (($x262 (not $x266)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (and $x267 $x263)))
 (let (($x273 (and (not $x226) $x262)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x166 $x176)))
 (let (($x293 (not $x182)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x146 $x168)))
 (let (($x270 (and (not $x109) $x293)))
 (let (($x143 (and (and (and (and (and (and $x270 $x273) $x291) $x279) $x282) $x16) $x38)))
 (let (($x22 (and $x143 $x5)))
 (let (($x127 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x102 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x102 input.dst.llvm-%m2)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x107))))
 (let ((?x256 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x140 (_ bv1 32))))
 (=> $x221 (= ?x256 ?x103)))))))))))
 ))
 (let (($x15 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x156 (_ bv1 32))))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x140 (_ bv1 32))))
 (= $x221 $x211)))))))
 ))
 (let (($x179 (forall ((Lambda5 (_ BitVec 32)) )(let (($x154 (= false false)))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x140 (_ bv0 32))))
 (=> $x121 $x154))))))
 ))
 (let (($x35 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x156 (_ bv0 32))))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x140 (_ bv0 32))))
 (= $x121 $x167)))))))
 ))
 (let (($x94 (and $x35 $x179)))
 (let (($x203 (and $x94 $x15)))
 (let (($x115 (and $x203 $x127)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x130 (or false (or false (and (and true (or $x41 $x113)) (or $x142 $x114))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x129 (and (and (and $x132 $x115) $x22) $x278)))
 (let (($x87 (= $x129 true)))
 (let (($x91 (= $x87 true)))
 (let (($x25 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x234 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x17 (_ bv1 32))))
 (=> $x159 (= ?x227 ?x234))))))))
 ))
 (let (($x174 (forall ((Lambda5 (_ BitVec 32)) )(let (($x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x47 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x17 (_ bv1 32))))
 (= $x159 (bvuge ?x47 (_ bv1 32)))))))))
 ))
 (let (($x36 (forall ((Lambda5 (_ BitVec 32)) )(let (($x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x47 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x17 (_ bv0 32))))
 (= $x8 (= ?x47 (_ bv0 32)))))))))
 ))
 (let (($x82 (and $x36 $x175)))
 (let (($x194 (and $x82 $x174)))
 (let (($x292 (and $x194 $x25)))
 (let (($x51 (and $x292 $x91)))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x261 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x256 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x140 (_ bv1 32))))
 (=> $x221 (= ?x256 ?x261))))))))
 ))
 (let (($x241 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x125 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x140 (_ bv1 32))))
 (= $x221 (bvuge ?x125 (_ bv1 32)))))))))
 ))
 (let (($x153 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x125 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x140 (_ bv0 32))))
 (= $x121 (= ?x125 (_ bv0 32)))))))))
 ))
 (let (($x199 (and $x153 $x179)))
 (let (($x232 (and $x199 $x241)))
 (let (($x53 (and $x232 $x280)))
 (let (($x112 (and $x53 $x51)))
 (let (($x105 (=> $x112 $x32)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x110 ((_ extract 3 0) input.dst.llvm-%m2)))
 (let (($x92 (= (_ bv0 4) ?x110)))
 (let (($x32 (= $x92 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x230 (concat ?x235 (concat ?x218 (concat ?x151 ?x237)))))
 (let (($x126 (= input.dst.llvm-%m2 ?x230)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x196 (concat ?x161 (concat ?x183 (concat ?x274 ?x287)))))
 (let (($x231 (= input.dst.llvm-%m1 ?x196)))
 (let (($x240 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x255 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x245 (and (and (and $x255 $x240) $x231) $x126)))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x102 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x141 (bvadd ?x102 input.dst.llvm-%m1)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x172))))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x17 (_ bv1 32))))
 (=> $x159 (= ?x227 ?x223)))))))))))
 ))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x156 (_ bv1 32))))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x17 (_ bv1 32))))
 (= $x159 $x211)))))))
 ))
 (let (($x175 (forall ((Lambda5 (_ BitVec 32)) )(let (($x154 (= false false)))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x17 (_ bv0 32))))
 (=> $x8 $x154))))))
 ))
 (let (($x40 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x156 (_ bv0 32))))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x17 (_ bv0 32))))
 (= $x8 $x167)))))))
 ))
 (let (($x68 (and $x40 $x175)))
 (let (($x108 (and $x68 $x187)))
 (let (($x225 (and $x108 $x246)))
 (let (($x278 (and $x225 $x245)))
 (let ((?x12 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x5 (= (_ bv0 32) ?x12)))
 (let ((?x50 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x38 (= (_ bv0 32) ?x50)))
 (let ((?x24 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x24)))
 (let ((?x284 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x284)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x289 (and $x283 $x258)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x282 (and $x276 $x289)))
 (let (($x279 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (and $x257 $x219)))
 (let (($x262 (not $x266)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (and $x267 $x263)))
 (let (($x273 (and (not $x226) $x262)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x166 $x176)))
 (let (($x293 (not $x182)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x146 $x168)))
 (let (($x270 (and (not $x109) $x293)))
 (let (($x143 (and (and (and (and (and (and $x270 $x273) $x291) $x279) $x282) $x16) $x38)))
 (let (($x22 (and $x143 $x5)))
 (let (($x127 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x102 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x102 input.dst.llvm-%m2)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x107))))
 (let ((?x256 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x140 (_ bv1 32))))
 (=> $x221 (= ?x256 ?x103)))))))))))
 ))
 (let (($x15 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x156 (_ bv1 32))))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x140 (_ bv1 32))))
 (= $x221 $x211)))))))
 ))
 (let (($x179 (forall ((Lambda5 (_ BitVec 32)) )(let (($x154 (= false false)))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x140 (_ bv0 32))))
 (=> $x121 $x154))))))
 ))
 (let (($x35 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x156 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (= ?x156 (_ bv0 32))))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x140 (_ bv0 32))))
 (= $x121 $x167)))))))
 ))
 (let (($x94 (and $x35 $x179)))
 (let (($x203 (and $x94 $x15)))
 (let (($x115 (and $x203 $x127)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x130 (or false (or false (and (and true (or $x41 $x113)) (or $x142 $x114))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x129 (and (and (and $x132 $x115) $x22) $x278)))
 (let (($x87 (= $x129 true)))
 (let (($x91 (= $x87 true)))
 (let (($x25 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x234 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x227 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x17 (_ bv1 32))))
 (=> $x159 (= ?x227 ?x234))))))))
 ))
 (let (($x174 (forall ((Lambda5 (_ BitVec 32)) )(let (($x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x47 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x17 (_ bv1 32))))
 (= $x159 (bvuge ?x47 (_ bv1 32)))))))))
 ))
 (let (($x36 (forall ((Lambda5 (_ BitVec 32)) )(let (($x18 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x47 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x17 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (= ?x17 (_ bv0 32))))
 (= $x8 (= ?x47 (_ bv0 32)))))))))
 ))
 (let (($x82 (and $x36 $x175)))
 (let (($x194 (and $x82 $x174)))
 (let (($x292 (and $x194 $x25)))
 (let (($x51 (and $x292 $x91)))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x261 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x256 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x140 (_ bv1 32))))
 (=> $x221 (= ?x256 ?x261))))))))
 ))
 (let (($x241 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x125 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x140 (_ bv1 32))))
 (= $x221 (bvuge ?x125 (_ bv1 32)))))))))
 ))
 (let (($x153 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x125 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x140 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x140 (_ bv0 32))))
 (= $x121 (= ?x125 (_ bv0 32)))))))))
 ))
 (let (($x199 (and $x153 $x179)))
 (let (($x232 (and $x199 $x241)))
 (let (($x53 (and $x232 $x280)))
 (let (($x112 (and $x53 $x51)))
 (let (($x105 (=> $x112 $x32)))
 (not $x105))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000200)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000203)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000000ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000200)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000000fc)
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000fc) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x000000ff)
                                      (k!13 #x000000fe)
                                      (k!13 #x000000fd)
                                      (k!13 #x000000fc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x000000ff)
                                      (k!13 #x000000fe)
                                      (k!13 #x000000fd)
                                      (k!13 #x000000fc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x000000ff)
                                      (k!13 #x000000fe)
                                      (k!13 #x000000fd)
                                      (k!13 #x000000fc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x000000ff)
                                      (k!13 #x000000fe)
                                      (k!13 #x000000fd)
                                      (k!13 #x000000fc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000203)
                                      (k!13 #x80000202)
                                      (k!13 #x80000201)
                                      (k!13 #x80000200)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000203)
                                      (k!13 #x80000202)
                                      (k!13 #x80000201)
                                      (k!13 #x80000200)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000203)
                                      (k!13 #x80000202)
                                      (k!13 #x80000201)
                                      (k!13 #x80000200)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x80000203)
                                      (k!13 #x80000202)
                                      (k!13 #x80000201)
                                      (k!13 #x80000200))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x05bfb610)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4869efcc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x5377be04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfff9db00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4869efcf)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x05bfb613)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4869efcc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x05bfb610)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x05bfb611) #xbe
    (ite (= x!0 #x4869efcf) #xff
    (ite (= x!0 #x05bfb613) #x53
    (ite (= x!0 #x05bfb610) #x04
    (ite (= x!0 #x05bfb612) #x77
    (ite (= x!0 #x4869efce) #xf9
    (ite (= x!0 #x4869efcd) #xdb
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4869efcf)
                                      (k!13 #x4869efce)
                                      (k!13 #x4869efcd)
                                      (k!13 #x4869efcc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4869efcf)
                                      (k!13 #x4869efce)
                                      (k!13 #x4869efcd)
                                      (k!13 #x4869efcc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4869efcf)
                                      (k!13 #x4869efce)
                                      (k!13 #x4869efcd)
                                      (k!13 #x4869efcc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x4869efcf)
                                      (k!13 #x4869efce)
                                      (k!13 #x4869efcd)
                                      (k!13 #x4869efcc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x05bfb613)
                                      (k!13 #x05bfb612)
                                      (k!13 #x05bfb611)
                                      (k!13 #x05bfb610)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x05bfb613)
                                      (k!13 #x05bfb612)
                                      (k!13 #x05bfb611)
                                      (k!13 #x05bfb610)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x05bfb613)
                                      (k!13 #x05bfb612)
                                      (k!13 #x05bfb611)
                                      (k!13 #x05bfb610)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x05bfb613)
                                      (k!13 #x05bfb612)
                                      (k!13 #x05bfb611)
                                      (k!13 #x05bfb610))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x26 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x21 (= (_ bv0 2) ?x26)))
 (let (($x59 (= $x21 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x10 (concat ?x48 (concat ?x216 (concat ?x204 ?x30)))))
 (let (($x205 (= input.dst.llvm-%m2 ?x10)))
 (let ((?x186 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x138 (concat ?x177 (concat ?x191 ?x186)))))
 (let (($x43 (= input.dst.llvm-%m1 ?x201)))
 (let (($x66 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x90 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x71 (and (and (and $x90 $x66) $x43) $x205)))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x108 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x244 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x265))))
 (let ((?x94 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x106 (_ bv1 32))))
 (=> $x137 (= ?x94 ?x61)))))))))))
 ))
 (let (($x207 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x262 (_ bv1 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x106 (_ bv1 32))))
 (= $x137 $x279)))))))
 ))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let (($x256 (= false false)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x106 (_ bv0 32))))
 (=> $x142 $x256))))))
 ))
 (let (($x33 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (= ?x262 (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x106 (_ bv0 32))))
 (= $x142 $x273)))))))
 ))
 (let (($x135 (and $x33 $x160)))
 (let (($x60 (and $x135 $x207)))
 (let (($x67 (and $x60 $x85)))
 (let (($x272 (and $x67 $x71)))
 (let ((?x129 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x87 (= (_ bv0 32) ?x129)))
 (let ((?x245 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x278 (= (_ bv0 32) ?x245)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x230)))
 (let ((?x151 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x239 (and $x7 $x237)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x238 (and $x218 $x239)))
 (let (($x229 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x274 $x287)))
 (let (($x164 (not $x290)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x222 $x183)))
 (let (($x231 (and (not $x277) $x164)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x255 $x260)))
 (let (($x195 (not $x240)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x225 $x242)))
 (let (($x161 (and (not $x251) $x195)))
 (let (($x92 (and (and (and (and (and (and $x161 $x231) $x198) $x229) $x238) $x126) $x278)))
 (let (($x32 (and $x92 $x87)))
 (let (($x254 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x108 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x93 (bvadd ?x108 input.dst.llvm-%m2)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem ?x93))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv2 32))) ?x249))))
 (let ((?x74 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x247 (_ bv1 32))))
 (=> $x18 (= ?x74 ?x248)))))))))))
 ))
 (let (($x276 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x262 (_ bv1 32))))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x247 (_ bv1 32))))
 (= $x18 $x279)))))))
 ))
 (let (($x269 (forall ((Lambda5 (_ BitVec 32)) )(let (($x256 (= false false)))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x247 (_ bv0 32))))
 (=> $x243 $x256))))))
 ))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (= ?x262 (_ bv0 32))))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x247 (_ bv0 32))))
 (= $x243 $x273)))))))
 ))
 (let (($x291 (and $x58 $x269)))
 (let (($x283 (and $x291 $x276)))
 (let (($x246 (and $x283 $x254)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x176 (or false (or false (and (and true (or $x103 $x131)) (or $x146 $x168))))))
 (let (($x293 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x176)))
 (let (($x9 (and (and (and $x293 $x246) $x32) $x272)))
 (let (($x76 (= $x9 true)))
 (let (($x73 (= $x76 true)))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x94 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x106 (_ bv1 32))))
 (=> $x137 (= ?x94 ?x15))))))))
 ))
 (let (($x167 (forall ((Lambda5 (_ BitVec 32)) )(let (($x152 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x83 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x106 (_ bv1 32))))
 (= $x137 (bvuge ?x83 (_ bv1 32)))))))))
 ))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let (($x152 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x83 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x106 (_ bv0 32))))
 (= $x142 (= ?x83 (_ bv0 32)))))))))
 ))
 (let (($x130 (and $x114 $x160)))
 (let (($x209 (and $x130 $x167)))
 (let (($x124 (and $x209 $x79)))
 (let (($x169 (and $x124 $x73)))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x159 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x74 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x247 (_ bv1 32))))
 (=> $x18 (= ?x74 ?x159))))))))
 ))
 (let (($x77 (forall ((Lambda5 (_ BitVec 32)) )(let (($x118 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x199 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x247 (_ bv1 32))))
 (= $x18 (bvuge ?x199 (_ bv1 32)))))))))
 ))
 (let (($x232 (forall ((Lambda5 (_ BitVec 32)) )(let (($x118 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x199 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x247 (_ bv0 32))))
 (= $x243 (= ?x199 (_ bv0 32)))))))))
 ))
 (let (($x280 (and $x232 $x269)))
 (let (($x56 (and $x280 $x77)))
 (let (($x34 (and $x56 $x234)))
 (let (($x54 (and $x34 $x169)))
 (let (($x100 (=> $x54 $x59)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x26 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x21 (= (_ bv0 2) ?x26)))
 (let (($x59 (= $x21 true)))
 (let ((?x30 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x10 (concat ?x48 (concat ?x216 (concat ?x204 ?x30)))))
 (let (($x205 (= input.dst.llvm-%m2 ?x10)))
 (let ((?x186 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x138 (concat ?x177 (concat ?x191 ?x186)))))
 (let (($x43 (= input.dst.llvm-%m1 ?x201)))
 (let (($x66 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x90 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x71 (and (and (and $x90 $x66) $x43) $x205)))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x108 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x244 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x265))))
 (let ((?x94 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x106 (_ bv1 32))))
 (=> $x137 (= ?x94 ?x61)))))))))))
 ))
 (let (($x207 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x262 (_ bv1 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x106 (_ bv1 32))))
 (= $x137 $x279)))))))
 ))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let (($x256 (= false false)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x106 (_ bv0 32))))
 (=> $x142 $x256))))))
 ))
 (let (($x33 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (= ?x262 (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x106 (_ bv0 32))))
 (= $x142 $x273)))))))
 ))
 (let (($x135 (and $x33 $x160)))
 (let (($x60 (and $x135 $x207)))
 (let (($x67 (and $x60 $x85)))
 (let (($x272 (and $x67 $x71)))
 (let ((?x129 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x87 (= (_ bv0 32) ?x129)))
 (let ((?x245 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x278 (= (_ bv0 32) ?x245)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x230)))
 (let ((?x151 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x239 (and $x7 $x237)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x238 (and $x218 $x239)))
 (let (($x229 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x274 $x287)))
 (let (($x164 (not $x290)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x222 $x183)))
 (let (($x231 (and (not $x277) $x164)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x255 $x260)))
 (let (($x195 (not $x240)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x225 $x242)))
 (let (($x161 (and (not $x251) $x195)))
 (let (($x92 (and (and (and (and (and (and $x161 $x231) $x198) $x229) $x238) $x126) $x278)))
 (let (($x32 (and $x92 $x87)))
 (let (($x254 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x108 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x93 (bvadd ?x108 input.dst.llvm-%m2)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem ?x93))))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv2 32))) ?x249))))
 (let ((?x74 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x247 (_ bv1 32))))
 (=> $x18 (= ?x74 ?x248)))))))))))
 ))
 (let (($x276 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x262 (_ bv1 32))))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x247 (_ bv1 32))))
 (= $x18 $x279)))))))
 ))
 (let (($x269 (forall ((Lambda5 (_ BitVec 32)) )(let (($x256 (= false false)))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x247 (_ bv0 32))))
 (=> $x243 $x256))))))
 ))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (= ?x262 (_ bv0 32))))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x247 (_ bv0 32))))
 (= $x243 $x273)))))))
 ))
 (let (($x291 (and $x58 $x269)))
 (let (($x283 (and $x291 $x276)))
 (let (($x246 (and $x283 $x254)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x176 (or false (or false (and (and true (or $x103 $x131)) (or $x146 $x168))))))
 (let (($x293 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x176)))
 (let (($x9 (and (and (and $x293 $x246) $x32) $x272)))
 (let (($x76 (= $x9 true)))
 (let (($x73 (= $x76 true)))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x94 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x106 (_ bv1 32))))
 (=> $x137 (= ?x94 ?x15))))))))
 ))
 (let (($x167 (forall ((Lambda5 (_ BitVec 32)) )(let (($x152 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x83 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x106 (_ bv1 32))))
 (= $x137 (bvuge ?x83 (_ bv1 32)))))))))
 ))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let (($x152 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x83 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x106 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x142 (= ?x106 (_ bv0 32))))
 (= $x142 (= ?x83 (_ bv0 32)))))))))
 ))
 (let (($x130 (and $x114 $x160)))
 (let (($x209 (and $x130 $x167)))
 (let (($x124 (and $x209 $x79)))
 (let (($x169 (and $x124 $x73)))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x159 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x74 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x247 (_ bv1 32))))
 (=> $x18 (= ?x74 ?x159))))))))
 ))
 (let (($x77 (forall ((Lambda5 (_ BitVec 32)) )(let (($x118 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x199 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x18 (bvuge ?x247 (_ bv1 32))))
 (= $x18 (bvuge ?x199 (_ bv1 32)))))))))
 ))
 (let (($x232 (forall ((Lambda5 (_ BitVec 32)) )(let (($x118 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x199 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x247 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x247 (_ bv0 32))))
 (= $x243 (= ?x199 (_ bv0 32)))))))))
 ))
 (let (($x280 (and $x232 $x269)))
 (let (($x56 (and $x280 $x77)))
 (let (($x34 (and $x56 $x234)))
 (let (($x54 (and $x34 $x169)))
 (let (($x100 (=> $x54 $x59)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 202 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x55 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x19 (= (_ bv0 2) ?x55)))
 (let (($x170 (= $x19 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x38 (concat ?x97 (concat ?x40 ?x24)))))
 (let (($x68 (= input.dst.llvm-%m2 ?x22)))
 (let ((?x202 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x275 (concat ?x267 (concat ?x213 ?x202)))))
 (let (($x181 (= input.dst.llvm-%m1 ?x144)))
 (let (($x84 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x132 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x105 (and (and (and $x132 $x84) $x181) $x68)))
 (let (($x41 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x60 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x17 (bvadd ?x60 input.dst.llvm-%m1)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x174))))
 (let ((?x279 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x146 (_ bv1 32))))
 (=> $x262 (= ?x279 ?x69)))))))))))
 ))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x164 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x164 (_ bv1 32))))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x146 (_ bv1 32))))
 (= $x262 $x229)))))))
 ))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let (($x159 (= false false)))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x146 (_ bv0 32))))
 (=> $x122 $x159))))))
 ))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x164 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x164 (_ bv0 32))))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x146 (_ bv0 32))))
 (= $x122 $x231)))))))
 ))
 (let (($x14 (and $x180 $x176)))
 (let (($x101 (and $x14 $x258)))
 (let (($x80 (and $x101 $x41)))
 (let (($x188 (and $x80 $x105)))
 (let ((?x9 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x76 (= (_ bv0 32) ?x9)))
 (let ((?x71 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x272 (= (_ bv0 32) ?x71)))
 (let ((?x10 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x204 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x45 (and $x64 $x30)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x216 $x45)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x191 $x186)))
 (let (($x157 (not $x236)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (and $x217 $x177)))
 (let (($x43 (and (not $x192) $x157)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x90 $x162)))
 (let (($x120 (not $x66)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x67 $x31)))
 (let (($x138 (and (not $x37) $x120)))
 (let (($x21 (and (and (and (and (and (and $x138 $x43) $x215) $x20) $x72) $x205) $x272)))
 (let (($x59 (and $x21 $x76)))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x60 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x111 (bvadd ?x60 input.dst.llvm-%m2)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x233))))
 (let ((?x160 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x47 (_ bv1 32))))
 (=> $x83 (= ?x160 ?x88)))))))))))
 ))
 (let (($x218 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x164 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x164 (_ bv1 32))))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x47 (_ bv1 32))))
 (= $x83 $x229)))))))
 ))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let (($x159 (= false false)))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x47 (_ bv0 32))))
 (=> $x77 $x159))))))
 ))
 (let (($x200 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x164 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x164 (_ bv0 32))))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x47 (_ bv0 32))))
 (= $x77 $x231)))))))
 ))
 (let (($x198 (and $x200 $x234)))
 (let (($x7 (and $x198 $x218)))
 (let (($x85 (and $x7 $x86)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x223 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x248 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x260 (or false (or false (and (and true (or $x248 $x223)) (or $x225 $x242))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x260)))
 (let (($x116 (and (and (and $x195 $x85) $x59) $x188)))
 (let (($x27 (= $x116 true)))
 (let (($x99 (= $x27 true)))
 (let (($x63 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x283 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x279 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x146 (_ bv1 32))))
 (=> $x262 (= ?x279 ?x283))))))))
 ))
 (let (($x44 (forall ((Lambda5 (_ BitVec 32)) )(let (($x95 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x127 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x146 (_ bv1 32))))
 (= $x262 (bvuge ?x127 (_ bv1 32)))))))))
 ))
 (let (($x109 (forall ((Lambda5 (_ BitVec 32)) )(let (($x95 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x127 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x146 (_ bv0 32))))
 (= $x122 (= ?x127 (_ bv0 32)))))))))
 ))
 (let (($x293 (and $x109 $x176)))
 (let (($x58 (and $x293 $x44)))
 (let (($x145 (and $x58 $x63)))
 (let (($x264 (and $x145 $x99)))
 (let (($x102 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x160 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x47 (_ bv1 32))))
 (=> $x83 (= ?x160 ?x178))))))))
 ))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x18 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x47 (_ bv1 32))))
 (= $x83 (bvuge ?x18 (_ bv1 32)))))))))
 ))
 (let (($x74 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x18 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x47 (_ bv0 32))))
 (= $x77 (= ?x18 (_ bv0 32)))))))))
 ))
 (let (($x34 (and $x74 $x234)))
 (let (($x114 (and $x34 $x98)))
 (let (($x29 (and $x114 $x102)))
 (let (($x96 (and $x29 $x264)))
 (let (($x190 (=> $x96 $x170)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x55 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x19 (= (_ bv0 2) ?x55)))
 (let (($x170 (= $x19 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x38 (concat ?x97 (concat ?x40 ?x24)))))
 (let (($x68 (= input.dst.llvm-%m2 ?x22)))
 (let ((?x202 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x275 (concat ?x267 (concat ?x213 ?x202)))))
 (let (($x181 (= input.dst.llvm-%m1 ?x144)))
 (let (($x84 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x132 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x105 (and (and (and $x132 $x84) $x181) $x68)))
 (let (($x41 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x60 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x17 (bvadd ?x60 input.dst.llvm-%m1)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x174))))
 (let ((?x279 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x146 (_ bv1 32))))
 (=> $x262 (= ?x279 ?x69)))))))))))
 ))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x164 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x164 (_ bv1 32))))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x146 (_ bv1 32))))
 (= $x262 $x229)))))))
 ))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let (($x159 (= false false)))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x146 (_ bv0 32))))
 (=> $x122 $x159))))))
 ))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x164 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x164 (_ bv0 32))))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x146 (_ bv0 32))))
 (= $x122 $x231)))))))
 ))
 (let (($x14 (and $x180 $x176)))
 (let (($x101 (and $x14 $x258)))
 (let (($x80 (and $x101 $x41)))
 (let (($x188 (and $x80 $x105)))
 (let ((?x9 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x76 (= (_ bv0 32) ?x9)))
 (let ((?x71 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x272 (= (_ bv0 32) ?x71)))
 (let ((?x10 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x204 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x45 (and $x64 $x30)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x216 $x45)))
 (let (($x20 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x191 $x186)))
 (let (($x157 (not $x236)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (and $x217 $x177)))
 (let (($x43 (and (not $x192) $x157)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x90 $x162)))
 (let (($x120 (not $x66)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x67 $x31)))
 (let (($x138 (and (not $x37) $x120)))
 (let (($x21 (and (and (and (and (and (and $x138 $x43) $x215) $x20) $x72) $x205) $x272)))
 (let (($x59 (and $x21 $x76)))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x60 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x111 (bvadd ?x60 input.dst.llvm-%m2)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x233))))
 (let ((?x160 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x47 (_ bv1 32))))
 (=> $x83 (= ?x160 ?x88)))))))))))
 ))
 (let (($x218 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x164 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x164 (_ bv1 32))))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x47 (_ bv1 32))))
 (= $x83 $x229)))))))
 ))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let (($x159 (= false false)))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x47 (_ bv0 32))))
 (=> $x77 $x159))))))
 ))
 (let (($x200 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x164 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x164 (_ bv0 32))))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x47 (_ bv0 32))))
 (= $x77 $x231)))))))
 ))
 (let (($x198 (and $x200 $x234)))
 (let (($x7 (and $x198 $x218)))
 (let (($x85 (and $x7 $x86)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x223 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x248 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x260 (or false (or false (and (and true (or $x248 $x223)) (or $x225 $x242))))))
 (let (($x195 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x260)))
 (let (($x116 (and (and (and $x195 $x85) $x59) $x188)))
 (let (($x27 (= $x116 true)))
 (let (($x99 (= $x27 true)))
 (let (($x63 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x283 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x279 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x146 (_ bv1 32))))
 (=> $x262 (= ?x279 ?x283))))))))
 ))
 (let (($x44 (forall ((Lambda5 (_ BitVec 32)) )(let (($x95 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x127 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x146 (_ bv1 32))))
 (= $x262 (bvuge ?x127 (_ bv1 32)))))))))
 ))
 (let (($x109 (forall ((Lambda5 (_ BitVec 32)) )(let (($x95 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x127 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x146 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x146 (_ bv0 32))))
 (= $x122 (= ?x127 (_ bv0 32)))))))))
 ))
 (let (($x293 (and $x109 $x176)))
 (let (($x58 (and $x293 $x44)))
 (let (($x145 (and $x58 $x63)))
 (let (($x264 (and $x145 $x99)))
 (let (($x102 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x160 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x47 (_ bv1 32))))
 (=> $x83 (= ?x160 ?x178))))))))
 ))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x18 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x47 (_ bv1 32))))
 (= $x83 (bvuge ?x18 (_ bv1 32)))))))))
 ))
 (let (($x74 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x18 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x47 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x47 (_ bv0 32))))
 (= $x77 (= ?x18 (_ bv0 32)))))))))
 ))
 (let (($x34 (and $x74 $x234)))
 (let (($x114 (and $x34 $x98)))
 (let (($x29 (and $x114 $x102)))
 (let (($x96 (and $x29 $x264)))
 (let (($x190 (=> $x96 $x170)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x206 (bvadd ?x101 input.dst.llvm-%m2)))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x292))))
 (let ((?x176 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x39 (_ bv1 32))))
 (=> $x127 (= ?x176 ?x150)))))))))))
 ))
 (let (($x216 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x157 (_ bv1 32))))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x39 (_ bv1 32))))
 (= $x127 $x20)))))))
 ))
 (let (($x102 (forall ((Lambda5 (_ BitVec 32)) )(let (($x178 (= false false)))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x39 (_ bv0 32))))
 (=> $x98 $x178))))))
 ))
 (let (($x128 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x157 (_ bv0 32))))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x39 (_ bv0 32))))
 (= $x98 $x43)))))))
 ))
 (let (($x215 (and $x128 $x102)))
 (let (($x64 (and $x215 $x216)))
 (let (($x41 (and $x64 $x117)))
 (let (($x153 (= $x41 true)))
 (let (($x28 (= $x153 true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x278 (concat ?x110 (concat ?x33 ?x230)))))
 (let (($x135 (= input.dst.llvm-%m2 ?x32)))
 (let ((?x276 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x196 (concat ?x222 (concat ?x108 ?x276)))))
 (let (($x235 (= input.dst.llvm-%m1 ?x51)))
 (let (($x257 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x219 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x100 (and (and (and $x219 $x257) $x235) $x135)))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x142 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x209))))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x225 (_ bv1 32))))
 (=> $x164 (= ?x229 ?x148)))))))))))
 ))
 (let (($x237 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x157 (_ bv1 32))))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x225 (_ bv1 32))))
 (= $x164 $x20)))))))
 ))
 (let (($x260 (forall ((Lambda5 (_ BitVec 32)) )(let (($x178 (= false false)))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x225 (_ bv0 32))))
 (=> $x147 $x178))))))
 ))
 (let (($x172 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x157 (_ bv0 32))))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x225 (_ bv0 32))))
 (= $x147 $x43)))))))
 ))
 (let (($x143 (and $x172 $x260)))
 (let (($x247 (and $x143 $x237)))
 (let (($x131 (and $x247 $x107)))
 (let (($x210 (and $x131 $x100)))
 (let ((?x116 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x27 (= (_ bv0 32) ?x116)))
 (let ((?x105 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x188 (= (_ bv0 32) ?x105)))
 (let ((?x22 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x294 $x24)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x97 $x12)))
 (let (($x5 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x213 $x202)))
 (let (($x263 (not $x184)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x214 (and $x270 $x267)))
 (let (($x181 (and (not $x214) $x263)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x132 $x136)))
 (let (($x208 (not $x84)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x80 $x113)))
 (let (($x275 (and (not $x89) $x208)))
 (let (($x19 (and (and (and (and (and (and $x275 $x181) $x16) $x5) $x50) $x68) $x188)))
 (let (($x170 (and $x19 $x27)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x259 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x259)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x259)))
 (let (($x162 (or false (or false (and (and true (or $x88 $x61)) (or $x67 $x31))))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x179 (and (and (and $x120 $x41) $x170) $x210)))
 (let (($x125 (= $x179 true)))
 (let (($x119 (= $x125 true)))
 (let (($x65 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x225 (_ bv1 32))))
 (=> $x164 (= ?x229 ?x7))))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x254 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x225 (_ bv1 32))))
 (= $x164 (bvuge ?x254 (_ bv1 32)))))))))
 ))
 (let (($x251 (forall ((Lambda5 (_ BitVec 32)) )(let (($x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x254 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x225 (_ bv0 32))))
 (= $x147 (= ?x254 (_ bv0 32)))))))))
 ))
 (let (($x195 (and $x251 $x260)))
 (let (($x200 (and $x195 $x91)))
 (let (($x250 (and $x200 $x65)))
 (let (($x185 (and $x250 $x119)))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x266 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x176 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x39 (_ bv1 32))))
 (=> $x127 (= ?x176 ?x266))))))))
 ))
 (let (($x168 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x83 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x39 (_ bv1 32))))
 (= $x127 (bvuge ?x83 (_ bv1 32)))))))))
 ))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x83 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x39 (_ bv0 32))))
 (= $x98 (= ?x83 (_ bv0 32)))))))))
 ))
 (let (($x29 (and $x160 $x102)))
 (let (($x109 (and $x29 $x168)))
 (let (($x93 (and $x109 $x23)))
 (let (($x81 (and $x93 $x185)))
 (let (($x154 (=> $x81 $x28)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x206 (bvadd ?x101 input.dst.llvm-%m2)))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x292))))
 (let ((?x176 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x39 (_ bv1 32))))
 (=> $x127 (= ?x176 ?x150)))))))))))
 ))
 (let (($x216 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x157 (_ bv1 32))))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x39 (_ bv1 32))))
 (= $x127 $x20)))))))
 ))
 (let (($x102 (forall ((Lambda5 (_ BitVec 32)) )(let (($x178 (= false false)))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x39 (_ bv0 32))))
 (=> $x98 $x178))))))
 ))
 (let (($x128 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x157 (_ bv0 32))))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x39 (_ bv0 32))))
 (= $x98 $x43)))))))
 ))
 (let (($x215 (and $x128 $x102)))
 (let (($x64 (and $x215 $x216)))
 (let (($x41 (and $x64 $x117)))
 (let (($x153 (= $x41 true)))
 (let (($x28 (= $x153 true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x32 (concat ?x278 (concat ?x110 (concat ?x33 ?x230)))))
 (let (($x135 (= input.dst.llvm-%m2 ?x32)))
 (let ((?x276 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x196 (concat ?x222 (concat ?x108 ?x276)))))
 (let (($x235 (= input.dst.llvm-%m1 ?x51)))
 (let (($x257 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x219 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x100 (and (and (and $x219 $x257) $x235) $x135)))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x142 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x209))))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x225 (_ bv1 32))))
 (=> $x164 (= ?x229 ?x148)))))))))))
 ))
 (let (($x237 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x157 (_ bv1 32))))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x225 (_ bv1 32))))
 (= $x164 $x20)))))))
 ))
 (let (($x260 (forall ((Lambda5 (_ BitVec 32)) )(let (($x178 (= false false)))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x225 (_ bv0 32))))
 (=> $x147 $x178))))))
 ))
 (let (($x172 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x157 (_ bv0 32))))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x225 (_ bv0 32))))
 (= $x147 $x43)))))))
 ))
 (let (($x143 (and $x172 $x260)))
 (let (($x247 (and $x143 $x237)))
 (let (($x131 (and $x247 $x107)))
 (let (($x210 (and $x131 $x100)))
 (let ((?x116 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x27 (= (_ bv0 32) ?x116)))
 (let ((?x105 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x188 (= (_ bv0 32) ?x105)))
 (let ((?x22 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x294 $x24)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x97 $x12)))
 (let (($x5 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x213 $x202)))
 (let (($x263 (not $x184)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x214 (and $x270 $x267)))
 (let (($x181 (and (not $x214) $x263)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x132 $x136)))
 (let (($x208 (not $x84)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x80 $x113)))
 (let (($x275 (and (not $x89) $x208)))
 (let (($x19 (and (and (and (and (and (and $x275 $x181) $x16) $x5) $x50) $x68) $x188)))
 (let (($x170 (and $x19 $x27)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x259 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x259)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x259)))
 (let (($x162 (or false (or false (and (and true (or $x88 $x61)) (or $x67 $x31))))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x179 (and (and (and $x120 $x41) $x170) $x210)))
 (let (($x125 (= $x179 true)))
 (let (($x119 (= $x125 true)))
 (let (($x65 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x225 (_ bv1 32))))
 (=> $x164 (= ?x229 ?x7))))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x254 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x225 (_ bv1 32))))
 (= $x164 (bvuge ?x254 (_ bv1 32)))))))))
 ))
 (let (($x251 (forall ((Lambda5 (_ BitVec 32)) )(let (($x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x254 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x225 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x225 (_ bv0 32))))
 (= $x147 (= ?x254 (_ bv0 32)))))))))
 ))
 (let (($x195 (and $x251 $x260)))
 (let (($x200 (and $x195 $x91)))
 (let (($x250 (and $x200 $x65)))
 (let (($x185 (and $x250 $x119)))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x266 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x176 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x39 (_ bv1 32))))
 (=> $x127 (= ?x176 ?x266))))))))
 ))
 (let (($x168 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x83 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x39 (_ bv1 32))))
 (= $x127 (bvuge ?x83 (_ bv1 32)))))))))
 ))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x83 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x39 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x39 (_ bv0 32))))
 (= $x98 (= ?x83 (_ bv0 32)))))))))
 ))
 (let (($x29 (and $x160 $x102)))
 (let (($x109 (and $x29 $x168)))
 (let (($x93 (and $x109 $x23)))
 (let (($x81 (and $x93 $x185)))
 (let (($x154 (=> $x81 $x28)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x247 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x247 input.dst.llvm-%m1)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x112))))
 (let ((?x20 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x67 (_ bv1 32))))
 (=> $x157 (= ?x20 ?x141)))))))))))
 ))
 (let (($x140 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x263 (_ bv1 32))))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x67 (_ bv1 32))))
 (= $x157 $x5)))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let (($x266 (= false false)))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x67 (_ bv0 32))))
 (=> $x252 $x266))))))
 ))
 (let (($x238 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x263 (_ bv0 32))))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x67 (_ bv0 32))))
 (= $x252 $x181)))))))
 ))
 (let (($x291 (and $x238 $x162)))
 (let (($x293 (and $x291 $x140)))
 (let (($x165 (and $x293 $x224)))
 (let (($x285 (= $x165 true)))
 (let (($x194 (= $x285 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x14 (concat ?x205 (concat ?x76 ?x180)))))
 (let (($x258 (= input.dst.llvm-%m2 ?x228)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x48 (concat ?x192 (concat ?x138 ?x60)))))
 (let (($x10 (= input.dst.llvm-%m1 ?x72)))
 (let (($x218 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x274 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x130 (and (and (and $x274 $x218) $x10) $x258)))
 (let (($x269 (and $x165 $x130)))
 (let ((?x179 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x125 (= (_ bv0 32) ?x179)))
 (let ((?x100 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x210 (= (_ bv0 32) ?x100)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x33 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x33)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x46 $x230)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x245 (and $x110 $x129)))
 (let (($x87 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (and $x108 $x276)))
 (let (($x183 (not $x271)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (and $x161 $x222)))
 (let (($x235 (and (not $x289) $x183)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x219 $x139)))
 (let (($x268 (not $x257)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x131 $x149)))
 (let (($x196 (and (not $x286) $x268)))
 (let (($x154 (and (and (and (and (and (and $x196 $x235) $x126) $x87) $x245) $x135) $x210)))
 (let (($x261 (and $x154 $x125)))
 (let (($x123 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x247 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x11 (bvadd ?x247 input.dst.llvm-%m2)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x133))))
 (let ((?x260 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x115 (_ bv1 32))))
 (=> $x254 (= ?x260 ?x103)))))))))))
 ))
 (let (($x97 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x263 (_ bv1 32))))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x115 (_ bv1 32))))
 (= $x254 $x5)))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x266 (= false false)))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x115 (_ bv0 32))))
 (=> $x168 $x266))))))
 ))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x263 (_ bv0 32))))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x115 (_ bv0 32))))
 (= $x168 $x181)))))))
 ))
 (let (($x16 (and $x187 $x23)))
 (let (($x294 (and $x16 $x97)))
 (let (($x107 (and $x294 $x123)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x136 (or false (or false (and (and true (or $x150 $x69)) (or $x80 $x113))))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x241 (and (and (and $x208 $x107) $x261) $x269)))
 (let (($x156 (= $x241 true)))
 (let (($x78 (= $x156 true)))
 (let (($x134 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x20 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x67 (_ bv1 32))))
 (=> $x157 (= ?x20 ?x64))))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x86 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x67 (_ bv1 32))))
 (= $x157 (bvuge ?x86 (_ bv1 32)))))))))
 ))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x86 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x67 (_ bv0 32))))
 (= $x252 (= ?x86 (_ bv0 32)))))))))
 ))
 (let (($x120 (and $x37 $x162)))
 (let (($x128 (and $x120 $x73)))
 (let (($x36 (and $x128 $x134)))
 (let (($x256 (and $x36 $x78)))
 (let (($x52 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x290 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x260 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x115 (_ bv1 32))))
 (=> $x254 (= ?x260 ?x290))))))))
 ))
 (let (($x242 (forall ((Lambda5 (_ BitVec 32)) )(let (($x160 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x127 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x115 (_ bv1 32))))
 (= $x254 (bvuge ?x127 (_ bv1 32)))))))))
 ))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let (($x160 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x127 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x115 (_ bv0 32))))
 (= $x168 (= ?x127 (_ bv0 32)))))))))
 ))
 (let (($x93 (and $x176 $x23)))
 (let (($x251 (and $x93 $x242)))
 (let (($x111 (and $x251 $x52)))
 (let (($x199 (and $x111 $x256)))
 (let (($x25 (=> $x199 $x194)))
 (not $x25)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x247 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x247 input.dst.llvm-%m1)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x112))))
 (let ((?x20 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x67 (_ bv1 32))))
 (=> $x157 (= ?x20 ?x141)))))))))))
 ))
 (let (($x140 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x263 (_ bv1 32))))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x67 (_ bv1 32))))
 (= $x157 $x5)))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let (($x266 (= false false)))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x67 (_ bv0 32))))
 (=> $x252 $x266))))))
 ))
 (let (($x238 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x263 (_ bv0 32))))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x67 (_ bv0 32))))
 (= $x252 $x181)))))))
 ))
 (let (($x291 (and $x238 $x162)))
 (let (($x293 (and $x291 $x140)))
 (let (($x165 (and $x293 $x224)))
 (let (($x285 (= $x165 true)))
 (let (($x194 (= $x285 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x14 (concat ?x205 (concat ?x76 ?x180)))))
 (let (($x258 (= input.dst.llvm-%m2 ?x228)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x48 (concat ?x192 (concat ?x138 ?x60)))))
 (let (($x10 (= input.dst.llvm-%m1 ?x72)))
 (let (($x218 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x274 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x130 (and (and (and $x274 $x218) $x10) $x258)))
 (let (($x269 (and $x165 $x130)))
 (let ((?x179 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x125 (= (_ bv0 32) ?x179)))
 (let ((?x100 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x210 (= (_ bv0 32) ?x100)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x33 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x33)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x46 $x230)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x245 (and $x110 $x129)))
 (let (($x87 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x126 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (and $x108 $x276)))
 (let (($x183 (not $x271)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (and $x161 $x222)))
 (let (($x235 (and (not $x289) $x183)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x219 $x139)))
 (let (($x268 (not $x257)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (and $x131 $x149)))
 (let (($x196 (and (not $x286) $x268)))
 (let (($x154 (and (and (and (and (and (and $x196 $x235) $x126) $x87) $x245) $x135) $x210)))
 (let (($x261 (and $x154 $x125)))
 (let (($x123 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x247 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x11 (bvadd ?x247 input.dst.llvm-%m2)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x133))))
 (let ((?x260 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x115 (_ bv1 32))))
 (=> $x254 (= ?x260 ?x103)))))))))))
 ))
 (let (($x97 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x263 (_ bv1 32))))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x115 (_ bv1 32))))
 (= $x254 $x5)))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x266 (= false false)))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x115 (_ bv0 32))))
 (=> $x168 $x266))))))
 ))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (= ?x263 (_ bv0 32))))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x115 (_ bv0 32))))
 (= $x168 $x181)))))))
 ))
 (let (($x16 (and $x187 $x23)))
 (let (($x294 (and $x16 $x97)))
 (let (($x107 (and $x294 $x123)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x136 (or false (or false (and (and true (or $x150 $x69)) (or $x80 $x113))))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x241 (and (and (and $x208 $x107) $x261) $x269)))
 (let (($x156 (= $x241 true)))
 (let (($x78 (= $x156 true)))
 (let (($x134 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x20 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x67 (_ bv1 32))))
 (=> $x157 (= ?x20 ?x64))))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x86 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x67 (_ bv1 32))))
 (= $x157 (bvuge ?x86 (_ bv1 32)))))))))
 ))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x86 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x67 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x67 (_ bv0 32))))
 (= $x252 (= ?x86 (_ bv0 32)))))))))
 ))
 (let (($x120 (and $x37 $x162)))
 (let (($x128 (and $x120 $x73)))
 (let (($x36 (and $x128 $x134)))
 (let (($x256 (and $x36 $x78)))
 (let (($x52 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x290 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x260 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x115 (_ bv1 32))))
 (=> $x254 (= ?x260 ?x290))))))))
 ))
 (let (($x242 (forall ((Lambda5 (_ BitVec 32)) )(let (($x160 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x127 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x115 (_ bv1 32))))
 (= $x254 (bvuge ?x127 (_ bv1 32)))))))))
 ))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let (($x160 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x127 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x115 (ite $x232 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x115 (_ bv0 32))))
 (= $x168 (= ?x127 (_ bv0 32)))))))))
 ))
 (let (($x93 (and $x176 $x23)))
 (let (($x251 (and $x93 $x242)))
 (let (($x111 (and $x251 $x52)))
 (let (($x199 (and $x111 $x256)))
 (let (($x25 (=> $x199 $x194)))
 (not $x25)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x34 (= false true)))
 (let (($x146 (= $x34 true)))
 (let ((?x172 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x143 (concat ?x68 (concat ?x27 ?x172)))))
 (let (($x237 (= input.dst.llvm-%m2 ?x35)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x38 (concat ?x214 (concat ?x275 ?x101)))))
 (let (($x22 (= input.dst.llvm-%m1 ?x50)))
 (let (($x216 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x191 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x273 (and (and (and $x191 $x216) $x22) $x237)))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x164 (bvadd ?x293 input.dst.llvm-%m1)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x54))))
 (let ((?x5 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x80 (_ bv1 32))))
 (=> $x263 (= ?x5 ?x244)))))))))))
 ))
 (let (($x243 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x183 (_ bv1 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x80 (_ bv1 32))))
 (= $x263 $x87)))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x80 (_ bv0 32))))
 (=> $x175 $x290))))))
 ))
 (let (($x104 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x183 (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x80 (_ bv0 32))))
 (= $x175 $x235)))))))
 ))
 (let (($x239 (and $x104 $x136)))
 (let (($x195 (and $x239 $x243)))
 (let (($x158 (and $x195 $x62)))
 (let (($x94 (and $x158 $x273)))
 (let ((?x241 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x156 (= (_ bv0 32) ?x241)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x269 (= (_ bv0 32) ?x130)))
 (let ((?x228 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x228)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x76)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x9 $x180)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x205 $x26)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x138 $x60)))
 (let (($x201 (not $x217)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x177 $x192)))
 (let (($x10 (and (not $x197) $x201)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x274 $x198)))
 (let (($x190 (not $x218)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x165 $x287)))
 (let (($x48 (and (not $x155) $x190)))
 (let (($x25 (and (and (and (and (and (and $x48 $x10) $x59) $x71) $x272) $x258) $x269)))
 (let (($x106 (and $x25 $x156)))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x159 (bvadd ?x293 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x248))))
 (let ((?x162 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x246 (_ bv1 32))))
 (=> $x86 (= ?x162 ?x63)))))))))))
 ))
 (let (($x110 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x183 (_ bv1 32))))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x246 (_ bv1 32))))
 (= $x86 $x87)))))))
 ))
 (let (($x52 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x246 (_ bv0 32))))
 (=> $x242 $x290))))))
 ))
 (let (($x207 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x183 (_ bv0 32))))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x246 (_ bv0 32))))
 (= $x242 $x235)))))))
 ))
 (let (($x126 (and $x207 $x52)))
 (let (($x46 (and $x126 $x110)))
 (let (($x224 (and $x46 $x223)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x139 (or false (or false (and (and true (or $x103 $x148)) (or $x131 $x149))))))
 (let (($x268 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x139)))
 (let (($x234 (and (and (and $x268 $x224) $x106) $x94)))
 (let (($x18 (= $x234 true)))
 (let (($x8 (= $x18 true)))
 (let (($x173 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x294 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x5 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x80 (_ bv1 32))))
 (=> $x263 (= ?x5 ?x294))))))))
 ))
 (let (($x99 (forall ((Lambda5 (_ BitVec 32)) )(let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x117 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x80 (_ bv1 32))))
 (= $x263 (bvuge ?x117 (_ bv1 32)))))))))
 ))
 (let (($x89 (forall ((Lambda5 (_ BitVec 32)) )(let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x117 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x80 (_ bv0 32))))
 (= $x175 (= ?x117 (_ bv0 32)))))))))
 ))
 (let (($x208 (and $x89 $x136)))
 (let (($x187 (and $x208 $x99)))
 (let (($x57 (and $x187 $x173)))
 (let (($x121 (and $x57 $x8)))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x236 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x162 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x246 (_ bv1 32))))
 (=> $x86 (= ?x162 ?x236))))))))
 ))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let (($x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x254 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x246 (_ bv1 32))))
 (= $x86 (bvuge ?x254 (_ bv1 32)))))))))
 ))
 (let (($x260 (forall ((Lambda5 (_ BitVec 32)) )(let (($x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x254 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x246 (_ bv0 32))))
 (= $x242 (= ?x254 (_ bv0 32)))))))))
 ))
 (let (($x111 (and $x260 $x52)))
 (let (($x37 (and $x111 $x31)))
 (let (($x206 (and $x37 $x75)))
 (let (($x56 (and $x206 $x121)))
 (let (($x122 (=> $x56 $x146)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x34 (= false true)))
 (let (($x146 (= $x34 true)))
 (let ((?x172 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x143 (concat ?x68 (concat ?x27 ?x172)))))
 (let (($x237 (= input.dst.llvm-%m2 ?x35)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x38 (concat ?x214 (concat ?x275 ?x101)))))
 (let (($x22 (= input.dst.llvm-%m1 ?x50)))
 (let (($x216 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x191 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x273 (and (and (and $x191 $x216) $x22) $x237)))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x164 (bvadd ?x293 input.dst.llvm-%m1)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x54))))
 (let ((?x5 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x80 (_ bv1 32))))
 (=> $x263 (= ?x5 ?x244)))))))))))
 ))
 (let (($x243 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x183 (_ bv1 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x80 (_ bv1 32))))
 (= $x263 $x87)))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x80 (_ bv0 32))))
 (=> $x175 $x290))))))
 ))
 (let (($x104 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x183 (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x80 (_ bv0 32))))
 (= $x175 $x235)))))))
 ))
 (let (($x239 (and $x104 $x136)))
 (let (($x195 (and $x239 $x243)))
 (let (($x158 (and $x195 $x62)))
 (let (($x94 (and $x158 $x273)))
 (let ((?x241 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x156 (= (_ bv0 32) ?x241)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x269 (= (_ bv0 32) ?x130)))
 (let ((?x228 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x228)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x76)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x9 $x180)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x205 $x26)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x138 $x60)))
 (let (($x201 (not $x217)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x177 $x192)))
 (let (($x10 (and (not $x197) $x201)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x274 $x198)))
 (let (($x190 (not $x218)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x165 $x287)))
 (let (($x48 (and (not $x155) $x190)))
 (let (($x25 (and (and (and (and (and (and $x48 $x10) $x59) $x71) $x272) $x258) $x269)))
 (let (($x106 (and $x25 $x156)))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x159 (bvadd ?x293 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x248))))
 (let ((?x162 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x246 (_ bv1 32))))
 (=> $x86 (= ?x162 ?x63)))))))))))
 ))
 (let (($x110 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x183 (_ bv1 32))))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x246 (_ bv1 32))))
 (= $x86 $x87)))))))
 ))
 (let (($x52 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x246 (_ bv0 32))))
 (=> $x242 $x290))))))
 ))
 (let (($x207 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x183 (_ bv0 32))))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x246 (_ bv0 32))))
 (= $x242 $x235)))))))
 ))
 (let (($x126 (and $x207 $x52)))
 (let (($x46 (and $x126 $x110)))
 (let (($x224 (and $x46 $x223)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x139 (or false (or false (and (and true (or $x103 $x148)) (or $x131 $x149))))))
 (let (($x268 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x139)))
 (let (($x234 (and (and (and $x268 $x224) $x106) $x94)))
 (let (($x18 (= $x234 true)))
 (let (($x8 (= $x18 true)))
 (let (($x173 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x294 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x5 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x80 (_ bv1 32))))
 (=> $x263 (= ?x5 ?x294))))))))
 ))
 (let (($x99 (forall ((Lambda5 (_ BitVec 32)) )(let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x117 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x80 (_ bv1 32))))
 (= $x263 (bvuge ?x117 (_ bv1 32)))))))))
 ))
 (let (($x89 (forall ((Lambda5 (_ BitVec 32)) )(let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x117 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (= ?x80 (_ bv0 32))))
 (= $x175 (= ?x117 (_ bv0 32)))))))))
 ))
 (let (($x208 (and $x89 $x136)))
 (let (($x187 (and $x208 $x99)))
 (let (($x57 (and $x187 $x173)))
 (let (($x121 (and $x57 $x8)))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x236 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x162 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x246 (_ bv1 32))))
 (=> $x86 (= ?x162 ?x236))))))))
 ))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let (($x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x254 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x246 (_ bv1 32))))
 (= $x86 (bvuge ?x254 (_ bv1 32)))))))))
 ))
 (let (($x260 (forall ((Lambda5 (_ BitVec 32)) )(let (($x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x254 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x246 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x246 (_ bv0 32))))
 (= $x242 (= ?x254 (_ bv0 32)))))))))
 ))
 (let (($x111 (and $x260 $x52)))
 (let (($x37 (and $x111 $x31)))
 (let (($x206 (and $x37 $x75)))
 (let (($x56 (and $x206 $x121)))
 (let (($x122 (=> $x56 $x146)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000100c)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000100f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000100c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000100f)
                                      (k!13 #x0000100e)
                                      (k!13 #x0000100d)
                                      (k!13 #x0000100c)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000100f)
                                      (k!13 #x0000100e)
                                      (k!13 #x0000100d)
                                      (k!13 #x0000100c)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000100f)
                                      (k!13 #x0000100e)
                                      (k!13 #x0000100d)
                                      (k!13 #x0000100c)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000100f)
                                      (k!13 #x0000100e)
                                      (k!13 #x0000100d)
                                      (k!13 #x0000100c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa8aee9fc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x755582d8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7eb9bf00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xf77fd900)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x755582db)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa8aee9ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x755582d8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa8aee9fc)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa8aee9fd) #xbf
    (ite (= x!0 #x755582db) #xf7
    (ite (= x!0 #xa8aee9ff) #x7e
    (ite (= x!0 #xa8aee9fe) #xb9
    (ite (= x!0 #x755582da) #x7f
    (ite (= x!0 #x755582d9) #xd9
      #x00)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x755582db)
                                      (k!13 #x755582da)
                                      (k!13 #x755582d9)
                                      (k!13 #x755582d8)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x755582db)
                                      (k!13 #x755582da)
                                      (k!13 #x755582d9)
                                      (k!13 #x755582d8)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x755582db)
                                      (k!13 #x755582da)
                                      (k!13 #x755582d9)
                                      (k!13 #x755582d8)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x755582db)
                                      (k!13 #x755582da)
                                      (k!13 #x755582d9)
                                      (k!13 #x755582d8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xa8aee9ff)
                                      (k!13 #xa8aee9fe)
                                      (k!13 #xa8aee9fd)
                                      (k!13 #xa8aee9fc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xa8aee9ff)
                                      (k!13 #xa8aee9fe)
                                      (k!13 #xa8aee9fd)
                                      (k!13 #xa8aee9fc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xa8aee9ff)
                                      (k!13 #xa8aee9fe)
                                      (k!13 #xa8aee9fd)
                                      (k!13 #xa8aee9fc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xa8aee9ff)
                                      (k!13 #xa8aee9fe)
                                      (k!13 #xa8aee9fd)
                                      (k!13 #xa8aee9fc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x125 (= true false)))
 (let (($x28 (= $x125 true)))
 (let ((?x12 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x247 (= (_ bv0 32) ?x12)))
 (let ((?x16 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x97 (= (_ bv0 32) ?x16)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x69 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x69)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x226 (and $x292 $x49)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x202 (and $x17 $x226)))
 (let (($x84 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x157 $x73)))
 (let (($x203 (not $x128)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x67 $x252)))
 (let (($x150 (and (not $x90) $x203)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x109 $x283)))
 (let (($x93 (not $x23)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x94 $x234)))
 (let (($x250 (and (not $x95) $x93)))
 (let (($x51 (and (and (and (and (and (and $x250 $x150) $x134) $x84) $x202) $x213) $x97)))
 (let (($x185 (and $x51 $x247)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x43 (or false (or false (and (and true (or $x146 $x122)) (or $x230 $x115))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x278 (and $x127 $x185)))
 (let (($x245 (= $x278 true)))
 (let (($x32 (= $x245 true)))
 (let ((?x55 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x188 (= (_ bv0 2) ?x55)))
 (let (($x35 (= $x188 true)))
 (let (($x105 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x285 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x38 (bvadd ?x285 input.dst.llvm-%m2)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x275))))
 (let ((?x132 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x259 (_ bv1 32))))
 (=> $x163 (= ?x132 ?x30)))))))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x124 (_ bv1 32))))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x259 (_ bv1 32))))
 (= $x163 $x218)))))))
 ))
 (let (($x64 (forall ((Lambda5 (_ BitVec 32)) )(let (($x162 (= false false)))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x259 (_ bv0 32))))
 (=> $x85 $x162))))))
 ))
 (let (($x88 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x259 (_ bv0 32))))
 (= $x85 $x165)))))))
 ))
 (let (($x204 (and $x88 $x64)))
 (let (($x54 (and $x204 $x91)))
 (let (($x68 (and $x54 $x105)))
 (let (($x116 (= $x68 true)))
 (let (($x27 (= $x116 true)))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x285 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x228 (bvadd ?x285 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x269))))
 (let ((?x126 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x107 (_ bv1 32))))
 (=> $x271 (= ?x126 ?x21)))))))))))
 ))
 (let (($x48 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x124 (_ bv1 32))))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x107 (_ bv1 32))))
 (= $x271 $x218)))))))
 ))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let (($x162 (= false false)))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x107 (_ bv0 32))))
 (=> $x131 $x162))))))
 ))
 (let (($x155 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x107 (_ bv0 32))))
 (= $x131 $x165)))))))
 ))
 (let (($x169 (and $x155 $x219)))
 (let (($x177 (and $x169 $x48)))
 (let (($x243 (and $x177 $x39)))
 (let (($x195 (= $x243 true)))
 (let (($x178 (= $x195 true)))
 (let ((?x154 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x151 (= (_ bv0 2) ?x154)))
 (let (($x58 (= $x151 true)))
 (let (($x164 (and $x58 $x178)))
 (let (($x172 (and $x164 $x27)))
 (let (($x237 (and $x172 $x35)))
 (let (($x92 (and $x237 $x32)))
 (let (($x159 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x126 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x107 (_ bv1 32))))
 (=> $x271 (= ?x126 ?x110))))))))
 ))
 (let (($x235 (forall ((Lambda5 (_ BitVec 32)) )(let (($x142 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x182 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x107 (_ bv1 32))))
 (= $x271 (bvuge ?x182 (_ bv1 32)))))))))
 ))
 (let (($x149 (forall ((Lambda5 (_ BitVec 32)) )(let (($x142 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x182 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x107 (_ bv0 32))))
 (= $x131 (= ?x182 (_ bv0 32)))))))))
 ))
 (let (($x139 (and $x149 $x219)))
 (let (($x119 (and $x139 $x235)))
 (let (($x221 (and $x119 $x159)))
 (let (($x238 (and $x221 $x92)))
 (let (($x294 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x132 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x259 (_ bv1 32))))
 (=> $x163 (= ?x132 ?x263))))))))
 ))
 (let (($x41 (forall ((Lambda5 (_ BitVec 32)) )(let (($x251 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x111 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x259 (_ bv1 32))))
 (= $x163 (bvuge ?x111 (_ bv1 32)))))))))
 ))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let (($x251 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x111 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x259 (_ bv0 32))))
 (= $x85 (= ?x111 (_ bv0 32)))))))))
 ))
 (let (($x75 (and $x37 $x64)))
 (let (($x113 (and $x75 $x41)))
 (let (($x70 (and $x113 $x294)))
 (let (($x179 (and $x70 $x238)))
 (let (($x100 (=> $x179 $x28)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x125 (= true false)))
 (let (($x28 (= $x125 true)))
 (let ((?x12 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x247 (= (_ bv0 32) ?x12)))
 (let ((?x16 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x97 (= (_ bv0 32) ?x16)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x69 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x69)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x226 (and $x292 $x49)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x202 (and $x17 $x226)))
 (let (($x84 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x157 $x73)))
 (let (($x203 (not $x128)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x67 $x252)))
 (let (($x150 (and (not $x90) $x203)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x109 $x283)))
 (let (($x93 (not $x23)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x94 $x234)))
 (let (($x250 (and (not $x95) $x93)))
 (let (($x51 (and (and (and (and (and (and $x250 $x150) $x134) $x84) $x202) $x213) $x97)))
 (let (($x185 (and $x51 $x247)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x43 (or false (or false (and (and true (or $x146 $x122)) (or $x230 $x115))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x278 (and $x127 $x185)))
 (let (($x245 (= $x278 true)))
 (let (($x32 (= $x245 true)))
 (let ((?x55 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x188 (= (_ bv0 2) ?x55)))
 (let (($x35 (= $x188 true)))
 (let (($x105 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x285 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x38 (bvadd ?x285 input.dst.llvm-%m2)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x275))))
 (let ((?x132 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x259 (_ bv1 32))))
 (=> $x163 (= ?x132 ?x30)))))))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x124 (_ bv1 32))))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x259 (_ bv1 32))))
 (= $x163 $x218)))))))
 ))
 (let (($x64 (forall ((Lambda5 (_ BitVec 32)) )(let (($x162 (= false false)))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x259 (_ bv0 32))))
 (=> $x85 $x162))))))
 ))
 (let (($x88 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x259 (_ bv0 32))))
 (= $x85 $x165)))))))
 ))
 (let (($x204 (and $x88 $x64)))
 (let (($x54 (and $x204 $x91)))
 (let (($x68 (and $x54 $x105)))
 (let (($x116 (= $x68 true)))
 (let (($x27 (= $x116 true)))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x285 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x228 (bvadd ?x285 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x269))))
 (let ((?x126 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x107 (_ bv1 32))))
 (=> $x271 (= ?x126 ?x21)))))))))))
 ))
 (let (($x48 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x124 (_ bv1 32))))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x107 (_ bv1 32))))
 (= $x271 $x218)))))))
 ))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let (($x162 (= false false)))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x107 (_ bv0 32))))
 (=> $x131 $x162))))))
 ))
 (let (($x155 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x165 (= ?x124 (_ bv0 32))))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x107 (_ bv0 32))))
 (= $x131 $x165)))))))
 ))
 (let (($x169 (and $x155 $x219)))
 (let (($x177 (and $x169 $x48)))
 (let (($x243 (and $x177 $x39)))
 (let (($x195 (= $x243 true)))
 (let (($x178 (= $x195 true)))
 (let ((?x154 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x151 (= (_ bv0 2) ?x154)))
 (let (($x58 (= $x151 true)))
 (let (($x164 (and $x58 $x178)))
 (let (($x172 (and $x164 $x27)))
 (let (($x237 (and $x172 $x35)))
 (let (($x92 (and $x237 $x32)))
 (let (($x159 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x126 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x107 (_ bv1 32))))
 (=> $x271 (= ?x126 ?x110))))))))
 ))
 (let (($x235 (forall ((Lambda5 (_ BitVec 32)) )(let (($x142 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x182 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x107 (_ bv1 32))))
 (= $x271 (bvuge ?x182 (_ bv1 32)))))))))
 ))
 (let (($x149 (forall ((Lambda5 (_ BitVec 32)) )(let (($x142 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x182 (ite $x142 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x107 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x107 (_ bv0 32))))
 (= $x131 (= ?x182 (_ bv0 32)))))))))
 ))
 (let (($x139 (and $x149 $x219)))
 (let (($x119 (and $x139 $x235)))
 (let (($x221 (and $x119 $x159)))
 (let (($x238 (and $x221 $x92)))
 (let (($x294 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x132 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x259 (_ bv1 32))))
 (=> $x163 (= ?x132 ?x263))))))))
 ))
 (let (($x41 (forall ((Lambda5 (_ BitVec 32)) )(let (($x251 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x111 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x259 (_ bv1 32))))
 (= $x163 (bvuge ?x111 (_ bv1 32)))))))))
 ))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let (($x251 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x111 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x259 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x259 (_ bv0 32))))
 (= $x85 (= ?x111 (_ bv0 32)))))))))
 ))
 (let (($x75 (and $x37 $x64)))
 (let (($x113 (and $x75 $x41)))
 (let (($x70 (and $x113 $x294)))
 (let (($x179 (and $x70 $x238)))
 (let (($x100 (=> $x179 $x28)))
 (not $x100)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xcce5eacc)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x12931aa8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x12931aab)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xcce5eacf)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x12931aa8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xcce5eacc)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000600)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010204)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010207)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000603)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010204)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000600)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x174 (= false true)))
 (let (($x24 (= $x174 true)))
 (let ((?x158 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x186 (= (_ bv0 32) ?x158)))
 (let ((?x191 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x215 (= (_ bv0 32) ?x191)))
 (let ((?x200 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x180 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (and $x199 $x26)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x59 $x272)))
 (let (($x10 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x198 $x60)))
 (let (($x9 (not $x201)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x63 $x141)))
 (let (($x14 (and (not $x274) $x9)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x33 $x129)))
 (let (($x262 (not $x220)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x80 $x89)))
 (let (($x281 (and (not $x81) $x262)))
 (let (($x216 (and (and (and (and (and (and $x281 $x14) $x78) $x10) $x288) $x65) $x215)))
 (let (($x265 (and $x216 $x186)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x276 (or false (or false (and (and true (or $x167 $x46)) (or $x103 $x133))))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x276)))
 (let (($x264 (and $x207 $x265)))
 (let (($x210 (= $x264 true)))
 (let (($x261 (= $x210 true)))
 (let (($x290 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x254 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x7 (and $x254 $x290)))
 (let (($x52 (= $x7 true)))
 (let (($x236 (= $x52 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x136 (= (_ bv0 2) ?x98)))
 (let (($x260 (= $x136 true)))
 (let (($x135 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x266 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x51 (bvadd ?x266 input.dst.llvm-%m2)))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x278))))
 (let ((?x219 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x31 (_ bv1 32))))
 (=> $x182 (= ?x219 ?x125)))))))))))
 ))
 (let (($x193 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x211 (_ bv1 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x31 (_ bv1 32))))
 (= $x182 $x105)))))))
 ))
 (let (($x294 (forall ((Lambda5 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x31 (_ bv0 32))))
 (=> $x242 $x263))))))
 ))
 (let (($x6 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x211 (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x31 (_ bv0 32))))
 (= $x242 $x267)))))))
 ))
 (let (($x40 (and $x6 $x294)))
 (let (($x84 (and $x40 $x193)))
 (let (($x197 (and $x84 $x135)))
 (let (($x273 (= $x197 true)))
 (let (($x72 (= $x273 true)))
 (let (($x90 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x266 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x43 (bvadd ?x266 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x95))))
 (let ((?x241 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x287 (_ bv1 32))))
 (=> $x205 (= ?x241 ?x250)))))))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x211 (_ bv1 32))))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x287 (_ bv1 32))))
 (= $x205 $x105)))))))
 ))
 (let (($x177 (forall ((Lambda5 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x287 (_ bv0 32))))
 (=> $x155 $x263))))))
 ))
 (let (($x144 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x211 (_ bv0 32))))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x287 (_ bv0 32))))
 (= $x155 $x267)))))))
 ))
 (let (($x30 (and $x144 $x177)))
 (let (($x27 (and $x30 $x116)))
 (let (($x96 (and $x27 $x90)))
 (let (($x157 (= $x96 true)))
 (let (($x73 (= $x157 true)))
 (let ((?x164 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x66 (= (_ bv0 2) ?x164)))
 (let (($x88 (= $x66 true)))
 (let (($x128 (and $x88 $x73)))
 (let (($x160 (and $x128 $x72)))
 (let (($x184 (and $x160 $x260)))
 (let (($x206 (and $x184 $x236)))
 (let (($x291 (and $x206 $x261)))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x258 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x241 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x287 (_ bv1 32))))
 (=> $x205 (= ?x241 ?x258))))))))
 ))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x124 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x287 (_ bv1 32))))
 (= $x205 (bvuge ?x124 (_ bv1 32)))))))))
 ))
 (let (($x218 (forall ((Lambda5 (_ BitVec 32)) )(let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x124 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x287 (_ bv0 32))))
 (= $x155 (= ?x124 (_ bv0 32)))))))))
 ))
 (let (($x192 (and $x218 $x177)))
 (let (($x256 (and $x192 $x227)))
 (let (($x243 (and $x256 $x39)))
 (let (($x47 (and $x243 $x291)))
 (let (($x293 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x219 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x31 (_ bv1 32))))
 (=> $x182 (= ?x219 ?x108))))))))
 ))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let (($x246 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x163 (ite $x246 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x31 (_ bv1 32))))
 (= $x182 (bvuge ?x163 (_ bv1 32)))))))))
 ))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let (($x246 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x163 (ite $x246 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x31 (_ bv0 32))))
 (= $x242 (= ?x163 (_ bv0 32)))))))))
 ))
 (let (($x70 (and $x132 $x294)))
 (let (($x149 (and $x70 $x280)))
 (let (($x153 (and $x149 $x293)))
 (let (($x140 (and $x153 $x47)))
 (let (($x231 (=> $x140 $x24)))
 (not $x231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x174 (= false true)))
 (let (($x24 (= $x174 true)))
 (let ((?x158 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x186 (= (_ bv0 32) ?x158)))
 (let ((?x191 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x215 (= (_ bv0 32) ?x191)))
 (let ((?x200 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x180 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (and $x199 $x26)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x59 $x272)))
 (let (($x10 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x198 $x60)))
 (let (($x9 (not $x201)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x63 $x141)))
 (let (($x14 (and (not $x274) $x9)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x33 $x129)))
 (let (($x262 (not $x220)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x80 $x89)))
 (let (($x281 (and (not $x81) $x262)))
 (let (($x216 (and (and (and (and (and (and $x281 $x14) $x78) $x10) $x288) $x65) $x215)))
 (let (($x265 (and $x216 $x186)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x276 (or false (or false (and (and true (or $x167 $x46)) (or $x103 $x133))))))
 (let (($x207 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x276)))
 (let (($x264 (and $x207 $x265)))
 (let (($x210 (= $x264 true)))
 (let (($x261 (= $x210 true)))
 (let (($x290 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x254 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x7 (and $x254 $x290)))
 (let (($x52 (= $x7 true)))
 (let (($x236 (= $x52 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x136 (= (_ bv0 2) ?x98)))
 (let (($x260 (= $x136 true)))
 (let (($x135 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x266 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x51 (bvadd ?x266 input.dst.llvm-%m2)))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x278))))
 (let ((?x219 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x31 (_ bv1 32))))
 (=> $x182 (= ?x219 ?x125)))))))))))
 ))
 (let (($x193 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x211 (_ bv1 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x31 (_ bv1 32))))
 (= $x182 $x105)))))))
 ))
 (let (($x294 (forall ((Lambda5 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x31 (_ bv0 32))))
 (=> $x242 $x263))))))
 ))
 (let (($x6 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x211 (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x31 (_ bv0 32))))
 (= $x242 $x267)))))))
 ))
 (let (($x40 (and $x6 $x294)))
 (let (($x84 (and $x40 $x193)))
 (let (($x197 (and $x84 $x135)))
 (let (($x273 (= $x197 true)))
 (let (($x72 (= $x273 true)))
 (let (($x90 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x266 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x43 (bvadd ?x266 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x95))))
 (let ((?x241 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x287 (_ bv1 32))))
 (=> $x205 (= ?x241 ?x250)))))))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x211 (_ bv1 32))))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x287 (_ bv1 32))))
 (= $x205 $x105)))))))
 ))
 (let (($x177 (forall ((Lambda5 (_ BitVec 32)) )(let (($x263 (= false false)))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x287 (_ bv0 32))))
 (=> $x155 $x263))))))
 ))
 (let (($x144 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x211 (_ bv0 32))))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x287 (_ bv0 32))))
 (= $x155 $x267)))))))
 ))
 (let (($x30 (and $x144 $x177)))
 (let (($x27 (and $x30 $x116)))
 (let (($x96 (and $x27 $x90)))
 (let (($x157 (= $x96 true)))
 (let (($x73 (= $x157 true)))
 (let ((?x164 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x66 (= (_ bv0 2) ?x164)))
 (let (($x88 (= $x66 true)))
 (let (($x128 (and $x88 $x73)))
 (let (($x160 (and $x128 $x72)))
 (let (($x184 (and $x160 $x260)))
 (let (($x206 (and $x184 $x236)))
 (let (($x291 (and $x206 $x261)))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x258 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x241 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x287 (_ bv1 32))))
 (=> $x205 (= ?x241 ?x258))))))))
 ))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x124 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x287 (_ bv1 32))))
 (= $x205 (bvuge ?x124 (_ bv1 32)))))))))
 ))
 (let (($x218 (forall ((Lambda5 (_ BitVec 32)) )(let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x124 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x287 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x287 (_ bv0 32))))
 (= $x155 (= ?x124 (_ bv0 32)))))))))
 ))
 (let (($x192 (and $x218 $x177)))
 (let (($x256 (and $x192 $x227)))
 (let (($x243 (and $x256 $x39)))
 (let (($x47 (and $x243 $x291)))
 (let (($x293 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x219 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x31 (_ bv1 32))))
 (=> $x182 (= ?x219 ?x108))))))))
 ))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let (($x246 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x163 (ite $x246 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x31 (_ bv1 32))))
 (= $x182 (bvuge ?x163 (_ bv1 32)))))))))
 ))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let (($x246 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x163 (ite $x246 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x31 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (= ?x31 (_ bv0 32))))
 (= $x242 (= ?x163 (_ bv0 32)))))))))
 ))
 (let (($x70 (and $x132 $x294)))
 (let (($x149 (and $x70 $x280)))
 (let (($x153 (and $x149 $x293)))
 (let (($x140 (and $x153 $x47)))
 (let (($x231 (=> $x140 $x24)))
 (not $x231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6698c2c8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe76b4edc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe76b4edf)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6698c2cb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe76b4edc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6698c2c8)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00048800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00048803)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00048800)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x329 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x15 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_0 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x16 (bvadd ?x209 ?x15)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x299))))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (=> $x43 (= ?x229 ?x326))))))))))))
 ))
 (let (($x264 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x200 (_ bv1 32))))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (= $x43 $x186)))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let (($x219 (= false false)))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x267 (_ bv0 32))))
 (=> $x275 $x219))))))
 ))
 (let (($x191 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x200 (_ bv0 32))))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x267 (_ bv0 32))))
 (= $x275 $x65)))))))
 ))
 (let (($x215 (and $x191 $x116)))
 (let (($x210 (and $x215 $x264)))
 (let (($x330 (and $x210 $x329)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x202 (= (_ bv0 2) ?x226)))
 (let (($x292 (= $x202 true)))
 (let (($x203 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x8 (bvadd ?x209 input.dst.llvm-%m2)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x166))))
 (let ((?x48 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x142 (_ bv1 32))))
 (=> $x58 (= ?x48 ?x115)))))))))))
 ))
 (let (($x285 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x200 (_ bv1 32))))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x142 (_ bv1 32))))
 (= $x58 $x186)))))))
 ))
 (let (($x110 (forall ((Lambda5 (_ BitVec 32)) )(let (($x219 (= false false)))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x142 (_ bv0 32))))
 (=> $x123 $x219))))))
 ))
 (let (($x249 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x200 (_ bv0 32))))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x142 (_ bv0 32))))
 (= $x123 $x65)))))))
 ))
 (let (($x224 (and $x249 $x110)))
 (let (($x217 (and $x224 $x285)))
 (let (($x134 (and $x217 $x203)))
 (let (($x161 (= $x134 true)))
 (let (($x82 (= $x161 true)))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x259 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x173))))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (=> $x43 (= ?x229 ?x119)))))))))))
 ))
 (let (($x269 (and $x210 $x223)))
 (let (($x159 (= $x269 true)))
 (let (($x112 (= $x159 true)))
 (let (($x14 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x201 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x233 (and $x201 $x14)))
 (let (($x71 (= $x233 true)))
 (let (($x78 (= $x71 true)))
 (let ((?x207 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x80 (= (_ bv0 32) ?x207)))
 (let ((?x268 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x276 (= (_ bv0 32) ?x268)))
 (let ((?x148 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x79 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x257 (and $x11 $x103)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x46 $x257)))
 (let (($x57 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x52 $x236)))
 (let (($x208 (not $x206)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x171 $x290)))
 (let (($x137 (and (not $x7) $x208)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x136 $x260)))
 (let (($x74 (not $x184)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x196 $x193)))
 (let (($x254 (and (not $x98) $x74)))
 (let (($x220 (and (and (and (and (and (and $x254 $x137) $x87) $x57) $x133) $x286) $x276)))
 (let (($x262 (and $x220 $x80)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x245)))
 (let (($x273 (or false (or false (and (and true (or $x32 $x247)) (or $x125 $x28))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x273)))
 (let (($x281 (and $x160 $x262)))
 (let (($x63 (= $x281 true)))
 (let (($x141 (= $x63 true)))
 (let ((?x73 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x128 (= (_ bv0 2) ?x73)))
 (let (($x150 (= $x128 true)))
 (let (($x274 (and $x150 $x141)))
 (let (($x61 (and $x274 $x78)))
 (let (($x154 (and $x61 $x112)))
 (let (($x213 (and $x154 $x82)))
 (let (($x69 (and $x213 $x292)))
 (let (($x252 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x234 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (=> $x43 (= ?x229 ?x234))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x66 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x214 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (= $x43 (bvuge ?x214 (_ bv1 32)))))))))
 ))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let (($x66 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x214 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x267 (_ bv0 32))))
 (= $x275 (= ?x214 (_ bv0 32)))))))))
 ))
 (let (($x27 (and $x30 $x116)))
 (let (($x93 (and $x27 $x23)))
 (let (($x90 (and $x93 $x252)))
 (let (($x17 (and $x90 $x69)))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x48 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x142 (_ bv1 32))))
 (=> $x58 (= ?x48 ?x205))))))))
 ))
 (let (($x165 (forall ((Lambda5 (_ BitVec 32)) )(let (($x251 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x70 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x142 (_ bv1 32))))
 (= $x58 (bvuge ?x70 (_ bv1 32)))))))))
 ))
 (let (($x149 (forall ((Lambda5 (_ BitVec 32)) )(let (($x251 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x70 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x142 (_ bv0 32))))
 (= $x123 (= ?x70 (_ bv0 32)))))))))
 ))
 (let (($x293 (and $x149 $x110)))
 (let (($x169 (and $x293 $x165)))
 (let (($x104 (and $x169 $x258)))
 (let (($x49 (and $x104 $x17)))
 (let (($x333 (=> $x49 $x332)))
 (let (($x334 (not $x333)))
 (let (($x320 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x304 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x305 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x306 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x305)))
 (let (($x308 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x305)))
 (let (($x314 (or false (or false (and (and true (or $x309 $x308)) (or $x306 $x304))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x314) (= (select solver-mem_0 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_0 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x320) $x334)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x329 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x15 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_0 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x16 (bvadd ?x209 ?x15)))
 (let ((?x299 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x299))))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (=> $x43 (= ?x229 ?x326))))))))))))
 ))
 (let (($x264 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x200 (_ bv1 32))))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (= $x43 $x186)))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let (($x219 (= false false)))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x267 (_ bv0 32))))
 (=> $x275 $x219))))))
 ))
 (let (($x191 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x200 (_ bv0 32))))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x267 (_ bv0 32))))
 (= $x275 $x65)))))))
 ))
 (let (($x215 (and $x191 $x116)))
 (let (($x210 (and $x215 $x264)))
 (let (($x330 (and $x210 $x329)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x202 (= (_ bv0 2) ?x226)))
 (let (($x292 (= $x202 true)))
 (let (($x203 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x8 (bvadd ?x209 input.dst.llvm-%m2)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x166))))
 (let ((?x48 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x142 (_ bv1 32))))
 (=> $x58 (= ?x48 ?x115)))))))))))
 ))
 (let (($x285 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x200 (_ bv1 32))))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x142 (_ bv1 32))))
 (= $x58 $x186)))))))
 ))
 (let (($x110 (forall ((Lambda5 (_ BitVec 32)) )(let (($x219 (= false false)))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x142 (_ bv0 32))))
 (=> $x123 $x219))))))
 ))
 (let (($x249 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x200 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x200 (_ bv0 32))))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x142 (_ bv0 32))))
 (= $x123 $x65)))))))
 ))
 (let (($x224 (and $x249 $x110)))
 (let (($x217 (and $x224 $x285)))
 (let (($x134 (and $x217 $x203)))
 (let (($x161 (= $x134 true)))
 (let (($x82 (= $x161 true)))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x259 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x173))))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (=> $x43 (= ?x229 ?x119)))))))))))
 ))
 (let (($x269 (and $x210 $x223)))
 (let (($x159 (= $x269 true)))
 (let (($x112 (= $x159 true)))
 (let (($x14 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x201 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x233 (and $x201 $x14)))
 (let (($x71 (= $x233 true)))
 (let (($x78 (= $x71 true)))
 (let ((?x207 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x80 (= (_ bv0 32) ?x207)))
 (let ((?x268 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x276 (= (_ bv0 32) ?x268)))
 (let ((?x148 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x79 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x257 (and $x11 $x103)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x46 $x257)))
 (let (($x57 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x52 $x236)))
 (let (($x208 (not $x206)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x171 $x290)))
 (let (($x137 (and (not $x7) $x208)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x136 $x260)))
 (let (($x74 (not $x184)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x196 $x193)))
 (let (($x254 (and (not $x98) $x74)))
 (let (($x220 (and (and (and (and (and (and $x254 $x137) $x87) $x57) $x133) $x286) $x276)))
 (let (($x262 (and $x220 $x80)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x245)))
 (let (($x273 (or false (or false (and (and true (or $x32 $x247)) (or $x125 $x28))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x273)))
 (let (($x281 (and $x160 $x262)))
 (let (($x63 (= $x281 true)))
 (let (($x141 (= $x63 true)))
 (let ((?x73 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x128 (= (_ bv0 2) ?x73)))
 (let (($x150 (= $x128 true)))
 (let (($x274 (and $x150 $x141)))
 (let (($x61 (and $x274 $x78)))
 (let (($x154 (and $x61 $x112)))
 (let (($x213 (and $x154 $x82)))
 (let (($x69 (and $x213 $x292)))
 (let (($x252 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x234 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x229 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (=> $x43 (= ?x229 ?x234))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x66 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x214 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x267 (_ bv1 32))))
 (= $x43 (bvuge ?x214 (_ bv1 32)))))))))
 ))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let (($x66 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x214 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x267 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (= ?x267 (_ bv0 32))))
 (= $x275 (= ?x214 (_ bv0 32)))))))))
 ))
 (let (($x27 (and $x30 $x116)))
 (let (($x93 (and $x27 $x23)))
 (let (($x90 (and $x93 $x252)))
 (let (($x17 (and $x90 $x69)))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x48 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x142 (_ bv1 32))))
 (=> $x58 (= ?x48 ?x205))))))))
 ))
 (let (($x165 (forall ((Lambda5 (_ BitVec 32)) )(let (($x251 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x70 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x142 (_ bv1 32))))
 (= $x58 (bvuge ?x70 (_ bv1 32)))))))))
 ))
 (let (($x149 (forall ((Lambda5 (_ BitVec 32)) )(let (($x251 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x70 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x142 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x142 (_ bv0 32))))
 (= $x123 (= ?x70 (_ bv0 32)))))))))
 ))
 (let (($x293 (and $x149 $x110)))
 (let (($x169 (and $x293 $x165)))
 (let (($x104 (and $x169 $x258)))
 (let (($x49 (and $x104 $x17)))
 (let (($x333 (=> $x49 $x332)))
 (let (($x334 (not $x333)))
 (let (($x320 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x304 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x305 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x306 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x305)))
 (let (($x308 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x305)))
 (let (($x314 (or false (or false (and (and true (or $x309 $x308)) (or $x306 $x304))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x314) (= (select solver-mem_0 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_0 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x320) $x334)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000028)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!78))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x88044044)
  (define-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!78))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80828044)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!79))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xffffff60)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80828047)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x88044047)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80828044)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x88044044)
  (define-fun input.spec-%var-m2-1.0.1!84 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!84 (k!82 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x88044045 x!0)
                    (ite (bvule #x88044047 x!0)
                         (ite (bvule #x88044048 x!0) #x88044048 #x88044047)
                         #x88044045)
                    #x88044044)))
    (let ((a!2 (ite (bvule #x80828047 x!0)
                    (ite (bvule #x80828048 x!0)
                         (ite (bvule #x88044044 x!0) a!1 #x80828048)
                         #x80828047)
                    #x80828045)))
    (let ((a!3 (ite (bvule #x00300023 x!0)
                    (ite (bvule #x80828044 x!0)
                         (ite (bvule #x80828045 x!0) a!2 #x80828044)
                         #x00300023)
                    #x00300022)))
    (let ((a!4 (ite (bvule #x00300020 x!0)
                    (ite (bvule #x00300021 x!0)
                         (ite (bvule #x00300022 x!0) a!3 #x00300021)
                         #x00300020)
                    #x000800a3)))
    (let ((a!5 (ite (bvule #x000800a1 x!0)
                    (ite (bvule #x000800a2 x!0)
                         (ite (bvule #x000800a3 x!0) a!4 #x000800a2)
                         #x000800a1)
                    #x000800a0)))
    (let ((a!6 (ite (bvule #x00080002 x!0)
                    (ite (bvule #x00080003 x!0)
                         (ite (bvule #x000800a0 x!0) a!5 #x00080003)
                         #x00080002)
                    #x00080001)))
    (let ((a!7 (ite (bvule #x00030410 x!0)
                    (ite (bvule #x00080000 x!0)
                         (ite (bvule #x00080001 x!0) a!6 #x00080000)
                         #x00030410)
                    #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000003 x!0) a!7 #x00000002)
                #x00000001)
           #x00000000)))))))))
  (define-fun k!78!83 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000800a3) #x00
    (ite (= x!0 #x00080002) #x00
    (ite (= x!0 #x00300023) #x00
    (ite (= x!0 #x000800a2) #x00
    (ite (= x!0 #x80828045) #x00
    (ite (= x!0 #x000800a1) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00300021) #x00
    (ite (= x!0 #x80828044) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00080000) #x00
    (ite (= x!0 #x88044044) #x00
    (ite (= x!0 #x000800a0) #x10
    (ite (= x!0 #x00080003) #x04
    (ite (= x!0 #x80828048) #x02
    (ite (= x!0 #x00300022) #x20
    (ite (= x!0 #x88044045) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x80828047) #x00
    (ite (= x!0 #x00080001) #x00
    (ite (= x!0 #x00300020) #x00
    (ite (= x!0 #x88044047) #x00
    (ite (= x!0 #x00030410) #x01
    (ite (= x!0 #x00000002) #x00
      #x03)))))))))))))))))))))))))
  (define-fun k!79 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!78 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!78!83 (k!80 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000028) #x00000010
    (ite (= x!0 #x00000000) #x04000000
      (concat (k!78 (bvadd #x00080003 (bvmul #x00000004 x!0)))
              (k!78 (bvadd #x00080002 (bvmul #x00000004 x!0)))
              (k!78 (bvadd #x00080001 (bvmul #x00000004 x!0)))
              (k!78 (bvadd #x00080000 (bvmul #x00000004 x!0)))))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!78))
              (= x!3 (_ as-array k!79))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #xffffff60))
      #x002fff80
      #x000800a2))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000028) #x00000000
      (concat (k!78 (bvadd #xffffff63 (bvmul #x00000004 x!0)))
              (k!78 (bvadd #xffffff62 (bvmul #x00000004 x!0)))
              (k!78 (bvadd #xffffff61 (bvmul #x00000004 x!0)))
              (k!78 (bvadd #xffffff60 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!85 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000028))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000028))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!85 (k!81 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000028) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x04000000
    (ite (= x!0 #x00000028) #x00000010
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000028) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!273))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x1e801000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffbd8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x20800000)
  (define-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!272))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1e51f85c)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000005c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!272))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1e51f85f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffffbdb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1e51f85c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffbd8)
  (define-fun k!272 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1e801000) #x10
    (ite (= x!0 #x1e801002) #x04
    (ite (= x!0 #x1ed1f85e) #x80
    (ite (= x!0 #x1e801173) #x80
    (ite (= x!0 #x1e801003) #x02
    (ite (= x!0 #x1e801001) #x80
    (ite (= x!0 #x20800170) #x10
    (ite (= x!0 #x14432414) #x20
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000005c) #x00000010
      (concat (k!272 (bvadd #x20800003 (bvmul #x00000004 x!0)))
              (k!272 (bvadd #x20800002 (bvmul #x00000004 x!0)))
              (k!272 (bvadd #x20800001 (bvmul #x00000004 x!0)))
              (k!272 (bvadd #x20800000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!278 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000005c) true
      false))
  (define-fun k!275 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000005c))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!278 (k!275 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000005c) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun k!273 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14432414) #x9d
      #x00))
  (define-fun input.spec-%var-m2-1.0.1!277 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!276 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!277 (k!276 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000005c) #x00000010
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000005c) #x80000000
    (ite (= x!0 #x00000000) #x02048010
      (concat (k!272 (bvadd #x1e801003 (bvmul #x00000004 x!0)))
              (k!272 (bvadd #x1e801002 (bvmul #x00000004 x!0)))
              (k!272 (bvadd #x1e801001 (bvmul #x00000004 x!0)))
              (k!272 (bvadd #x1e801000 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02048010
    (ite (= x!0 #x0000005c) #x80000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!272))
              (= x!3 (_ as-array k!273))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x20800000))
      #x982ffe95
      #x80000000))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x266 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x161 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x246 (bvadd ?x161 input.dst.llvm-%m2)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x5))))
 (let ((?x90 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (=> $x229 (= ?x90 ?x218)))))))))))
 ))
 (let (($x249 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x119 (_ bv1 32))))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (= $x229 $x154)))))))
 ))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let (($x318 (= false false)))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x214 (_ bv0 32))))
 (=> $x211 $x318))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x119 (_ bv0 32))))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x214 (_ bv0 32))))
 (= $x211 $x44)))))))
 ))
 (let (($x269 (and $x223 $x27)))
 (let (($x224 (and $x269 $x249)))
 (let (($x56 (and $x224 $x266)))
 (let (($x94 (= $x56 true)))
 (let (($x95 (= $x94 true)))
 (let ((?x239 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x195 (= (_ bv0 2) ?x239)))
 (let (($x178 (= $x195 true)))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x161 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x246 (bvadd ?x161 input.dst.llvm-%m2)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x5))))
 (let ((?x251 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x307 (_ bv1 32))))
 (=> $x320 (= ?x251 ?x218)))))))))))
 ))
 (let (($x327 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x119 (_ bv1 32))))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x307 (_ bv1 32))))
 (= $x320 $x154)))))))
 ))
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let (($x318 (= false false)))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x307 (_ bv0 32))))
 (=> $x312 $x318))))))
 ))
 (let (($x97 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x119 (_ bv0 32))))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x307 (_ bv0 32))))
 (= $x312 $x44)))))))
 ))
 (let (($x299 (and $x97 $x261)))
 (let (($x328 (and $x299 $x327)))
 (let (($x243 (and $x328 $x227)))
 (let (($x109 (= $x243 true)))
 (let (($x88 (= $x109 true)))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x161 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x82 (bvadd ?x161 input.dst.llvm-%m1)))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x292))))
 (let ((?x90 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (=> $x229 (= ?x90 ?x289)))))))))))
 ))
 (let (($x324 (and $x224 $x16)))
 (let (($x325 (= $x324 true)))
 (let (($x321 (= $x325 true)))
 (let (($x264 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x215 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x210 (and $x215 $x264)))
 (let (($x47 (= $x210 true)))
 (let (($x209 (= $x47 true)))
 (let ((?x201 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x9 (= (_ bv0 32) ?x201)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x60 (= (_ bv0 32) ?x198)))
 (let ((?x274 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x274)))
 (let ((?x262 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x262)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x207 $x281)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x220 $x63)))
 (let (($x276 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x257 (and $x79 $x103)))
 (let (($x133 (not $x257)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x284 (and $x46 $x11)))
 (let (($x148 (and (not $x284) $x133)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x99 $x87)))
 (let (($x167 (not $x81)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x197 $x273)))
 (let (($x248 (and (not $x89) $x167)))
 (let (($x288 (and (and (and (and (and (and $x248 $x148) $x129) $x276) $x141) $x76) $x60)))
 (let (($x10 (and $x288 $x9)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x206 (or false (or false (and (and true (or $x136 $x260)) (or $x290 $x7))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x206)))
 (let (($x272 (and $x137 $x10)))
 (let (($x62 (= $x272 true)))
 (let (($x200 (= $x62 true)))
 (let ((?x12 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x125 (= (_ bv0 2) ?x12)))
 (let (($x28 (= $x125 true)))
 (let (($x65 (and $x28 $x200)))
 (let (($x259 (and $x65 $x209)))
 (let (($x322 (and $x259 $x321)))
 (let (($x127 (and $x322 $x88)))
 (let (($x164 (and $x127 $x178)))
 (let (($x245 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x73 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x90 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (=> $x229 (= ?x90 ?x73))))))))
 ))
 (let (($x250 (forall ((Lambda5 (_ BitVec 32)) )(let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x275 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (= $x229 (bvuge ?x275 (_ bv1 32)))))))))
 ))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x275 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x214 (_ bv0 32))))
 (= $x211 (= ?x275 (_ bv0 32)))))))))
 ))
 (let (($x43 (and $x30 $x27)))
 (let (($x67 (and $x43 $x250)))
 (let (($x32 (and $x67 $x245)))
 (let (($x270 (and $x32 $x164)))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x280 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x251 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x307 (_ bv1 32))))
 (=> $x320 (= ?x251 ?x280))))))))
 ))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let (($x308 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x92 (ite $x308 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x307 (_ bv1 32))))
 (= $x320 (bvuge ?x92 (_ bv1 32)))))))))
 ))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let (($x308 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x92 (ite $x308 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x307 (_ bv0 32))))
 (= $x312 (= ?x92 (_ bv0 32)))))))))
 ))
 (let (($x302 (and $x314 $x261)))
 (let (($x142 (and $x302 $x31)))
 (let (($x155 (and $x142 $x58)))
 (let (($x189 (and $x155 $x270)))
 (let (($x283 (=> $x189 $x95)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x266 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x161 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x246 (bvadd ?x161 input.dst.llvm-%m2)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x5))))
 (let ((?x90 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (=> $x229 (= ?x90 ?x218)))))))))))
 ))
 (let (($x249 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x119 (_ bv1 32))))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (= $x229 $x154)))))))
 ))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let (($x318 (= false false)))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x214 (_ bv0 32))))
 (=> $x211 $x318))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x119 (_ bv0 32))))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x214 (_ bv0 32))))
 (= $x211 $x44)))))))
 ))
 (let (($x269 (and $x223 $x27)))
 (let (($x224 (and $x269 $x249)))
 (let (($x56 (and $x224 $x266)))
 (let (($x94 (= $x56 true)))
 (let (($x95 (= $x94 true)))
 (let ((?x239 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x195 (= (_ bv0 2) ?x239)))
 (let (($x178 (= $x195 true)))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x161 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x246 (bvadd ?x161 input.dst.llvm-%m2)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x5))))
 (let ((?x251 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x307 (_ bv1 32))))
 (=> $x320 (= ?x251 ?x218)))))))))))
 ))
 (let (($x327 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x119 (_ bv1 32))))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x307 (_ bv1 32))))
 (= $x320 $x154)))))))
 ))
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let (($x318 (= false false)))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x307 (_ bv0 32))))
 (=> $x312 $x318))))))
 ))
 (let (($x97 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x119 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x119 (_ bv0 32))))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x307 (_ bv0 32))))
 (= $x312 $x44)))))))
 ))
 (let (($x299 (and $x97 $x261)))
 (let (($x328 (and $x299 $x327)))
 (let (($x243 (and $x328 $x227)))
 (let (($x109 (= $x243 true)))
 (let (($x88 (= $x109 true)))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x161 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x82 (bvadd ?x161 input.dst.llvm-%m1)))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x292))))
 (let ((?x90 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (=> $x229 (= ?x90 ?x289)))))))))))
 ))
 (let (($x324 (and $x224 $x16)))
 (let (($x325 (= $x324 true)))
 (let (($x321 (= $x325 true)))
 (let (($x264 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x215 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x210 (and $x215 $x264)))
 (let (($x47 (= $x210 true)))
 (let (($x209 (= $x47 true)))
 (let ((?x201 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x9 (= (_ bv0 32) ?x201)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x60 (= (_ bv0 32) ?x198)))
 (let ((?x274 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x274)))
 (let ((?x262 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x262)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x207 $x281)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x220 $x63)))
 (let (($x276 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x257 (and $x79 $x103)))
 (let (($x133 (not $x257)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x284 (and $x46 $x11)))
 (let (($x148 (and (not $x284) $x133)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x99 $x87)))
 (let (($x167 (not $x81)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x197 $x273)))
 (let (($x248 (and (not $x89) $x167)))
 (let (($x288 (and (and (and (and (and (and $x248 $x148) $x129) $x276) $x141) $x76) $x60)))
 (let (($x10 (and $x288 $x9)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x206 (or false (or false (and (and true (or $x136 $x260)) (or $x290 $x7))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x206)))
 (let (($x272 (and $x137 $x10)))
 (let (($x62 (= $x272 true)))
 (let (($x200 (= $x62 true)))
 (let ((?x12 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x125 (= (_ bv0 2) ?x12)))
 (let (($x28 (= $x125 true)))
 (let (($x65 (and $x28 $x200)))
 (let (($x259 (and $x65 $x209)))
 (let (($x322 (and $x259 $x321)))
 (let (($x127 (and $x322 $x88)))
 (let (($x164 (and $x127 $x178)))
 (let (($x245 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x73 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x90 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (=> $x229 (= ?x90 ?x73))))))))
 ))
 (let (($x250 (forall ((Lambda5 (_ BitVec 32)) )(let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x275 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x214 (_ bv1 32))))
 (= $x229 (bvuge ?x275 (_ bv1 32)))))))))
 ))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x275 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x214 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x214 (_ bv0 32))))
 (= $x211 (= ?x275 (_ bv0 32)))))))))
 ))
 (let (($x43 (and $x30 $x27)))
 (let (($x67 (and $x43 $x250)))
 (let (($x32 (and $x67 $x245)))
 (let (($x270 (and $x32 $x164)))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x280 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x251 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x307 (_ bv1 32))))
 (=> $x320 (= ?x251 ?x280))))))))
 ))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let (($x308 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x92 (ite $x308 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x307 (_ bv1 32))))
 (= $x320 (bvuge ?x92 (_ bv1 32)))))))))
 ))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let (($x308 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x92 (ite $x308 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x307 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (= ?x307 (_ bv0 32))))
 (= $x312 (= ?x92 (_ bv0 32)))))))))
 ))
 (let (($x302 (and $x314 $x261)))
 (let (($x142 (and $x302 $x31)))
 (let (($x155 (and $x142 $x58)))
 (let (($x189 (and $x155 $x270)))
 (let (($x283 (=> $x189 $x95)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x9bfadc54)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x64000788)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xaa0106c4)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xaa0106c7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6400078b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xaa0106c4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x64000788)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x9bfadc57) #x01
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!1 (bvmul #x00000004 x!0)))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!5 (k!2 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x01000000
      (concat (k!1 (bvadd #x9bfadc57 (bvmul #x00000004 x!0)))
              (k!1 (bvadd #x9bfadc56 (bvmul #x00000004 x!0)))
              (k!1 (bvadd #x9bfadc55 (bvmul #x00000004 x!0)))
              (k!1 (bvadd #x9bfadc54 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x01000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000026)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00c44020)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0aaaeb04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa366da88)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa366da8b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0aaaeb07)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa366da88)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0aaaeb04)
  (define-fun input.spec-%var-m2-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!18 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000026))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00c440ba) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000026))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000026) #x00040000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00c44023 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00c44022 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00c44021 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00c44020 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000026) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000026) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000026) #x00040000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000026) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x83 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x132 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_1 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x149 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x330 (bvadd ?x149 ?x132)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv1 32))) (select input.dst.llvm-mem ?x330))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv2 32))) ?x85))))
 (let ((?x27 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (=> $x275 (= ?x27 ?x255))))))))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x218 (_ bv1 32))))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (= $x275 $x127)))))))
 ))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let (($x280 (= false false)))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x335 (_ bv0 32))))
 (=> $x31 $x280))))))
 ))
 (let (($x48 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x218 (_ bv0 32))))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x335 (_ bv0 32))))
 (= $x31 $x192)))))))
 ))
 (let (($x205 (and $x48 $x58)))
 (let (($x267 (and $x205 $x39)))
 (let (($x152 (and $x267 $x83)))
 (let (($x102 (= $x152 true)))
 (let (($x118 (= $x102 true)))
 (let ((?x323 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x329 (= (_ bv0 2) ?x323)))
 (let (($x111 (= $x329 true)))
 (let (($x232 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x149 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x187 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x146))))
 (let ((?x27 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (=> $x275 (= ?x27 ?x34)))))))))))
 ))
 (let (($x120 (and $x267 $x232)))
 (let (($x203 (= $x120 true)))
 (let (($x134 (= $x203 true)))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x149 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x242 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x311))))
 (let ((?x99 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x98 (_ bv1 32))))
 (=> $x137 (= ?x99 ?x301)))))))))))
 ))
 (let (($x195 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x218 (_ bv1 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x98 (_ bv1 32))))
 (= $x137 $x127)))))))
 ))
 (let (($x171 (forall ((Lambda5 (_ BitVec 32)) )(let (($x280 (= false false)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (=> $x260 $x280))))))
 ))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x218 (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (= $x260 $x192)))))))
 ))
 (let (($x243 (and $x227 $x171)))
 (let (($x178 (and $x243 $x195)))
 (let (($x126 (and $x178 $x219)))
 (let (($x169 (= $x126 true)))
 (let (($x96 (= $x169 true)))
 (let (($x97 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x322 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x299 (and $x322 $x97)))
 (let (($x326 (= $x299 true)))
 (let (($x327 (= $x326 true)))
 (let ((?x6 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x122 (= (_ bv0 32) ?x6)))
 (let ((?x82 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x40 (= (_ bv0 32) ?x82)))
 (let ((?x217 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x217)))
 (let ((?x240 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x249 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x240)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x269 $x249)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x223 $x224)))
 (let (($x194 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x47 $x209)))
 (let (($x173 (not $x259)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x265 $x264)))
 (let (($x117 (and (not $x210) $x173)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x200 $x65)))
 (let (($x191 (not $x253)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x268 $x276)))
 (let (($x186 (and (not $x62) $x191)))
 (let (($x292 (and (and (and (and (and (and $x186 $x117) $x119) $x194) $x138) $x161) $x40)))
 (let (($x49 (and $x292 $x122)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x262)))
 (let (($x9 (or false (or false (and (and true (or $x281 $x63)) (or $x61 $x198))))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x289 (and $x272 $x49)))
 (let (($x145 (= $x289 true)))
 (let (($x15 (= $x145 true)))
 (let ((?x148 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x14 (= (_ bv0 2) ?x148)))
 (let (($x286 (= $x14 true)))
 (let (($x16 (and $x286 $x15)))
 (let (($x328 (and $x16 $x327)))
 (let (($x258 (and $x328 $x96)))
 (let (($x297 (and $x258 $x134)))
 (let (($x177 (and $x297 $x111)))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x167 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x99 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x98 (_ bv1 32))))
 (=> $x137 (= ?x99 ?x167))))))))
 ))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x98 (_ bv1 32))))
 (= $x137 (bvuge ?x176 (_ bv1 32)))))))))
 ))
 (let (($x74 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (= $x260 (= ?x176 (_ bv0 32)))))))))
 ))
 (let (($x7 (and $x74 $x171)))
 (let (($x89 (and $x7 $x273)))
 (let (($x103 (and $x89 $x79)))
 (let (($x334 (and $x103 $x177)))
 (let (($x51 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x93 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x27 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (=> $x275 (= ?x27 ?x93))))))))
 ))
 (let (($x144 (forall ((Lambda5 (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x320 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (= $x275 (bvuge ?x320 (_ bv1 32)))))))))
 ))
 (let (($x251 (forall ((Lambda5 (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x320 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x335 (_ bv0 32))))
 (= $x31 (= ?x320 (_ bv0 32)))))))))
 ))
 (let (($x155 (and $x251 $x58)))
 (let (($x30 (and $x155 $x144)))
 (let (($x72 (and $x30 $x51)))
 (let (($x336 (and $x72 $x334)))
 (let (($x225 (=> $x336 $x118)))
 (let (($x53 (not $x225)))
 (let (($x38 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x36 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x64 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x91 (or false (or false (and (and true (or $x151 $x64)) (or $x113 $x36))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x91) (= (select solver-mem_1 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_1 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x38) $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x83 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x132 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_1 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x149 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x330 (bvadd ?x149 ?x132)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv1 32))) (select input.dst.llvm-mem ?x330))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x330 (_ bv2 32))) ?x85))))
 (let ((?x27 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (=> $x275 (= ?x27 ?x255))))))))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x218 (_ bv1 32))))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (= $x275 $x127)))))))
 ))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let (($x280 (= false false)))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x335 (_ bv0 32))))
 (=> $x31 $x280))))))
 ))
 (let (($x48 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x218 (_ bv0 32))))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x335 (_ bv0 32))))
 (= $x31 $x192)))))))
 ))
 (let (($x205 (and $x48 $x58)))
 (let (($x267 (and $x205 $x39)))
 (let (($x152 (and $x267 $x83)))
 (let (($x102 (= $x152 true)))
 (let (($x118 (= $x102 true)))
 (let ((?x323 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x329 (= (_ bv0 2) ?x323)))
 (let (($x111 (= $x329 true)))
 (let (($x232 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x149 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x187 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x146))))
 (let ((?x27 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (=> $x275 (= ?x27 ?x34)))))))))))
 ))
 (let (($x120 (and $x267 $x232)))
 (let (($x203 (= $x120 true)))
 (let (($x134 (= $x203 true)))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x149 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x242 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x311))))
 (let ((?x99 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x98 (_ bv1 32))))
 (=> $x137 (= ?x99 ?x301)))))))))))
 ))
 (let (($x195 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x218 (_ bv1 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x98 (_ bv1 32))))
 (= $x137 $x127)))))))
 ))
 (let (($x171 (forall ((Lambda5 (_ BitVec 32)) )(let (($x280 (= false false)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (=> $x260 $x280))))))
 ))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (= ?x218 (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (= $x260 $x192)))))))
 ))
 (let (($x243 (and $x227 $x171)))
 (let (($x178 (and $x243 $x195)))
 (let (($x126 (and $x178 $x219)))
 (let (($x169 (= $x126 true)))
 (let (($x96 (= $x169 true)))
 (let (($x97 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x322 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x299 (and $x322 $x97)))
 (let (($x326 (= $x299 true)))
 (let (($x327 (= $x326 true)))
 (let ((?x6 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x122 (= (_ bv0 32) ?x6)))
 (let ((?x82 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x40 (= (_ bv0 32) ?x82)))
 (let ((?x217 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x217)))
 (let ((?x240 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x249 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x240)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x269 $x249)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x223 $x224)))
 (let (($x194 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x47 $x209)))
 (let (($x173 (not $x259)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x265 $x264)))
 (let (($x117 (and (not $x210) $x173)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x200 $x65)))
 (let (($x191 (not $x253)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x268 $x276)))
 (let (($x186 (and (not $x62) $x191)))
 (let (($x292 (and (and (and (and (and (and $x186 $x117) $x119) $x194) $x138) $x161) $x40)))
 (let (($x49 (and $x292 $x122)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x262)))
 (let (($x9 (or false (or false (and (and true (or $x281 $x63)) (or $x61 $x198))))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x289 (and $x272 $x49)))
 (let (($x145 (= $x289 true)))
 (let (($x15 (= $x145 true)))
 (let ((?x148 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x14 (= (_ bv0 2) ?x148)))
 (let (($x286 (= $x14 true)))
 (let (($x16 (and $x286 $x15)))
 (let (($x328 (and $x16 $x327)))
 (let (($x258 (and $x328 $x96)))
 (let (($x297 (and $x258 $x134)))
 (let (($x177 (and $x297 $x111)))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x167 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x99 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x98 (_ bv1 32))))
 (=> $x137 (= ?x99 ?x167))))))))
 ))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x98 (_ bv1 32))))
 (= $x137 (bvuge ?x176 (_ bv1 32)))))))))
 ))
 (let (($x74 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x98 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (= $x260 (= ?x176 (_ bv0 32)))))))))
 ))
 (let (($x7 (and $x74 $x171)))
 (let (($x89 (and $x7 $x273)))
 (let (($x103 (and $x89 $x79)))
 (let (($x334 (and $x103 $x177)))
 (let (($x51 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x93 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x27 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (=> $x275 (= ?x27 ?x93))))))))
 ))
 (let (($x144 (forall ((Lambda5 (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x320 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x335 (_ bv1 32))))
 (= $x275 (bvuge ?x320 (_ bv1 32)))))))))
 ))
 (let (($x251 (forall ((Lambda5 (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x320 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x335 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x335 (_ bv0 32))))
 (= $x31 (= ?x320 (_ bv0 32)))))))))
 ))
 (let (($x155 (and $x251 $x58)))
 (let (($x30 (and $x155 $x144)))
 (let (($x72 (and $x30 $x51)))
 (let (($x336 (and $x72 $x334)))
 (let (($x225 (=> $x336 $x118)))
 (let (($x53 (not $x225)))
 (let (($x38 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x36 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x64 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x91 (or false (or false (and (and true (or $x151 $x64)) (or $x113 $x36))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x91) (= (select solver-mem_1 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_1 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x38) $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!59))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18448404)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000608c)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000200)
  (define-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!59))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!60))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000608f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18448407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000608c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18448404)
  (define-fun k!63 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!65 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!65 (k!63 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!59!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000203) #x00
    (ite (= x!0 #x00000801) #x00
    (ite (= x!0 #x00000802) #x00
    (ite (= x!0 #x00000202) #x00
    (ite (= x!0 #x18448404) #x00
    (ite (= x!0 #x00000200) #x00
    (ite (= x!0 #x00000201) #x00
    (ite (= x!0 #x0000608c) #x00
    (ite (= x!0 #x18448405) #x00
    (ite (= x!0 #x00000001) #x01
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x0000608d) #x00
    (ite (= x!0 #x4000214a) #x10
    (ite (= x!0 #x0000608f) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00000803) #x40
    (ite (= x!0 #x18448407) #x00
    (ite (= x!0 #x00000804) #x00
    (ite (= x!0 #x00000002) #x00
      #x02))))))))))))))))))))
  (define-fun k!61 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x18448407 x!0)
                    (ite (bvule #x18448408 x!0)
                         (ite (bvule #x4000214a x!0) #x4000214a #x18448408)
                         #x18448407)
                    #x18448405)))
    (let ((a!2 (ite (bvule #x00006090 x!0)
                    (ite (bvule #x18448404 x!0)
                         (ite (bvule #x18448405 x!0) a!1 #x18448404)
                         #x00006090)
                    #x0000608f)))
    (let ((a!3 (ite (bvule #x0000608c x!0)
                    (ite (bvule #x0000608d x!0)
                         (ite (bvule #x0000608f x!0) a!2 #x0000608d)
                         #x0000608c)
                    #x00000804)))
    (let ((a!4 (ite (bvule #x00000802 x!0)
                    (ite (bvule #x00000803 x!0)
                         (ite (bvule #x00000804 x!0) a!3 #x00000803)
                         #x00000802)
                    #x00000801)))
    (let ((a!5 (ite (bvule #x00000202 x!0)
                    (ite (bvule #x00000203 x!0)
                         (ite (bvule #x00000801 x!0) a!4 #x00000203)
                         #x00000202)
                    #x00000201)))
    (let ((a!6 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000200 x!0)
                         (ite (bvule #x00000201 x!0) a!5 #x00000200)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!6 #x00000001)
           #x00000000))))))))
  (define-fun k!59 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!59!66 (k!61 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!59 (bvadd #x00000203 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000202 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000201 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000200 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!64 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!62 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!59))
              (= x!3 (_ as-array k!60))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x00000801
      #x00000804))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!64 (k!62 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (concat (k!59 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!59 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!60 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x341 (= true false)))
 (let (($x342 (= $x341 true)))
 (let ((?x26 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x244 (= (_ bv0 32) ?x26)))
 (let ((?x140 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x180 (= (_ bv0 32) ?x140)))
 (let ((?x131 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x131)))
 (let ((?x18 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x23 $x252)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x212 $x84)))
 (let (($x150 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (and $x317 $x70)))
 (let (($x128 (not $x310)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x266 $x95)))
 (let (($x68 (and (not $x135) $x128)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x285 $x55)))
 (let (($x100 (not $x282)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x125 $x196)))
 (let (($x94 (and (not $x35) $x100)))
 (let (($x199 (and (and (and (and (and (and $x94 $x68) $x188) $x150) $x107) $x20) $x180)))
 (let (($x216 (and $x199 $x244)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x109 (or false (or false (and (and true (or $x236 $x57)) (or $x287 $x294))))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x158 (and $x172 $x216)))
 (let (($x174 (= $x158 true)))
 (let (($x337 (= $x174 true)))
 (let (($x87 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x283 (bvadd ?x138 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x295))))
 (let ((?x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x98 (_ bv1 32))))
 (=> $x273 (= ?x133 ?x41)))))))))))
 ))
 (let (($x163 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x272 (_ bv1 32))))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x98 (_ bv1 32))))
 (= $x273 $x253)))))))
 ))
 (let (($x327 (forall ((Lambda5 (_ BitVec 32)) )(let (($x91 (= false false)))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (=> $x260 $x91))))))
 ))
 (let (($x97 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x272 (_ bv0 32))))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (= $x260 $x268)))))))
 ))
 (let (($x328 (and $x97 $x327)))
 (let (($x153 (and $x328 $x163)))
 (let (($x160 (and $x153 $x87)))
 (let (($x248 (= $x160 true)))
 (let (($x245 (= $x248 true)))
 (let (($x110 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x202 (bvadd ?x138 input.dst.llvm-%m2)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x316))))
 (let ((?x31 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (=> $x204 (= ?x31 ?x300)))))))))))
 ))
 (let (($x186 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x272 (_ bv1 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (= $x204 $x253)))))))
 ))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let (($x91 (= false false)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x36 (_ bv0 32))))
 (=> $x75 $x91))))))
 ))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x272 (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x36 (_ bv0 32))))
 (= $x75 $x268)))))))
 ))
 (let (($x215 (and $x62 $x37)))
 (let (($x265 (and $x215 $x186)))
 (let (($x165 (and $x265 $x110)))
 (let (($x214 (= $x165 true)))
 (let (($x211 (= $x214 true)))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x283 (bvadd ?x138 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x295))))
 (let ((?x79 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (=> $x89 (= ?x79 ?x41)))))))))))
 ))
 (let (($x121 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x272 (_ bv1 32))))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (= $x89 $x253)))))))
 ))
 (let (($x171 (forall ((Lambda5 (_ BitVec 32)) )(let (($x91 (= false false)))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x28 (_ bv0 32))))
 (=> $x176 $x91))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x272 (_ bv0 32))))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x28 (_ bv0 32))))
 (= $x176 $x268)))))))
 ))
 (let (($x267 (and $x39 $x171)))
 (let (($x115 (and $x267 $x121)))
 (let (($x237 (and $x115 $x85)))
 (let (($x255 (= $x237 true)))
 (let (($x114 (= $x255 true)))
 (let ((?x120 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x203 (= (_ bv0 2) ?x120)))
 (let (($x134 (= $x203 true)))
 (let (($x146 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x283 (bvadd ?x138 input.dst.llvm-%m1)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x283))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv2 32))) ?x179)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv3 32))) ?x222)))
 (let ((?x79 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (=> $x89 (= ?x79 ?x182))))))))))))
 ))
 (let (($x230 (and $x115 $x146)))
 (let (($x34 (= $x230 true)))
 (let (($x19 (= $x34 true)))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x283 (bvadd ?x138 input.dst.llvm-%m1)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x283))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv2 32))) ?x179)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv3 32))) ?x222)))
 (let ((?x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x98 (_ bv1 32))))
 (=> $x273 (= ?x133 ?x182))))))))))))
 ))
 (let (($x96 (and $x153 $x169)))
 (let (($x258 (= $x96 true)))
 (let (($x124 (= $x258 true)))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x202 (bvadd ?x138 input.dst.llvm-%m2)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x202))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x202 (_ bv2 32))) ?x82)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x202 (_ bv3 32))) ?x6)))
 (let ((?x31 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (=> $x204 (= ?x31 ?x289))))))))))))
 ))
 (let (($x324 (and $x265 $x16)))
 (let (($x325 (= $x324 true)))
 (let (($x321 (= $x325 true)))
 (let (($x48 (and $x321 $x124)))
 (let (($x45 (and $x48 $x19)))
 (let (($x297 (and $x45 $x134)))
 (let (($x29 (and $x297 $x114)))
 (let (($x116 (and $x29 $x211)))
 (let (($x185 (and $x116 $x245)))
 (let (($x338 (and $x185 $x337)))
 (let (($x10 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x79 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (=> $x89 (= ?x79 ?x133))))))))
 ))
 (let (($x167 (forall ((Lambda5 (_ BitVec 32)) )(let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x98 (_ bv1 32))))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (= $x89 $x273))))))))
 ))
 (let (($x184 (forall ((Lambda5 (_ BitVec 32)) )(let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x28 (_ bv0 32))))
 (= $x176 $x260))))))))
 ))
 (let (($x7 (and $x184 $x171)))
 (let (($x284 (and $x7 $x167)))
 (let (($x262 (and $x284 $x10)))
 (let (($x339 (and $x262 $x338)))
 (let (($x155 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x319 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x31 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (=> $x204 (= ?x31 ?x319))))))))
 ))
 (let (($x42 (forall ((Lambda5 (_ BitVec 32)) )(let (($x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x113 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (= $x204 (bvuge ?x113 (_ bv1 32)))))))))
 ))
 (let (($x22 (forall ((Lambda5 (_ BitVec 32)) )(let (($x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x113 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x36 (_ bv0 32))))
 (= $x75 (= ?x113 (_ bv0 32)))))))))
 ))
 (let (($x164 (and $x22 $x37)))
 (let (($x86 (and $x164 $x42)))
 (let (($x275 (and $x86 $x155)))
 (let (($x340 (and $x275 $x339)))
 (let (($x343 (=> $x340 $x342)))
 (not $x343))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x341 (= true false)))
 (let (($x342 (= $x341 true)))
 (let ((?x26 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x244 (= (_ bv0 32) ?x26)))
 (let ((?x140 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x180 (= (_ bv0 32) ?x140)))
 (let ((?x131 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x131)))
 (let ((?x18 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x23 $x252)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x212 $x84)))
 (let (($x150 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (and $x317 $x70)))
 (let (($x128 (not $x310)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x266 $x95)))
 (let (($x68 (and (not $x135) $x128)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x285 $x55)))
 (let (($x100 (not $x282)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x125 $x196)))
 (let (($x94 (and (not $x35) $x100)))
 (let (($x199 (and (and (and (and (and (and $x94 $x68) $x188) $x150) $x107) $x20) $x180)))
 (let (($x216 (and $x199 $x244)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x109 (or false (or false (and (and true (or $x236 $x57)) (or $x287 $x294))))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x109)))
 (let (($x158 (and $x172 $x216)))
 (let (($x174 (= $x158 true)))
 (let (($x337 (= $x174 true)))
 (let (($x87 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x283 (bvadd ?x138 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x295))))
 (let ((?x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x98 (_ bv1 32))))
 (=> $x273 (= ?x133 ?x41)))))))))))
 ))
 (let (($x163 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x272 (_ bv1 32))))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x98 (_ bv1 32))))
 (= $x273 $x253)))))))
 ))
 (let (($x327 (forall ((Lambda5 (_ BitVec 32)) )(let (($x91 (= false false)))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (=> $x260 $x91))))))
 ))
 (let (($x97 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x272 (_ bv0 32))))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (= $x260 $x268)))))))
 ))
 (let (($x328 (and $x97 $x327)))
 (let (($x153 (and $x328 $x163)))
 (let (($x160 (and $x153 $x87)))
 (let (($x248 (= $x160 true)))
 (let (($x245 (= $x248 true)))
 (let (($x110 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x202 (bvadd ?x138 input.dst.llvm-%m2)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x316))))
 (let ((?x31 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (=> $x204 (= ?x31 ?x300)))))))))))
 ))
 (let (($x186 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x272 (_ bv1 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (= $x204 $x253)))))))
 ))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let (($x91 (= false false)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x36 (_ bv0 32))))
 (=> $x75 $x91))))))
 ))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x272 (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x36 (_ bv0 32))))
 (= $x75 $x268)))))))
 ))
 (let (($x215 (and $x62 $x37)))
 (let (($x265 (and $x215 $x186)))
 (let (($x165 (and $x265 $x110)))
 (let (($x214 (= $x165 true)))
 (let (($x211 (= $x214 true)))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x283 (bvadd ?x138 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x295))))
 (let ((?x79 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (=> $x89 (= ?x79 ?x41)))))))))))
 ))
 (let (($x121 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x272 (_ bv1 32))))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (= $x89 $x253)))))))
 ))
 (let (($x171 (forall ((Lambda5 (_ BitVec 32)) )(let (($x91 (= false false)))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x28 (_ bv0 32))))
 (=> $x176 $x91))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x272 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x272 (_ bv0 32))))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x28 (_ bv0 32))))
 (= $x176 $x268)))))))
 ))
 (let (($x267 (and $x39 $x171)))
 (let (($x115 (and $x267 $x121)))
 (let (($x237 (and $x115 $x85)))
 (let (($x255 (= $x237 true)))
 (let (($x114 (= $x255 true)))
 (let ((?x120 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x203 (= (_ bv0 2) ?x120)))
 (let (($x134 (= $x203 true)))
 (let (($x146 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x283 (bvadd ?x138 input.dst.llvm-%m1)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x283))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv2 32))) ?x179)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv3 32))) ?x222)))
 (let ((?x79 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (=> $x89 (= ?x79 ?x182))))))))))))
 ))
 (let (($x230 (and $x115 $x146)))
 (let (($x34 (= $x230 true)))
 (let (($x19 (= $x34 true)))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x283 (bvadd ?x138 input.dst.llvm-%m1)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x283))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv2 32))) ?x179)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x283 (_ bv3 32))) ?x222)))
 (let ((?x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x98 (_ bv1 32))))
 (=> $x273 (= ?x133 ?x182))))))))))))
 ))
 (let (($x96 (and $x153 $x169)))
 (let (($x258 (= $x96 true)))
 (let (($x124 (= $x258 true)))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x138 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x202 (bvadd ?x138 input.dst.llvm-%m2)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x202))))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x202 (_ bv2 32))) ?x82)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x202 (_ bv3 32))) ?x6)))
 (let ((?x31 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (=> $x204 (= ?x31 ?x289))))))))))))
 ))
 (let (($x324 (and $x265 $x16)))
 (let (($x325 (= $x324 true)))
 (let (($x321 (= $x325 true)))
 (let (($x48 (and $x321 $x124)))
 (let (($x45 (and $x48 $x19)))
 (let (($x297 (and $x45 $x134)))
 (let (($x29 (and $x297 $x114)))
 (let (($x116 (and $x29 $x211)))
 (let (($x185 (and $x116 $x245)))
 (let (($x338 (and $x185 $x337)))
 (let (($x10 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x79 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (=> $x89 (= ?x79 ?x133))))))))
 ))
 (let (($x167 (forall ((Lambda5 (_ BitVec 32)) )(let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x98 (_ bv1 32))))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x28 (_ bv1 32))))
 (= $x89 $x273))))))))
 ))
 (let (($x184 (forall ((Lambda5 (_ BitVec 32)) )(let (($x90 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x98 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x98 (_ bv0 32))))
 (let (($x66 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x28 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x28 (_ bv0 32))))
 (= $x176 $x260))))))))
 ))
 (let (($x7 (and $x184 $x171)))
 (let (($x284 (and $x7 $x167)))
 (let (($x262 (and $x284 $x10)))
 (let (($x339 (and $x262 $x338)))
 (let (($x155 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x319 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x31 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (=> $x204 (= ?x31 ?x319))))))))
 ))
 (let (($x42 (forall ((Lambda5 (_ BitVec 32)) )(let (($x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x113 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x36 (_ bv1 32))))
 (= $x204 (bvuge ?x113 (_ bv1 32)))))))))
 ))
 (let (($x22 (forall ((Lambda5 (_ BitVec 32)) )(let (($x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x113 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x36 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x36 (_ bv0 32))))
 (= $x75 (= ?x113 (_ bv0 32)))))))))
 ))
 (let (($x164 (and $x22 $x37)))
 (let (($x86 (and $x164 $x42)))
 (let (($x275 (and $x86 $x155)))
 (let (($x340 (and $x275 $x339)))
 (let (($x343 (=> $x340 $x342)))
 (not $x343))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf0aab844)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xff5e0d3a)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6738d40)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6738d43)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf0aab847)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6738d40)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf0aab844)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #xff5e0d3d (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3c (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3a (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #xff5e0d3d (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #xff5e0d3c (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #xff5e0d3b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #xff5e0d3a (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #xff5e0d3d (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3c (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3a (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000000fb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000000f8)
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x350 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x356 (=> $x350 true)))
 (let (($x357 (= $x356 true)))
 (let (($x358 (= $x357 true)))
 (let (($x351 (= $x350 true)))
 (let (($x352 (= $x351 true)))
 (let ((?x118 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x152 (= (_ bv0 32) ?x118)))
 (let ((?x162 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x53 (= (_ bv0 32) ?x162)))
 (let ((?x129 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x111 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x111)))
 (let (($x334 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x334 $x329)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x336 (and $x233 $x177)))
 (let (($x112 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x106 $x127)))
 (let (($x242 (not $x178)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x243 (and $x195 $x227)))
 (let (($x291 (and (not $x243) $x242)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x299 $x5)))
 (let (($x189 (not $x192)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (and $x141 $x78)))
 (let (($x239 (and (not $x322) $x189)))
 (let (($x43 (and (and (and (and (and (and $x239 $x291) $x187) $x112) $x336) $x332) $x53)))
 (let (($x229 (and $x43 $x152)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x240 (or false (or false (and (and true (or $x209 $x173)) (or $x69 $x277))))))
 (let (($x224 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x240)))
 (let (($x250 (and $x224 $x229)))
 (let (($x345 (= $x250 true)))
 (let (($x346 (= $x345 true)))
 (let (($x197 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x137 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x33 (and $x137 $x197)))
 (let (($x257 (= $x33 true)))
 (let (($x14 (= $x257 true)))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x181 (bvadd ?x297 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x244))))
 (let ((?x145 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x215 (_ bv1 32))))
 (=> $x17 (= ?x145 ?x337)))))))))))
 ))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x305 (_ bv1 32))))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x215 (_ bv1 32))))
 (= $x17 $x182)))))))
 ))
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let (($x31 (= false false)))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (= ?x215 (_ bv0 32))))
 (=> $x253 $x31))))))
 ))
 (let (($x316 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x305 (_ bv0 32))))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (= ?x215 (_ bv0 32))))
 (= $x253 $x311)))))))
 ))
 (let (($x302 (and $x316 $x261)))
 (let (($x211 (and $x302 $x214)))
 (let (($x27 (and $x211 $x30)))
 (let (($x93 (= $x27 true)))
 (let (($x51 (= $x93 true)))
 (let (($x335 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x323 (bvadd ?x297 input.dst.llvm-%m2)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem ?x323))))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv2 32))) ?x190))))
 (let ((?x290 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (=> $x90 (= ?x290 ?x279)))))))))))
 ))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x305 (_ bv1 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (= $x90 $x182)))))))
 ))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let (($x31 (= false false)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x231 (_ bv0 32))))
 (=> $x38 $x31))))))
 ))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x305 (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x231 (_ bv0 32))))
 (= $x38 $x311)))))))
 ))
 (let (($x278 (and $x309 $x58)))
 (let (($x169 (and $x278 $x126)))
 (let (($x320 (and $x169 $x335)))
 (let (($x251 (= $x320 true)))
 (let (($x280 (= $x251 true)))
 (let (($x340 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x181 (bvadd ?x297 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x244))))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (=> $x40 (= ?x82 ?x337)))))))))))
 ))
 (let (($x135 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x305 (_ bv1 32))))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (= $x40 $x182)))))))
 ))
 (let (($x259 (forall ((Lambda5 (_ BitVec 32)) )(let (($x31 (= false false)))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x191 (_ bv0 32))))
 (=> $x186 $x31))))))
 ))
 (let (($x100 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x305 (_ bv0 32))))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x191 (_ bv0 32))))
 (= $x186 $x311)))))))
 ))
 (let (($x94 (and $x100 $x259)))
 (let (($x256 (and $x94 $x135)))
 (let (($x341 (and $x256 $x340)))
 (let (($x342 (= $x341 true)))
 (let (($x343 (= $x342 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x101 (= (_ bv0 2) ?x150)))
 (let (($x212 (= $x101 true)))
 (let (($x68 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x181 (bvadd ?x297 input.dst.llvm-%m1)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x181))))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv2 32))) ?x11)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv3 32))) ?x294)))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (=> $x40 (= ?x82 ?x263))))))))))))
 ))
 (let (($x59 (and $x256 $x68)))
 (let (($x271 (= $x59 true)))
 (let (($x188 (= $x271 true)))
 (let (($x125 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x181 (bvadd ?x297 input.dst.llvm-%m1)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x181))))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv2 32))) ?x11)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv3 32))) ?x294)))
 (let ((?x145 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x215 (_ bv1 32))))
 (=> $x17 (= ?x145 ?x263))))))))))))
 ))
 (let (($x196 (and $x211 $x125)))
 (let (($x35 (= $x196 true)))
 (let (($x56 (= $x35 true)))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x323 (bvadd ?x297 input.dst.llvm-%m2)))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x323))))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x323 (_ bv2 32))) ?x132)))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x323 (_ bv3 32))) ?x41)))
 (let ((?x290 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (=> $x90 (= ?x290 ?x85))))))))))))
 ))
 (let (($x29 (and $x169 $x114)))
 (let (($x313 (= $x29 true)))
 (let (($x92 (= $x313 true)))
 (let (($x285 (and $x92 $x56)))
 (let (($x168 (and $x285 $x188)))
 (let (($x23 (and $x168 $x212)))
 (let (($x344 (and $x23 $x343)))
 (let (($x144 (and $x344 $x280)))
 (let (($x72 (and $x144 $x51)))
 (let (($x286 (and $x72 $x14)))
 (let (($x347 (and $x286 $x346)))
 (let (($x353 (and $x347 $x352)))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x145 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (=> $x40 (= ?x82 ?x145))))))))
 ))
 (let (($x161 (forall ((Lambda5 (_ BitVec 32)) )(let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x215 (_ bv1 32))))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (= $x40 $x17))))))))
 ))
 (let (($x264 (forall ((Lambda5 (_ BitVec 32)) )(let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (= ?x215 (_ bv0 32))))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x191 (_ bv0 32))))
 (= $x186 $x253))))))))
 ))
 (let (($x202 (and $x264 $x259)))
 (let (($x213 (and $x202 $x161)))
 (let (($x97 (and $x213 $x298)))
 (let (($x354 (and $x97 $x353)))
 (let (($x133 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x89 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x290 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (=> $x90 (= ?x290 ?x89))))))))
 ))
 (let (($x260 (forall ((Lambda5 (_ BitVec 32)) )(let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x164 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (= $x90 (bvuge ?x164 (_ bv1 32)))))))))
 ))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x164 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x231 (_ bv0 32))))
 (= $x38 (= ?x164 (_ bv0 32)))))))))
 ))
 (let (($x155 (and $x86 $x58)))
 (let (($x136 (and $x155 $x260)))
 (let (($x71 (and $x136 $x133)))
 (let (($x355 (and $x71 $x354)))
 (let (($x359 (=> $x355 $x358)))
 (not $x359)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x350 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x356 (=> $x350 true)))
 (let (($x357 (= $x356 true)))
 (let (($x358 (= $x357 true)))
 (let (($x351 (= $x350 true)))
 (let (($x352 (= $x351 true)))
 (let ((?x118 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x152 (= (_ bv0 32) ?x118)))
 (let ((?x162 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x53 (= (_ bv0 32) ?x162)))
 (let ((?x129 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x129)))
 (let ((?x111 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x111)))
 (let (($x334 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x334 $x329)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x336 (and $x233 $x177)))
 (let (($x112 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x106 $x127)))
 (let (($x242 (not $x178)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x243 (and $x195 $x227)))
 (let (($x291 (and (not $x243) $x242)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x299 $x5)))
 (let (($x189 (not $x192)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (and $x141 $x78)))
 (let (($x239 (and (not $x322) $x189)))
 (let (($x43 (and (and (and (and (and (and $x239 $x291) $x187) $x112) $x336) $x332) $x53)))
 (let (($x229 (and $x43 $x152)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x240 (or false (or false (and (and true (or $x209 $x173)) (or $x69 $x277))))))
 (let (($x224 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x240)))
 (let (($x250 (and $x224 $x229)))
 (let (($x345 (= $x250 true)))
 (let (($x346 (= $x345 true)))
 (let (($x197 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x137 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x33 (and $x137 $x197)))
 (let (($x257 (= $x33 true)))
 (let (($x14 (= $x257 true)))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x181 (bvadd ?x297 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x244))))
 (let ((?x145 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x215 (_ bv1 32))))
 (=> $x17 (= ?x145 ?x337)))))))))))
 ))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x305 (_ bv1 32))))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x215 (_ bv1 32))))
 (= $x17 $x182)))))))
 ))
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let (($x31 (= false false)))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (= ?x215 (_ bv0 32))))
 (=> $x253 $x31))))))
 ))
 (let (($x316 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x305 (_ bv0 32))))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (= ?x215 (_ bv0 32))))
 (= $x253 $x311)))))))
 ))
 (let (($x302 (and $x316 $x261)))
 (let (($x211 (and $x302 $x214)))
 (let (($x27 (and $x211 $x30)))
 (let (($x93 (= $x27 true)))
 (let (($x51 (= $x93 true)))
 (let (($x335 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x323 (bvadd ?x297 input.dst.llvm-%m2)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem ?x323))))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x323 (_ bv2 32))) ?x190))))
 (let ((?x290 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (=> $x90 (= ?x290 ?x279)))))))))))
 ))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x305 (_ bv1 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (= $x90 $x182)))))))
 ))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let (($x31 (= false false)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x231 (_ bv0 32))))
 (=> $x38 $x31))))))
 ))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x305 (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x231 (_ bv0 32))))
 (= $x38 $x311)))))))
 ))
 (let (($x278 (and $x309 $x58)))
 (let (($x169 (and $x278 $x126)))
 (let (($x320 (and $x169 $x335)))
 (let (($x251 (= $x320 true)))
 (let (($x280 (= $x251 true)))
 (let (($x340 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x181 (bvadd ?x297 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x244))))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (=> $x40 (= ?x82 ?x337)))))))))))
 ))
 (let (($x135 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x305 (_ bv1 32))))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (= $x40 $x182)))))))
 ))
 (let (($x259 (forall ((Lambda5 (_ BitVec 32)) )(let (($x31 (= false false)))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x191 (_ bv0 32))))
 (=> $x186 $x31))))))
 ))
 (let (($x100 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x305 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x305 (_ bv0 32))))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x191 (_ bv0 32))))
 (= $x186 $x311)))))))
 ))
 (let (($x94 (and $x100 $x259)))
 (let (($x256 (and $x94 $x135)))
 (let (($x341 (and $x256 $x340)))
 (let (($x342 (= $x341 true)))
 (let (($x343 (= $x342 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x101 (= (_ bv0 2) ?x150)))
 (let (($x212 (= $x101 true)))
 (let (($x68 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x181 (bvadd ?x297 input.dst.llvm-%m1)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x181))))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv2 32))) ?x11)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv3 32))) ?x294)))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (=> $x40 (= ?x82 ?x263))))))))))))
 ))
 (let (($x59 (and $x256 $x68)))
 (let (($x271 (= $x59 true)))
 (let (($x188 (= $x271 true)))
 (let (($x125 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x181 (bvadd ?x297 input.dst.llvm-%m1)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x181))))
 (let ((?x294 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv2 32))) ?x11)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x181 (_ bv3 32))) ?x294)))
 (let ((?x145 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x215 (_ bv1 32))))
 (=> $x17 (= ?x145 ?x263))))))))))))
 ))
 (let (($x196 (and $x211 $x125)))
 (let (($x35 (= $x196 true)))
 (let (($x56 (= $x35 true)))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x297 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x323 (bvadd ?x297 input.dst.llvm-%m2)))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x323 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x323))))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x323 (_ bv2 32))) ?x132)))
 (let ((?x85 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x323 (_ bv3 32))) ?x41)))
 (let ((?x290 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (=> $x90 (= ?x290 ?x85))))))))))))
 ))
 (let (($x29 (and $x169 $x114)))
 (let (($x313 (= $x29 true)))
 (let (($x92 (= $x313 true)))
 (let (($x285 (and $x92 $x56)))
 (let (($x168 (and $x285 $x188)))
 (let (($x23 (and $x168 $x212)))
 (let (($x344 (and $x23 $x343)))
 (let (($x144 (and $x344 $x280)))
 (let (($x72 (and $x144 $x51)))
 (let (($x286 (and $x72 $x14)))
 (let (($x347 (and $x286 $x346)))
 (let (($x353 (and $x347 $x352)))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x145 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (=> $x40 (= ?x82 ?x145))))))))
 ))
 (let (($x161 (forall ((Lambda5 (_ BitVec 32)) )(let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x215 (_ bv1 32))))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x191 (_ bv1 32))))
 (= $x40 $x17))))))))
 ))
 (let (($x264 (forall ((Lambda5 (_ BitVec 32)) )(let (($x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x215 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (= ?x215 (_ bv0 32))))
 (let (($x10 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x191 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x191 (_ bv0 32))))
 (= $x186 $x253))))))))
 ))
 (let (($x202 (and $x264 $x259)))
 (let (($x213 (and $x202 $x161)))
 (let (($x97 (and $x213 $x298)))
 (let (($x354 (and $x97 $x353)))
 (let (($x133 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x89 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x290 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (=> $x90 (= ?x290 ?x89))))))))
 ))
 (let (($x260 (forall ((Lambda5 (_ BitVec 32)) )(let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x164 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x231 (_ bv1 32))))
 (= $x90 (bvuge ?x164 (_ bv1 32)))))))))
 ))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x164 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x231 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x231 (_ bv0 32))))
 (= $x38 (= ?x164 (_ bv0 32)))))))))
 ))
 (let (($x155 (and $x86 $x58)))
 (let (($x136 (and $x155 $x260)))
 (let (($x71 (and $x136 $x133)))
 (let (($x355 (and $x71 $x354)))
 (let (($x359 (=> $x355 $x358)))
 (not $x359)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x54 (= false true)))
 (let (($x314 (= $x54 true)))
 (let ((?x317 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x70 (= (_ bv0 32) ?x317)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x266 (= (_ bv0 32) ?x55)))
 (let ((?x52 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x247 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x247)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x208 (and $x160 $x248)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x87 $x208)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x203 $x134)))
 (let (($x304 (not $x234)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x8 $x34)))
 (let (($x67 (and (not $x120) $x304)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x232 $x146)))
 (let (($x121 (not $x230)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x268 $x276)))
 (let (($x166 (and (not $x45) $x121)))
 (let (($x131 (and (and (and (and (and (and $x166 $x67) $x88) $x185) $x254) $x236) $x266)))
 (let (($x105 (and $x131 $x70)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x222 (or false (or false (and (and true (or $x217 $x289)) (or $x221 $x163))))))
 (let (($x267 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x222)))
 (let (($x140 (and $x267 $x105)))
 (let (($x180 (= $x140 true)))
 (let (($x64 (= $x180 true)))
 (let (($x272 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x44 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x346))))
 (let ((?x237 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x278 (_ bv1 32))))
 (=> $x159 (= ?x237 ?x350)))))))))))
 ))
 (let (($x197 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x287 (_ bv1 32))))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x278 (_ bv1 32))))
 (= $x159 $x263)))))))
 ))
 (let (($x32 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x278 (_ bv0 32))))
 (=> $x182 $x290))))))
 ))
 (let (($x93 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x287 (_ bv0 32))))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x278 (_ bv0 32))))
 (= $x182 $x246)))))))
 ))
 (let (($x74 (and $x93 $x32)))
 (let (($x33 (and $x74 $x197)))
 (let (($x15 (and $x33 $x272)))
 (let (($x220 (= $x15 true)))
 (let (($x201 (= $x220 true)))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x18 (bvadd ?x23 input.dst.llvm-%m2)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x80))))
 (let ((?x138 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (=> $x9 (= ?x138 ?x331)))))))))))
 ))
 (let (($x172 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x287 (_ bv1 32))))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (= $x9 $x263)))))))
 ))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x176 (_ bv0 32))))
 (=> $x98 $x290))))))
 ))
 (let (($x46 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x287 (_ bv0 32))))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x176 (_ bv0 32))))
 (= $x98 $x246)))))))
 ))
 (let (($x57 (and $x46 $x79)))
 (let (($x125 (and $x57 $x172)))
 (let (($x66 (and $x125 $x275)))
 (let (($x28 (= $x66 true)))
 (let (($x184 (= $x28 true)))
 (let (($x353 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x44 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x346))))
 (let ((?x132 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (=> $x295 (= ?x132 ?x350)))))))))))
 ))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x287 (_ bv1 32))))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (= $x295 $x263)))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x219 (_ bv0 32))))
 (=> $x126 $x290))))))
 ))
 (let (($x243 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x287 (_ bv0 32))))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x219 (_ bv0 32))))
 (= $x126 $x246)))))))
 ))
 (let (($x303 (and $x243 $x39)))
 (let (($x242 (and $x303 $x178)))
 (let (($x354 (and $x242 $x353)))
 (let (($x355 (= $x354 true)))
 (let (($x356 (= $x355 true)))
 (let ((?x111 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x329 (= (_ bv0 2) ?x111)))
 (let (($x177 (= $x329 true)))
 (let (($x102 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x44 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x44))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv2 32))) ?x117)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv3 32))) ?x240)))
 (let ((?x132 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (=> $x295 (= ?x132 ?x78))))))))))))
 ))
 (let (($x77 (and $x242 $x102)))
 (let (($x112 (= $x77 true)))
 (let (($x225 (= $x112 true)))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x44 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x44))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv2 32))) ?x117)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv3 32))) ?x240)))
 (let ((?x237 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x278 (_ bv1 32))))
 (=> $x159 (= ?x237 ?x78))))))))))))
 ))
 (let (($x5 (and $x33 $x299)))
 (let (($x192 (= $x5 true)))
 (let (($x189 (= $x192 true)))
 (let (($x251 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x24 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x274 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x270 (and $x274 $x24)))
 (let (($x280 (and $x270 $x251)))
 (let (($x144 (= $x280 true)))
 (let (($x148 (= $x144 true)))
 (let (($x343 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x18 (bvadd ?x23 input.dst.llvm-%m2)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x18))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x18 (_ bv2 32))) ?x199)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x18 (_ bv3 32))) ?x337)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (=> $x9 (= ?x138 ?x340))))))))))))
 ))
 (let (($x344 (and $x125 $x343)))
 (let (($x130 (= $x344 true)))
 (let (($x25 (= $x130 true)))
 (let (($x241 (and $x25 $x148)))
 (let (($x239 (and $x241 $x189)))
 (let (($x233 (and $x239 $x225)))
 (let (($x336 (and $x233 $x177)))
 (let (($x357 (and $x336 $x356)))
 (let (($x7 (and $x357 $x184)))
 (let (($x63 (and $x7 $x201)))
 (let (($x139 (and $x63 $x64)))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x237 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x132 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (=> $x295 (= ?x132 ?x237))))))))
 ))
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x278 (_ bv1 32))))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (= $x295 $x159))))))))
 ))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x278 (_ bv0 32))))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x219 (_ bv0 32))))
 (= $x126 $x182))))))))
 ))
 (let (($x323 (and $x96 $x39)))
 (let (($x330 (and $x323 $x147)))
 (let (($x316 (and $x330 $x318)))
 (let (($x235 (and $x316 $x139)))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x40 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (=> $x9 (= ?x138 ?x40))))))))
 ))
 (let (($x253 (forall ((Lambda5 (_ BitVec 32)) )(let (($x42 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x155 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (= $x9 (bvuge ?x155 (_ bv1 32)))))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let (($x42 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x155 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x176 (_ bv0 32))))
 (= $x98 (= ?x155 (_ bv0 32)))))))))
 ))
 (let (($x133 (and $x136 $x79)))
 (let (($x265 (and $x133 $x253)))
 (let (($x325 (and $x265 $x145)))
 (let (($x12 (and $x325 $x235)))
 (let (($x142 (=> $x12 $x314)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x54 (= false true)))
 (let (($x314 (= $x54 true)))
 (let ((?x317 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x70 (= (_ bv0 32) ?x317)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x266 (= (_ bv0 32) ?x55)))
 (let ((?x52 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x247 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x247)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x208 (and $x160 $x248)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x87 $x208)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x203 $x134)))
 (let (($x304 (not $x234)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x8 $x34)))
 (let (($x67 (and (not $x120) $x304)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x232 $x146)))
 (let (($x121 (not $x230)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x268 $x276)))
 (let (($x166 (and (not $x45) $x121)))
 (let (($x131 (and (and (and (and (and (and $x166 $x67) $x88) $x185) $x254) $x236) $x266)))
 (let (($x105 (and $x131 $x70)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x222 (or false (or false (and (and true (or $x217 $x289)) (or $x221 $x163))))))
 (let (($x267 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x222)))
 (let (($x140 (and $x267 $x105)))
 (let (($x180 (= $x140 true)))
 (let (($x64 (= $x180 true)))
 (let (($x272 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x44 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x346))))
 (let ((?x237 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x278 (_ bv1 32))))
 (=> $x159 (= ?x237 ?x350)))))))))))
 ))
 (let (($x197 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x287 (_ bv1 32))))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x278 (_ bv1 32))))
 (= $x159 $x263)))))))
 ))
 (let (($x32 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x278 (_ bv0 32))))
 (=> $x182 $x290))))))
 ))
 (let (($x93 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x287 (_ bv0 32))))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x278 (_ bv0 32))))
 (= $x182 $x246)))))))
 ))
 (let (($x74 (and $x93 $x32)))
 (let (($x33 (and $x74 $x197)))
 (let (($x15 (and $x33 $x272)))
 (let (($x220 (= $x15 true)))
 (let (($x201 (= $x220 true)))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x18 (bvadd ?x23 input.dst.llvm-%m2)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x80))))
 (let ((?x138 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (=> $x9 (= ?x138 ?x331)))))))))))
 ))
 (let (($x172 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x287 (_ bv1 32))))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (= $x9 $x263)))))))
 ))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x176 (_ bv0 32))))
 (=> $x98 $x290))))))
 ))
 (let (($x46 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x287 (_ bv0 32))))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x176 (_ bv0 32))))
 (= $x98 $x246)))))))
 ))
 (let (($x57 (and $x46 $x79)))
 (let (($x125 (and $x57 $x172)))
 (let (($x66 (and $x125 $x275)))
 (let (($x28 (= $x66 true)))
 (let (($x184 (= $x28 true)))
 (let (($x353 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x44 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x346))))
 (let ((?x132 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (=> $x295 (= ?x132 ?x350)))))))))))
 ))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x287 (_ bv1 32))))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (= $x295 $x263)))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let (($x290 (= false false)))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x219 (_ bv0 32))))
 (=> $x126 $x290))))))
 ))
 (let (($x243 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x287 (_ bv0 32))))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x219 (_ bv0 32))))
 (= $x126 $x246)))))))
 ))
 (let (($x303 (and $x243 $x39)))
 (let (($x242 (and $x303 $x178)))
 (let (($x354 (and $x242 $x353)))
 (let (($x355 (= $x354 true)))
 (let (($x356 (= $x355 true)))
 (let ((?x111 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x329 (= (_ bv0 2) ?x111)))
 (let (($x177 (= $x329 true)))
 (let (($x102 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x44 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x44))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv2 32))) ?x117)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv3 32))) ?x240)))
 (let ((?x132 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (=> $x295 (= ?x132 ?x78))))))))))))
 ))
 (let (($x77 (and $x242 $x102)))
 (let (($x112 (= $x77 true)))
 (let (($x225 (= $x112 true)))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x44 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x44))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv2 32))) ?x117)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv3 32))) ?x240)))
 (let ((?x237 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x278 (_ bv1 32))))
 (=> $x159 (= ?x237 ?x78))))))))))))
 ))
 (let (($x5 (and $x33 $x299)))
 (let (($x192 (= $x5 true)))
 (let (($x189 (= $x192 true)))
 (let (($x251 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x24 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x274 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x270 (and $x274 $x24)))
 (let (($x280 (and $x270 $x251)))
 (let (($x144 (= $x280 true)))
 (let (($x148 (= $x144 true)))
 (let (($x343 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x23 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x18 (bvadd ?x23 input.dst.llvm-%m2)))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x18))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x18 (_ bv2 32))) ?x199)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x18 (_ bv3 32))) ?x337)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (=> $x9 (= ?x138 ?x340))))))))))))
 ))
 (let (($x344 (and $x125 $x343)))
 (let (($x130 (= $x344 true)))
 (let (($x25 (= $x130 true)))
 (let (($x241 (and $x25 $x148)))
 (let (($x239 (and $x241 $x189)))
 (let (($x233 (and $x239 $x225)))
 (let (($x336 (and $x233 $x177)))
 (let (($x357 (and $x336 $x356)))
 (let (($x7 (and $x357 $x184)))
 (let (($x63 (and $x7 $x201)))
 (let (($x139 (and $x63 $x64)))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x237 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x132 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (=> $x295 (= ?x132 ?x237))))))))
 ))
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x278 (_ bv1 32))))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x219 (_ bv1 32))))
 (= $x295 $x159))))))))
 ))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let (($x123 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x278 (_ bv0 32))))
 (let (($x298 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x219 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (= ?x219 (_ bv0 32))))
 (= $x126 $x182))))))))
 ))
 (let (($x323 (and $x96 $x39)))
 (let (($x330 (and $x323 $x147)))
 (let (($x316 (and $x330 $x318)))
 (let (($x235 (and $x316 $x139)))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x40 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (=> $x9 (= ?x138 ?x40))))))))
 ))
 (let (($x253 (forall ((Lambda5 (_ BitVec 32)) )(let (($x42 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x155 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x176 (_ bv1 32))))
 (= $x9 (bvuge ?x155 (_ bv1 32)))))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let (($x42 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x155 (ite $x42 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x176 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (= ?x176 (_ bv0 32))))
 (= $x98 (= ?x155 (_ bv0 32)))))))))
 ))
 (let (($x133 (and $x136 $x79)))
 (let (($x265 (and $x133 $x253)))
 (let (($x325 (and $x265 $x145)))
 (let (($x12 (and $x325 $x235)))
 (let (($x142 (=> $x12 $x314)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7bc7129c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb2d25038)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb2d2503b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7bc7129f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb2d25038)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7bc7129c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x22 (= $x171 true)))
 (let (($x210 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x53 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x129 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x118 (and $x129 $x53)))
 (let (($x281 (and $x118 $x210)))
 (let (($x359 (= $x281 true)))
 (let (($x358 (= $x359 true)))
 (let ((?x286 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x61 (= (_ bv0 32) ?x286)))
 (let ((?x249 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x60 (= (_ bv0 32) ?x249)))
 (let ((?x209 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x30 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x30)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x212 $x51)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x257 (and $x101 $x137)))
 (let (($x150 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x168 $x157)))
 (let (($x59 (not $x68)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x294 $x282)))
 (let (($x256 (and (not $x94) $x59)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x302 $x165)))
 (let (($x211 (not $x214)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x292 $x161)))
 (let (($x11 (and (not $x300) $x211)))
 (let (($x154 (and (and (and (and (and (and $x11 $x256) $x310) $x150) $x257) $x200) $x60)))
 (let (($x195 (and $x154 $x61)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x321 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x321)))
 (let (($x327 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x321)))
 (let (($x85 (or false (or false (and (and true (or $x301 $x327)) (or $x48 $x19))))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x106 (and $x29 $x195)))
 (let (($x291 (= $x106 true)))
 (let (($x83 (= $x291 true)))
 (let (($x89 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x178 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x160))))
 (let ((?x341 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x57 (_ bv1 32))))
 (=> $x128 (= ?x341 ?x254)))))))))))
 ))
 (let (($x356 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x148 (_ bv1 32))))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x57 (_ bv1 32))))
 (= $x128 $x206)))))))
 ))
 (let (($x352 (forall ((Lambda5 (_ BitVec 32)) )(let (($x138 (= false false)))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (=> $x263 $x138))))))
 ))
 (let (($x348 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x148 (_ bv0 32))))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (= $x263 $x241)))))))
 ))
 (let (($x353 (and $x348 $x352)))
 (let (($x357 (and $x353 $x356)))
 (let (($x71 (and $x357 $x89)))
 (let (($x10 (= $x71 true)))
 (let (($x191 (= $x10 true)))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x242 (bvadd ?x178 input.dst.llvm-%m2)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x142))))
 (let ((?x297 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (=> $x123 (= ?x297 ?x258)))))))))))
 ))
 (let (($x33 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x148 (_ bv1 32))))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (= $x123 $x206)))))))
 ))
 (let (($x82 (forall ((Lambda5 (_ BitVec 32)) )(let (($x138 (= false false)))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x186 (_ bv0 32))))
 (=> $x215 $x138))))))
 ))
 (let (($x93 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x148 (_ bv0 32))))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x186 (_ bv0 32))))
 (= $x215 $x241)))))))
 ))
 (let (($x72 (and $x93 $x82)))
 (let (($x44 (and $x72 $x33)))
 (let (($x17 (and $x44 $x86)))
 (let (($x308 (= $x17 true)))
 (let (($x156 (= $x308 true)))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x178 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x160))))
 (let ((?x199 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (=> $x244 (= ?x199 ?x254)))))))))))
 ))
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x148 (_ bv1 32))))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (= $x244 $x206)))))))
 ))
 (let (($x100 (forall ((Lambda5 (_ BitVec 32)) )(let (($x138 (= false false)))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x109 (_ bv0 32))))
 (=> $x172 $x138))))))
 ))
 (let (($x163 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x148 (_ bv0 32))))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x109 (_ bv0 32))))
 (= $x172 $x241)))))))
 ))
 (let (($x153 (and $x163 $x100)))
 (let (($x267 (and $x153 $x222)))
 (let (($x107 (and $x267 $x236)))
 (let (($x55 (= $x107 true)))
 (let (($x266 (= $x55 true)))
 (let ((?x34 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x120 (= (_ bv0 2) ?x34)))
 (let (($x110 (= $x120 true)))
 (let (($x232 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x178 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x262))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv2 32))) ?x220)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv3 32))) ?x62)))
 (let ((?x199 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (=> $x244 (= ?x199 ?x223))))))))))))
 ))
 (let (($x146 (and $x267 $x232)))
 (let (($x230 (= $x146 true)))
 (let (($x121 (= $x230 true)))
 (let (($x122 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x178 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x262))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv2 32))) ?x220)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv3 32))) ?x62)))
 (let ((?x341 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x57 (_ bv1 32))))
 (=> $x128 (= ?x341 ?x223))))))))))))
 ))
 (let (($x289 (and $x357 $x122)))
 (let (($x16 (= $x289 true)))
 (let (($x324 (= $x16 true)))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x242 (bvadd ?x178 input.dst.llvm-%m2)))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x77)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x233)))
 (let ((?x297 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (=> $x123 (= ?x297 ?x329))))))))))))
 ))
 (let (($x349 (and $x44 $x296)))
 (let (($x347 (= $x349 true)))
 (let (($x345 (= $x347 true)))
 (let (($x326 (and $x345 $x324)))
 (let (($x166 (and $x326 $x121)))
 (let (($x203 (and $x166 $x110)))
 (let (($x131 (and $x203 $x266)))
 (let (($x38 (and $x131 $x156)))
 (let (($x264 (and $x38 $x191)))
 (let (($x43 (and $x264 $x83)))
 (let (($x360 (and $x43 $x358)))
 (let (($x151 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x341 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x199 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (=> $x244 (= ?x199 ?x341))))))))
 ))
 (let (($x216 (forall ((Lambda5 (_ BitVec 32)) )(let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x57 (_ bv1 32))))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (= $x244 $x128))))))))
 ))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x109 (_ bv0 32))))
 (= $x172 $x263))))))))
 ))
 (let (($x18 (and $x196 $x100)))
 (let (($x26 (and $x18 $x216)))
 (let (($x207 (and $x26 $x151)))
 (let (($x124 (and $x207 $x360)))
 (let (($x237 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x297 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (=> $x123 (= ?x297 ?x295))))))))
 ))
 (let (($x182 (forall ((Lambda5 (_ BitVec 32)) )(let (($x260 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x133 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (= $x123 (bvuge ?x133 (_ bv1 32)))))))))
 ))
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let (($x260 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x133 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x186 (_ bv0 32))))
 (= $x215 (= ?x133 (_ bv0 32)))))))))
 ))
 (let (($x145 (and $x265 $x82)))
 (let (($x169 (and $x145 $x182)))
 (let (($x313 (and $x169 $x237)))
 (let (($x312 (and $x313 $x124)))
 (let (($x99 (=> $x312 $x22)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x22 (= $x171 true)))
 (let (($x210 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x53 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x129 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x118 (and $x129 $x53)))
 (let (($x281 (and $x118 $x210)))
 (let (($x359 (= $x281 true)))
 (let (($x358 (= $x359 true)))
 (let ((?x286 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x61 (= (_ bv0 32) ?x286)))
 (let ((?x249 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x60 (= (_ bv0 32) ?x249)))
 (let ((?x209 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x30 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x30)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x212 $x51)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x257 (and $x101 $x137)))
 (let (($x150 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x168 $x157)))
 (let (($x59 (not $x68)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x294 $x282)))
 (let (($x256 (and (not $x94) $x59)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x302 $x165)))
 (let (($x211 (not $x214)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x292 $x161)))
 (let (($x11 (and (not $x300) $x211)))
 (let (($x154 (and (and (and (and (and (and $x11 $x256) $x310) $x150) $x257) $x200) $x60)))
 (let (($x195 (and $x154 $x61)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x321 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x321)))
 (let (($x327 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x321)))
 (let (($x85 (or false (or false (and (and true (or $x301 $x327)) (or $x48 $x19))))))
 (let (($x29 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x106 (and $x29 $x195)))
 (let (($x291 (= $x106 true)))
 (let (($x83 (= $x291 true)))
 (let (($x89 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x178 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x160))))
 (let ((?x341 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x57 (_ bv1 32))))
 (=> $x128 (= ?x341 ?x254)))))))))))
 ))
 (let (($x356 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x148 (_ bv1 32))))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x57 (_ bv1 32))))
 (= $x128 $x206)))))))
 ))
 (let (($x352 (forall ((Lambda5 (_ BitVec 32)) )(let (($x138 (= false false)))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (=> $x263 $x138))))))
 ))
 (let (($x348 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x148 (_ bv0 32))))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (= $x263 $x241)))))))
 ))
 (let (($x353 (and $x348 $x352)))
 (let (($x357 (and $x353 $x356)))
 (let (($x71 (and $x357 $x89)))
 (let (($x10 (= $x71 true)))
 (let (($x191 (= $x10 true)))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x242 (bvadd ?x178 input.dst.llvm-%m2)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x142))))
 (let ((?x297 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (=> $x123 (= ?x297 ?x258)))))))))))
 ))
 (let (($x33 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x148 (_ bv1 32))))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (= $x123 $x206)))))))
 ))
 (let (($x82 (forall ((Lambda5 (_ BitVec 32)) )(let (($x138 (= false false)))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x186 (_ bv0 32))))
 (=> $x215 $x138))))))
 ))
 (let (($x93 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x148 (_ bv0 32))))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x186 (_ bv0 32))))
 (= $x215 $x241)))))))
 ))
 (let (($x72 (and $x93 $x82)))
 (let (($x44 (and $x72 $x33)))
 (let (($x17 (and $x44 $x86)))
 (let (($x308 (= $x17 true)))
 (let (($x156 (= $x308 true)))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x178 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x160))))
 (let ((?x199 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (=> $x244 (= ?x199 ?x254)))))))))))
 ))
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x148 (_ bv1 32))))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (= $x244 $x206)))))))
 ))
 (let (($x100 (forall ((Lambda5 (_ BitVec 32)) )(let (($x138 (= false false)))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x109 (_ bv0 32))))
 (=> $x172 $x138))))))
 ))
 (let (($x163 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x148 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x148 (_ bv0 32))))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x109 (_ bv0 32))))
 (= $x172 $x241)))))))
 ))
 (let (($x153 (and $x163 $x100)))
 (let (($x267 (and $x153 $x222)))
 (let (($x107 (and $x267 $x236)))
 (let (($x55 (= $x107 true)))
 (let (($x266 (= $x55 true)))
 (let ((?x34 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x120 (= (_ bv0 2) ?x34)))
 (let (($x110 (= $x120 true)))
 (let (($x232 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x178 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x262))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv2 32))) ?x220)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv3 32))) ?x62)))
 (let ((?x199 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (=> $x244 (= ?x199 ?x223))))))))))))
 ))
 (let (($x146 (and $x267 $x232)))
 (let (($x230 (= $x146 true)))
 (let (($x121 (= $x230 true)))
 (let (($x122 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x262 (bvadd ?x178 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x262))))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv2 32))) ?x220)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x262 (_ bv3 32))) ?x62)))
 (let ((?x341 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x57 (_ bv1 32))))
 (=> $x128 (= ?x341 ?x223))))))))))))
 ))
 (let (($x289 (and $x357 $x122)))
 (let (($x16 (= $x289 true)))
 (let (($x324 (= $x16 true)))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x178 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x242 (bvadd ?x178 input.dst.llvm-%m2)))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x77)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x233)))
 (let ((?x297 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (=> $x123 (= ?x297 ?x329))))))))))))
 ))
 (let (($x349 (and $x44 $x296)))
 (let (($x347 (= $x349 true)))
 (let (($x345 (= $x347 true)))
 (let (($x326 (and $x345 $x324)))
 (let (($x166 (and $x326 $x121)))
 (let (($x203 (and $x166 $x110)))
 (let (($x131 (and $x203 $x266)))
 (let (($x38 (and $x131 $x156)))
 (let (($x264 (and $x38 $x191)))
 (let (($x43 (and $x264 $x83)))
 (let (($x360 (and $x43 $x358)))
 (let (($x151 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x341 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x199 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (=> $x244 (= ?x199 ?x341))))))))
 ))
 (let (($x216 (forall ((Lambda5 (_ BitVec 32)) )(let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x57 (_ bv1 32))))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x109 (_ bv1 32))))
 (= $x244 $x128))))))))
 ))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x57 (ite $x175 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (let (($x318 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x109 (ite $x318 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x109 (_ bv0 32))))
 (= $x172 $x263))))))))
 ))
 (let (($x18 (and $x196 $x100)))
 (let (($x26 (and $x18 $x216)))
 (let (($x207 (and $x26 $x151)))
 (let (($x124 (and $x207 $x360)))
 (let (($x237 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x297 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (=> $x123 (= ?x297 ?x295))))))))
 ))
 (let (($x182 (forall ((Lambda5 (_ BitVec 32)) )(let (($x260 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x133 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x186 (_ bv1 32))))
 (= $x123 (bvuge ?x133 (_ bv1 32)))))))))
 ))
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let (($x260 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x133 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x186 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x186 (_ bv0 32))))
 (= $x215 (= ?x133 (_ bv0 32)))))))))
 ))
 (let (($x145 (and $x265 $x82)))
 (let (($x169 (and $x145 $x182)))
 (let (($x313 (and $x169 $x237)))
 (let (($x312 (and $x313 $x124)))
 (let (($x99 (=> $x312 $x22)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x30fbe9f8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xecf9fdfc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!21))
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xecf9fdff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x30fbe9fb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xecf9fdfc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x30fbe9f8)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!25 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!25 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!23 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!21))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000000)
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!25 (k!23 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x12 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x204 (bvneg ?x12)))
 (let (($x31 (= ?x204 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x21 (= $x31 true)))
 (let (($x64 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x193 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x234 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x228 (and $x234 $x193)))
 (let (($x140 (and $x228 $x64)))
 (let (($x70 (= $x140 true)))
 (let (($x317 (= $x70 true)))
 (let ((?x273 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x80 (= (_ bv0 32) ?x273)))
 (let ((?x331 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x37 (= (_ bv0 32) ?x331)))
 (let ((?x275 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x275)))
 (let ((?x250 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x350 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x250)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x354 (and $x127 $x350)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x303 $x354)))
 (let (($x243 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x299 (and $x239 $x227)))
 (let (($x5 (not $x299)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x74 $x194)))
 (let (($x78 (and (not $x69) $x5)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x279 $x24)))
 (let (($x335 (not $x270)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x170 $x147)))
 (let (($x32 (and (not $x190) $x335)))
 (let (($x7 (and (and (and (and (and (and $x32 $x78) $x322) $x243) $x113) $x66) $x37)))
 (let (($x221 (and $x7 $x80)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x340 (or false (or false (and (and true (or $x108 $x261)) (or $x285 $x188))))))
 (let (($x344 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x340)))
 (let (($x218 (and $x344 $x221)))
 (let (($x268 (= $x218 true)))
 (let (($x276 (= $x268 true)))
 (let (($x40 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x203 input.dst.llvm-%m1)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x61))))
 (let ((?x177 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x72 (_ bv1 32))))
 (=> $x149 (= ?x177 ?x83)))))))))))
 ))
 (let (($x308 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x201 (_ bv1 32))))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x72 (_ bv1 32))))
 (= $x149 $x223)))))))
 ))
 (let (($x50 (forall ((Lambda5 (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x72 (_ bv0 32))))
 (=> $x206 $x297))))))
 ))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x201 (_ bv0 32))))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x72 (_ bv0 32))))
 (= $x206 $x63)))))))
 ))
 (let (($x259 (and $x142 $x50)))
 (let (($x156 (and $x259 $x308)))
 (let (($x325 (and $x156 $x40)))
 (let (($x298 (= $x325 true)))
 (let (($x219 (= $x298 true)))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x134 (bvadd ?x203 input.dst.llvm-%m2)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x167))))
 (let ((?x23 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (=> $x175 (= ?x23 ?x35)))))))))))
 ))
 (let (($x217 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x201 (_ bv1 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (= $x175 $x223)))))))
 ))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x126 (_ bv0 32))))
 (=> $x278 $x297))))))
 ))
 (let (($x15 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x201 (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x126 (_ bv0 32))))
 (= $x278 $x63)))))))
 ))
 (let (($x6 (and $x15 $x132)))
 (let (($x122 (and $x6 $x217)))
 (let (($x159 (and $x122 $x136)))
 (let (($x75 (= $x159 true)))
 (let (($x42 (= $x75 true)))
 (let (($x332 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x203 input.dst.llvm-%m1)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x61))))
 (let ((?x77 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (=> $x112 (= ?x77 ?x83)))))))))))
 ))
 (let (($x94 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x201 (_ bv1 32))))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (= $x112 $x223)))))))
 ))
 (let (($x277 (forall ((Lambda5 (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x197 (_ bv0 32))))
 (=> $x33 $x297))))))
 ))
 (let (($x211 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x201 (_ bv0 32))))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x197 (_ bv0 32))))
 (= $x33 $x63)))))))
 ))
 (let (($x11 (and $x211 $x277)))
 (let (($x135 (and $x11 $x94)))
 (let (($x129 (and $x135 $x332)))
 (let (($x307 (= $x129 true)))
 (let (($x53 (= $x307 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x65 (= (_ bv0 2) ?x150)))
 (let (($x101 (= $x65 true)))
 (let (($x256 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x203 input.dst.llvm-%m1)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x255))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv2 32))) ?x306)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv3 32))) ?x19)))
 (let ((?x77 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (=> $x112 (= ?x77 ?x143))))))))))))
 ))
 (let (($x14 (and $x135 $x256)))
 (let (($x95 (= $x14 true)))
 (let (($x310 (= $x95 true)))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x203 input.dst.llvm-%m1)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x255))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv2 32))) ?x306)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv3 32))) ?x19)))
 (let ((?x177 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x72 (_ bv1 32))))
 (=> $x149 (= ?x177 ?x143))))))))))))
 ))
 (let (($x161 (and $x156 $x292)))
 (let (($x300 (= $x161 true)))
 (let (($x116 (= $x300 true)))
 (let (($x266 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x134 (bvadd ?x203 input.dst.llvm-%m2)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x134))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x134 (_ bv2 32))) ?x84)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x134 (_ bv3 32))) ?x254)))
 (let ((?x23 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (=> $x175 (= ?x23 ?x236))))))))))))
 ))
 (let (($x131 (and $x122 $x266)))
 (let (($x56 (= $x131 true)))
 (let (($x238 (= $x56 true)))
 (let (($x302 (and $x238 $x116)))
 (let (($x198 (and $x302 $x310)))
 (let (($x212 (and $x198 $x101)))
 (let (($x118 (and $x212 $x53)))
 (let (($x155 (and $x118 $x42)))
 (let (($x96 (and $x155 $x219)))
 (let (($x88 (and $x96 $x276)))
 (let (($x105 (and $x88 $x317)))
 (let (($x346 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x177 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x77 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (=> $x112 (= ?x77 ?x177))))))))
 ))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x72 (_ bv1 32))))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (= $x112 $x149))))))))
 ))
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x72 (_ bv0 32))))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x197 (_ bv0 32))))
 (= $x33 $x206))))))))
 ))
 (let (($x242 (and $x224 $x277)))
 (let (($x102 (and $x242 $x187)))
 (let (($x348 (and $x102 $x346)))
 (let (($x180 (and $x348 $x105)))
 (let (($x341 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x244 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x23 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (=> $x175 (= ?x23 ?x244))))))))
 ))
 (let (($x263 (forall ((Lambda5 (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x145 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (= $x175 (bvuge ?x145 (_ bv1 32)))))))))
 ))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x145 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x126 (_ bv0 32))))
 (= $x278 (= ?x145 (_ bv0 32)))))))))
 ))
 (let (($x237 (and $x169 $x132)))
 (let (($x125 (and $x237 $x263)))
 (let (($x130 (and $x125 $x341)))
 (let (($x139 (and $x130 $x180)))
 (let (($x103 (=> $x139 $x21)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x12 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x204 (bvneg ?x12)))
 (let (($x31 (= ?x204 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x21 (= $x31 true)))
 (let (($x64 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x193 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x234 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x228 (and $x234 $x193)))
 (let (($x140 (and $x228 $x64)))
 (let (($x70 (= $x140 true)))
 (let (($x317 (= $x70 true)))
 (let ((?x273 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x80 (= (_ bv0 32) ?x273)))
 (let ((?x331 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x37 (= (_ bv0 32) ?x331)))
 (let ((?x275 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x275)))
 (let ((?x250 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x350 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x250)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x354 (and $x127 $x350)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x113 (and $x303 $x354)))
 (let (($x243 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x322 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x299 (and $x239 $x227)))
 (let (($x5 (not $x299)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x74 $x194)))
 (let (($x78 (and (not $x69) $x5)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x279 $x24)))
 (let (($x335 (not $x270)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x170 $x147)))
 (let (($x32 (and (not $x190) $x335)))
 (let (($x7 (and (and (and (and (and (and $x32 $x78) $x322) $x243) $x113) $x66) $x37)))
 (let (($x221 (and $x7 $x80)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x340 (or false (or false (and (and true (or $x108 $x261)) (or $x285 $x188))))))
 (let (($x344 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x340)))
 (let (($x218 (and $x344 $x221)))
 (let (($x268 (= $x218 true)))
 (let (($x276 (= $x268 true)))
 (let (($x40 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x203 input.dst.llvm-%m1)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x61))))
 (let ((?x177 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x72 (_ bv1 32))))
 (=> $x149 (= ?x177 ?x83)))))))))))
 ))
 (let (($x308 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x201 (_ bv1 32))))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x72 (_ bv1 32))))
 (= $x149 $x223)))))))
 ))
 (let (($x50 (forall ((Lambda5 (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x72 (_ bv0 32))))
 (=> $x206 $x297))))))
 ))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x201 (_ bv0 32))))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x72 (_ bv0 32))))
 (= $x206 $x63)))))))
 ))
 (let (($x259 (and $x142 $x50)))
 (let (($x156 (and $x259 $x308)))
 (let (($x325 (and $x156 $x40)))
 (let (($x298 (= $x325 true)))
 (let (($x219 (= $x298 true)))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x134 (bvadd ?x203 input.dst.llvm-%m2)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x167))))
 (let ((?x23 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (=> $x175 (= ?x23 ?x35)))))))))))
 ))
 (let (($x217 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x201 (_ bv1 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (= $x175 $x223)))))))
 ))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x126 (_ bv0 32))))
 (=> $x278 $x297))))))
 ))
 (let (($x15 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x201 (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x126 (_ bv0 32))))
 (= $x278 $x63)))))))
 ))
 (let (($x6 (and $x15 $x132)))
 (let (($x122 (and $x6 $x217)))
 (let (($x159 (and $x122 $x136)))
 (let (($x75 (= $x159 true)))
 (let (($x42 (= $x75 true)))
 (let (($x332 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x203 input.dst.llvm-%m1)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x61))))
 (let ((?x77 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (=> $x112 (= ?x77 ?x83)))))))))))
 ))
 (let (($x94 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x201 (_ bv1 32))))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (= $x112 $x223)))))))
 ))
 (let (($x277 (forall ((Lambda5 (_ BitVec 32)) )(let (($x297 (= false false)))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x197 (_ bv0 32))))
 (=> $x33 $x297))))))
 ))
 (let (($x211 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x201 (_ bv0 32))))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x197 (_ bv0 32))))
 (= $x33 $x63)))))))
 ))
 (let (($x11 (and $x211 $x277)))
 (let (($x135 (and $x11 $x94)))
 (let (($x129 (and $x135 $x332)))
 (let (($x307 (= $x129 true)))
 (let (($x53 (= $x307 true)))
 (let ((?x150 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x65 (= (_ bv0 2) ?x150)))
 (let (($x101 (= $x65 true)))
 (let (($x256 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x203 input.dst.llvm-%m1)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x255))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv2 32))) ?x306)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv3 32))) ?x19)))
 (let ((?x77 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (=> $x112 (= ?x77 ?x143))))))))))))
 ))
 (let (($x14 (and $x135 $x256)))
 (let (($x95 (= $x14 true)))
 (let (($x310 (= $x95 true)))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x203 input.dst.llvm-%m1)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x255))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv2 32))) ?x306)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv3 32))) ?x19)))
 (let ((?x177 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x72 (_ bv1 32))))
 (=> $x149 (= ?x177 ?x143))))))))))))
 ))
 (let (($x161 (and $x156 $x292)))
 (let (($x300 (= $x161 true)))
 (let (($x116 (= $x300 true)))
 (let (($x266 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x203 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x134 (bvadd ?x203 input.dst.llvm-%m2)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x134))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x134 (_ bv2 32))) ?x84)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x134 (_ bv3 32))) ?x254)))
 (let ((?x23 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (=> $x175 (= ?x23 ?x236))))))))))))
 ))
 (let (($x131 (and $x122 $x266)))
 (let (($x56 (= $x131 true)))
 (let (($x238 (= $x56 true)))
 (let (($x302 (and $x238 $x116)))
 (let (($x198 (and $x302 $x310)))
 (let (($x212 (and $x198 $x101)))
 (let (($x118 (and $x212 $x53)))
 (let (($x155 (and $x118 $x42)))
 (let (($x96 (and $x155 $x219)))
 (let (($x88 (and $x96 $x276)))
 (let (($x105 (and $x88 $x317)))
 (let (($x346 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x177 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x77 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (=> $x112 (= ?x77 ?x177))))))))
 ))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x72 (_ bv1 32))))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x197 (_ bv1 32))))
 (= $x112 $x149))))))))
 ))
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let (($x144 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x144 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x72 (_ bv0 32))))
 (let (($x151 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x197 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x197 (_ bv0 32))))
 (= $x33 $x206))))))))
 ))
 (let (($x242 (and $x224 $x277)))
 (let (($x102 (and $x242 $x187)))
 (let (($x348 (and $x102 $x346)))
 (let (($x180 (and $x348 $x105)))
 (let (($x341 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x244 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x23 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (=> $x175 (= ?x23 ?x244))))))))
 ))
 (let (($x263 (forall ((Lambda5 (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x145 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x126 (_ bv1 32))))
 (= $x175 (bvuge ?x145 (_ bv1 32)))))))))
 ))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x145 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x126 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x126 (_ bv0 32))))
 (= $x278 (= ?x145 (_ bv0 32)))))))))
 ))
 (let (($x237 (and $x169 $x132)))
 (let (($x125 (and $x237 $x263)))
 (let (($x130 (and $x125 $x341)))
 (let (($x139 (and $x130 $x180)))
 (let (($x103 (=> $x139 $x21)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x358 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x124 (bvneg ?x358)))
 (let (($x312 (= ?x124 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x171 (= $x312 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x137 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x200 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x51 (and $x200 $x137)))
 (let (($x249 (and $x51 $x269)))
 (let (($x60 (= $x249 true)))
 (let (($x360 (= $x60 true)))
 (let ((?x114 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x191 (= (_ bv0 32) ?x114)))
 (let ((?x293 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x41 (= (_ bv0 32) ?x293)))
 (let ((?x288 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x230 $x120)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (and $x45 $x110)))
 (let (($x179 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x328 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x62 $x328)))
 (let (($x166 (not $x153)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x357 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x357 $x91)))
 (let (($x232 (and (not $x220) $x166)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x351 (and $x296 $x349)))
 (let (($x353 (not $x351)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x109 $x196)))
 (let (($x356 (and (not $x329) $x353)))
 (let (($x97 (and (and (and (and (and (and $x356 $x232) $x222) $x179) $x314) $x86) $x41)))
 (let (($x305 (and $x97 $x191)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x233 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x336 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x233)))
 (let (($x334 (or false (or false (and (and true (or $x148 $x336)) (or $x241 $x27))))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x334)))
 (let (($x321 (and $x205 $x305)))
 (let (($x301 (= $x321 true)))
 (let (($x165 (= $x301 true)))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x261 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x221))))
 (let ((?x55 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x223 (_ bv1 32))))
 (=> $x160 (= ?x55 ?x88)))))))))))
 ))
 (let (($x42 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x309 (_ bv1 32))))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x223 (_ bv1 32))))
 (= $x160 $x85)))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let (($x244 (= false false)))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x223 (_ bv0 32))))
 (=> $x49 $x244))))))
 ))
 (let (($x202 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x309 (_ bv0 32))))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x223 (_ bv0 32))))
 (= $x49 $x283)))))))
 ))
 (let (($x136 (and $x202 $x39)))
 (let (($x155 (and $x136 $x42)))
 (let (($x213 (and $x155 $x138)))
 (let (($x82 (= $x213 true)))
 (let (($x295 (= $x82 true)))
 (let (($x231 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x30 input.dst.llvm-%m2)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x31))))
 (let ((?x277 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (=> $x72 (= ?x277 ?x16)))))))))))
 ))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x309 (_ bv1 32))))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (= $x72 $x85)))))))
 ))
 (let (($x341 (forall ((Lambda5 (_ BitVec 32)) )(let (($x244 (= false false)))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (=> $x263 $x244))))))
 ))
 (let (($x327 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x309 (_ bv0 32))))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (= $x263 $x283)))))))
 ))
 (let (($x306 (and $x327 $x341)))
 (let (($x161 (and $x306 $x292)))
 (let (($x98 (and $x161 $x231)))
 (let (($x100 (= $x98 true)))
 (let (($x265 (= $x100 true)))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x261 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x221))))
 (let ((?x254 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (=> $x248 (= ?x254 ?x88)))))))))))
 ))
 (let (($x240 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x309 (_ bv1 32))))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (= $x248 $x85)))))))
 ))
 (let (($x134 (forall ((Lambda5 (_ BitVec 32)) )(let (($x244 (= false false)))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x217 (_ bv0 32))))
 (=> $x122 $x244))))))
 ))
 (let (($x32 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x309 (_ bv0 32))))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x217 (_ bv0 32))))
 (= $x122 $x283)))))))
 ))
 (let (($x74 (and $x32 $x134)))
 (let (($x239 (and $x74 $x240)))
 (let (($x67 (and $x239 $x234)))
 (let (($x193 (= $x67 true)))
 (let (($x228 (= $x193 true)))
 (let ((?x319 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x303 (= (_ bv0 2) ?x319)))
 (let (($x127 (= $x303 true)))
 (let (($x315 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x261 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x261))))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv2 32))) ?x285)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv3 32))) ?x338)))
 (let ((?x254 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (=> $x248 (= ?x254 ?x340))))))))))))
 ))
 (let (($x117 (and $x239 $x315)))
 (let (($x322 (= $x117 true)))
 (let (($x76 (= $x322 true)))
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x261 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x261))))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv2 32))) ?x285)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv3 32))) ?x338)))
 (let ((?x55 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x223 (_ bv1 32))))
 (=> $x160 (= ?x55 ?x340))))))))))))
 ))
 (let (($x190 (and $x155 $x147)))
 (let (($x320 (= $x190 true)))
 (let (($x279 (= $x320 true)))
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x30 input.dst.llvm-%m2)))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x61)))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x43)))
 (let ((?x277 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (=> $x72 (= ?x277 ?x129))))))))))))
 ))
 (let (($x119 (and $x161 $x118)))
 (let (($x141 (= $x119 true)))
 (let (($x99 (= $x141 true)))
 (let (($x24 (and $x99 $x279)))
 (let (($x192 (and $x24 $x76)))
 (let (($x250 (and $x192 $x127)))
 (let (($x245 (and $x250 $x228)))
 (let (($x128 (and $x245 $x265)))
 (let (($x313 (and $x128 $x295)))
 (let (($x294 (and $x313 $x165)))
 (let (($x359 (and $x294 $x360)))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x55 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x254 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (=> $x248 (= ?x254 ?x55))))))))
 ))
 (let (($x87 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x223 (_ bv1 32))))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (= $x248 $x160))))))))
 ))
 (let (($x326 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x223 (_ bv0 32))))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x217 (_ bv0 32))))
 (= $x122 $x49))))))))
 ))
 (let (($x121 (and $x326 $x134)))
 (let (($x208 (and $x121 $x87)))
 (let (($x258 (and $x208 $x142)))
 (let (($x210 (and $x258 $x359)))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x149 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x277 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (=> $x72 (= ?x277 ?x149))))))))
 ))
 (let (($x44 (forall ((Lambda5 (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x175 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (= $x72 (bvuge ?x175 (_ bv1 32)))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x175 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (= $x263 (= ?x175 (_ bv0 32)))))))))
 ))
 (let (($x130 (and $x23 $x341)))
 (let (($x224 (and $x130 $x44)))
 (let (($x345 (and $x224 $x347)))
 (let (($x229 (and $x345 $x210)))
 (let (($x90 (=> $x229 $x171)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x358 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x124 (bvneg ?x358)))
 (let (($x312 (= ?x124 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x171 (= $x312 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x137 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x200 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x51 (and $x200 $x137)))
 (let (($x249 (and $x51 $x269)))
 (let (($x60 (= $x249 true)))
 (let (($x360 (= $x60 true)))
 (let ((?x114 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x191 (= (_ bv0 32) ?x114)))
 (let ((?x293 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x41 (= (_ bv0 32) ?x293)))
 (let ((?x288 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x110 (and $x230 $x120)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (and $x45 $x110)))
 (let (($x179 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x328 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x62 $x328)))
 (let (($x166 (not $x153)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x357 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x357 $x91)))
 (let (($x232 (and (not $x220) $x166)))
 (let (($x349 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x296 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x351 (and $x296 $x349)))
 (let (($x353 (not $x351)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x109 $x196)))
 (let (($x356 (and (not $x329) $x353)))
 (let (($x97 (and (and (and (and (and (and $x356 $x232) $x222) $x179) $x314) $x86) $x41)))
 (let (($x305 (and $x97 $x191)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x233 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x336 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x233)))
 (let (($x334 (or false (or false (and (and true (or $x148 $x336)) (or $x241 $x27))))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x334)))
 (let (($x321 (and $x205 $x305)))
 (let (($x301 (= $x321 true)))
 (let (($x165 (= $x301 true)))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x261 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x221))))
 (let ((?x55 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x223 (_ bv1 32))))
 (=> $x160 (= ?x55 ?x88)))))))))))
 ))
 (let (($x42 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x309 (_ bv1 32))))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x223 (_ bv1 32))))
 (= $x160 $x85)))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let (($x244 (= false false)))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x223 (_ bv0 32))))
 (=> $x49 $x244))))))
 ))
 (let (($x202 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x309 (_ bv0 32))))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x223 (_ bv0 32))))
 (= $x49 $x283)))))))
 ))
 (let (($x136 (and $x202 $x39)))
 (let (($x155 (and $x136 $x42)))
 (let (($x213 (and $x155 $x138)))
 (let (($x82 (= $x213 true)))
 (let (($x295 (= $x82 true)))
 (let (($x231 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x30 input.dst.llvm-%m2)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x31))))
 (let ((?x277 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (=> $x72 (= ?x277 ?x16)))))))))))
 ))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x309 (_ bv1 32))))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (= $x72 $x85)))))))
 ))
 (let (($x341 (forall ((Lambda5 (_ BitVec 32)) )(let (($x244 (= false false)))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (=> $x263 $x244))))))
 ))
 (let (($x327 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x309 (_ bv0 32))))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (= $x263 $x283)))))))
 ))
 (let (($x306 (and $x327 $x341)))
 (let (($x161 (and $x306 $x292)))
 (let (($x98 (and $x161 $x231)))
 (let (($x100 (= $x98 true)))
 (let (($x265 (= $x100 true)))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x261 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem ?x261))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x261 (_ bv2 32))) ?x221))))
 (let ((?x254 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (=> $x248 (= ?x254 ?x88)))))))))))
 ))
 (let (($x240 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x309 (_ bv1 32))))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (= $x248 $x85)))))))
 ))
 (let (($x134 (forall ((Lambda5 (_ BitVec 32)) )(let (($x244 (= false false)))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x217 (_ bv0 32))))
 (=> $x122 $x244))))))
 ))
 (let (($x32 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x309 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x309 (_ bv0 32))))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x217 (_ bv0 32))))
 (= $x122 $x283)))))))
 ))
 (let (($x74 (and $x32 $x134)))
 (let (($x239 (and $x74 $x240)))
 (let (($x67 (and $x239 $x234)))
 (let (($x193 (= $x67 true)))
 (let (($x228 (= $x193 true)))
 (let ((?x319 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x303 (= (_ bv0 2) ?x319)))
 (let (($x127 (= $x303 true)))
 (let (($x315 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x261 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x261))))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv2 32))) ?x285)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv3 32))) ?x338)))
 (let ((?x254 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (=> $x248 (= ?x254 ?x340))))))))))))
 ))
 (let (($x117 (and $x239 $x315)))
 (let (($x322 (= $x117 true)))
 (let (($x76 (= $x322 true)))
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x261 (bvadd ?x30 input.dst.llvm-%m1)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x261))))
 (let ((?x338 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv2 32))) ?x285)))
 (let ((?x340 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x261 (_ bv3 32))) ?x338)))
 (let ((?x55 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x223 (_ bv1 32))))
 (=> $x160 (= ?x55 ?x340))))))))))))
 ))
 (let (($x190 (and $x155 $x147)))
 (let (($x320 (= $x190 true)))
 (let (($x279 (= $x320 true)))
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x30 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x30 input.dst.llvm-%m2)))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x61)))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x43)))
 (let ((?x277 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (=> $x72 (= ?x277 ?x129))))))))))))
 ))
 (let (($x119 (and $x161 $x118)))
 (let (($x141 (= $x119 true)))
 (let (($x99 (= $x141 true)))
 (let (($x24 (and $x99 $x279)))
 (let (($x192 (and $x24 $x76)))
 (let (($x250 (and $x192 $x127)))
 (let (($x245 (and $x250 $x228)))
 (let (($x128 (and $x245 $x265)))
 (let (($x313 (and $x128 $x295)))
 (let (($x294 (and $x313 $x165)))
 (let (($x359 (and $x294 $x360)))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x55 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x254 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (=> $x248 (= ?x254 ?x55))))))))
 ))
 (let (($x87 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x223 (_ bv1 32))))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x217 (_ bv1 32))))
 (= $x248 $x160))))))))
 ))
 (let (($x326 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x223 (ite $x201 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x223 (_ bv0 32))))
 (let (($x348 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x217 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x122 (= ?x217 (_ bv0 32))))
 (= $x122 $x49))))))))
 ))
 (let (($x121 (and $x326 $x134)))
 (let (($x208 (and $x121 $x87)))
 (let (($x258 (and $x208 $x142)))
 (let (($x210 (and $x258 $x359)))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x149 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x277 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (=> $x72 (= ?x277 ?x149))))))))
 ))
 (let (($x44 (forall ((Lambda5 (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x175 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x57 (_ bv1 32))))
 (= $x72 (bvuge ?x175 (_ bv1 32)))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x175 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x57 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (= ?x57 (_ bv0 32))))
 (= $x263 (= ?x175 (_ bv0 32)))))))))
 ))
 (let (($x130 (and $x23 $x341)))
 (let (($x224 (and $x130 $x44)))
 (let (($x345 (and $x224 $x347)))
 (let (($x229 (and $x345 $x210)))
 (let (($x90 (=> $x229 $x171)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x317 (= $x140 true)))
 (let ((?x37 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x7 (= (_ bv0 2) ?x37)))
 (let (($x105 (= $x7 true)))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x52 (bvadd ?x80 input.dst.llvm-%m2)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x108))))
 (let ((?x134 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (=> $x223 (= ?x134 ?x227)))))))))))
 ))
 (let (($x112 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x188 (_ bv1 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (= $x223 $x190)))))))
 ))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let (($x149 (= false false)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x206 (_ bv0 32))))
 (=> $x44 $x149))))))
 ))
 (let (($x151 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x188 (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x206 (_ bv0 32))))
 (= $x44 $x246)))))))
 ))
 (let (($x197 (and $x151 $x347)))
 (let (($x187 (and $x197 $x112)))
 (let (($x113 (and $x187 $x275)))
 (let (($x354 (= $x113 true)))
 (let (($x28 (= $x354 true)))
 (let (($x101 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x94 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x135 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x59 (and $x135 $x94)))
 (let (($x212 (and $x59 $x101)))
 (let (($x22 (= $x212 true)))
 (let (($x35 (= $x22 true)))
 (let (($x143 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x52 (bvadd ?x80 input.dst.llvm-%m2)))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x52))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv2 32))) ?x131)))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv3 32))) ?x17)))
 (let ((?x134 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (=> $x223 (= ?x134 ?x38))))))))))))
 ))
 (let (($x211 (and $x187 $x143)))
 (let (($x282 (= $x211 true)))
 (let (($x271 (= $x282 true)))
 (let ((?x318 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x302 (= (_ bv0 32) ?x318)))
 (let ((?x290 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x116 (= (_ bv0 32) ?x290)))
 (let ((?x171 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x281 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x281)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x229 $x358)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x210 $x124)))
 (let (($x359 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (and $x173 $x137)))
 (let (($x257 (not $x51)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x168 $x157)))
 (let (($x269 (and (not $x200) $x257)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x321 (and $x191 $x305)))
 (let (($x301 (not $x321)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x232 $x264)))
 (let (($x294 (and (not $x114) $x301)))
 (let (($x176 (and (and (and (and (and (and $x294 $x269) $x60) $x359) $x312) $x90) $x116)))
 (let (($x145 (and $x176 $x302)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x179)))
 (let (($x293 (or false (or false (and (and true (or $x71 $x45)) (or $x314 $x58))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x293)))
 (let (($x123 (and $x97 $x145)))
 (let (($x182 (= $x123 true)))
 (let (($x330 (= $x182 true)))
 (let (($x220 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x273 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x93))))
 (let ((?x53 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x85 (_ bv1 32))))
 (=> $x106 (= ?x53 ?x205)))))))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x188 (_ bv1 32))))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x85 (_ bv1 32))))
 (= $x106 $x190)))))))
 ))
 (let (($x340 (forall ((Lambda5 (_ BitVec 32)) )(let (($x149 (= false false)))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x85 (_ bv0 32))))
 (=> $x29 $x149))))))
 ))
 (let (($x181 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x188 (_ bv0 32))))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x85 (_ bv0 32))))
 (= $x29 $x246)))))))
 ))
 (let (($x344 (and $x181 $x340)))
 (let (($x24 (and $x344 $x279)))
 (let (($x8 (and $x24 $x220)))
 (let (($x62 (= $x8 true)))
 (let (($x328 (= $x62 true)))
 (let (($x329 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x273 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x93))))
 (let ((?x43 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (=> $x83 (= ?x43 ?x205)))))))))))
 ))
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x188 (_ bv1 32))))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (= $x83 $x190)))))))
 ))
 (let (($x291 (forall ((Lambda5 (_ BitVec 32)) )(let (($x149 (= false false)))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x292 (_ bv0 32))))
 (=> $x161 $x149))))))
 ))
 (let (($x324 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x188 (_ bv0 32))))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x292 (_ bv0 32))))
 (= $x161 $x246)))))))
 ))
 (let (($x231 (and $x324 $x291)))
 (let (($x128 (and $x231 $x265)))
 (let (($x355 (and $x128 $x329)))
 (let (($x296 (= $x355 true)))
 (let (($x349 (= $x296 true)))
 (let (($x82 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x273 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x273))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv2 32))) ?x20)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv3 32))) ?x67)))
 (let ((?x43 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (=> $x83 (= ?x43 ?x245))))))))))))
 ))
 (let (($x295 (and $x128 $x82)))
 (let (($x313 (= $x295 true)))
 (let (($x18 (= $x313 true)))
 (let (($x204 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x273 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x273))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv2 32))) ?x20)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv3 32))) ?x67)))
 (let ((?x53 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x85 (_ bv1 32))))
 (=> $x106 (= ?x53 ?x245))))))))))))
 ))
 (let (($x12 (and $x24 $x204)))
 (let (($x31 (= $x12 true)))
 (let (($x103 (= $x31 true)))
 (let (($x158 (and $x103 $x18)))
 (let (($x351 (and $x158 $x349)))
 (let (($x153 (and $x351 $x328)))
 (let (($x132 (and $x153 $x330)))
 (let (($x150 (and $x132 $x271)))
 (let (($x159 (and $x150 $x35)))
 (let (($x66 (and $x159 $x28)))
 (let (($x70 (and $x66 $x105)))
 (let (($x202 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x43 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (=> $x83 (= ?x43 ?x53))))))))
 ))
 (let (($x154 (forall ((Lambda5 (_ BitVec 32)) )(let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x85 (_ bv1 32))))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (= $x83 $x106))))))))
 ))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x85 (_ bv0 32))))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x292 (_ bv0 32))))
 (= $x161 $x29))))))))
 ))
 (let (($x198 (and $x214 $x291)))
 (let (($x195 (and $x198 $x154)))
 (let (($x36 (and $x195 $x202)))
 (let (($x64 (and $x36 $x70)))
 (let (($x238 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x160 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x134 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (=> $x223 (= ?x134 ?x160))))))))
 ))
 (let (($x289 (forall ((Lambda5 (_ BitVec 32)) )(let (($x23 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (= $x223 (bvuge ?x72 (_ bv1 32)))))))))
 ))
 (let (($x277 (forall ((Lambda5 (_ BitVec 32)) )(let (($x23 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x206 (_ bv0 32))))
 (= $x44 (= ?x72 (_ bv0 32)))))))))
 ))
 (let (($x345 (and $x277 $x347)))
 (let (($x326 (and $x345 $x289)))
 (let (($x54 (and $x326 $x238)))
 (let (($x185 (and $x54 $x64)))
 (let (($x180 (=> $x185 $x317)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x140 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x317 (= $x140 true)))
 (let ((?x37 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x7 (= (_ bv0 2) ?x37)))
 (let (($x105 (= $x7 true)))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x52 (bvadd ?x80 input.dst.llvm-%m2)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x108))))
 (let ((?x134 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (=> $x223 (= ?x134 ?x227)))))))))))
 ))
 (let (($x112 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x188 (_ bv1 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (= $x223 $x190)))))))
 ))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let (($x149 (= false false)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x206 (_ bv0 32))))
 (=> $x44 $x149))))))
 ))
 (let (($x151 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x188 (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x206 (_ bv0 32))))
 (= $x44 $x246)))))))
 ))
 (let (($x197 (and $x151 $x347)))
 (let (($x187 (and $x197 $x112)))
 (let (($x113 (and $x187 $x275)))
 (let (($x354 (= $x113 true)))
 (let (($x28 (= $x354 true)))
 (let (($x101 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x94 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x135 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x59 (and $x135 $x94)))
 (let (($x212 (and $x59 $x101)))
 (let (($x22 (= $x212 true)))
 (let (($x35 (= $x22 true)))
 (let (($x143 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x52 (bvadd ?x80 input.dst.llvm-%m2)))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x52))))
 (let ((?x17 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv2 32))) ?x131)))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv3 32))) ?x17)))
 (let ((?x134 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (=> $x223 (= ?x134 ?x38))))))))))))
 ))
 (let (($x211 (and $x187 $x143)))
 (let (($x282 (= $x211 true)))
 (let (($x271 (= $x282 true)))
 (let ((?x318 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x302 (= (_ bv0 32) ?x318)))
 (let ((?x290 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x116 (= (_ bv0 32) ?x290)))
 (let ((?x171 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x281 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x281)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x229 $x358)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x210 $x124)))
 (let (($x359 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (and $x173 $x137)))
 (let (($x257 (not $x51)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x168 $x157)))
 (let (($x269 (and (not $x200) $x257)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x321 (and $x191 $x305)))
 (let (($x301 (not $x321)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x232 $x264)))
 (let (($x294 (and (not $x114) $x301)))
 (let (($x176 (and (and (and (and (and (and $x294 $x269) $x60) $x359) $x312) $x90) $x116)))
 (let (($x145 (and $x176 $x302)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x179)))
 (let (($x293 (or false (or false (and (and true (or $x71 $x45)) (or $x314 $x58))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x293)))
 (let (($x123 (and $x97 $x145)))
 (let (($x182 (= $x123 true)))
 (let (($x330 (= $x182 true)))
 (let (($x220 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x273 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x93))))
 (let ((?x53 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x85 (_ bv1 32))))
 (=> $x106 (= ?x53 ?x205)))))))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x188 (_ bv1 32))))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x85 (_ bv1 32))))
 (= $x106 $x190)))))))
 ))
 (let (($x340 (forall ((Lambda5 (_ BitVec 32)) )(let (($x149 (= false false)))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x85 (_ bv0 32))))
 (=> $x29 $x149))))))
 ))
 (let (($x181 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x188 (_ bv0 32))))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x85 (_ bv0 32))))
 (= $x29 $x246)))))))
 ))
 (let (($x344 (and $x181 $x340)))
 (let (($x24 (and $x344 $x279)))
 (let (($x8 (and $x24 $x220)))
 (let (($x62 (= $x8 true)))
 (let (($x328 (= $x62 true)))
 (let (($x329 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x273 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x93))))
 (let ((?x43 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (=> $x83 (= ?x43 ?x205)))))))))))
 ))
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x188 (_ bv1 32))))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (= $x83 $x190)))))))
 ))
 (let (($x291 (forall ((Lambda5 (_ BitVec 32)) )(let (($x149 (= false false)))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x292 (_ bv0 32))))
 (=> $x161 $x149))))))
 ))
 (let (($x324 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x188 (_ bv0 32))))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x292 (_ bv0 32))))
 (= $x161 $x246)))))))
 ))
 (let (($x231 (and $x324 $x291)))
 (let (($x128 (and $x231 $x265)))
 (let (($x355 (and $x128 $x329)))
 (let (($x296 (= $x355 true)))
 (let (($x349 (= $x296 true)))
 (let (($x82 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x273 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x273))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv2 32))) ?x20)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv3 32))) ?x67)))
 (let ((?x43 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (=> $x83 (= ?x43 ?x245))))))))))))
 ))
 (let (($x295 (and $x128 $x82)))
 (let (($x313 (= $x295 true)))
 (let (($x18 (= $x313 true)))
 (let (($x204 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x273 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x20 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x273))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv2 32))) ?x20)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x273 (_ bv3 32))) ?x67)))
 (let ((?x53 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x85 (_ bv1 32))))
 (=> $x106 (= ?x53 ?x245))))))))))))
 ))
 (let (($x12 (and $x24 $x204)))
 (let (($x31 (= $x12 true)))
 (let (($x103 (= $x31 true)))
 (let (($x158 (and $x103 $x18)))
 (let (($x351 (and $x158 $x349)))
 (let (($x153 (and $x351 $x328)))
 (let (($x132 (and $x153 $x330)))
 (let (($x150 (and $x132 $x271)))
 (let (($x159 (and $x150 $x35)))
 (let (($x66 (and $x159 $x28)))
 (let (($x70 (and $x66 $x105)))
 (let (($x202 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x43 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (=> $x83 (= ?x43 ?x53))))))))
 ))
 (let (($x154 (forall ((Lambda5 (_ BitVec 32)) )(let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x85 (_ bv1 32))))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x292 (_ bv1 32))))
 (= $x83 $x106))))))))
 ))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let (($x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x85 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x85 (_ bv0 32))))
 (let (($x258 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x292 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x292 (_ bv0 32))))
 (= $x161 $x29))))))))
 ))
 (let (($x198 (and $x214 $x291)))
 (let (($x195 (and $x198 $x154)))
 (let (($x36 (and $x195 $x202)))
 (let (($x64 (and $x36 $x70)))
 (let (($x238 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x160 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x134 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (=> $x223 (= ?x134 ?x160))))))))
 ))
 (let (($x289 (forall ((Lambda5 (_ BitVec 32)) )(let (($x23 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x206 (_ bv1 32))))
 (= $x223 (bvuge ?x72 (_ bv1 32)))))))))
 ))
 (let (($x277 (forall ((Lambda5 (_ BitVec 32)) )(let (($x23 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x72 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x206 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (= ?x206 (_ bv0 32))))
 (= $x44 (= ?x72 (_ bv0 32)))))))))
 ))
 (let (($x345 (and $x277 $x347)))
 (let (($x326 (and $x345 $x289)))
 (let (($x54 (and $x326 $x238)))
 (let (($x185 (and $x54 $x64)))
 (let (($x180 (=> $x185 $x317)))
 (not $x180))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc6163814)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x32583c08)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x32583c0b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc6163817)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x32583c08)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc6163814)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00400003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00400002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00400001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00400000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x00400003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00400002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00400001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00400000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x298 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x40 (= (_ bv0 3) ?x298)))
 (let (($x219 (= $x40 true)))
 (let ((?x252 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x325 (= (_ bv0 2) ?x252)))
 (let (($x96 (= $x325 true)))
 (let (($x266 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x307 (bvadd ?x120 input.dst.llvm-%m2)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x33))))
 (let ((?x11 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (=> $x309 (= ?x11 ?x352)))))))))))
 ))
 (let (($x333 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x313 (_ bv1 32))))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (= $x309 $x205)))))))
 ))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (= false false)))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x201 (_ bv0 32))))
 (=> $x49 $x134))))))
 ))
 (let (($x163 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x313 (_ bv0 32))))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x201 (_ bv0 32))))
 (= $x49 $x18)))))))
 ))
 (let (($x248 (and $x163 $x55)))
 (let (($x129 (and $x248 $x333)))
 (let (($x236 (and $x129 $x266)))
 (let (($x346 (= $x236 true)))
 (let (($x104 (= $x346 true)))
 (let (($x16 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x319 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x78 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x350 (and $x78 $x319)))
 (let (($x98 (and $x350 $x16)))
 (let (($x133 (= $x98 true)))
 (let (($x9 (= $x133 true)))
 (let (($x5 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x307 (bvadd ?x120 input.dst.llvm-%m2)))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x307))))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x307 (_ bv2 32))) ?x75)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x307 (_ bv3 32))) ?x284)))
 (let ((?x11 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (=> $x309 (= ?x11 ?x170))))))))))))
 ))
 (let (($x127 (and $x129 $x5)))
 (let (($x250 (= $x127 true)))
 (let (($x192 (= $x250 true)))
 (let ((?x57 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x121 (= (_ bv0 32) ?x57)))
 (let ((?x74 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x186 (= (_ bv0 32) ?x74)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x140 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x185 $x317)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x64 $x180)))
 (let (($x70 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x354 (and $x275 $x113)))
 (let (($x28 (not $x354)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x227 $x299)))
 (let (($x331 (and (not $x184) $x28)))
 (let (($x342 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x194 $x342)))
 (let (($x337 (not $x92)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x17 $x38)))
 (let (($x270 (and (not $x159) $x337)))
 (let (($x125 (and (and (and (and (and (and $x270 $x331) $x7) $x70) $x139) $x166) $x186)))
 (let (($x199 (and $x125 $x121)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x212 (or false (or false (and (and true (or $x271 $x150)) (or $x94 $x59))))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x212)))
 (let (($x341 (and $x35 $x199)))
 (let (($x130 (= $x341 true)))
 (let (($x77 (= $x130 true)))
 (let (($x56 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x314 (bvadd ?x120 input.dst.llvm-%m1)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x318))))
 (let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x338 (_ bv1 32))))
 (=> $x193 (= ?x67 ?x182)))))))))))
 ))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x313 (_ bv1 32))))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x338 (_ bv1 32))))
 (= $x193 $x205)))))))
 ))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (= false false)))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (=> $x340 $x134))))))
 ))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x313 (_ bv0 32))))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (= $x340 $x18)))))))
 ))
 (let (($x251 (and $x111 $x27)))
 (let (($x329 (and $x251 $x196)))
 (let (($x50 (and $x329 $x56)))
 (let (($x84 (= $x50 true)))
 (let (($x107 (= $x84 true)))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x314 (bvadd ?x120 input.dst.llvm-%m1)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x318))))
 (let ((?x88 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (=> $x228 (= ?x88 ?x182)))))))))))
 ))
 (let (($x51 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x313 (_ bv1 32))))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (= $x228 $x205)))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (= false false)))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x344 (_ bv0 32))))
 (=> $x190 $x134))))))
 ))
 (let (($x200 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x313 (_ bv0 32))))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x344 (_ bv0 32))))
 (= $x190 $x18)))))))
 ))
 (let (($x209 (and $x200 $x69)))
 (let (($x257 (and $x209 $x51)))
 (let (($x151 (and $x257 $x26)))
 (let (($x197 (= $x151 true)))
 (let (($x178 (= $x197 true)))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x314 (bvadd ?x120 input.dst.llvm-%m1)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x314))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv2 32))) ?x86)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv3 32))) ?x97)))
 (let ((?x88 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (=> $x228 (= ?x88 ?x114))))))))))))
 ))
 (let (($x360 (and $x257 $x126)))
 (let (($x359 (= $x360 true)))
 (let (($x242 (= $x359 true)))
 (let (($x305 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x314 (bvadd ?x120 input.dst.llvm-%m1)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x314))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv2 32))) ?x86)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv3 32))) ?x97)))
 (let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x338 (_ bv1 32))))
 (=> $x193 (= ?x67 ?x114))))))))))))
 ))
 (let (($x321 (and $x329 $x305)))
 (let (($x301 (= $x321 true)))
 (let (($x294 (= $x301 true)))
 (let (($x210 (and $x294 $x242)))
 (let (($x112 (and $x210 $x178)))
 (let (($x115 (and $x112 $x107)))
 (let (($x348 (and $x115 $x77)))
 (let (($x243 (and $x348 $x192)))
 (let (($x25 (and $x243 $x9)))
 (let (($x6 (and $x25 $x104)))
 (let (($x343 (and $x6 $x96)))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x88 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (=> $x228 (= ?x88 ?x67))))))))
 ))
 (let (($x304 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x338 (_ bv1 32))))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (= $x228 $x193))))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x344 (_ bv0 32))))
 (= $x190 $x340))))))))
 ))
 (let (($x80 (and $x279 $x69)))
 (let (($x234 (and $x80 $x304)))
 (let (($x103 (and $x234 $x31)))
 (let (($x79 (and $x103 $x343)))
 (let (($x53 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x83 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x11 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (=> $x309 (= ?x11 ?x83))))))))
 ))
 (let (($x29 (forall ((Lambda5 (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x345 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (= $x309 (bvuge ?x345 (_ bv1 32)))))))))
 ))
 (let (($x326 (forall ((Lambda5 (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x345 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x201 (_ bv0 32))))
 (= $x49 (= ?x345 (_ bv0 32)))))))))
 ))
 (let (($x238 (and $x326 $x55)))
 (let (($x300 (and $x238 $x29)))
 (let (($x99 (and $x300 $x53)))
 (let (($x287 (and $x99 $x79)))
 (let (($x235 (=> $x287 $x219)))
 (not $x235)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x298 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x40 (= (_ bv0 3) ?x298)))
 (let (($x219 (= $x40 true)))
 (let ((?x252 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x325 (= (_ bv0 2) ?x252)))
 (let (($x96 (= $x325 true)))
 (let (($x266 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x307 (bvadd ?x120 input.dst.llvm-%m2)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem ?x307))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x307 (_ bv2 32))) ?x33))))
 (let ((?x11 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (=> $x309 (= ?x11 ?x352)))))))))))
 ))
 (let (($x333 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x313 (_ bv1 32))))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (= $x309 $x205)))))))
 ))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (= false false)))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x201 (_ bv0 32))))
 (=> $x49 $x134))))))
 ))
 (let (($x163 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x313 (_ bv0 32))))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x201 (_ bv0 32))))
 (= $x49 $x18)))))))
 ))
 (let (($x248 (and $x163 $x55)))
 (let (($x129 (and $x248 $x333)))
 (let (($x236 (and $x129 $x266)))
 (let (($x346 (= $x236 true)))
 (let (($x104 (= $x346 true)))
 (let (($x16 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x319 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x78 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x350 (and $x78 $x319)))
 (let (($x98 (and $x350 $x16)))
 (let (($x133 (= $x98 true)))
 (let (($x9 (= $x133 true)))
 (let (($x5 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x307 (bvadd ?x120 input.dst.llvm-%m2)))
 (let ((?x75 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x307 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x307))))
 (let ((?x284 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x307 (_ bv2 32))) ?x75)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x307 (_ bv3 32))) ?x284)))
 (let ((?x11 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (=> $x309 (= ?x11 ?x170))))))))))))
 ))
 (let (($x127 (and $x129 $x5)))
 (let (($x250 (= $x127 true)))
 (let (($x192 (= $x250 true)))
 (let ((?x57 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x121 (= (_ bv0 32) ?x57)))
 (let ((?x74 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x186 (= (_ bv0 32) ?x74)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x140 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x185 $x317)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x64 $x180)))
 (let (($x70 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x354 (and $x275 $x113)))
 (let (($x28 (not $x354)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x227 $x299)))
 (let (($x331 (and (not $x184) $x28)))
 (let (($x342 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x194 $x342)))
 (let (($x337 (not $x92)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x17 $x38)))
 (let (($x270 (and (not $x159) $x337)))
 (let (($x125 (and (and (and (and (and (and $x270 $x331) $x7) $x70) $x139) $x166) $x186)))
 (let (($x199 (and $x125 $x121)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x212 (or false (or false (and (and true (or $x271 $x150)) (or $x94 $x59))))))
 (let (($x35 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x212)))
 (let (($x341 (and $x35 $x199)))
 (let (($x130 (= $x341 true)))
 (let (($x77 (= $x130 true)))
 (let (($x56 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x314 (bvadd ?x120 input.dst.llvm-%m1)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x318))))
 (let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x338 (_ bv1 32))))
 (=> $x193 (= ?x67 ?x182)))))))))))
 ))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x313 (_ bv1 32))))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x338 (_ bv1 32))))
 (= $x193 $x205)))))))
 ))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (= false false)))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (=> $x340 $x134))))))
 ))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x313 (_ bv0 32))))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (= $x340 $x18)))))))
 ))
 (let (($x251 (and $x111 $x27)))
 (let (($x329 (and $x251 $x196)))
 (let (($x50 (and $x329 $x56)))
 (let (($x84 (= $x50 true)))
 (let (($x107 (= $x84 true)))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x314 (bvadd ?x120 input.dst.llvm-%m1)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem ?x314))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x314 (_ bv2 32))) ?x318))))
 (let ((?x88 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (=> $x228 (= ?x88 ?x182)))))))))))
 ))
 (let (($x51 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x313 (_ bv1 32))))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (= $x228 $x205)))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (= false false)))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x344 (_ bv0 32))))
 (=> $x190 $x134))))))
 ))
 (let (($x200 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x313 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x18 (= ?x313 (_ bv0 32))))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x344 (_ bv0 32))))
 (= $x190 $x18)))))))
 ))
 (let (($x209 (and $x200 $x69)))
 (let (($x257 (and $x209 $x51)))
 (let (($x151 (and $x257 $x26)))
 (let (($x197 (= $x151 true)))
 (let (($x178 (= $x197 true)))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x314 (bvadd ?x120 input.dst.llvm-%m1)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x314))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv2 32))) ?x86)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv3 32))) ?x97)))
 (let ((?x88 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (=> $x228 (= ?x88 ?x114))))))))))))
 ))
 (let (($x360 (and $x257 $x126)))
 (let (($x359 (= $x360 true)))
 (let (($x242 (= $x359 true)))
 (let (($x305 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x120 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x314 (bvadd ?x120 input.dst.llvm-%m1)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x314))))
 (let ((?x97 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv2 32))) ?x86)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x314 (_ bv3 32))) ?x97)))
 (let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x338 (_ bv1 32))))
 (=> $x193 (= ?x67 ?x114))))))))))))
 ))
 (let (($x321 (and $x329 $x305)))
 (let (($x301 (= $x321 true)))
 (let (($x294 (= $x301 true)))
 (let (($x210 (and $x294 $x242)))
 (let (($x112 (and $x210 $x178)))
 (let (($x115 (and $x112 $x107)))
 (let (($x348 (and $x115 $x77)))
 (let (($x243 (and $x348 $x192)))
 (let (($x25 (and $x243 $x9)))
 (let (($x6 (and $x25 $x104)))
 (let (($x343 (and $x6 $x96)))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x88 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (=> $x228 (= ?x88 ?x67))))))))
 ))
 (let (($x304 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x338 (_ bv1 32))))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x344 (_ bv1 32))))
 (= $x228 $x193))))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x338 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (let (($x202 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x344 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x344 (_ bv0 32))))
 (= $x190 $x340))))))))
 ))
 (let (($x80 (and $x279 $x69)))
 (let (($x234 (and $x80 $x304)))
 (let (($x103 (and $x234 $x31)))
 (let (($x79 (and $x103 $x343)))
 (let (($x53 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x83 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x11 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (=> $x309 (= ?x11 ?x83))))))))
 ))
 (let (($x29 (forall ((Lambda5 (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x345 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x201 (_ bv1 32))))
 (= $x309 (bvuge ?x345 (_ bv1 32)))))))))
 ))
 (let (($x326 (forall ((Lambda5 (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x345 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x201 (ite $x263 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x201 (_ bv0 32))))
 (= $x49 (= ?x345 (_ bv0 32)))))))))
 ))
 (let (($x238 (and $x326 $x55)))
 (let (($x300 (and $x238 $x29)))
 (let (($x99 (and $x300 $x53)))
 (let (($x287 (and $x99 $x79)))
 (let (($x235 (=> $x287 $x219)))
 (not $x235)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf277cf08)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd1e10d70)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd1e10d73)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf277cf0b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd1e10d70)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf277cf08)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x380 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x367 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x141)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv1 32))) (select input.dst.llvm-mem ?x367))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv2 32))) ?x371))))
 (let ((?x335 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (=> $x46 (= ?x335 ?x377)))))))))))
 ))
 (let (($x125 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x317 (_ bv1 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (= $x46 $x74)))))))
 ))
 (let (($x43 (forall ((Lambda5 (_ BitVec 32)) )(let (($x11 (= false false)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x161 (_ bv0 32))))
 (=> $x85 $x11))))))
 ))
 (let (($x175 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x317 (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x161 (_ bv0 32))))
 (= $x85 $x180)))))))
 ))
 (let (($x32 (and $x175 $x43)))
 (let (($x57 (and $x32 $x125)))
 (let (($x381 (and $x57 $x380)))
 (let (($x382 (= $x381 true)))
 (let (($x383 (= $x382 true)))
 (let (($x306 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x141 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x220))))
 (let ((?x97 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x226 (_ bv1 32))))
 (=> $x232 (= ?x97 ?x41)))))))))))
 ))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x317 (_ bv1 32))))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x226 (_ bv1 32))))
 (= $x232 $x74)))))))
 ))
 (let (($x6 (forall ((Lambda5 (_ BitVec 32)) )(let (($x11 (= false false)))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x226 (_ bv0 32))))
 (=> $x27 $x11))))))
 ))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x317 (_ bv0 32))))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x226 (_ bv0 32))))
 (= $x27 $x180)))))))
 ))
 (let (($x203 (and $x236 $x6)))
 (let (($x343 (and $x203 $x96)))
 (let (($x332 (and $x343 $x306)))
 (let (($x256 (= $x332 true)))
 (let (($x61 (= $x256 true)))
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x39 (bvadd ?x141 input.dst.llvm-%m2)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x90))))
 (let ((?x335 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (=> $x46 (= ?x335 ?x52)))))))))))
 ))
 (let (($x30 (and $x57 $x118)))
 (let (($x162 (= $x30 true)))
 (let (($x311 (= $x162 true)))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x141 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x220))))
 (let ((?x288 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (=> $x264 (= ?x288 ?x41)))))))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x317 (_ bv1 32))))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (= $x264 $x74)))))))
 ))
 (let (($x351 (forall ((Lambda5 (_ BitVec 32)) )(let (($x11 (= false false)))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x251 (_ bv0 32))))
 (=> $x205 $x11))))))
 ))
 (let (($x188 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x317 (_ bv0 32))))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x251 (_ bv0 32))))
 (= $x205 $x180)))))))
 ))
 (let (($x245 (and $x188 $x351)))
 (let (($x339 (and $x245 $x136)))
 (let (($x153 (and $x339 $x8)))
 (let (($x89 (= $x153 true)))
 (let (($x45 (= $x89 true)))
 (let (($x239 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x141 input.dst.llvm-%m1)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x23)))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x149)))
 (let ((?x288 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (=> $x264 (= ?x288 ?x160))))))))))))
 ))
 (let (($x273 (and $x339 $x239)))
 (let (($x303 (= $x273 true)))
 (let (($x268 (= $x303 true)))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x141 input.dst.llvm-%m1)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x23)))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x149)))
 (let ((?x97 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x226 (_ bv1 32))))
 (=> $x232 (= ?x97 ?x160))))))))))))
 ))
 (let (($x214 (and $x343 $x292)))
 (let (($x198 (= $x214 true)))
 (let (($x286 (= $x198 true)))
 (let (($x356 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x25 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x133 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x15 (and $x133 $x25)))
 (let (($x33 (and $x15 $x356)))
 (let (($x272 (= $x33 true)))
 (let (($x352 (= $x272 true)))
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x39 (bvadd ?x141 input.dst.llvm-%m2)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x39))))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x39 (_ bv2 32))) ?x170)))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x39 (_ bv3 32))) ?x5)))
 (let ((?x335 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (=> $x46 (= ?x335 ?x192))))))))))))
 ))
 (let (($x78 (and $x57 $x117)))
 (let (($x322 (= $x78 true)))
 (let (($x319 (= $x322 true)))
 (let ((?x342 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x92 (= (_ bv0 32) ?x342)))
 (let ((?x108 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x194 (= (_ bv0 32) ?x108)))
 (let ((?x38 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x310 $x212)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x59 $x35)))
 (let (($x68 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (and $x143 $x282)))
 (let (($x211 (not $x271)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x255 $x19)))
 (let (($x14 (and (not $x22) $x211)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x156 $x56)))
 (let (($x84 (not $x50)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x308 (and $x60 $x126)))
 (let (($x115 (and (not $x308) $x84)))
 (let (($x66 (and (and (and (and (and (and $x115 $x14) $x135) $x68) $x17) $x159) $x194)))
 (let (($x275 (and $x66 $x92)))
 (let (($x330 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x302 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x229)))
 (let (($x197 (or false (or false (and (and true (or $x123 $x302)) (or $x182 $x330))))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x197)))
 (let (($x113 (and $x112 $x275)))
 (let (($x354 (= $x113 true)))
 (let (($x28 (= $x354 true)))
 (let ((?x209 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x137 (= (_ bv0 2) ?x209)))
 (let (($x51 (= $x137 true)))
 (let (($x331 (and $x51 $x28)))
 (let (($x350 (and $x331 $x319)))
 (let (($x262 (and $x350 $x352)))
 (let (($x154 (and $x262 $x286)))
 (let (($x20 (and $x154 $x268)))
 (let (($x230 (and $x20 $x45)))
 (let (($x327 (and $x230 $x311)))
 (let (($x280 (and $x327 $x61)))
 (let (($x301 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x97 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x288 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (=> $x264 (= ?x288 ?x97))))))))
 ))
 (let (($x10 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x226 (_ bv1 32))))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (= $x264 $x232))))))))
 ))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x226 (_ bv0 32))))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x251 (_ bv0 32))))
 (= $x205 $x27))))))))
 ))
 (let (($x120 (and $x196 $x351)))
 (let (($x293 (and $x120 $x10)))
 (let (($x294 (and $x293 $x301)))
 (let (($x148 (and $x294 $x280)))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x228 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x335 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (=> $x46 (= ?x335 ?x228))))))))
 ))
 (let (($x340 (forall ((Lambda5 (_ BitVec 32)) )(let (($x289 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x238 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (= $x46 (bvuge ?x238 (_ bv1 32)))))))))
 ))
 (let (($x300 (forall ((Lambda5 (_ BitVec 32)) )(let (($x289 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x238 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x161 (_ bv0 32))))
 (= $x85 (= ?x238 (_ bv0 32)))))))))
 ))
 (let (($x53 (and $x300 $x43)))
 (let (($x320 (and $x53 $x340)))
 (let (($x204 (and $x320 $x67)))
 (let (($x233 (and $x204 $x148)))
 (let (($x384 (=> $x233 $x383)))
 (not $x384))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x380 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x367 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x141)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv1 32))) (select input.dst.llvm-mem ?x367))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x367 (_ bv2 32))) ?x371))))
 (let ((?x335 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (=> $x46 (= ?x335 ?x377)))))))))))
 ))
 (let (($x125 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x317 (_ bv1 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (= $x46 $x74)))))))
 ))
 (let (($x43 (forall ((Lambda5 (_ BitVec 32)) )(let (($x11 (= false false)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x161 (_ bv0 32))))
 (=> $x85 $x11))))))
 ))
 (let (($x175 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x317 (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x161 (_ bv0 32))))
 (= $x85 $x180)))))))
 ))
 (let (($x32 (and $x175 $x43)))
 (let (($x57 (and $x32 $x125)))
 (let (($x381 (and $x57 $x380)))
 (let (($x382 (= $x381 true)))
 (let (($x383 (= $x382 true)))
 (let (($x306 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x141 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x220))))
 (let ((?x97 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x226 (_ bv1 32))))
 (=> $x232 (= ?x97 ?x41)))))))))))
 ))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x317 (_ bv1 32))))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x226 (_ bv1 32))))
 (= $x232 $x74)))))))
 ))
 (let (($x6 (forall ((Lambda5 (_ BitVec 32)) )(let (($x11 (= false false)))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x226 (_ bv0 32))))
 (=> $x27 $x11))))))
 ))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x317 (_ bv0 32))))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x226 (_ bv0 32))))
 (= $x27 $x180)))))))
 ))
 (let (($x203 (and $x236 $x6)))
 (let (($x343 (and $x203 $x96)))
 (let (($x332 (and $x343 $x306)))
 (let (($x256 (= $x332 true)))
 (let (($x61 (= $x256 true)))
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x39 (bvadd ?x141 input.dst.llvm-%m2)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x90))))
 (let ((?x335 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (=> $x46 (= ?x335 ?x52)))))))))))
 ))
 (let (($x30 (and $x57 $x118)))
 (let (($x162 (= $x30 true)))
 (let (($x311 (= $x162 true)))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x141 input.dst.llvm-%m1)))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x220))))
 (let ((?x288 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (=> $x264 (= ?x288 ?x41)))))))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x317 (_ bv1 32))))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (= $x264 $x74)))))))
 ))
 (let (($x351 (forall ((Lambda5 (_ BitVec 32)) )(let (($x11 (= false false)))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x251 (_ bv0 32))))
 (=> $x205 $x11))))))
 ))
 (let (($x188 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x317 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x317 (_ bv0 32))))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x251 (_ bv0 32))))
 (= $x205 $x180)))))))
 ))
 (let (($x245 (and $x188 $x351)))
 (let (($x339 (and $x245 $x136)))
 (let (($x153 (and $x339 $x8)))
 (let (($x89 (= $x153 true)))
 (let (($x45 (= $x89 true)))
 (let (($x239 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x141 input.dst.llvm-%m1)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x23)))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x149)))
 (let ((?x288 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (=> $x264 (= ?x288 ?x160))))))))))))
 ))
 (let (($x273 (and $x339 $x239)))
 (let (($x303 (= $x273 true)))
 (let (($x268 (= $x303 true)))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x291 (bvadd ?x141 input.dst.llvm-%m1)))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x291))))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv2 32))) ?x23)))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x291 (_ bv3 32))) ?x149)))
 (let ((?x97 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x226 (_ bv1 32))))
 (=> $x232 (= ?x97 ?x160))))))))))))
 ))
 (let (($x214 (and $x343 $x292)))
 (let (($x198 (= $x214 true)))
 (let (($x286 (= $x198 true)))
 (let (($x356 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x25 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x133 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x15 (and $x133 $x25)))
 (let (($x33 (and $x15 $x356)))
 (let (($x272 (= $x33 true)))
 (let (($x352 (= $x272 true)))
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x141 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x39 (bvadd ?x141 input.dst.llvm-%m2)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x39))))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x39 (_ bv2 32))) ?x170)))
 (let ((?x192 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x39 (_ bv3 32))) ?x5)))
 (let ((?x335 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (=> $x46 (= ?x335 ?x192))))))))))))
 ))
 (let (($x78 (and $x57 $x117)))
 (let (($x322 (= $x78 true)))
 (let (($x319 (= $x322 true)))
 (let ((?x342 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x92 (= (_ bv0 32) ?x342)))
 (let ((?x108 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x194 (= (_ bv0 32) ?x108)))
 (let ((?x38 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x310 $x212)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x59 $x35)))
 (let (($x68 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (and $x143 $x282)))
 (let (($x211 (not $x271)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x255 $x19)))
 (let (($x14 (and (not $x22) $x211)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x156 $x56)))
 (let (($x84 (not $x50)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x308 (and $x60 $x126)))
 (let (($x115 (and (not $x308) $x84)))
 (let (($x66 (and (and (and (and (and (and $x115 $x14) $x135) $x68) $x17) $x159) $x194)))
 (let (($x275 (and $x66 $x92)))
 (let (($x330 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x182 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x302 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x229)))
 (let (($x197 (or false (or false (and (and true (or $x123 $x302)) (or $x182 $x330))))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x197)))
 (let (($x113 (and $x112 $x275)))
 (let (($x354 (= $x113 true)))
 (let (($x28 (= $x354 true)))
 (let ((?x209 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x137 (= (_ bv0 2) ?x209)))
 (let (($x51 (= $x137 true)))
 (let (($x331 (and $x51 $x28)))
 (let (($x350 (and $x331 $x319)))
 (let (($x262 (and $x350 $x352)))
 (let (($x154 (and $x262 $x286)))
 (let (($x20 (and $x154 $x268)))
 (let (($x230 (and $x20 $x45)))
 (let (($x327 (and $x230 $x311)))
 (let (($x280 (and $x327 $x61)))
 (let (($x301 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x97 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x288 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (=> $x264 (= ?x288 ?x97))))))))
 ))
 (let (($x10 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x226 (_ bv1 32))))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x264 (bvuge ?x251 (_ bv1 32))))
 (= $x264 $x232))))))))
 ))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x226 (_ bv0 32))))
 (let (($x31 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x251 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x251 (_ bv0 32))))
 (= $x205 $x27))))))))
 ))
 (let (($x120 (and $x196 $x351)))
 (let (($x293 (and $x120 $x10)))
 (let (($x294 (and $x293 $x301)))
 (let (($x148 (and $x294 $x280)))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x228 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x335 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (=> $x46 (= ?x335 ?x228))))))))
 ))
 (let (($x340 (forall ((Lambda5 (_ BitVec 32)) )(let (($x289 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x238 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x161 (_ bv1 32))))
 (= $x46 (bvuge ?x238 (_ bv1 32)))))))))
 ))
 (let (($x300 (forall ((Lambda5 (_ BitVec 32)) )(let (($x289 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x238 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x161 (ite $x253 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x161 (_ bv0 32))))
 (= $x85 (= ?x238 (_ bv0 32)))))))))
 ))
 (let (($x53 (and $x300 $x43)))
 (let (($x320 (and $x53 $x340)))
 (let (($x204 (and $x320 $x67)))
 (let (($x233 (and $x204 $x148)))
 (let (($x384 (=> $x233 $x383)))
 (not $x384))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000004c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x06010610)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x23212700)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01846604)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x06010610)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01846607)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x23212703)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01846604)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x23212700)
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000004c))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000004c))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000004c) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x06010743) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000004c) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000004c) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000004c) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000004c) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000002e)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00c40004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04b80090)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1fa5f914)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x1fa5f914)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04b80093)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00c40007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04b80090)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00c40004)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1fa5f9cc) #x02
      #x00))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002e) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002e) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002e) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000002e))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002e) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002e) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002e) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x188 (bvadd ?x221 input.dst.llvm-%m2)))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x188))))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv2 32))) ?x339)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv3 32))) ?x239)))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (=> $x112 (= ?x156 ?x268))))))))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (= $x112 $x6)))))))
 ))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x210 (_ bv0 32))))
 (=> $x302 $x228))))))
 ))
 (let (($x193 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x33 (_ bv0 32))))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x210 (_ bv0 32))))
 (= $x302 $x272)))))))
 ))
 (let (($x218 (and $x193 $x145)))
 (let (($x134 (and $x218 $x223)))
 (let (($x138 (and $x134 $x265)))
 (let (($x334 (= $x138 true)))
 (let (($x93 (= $x334 true)))
 (let ((?x169 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x36 (= (_ bv0 2) ?x169)))
 (let (($x167 (= $x36 true)))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x370 (bvadd ?x221 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem ?x370))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv2 32))) ?x329))))
 (let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x229 (_ bv1 32))))
 (=> $x197 (= ?x84 ?x58)))))))))))
 ))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x229 (_ bv1 32))))
 (= $x197 $x6)))))))
 ))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x229 (_ bv0 32))))
 (=> $x123 $x228))))))
 ))
 (let (($x217 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x33 (_ bv0 32))))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x229 (_ bv0 32))))
 (= $x123 $x272)))))))
 ))
 (let (($x162 (and $x217 $x30)))
 (let (($x48 (and $x162 $x142)))
 (let (($x287 (and $x48 $x298)))
 (let (($x40 (= $x287 true)))
 (let (($x164 (= $x40 true)))
 (let (($x63 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x188 (bvadd ?x221 input.dst.llvm-%m2)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x163))))
 (let ((?x351 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (=> $x226 (= ?x351 ?x285)))))))))))
 ))
 (let (($x325 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (= $x226 $x6)))))))
 ))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (=> $x340 $x228))))))
 ))
 (let (($x262 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x33 (_ bv0 32))))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (= $x340 $x272)))))))
 ))
 (let (($x266 (and $x262 $x67)))
 (let (($x96 (and $x266 $x325)))
 (let (($x346 (and $x96 $x63)))
 (let (($x252 (= $x346 true)))
 (let (($x79 (= $x252 true)))
 (let (($x191 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x370 (bvadd ?x221 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem ?x370))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv2 32))) ?x329))))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (=> $x112 (= ?x156 ?x58)))))))))))
 ))
 (let (($x244 (and $x134 $x191)))
 (let (($x7 (= $x244 true)))
 (let (($x247 (= $x7 true)))
 (let (($x202 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x370 (bvadd ?x221 input.dst.llvm-%m1)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x370))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv2 32))) ?x377)))
 (let ((?x383 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv3 32))) ?x380)))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (=> $x112 (= ?x156 ?x383))))))))))))
 ))
 (let (($x344 (and $x134 $x202)))
 (let (($x279 (= $x344 true)))
 (let (($x80 (= $x279 true)))
 (let (($x257 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x370 (bvadd ?x221 input.dst.llvm-%m1)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x370))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv2 32))) ?x377)))
 (let ((?x383 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv3 32))) ?x380)))
 (let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x229 (_ bv1 32))))
 (=> $x197 (= ?x84 ?x383))))))))))))
 ))
 (let (($x249 (and $x48 $x257)))
 (let (($x199 (= $x249 true)))
 (let (($x206 (= $x199 true)))
 (let (($x187 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x153 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x328 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x89 (and $x328 $x153)))
 (let (($x225 (and $x89 $x187)))
 (let (($x297 (= $x225 true)))
 (let (($x124 (= $x297 true)))
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x188 (bvadd ?x221 input.dst.llvm-%m2)))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x188))))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv2 32))) ?x339)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv3 32))) ?x239)))
 (let ((?x351 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (=> $x226 (= ?x351 ?x268))))))))))))
 ))
 (let (($x71 (and $x96 $x222)))
 (let (($x357 (= $x71 true)))
 (let (($x189 (= $x357 true)))
 (let ((?x284 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x119 (= (_ bv0 32) ?x284)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x75 (= (_ bv0 32) ?x240)))
 (let ((?x208 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x141 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x127 (and $x121 $x39)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x57 $x127)))
 (let (($x125 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x64 $x140)))
 (let (($x180 (not $x317)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x331 $x185)))
 (let (($x175 (and (not $x37) $x180)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x342 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x342 $x92)))
 (let (($x113 (not $x275)))
 (let (($x337 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x14 $x337)))
 (let (($x28 (and (not $x66) $x113)))
 (let (($x117 (and (and (and (and (and (and $x28 $x175) $x74) $x125) $x250) $x147) $x75)))
 (let (($x78 (and $x117 $x119)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x184 (or false (or false (and (and true (or $x227 $x59)) (or $x35 $x17))))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x322 (and $x194 $x78)))
 (let (($x319 (= $x322 true)))
 (let (($x350 (= $x319 true)))
 (let (($x220 (and $x350 $x189)))
 (let (($x90 (and $x220 $x124)))
 (let (($x201 (and $x90 $x206)))
 (let (($x76 (and $x201 $x80)))
 (let (($x105 (and $x76 $x247)))
 (let (($x296 (and $x105 $x79)))
 (let (($x349 (and $x296 $x164)))
 (let (($x246 (and $x349 $x167)))
 (let (($x143 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (=> $x112 (= ?x156 ?x84))))))))
 ))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x229 (_ bv1 32))))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (= $x112 $x197))))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x229 (_ bv0 32))))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x210 (_ bv0 32))))
 (= $x302 $x123))))))))
 ))
 (let (($x330 (and $x116 $x145)))
 (let (($x308 (and $x330 $x126)))
 (let (($x282 (and $x308 $x143)))
 (let (($x81 (and $x282 $x246)))
 (let (($x305 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x232 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x351 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (=> $x226 (= ?x351 ?x232))))))))
 ))
 (let (($x109 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x46 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (= $x226 (bvuge ?x46 (_ bv1 32)))))))))
 ))
 (let (($x335 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x46 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (= $x340 (= ?x46 (_ bv0 32)))))))))
 ))
 (let (($x204 (and $x335 $x67)))
 (let (($x196 (and $x204 $x109)))
 (let (($x321 (and $x196 $x305)))
 (let (($x128 (and $x321 $x81)))
 (let (($x171 (=> $x128 $x93)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x188 (bvadd ?x221 input.dst.llvm-%m2)))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x188))))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv2 32))) ?x339)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv3 32))) ?x239)))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (=> $x112 (= ?x156 ?x268))))))))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (= $x112 $x6)))))))
 ))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x210 (_ bv0 32))))
 (=> $x302 $x228))))))
 ))
 (let (($x193 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x33 (_ bv0 32))))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x210 (_ bv0 32))))
 (= $x302 $x272)))))))
 ))
 (let (($x218 (and $x193 $x145)))
 (let (($x134 (and $x218 $x223)))
 (let (($x138 (and $x134 $x265)))
 (let (($x334 (= $x138 true)))
 (let (($x93 (= $x334 true)))
 (let ((?x169 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x36 (= (_ bv0 2) ?x169)))
 (let (($x167 (= $x36 true)))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x370 (bvadd ?x221 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem ?x370))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv2 32))) ?x329))))
 (let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x229 (_ bv1 32))))
 (=> $x197 (= ?x84 ?x58)))))))))))
 ))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x229 (_ bv1 32))))
 (= $x197 $x6)))))))
 ))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x229 (_ bv0 32))))
 (=> $x123 $x228))))))
 ))
 (let (($x217 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x33 (_ bv0 32))))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x229 (_ bv0 32))))
 (= $x123 $x272)))))))
 ))
 (let (($x162 (and $x217 $x30)))
 (let (($x48 (and $x162 $x142)))
 (let (($x287 (and $x48 $x298)))
 (let (($x40 (= $x287 true)))
 (let (($x164 (= $x40 true)))
 (let (($x63 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x188 (bvadd ?x221 input.dst.llvm-%m2)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x163))))
 (let ((?x351 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (=> $x226 (= ?x351 ?x285)))))))))))
 ))
 (let (($x325 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x33 (_ bv1 32))))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (= $x226 $x6)))))))
 ))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let (($x228 (= false false)))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (=> $x340 $x228))))))
 ))
 (let (($x262 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x33 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x33 (_ bv0 32))))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (= $x340 $x272)))))))
 ))
 (let (($x266 (and $x262 $x67)))
 (let (($x96 (and $x266 $x325)))
 (let (($x346 (and $x96 $x63)))
 (let (($x252 (= $x346 true)))
 (let (($x79 (= $x252 true)))
 (let (($x191 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x370 (bvadd ?x221 input.dst.llvm-%m1)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem ?x370))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv2 32))) ?x329))))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (=> $x112 (= ?x156 ?x58)))))))))))
 ))
 (let (($x244 (and $x134 $x191)))
 (let (($x7 (= $x244 true)))
 (let (($x247 (= $x7 true)))
 (let (($x202 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x370 (bvadd ?x221 input.dst.llvm-%m1)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x370))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv2 32))) ?x377)))
 (let ((?x383 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv3 32))) ?x380)))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (=> $x112 (= ?x156 ?x383))))))))))))
 ))
 (let (($x344 (and $x134 $x202)))
 (let (($x279 (= $x344 true)))
 (let (($x80 (= $x279 true)))
 (let (($x257 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x370 (bvadd ?x221 input.dst.llvm-%m1)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x370))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv2 32))) ?x377)))
 (let ((?x383 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv3 32))) ?x380)))
 (let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x229 (_ bv1 32))))
 (=> $x197 (= ?x84 ?x383))))))))))))
 ))
 (let (($x249 (and $x48 $x257)))
 (let (($x199 (= $x249 true)))
 (let (($x206 (= $x199 true)))
 (let (($x187 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x153 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x328 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x89 (and $x328 $x153)))
 (let (($x225 (and $x89 $x187)))
 (let (($x297 (= $x225 true)))
 (let (($x124 (= $x297 true)))
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x221 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x188 (bvadd ?x221 input.dst.llvm-%m2)))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x188))))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv2 32))) ?x339)))
 (let ((?x268 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x188 (_ bv3 32))) ?x239)))
 (let ((?x351 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (=> $x226 (= ?x351 ?x268))))))))))))
 ))
 (let (($x71 (and $x96 $x222)))
 (let (($x357 (= $x71 true)))
 (let (($x189 (= $x357 true)))
 (let ((?x284 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x119 (= (_ bv0 32) ?x284)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x75 (= (_ bv0 32) ?x240)))
 (let ((?x208 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x141 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x127 (and $x121 $x39)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x57 $x127)))
 (let (($x125 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x64 $x140)))
 (let (($x180 (not $x317)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x331 $x185)))
 (let (($x175 (and (not $x37) $x180)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x342 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x342 $x92)))
 (let (($x113 (not $x275)))
 (let (($x337 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x14 $x337)))
 (let (($x28 (and (not $x66) $x113)))
 (let (($x117 (and (and (and (and (and (and $x28 $x175) $x74) $x125) $x250) $x147) $x75)))
 (let (($x78 (and $x117 $x119)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x184 (or false (or false (and (and true (or $x227 $x59)) (or $x35 $x17))))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x322 (and $x194 $x78)))
 (let (($x319 (= $x322 true)))
 (let (($x350 (= $x319 true)))
 (let (($x220 (and $x350 $x189)))
 (let (($x90 (and $x220 $x124)))
 (let (($x201 (and $x90 $x206)))
 (let (($x76 (and $x201 $x80)))
 (let (($x105 (and $x76 $x247)))
 (let (($x296 (and $x105 $x79)))
 (let (($x349 (and $x296 $x164)))
 (let (($x246 (and $x349 $x167)))
 (let (($x143 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x156 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (=> $x112 (= ?x156 ?x84))))))))
 ))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x229 (_ bv1 32))))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x210 (_ bv1 32))))
 (= $x112 $x197))))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let (($x51 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x229 (_ bv0 32))))
 (let (($x294 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x210 (ite $x294 (_ bv1 32) (_ bv0 32))))
 (let (($x302 (= ?x210 (_ bv0 32))))
 (= $x302 $x123))))))))
 ))
 (let (($x330 (and $x116 $x145)))
 (let (($x308 (and $x330 $x126)))
 (let (($x282 (and $x308 $x143)))
 (let (($x81 (and $x282 $x246)))
 (let (($x305 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x232 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x351 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (=> $x226 (= ?x351 ?x232))))))))
 ))
 (let (($x109 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x46 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (bvuge ?x338 (_ bv1 32))))
 (= $x226 (bvuge ?x46 (_ bv1 32)))))))))
 ))
 (let (($x335 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x46 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x338 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (= ?x338 (_ bv0 32))))
 (= $x340 (= ?x46 (_ bv0 32)))))))))
 ))
 (let (($x204 (and $x335 $x67)))
 (let (($x196 (and $x204 $x109)))
 (let (($x321 (and $x196 $x305)))
 (let (($x128 (and $x321 $x81)))
 (let (($x171 (=> $x128 $x93)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0002090c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42002218)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x4ae00100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4200221b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0002090f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42002218)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0002090c)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x02
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x4ae00103 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x4ae00102 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x4ae00101 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x4ae00100 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x4ae00103 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x4ae00102 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x4ae00101 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x4ae00100 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00020000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00020000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xef9ef30c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x89789024)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x256c1420)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000029)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x256c1423)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x89789027)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x256c1420)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x89789024)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000029))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000029) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000a4) #x80
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000029) #x00000080
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000029) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000a4) #x80
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000029) #x00000080
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000029) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #xef9ef30f (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xef9ef30e (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xef9ef30d (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xef9ef30c (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #xef9ef30f (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xef9ef30e (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xef9ef30d (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xef9ef30c (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000029) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x83 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x375))))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (=> $x342 (= ?x331 ?x256)))))))))))
 ))
 (let (($x293 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x217 (_ bv1 32))))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (= $x342 $x370)))))))
 ))
 (let (($x184 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (= false false)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x35 (_ bv0 32))))
 (=> $x212 $x232))))))
 ))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x217 (_ bv0 32))))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x35 (_ bv0 32))))
 (= $x212 $x118)))))))
 ))
 (let (($x355 (and $x205 $x184)))
 (let (($x157 (and $x355 $x293)))
 (let (($x333 (and $x157 $x261)))
 (let (($x131 (= $x333 true)))
 (let (($x219 (= $x131 true)))
 (let ((?x324 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x213 (= (_ bv0 2) ?x324)))
 (let (($x18 (= $x213 true)))
 (let (($x82 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x9))))
 (let ((?x139 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x65 (_ bv1 32))))
 (=> $x354 (= ?x139 ?x104)))))))))))
 ))
 (let (($x164 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x217 (_ bv1 32))))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x65 (_ bv1 32))))
 (= $x354 $x370)))))))
 ))
 (let (($x316 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (= false false)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x65 (_ bv0 32))))
 (=> $x101 $x232))))))
 ))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x217 (_ bv0 32))))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x65 (_ bv0 32))))
 (= $x101 $x118)))))))
 ))
 (let (($x298 (and $x79 $x316)))
 (let (($x349 (and $x298 $x164)))
 (let (($x114 (and $x349 $x82)))
 (let (($x110 (= $x114 true)))
 (let (($x103 (= $x110 true)))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x83 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x375))))
 (let ((?x145 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (=> $x229 (= ?x145 ?x256)))))))))))
 ))
 (let (($x382 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x217 (_ bv1 32))))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (= $x229 $x370)))))))
 ))
 (let (($x305 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (= false false)))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x27 (_ bv0 32))))
 (=> $x109 $x232))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x217 (_ bv0 32))))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x27 (_ bv0 32))))
 (= $x109 $x118)))))))
 ))
 (let (($x327 (and $x162 $x305)))
 (let (($x378 (and $x327 $x382)))
 (let (($x367 (and $x378 $x280)))
 (let (($x372 (= $x367 true)))
 (let (($x373 (= $x372 true)))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x9))))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (=> $x342 (= ?x331 ?x104)))))))))))
 ))
 (let (($x214 (and $x157 $x292)))
 (let (($x160 (= $x214 true)))
 (let (($x54 (= $x160 true)))
 (let (($x200 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x291)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x120)))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (=> $x342 (= ?x331 ?x253))))))))))))
 ))
 (let (($x209 (and $x157 $x200)))
 (let (($x137 (= $x209 true)))
 (let (($x359 (= $x137 true)))
 (let (($x29 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x291)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x120)))
 (let ((?x139 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x65 (_ bv1 32))))
 (=> $x354 (= ?x139 ?x253))))))))))))
 ))
 (let (($x195 (and $x349 $x29)))
 (let (($x43 (= $x195 true)))
 (let (($x53 (= $x43 true)))
 (let (($x248 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x348 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x105 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x122 (and $x105 $x348)))
 (let (($x285 (and $x122 $x248)))
 (let (($x42 (= $x285 true)))
 (let (($x155 (= $x42 true)))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x83 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x83))))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv2 32))) ?x279)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv3 32))) ?x304)))
 (let ((?x145 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (=> $x229 (= ?x145 ?x111))))))))))))
 ))
 (let (($x58 (and $x378 $x314)))
 (let (($x86 (= $x58 true)))
 (let (($x165 (= $x86 true)))
 (let ((?x20 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x73 (= (_ bv0 32) ?x20)))
 (let ((?x239 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x268 (= (_ bv0 32) ?x239)))
 (let ((?x245 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x339 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x245)))
 (let ((?x181 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x303 $x24)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x273 $x174)))
 (let (($x188 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x266 $x6)))
 (let (($x325 (not $x203)))
 (let (($x352 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (and $x272 $x352)))
 (let (($x343 (and (not $x262) $x325)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x350 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x350 $x237)))
 (let (($x47 (not $x16)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x186 $x125)))
 (let (($x33 (and (not $x319) $x47)))
 (let (($x267 (and (and (and (and (and (and $x33 $x343) $x221) $x188) $x136) $x339) $x268)))
 (let (($x41 (and $x267 $x73)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x119 (or false (or false (and (and true (or $x39 $x127)) (or $x315 $x240))))))
 (let (($x322 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x119)))
 (let (($x62 (and $x322 $x41)))
 (let (($x328 (= $x62 true)))
 (let (($x8 (= $x328 true)))
 (let (($x191 (and $x8 $x165)))
 (let (($x63 (and $x191 $x155)))
 (let (($x234 (and $x63 $x53)))
 (let (($x178 (and $x234 $x359)))
 (let (($x278 (and $x178 $x54)))
 (let (($x369 (and $x278 $x373)))
 (let (($x313 (and $x369 $x103)))
 (let (($x77 (and $x313 $x18)))
 (let (($x170 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x139 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (=> $x342 (= ?x331 ?x139))))))))
 ))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x65 (_ bv1 32))))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (= $x342 $x354))))))))
 ))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x65 (_ bv0 32))))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x35 (_ bv0 32))))
 (= $x212 $x101))))))))
 ))
 (let (($x194 (and $x299 $x184)))
 (let (($x113 (and $x194 $x275)))
 (let (($x32 (and $x113 $x170)))
 (let (($x172 (and $x32 $x77)))
 (let (($x22 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x145 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (=> $x229 (= ?x145 ?x197))))))))
 ))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let (($x335 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (= $x229 (bvuge ?x226 (_ bv1 32)))))))))
 ))
 (let (($x351 (forall ((Lambda5 (_ BitVec 32)) )(let (($x335 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x27 (_ bv0 32))))
 (= $x109 (= ?x226 (_ bv0 32)))))))))
 ))
 (let (($x321 (and $x351 $x305)))
 (let (($x116 (and $x321 $x176)))
 (let (($x150 (and $x116 $x22)))
 (let (($x215 (and $x150 $x172)))
 (let (($x100 (=> $x215 $x219)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x83 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x375))))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (=> $x342 (= ?x331 ?x256)))))))))))
 ))
 (let (($x293 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x217 (_ bv1 32))))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (= $x342 $x370)))))))
 ))
 (let (($x184 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (= false false)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x35 (_ bv0 32))))
 (=> $x212 $x232))))))
 ))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x217 (_ bv0 32))))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x35 (_ bv0 32))))
 (= $x212 $x118)))))))
 ))
 (let (($x355 (and $x205 $x184)))
 (let (($x157 (and $x355 $x293)))
 (let (($x333 (and $x157 $x261)))
 (let (($x131 (= $x333 true)))
 (let (($x219 (= $x131 true)))
 (let ((?x324 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x213 (= (_ bv0 2) ?x324)))
 (let (($x18 (= $x213 true)))
 (let (($x82 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x9))))
 (let ((?x139 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x65 (_ bv1 32))))
 (=> $x354 (= ?x139 ?x104)))))))))))
 ))
 (let (($x164 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x217 (_ bv1 32))))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x65 (_ bv1 32))))
 (= $x354 $x370)))))))
 ))
 (let (($x316 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (= false false)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x65 (_ bv0 32))))
 (=> $x101 $x232))))))
 ))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x217 (_ bv0 32))))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x65 (_ bv0 32))))
 (= $x101 $x118)))))))
 ))
 (let (($x298 (and $x79 $x316)))
 (let (($x349 (and $x298 $x164)))
 (let (($x114 (and $x349 $x82)))
 (let (($x110 (= $x114 true)))
 (let (($x103 (= $x110 true)))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x83 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x375))))
 (let ((?x145 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (=> $x229 (= ?x145 ?x256)))))))))))
 ))
 (let (($x382 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x217 (_ bv1 32))))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (= $x229 $x370)))))))
 ))
 (let (($x305 (forall ((Lambda5 (_ BitVec 32)) )(let (($x232 (= false false)))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x27 (_ bv0 32))))
 (=> $x109 $x232))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x217 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x217 (_ bv0 32))))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x27 (_ bv0 32))))
 (= $x109 $x118)))))))
 ))
 (let (($x327 (and $x162 $x305)))
 (let (($x378 (and $x327 $x382)))
 (let (($x367 (and $x378 $x280)))
 (let (($x372 (= $x367 true)))
 (let (($x373 (= $x372 true)))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x9))))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (=> $x342 (= ?x331 ?x104)))))))))))
 ))
 (let (($x214 (and $x157 $x292)))
 (let (($x160 (= $x214 true)))
 (let (($x54 (= $x160 true)))
 (let (($x200 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x291)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x120)))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (=> $x342 (= ?x331 ?x253))))))))))))
 ))
 (let (($x209 (and $x157 $x200)))
 (let (($x137 (= $x209 true)))
 (let (($x359 (= $x137 true)))
 (let (($x29 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x291 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x291)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x120)))
 (let ((?x139 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x65 (_ bv1 32))))
 (=> $x354 (= ?x139 ?x253))))))))))))
 ))
 (let (($x195 (and $x349 $x29)))
 (let (($x43 (= $x195 true)))
 (let (($x53 (= $x43 true)))
 (let (($x248 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x348 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x105 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x122 (and $x105 $x348)))
 (let (($x285 (and $x122 $x248)))
 (let (($x42 (= $x285 true)))
 (let (($x155 (= $x42 true)))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x134 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x83 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x83))))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv2 32))) ?x279)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x83 (_ bv3 32))) ?x304)))
 (let ((?x145 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (=> $x229 (= ?x145 ?x111))))))))))))
 ))
 (let (($x58 (and $x378 $x314)))
 (let (($x86 (= $x58 true)))
 (let (($x165 (= $x86 true)))
 (let ((?x20 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x73 (= (_ bv0 32) ?x20)))
 (let ((?x239 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x268 (= (_ bv0 32) ?x239)))
 (let ((?x245 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x339 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x245)))
 (let ((?x181 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x303 $x24)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x273 $x174)))
 (let (($x188 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x266 $x6)))
 (let (($x325 (not $x203)))
 (let (($x352 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (and $x272 $x352)))
 (let (($x343 (and (not $x262) $x325)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x350 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x350 $x237)))
 (let (($x47 (not $x16)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x186 $x125)))
 (let (($x33 (and (not $x319) $x47)))
 (let (($x267 (and (and (and (and (and (and $x33 $x343) $x221) $x188) $x136) $x339) $x268)))
 (let (($x41 (and $x267 $x73)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x315 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x119 (or false (or false (and (and true (or $x39 $x127)) (or $x315 $x240))))))
 (let (($x322 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x119)))
 (let (($x62 (and $x322 $x41)))
 (let (($x328 (= $x62 true)))
 (let (($x8 (= $x328 true)))
 (let (($x191 (and $x8 $x165)))
 (let (($x63 (and $x191 $x155)))
 (let (($x234 (and $x63 $x53)))
 (let (($x178 (and $x234 $x359)))
 (let (($x278 (and $x178 $x54)))
 (let (($x369 (and $x278 $x373)))
 (let (($x313 (and $x369 $x103)))
 (let (($x77 (and $x313 $x18)))
 (let (($x170 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x139 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x331 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (=> $x342 (= ?x331 ?x139))))))))
 ))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x65 (_ bv1 32))))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x35 (_ bv1 32))))
 (= $x342 $x354))))))))
 ))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x65 (_ bv0 32))))
 (let (($x282 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x35 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x35 (_ bv0 32))))
 (= $x212 $x101))))))))
 ))
 (let (($x194 (and $x299 $x184)))
 (let (($x113 (and $x194 $x275)))
 (let (($x32 (and $x113 $x170)))
 (let (($x172 (and $x32 $x77)))
 (let (($x22 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x145 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (=> $x229 (= ?x145 ?x197))))))))
 ))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let (($x335 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x27 (_ bv1 32))))
 (= $x229 (bvuge ?x226 (_ bv1 32)))))))))
 ))
 (let (($x351 (forall ((Lambda5 (_ BitVec 32)) )(let (($x335 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x226 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x27 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x27 (_ bv0 32))))
 (= $x109 (= ?x226 (_ bv0 32)))))))))
 ))
 (let (($x321 (and $x351 $x305)))
 (let (($x116 (and $x321 $x176)))
 (let (($x150 (and $x116 $x22)))
 (let (($x215 (and $x150 $x172)))
 (let (($x100 (=> $x215 $x219)))
 (not $x100))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xef9ef30c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x89789024)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x256c1420)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000029)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x256c1423)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x89789027)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x256c1420)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x89789024)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000a4) #x80
      #x00))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000029))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000029) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000029) #x00000080
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000029) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000a4) #x80
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000029) #x00000080
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000029) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #xef9ef30f (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xef9ef30e (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xef9ef30d (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xef9ef30c (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #xef9ef30f (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xef9ef30e (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xef9ef30d (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xef9ef30c (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000029) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x10c2840c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x21800818)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x5ae088a8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2180081b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x10c2840f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x21800818)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x10c2840c)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x5ae088a9) #x10
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x5ae088a9) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00001000
      (let ((a!1 (concat (k!23 (bvadd #x5ae088ab (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x5ae088aa (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x5ae088a9 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x5ae088a8 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #x5ae088ab (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x5ae088aa (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x5ae088a9 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x5ae088a8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00001000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x216 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x152 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x137)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x259))))
 (let ((?x272 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (=> $x350 (= ?x272 ?x260)))))))))))
 ))
 (let (($x143 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x349 (_ bv1 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (= $x350 $x211)))))))
 ))
 (let (($x119 (forall ((Lambda5 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x315 (_ bv0 32))))
 (=> $x147 $x197))))))
 ))
 (let (($x95 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x349 (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x315 (_ bv0 32))))
 (= $x147 $x171)))))))
 ))
 (let (($x185 (and $x95 $x119)))
 (let (($x135 (and $x185 $x143)))
 (let (($x241 (and $x135 $x216)))
 (let (($x361 (= $x241 true)))
 (let (($x364 (= $x361 true)))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x49 (bvadd ?x137 input.dst.llvm-%m1)))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x368))))
 (let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x243 (_ bv1 32))))
 (=> $x356 (= ?x96 ?x199)))))))))))
 ))
 (let (($x18 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x349 (_ bv1 32))))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x243 (_ bv1 32))))
 (= $x356 $x211)))))))
 ))
 (let (($x313 (forall ((Lambda5 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x243 (_ bv0 32))))
 (=> $x208 $x197))))))
 ))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x349 (_ bv0 32))))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x243 (_ bv0 32))))
 (= $x208 $x171)))))))
 ))
 (let (($x12 (and $x114 $x313)))
 (let (($x77 (and $x12 $x18)))
 (let (($x255 (and $x77 $x107)))
 (let (($x19 (= $x255 true)))
 (let (($x276 (= $x19 true)))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x359 (bvadd ?x137 input.dst.llvm-%m2)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem ?x359))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv2 32))) ?x167))))
 (let ((?x184 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (=> $x65 (= ?x184 ?x138)))))))))))
 ))
 (let (($x291 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x349 (_ bv1 32))))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (= $x65 $x211)))))))
 ))
 (let (($x22 (forall ((Lambda5 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x123 (_ bv0 32))))
 (=> $x176 $x197))))))
 ))
 (let (($x146 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x349 (_ bv0 32))))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x123 (_ bv0 32))))
 (= $x176 $x171)))))))
 ))
 (let (($x263 (and $x146 $x22)))
 (let (($x120 (and $x263 $x291)))
 (let (($x264 (and $x120 $x31)))
 (let (($x56 (= $x264 true)))
 (let (($x360 (= $x56 true)))
 (let (($x385 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x49 (bvadd ?x137 input.dst.llvm-%m1)))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x368))))
 (let ((?x272 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (=> $x350 (= ?x272 ?x199)))))))))))
 ))
 (let (($x383 (and $x135 $x385)))
 (let (($x257 (= $x383 true)))
 (let (($x201 (= $x257 true)))
 (let (($x310 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x49 (bvadd ?x137 input.dst.llvm-%m1)))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x49))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv2 32))) ?x60)))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv3 32))) ?x190)))
 (let ((?x272 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (=> $x350 (= ?x272 ?x67))))))))))))
 ))
 (let (($x38 (and $x135 $x310)))
 (let (($x14 (= $x38 true)))
 (let (($x337 (= $x14 true)))
 (let (($x294 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x49 (bvadd ?x137 input.dst.llvm-%m1)))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x49))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv2 32))) ?x60)))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv3 32))) ?x190)))
 (let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x243 (_ bv1 32))))
 (=> $x356 (= ?x96 ?x67))))))))))))
 ))
 (let (($x210 (and $x77 $x294)))
 (let (($x302 (= $x210 true)))
 (let (($x182 (= $x302 true)))
 (let (($x367 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x256 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x375 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x61 (and $x375 $x256)))
 (let (($x372 (and $x61 $x367)))
 (let (($x373 (= $x372 true)))
 (let (($x369 (= $x373 true)))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x359 (bvadd ?x137 input.dst.llvm-%m2)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x359))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv2 32))) ?x25)))
 (let ((?x347 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv3 32))) ?x9)))
 (let ((?x184 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (=> $x65 (= ?x184 ?x347))))))))))))
 ))
 (let (($x160 (and $x120 $x214)))
 (let (($x54 (= $x160 true)))
 (let (($x278 (= $x54 true)))
 (let ((?x165 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x191 (= (_ bv0 32) ?x165)))
 (let ((?x58 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x86 (= (_ bv0 32) ?x58)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x314 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x329)))
 (let ((?x279 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x279)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x344 $x304)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x202 $x111)))
 (let (($x76 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x379 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x379 $x374)))
 (let (($x377 (not $x134)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x381 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x378 (and $x381 $x382)))
 (let (($x179 (and (not $x378) $x377)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x217 $x118)))
 (let (($x162 (not $x30)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x149 $x181)))
 (let (($x370 (and (not $x52) $x162)))
 (let (($x348 (and (and (and (and (and (and $x370 $x179) $x249) $x76) $x158) $x314) $x86)))
 (let (($x122 (and $x348 $x191)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x339 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x245)))
 (let (($x90 (or false (or false (and (and true (or $x339 $x220)) (or $x73 $x41))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x129 (and $x124 $x122)))
 (let (($x163 (= $x129 true)))
 (let (($x248 (= $x163 true)))
 (let ((?x72 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x188 (= (_ bv0 2) ?x72)))
 (let (($x357 (= $x188 true)))
 (let (($x285 (and $x357 $x248)))
 (let (($x233 (and $x285 $x278)))
 (let (($x254 (and $x233 $x369)))
 (let (($x112 (and $x254 $x182)))
 (let (($x66 (and $x112 $x337)))
 (let (($x218 (and $x66 $x201)))
 (let (($x50 (and $x218 $x360)))
 (let (($x286 (and $x50 $x276)))
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x272 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (=> $x350 (= ?x272 ?x96))))))))
 ))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x243 (_ bv1 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (= $x350 $x356))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x243 (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x315 (_ bv0 32))))
 (= $x147 $x208))))))))
 ))
 (let (($x322 (and $x75 $x119)))
 (let (($x47 (and $x322 $x16)))
 (let (($x177 (and $x47 $x222)))
 (let (($x258 (and $x177 $x286)))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x354 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x184 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (=> $x65 (= ?x184 ?x354))))))))
 ))
 (let (($x17 (forall ((Lambda5 (_ BitVec 32)) )(let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (= $x65 (bvuge ?x229 (_ bv1 32)))))))))
 ))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x123 (_ bv0 32))))
 (= $x176 (= ?x229 (_ bv0 32)))))))))
 ))
 (let (($x150 (and $x145 $x22)))
 (let (($x299 (and $x150 $x17)))
 (let (($x175 (and $x299 $x180)))
 (let (($x106 (and $x175 $x258)))
 (let (($x365 (=> $x106 $x364)))
 (not $x365))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x216 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x152 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x137)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x259))))
 (let ((?x272 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (=> $x350 (= ?x272 ?x260)))))))))))
 ))
 (let (($x143 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x349 (_ bv1 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (= $x350 $x211)))))))
 ))
 (let (($x119 (forall ((Lambda5 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x315 (_ bv0 32))))
 (=> $x147 $x197))))))
 ))
 (let (($x95 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x349 (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x315 (_ bv0 32))))
 (= $x147 $x171)))))))
 ))
 (let (($x185 (and $x95 $x119)))
 (let (($x135 (and $x185 $x143)))
 (let (($x241 (and $x135 $x216)))
 (let (($x361 (= $x241 true)))
 (let (($x364 (= $x361 true)))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x49 (bvadd ?x137 input.dst.llvm-%m1)))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x368))))
 (let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x243 (_ bv1 32))))
 (=> $x356 (= ?x96 ?x199)))))))))))
 ))
 (let (($x18 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x349 (_ bv1 32))))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x243 (_ bv1 32))))
 (= $x356 $x211)))))))
 ))
 (let (($x313 (forall ((Lambda5 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x243 (_ bv0 32))))
 (=> $x208 $x197))))))
 ))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x349 (_ bv0 32))))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x243 (_ bv0 32))))
 (= $x208 $x171)))))))
 ))
 (let (($x12 (and $x114 $x313)))
 (let (($x77 (and $x12 $x18)))
 (let (($x255 (and $x77 $x107)))
 (let (($x19 (= $x255 true)))
 (let (($x276 (= $x19 true)))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x359 (bvadd ?x137 input.dst.llvm-%m2)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem ?x359))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv2 32))) ?x167))))
 (let ((?x184 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (=> $x65 (= ?x184 ?x138)))))))))))
 ))
 (let (($x291 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x349 (_ bv1 32))))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (= $x65 $x211)))))))
 ))
 (let (($x22 (forall ((Lambda5 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x123 (_ bv0 32))))
 (=> $x176 $x197))))))
 ))
 (let (($x146 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (= ?x349 (_ bv0 32))))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x123 (_ bv0 32))))
 (= $x176 $x171)))))))
 ))
 (let (($x263 (and $x146 $x22)))
 (let (($x120 (and $x263 $x291)))
 (let (($x264 (and $x120 $x31)))
 (let (($x56 (= $x264 true)))
 (let (($x360 (= $x56 true)))
 (let (($x385 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x49 (bvadd ?x137 input.dst.llvm-%m1)))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem ?x49))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x49 (_ bv2 32))) ?x368))))
 (let ((?x272 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (=> $x350 (= ?x272 ?x199)))))))))))
 ))
 (let (($x383 (and $x135 $x385)))
 (let (($x257 (= $x383 true)))
 (let (($x201 (= $x257 true)))
 (let (($x310 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x49 (bvadd ?x137 input.dst.llvm-%m1)))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x49))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv2 32))) ?x60)))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv3 32))) ?x190)))
 (let ((?x272 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (=> $x350 (= ?x272 ?x67))))))))))))
 ))
 (let (($x38 (and $x135 $x310)))
 (let (($x14 (= $x38 true)))
 (let (($x337 (= $x14 true)))
 (let (($x294 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x49 (bvadd ?x137 input.dst.llvm-%m1)))
 (let ((?x60 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x49))))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv2 32))) ?x60)))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv3 32))) ?x190)))
 (let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x243 (_ bv1 32))))
 (=> $x356 (= ?x96 ?x67))))))))))))
 ))
 (let (($x210 (and $x77 $x294)))
 (let (($x302 (= $x210 true)))
 (let (($x182 (= $x302 true)))
 (let (($x367 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x256 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x375 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x61 (and $x375 $x256)))
 (let (($x372 (and $x61 $x367)))
 (let (($x373 (= $x372 true)))
 (let (($x369 (= $x373 true)))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x137 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x359 (bvadd ?x137 input.dst.llvm-%m2)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x359))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv2 32))) ?x25)))
 (let ((?x347 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv3 32))) ?x9)))
 (let ((?x184 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (=> $x65 (= ?x184 ?x347))))))))))))
 ))
 (let (($x160 (and $x120 $x214)))
 (let (($x54 (= $x160 true)))
 (let (($x278 (= $x54 true)))
 (let ((?x165 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x191 (= (_ bv0 32) ?x165)))
 (let ((?x58 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x86 (= (_ bv0 32) ?x58)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x314 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x329)))
 (let ((?x279 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x279)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x344 $x304)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x158 (and $x202 $x111)))
 (let (($x76 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x379 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x379 $x374)))
 (let (($x377 (not $x134)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x381 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x378 (and $x381 $x382)))
 (let (($x179 (and (not $x378) $x377)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x217 $x118)))
 (let (($x162 (not $x30)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x149 $x181)))
 (let (($x370 (and (not $x52) $x162)))
 (let (($x348 (and (and (and (and (and (and $x370 $x179) $x249) $x76) $x158) $x314) $x86)))
 (let (($x122 (and $x348 $x191)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x245 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x339 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x245)))
 (let (($x90 (or false (or false (and (and true (or $x339 $x220)) (or $x73 $x41))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x129 (and $x124 $x122)))
 (let (($x163 (= $x129 true)))
 (let (($x248 (= $x163 true)))
 (let ((?x72 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x188 (= (_ bv0 2) ?x72)))
 (let (($x357 (= $x188 true)))
 (let (($x285 (and $x357 $x248)))
 (let (($x233 (and $x285 $x278)))
 (let (($x254 (and $x233 $x369)))
 (let (($x112 (and $x254 $x182)))
 (let (($x66 (and $x112 $x337)))
 (let (($x218 (and $x66 $x201)))
 (let (($x50 (and $x218 $x360)))
 (let (($x286 (and $x50 $x276)))
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x96 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x272 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (=> $x350 (= ?x272 ?x96))))))))
 ))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x356 (bvuge ?x243 (_ bv1 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x315 (_ bv1 32))))
 (= $x350 $x356))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x243 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x243 (_ bv0 32))))
 (let (($x32 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x315 (_ bv0 32))))
 (= $x147 $x208))))))))
 ))
 (let (($x322 (and $x75 $x119)))
 (let (($x47 (and $x322 $x16)))
 (let (($x177 (and $x47 $x222)))
 (let (($x258 (and $x177 $x286)))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x354 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x184 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (=> $x65 (= ?x184 ?x354))))))))
 ))
 (let (($x17 (forall ((Lambda5 (_ BitVec 32)) )(let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x123 (_ bv1 32))))
 (= $x65 (bvuge ?x229 (_ bv1 32)))))))))
 ))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x229 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x123 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x123 (_ bv0 32))))
 (= $x176 (= ?x229 (_ bv0 32)))))))))
 ))
 (let (($x150 (and $x145 $x22)))
 (let (($x299 (and $x150 $x17)))
 (let (($x175 (and $x299 $x180)))
 (let (($x106 (and $x175 $x258)))
 (let (($x365 (=> $x106 $x364)))
 (not $x365))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000000d)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9409368c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x480c9798)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0d86e444)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x0d86e444)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x480c979b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9409368f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x480c9798)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9409368c)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000000d))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000d) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000d) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000d) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0d86e478) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000d) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000d) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000d) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000060)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04004082)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18a04210)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00810a04)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x04004082)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00810a07)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18a04213)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00810a04)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18a04210)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000060))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000060))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04004202) #x04
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000060) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000060))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000060) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000060) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000060) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x45 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x308 input.dst.llvm-%m2)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x234))))
 (let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (=> $x90 (= ?x162 ?x301)))))))))))
 ))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x372 (_ bv1 32))))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (= $x90 $x313)))))))
 ))
 (let (($x264 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (= false false)))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (=> $x339 $x354))))))
 ))
 (let (($x334 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x372 (_ bv0 32))))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (= $x339 $x373)))))))
 ))
 (let (($x56 (and $x334 $x264)))
 (let (($x26 (and $x56 $x318)))
 (let (($x187 (and $x26 $x45)))
 (let (($x225 (= $x187 true)))
 (let (($x297 (= $x225 true)))
 (let ((?x371 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x126 (= (_ bv0 2) ?x371)))
 (let (($x227 (= $x126 true)))
 (let (($x307 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x308 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x117))))
 (let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (=> $x90 (= ?x162 ?x33)))))))))))
 ))
 (let (($x215 (and $x26 $x307)))
 (let (($x261 (= $x215 true)))
 (let (($x219 (= $x261 true)))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x308 input.dst.llvm-%m2)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x234))))
 (let ((?x119 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (=> $x243 (= ?x119 ?x301)))))))))))
 ))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x372 (_ bv1 32))))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (= $x243 $x313)))))))
 ))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (= false false)))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x101 (_ bv0 32))))
 (=> $x17 $x354))))))
 ))
 (let (($x254 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x372 (_ bv0 32))))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x101 (_ bv0 32))))
 (= $x17 $x373)))))))
 ))
 (let (($x82 (and $x254 $x180)))
 (let (($x18 (and $x82 $x213)))
 (let (($x110 (and $x18 $x55)))
 (let (($x324 (= $x110 true)))
 (let (($x172 (= $x324 true)))
 (let (($x203 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x308 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x117))))
 (let ((?x217 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (=> $x124 (= ?x217 ?x33)))))))))))
 ))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x372 (_ bv1 32))))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (= $x124 $x313)))))))
 ))
 (let (($x20 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (= false false)))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x189 (_ bv0 32))))
 (=> $x220 $x354))))))
 ))
 (let (($x92 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x372 (_ bv0 32))))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x189 (_ bv0 32))))
 (= $x220 $x373)))))))
 ))
 (let (($x289 (and $x92 $x20)))
 (let (($x97 (and $x289 $x196)))
 (let (($x42 (and $x97 $x203)))
 (let (($x63 (= $x42 true)))
 (let (($x252 (= $x63 true)))
 (let (($x35 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x308 input.dst.llvm-%m1)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x260)))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x216)))
 (let ((?x217 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (=> $x124 (= ?x217 ?x364))))))))))))
 ))
 (let (($x212 (and $x97 $x35)))
 (let (($x159 (= $x212 true)))
 (let (($x342 (= $x159 true)))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x308 input.dst.llvm-%m1)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x260)))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x216)))
 (let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (=> $x90 (= ?x162 ?x364))))))))))))
 ))
 (let (($x303 (and $x26 $x273)))
 (let (($x238 (= $x303 true)))
 (let (($x85 (= $x238 true)))
 (let (($x21 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x383 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x384 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x257 (and $x384 $x383)))
 (let (($x169 (and $x257 $x21)))
 (let (($x36 (= $x169 true)))
 (let (($x128 (= $x36 true)))
 (let (($x193 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x308 input.dst.llvm-%m2)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x135)))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x310)))
 (let ((?x119 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (=> $x243 (= ?x119 ?x337))))))))))))
 ))
 (let (($x380 (and $x18 $x193)))
 (let (($x48 (= $x380 true)))
 (let (($x142 (= $x48 true)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x178 (= (_ bv0 32) ?x236)))
 (let ((?x98 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x242 (= (_ bv0 32) ?x98)))
 (let ((?x205 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x205)))
 (let ((?x137 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x359 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x15 (and $x253 $x359)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x120 $x15)))
 (let (($x291 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x349 (and $x298 $x164)))
 (let (($x171 (not $x349)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x285 $x40)))
 (let (($x146 (and (not $x155) $x171)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x165 $x191)))
 (let (($x129 (not $x122)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (and $x179 $x244)))
 (let (($x248 (and (not $x348) $x129)))
 (let (($x214 (and (and (and (and (and (and $x248 $x146) $x211) $x291) $x104) $x133) $x242)))
 (let (($x160 (and $x214 $x178)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x283 (or false (or false (and (and true (or $x247 $x202)) (or $x111 $x158))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x283)))
 (let (($x54 (and $x86 $x160)))
 (let (($x278 (= $x54 true)))
 (let (($x233 (= $x278 true)))
 (let (($x368 (and $x233 $x142)))
 (let (($x167 (and $x368 $x128)))
 (let (($x27 (and $x167 $x85)))
 (let (($x275 (and $x27 $x342)))
 (let (($x79 (and $x275 $x252)))
 (let (($x100 (and $x79 $x172)))
 (let (($x74 (and $x100 $x219)))
 (let (($x108 (and $x74 $x227)))
 (let (($x379 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x217 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (=> $x124 (= ?x217 ?x162))))))))
 ))
 (let (($x181 (forall ((Lambda5 (_ BitVec 32)) )(let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (= $x124 $x90))))))))
 ))
 (let (($x268 (forall ((Lambda5 (_ BitVec 32)) )(let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x189 (_ bv0 32))))
 (= $x220 $x339))))))))
 ))
 (let (($x41 (and $x268 $x20)))
 (let (($x52 (and $x41 $x181)))
 (let (($x374 (and $x52 $x379)))
 (let (($x270 (and $x374 $x108)))
 (let (($x325 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x356 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x119 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (=> $x243 (= ?x119 ?x356))))))))
 ))
 (let (($x240 (forall ((Lambda5 (_ BitVec 32)) )(let (($x145 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (= $x243 (bvuge ?x65 (_ bv1 32)))))))))
 ))
 (let (($x184 (forall ((Lambda5 (_ BitVec 32)) )(let (($x145 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x101 (_ bv0 32))))
 (= $x17 (= ?x65 (_ bv0 32)))))))))
 ))
 (let (($x175 (and $x184 $x180)))
 (let (($x75 (and $x175 $x240)))
 (let (($x343 (and $x75 $x325)))
 (let (($x230 (and $x343 $x270)))
 (let (($x102 (=> $x230 $x297)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x45 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x308 input.dst.llvm-%m2)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x234))))
 (let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (=> $x90 (= ?x162 ?x301)))))))))))
 ))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x372 (_ bv1 32))))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (= $x90 $x313)))))))
 ))
 (let (($x264 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (= false false)))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (=> $x339 $x354))))))
 ))
 (let (($x334 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x372 (_ bv0 32))))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (= $x339 $x373)))))))
 ))
 (let (($x56 (and $x334 $x264)))
 (let (($x26 (and $x56 $x318)))
 (let (($x187 (and $x26 $x45)))
 (let (($x225 (= $x187 true)))
 (let (($x297 (= $x225 true)))
 (let ((?x371 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x126 (= (_ bv0 2) ?x371)))
 (let (($x227 (= $x126 true)))
 (let (($x307 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x308 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x117))))
 (let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (=> $x90 (= ?x162 ?x33)))))))))))
 ))
 (let (($x215 (and $x26 $x307)))
 (let (($x261 (= $x215 true)))
 (let (($x219 (= $x261 true)))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x308 input.dst.llvm-%m2)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x234))))
 (let ((?x119 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (=> $x243 (= ?x119 ?x301)))))))))))
 ))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x372 (_ bv1 32))))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (= $x243 $x313)))))))
 ))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (= false false)))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x101 (_ bv0 32))))
 (=> $x17 $x354))))))
 ))
 (let (($x254 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x372 (_ bv0 32))))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x101 (_ bv0 32))))
 (= $x17 $x373)))))))
 ))
 (let (($x82 (and $x254 $x180)))
 (let (($x18 (and $x82 $x213)))
 (let (($x110 (and $x18 $x55)))
 (let (($x324 (= $x110 true)))
 (let (($x172 (= $x324 true)))
 (let (($x203 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x308 input.dst.llvm-%m1)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x117))))
 (let ((?x217 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (=> $x124 (= ?x217 ?x33)))))))))))
 ))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x372 (_ bv1 32))))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (= $x124 $x313)))))))
 ))
 (let (($x20 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (= false false)))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x189 (_ bv0 32))))
 (=> $x220 $x354))))))
 ))
 (let (($x92 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x372 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (= ?x372 (_ bv0 32))))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x189 (_ bv0 32))))
 (= $x220 $x373)))))))
 ))
 (let (($x289 (and $x92 $x20)))
 (let (($x97 (and $x289 $x196)))
 (let (($x42 (and $x97 $x203)))
 (let (($x63 (= $x42 true)))
 (let (($x252 (= $x63 true)))
 (let (($x35 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x308 input.dst.llvm-%m1)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x260)))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x216)))
 (let ((?x217 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (=> $x124 (= ?x217 ?x364))))))))))))
 ))
 (let (($x212 (and $x97 $x35)))
 (let (($x159 (= $x212 true)))
 (let (($x342 (= $x159 true)))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x308 input.dst.llvm-%m1)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x216 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x260)))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x216)))
 (let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (=> $x90 (= ?x162 ?x364))))))))))))
 ))
 (let (($x303 (and $x26 $x273)))
 (let (($x238 (= $x303 true)))
 (let (($x85 (= $x238 true)))
 (let (($x21 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x383 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x384 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x257 (and $x384 $x383)))
 (let (($x169 (and $x257 $x21)))
 (let (($x36 (= $x169 true)))
 (let (($x128 (= $x36 true)))
 (let (($x193 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x308 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x308 input.dst.llvm-%m2)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x135)))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x310)))
 (let ((?x119 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (=> $x243 (= ?x119 ?x337))))))))))))
 ))
 (let (($x380 (and $x18 $x193)))
 (let (($x48 (= $x380 true)))
 (let (($x142 (= $x48 true)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x178 (= (_ bv0 32) ?x236)))
 (let ((?x98 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x242 (= (_ bv0 32) ?x98)))
 (let ((?x205 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x205)))
 (let ((?x137 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x359 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x15 (and $x253 $x359)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x120 $x15)))
 (let (($x291 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x349 (and $x298 $x164)))
 (let (($x171 (not $x349)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x285 $x40)))
 (let (($x146 (and (not $x155) $x171)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x165 $x191)))
 (let (($x129 (not $x122)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (and $x179 $x244)))
 (let (($x248 (and (not $x348) $x129)))
 (let (($x214 (and (and (and (and (and (and $x248 $x146) $x211) $x291) $x104) $x133) $x242)))
 (let (($x160 (and $x214 $x178)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x283 (or false (or false (and (and true (or $x247 $x202)) (or $x111 $x158))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x283)))
 (let (($x54 (and $x86 $x160)))
 (let (($x278 (= $x54 true)))
 (let (($x233 (= $x278 true)))
 (let (($x368 (and $x233 $x142)))
 (let (($x167 (and $x368 $x128)))
 (let (($x27 (and $x167 $x85)))
 (let (($x275 (and $x27 $x342)))
 (let (($x79 (and $x275 $x252)))
 (let (($x100 (and $x79 $x172)))
 (let (($x74 (and $x100 $x219)))
 (let (($x108 (and $x74 $x227)))
 (let (($x379 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x217 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (=> $x124 (= ?x217 ?x162))))))))
 ))
 (let (($x181 (forall ((Lambda5 (_ BitVec 32)) )(let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x245 (_ bv1 32))))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x189 (_ bv1 32))))
 (= $x124 $x90))))))))
 ))
 (let (($x268 (forall ((Lambda5 (_ BitVec 32)) )(let (($x357 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x245 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (let (($x177 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x189 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x189 (_ bv0 32))))
 (= $x220 $x339))))))))
 ))
 (let (($x41 (and $x268 $x20)))
 (let (($x52 (and $x41 $x181)))
 (let (($x374 (and $x52 $x379)))
 (let (($x270 (and $x374 $x108)))
 (let (($x325 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x356 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x119 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (=> $x243 (= ?x119 ?x356))))))))
 ))
 (let (($x240 (forall ((Lambda5 (_ BitVec 32)) )(let (($x145 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x101 (_ bv1 32))))
 (= $x243 (bvuge ?x65 (_ bv1 32)))))))))
 ))
 (let (($x184 (forall ((Lambda5 (_ BitVec 32)) )(let (($x145 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x65 (ite $x145 (_ bv1 32) (_ bv0 32))))
 (let (($x335 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x101 (_ bv0 32))))
 (= $x17 (= ?x65 (_ bv0 32)))))))))
 ))
 (let (($x175 (and $x184 $x180)))
 (let (($x75 (and $x175 $x240)))
 (let (($x343 (and $x75 $x325)))
 (let (($x230 (and $x343 $x270)))
 (let (($x102 (=> $x230 $x297)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00800840)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10002404)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x90018000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10002407)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00800843)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10002404)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00800840)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x08
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x08
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x90018003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x90018002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x90018001 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x90018000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #x90018003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x90018002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x90018001 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x90018000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x08000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x08000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xffbb3d30)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4b7fbdfc)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc5fbdff8)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000032)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc5fbdffb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4b7fbdff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc5fbdff8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4b7fbdfc)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000c9) #x04
      #x00))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000032))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x00000400
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000c9) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x00000400
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #xffbb3d33 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xffbb3d32 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xffbb3d31 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xffbb3d30 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #xffbb3d33 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xffbb3d32 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xffbb3d31 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xffbb3d30 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x287 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x212)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x287))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv2 32))) ?x151)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv3 32))) ?x70)))
 (let ((?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (=> $x348 (= ?x155 ?x69))))))))))))
 ))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x318 (_ bv1 32))))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (= $x348 $x259)))))))
 ))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (= false false)))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x344 (_ bv0 32))))
 (=> $x99 $x119))))))
 ))
 (let (($x307 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x318 (_ bv0 32))))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x344 (_ bv0 32))))
 (= $x99 $x26)))))))
 ))
 (let (($x74 (and $x307 $x219)))
 (let (($x227 (and $x74 $x126)))
 (let (($x290 (and $x227 $x23)))
 (let (($x224 (= $x290 true)))
 (let (($x168 (= $x224 true)))
 (let (($x170 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x88))))
 (let ((?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (=> $x348 (= ?x155 ?x67)))))))))))
 ))
 (let (($x78 (and $x227 $x170)))
 (let (($x121 (= $x78 true)))
 (let (($x341 (= $x121 true)))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x159 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x276))))
 (let ((?x73 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (=> $x357 (= ?x73 ?x183)))))))))))
 ))
 (let (($x312 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x318 (_ bv1 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (= $x357 $x259)))))))
 ))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (= false false)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x141 (_ bv0 32))))
 (=> $x208 $x119))))))
 ))
 (let (($x241 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x318 (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x141 (_ bv0 32))))
 (= $x208 $x26)))))))
 ))
 (let (($x361 (and $x241 $x96)))
 (let (($x260 (and $x361 $x312)))
 (let (($x226 (and $x260 $x194)))
 (let (($x305 (= $x226 true)))
 (let (($x321 (= $x305 true)))
 (let (($x338 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x88))))
 (let ((?x248 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (=> $x163 (= ?x248 ?x67)))))))))))
 ))
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x318 (_ bv1 32))))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (= $x163 $x259)))))))
 ))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (= false false)))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x279 (_ bv0 32))))
 (=> $x111 $x119))))))
 ))
 (let (($x221 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x318 (_ bv0 32))))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x279 (_ bv0 32))))
 (= $x111 $x26)))))))
 ))
 (let (($x118 (and $x221 $x314)))
 (let (($x71 (and $x118 $x222)))
 (let (($x330 (and $x71 $x338)))
 (let (($x60 (= $x330 true)))
 (let (($x288 (= $x60 true)))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x340))))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv2 32))) ?x237)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv3 32))) ?x51)))
 (let ((?x248 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (=> $x163 (= ?x248 ?x22))))))))))))
 ))
 (let (($x267 (and $x71 $x136)))
 (let (($x62 (= $x267 true)))
 (let (($x328 (= $x62 true)))
 (let (($x32 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x340))))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv2 32))) ?x237)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv3 32))) ?x51)))
 (let ((?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (=> $x348 (= ?x155 ?x22))))))))))))
 ))
 (let (($x315 (and $x227 $x32)))
 (let (($x147 (= $x315 true)))
 (let (($x284 (= $x147 true)))
 (let (($x55 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x251 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x10 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x301 (and $x10 $x251)))
 (let (($x110 (and $x301 $x55)))
 (let (($x324 (= $x110 true)))
 (let (($x172 (= $x324 true)))
 (let (($x203 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x159 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x159))))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv2 32))) ?x319)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv3 32))) ?x127)))
 (let ((?x73 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (=> $x357 (= ?x73 ?x33))))))))))))
 ))
 (let (($x42 (and $x260 $x203)))
 (let (($x63 (= $x42 true)))
 (let (($x252 (= $x63 true)))
 (let ((?x48 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x142 (= (_ bv0 32) ?x48)))
 (let ((?x193 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x380 (= (_ bv0 32) ?x193)))
 (let ((?x66 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x185 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x310 (and $x64 $x135)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x337 (and $x59 $x310)))
 (let (($x94 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (and $x18 $x77)))
 (let (($x308 (not $x320)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x313 $x12)))
 (let (($x95 (and (not $x213) $x308)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x367 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x373 (and $x367 $x372)))
 (let (($x369 (not $x373)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (and $x253 $x309)))
 (let (($x82 (and (not $x332) $x369)))
 (let (($x385 (and (and (and (and (and (and $x82 $x95) $x14) $x94) $x337) $x28) $x380)))
 (let (($x383 (and $x385 $x142)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x233 (or false (or false (and (and true (or $x205 $x133)) (or $x236 $x178))))))
 (let (($x306 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x233)))
 (let (($x257 (and $x306 $x383)))
 (let (($x201 (= $x257 true)))
 (let (($x218 (= $x201 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x269 (= (_ bv0 2) ?x9)))
 (let (($x291 (= $x269 true)))
 (let (($x21 (and $x291 $x218)))
 (let (($x79 (and $x21 $x252)))
 (let (($x100 (and $x79 $x172)))
 (let (($x350 (and $x100 $x284)))
 (let (($x8 (and $x350 $x328)))
 (let (($x302 (and $x8 $x288)))
 (let (($x57 (and $x302 $x321)))
 (let (($x195 (and $x57 $x341)))
 (let (($x146 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x248 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (=> $x163 (= ?x248 ?x155))))))))
 ))
 (let (($x191 (forall ((Lambda5 (_ BitVec 32)) )(let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (= $x163 $x348))))))))
 ))
 (let (($x158 (forall ((Lambda5 (_ BitVec 32)) )(let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x344 (_ bv0 32))))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x279 (_ bv0 32))))
 (= $x111 $x99))))))))
 ))
 (let (($x283 (and $x158 $x314)))
 (let (($x122 (and $x283 $x191)))
 (let (($x25 (and $x122 $x146)))
 (let (($x271 (and $x25 $x195)))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x73 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (=> $x357 (= ?x73 ?x124))))))))
 ))
 (let (($x339 (forall ((Lambda5 (_ BitVec 32)) )(let (($x299 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x175 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (= $x357 (bvuge ?x175 (_ bv1 32)))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let (($x299 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x175 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x141 (_ bv0 32))))
 (= $x208 (= ?x175 (_ bv0 32)))))))))
 ))
 (let (($x325 (and $x75 $x96)))
 (let (($x239 (and $x325 $x339)))
 (let (($x378 (and $x239 $x162)))
 (let (($x316 (and $x378 $x271)))
 (let (($x34 (=> $x316 $x168)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x287 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x212)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x287))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv2 32))) ?x151)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv3 32))) ?x70)))
 (let ((?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (=> $x348 (= ?x155 ?x69))))))))))))
 ))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x318 (_ bv1 32))))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (= $x348 $x259)))))))
 ))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (= false false)))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x344 (_ bv0 32))))
 (=> $x99 $x119))))))
 ))
 (let (($x307 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x318 (_ bv0 32))))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x344 (_ bv0 32))))
 (= $x99 $x26)))))))
 ))
 (let (($x74 (and $x307 $x219)))
 (let (($x227 (and $x74 $x126)))
 (let (($x290 (and $x227 $x23)))
 (let (($x224 (= $x290 true)))
 (let (($x168 (= $x224 true)))
 (let (($x170 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x88))))
 (let ((?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (=> $x348 (= ?x155 ?x67)))))))))))
 ))
 (let (($x78 (and $x227 $x170)))
 (let (($x121 (= $x78 true)))
 (let (($x341 (= $x121 true)))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x159 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x276))))
 (let ((?x73 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (=> $x357 (= ?x73 ?x183)))))))))))
 ))
 (let (($x312 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x318 (_ bv1 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (= $x357 $x259)))))))
 ))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (= false false)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x141 (_ bv0 32))))
 (=> $x208 $x119))))))
 ))
 (let (($x241 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x318 (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x141 (_ bv0 32))))
 (= $x208 $x26)))))))
 ))
 (let (($x361 (and $x241 $x96)))
 (let (($x260 (and $x361 $x312)))
 (let (($x226 (and $x260 $x194)))
 (let (($x305 (= $x226 true)))
 (let (($x321 (= $x305 true)))
 (let (($x338 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x88))))
 (let ((?x248 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (=> $x163 (= ?x248 ?x67)))))))))))
 ))
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x318 (_ bv1 32))))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (= $x163 $x259)))))))
 ))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let (($x119 (= false false)))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x279 (_ bv0 32))))
 (=> $x111 $x119))))))
 ))
 (let (($x221 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x318 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (= ?x318 (_ bv0 32))))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x279 (_ bv0 32))))
 (= $x111 $x26)))))))
 ))
 (let (($x118 (and $x221 $x314)))
 (let (($x71 (and $x118 $x222)))
 (let (($x330 (and $x71 $x338)))
 (let (($x60 (= $x330 true)))
 (let (($x288 (= $x60 true)))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x340))))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv2 32))) ?x237)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv3 32))) ?x51)))
 (let ((?x248 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (=> $x163 (= ?x248 ?x22))))))))))))
 ))
 (let (($x267 (and $x71 $x136)))
 (let (($x62 (= $x267 true)))
 (let (($x328 (= $x62 true)))
 (let (($x32 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x340))))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv2 32))) ?x237)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv3 32))) ?x51)))
 (let ((?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (=> $x348 (= ?x155 ?x22))))))))))))
 ))
 (let (($x315 (and $x227 $x32)))
 (let (($x147 (= $x315 true)))
 (let (($x284 (= $x147 true)))
 (let (($x55 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x251 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x10 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x301 (and $x10 $x251)))
 (let (($x110 (and $x301 $x55)))
 (let (($x324 (= $x110 true)))
 (let (($x172 (= $x324 true)))
 (let (($x203 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x212 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x159 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x319 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x159))))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv2 32))) ?x319)))
 (let ((?x33 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv3 32))) ?x127)))
 (let ((?x73 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (=> $x357 (= ?x73 ?x33))))))))))))
 ))
 (let (($x42 (and $x260 $x203)))
 (let (($x63 (= $x42 true)))
 (let (($x252 (= $x63 true)))
 (let ((?x48 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x142 (= (_ bv0 32) ?x48)))
 (let ((?x193 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x380 (= (_ bv0 32) ?x193)))
 (let ((?x66 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x185 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x310 (and $x64 $x135)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x337 (and $x59 $x310)))
 (let (($x94 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (and $x18 $x77)))
 (let (($x308 (not $x320)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x313 $x12)))
 (let (($x95 (and (not $x213) $x308)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x367 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x373 (and $x367 $x372)))
 (let (($x369 (not $x373)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (and $x253 $x309)))
 (let (($x82 (and (not $x332) $x369)))
 (let (($x385 (and (and (and (and (and (and $x82 $x95) $x14) $x94) $x337) $x28) $x380)))
 (let (($x383 (and $x385 $x142)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x233 (or false (or false (and (and true (or $x205 $x133)) (or $x236 $x178))))))
 (let (($x306 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x233)))
 (let (($x257 (and $x306 $x383)))
 (let (($x201 (= $x257 true)))
 (let (($x218 (= $x201 true)))
 (let ((?x9 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x269 (= (_ bv0 2) ?x9)))
 (let (($x291 (= $x269 true)))
 (let (($x21 (and $x291 $x218)))
 (let (($x79 (and $x21 $x252)))
 (let (($x100 (and $x79 $x172)))
 (let (($x350 (and $x100 $x284)))
 (let (($x8 (and $x350 $x328)))
 (let (($x302 (and $x8 $x288)))
 (let (($x57 (and $x302 $x321)))
 (let (($x195 (and $x57 $x341)))
 (let (($x146 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x248 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (=> $x163 (= ?x248 ?x155))))))))
 ))
 (let (($x191 (forall ((Lambda5 (_ BitVec 32)) )(let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x348 (bvuge ?x344 (_ bv1 32))))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x279 (_ bv1 32))))
 (= $x163 $x348))))))))
 ))
 (let (($x158 (forall ((Lambda5 (_ BitVec 32)) )(let (($x7 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x344 (_ bv0 32))))
 (let (($x379 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x279 (_ bv0 32))))
 (= $x111 $x99))))))))
 ))
 (let (($x283 (and $x158 $x314)))
 (let (($x122 (and $x283 $x191)))
 (let (($x25 (and $x122 $x146)))
 (let (($x271 (and $x25 $x195)))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x124 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x73 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (=> $x357 (= ?x73 ?x124))))))))
 ))
 (let (($x339 (forall ((Lambda5 (_ BitVec 32)) )(let (($x299 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x175 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x141 (_ bv1 32))))
 (= $x357 (bvuge ?x175 (_ bv1 32)))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let (($x299 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x175 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x141 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x141 (_ bv0 32))))
 (= $x208 (= ?x175 (_ bv0 32)))))))))
 ))
 (let (($x325 (and $x75 $x96)))
 (let (($x239 (and $x325 $x339)))
 (let (($x378 (and $x239 $x162)))
 (let (($x316 (and $x378 $x271)))
 (let (($x34 (=> $x316 $x168)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb7c8adf4)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5dde6f70)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff7cdf64)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xb7c8adf4)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff7cdf67)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5dde6f73)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff7cdf64)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5dde6f70)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x04
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00040000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00040000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00040000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00040000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x08808202)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000824)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x407f2420)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x08808202)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x407f2423)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000827)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x407f2420)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000824)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00008000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00008000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00008000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00008000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x311 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x221 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x221))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv2 32))) ?x71)))
 (let ((?x328 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv3 32))) ?x136)))
 (let ((?x369 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (=> $x233 (= ?x369 ?x328))))))))))))
 ))
 (let (($x192 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x110 (_ bv1 32))))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (= $x233 $x219)))))))
 ))
 (let (($x226 (forall ((Lambda5 (_ BitVec 32)) )(let (($x124 (= false false)))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x144 (_ bv0 32))))
 (=> $x205 $x124))))))
 ))
 (let (($x207 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x110 (_ bv0 32))))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x144 (_ bv0 32))))
 (= $x205 $x324)))))))
 ))
 (let (($x305 (and $x207 $x226)))
 (let (($x39 (and $x305 $x192)))
 (let (($x148 (and $x39 $x311)))
 (let (($x256 (= $x148 true)))
 (let (($x61 (= $x256 true)))
 (let ((?x49 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x16 (= (_ bv0 2) ?x49)))
 (let (($x24 (= $x16 true)))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x81 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x105))))
 (let ((?x369 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (=> $x233 (= ?x369 ?x129)))))))))))
 ))
 (let (($x270 (and $x39 $x37)))
 (let (($x317 (= $x270 true)))
 (let (($x225 (= $x317 true)))
 (let (($x131 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x221 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x85))))
 (let ((?x314 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (=> $x344 (= ?x314 ?x156)))))))))))
 ))
 (let (($x371 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x110 (_ bv1 32))))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (= $x344 $x219)))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let (($x124 (= false false)))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (=> $x339 $x124))))))
 ))
 (let (($x100 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x110 (_ bv0 32))))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (= $x339 $x324)))))))
 ))
 (let (($x130 (and $x100 $x162)))
 (let (($x126 (and $x130 $x371)))
 (let (($x215 (and $x126 $x131)))
 (let (($x5 (= $x215 true)))
 (let (($x108 (= $x5 true)))
 (let (($x164 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x81 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x105))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (=> $x306 (= ?x367 ?x129)))))))))))
 ))
 (let (($x68 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x110 (_ bv1 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (= $x306 $x219)))))))
 ))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let (($x124 (= false false)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x104 (_ bv0 32))))
 (=> $x133 $x124))))))
 ))
 (let (($x90 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x110 (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x104 (_ bv0 32))))
 (= $x133 $x324)))))))
 ))
 (let (($x109 (and $x90 $x214)))
 (let (($x354 (and $x109 $x68)))
 (let (($x169 (and $x354 $x164)))
 (let (($x128 (= $x169 true)))
 (let (($x167 (= $x128 true)))
 (let (($x177 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x81 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x81))))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv2 32))) ?x69)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv3 32))) ?x23)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (=> $x306 (= ?x367 ?x168))))))))))))
 ))
 (let (($x189 (and $x354 $x177)))
 (let (($x268 (= $x189 true)))
 (let (($x41 (= $x268 true)))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x81 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x81))))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv2 32))) ?x69)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv3 32))) ?x23)))
 (let ((?x369 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (=> $x233 (= ?x369 ?x168))))))))))))
 ))
 (let (($x120 (and $x39 $x347)))
 (let (($x364 (= $x120 true)))
 (let (($x134 (= $x364 true)))
 (let (($x152 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x330 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x228 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x60 (and $x228 $x330)))
 (let (($x255 (and $x60 $x152)))
 (let (($x19 (= $x255 true)))
 (let (($x106 (= $x19 true)))
 (let (($x210 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x221 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x221))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv2 32))) ?x71)))
 (let ((?x328 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv3 32))) ?x136)))
 (let ((?x314 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (=> $x344 (= ?x314 ?x328))))))))))))
 ))
 (let (($x46 (and $x126 $x210)))
 (let (($x103 (= $x46 true)))
 (let (($x114 (= $x103 true)))
 (let ((?x113 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x342 (= (_ bv0 32) ?x113)))
 (let ((?x250 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x275 (= (_ bv0 32) ?x250)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x232)))
 (let ((?x212 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x216 $x159)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x260 $x117)))
 (let (($x312 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x318 (and $x264 $x50)))
 (let (($x26 (not $x318)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x21 $x56)))
 (let (($x241 (and (not $x36) $x26)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (and $x48 $x142)))
 (let (($x257 (not $x383)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x385 (and $x95 $x368)))
 (let (($x218 (and (not $x385) $x257)))
 (let (($x203 (and (and (and (and (and (and $x218 $x241) $x259) $x312) $x125) $x186) $x275)))
 (let (($x42 (and $x203 $x342)))
 (let (($x337 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x310 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x384 (or false (or false (and (and true (or $x199 $x59)) (or $x310 $x337))))))
 (let (($x380 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x384)))
 (let (($x63 (and $x380 $x42)))
 (let (($x252 (= $x63 true)))
 (let (($x79 (= $x252 true)))
 (let (($x88 (and $x79 $x114)))
 (let (($x276 (and $x88 $x106)))
 (let (($x351 (and $x276 $x134)))
 (let (($x149 (and $x351 $x41)))
 (let (($x138 (and $x149 $x167)))
 (let (($x297 (and $x138 $x108)))
 (let (($x296 (and $x297 $x225)))
 (let (($x72 (and $x296 $x24)))
 (let (($x18 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x369 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (=> $x306 (= ?x367 ?x369))))))))
 ))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (= $x306 $x233))))))))
 ))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x144 (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x104 (_ bv0 32))))
 (= $x133 $x205))))))))
 ))
 (let (($x178 (and $x98 $x214)))
 (let (($x332 (and $x178 $x309)))
 (let (($x77 (and $x332 $x18)))
 (let (($x188 (and $x77 $x72)))
 (let (($x349 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x314 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (=> $x344 (= ?x314 ?x348))))))))
 ))
 (let (($x304 (forall ((Lambda5 (_ BitVec 32)) )(let (($x75 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x357 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (= $x344 (bvuge ?x357 (_ bv1 32)))))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x75 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x357 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (= $x339 (= ?x357 (_ bv0 32)))))))))
 ))
 (let (($x378 (and $x73 $x162)))
 (let (($x158 (and $x378 $x304)))
 (let (($x171 (and $x158 $x349)))
 (let (($x375 (and $x171 $x188)))
 (let (($x107 (=> $x375 $x61)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x311 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x221 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x221))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv2 32))) ?x71)))
 (let ((?x328 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv3 32))) ?x136)))
 (let ((?x369 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (=> $x233 (= ?x369 ?x328))))))))))))
 ))
 (let (($x192 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x110 (_ bv1 32))))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (= $x233 $x219)))))))
 ))
 (let (($x226 (forall ((Lambda5 (_ BitVec 32)) )(let (($x124 (= false false)))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x144 (_ bv0 32))))
 (=> $x205 $x124))))))
 ))
 (let (($x207 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x110 (_ bv0 32))))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x144 (_ bv0 32))))
 (= $x205 $x324)))))))
 ))
 (let (($x305 (and $x207 $x226)))
 (let (($x39 (and $x305 $x192)))
 (let (($x148 (and $x39 $x311)))
 (let (($x256 (= $x148 true)))
 (let (($x61 (= $x256 true)))
 (let ((?x49 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x16 (= (_ bv0 2) ?x49)))
 (let (($x24 (= $x16 true)))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x81 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x105))))
 (let ((?x369 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (=> $x233 (= ?x369 ?x129)))))))))))
 ))
 (let (($x270 (and $x39 $x37)))
 (let (($x317 (= $x270 true)))
 (let (($x225 (= $x317 true)))
 (let (($x131 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x221 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x85))))
 (let ((?x314 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (=> $x344 (= ?x314 ?x156)))))))))))
 ))
 (let (($x371 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x110 (_ bv1 32))))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (= $x344 $x219)))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let (($x124 (= false false)))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (=> $x339 $x124))))))
 ))
 (let (($x100 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x110 (_ bv0 32))))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (= $x339 $x324)))))))
 ))
 (let (($x130 (and $x100 $x162)))
 (let (($x126 (and $x130 $x371)))
 (let (($x215 (and $x126 $x131)))
 (let (($x5 (= $x215 true)))
 (let (($x108 (= $x5 true)))
 (let (($x164 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x81 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x105))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (=> $x306 (= ?x367 ?x129)))))))))))
 ))
 (let (($x68 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x110 (_ bv1 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (= $x306 $x219)))))))
 ))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let (($x124 (= false false)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x104 (_ bv0 32))))
 (=> $x133 $x124))))))
 ))
 (let (($x90 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x110 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x110 (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x104 (_ bv0 32))))
 (= $x133 $x324)))))))
 ))
 (let (($x109 (and $x90 $x214)))
 (let (($x354 (and $x109 $x68)))
 (let (($x169 (and $x354 $x164)))
 (let (($x128 (= $x169 true)))
 (let (($x167 (= $x128 true)))
 (let (($x177 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x81 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x81))))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv2 32))) ?x69)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv3 32))) ?x23)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (=> $x306 (= ?x367 ?x168))))))))))))
 ))
 (let (($x189 (and $x354 $x177)))
 (let (($x268 (= $x189 true)))
 (let (($x41 (= $x268 true)))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x81 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x81))))
 (let ((?x23 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv2 32))) ?x69)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x81 (_ bv3 32))) ?x23)))
 (let ((?x369 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (=> $x233 (= ?x369 ?x168))))))))))))
 ))
 (let (($x120 (and $x39 $x347)))
 (let (($x364 (= $x120 true)))
 (let (($x134 (= $x364 true)))
 (let (($x152 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x330 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x228 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x60 (and $x228 $x330)))
 (let (($x255 (and $x60 $x152)))
 (let (($x19 (= $x255 true)))
 (let (($x106 (= $x19 true)))
 (let (($x210 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x221 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x71 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x221))))
 (let ((?x136 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv2 32))) ?x71)))
 (let ((?x328 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x221 (_ bv3 32))) ?x136)))
 (let ((?x314 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (=> $x344 (= ?x314 ?x328))))))))))))
 ))
 (let (($x46 (and $x126 $x210)))
 (let (($x103 (= $x46 true)))
 (let (($x114 (= $x103 true)))
 (let ((?x113 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x342 (= (_ bv0 32) ?x113)))
 (let ((?x250 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x275 (= (_ bv0 32) ?x250)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x232)))
 (let ((?x212 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x216 $x159)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x260 $x117)))
 (let (($x312 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x318 (and $x264 $x50)))
 (let (($x26 (not $x318)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x21 $x56)))
 (let (($x241 (and (not $x36) $x26)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (and $x48 $x142)))
 (let (($x257 (not $x383)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x385 (and $x95 $x368)))
 (let (($x218 (and (not $x385) $x257)))
 (let (($x203 (and (and (and (and (and (and $x218 $x241) $x259) $x312) $x125) $x186) $x275)))
 (let (($x42 (and $x203 $x342)))
 (let (($x337 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x310 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x384 (or false (or false (and (and true (or $x199 $x59)) (or $x310 $x337))))))
 (let (($x380 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x384)))
 (let (($x63 (and $x380 $x42)))
 (let (($x252 (= $x63 true)))
 (let (($x79 (= $x252 true)))
 (let (($x88 (and $x79 $x114)))
 (let (($x276 (and $x88 $x106)))
 (let (($x351 (and $x276 $x134)))
 (let (($x149 (and $x351 $x41)))
 (let (($x138 (and $x149 $x167)))
 (let (($x297 (and $x138 $x108)))
 (let (($x296 (and $x297 $x225)))
 (let (($x72 (and $x296 $x24)))
 (let (($x18 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x369 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (=> $x306 (= ?x367 ?x369))))))))
 ))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x144 (_ bv1 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x104 (_ bv1 32))))
 (= $x306 $x233))))))))
 ))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let (($x291 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x144 (_ bv0 32))))
 (let (($x25 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x104 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x104 (_ bv0 32))))
 (= $x133 $x205))))))))
 ))
 (let (($x178 (and $x98 $x214)))
 (let (($x332 (and $x178 $x309)))
 (let (($x77 (and $x332 $x18)))
 (let (($x188 (and $x77 $x72)))
 (let (($x349 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x314 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (=> $x344 (= ?x314 ?x348))))))))
 ))
 (let (($x304 (forall ((Lambda5 (_ BitVec 32)) )(let (($x75 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x357 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x245 (_ bv1 32))))
 (= $x344 (bvuge ?x357 (_ bv1 32)))))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x75 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x357 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x245 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x339 (= ?x245 (_ bv0 32))))
 (= $x339 (= ?x357 (_ bv0 32)))))))))
 ))
 (let (($x378 (and $x73 $x162)))
 (let (($x158 (and $x378 $x304)))
 (let (($x171 (and $x158 $x349)))
 (let (($x375 (and $x171 $x188)))
 (let (($x107 (=> $x375 $x61)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44a0280c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0a93d028)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x09802800)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0a93d02b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x44a0280f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0a93d028)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44a0280c)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09802801) #x02
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09802801) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000200
      (let ((a!1 (concat (k!24 (bvadd #x09802803 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x09802802 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x09802801 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x09802800 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x09802803 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x09802802 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x09802801 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x09802800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000200
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x5fdcd7e0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd137ce04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9a0fc208)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9a0fc20b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd137ce07)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9a0fc208)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd137ce04)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x5fdcd7f1) #x01
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x5fdcd7f1) #x01
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000100
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x5fdcd7e3 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x5fdcd7e2 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x5fdcd7e1 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x5fdcd7e0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x5fdcd7e3 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x5fdcd7e2 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x5fdcd7e1 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x5fdcd7e0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000100
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x161 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x360 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x268)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x360))))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x360 (_ bv2 32))) ?x266)))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x360 (_ bv3 32))) ?x153)))
 (let ((?x21 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (=> $x48 (= ?x21 ?x323))))))))))))
 ))
 (let (($x146 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x39 (_ bv1 32))))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (= $x48 $x70)))))))
 ))
 (let (($x384 (forall ((Lambda5 (_ BitVec 32)) )(let (($x348 (= false false)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x310 (_ bv0 32))))
 (=> $x135 $x348))))))
 ))
 (let (($x263 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x39 (_ bv0 32))))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x310 (_ bv0 32))))
 (= $x135 $x81)))))))
 ))
 (let (($x372 (and $x263 $x384)))
 (let (($x211 (and $x372 $x146)))
 (let (($x115 (and $x211 $x161)))
 (let (($x333 (= $x115 true)))
 (let (($x223 (= $x333 true)))
 (let (($x83 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x335 (bvadd ?x268 input.dst.llvm-%m1)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x84))))
 (let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (=> $x201 (= ?x281 ?x22)))))))))))
 ))
 (let (($x24 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x39 (_ bv1 32))))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (= $x201 $x70)))))))
 ))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let (($x348 (= false false)))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x143 (_ bv0 32))))
 (=> $x185 $x348))))))
 ))
 (let (($x270 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x39 (_ bv0 32))))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x143 (_ bv0 32))))
 (= $x185 $x81)))))))
 ))
 (let (($x377 (and $x270 $x296)))
 (let (($x72 (and $x377 $x24)))
 (let (($x249 (and $x72 $x83)))
 (let (($x58 (= $x249 true)))
 (let (($x247 (= $x58 true)))
 (let (($x20 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x41 (bvadd ?x268 input.dst.llvm-%m2)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x341))))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (=> $x144 (= ?x214 ?x132)))))))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x39 (_ bv1 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (= $x144 $x70)))))))
 ))
 (let (($x349 (forall ((Lambda5 (_ BitVec 32)) )(let (($x348 (= false false)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x99 (_ bv0 32))))
 (=> $x304 $x348))))))
 ))
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x39 (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x99 (_ bv0 32))))
 (= $x304 $x81)))))))
 ))
 (let (($x198 (and $x224 $x349)))
 (let (($x23 (and $x198 $x69)))
 (let (($x145 (and $x23 $x20)))
 (let (($x139 (= $x145 true)))
 (let (($x180 (= $x139 true)))
 (let (($x123 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x335 (bvadd ?x268 input.dst.llvm-%m1)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x84))))
 (let ((?x21 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (=> $x48 (= ?x21 ?x22)))))))))))
 ))
 (let (($x322 (and $x211 $x123)))
 (let (($x237 (= $x322 true)))
 (let (($x331 (= $x237 true)))
 (let (($x15 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x335 (bvadd ?x268 input.dst.llvm-%m1)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x335))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv2 32))) ?x165)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv3 32))) ?x243)))
 (let ((?x21 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (=> $x48 (= ?x21 ?x96))))))))))))
 ))
 (let (($x242 (and $x211 $x15)))
 (let (($x160 (= $x242 true)))
 (let (($x54 (= $x160 true)))
 (let (($x379 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x335 (bvadd ?x268 input.dst.llvm-%m1)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x335))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv2 32))) ?x165)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv3 32))) ?x243)))
 (let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (=> $x201 (= ?x281 ?x96))))))))))))
 ))
 (let (($x279 (and $x72 $x379)))
 (let (($x111 (= $x279 true)))
 (let (($x329 (= $x111 true)))
 (let (($x215 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x156 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x85 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x282 (and $x85 $x156)))
 (let (($x5 (and $x282 $x215)))
 (let (($x108 (= $x5 true)))
 (let (($x297 (= $x108 true)))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x41 (bvadd ?x268 input.dst.llvm-%m2)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x41))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv2 32))) ?x86)))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv3 32))) ?x105)))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (=> $x144 (= ?x214 ?x40))))))))))))
 ))
 (let (($x128 (and $x23 $x169)))
 (let (($x167 (= $x128 true)))
 (let (($x138 (= $x167 true)))
 (let ((?x114 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x114)))
 (let ((?x46 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x103 (= (_ bv0 32) ?x46)))
 (let ((?x327 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x327)))
 (let ((?x71 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x328 (and $x222 $x136)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x370 $x328)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x227 $x116)))
 (let (($x300 (not $x47)))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x74 $x371)))
 (let (($x267 (and (not $x126) $x300)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x110 $x324)))
 (let (($x100 (not $x172)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x365 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x365 $x212)))
 (let (($x219 (and (not $x55) $x100)))
 (let (($x330 (and (and (and (and (and (and $x219 $x267) $x51) $x89) $x8) $x210) $x103)))
 (let (($x60 (and $x330 $x88)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x342 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x209 (or false (or false (and (and true (or $x186 $x6)) (or $x342 $x42))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x209)))
 (let (($x288 (and $x200 $x60)))
 (let (($x302 (= $x288 true)))
 (let (($x152 (= $x302 true)))
 (let ((?x362 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x312 (= (_ bv0 2) ?x362)))
 (let (($x33 (= $x312 true)))
 (let (($x255 (and $x33 $x152)))
 (let (($x295 (and $x255 $x138)))
 (let (($x187 (and $x295 $x297)))
 (let (($x163 (and $x187 $x329)))
 (let (($x278 (and $x163 $x54)))
 (let (($x147 (and $x278 $x331)))
 (let (($x91 (and $x147 $x180)))
 (let (($x273 (and $x91 $x247)))
 (let (($x319 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x21 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (=> $x48 (= ?x21 ?x281))))))))
 ))
 (let (($x383 (forall ((Lambda5 (_ BitVec 32)) )(let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (= $x48 $x201))))))))
 ))
 (let (($x206 (forall ((Lambda5 (_ BitVec 32)) )(let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x143 (_ bv0 32))))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x310 (_ bv0 32))))
 (= $x135 $x185))))))))
 ))
 (let (($x380 (and $x206 $x384)))
 (let (($x257 (and $x380 $x383)))
 (let (($x361 (and $x257 $x319)))
 (let (($x274 (and $x361 $x273)))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (=> $x144 (= ?x214 ?x233))))))))
 ))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let (($x73 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (= $x144 (bvuge ?x344 (_ bv1 32)))))))))
 ))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let (($x73 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x99 (_ bv0 32))))
 (= $x304 (= ?x344 (_ bv0 32)))))))))
 ))
 (let (($x171 (and $x314 $x349)))
 (let (($x98 (and $x171 $x292)))
 (let (($x44 (and $x98 $x213)))
 (let (($x31 (and $x44 $x274)))
 (let (($x345 (=> $x31 $x223)))
 (not $x345))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x161 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x360 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x268)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x360 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x360))))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x360 (_ bv2 32))) ?x266)))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x360 (_ bv3 32))) ?x153)))
 (let ((?x21 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (=> $x48 (= ?x21 ?x323))))))))))))
 ))
 (let (($x146 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x39 (_ bv1 32))))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (= $x48 $x70)))))))
 ))
 (let (($x384 (forall ((Lambda5 (_ BitVec 32)) )(let (($x348 (= false false)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x310 (_ bv0 32))))
 (=> $x135 $x348))))))
 ))
 (let (($x263 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x39 (_ bv0 32))))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x310 (_ bv0 32))))
 (= $x135 $x81)))))))
 ))
 (let (($x372 (and $x263 $x384)))
 (let (($x211 (and $x372 $x146)))
 (let (($x115 (and $x211 $x161)))
 (let (($x333 (= $x115 true)))
 (let (($x223 (= $x333 true)))
 (let (($x83 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x335 (bvadd ?x268 input.dst.llvm-%m1)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x84))))
 (let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (=> $x201 (= ?x281 ?x22)))))))))))
 ))
 (let (($x24 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x39 (_ bv1 32))))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (= $x201 $x70)))))))
 ))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let (($x348 (= false false)))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x143 (_ bv0 32))))
 (=> $x185 $x348))))))
 ))
 (let (($x270 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x39 (_ bv0 32))))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x143 (_ bv0 32))))
 (= $x185 $x81)))))))
 ))
 (let (($x377 (and $x270 $x296)))
 (let (($x72 (and $x377 $x24)))
 (let (($x249 (and $x72 $x83)))
 (let (($x58 (= $x249 true)))
 (let (($x247 (= $x58 true)))
 (let (($x20 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x41 (bvadd ?x268 input.dst.llvm-%m2)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x341))))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (=> $x144 (= ?x214 ?x132)))))))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x39 (_ bv1 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (= $x144 $x70)))))))
 ))
 (let (($x349 (forall ((Lambda5 (_ BitVec 32)) )(let (($x348 (= false false)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x99 (_ bv0 32))))
 (=> $x304 $x348))))))
 ))
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x39 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x39 (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x99 (_ bv0 32))))
 (= $x304 $x81)))))))
 ))
 (let (($x198 (and $x224 $x349)))
 (let (($x23 (and $x198 $x69)))
 (let (($x145 (and $x23 $x20)))
 (let (($x139 (= $x145 true)))
 (let (($x180 (= $x139 true)))
 (let (($x123 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x335 (bvadd ?x268 input.dst.llvm-%m1)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x84))))
 (let ((?x21 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (=> $x48 (= ?x21 ?x22)))))))))))
 ))
 (let (($x322 (and $x211 $x123)))
 (let (($x237 (= $x322 true)))
 (let (($x331 (= $x237 true)))
 (let (($x15 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x335 (bvadd ?x268 input.dst.llvm-%m1)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x335))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv2 32))) ?x165)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv3 32))) ?x243)))
 (let ((?x21 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (=> $x48 (= ?x21 ?x96))))))))))))
 ))
 (let (($x242 (and $x211 $x15)))
 (let (($x160 (= $x242 true)))
 (let (($x54 (= $x160 true)))
 (let (($x379 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x335 (bvadd ?x268 input.dst.llvm-%m1)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x335))))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv2 32))) ?x165)))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv3 32))) ?x243)))
 (let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (=> $x201 (= ?x281 ?x96))))))))))))
 ))
 (let (($x279 (and $x72 $x379)))
 (let (($x111 (= $x279 true)))
 (let (($x329 (= $x111 true)))
 (let (($x215 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x156 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x85 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x282 (and $x85 $x156)))
 (let (($x5 (and $x282 $x215)))
 (let (($x108 (= $x5 true)))
 (let (($x297 (= $x108 true)))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x268 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x41 (bvadd ?x268 input.dst.llvm-%m2)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x41))))
 (let ((?x105 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv2 32))) ?x86)))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x41 (_ bv3 32))) ?x105)))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (=> $x144 (= ?x214 ?x40))))))))))))
 ))
 (let (($x128 (and $x23 $x169)))
 (let (($x167 (= $x128 true)))
 (let (($x138 (= $x167 true)))
 (let ((?x114 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x114)))
 (let ((?x46 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x103 (= (_ bv0 32) ?x46)))
 (let ((?x327 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x327)))
 (let ((?x71 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x328 (and $x222 $x136)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x370 $x328)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x227 $x116)))
 (let (($x300 (not $x47)))
 (let (($x371 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x74 $x371)))
 (let (($x267 (and (not $x126) $x300)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x110 $x324)))
 (let (($x100 (not $x172)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x365 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x365 $x212)))
 (let (($x219 (and (not $x55) $x100)))
 (let (($x330 (and (and (and (and (and (and $x219 $x267) $x51) $x89) $x8) $x210) $x103)))
 (let (($x60 (and $x330 $x88)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x342 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x232)))
 (let (($x209 (or false (or false (and (and true (or $x186 $x6)) (or $x342 $x42))))))
 (let (($x200 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x209)))
 (let (($x288 (and $x200 $x60)))
 (let (($x302 (= $x288 true)))
 (let (($x152 (= $x302 true)))
 (let ((?x362 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x312 (= (_ bv0 2) ?x362)))
 (let (($x33 (= $x312 true)))
 (let (($x255 (and $x33 $x152)))
 (let (($x295 (and $x255 $x138)))
 (let (($x187 (and $x295 $x297)))
 (let (($x163 (and $x187 $x329)))
 (let (($x278 (and $x163 $x54)))
 (let (($x147 (and $x278 $x331)))
 (let (($x91 (and $x147 $x180)))
 (let (($x273 (and $x91 $x247)))
 (let (($x319 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x21 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (=> $x48 (= ?x21 ?x281))))))))
 ))
 (let (($x383 (forall ((Lambda5 (_ BitVec 32)) )(let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x310 (_ bv1 32))))
 (= $x48 $x201))))))))
 ))
 (let (($x206 (forall ((Lambda5 (_ BitVec 32)) )(let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (= ?x143 (_ bv0 32))))
 (let (($x77 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x310 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x310 (_ bv0 32))))
 (= $x135 $x185))))))))
 ))
 (let (($x380 (and $x206 $x384)))
 (let (($x257 (and $x380 $x383)))
 (let (($x361 (and $x257 $x319)))
 (let (($x274 (and $x361 $x273)))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x233 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (=> $x144 (= ?x214 ?x233))))))))
 ))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let (($x73 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x144 (bvuge ?x99 (_ bv1 32))))
 (= $x144 (bvuge ?x344 (_ bv1 32)))))))))
 ))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let (($x73 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x344 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x99 (_ bv0 32))))
 (= $x304 (= ?x344 (_ bv0 32)))))))))
 ))
 (let (($x171 (and $x314 $x349)))
 (let (($x98 (and $x171 $x292)))
 (let (($x44 (and $x98 $x213)))
 (let (($x31 (and $x44 $x274)))
 (let (($x345 (=> $x31 $x223)))
 (not $x345))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0d86e444)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9409368c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x480c9798)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000000d)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x0d86e444)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x480c979b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9409368f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x480c9798)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9409368c)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000000d))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000d) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0d86e478) #x04
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000d) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000d) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000d) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000d) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000d) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000060)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04004082)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18a04210)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00810a04)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x04004082)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00810a07)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18a04213)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00810a04)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18a04210)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000060))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000060))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04004202) #x04
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000060) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000060))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000060) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000060) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000060) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x336 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x321 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x211)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x321))))
 (let ((?x376 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv2 32))) ?x11)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv3 32))) ?x376)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (=> $x143 (= ?x384 ?x102))))))))))))
 ))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x225 (_ bv1 32))))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (= $x143 $x240)))))))
 ))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x205 (_ bv0 32))))
 (=> $x292 $x233))))))
 ))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x225 (_ bv0 32))))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x205 (_ bv0 32))))
 (= $x292 $x296)))))))
 ))
 (let (($x24 (and $x16 $x213)))
 (let (($x175 (and $x24 $x176)))
 (let (($x97 (and $x175 $x336)))
 (let (($x45 (= $x97 true)))
 (let (($x112 (= $x45 true)))
 (let (($x308 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x211 input.dst.llvm-%m1)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x36))))
 (let ((?x100 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x232 (_ bv1 32))))
 (=> $x209 (= ?x100 ?x276)))))))))))
 ))
 (let (($x247 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x225 (_ bv1 32))))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x232 (_ bv1 32))))
 (= $x209 $x240)))))))
 ))
 (let (($x76 (forall ((Lambda5 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x232 (_ bv0 32))))
 (=> $x186 $x233))))))
 ))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x225 (_ bv0 32))))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x232 (_ bv0 32))))
 (= $x186 $x296)))))))
 ))
 (let (($x83 (and $x180 $x76)))
 (let (($x273 (and $x83 $x247)))
 (let (($x340 (and $x273 $x308)))
 (let (($x191 (= $x340 true)))
 (let (($x137 (= $x191 true)))
 (let (($x93 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x359 (bvadd ?x211 input.dst.llvm-%m2)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem ?x359))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv2 32))) ?x177))))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (=> $x143 (= ?x384 ?x49)))))))))))
 ))
 (let (($x148 (and $x175 $x93)))
 (let (($x256 (= $x148 true)))
 (let (($x30 (= $x256 true)))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x211 input.dst.llvm-%m1)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x36))))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (=> $x200 (= ?x110 ?x276)))))))))))
 ))
 (let (($x25 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x225 (_ bv1 32))))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (= $x200 $x240)))))))
 ))
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x262 (_ bv0 32))))
 (=> $x6 $x233))))))
 ))
 (let (($x217 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x225 (_ bv0 32))))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x262 (_ bv0 32))))
 (= $x6 $x296)))))))
 ))
 (let (($x162 (and $x217 $x113)))
 (let (($x104 (and $x162 $x25)))
 (let (($x226 (and $x104 $x194)))
 (let (($x154 (= $x226 true)))
 (let (($x151 (= $x154 true)))
 (let (($x332 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x211 input.dst.llvm-%m1)))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x29))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv2 32))) ?x333)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv3 32))) ?x346)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (=> $x200 (= ?x110 ?x34))))))))))))
 ))
 (let (($x38 (and $x104 $x332)))
 (let (($x56 (= $x38 true)))
 (let (($x199 (= $x56 true)))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x211 input.dst.llvm-%m1)))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x29))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv2 32))) ?x333)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv3 32))) ?x346)))
 (let ((?x100 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x232 (_ bv1 32))))
 (=> $x209 (= ?x100 ?x34))))))))))))
 ))
 (let (($x124 (and $x273 $x178)))
 (let (($x253 (= $x124 true)))
 (let (($x17 (= $x253 true)))
 (let (($x195 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x78 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x147 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x121 (and $x147 $x78)))
 (let (($x132 (and $x121 $x195)))
 (let (($x277 (= $x132 true)))
 (let (($x265 (= $x277 true)))
 (let (($x32 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x359 (bvadd ?x211 input.dst.llvm-%m2)))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x359))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv2 32))) ?x160)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv3 32))) ?x254)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (=> $x143 (= ?x384 ?x261))))))))))))
 ))
 (let (($x22 (and $x175 $x32)))
 (let (($x150 (= $x22 true)))
 (let (($x197 (= $x150 true)))
 (let ((?x298 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x164 (= (_ bv0 32) ?x298)))
 (let ((?x105 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x40 (= (_ bv0 32) ?x105)))
 (let ((?x149 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x202 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x202)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x181 (and $x129 $x80)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x179 $x181)))
 (let (($x41 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x224 $x198)))
 (let (($x231 (not $x70)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x39 $x81)))
 (let (($x23 (and (not $x290) $x231)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x152 $x255)))
 (let (($x106 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x174 $x89)))
 (let (($x192 (and (not $x302) $x106)))
 (let (($x303 (and (and (and (and (and (and $x192 $x23) $x173) $x41) $x244) $x86) $x40)))
 (let (($x238 (and $x303 $x164)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x328 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x71)))
 (let (($x88 (or false (or false (and (and true (or $x136 $x328)) (or $x338 $x46))))))
 (let (($x288 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x289 (and $x288 $x238)))
 (let (($x85 (= $x289 true)))
 (let (($x27 (= $x85 true)))
 (let ((?x267 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x294 (= (_ bv0 2) ?x267)))
 (let (($x62 (= $x294 true)))
 (let (($x156 (and $x62 $x27)))
 (let (($x123 (and $x156 $x197)))
 (let (($x20 (and $x123 $x265)))
 (let (($x357 (and $x20 $x17)))
 (let (($x264 (and $x357 $x199)))
 (let (($x347 (and $x264 $x151)))
 (let (($x382 (and $x347 $x30)))
 (let (($x9 (and $x382 $x137)))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x100 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (=> $x200 (= ?x110 ?x100))))))))
 ))
 (let (($x212 (forall ((Lambda5 (_ BitVec 32)) )(let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x232 (_ bv1 32))))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (= $x200 $x209))))))))
 ))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x232 (_ bv0 32))))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x262 (_ bv0 32))))
 (= $x6 $x186))))))))
 ))
 (let (($x42 (and $x275 $x113)))
 (let (($x55 (and $x42 $x212)))
 (let (($x116 (and $x55 $x227)))
 (let (($x269 (and $x116 $x9)))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (=> $x143 (= ?x384 ?x201))))))))
 ))
 (let (($x337 (forall ((Lambda5 (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (= $x143 (bvuge ?x144 (_ bv1 32)))))))))
 ))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x205 (_ bv0 32))))
 (= $x292 (= ?x144 (_ bv0 32)))))))))
 ))
 (let (($x44 (and $x214 $x213)))
 (let (($x206 (and $x44 $x337)))
 (let (($x241 (and $x206 $x26)))
 (let (($x10 (and $x241 $x269)))
 (let (($x182 (=> $x10 $x112)))
 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x336 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x321 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x211)))
 (let ((?x11 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x321))))
 (let ((?x376 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv2 32))) ?x11)))
 (let ((?x102 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv3 32))) ?x376)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (=> $x143 (= ?x384 ?x102))))))))))))
 ))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x225 (_ bv1 32))))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (= $x143 $x240)))))))
 ))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x205 (_ bv0 32))))
 (=> $x292 $x233))))))
 ))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x225 (_ bv0 32))))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x205 (_ bv0 32))))
 (= $x292 $x296)))))))
 ))
 (let (($x24 (and $x16 $x213)))
 (let (($x175 (and $x24 $x176)))
 (let (($x97 (and $x175 $x336)))
 (let (($x45 (= $x97 true)))
 (let (($x112 (= $x45 true)))
 (let (($x308 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x211 input.dst.llvm-%m1)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x36))))
 (let ((?x100 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x232 (_ bv1 32))))
 (=> $x209 (= ?x100 ?x276)))))))))))
 ))
 (let (($x247 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x225 (_ bv1 32))))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x232 (_ bv1 32))))
 (= $x209 $x240)))))))
 ))
 (let (($x76 (forall ((Lambda5 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x232 (_ bv0 32))))
 (=> $x186 $x233))))))
 ))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x225 (_ bv0 32))))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x232 (_ bv0 32))))
 (= $x186 $x296)))))))
 ))
 (let (($x83 (and $x180 $x76)))
 (let (($x273 (and $x83 $x247)))
 (let (($x340 (and $x273 $x308)))
 (let (($x191 (= $x340 true)))
 (let (($x137 (= $x191 true)))
 (let (($x93 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x359 (bvadd ?x211 input.dst.llvm-%m2)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem ?x359))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x359 (_ bv2 32))) ?x177))))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (=> $x143 (= ?x384 ?x49)))))))))))
 ))
 (let (($x148 (and $x175 $x93)))
 (let (($x256 (= $x148 true)))
 (let (($x30 (= $x256 true)))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x211 input.dst.llvm-%m1)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem ?x29))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x29 (_ bv2 32))) ?x36))))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (=> $x200 (= ?x110 ?x276)))))))))))
 ))
 (let (($x25 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x225 (_ bv1 32))))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (= $x200 $x240)))))))
 ))
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let (($x233 (= false false)))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x262 (_ bv0 32))))
 (=> $x6 $x233))))))
 ))
 (let (($x217 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x225 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x225 (_ bv0 32))))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x262 (_ bv0 32))))
 (= $x6 $x296)))))))
 ))
 (let (($x162 (and $x217 $x113)))
 (let (($x104 (and $x162 $x25)))
 (let (($x226 (and $x104 $x194)))
 (let (($x154 (= $x226 true)))
 (let (($x151 (= $x154 true)))
 (let (($x332 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x211 input.dst.llvm-%m1)))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x29))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv2 32))) ?x333)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv3 32))) ?x346)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (=> $x200 (= ?x110 ?x34))))))))))))
 ))
 (let (($x38 (and $x104 $x332)))
 (let (($x56 (= $x38 true)))
 (let (($x199 (= $x56 true)))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x29 (bvadd ?x211 input.dst.llvm-%m1)))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x29))))
 (let ((?x346 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv2 32))) ?x333)))
 (let ((?x34 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x29 (_ bv3 32))) ?x346)))
 (let ((?x100 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x232 (_ bv1 32))))
 (=> $x209 (= ?x100 ?x34))))))))))))
 ))
 (let (($x124 (and $x273 $x178)))
 (let (($x253 (= $x124 true)))
 (let (($x17 (= $x253 true)))
 (let (($x195 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x78 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x147 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x121 (and $x147 $x78)))
 (let (($x132 (and $x121 $x195)))
 (let (($x277 (= $x132 true)))
 (let (($x265 (= $x277 true)))
 (let (($x32 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x359 (bvadd ?x211 input.dst.llvm-%m2)))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x359))))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv2 32))) ?x160)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x359 (_ bv3 32))) ?x254)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (=> $x143 (= ?x384 ?x261))))))))))))
 ))
 (let (($x22 (and $x175 $x32)))
 (let (($x150 (= $x22 true)))
 (let (($x197 (= $x150 true)))
 (let ((?x298 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x164 (= (_ bv0 32) ?x298)))
 (let ((?x105 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x40 (= (_ bv0 32) ?x105)))
 (let ((?x149 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x202 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x202)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x181 (and $x129 $x80)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x179 $x181)))
 (let (($x41 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x224 $x198)))
 (let (($x231 (not $x70)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (and $x39 $x81)))
 (let (($x23 (and (not $x290) $x231)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x152 $x255)))
 (let (($x106 (not $x57)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (and $x174 $x89)))
 (let (($x192 (and (not $x302) $x106)))
 (let (($x303 (and (and (and (and (and (and $x192 $x23) $x173) $x41) $x244) $x86) $x40)))
 (let (($x238 (and $x303 $x164)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x338 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x328 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x71)))
 (let (($x88 (or false (or false (and (and true (or $x136 $x328)) (or $x338 $x46))))))
 (let (($x288 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x88)))
 (let (($x289 (and $x288 $x238)))
 (let (($x85 (= $x289 true)))
 (let (($x27 (= $x85 true)))
 (let ((?x267 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x294 (= (_ bv0 2) ?x267)))
 (let (($x62 (= $x294 true)))
 (let (($x156 (and $x62 $x27)))
 (let (($x123 (and $x156 $x197)))
 (let (($x20 (and $x123 $x265)))
 (let (($x357 (and $x20 $x17)))
 (let (($x264 (and $x357 $x199)))
 (let (($x347 (and $x264 $x151)))
 (let (($x382 (and $x347 $x30)))
 (let (($x9 (and $x382 $x137)))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x100 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (=> $x200 (= ?x110 ?x100))))))))
 ))
 (let (($x212 (forall ((Lambda5 (_ BitVec 32)) )(let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x232 (_ bv1 32))))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x262 (_ bv1 32))))
 (= $x200 $x209))))))))
 ))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x232 (ite $x33 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x232 (_ bv0 32))))
 (let (($x361 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x361 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x262 (_ bv0 32))))
 (= $x6 $x186))))))))
 ))
 (let (($x42 (and $x275 $x113)))
 (let (($x55 (and $x42 $x212)))
 (let (($x116 (and $x55 $x227)))
 (let (($x269 (and $x116 $x9)))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x201 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (=> $x143 (= ?x384 ?x201))))))))
 ))
 (let (($x337 (forall ((Lambda5 (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x205 (_ bv1 32))))
 (= $x143 (bvuge ?x144 (_ bv1 32)))))))))
 ))
 (let (($x214 (forall ((Lambda5 (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x144 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x205 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x205 (_ bv0 32))))
 (= $x292 (= ?x144 (_ bv0 32)))))))))
 ))
 (let (($x44 (and $x214 $x213)))
 (let (($x206 (and $x44 $x337)))
 (let (($x241 (and $x206 $x26)))
 (let (($x10 (and $x241 $x269)))
 (let (($x182 (=> $x10 $x112)))
 (not $x182))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x1fa5f914)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00c40004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04b80090)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000002e)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x1fa5f914)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04b80093)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00c40007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04b80090)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00c40004)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1fa5f9cc) #x02
      #x00))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002e) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002e) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002e) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000002e))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002e) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002e) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002e) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000004c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x06010610)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x23212700)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01846604)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x06010610)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01846607)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x23212703)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01846604)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x23212700)
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000004c))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000004c))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000004c) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x06010743) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000004c) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000004c) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000004c) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000004c) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x313 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x65 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x104)))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x375))))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (=> $x88 (= ?x106 ?x251)))))))))))
 ))
 (let (($x137 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x374 (_ bv1 32))))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (= $x88 $x260)))))))
 ))
 (let (($x320 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (=> $x136 $x201))))))
 ))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x374 (_ bv0 32))))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (= $x136 $x76)))))))
 ))
 (let (($x308 (and $x30 $x320)))
 (let (($x9 (and $x308 $x137)))
 (let (($x53 (and $x9 $x313)))
 (let (($x301 (= $x53 true)))
 (let (($x350 (= $x301 true)))
 (let (($x153 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x366 (bvadd ?x104 input.dst.llvm-%m1)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x172))))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (=> $x88 (= ?x106 ?x131)))))))))))
 ))
 (let (($x323 (and $x9 $x153)))
 (let (($x220 (= $x323 true)))
 (let (($x378 (= $x220 true)))
 (let (($x363 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x306 (bvadd ?x104 input.dst.llvm-%m2)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x82))))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (=> $x232 (= ?x113 ?x249)))))))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x374 (_ bv1 32))))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (= $x232 $x260)))))))
 ))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x185 (_ bv0 32))))
 (=> $x337 $x201))))))
 ))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x374 (_ bv0 32))))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x185 (_ bv0 32))))
 (= $x337 $x76)))))))
 ))
 (let (($x247 (and $x58 $x26)))
 (let (($x345 (and $x247 $x223)))
 (let (($x352 (and $x345 $x363)))
 (let (($x235 (= $x352 true)))
 (let (($x360 (= $x235 true)))
 (let (($x108 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x366 (bvadd ?x104 input.dst.llvm-%m1)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x172))))
 (let ((?x152 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (=> $x288 (= ?x152 ?x131)))))))))))
 ))
 (let (($x77 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x374 (_ bv1 32))))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (= $x288 $x260)))))))
 ))
 (let (($x210 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x118 (_ bv0 32))))
 (=> $x328 $x201))))))
 ))
 (let (($x155 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x374 (_ bv0 32))))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x118 (_ bv0 32))))
 (= $x328 $x76)))))))
 ))
 (let (($x349 (and $x155 $x210)))
 (let (($x310 (and $x349 $x77)))
 (let (($x297 (and $x310 $x108)))
 (let (($x72 (= $x297 true)))
 (let (($x335 (= $x72 true)))
 (let (($x257 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x366 (bvadd ?x104 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x366))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv2 32))) ?x45)))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv3 32))) ?x246)))
 (let ((?x152 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (=> $x288 (= ?x152 ?x119))))))))))))
 ))
 (let (($x259 (and $x310 $x257)))
 (let (($x324 (= $x259 true)))
 (let (($x159 (= $x324 true)))
 (let (($x380 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x366 (bvadd ?x104 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x366))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv2 32))) ?x45)))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv3 32))) ?x246)))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (=> $x88 (= ?x106 ?x119))))))))))))
 ))
 (let (($x348 (and $x9 $x380)))
 (let (($x142 (= $x348 true)))
 (let (($x299 (= $x142 true)))
 (let (($x230 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x189 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x347 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x343 (and $x347 $x189)))
 (let (($x49 (and $x343 $x230)))
 (let (($x188 (= $x49 true)))
 (let (($x107 (= $x188 true)))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x306 (bvadd ?x104 input.dst.llvm-%m2)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x306))))
 (let ((?x18 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv2 32))) ?x56)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv3 32))) ?x18)))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (=> $x232 (= ?x113 ?x218))))))))))))
 ))
 (let (($x276 (and $x345 $x318)))
 (let (($x183 (= $x276 true)))
 (let (($x207 (= $x183 true)))
 (let ((?x307 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x84 (= (_ bv0 32) ?x307)))
 (let ((?x254 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x261 (= (_ bv0 32) ?x254)))
 (let ((?x280 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x280)))
 (let ((?x54 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x15 (and $x229 $x278)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x315 $x15)))
 (let (($x359 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x240 (and $x16 $x24)))
 (let (($x272 (not $x240)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x377 (and $x225 $x296)))
 (let (($x175 (and (not $x377) $x272)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x27 $x156)))
 (let (($x35 (not $x37)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x268 $x41)))
 (let (($x270 (and (not $x85) $x35)))
 (let (($x322 (and (and (and (and (and (and $x270 $x175) $x141) $x359) $x242) $x160) $x261)))
 (let (($x237 (and $x322 $x84)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x202 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x202)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x202)))
 (let (($x164 (or false (or false (and (and true (or $x80 $x181)) (or $x295 $x105))))))
 (let (($x289 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x164)))
 (let (($x331 (and $x289 $x237)))
 (let (($x147 (= $x331 true)))
 (let (($x287 (= $x147 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x169 (= (_ bv0 2) ?x23)))
 (let (($x168 (= $x169 true)))
 (let (($x78 (and $x168 $x287)))
 (let (($x194 (and $x78 $x207)))
 (let (($x93 (and $x194 $x107)))
 (let (($x344 (and $x93 $x299)))
 (let (($x219 (and $x344 $x159)))
 (let (($x165 (and $x219 $x335)))
 (let (($x140 (and $x165 $x360)))
 (let (($x133 (and $x140 $x378)))
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x152 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (=> $x288 (= ?x152 ?x106))))))))
 ))
 (let (($x89 (forall ((Lambda5 (_ BitVec 32)) )(let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (= $x288 $x88))))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x118 (_ bv0 32))))
 (= $x328 $x136))))))))
 ))
 (let (($x46 (and $x228 $x210)))
 (let (($x302 (and $x46 $x89)))
 (let (($x198 (and $x302 $x224)))
 (let (($x236 (and $x198 $x133)))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (=> $x232 (= ?x113 ?x209))))))))
 ))
 (let (($x250 (forall ((Lambda5 (_ BitVec 32)) )(let (($x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (= $x232 (bvuge ?x143 (_ bv1 32)))))))))
 ))
 (let (($x384 (forall ((Lambda5 (_ BitVec 32)) )(let (($x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x185 (_ bv0 32))))
 (= $x337 (= ?x143 (_ bv0 32)))))))))
 ))
 (let (($x241 (and $x384 $x26)))
 (let (($x275 (and $x241 $x250)))
 (let (($x221 (and $x275 $x126)))
 (let (($x64 (and $x221 $x236)))
 (let (($x284 (=> $x64 $x350)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x313 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x65 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x104)))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x375))))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (=> $x88 (= ?x106 ?x251)))))))))))
 ))
 (let (($x137 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x374 (_ bv1 32))))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (= $x88 $x260)))))))
 ))
 (let (($x320 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (=> $x136 $x201))))))
 ))
 (let (($x30 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x374 (_ bv0 32))))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (= $x136 $x76)))))))
 ))
 (let (($x308 (and $x30 $x320)))
 (let (($x9 (and $x308 $x137)))
 (let (($x53 (and $x9 $x313)))
 (let (($x301 (= $x53 true)))
 (let (($x350 (= $x301 true)))
 (let (($x153 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x366 (bvadd ?x104 input.dst.llvm-%m1)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x172))))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (=> $x88 (= ?x106 ?x131)))))))))))
 ))
 (let (($x323 (and $x9 $x153)))
 (let (($x220 (= $x323 true)))
 (let (($x378 (= $x220 true)))
 (let (($x363 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x306 (bvadd ?x104 input.dst.llvm-%m2)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x82))))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (=> $x232 (= ?x113 ?x249)))))))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x374 (_ bv1 32))))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (= $x232 $x260)))))))
 ))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x185 (_ bv0 32))))
 (=> $x337 $x201))))))
 ))
 (let (($x58 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x374 (_ bv0 32))))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x185 (_ bv0 32))))
 (= $x337 $x76)))))))
 ))
 (let (($x247 (and $x58 $x26)))
 (let (($x345 (and $x247 $x223)))
 (let (($x352 (and $x345 $x363)))
 (let (($x235 (= $x352 true)))
 (let (($x360 (= $x235 true)))
 (let (($x108 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x366 (bvadd ?x104 input.dst.llvm-%m1)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x172))))
 (let ((?x152 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (=> $x288 (= ?x152 ?x131)))))))))))
 ))
 (let (($x77 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x374 (_ bv1 32))))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (= $x288 $x260)))))))
 ))
 (let (($x210 (forall ((Lambda5 (_ BitVec 32)) )(let (($x201 (= false false)))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x118 (_ bv0 32))))
 (=> $x328 $x201))))))
 ))
 (let (($x155 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x374 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x374 (_ bv0 32))))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x118 (_ bv0 32))))
 (= $x328 $x76)))))))
 ))
 (let (($x349 (and $x155 $x210)))
 (let (($x310 (and $x349 $x77)))
 (let (($x297 (and $x310 $x108)))
 (let (($x72 (= $x297 true)))
 (let (($x335 (= $x72 true)))
 (let (($x257 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x366 (bvadd ?x104 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x366))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv2 32))) ?x45)))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv3 32))) ?x246)))
 (let ((?x152 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (=> $x288 (= ?x152 ?x119))))))))))))
 ))
 (let (($x259 (and $x310 $x257)))
 (let (($x324 (= $x259 true)))
 (let (($x159 (= $x324 true)))
 (let (($x380 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x366 (bvadd ?x104 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x366))))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv2 32))) ?x45)))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x366 (_ bv3 32))) ?x246)))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (=> $x88 (= ?x106 ?x119))))))))))))
 ))
 (let (($x348 (and $x9 $x380)))
 (let (($x142 (= $x348 true)))
 (let (($x299 (= $x142 true)))
 (let (($x230 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x189 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x347 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x343 (and $x347 $x189)))
 (let (($x49 (and $x343 $x230)))
 (let (($x188 (= $x49 true)))
 (let (($x107 (= $x188 true)))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x104 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x306 (bvadd ?x104 input.dst.llvm-%m2)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x306))))
 (let ((?x18 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv2 32))) ?x56)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv3 32))) ?x18)))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (=> $x232 (= ?x113 ?x218))))))))))))
 ))
 (let (($x276 (and $x345 $x318)))
 (let (($x183 (= $x276 true)))
 (let (($x207 (= $x183 true)))
 (let ((?x307 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x84 (= (_ bv0 32) ?x307)))
 (let ((?x254 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x261 (= (_ bv0 32) ?x254)))
 (let ((?x280 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x280)))
 (let ((?x54 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x54)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x15 (and $x229 $x278)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x242 (and $x315 $x15)))
 (let (($x359 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x240 (and $x16 $x24)))
 (let (($x272 (not $x240)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x377 (and $x225 $x296)))
 (let (($x175 (and (not $x377) $x272)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x27 $x156)))
 (let (($x35 (not $x37)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x268 $x41)))
 (let (($x270 (and (not $x85) $x35)))
 (let (($x322 (and (and (and (and (and (and $x270 $x175) $x141) $x359) $x242) $x160) $x261)))
 (let (($x237 (and $x322 $x84)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x202 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x202)))
 (let (($x181 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x202)))
 (let (($x164 (or false (or false (and (and true (or $x80 $x181)) (or $x295 $x105))))))
 (let (($x289 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x164)))
 (let (($x331 (and $x289 $x237)))
 (let (($x147 (= $x331 true)))
 (let (($x287 (= $x147 true)))
 (let ((?x23 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x169 (= (_ bv0 2) ?x23)))
 (let (($x168 (= $x169 true)))
 (let (($x78 (and $x168 $x287)))
 (let (($x194 (and $x78 $x207)))
 (let (($x93 (and $x194 $x107)))
 (let (($x344 (and $x93 $x299)))
 (let (($x219 (and $x344 $x159)))
 (let (($x165 (and $x219 $x335)))
 (let (($x140 (and $x165 $x360)))
 (let (($x133 (and $x140 $x378)))
 (let (($x224 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x152 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (=> $x288 (= ?x152 ?x106))))))))
 ))
 (let (($x89 (forall ((Lambda5 (_ BitVec 32)) )(let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x71 (_ bv1 32))))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x118 (_ bv1 32))))
 (= $x288 $x88))))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x71 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (let (($x116 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x118 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x118 (_ bv0 32))))
 (= $x328 $x136))))))))
 ))
 (let (($x46 (and $x228 $x210)))
 (let (($x302 (and $x46 $x89)))
 (let (($x198 (and $x302 $x224)))
 (let (($x236 (and $x198 $x133)))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (=> $x232 (= ?x113 ?x209))))))))
 ))
 (let (($x250 (forall ((Lambda5 (_ BitVec 32)) )(let (($x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x185 (_ bv1 32))))
 (= $x232 (bvuge ?x143 (_ bv1 32)))))))))
 ))
 (let (($x384 (forall ((Lambda5 (_ BitVec 32)) )(let (($x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x143 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x73 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x185 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (= ?x185 (_ bv0 32))))
 (= $x337 (= ?x143 (_ bv0 32)))))))))
 ))
 (let (($x241 (and $x384 $x26)))
 (let (($x275 (and $x241 $x250)))
 (let (($x221 (and $x275 $x126)))
 (let (($x64 (and $x221 $x236)))
 (let (($x284 (=> $x64 $x350)))
 (not $x284))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x08808202)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000824)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x407f2420)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x08808202)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x407f2423)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000827)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x407f2420)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000824)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00008000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00008000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00008000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00008000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5dde6f70)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff7cdf64)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xb7c8adf4)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xb7c8adf4)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff7cdf67)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5dde6f73)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff7cdf64)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5dde6f70)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x04
      #x00))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00040000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00040000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00040000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00040000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x125 (= true false)))
 (let (($x117 (= $x125 true)))
 (let ((?x166 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x285 (= (_ bv0 32) ?x166)))
 (let ((?x269 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x271 (= (_ bv0 32) ?x269)))
 (let ((?x382 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x340 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x382)))
 (let ((?x162 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x162)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x357 $x248)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x178 $x25)))
 (let (($x34 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x346 (and $x29 $x333)))
 (let (($x239 (not $x346)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x277 $x265)))
 (let (($x253 (and (not $x273) $x239)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x39 $x81)))
 (let (($x341 (not $x121)))
 (let (($x342 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x6 $x342)))
 (let (($x132 (and (not $x57) $x341)))
 (let (($x87 (and (and (and (and (and (and $x132 $x253) $x101) $x34) $x148) $x340) $x271)))
 (let (($x11 (and $x87 $x285)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x370 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x330 (or false (or false (and (and true (or $x204 $x192)) (or $x370 $x60))))))
 (let (($x305 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x330)))
 (let (($x376 (and $x305 $x11)))
 (let (($x102 (= $x376 true)))
 (let (($x7 (= $x102 true)))
 (let (($x369 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x182 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x353))))
 (let ((?x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x129 (_ bv1 32))))
 (=> $x298 (= ?x37 ?x220)))))))))))
 ))
 (let (($x49 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x150 (_ bv1 32))))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x129 (_ bv1 32))))
 (= $x298 $x242)))))))
 ))
 (let (($x343 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (= false false)))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x129 (_ bv0 32))))
 (=> $x202 $x113))))))
 ))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x150 (_ bv0 32))))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x129 (_ bv0 32))))
 (= $x202 $x315)))))))
 ))
 (let (($x68 (and $x347 $x343)))
 (let (($x188 (and $x68 $x49)))
 (let (($x213 (and $x188 $x369)))
 (let (($x44 (= $x213 true)))
 (let (($x21 (= $x44 true)))
 (let (($x339 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x223 (bvadd ?x216 input.dst.llvm-%m2)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x53))))
 (let ((?x338 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (=> $x62 (= ?x338 ?x286)))))))))))
 ))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x150 (_ bv1 32))))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (= $x62 $x242)))))))
 ))
 (let (($x100 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (= false false)))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x33 (_ bv0 32))))
 (=> $x186 $x113))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x150 (_ bv0 32))))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x33 (_ bv0 32))))
 (= $x186 $x315)))))))
 ))
 (let (($x54 (and $x279 $x100)))
 (let (($x160 (and $x54 $x280)))
 (let (($x205 (and $x160 $x339)))
 (let (($x42 (= $x205 true)))
 (let (($x233 (= $x42 true)))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x182 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x353))))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (=> $x164 (= ?x187 ?x220)))))))))))
 ))
 (let (($x282 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x150 (_ bv1 32))))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (= $x164 $x242)))))))
 ))
 (let (($x295 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (= false false)))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x80 (_ bv0 32))))
 (=> $x90 $x113))))))
 ))
 (let (($x324 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x150 (_ bv0 32))))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x80 (_ bv0 32))))
 (= $x90 $x315)))))))
 ))
 (let (($x159 (and $x324 $x295)))
 (let (($x74 (and $x159 $x282)))
 (let (($x64 (and $x74 $x236)))
 (let (($x65 (= $x64 true)))
 (let (($x358 (= $x65 true)))
 (let ((?x335 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x165 (= (_ bv0 2) ?x335)))
 (let (($x91 (= $x165 true)))
 (let (($x131 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x182 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x45)))
 (let ((?x348 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x208)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (=> $x164 (= ?x187 ?x348))))))))))))
 ))
 (let (($x215 (and $x74 $x131)))
 (let (($x5 (= $x215 true)))
 (let (($x108 (= $x5 true)))
 (let ((?x318 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x276 (bvneg ?x318)))
 (let (($x310 (= ?x276 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x48 (= $x310 true)))
 (let (($x344 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x182 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x45)))
 (let ((?x348 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x208)))
 (let ((?x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x129 (_ bv1 32))))
 (=> $x298 (= ?x37 ?x348))))))))))))
 ))
 (let (($x158 (and $x188 $x344)))
 (let (($x155 (= $x158 true)))
 (let (($x349 (= $x155 true)))
 (let (($x207 (= ?x276 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x194 (= $x207 true)))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x223 (bvadd ?x216 input.dst.llvm-%m2)))
 (let ((?x104 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x223))))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv2 32))) ?x104)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv3 32))) ?x50)))
 (let ((?x338 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (=> $x62 (= ?x338 ?x264))))))))))))
 ))
 (let (($x56 (and $x160 $x309)))
 (let (($x18 (= $x56 true)))
 (let (($x218 (= $x18 true)))
 (let (($x226 (and $x218 $x194)))
 (let (($x367 (and $x226 $x349)))
 (let (($x383 (and $x367 $x48)))
 (let (($x297 (and $x383 $x108)))
 (let (($x146 (and $x297 $x91)))
 (let (($x234 (and $x146 $x358)))
 (let (($x365 (and $x234 $x233)))
 (let (($x361 (and $x365 $x21)))
 (let (($x171 (and $x361 $x7)))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (=> $x164 (= ?x187 ?x37))))))))
 ))
 (let (($x268 (forall ((Lambda5 (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x129 (_ bv1 32))))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (= $x164 $x298))))))))
 ))
 (let (($x244 (forall ((Lambda5 (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x129 (_ bv0 32))))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x80 (_ bv0 32))))
 (= $x90 $x202))))))))
 ))
 (let (($x86 (and $x244 $x295)))
 (let (($x41 (and $x86 $x268)))
 (let (($x16 (and $x41 $x176)))
 (let (($x135 (and $x16 $x171)))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x338 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (=> $x62 (= ?x338 ?x288))))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let (($x206 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x241 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (= $x62 (bvuge ?x241 (_ bv1 32)))))))))
 ))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let (($x206 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x241 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x33 (_ bv0 32))))
 (= $x186 (= ?x241 (_ bv0 32)))))))))
 ))
 (let (($x126 (and $x275 $x100)))
 (let (($x8 (and $x126 $x136)))
 (let (($x290 (and $x8 $x106)))
 (let (($x28 (and $x290 $x135)))
 (let (($x362 (=> $x28 $x117)))
 (not $x362))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x125 (= true false)))
 (let (($x117 (= $x125 true)))
 (let ((?x166 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x285 (= (_ bv0 32) ?x166)))
 (let ((?x269 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x271 (= (_ bv0 32) ?x269)))
 (let ((?x382 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x340 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x382)))
 (let ((?x162 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x162)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x357 $x248)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x178 $x25)))
 (let (($x34 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x346 (and $x29 $x333)))
 (let (($x239 (not $x346)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x277 $x265)))
 (let (($x253 (and (not $x273) $x239)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x39 $x81)))
 (let (($x341 (not $x121)))
 (let (($x342 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x6 $x342)))
 (let (($x132 (and (not $x57) $x341)))
 (let (($x87 (and (and (and (and (and (and $x132 $x253) $x101) $x34) $x148) $x340) $x271)))
 (let (($x11 (and $x87 $x285)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x370 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x255)))
 (let (($x330 (or false (or false (and (and true (or $x204 $x192)) (or $x370 $x60))))))
 (let (($x305 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x330)))
 (let (($x376 (and $x305 $x11)))
 (let (($x102 (= $x376 true)))
 (let (($x7 (= $x102 true)))
 (let (($x369 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x182 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x353))))
 (let ((?x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x129 (_ bv1 32))))
 (=> $x298 (= ?x37 ?x220)))))))))))
 ))
 (let (($x49 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x150 (_ bv1 32))))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x129 (_ bv1 32))))
 (= $x298 $x242)))))))
 ))
 (let (($x343 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (= false false)))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x129 (_ bv0 32))))
 (=> $x202 $x113))))))
 ))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x150 (_ bv0 32))))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x129 (_ bv0 32))))
 (= $x202 $x315)))))))
 ))
 (let (($x68 (and $x347 $x343)))
 (let (($x188 (and $x68 $x49)))
 (let (($x213 (and $x188 $x369)))
 (let (($x44 (= $x213 true)))
 (let (($x21 (= $x44 true)))
 (let (($x339 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x223 (bvadd ?x216 input.dst.llvm-%m2)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x53))))
 (let ((?x338 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (=> $x62 (= ?x338 ?x286)))))))))))
 ))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x150 (_ bv1 32))))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (= $x62 $x242)))))))
 ))
 (let (($x100 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (= false false)))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x33 (_ bv0 32))))
 (=> $x186 $x113))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x150 (_ bv0 32))))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x33 (_ bv0 32))))
 (= $x186 $x315)))))))
 ))
 (let (($x54 (and $x279 $x100)))
 (let (($x160 (and $x54 $x280)))
 (let (($x205 (and $x160 $x339)))
 (let (($x42 (= $x205 true)))
 (let (($x233 (= $x42 true)))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x182 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x353))))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (=> $x164 (= ?x187 ?x220)))))))))))
 ))
 (let (($x282 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x150 (_ bv1 32))))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (= $x164 $x242)))))))
 ))
 (let (($x295 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (= false false)))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x80 (_ bv0 32))))
 (=> $x90 $x113))))))
 ))
 (let (($x324 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x150 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x150 (_ bv0 32))))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x80 (_ bv0 32))))
 (= $x90 $x315)))))))
 ))
 (let (($x159 (and $x324 $x295)))
 (let (($x74 (and $x159 $x282)))
 (let (($x64 (and $x74 $x236)))
 (let (($x65 (= $x64 true)))
 (let (($x358 (= $x65 true)))
 (let ((?x335 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x165 (= (_ bv0 2) ?x335)))
 (let (($x91 (= $x165 true)))
 (let (($x131 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x182 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x45)))
 (let ((?x348 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x208)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (=> $x164 (= ?x187 ?x348))))))))))))
 ))
 (let (($x215 (and $x74 $x131)))
 (let (($x5 (= $x215 true)))
 (let (($x108 (= $x5 true)))
 (let ((?x318 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x276 (bvneg ?x318)))
 (let (($x310 (= ?x276 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x48 (= $x310 true)))
 (let (($x344 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x182 (bvadd ?x216 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x208 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x45)))
 (let ((?x348 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x208)))
 (let ((?x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x129 (_ bv1 32))))
 (=> $x298 (= ?x37 ?x348))))))))))))
 ))
 (let (($x158 (and $x188 $x344)))
 (let (($x155 (= $x158 true)))
 (let (($x349 (= $x155 true)))
 (let (($x207 (= ?x276 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x194 (= $x207 true)))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x216 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x223 (bvadd ?x216 input.dst.llvm-%m2)))
 (let ((?x104 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x223))))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv2 32))) ?x104)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv3 32))) ?x50)))
 (let ((?x338 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (=> $x62 (= ?x338 ?x264))))))))))))
 ))
 (let (($x56 (and $x160 $x309)))
 (let (($x18 (= $x56 true)))
 (let (($x218 (= $x18 true)))
 (let (($x226 (and $x218 $x194)))
 (let (($x367 (and $x226 $x349)))
 (let (($x383 (and $x367 $x48)))
 (let (($x297 (and $x383 $x108)))
 (let (($x146 (and $x297 $x91)))
 (let (($x234 (and $x146 $x358)))
 (let (($x365 (and $x234 $x233)))
 (let (($x361 (and $x365 $x21)))
 (let (($x171 (and $x361 $x7)))
 (let (($x176 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (=> $x164 (= ?x187 ?x37))))))))
 ))
 (let (($x268 (forall ((Lambda5 (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x129 (_ bv1 32))))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x80 (_ bv1 32))))
 (= $x164 $x298))))))))
 ))
 (let (($x244 (forall ((Lambda5 (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x129 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x129 (_ bv0 32))))
 (let (($x224 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x80 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (= ?x80 (_ bv0 32))))
 (= $x90 $x202))))))))
 ))
 (let (($x86 (and $x244 $x295)))
 (let (($x41 (and $x86 $x268)))
 (let (($x16 (and $x41 $x176)))
 (let (($x135 (and $x16 $x171)))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x338 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (=> $x62 (= ?x338 ?x288))))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let (($x206 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x241 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x33 (_ bv1 32))))
 (= $x62 (bvuge ?x241 (_ bv1 32)))))))))
 ))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let (($x206 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x241 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x33 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x33 (_ bv0 32))))
 (= $x186 (= ?x241 (_ bv0 32)))))))))
 ))
 (let (($x126 (and $x275 $x100)))
 (let (($x8 (and $x126 $x136)))
 (let (($x290 (and $x8 $x106)))
 (let (($x28 (and $x290 $x135)))
 (let (($x362 (=> $x28 $x117)))
 (not $x362))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000000f8)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000000fb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000000f8)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf0aab844)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xff5e0d3a)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe6738d40)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe6738d43)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf0aab847)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe6738d40)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf0aab844)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #xff5e0d3d (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3c (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3a (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!20 (bvadd #xff5e0d3d (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #xff5e0d3c (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #xff5e0d3b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #xff5e0d3a (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #xff5e0d3d (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3c (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #xff5e0d3a (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x388 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x109 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x101)))
 (let ((?x326 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x109))))
 (let ((?x368 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x109 (_ bv2 32))) ?x326)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x109 (_ bv3 32))) ?x368)))
 (let ((?x295 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (=> $x129 (= ?x295 ?x356))))))))))))
 ))
 (let (($x6 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x267 (_ bv1 32))))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (= $x129 $x330)))))))
 ))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let (($x288 (= false false)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (=> $x136 $x288))))))
 ))
 (let (($x60 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x267 (_ bv0 32))))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (= $x136 $x370)))))))
 ))
 (let (($x222 (and $x60 $x106)))
 (let (($x342 (and $x222 $x6)))
 (let (($x389 (and $x342 $x388)))
 (let (($x390 (= $x389 true)))
 (let (($x391 (= $x390 true)))
 (let ((?x207 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x194 (bvneg ?x207)))
 (let (($x312 (= ?x194 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (= $x312 true)))
 (let (($x351 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x201 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x78))))
 (let ((?x38 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x242 (_ bv1 32))))
 (=> $x306 (= ?x38 ?x260)))))))))))
 ))
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x267 (_ bv1 32))))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x242 (_ bv1 32))))
 (= $x306 $x330)))))))
 ))
 (let (($x171 (forall ((Lambda5 (_ BitVec 32)) )(let (($x288 (= false false)))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x242 (_ bv0 32))))
 (=> $x197 $x288))))))
 ))
 (let (($x376 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x267 (_ bv0 32))))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x242 (_ bv0 32))))
 (= $x197 $x370)))))))
 ))
 (let (($x135 (and $x376 $x171)))
 (let (($x362 (and $x135 $x117)))
 (let (($x170 (and $x362 $x351)))
 (let (($x251 (= $x170 true)))
 (let (($x373 (= $x251 true)))
 (let (($x274 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x321 (bvadd ?x101 input.dst.llvm-%m2)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem ?x321))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv2 32))) ?x130))))
 (let ((?x295 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (=> $x129 (= ?x295 ?x82)))))))))))
 ))
 (let (($x363 (and $x342 $x274)))
 (let (($x352 (= $x363 true)))
 (let (($x235 (= $x352 true)))
 (let (($x177 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x201 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x78))))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (=> $x19 (= ?x50 ?x260)))))))))))
 ))
 (let (($x40 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x267 (_ bv1 32))))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (= $x19 $x330)))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let (($x288 (= false false)))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x280 (_ bv0 32))))
 (=> $x160 $x288))))))
 ))
 (let (($x179 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x267 (_ bv0 32))))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x280 (_ bv0 32))))
 (= $x160 $x370)))))))
 ))
 (let (($x238 (and $x179 $x223)))
 (let (($x303 (and $x238 $x40)))
 (let (($x93 (and $x303 $x177)))
 (let (($x9 (= $x93 true)))
 (let (($x366 (= $x9 true)))
 (let (($x24 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x201 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x201))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv2 32))) ?x221)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv3 32))) ?x228)))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (=> $x19 (= ?x50 ?x89))))))))))))
 ))
 (let (($x272 (and $x303 $x24)))
 (let (($x175 (= $x272 true)))
 (let (($x32 (= $x175 true)))
 (let (($x168 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x201 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x201))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv2 32))) ?x221)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv3 32))) ?x228)))
 (let ((?x38 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x242 (_ bv1 32))))
 (=> $x306 (= ?x38 ?x89))))))))))))
 ))
 (let (($x35 (and $x362 $x168)))
 (let (($x69 (= $x35 true)))
 (let (($x70 (= $x69 true)))
 (let (($x92 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x321 (bvadd ?x101 input.dst.llvm-%m2)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x321))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv2 32))) ?x178)))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv3 32))) ?x248)))
 (let ((?x295 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (=> $x129 (= ?x295 ?x10))))))))))))
 ))
 (let (($x269 (and $x342 $x92)))
 (let (($x271 (= $x269 true)))
 (let (($x87 (= $x271 true)))
 (let ((?x115 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x339 (= (_ bv0 32) ?x115)))
 (let ((?x286 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x128 (= (_ bv0 32) ?x286)))
 (let ((?x53 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x284 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x284)))
 (let (($x358 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x313 (and $x358 $x301)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x65 $x313)))
 (let (($x64 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x360 (and $x266 $x140)))
 (let (($x353 (not $x360)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x323 (and $x146 $x372)))
 (let (($x220 (and (not $x323) $x353)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x108 $x297)))
 (let (($x335 (not $x72)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x142 $x299)))
 (let (($x91 (and (not $x5) $x335)))
 (let (($x98 (and (and (and (and (and (and $x91 $x220) $x133) $x64) $x12) $x350) $x128)))
 (let (($x369 (and $x98 $x339)))
 (let (($x319 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x367 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x367)))
 (let (($x310 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x367)))
 (let (($x371 (or false (or false (and (and true (or $x77 $x310)) (or $x159 $x319))))))
 (let (($x215 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x371)))
 (let (($x213 (and $x215 $x369)))
 (let (($x44 (= $x213 true)))
 (let (($x21 (= $x44 true)))
 (let (($x119 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x380 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x97 (and $x380 $x119)))
 (let (($x196 (= $x97 true)))
 (let (($x336 (= $x196 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x230 (= (_ bv0 2) ?x68)))
 (let (($x49 (= $x230 true)))
 (let (($x151 (= ?x194 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x347 (= $x151 true)))
 (let (($x188 (and $x347 $x49)))
 (let (($x45 (and $x188 $x336)))
 (let (($x361 (and $x45 $x21)))
 (let (($x166 (and $x361 $x87)))
 (let (($x231 (and $x166 $x70)))
 (let (($x283 (and $x231 $x32)))
 (let (($x308 (and $x283 $x366)))
 (let (($x375 (and $x308 $x235)))
 (let (($x75 (and $x375 $x373)))
 (let (($x203 (and $x75 $x43)))
 (let (($x36 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x38 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (=> $x19 (= ?x50 ?x38))))))))
 ))
 (let (($x157 (forall ((Lambda5 (_ BitVec 32)) )(let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x242 (_ bv1 32))))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (= $x19 $x306))))))))
 ))
 (let (($x322 (forall ((Lambda5 (_ BitVec 32)) )(let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x242 (_ bv0 32))))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x280 (_ bv0 32))))
 (= $x160 $x197))))))))
 ))
 (let (($x374 (and $x322 $x223)))
 (let (($x345 (and $x374 $x157)))
 (let (($x318 (and $x345 $x36)))
 (let (($x63 (and $x318 $x203)))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x298 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x295 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (=> $x129 (= ?x295 ?x298))))))))
 ))
 (let (($x181 (forall ((Lambda5 (_ BitVec 32)) )(let (($x206 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x110 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (= $x129 (bvuge ?x110 (_ bv1 32)))))))))
 ))
 (let (($x338 (forall ((Lambda5 (_ BitVec 32)) )(let (($x206 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x110 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (= $x136 (= ?x110 (_ bv0 32)))))))))
 ))
 (let (($x290 (and $x338 $x106)))
 (let (($x244 (and $x290 $x181)))
 (let (($x377 (and $x244 $x296)))
 (let (($x252 (and $x377 $x63)))
 (let (($x392 (=> $x252 $x391)))
 (not $x392))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x388 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x109 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x101)))
 (let ((?x326 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x109))))
 (let ((?x368 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x109 (_ bv2 32))) ?x326)))
 (let ((?x356 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x109 (_ bv3 32))) ?x368)))
 (let ((?x295 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (=> $x129 (= ?x295 ?x356))))))))))))
 ))
 (let (($x6 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x267 (_ bv1 32))))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (= $x129 $x330)))))))
 ))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let (($x288 (= false false)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (=> $x136 $x288))))))
 ))
 (let (($x60 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x267 (_ bv0 32))))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (= $x136 $x370)))))))
 ))
 (let (($x222 (and $x60 $x106)))
 (let (($x342 (and $x222 $x6)))
 (let (($x389 (and $x342 $x388)))
 (let (($x390 (= $x389 true)))
 (let (($x391 (= $x390 true)))
 (let ((?x207 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x194 (bvneg ?x207)))
 (let (($x312 (= ?x194 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (= $x312 true)))
 (let (($x351 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x201 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x78))))
 (let ((?x38 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x242 (_ bv1 32))))
 (=> $x306 (= ?x38 ?x260)))))))))))
 ))
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x267 (_ bv1 32))))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x242 (_ bv1 32))))
 (= $x306 $x330)))))))
 ))
 (let (($x171 (forall ((Lambda5 (_ BitVec 32)) )(let (($x288 (= false false)))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x242 (_ bv0 32))))
 (=> $x197 $x288))))))
 ))
 (let (($x376 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x267 (_ bv0 32))))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x242 (_ bv0 32))))
 (= $x197 $x370)))))))
 ))
 (let (($x135 (and $x376 $x171)))
 (let (($x362 (and $x135 $x117)))
 (let (($x170 (and $x362 $x351)))
 (let (($x251 (= $x170 true)))
 (let (($x373 (= $x251 true)))
 (let (($x274 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x321 (bvadd ?x101 input.dst.llvm-%m2)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem ?x321))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv2 32))) ?x130))))
 (let ((?x295 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (=> $x129 (= ?x295 ?x82)))))))))))
 ))
 (let (($x363 (and $x342 $x274)))
 (let (($x352 (= $x363 true)))
 (let (($x235 (= $x352 true)))
 (let (($x177 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x201 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x78))))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (=> $x19 (= ?x50 ?x260)))))))))))
 ))
 (let (($x40 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x267 (_ bv1 32))))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (= $x19 $x330)))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let (($x288 (= false false)))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x280 (_ bv0 32))))
 (=> $x160 $x288))))))
 ))
 (let (($x179 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x370 (= ?x267 (_ bv0 32))))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x280 (_ bv0 32))))
 (= $x160 $x370)))))))
 ))
 (let (($x238 (and $x179 $x223)))
 (let (($x303 (and $x238 $x40)))
 (let (($x93 (and $x303 $x177)))
 (let (($x9 (= $x93 true)))
 (let (($x366 (= $x9 true)))
 (let (($x24 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x201 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x201))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv2 32))) ?x221)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv3 32))) ?x228)))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (=> $x19 (= ?x50 ?x89))))))))))))
 ))
 (let (($x272 (and $x303 $x24)))
 (let (($x175 (= $x272 true)))
 (let (($x32 (= $x175 true)))
 (let (($x168 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x201 (bvadd ?x101 input.dst.llvm-%m1)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x201))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv2 32))) ?x221)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x201 (_ bv3 32))) ?x228)))
 (let ((?x38 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x242 (_ bv1 32))))
 (=> $x306 (= ?x38 ?x89))))))))))))
 ))
 (let (($x35 (and $x362 $x168)))
 (let (($x69 (= $x35 true)))
 (let (($x70 (= $x69 true)))
 (let (($x92 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x101 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x321 (bvadd ?x101 input.dst.llvm-%m2)))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x321))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv2 32))) ?x178)))
 (let ((?x10 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x321 (_ bv3 32))) ?x248)))
 (let ((?x295 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (=> $x129 (= ?x295 ?x10))))))))))))
 ))
 (let (($x269 (and $x342 $x92)))
 (let (($x271 (= $x269 true)))
 (let (($x87 (= $x271 true)))
 (let ((?x115 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x339 (= (_ bv0 32) ?x115)))
 (let ((?x286 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x128 (= (_ bv0 32) ?x286)))
 (let ((?x53 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x284 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x284)))
 (let (($x358 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x313 (and $x358 $x301)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x65 $x313)))
 (let (($x64 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x360 (and $x266 $x140)))
 (let (($x353 (not $x360)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x323 (and $x146 $x372)))
 (let (($x220 (and (not $x323) $x353)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x108 $x297)))
 (let (($x335 (not $x72)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x142 $x299)))
 (let (($x91 (and (not $x5) $x335)))
 (let (($x98 (and (and (and (and (and (and $x91 $x220) $x133) $x64) $x12) $x350) $x128)))
 (let (($x369 (and $x98 $x339)))
 (let (($x319 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x367 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x367)))
 (let (($x310 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x367)))
 (let (($x371 (or false (or false (and (and true (or $x77 $x310)) (or $x159 $x319))))))
 (let (($x215 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x371)))
 (let (($x213 (and $x215 $x369)))
 (let (($x44 (= $x213 true)))
 (let (($x21 (= $x44 true)))
 (let (($x119 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x380 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x97 (and $x380 $x119)))
 (let (($x196 (= $x97 true)))
 (let (($x336 (= $x196 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x230 (= (_ bv0 2) ?x68)))
 (let (($x49 (= $x230 true)))
 (let (($x151 (= ?x194 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x347 (= $x151 true)))
 (let (($x188 (and $x347 $x49)))
 (let (($x45 (and $x188 $x336)))
 (let (($x361 (and $x45 $x21)))
 (let (($x166 (and $x361 $x87)))
 (let (($x231 (and $x166 $x70)))
 (let (($x283 (and $x231 $x32)))
 (let (($x308 (and $x283 $x366)))
 (let (($x375 (and $x308 $x235)))
 (let (($x75 (and $x375 $x373)))
 (let (($x203 (and $x75 $x43)))
 (let (($x36 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x38 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x50 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (=> $x19 (= ?x50 ?x38))))))))
 ))
 (let (($x157 (forall ((Lambda5 (_ BitVec 32)) )(let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x242 (_ bv1 32))))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x280 (_ bv1 32))))
 (= $x19 $x306))))))))
 ))
 (let (($x322 (forall ((Lambda5 (_ BitVec 32)) )(let (($x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x242 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (= ?x242 (_ bv0 32))))
 (let (($x16 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x280 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (= ?x280 (_ bv0 32))))
 (= $x160 $x197))))))))
 ))
 (let (($x374 (and $x322 $x223)))
 (let (($x345 (and $x374 $x157)))
 (let (($x318 (and $x345 $x36)))
 (let (($x63 (and $x318 $x203)))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x298 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x295 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (=> $x129 (= ?x295 ?x298))))))))
 ))
 (let (($x181 (forall ((Lambda5 (_ BitVec 32)) )(let (($x206 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x110 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x71 (_ bv1 32))))
 (= $x129 (bvuge ?x110 (_ bv1 32)))))))))
 ))
 (let (($x338 (forall ((Lambda5 (_ BitVec 32)) )(let (($x206 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x110 (ite $x206 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x71 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x71 (_ bv0 32))))
 (= $x136 (= ?x110 (_ bv0 32)))))))))
 ))
 (let (($x290 (and $x338 $x106)))
 (let (($x244 (and $x290 $x181)))
 (let (($x377 (and $x244 $x296)))
 (let (($x252 (and $x377 $x63)))
 (let (($x392 (=> $x252 $x391)))
 (not $x392))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x94814404)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x04900010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05046020)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04900010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05046023)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x94814407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05046020)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x94814404)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x04900010)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000001))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000001))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000001))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000001))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000001))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x10000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xc2424ff0)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7a02c048)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xde018824)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xc2424ff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xde018827)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7a02c04b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xde018824)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7a02c048)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xc2424ff0)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc2424ffb) #x40
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x413 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x316 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_2 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x287 ?x316)))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x278))))
 (let ((?x407 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv2 32))) ?x31)))
 (let ((?x410 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv3 32))) ?x407)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (=> $x45 (= ?x367 ?x410)))))))))))))
 ))
 (let (($x337 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x209 (_ bv1 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (= $x45 $x168)))))))
 ))
 (let (($x380 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (= false false)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x230 (_ bv0 32))))
 (=> $x49 $x295))))))
 ))
 (let (($x289 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x209 (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x230 (_ bv0 32))))
 (= $x49 $x281)))))))
 ))
 (let (($x126 (and $x289 $x380)))
 (let (($x241 (and $x126 $x337)))
 (let (($x414 (and $x241 $x413)))
 (let (($x415 (= $x414 true)))
 (let (($x416 (= $x415 true)))
 (let ((?x94 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x23 (= (_ bv0 2) ?x94)))
 (let (($x138 (= $x23 true)))
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x287 input.dst.llvm-%m1)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x216))))
 (let ((?x310 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x343 (_ bv1 32))))
 (=> $x336 (= ?x310 ?x104)))))))))))
 ))
 (let (($x170 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x209 (_ bv1 32))))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x343 (_ bv1 32))))
 (= $x336 $x168)))))))
 ))
 (let (($x375 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (= false false)))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (=> $x68 $x295))))))
 ))
 (let (($x363 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x209 (_ bv0 32))))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (= $x68 $x281)))))))
 ))
 (let (($x311 (and $x363 $x375)))
 (let (($x251 (and $x311 $x170)))
 (let (($x254 (and $x251 $x261)))
 (let (($x304 (= $x254 true)))
 (let (($x384 (= $x304 true)))
 (let (($x285 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x78 (bvadd ?x287 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x277))))
 (let ((?x84 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (=> $x150 (= ?x84 ?x253)))))))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x209 (_ bv1 32))))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (= $x150 $x168)))))))
 ))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (= false false)))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x169 (_ bv0 32))))
 (=> $x202 $x295))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x209 (_ bv0 32))))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x169 (_ bv0 32))))
 (= $x202 $x281)))))))
 ))
 (let (($x89 (and $x228 $x37)))
 (let (($x70 (and $x89 $x69)))
 (let (($x102 (and $x70 $x285)))
 (let (($x28 (= $x102 true)))
 (let (($x127 (= $x28 true)))
 (let (($x18 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x287 input.dst.llvm-%m1)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x216))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (=> $x45 (= ?x367 ?x104)))))))))))
 ))
 (let (($x200 (and $x241 $x18)))
 (let (($x114 (= $x200 true)))
 (let (($x55 (= $x114 true)))
 (let (($x80 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x287 input.dst.llvm-%m1)))
 (let ((?x368 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x368)))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x387)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (=> $x45 (= ?x367 ?x390))))))))))))
 ))
 (let (($x90 (and $x241 $x80)))
 (let (($x149 (= $x90 true)))
 (let (($x164 (= $x149 true)))
 (let (($x393 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x287 input.dst.llvm-%m1)))
 (let ((?x368 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x368)))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x387)))
 (let ((?x310 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x343 (_ bv1 32))))
 (=> $x336 (= ?x310 ?x390))))))))))))
 ))
 (let (($x348 (and $x251 $x393)))
 (let (($x195 (= $x348 true)))
 (let (($x186 (= $x195 true)))
 (let (($x257 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x78 (bvadd ?x287 input.dst.llvm-%m2)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x78))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv2 32))) ?x317)))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv3 32))) ?x9)))
 (let ((?x84 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (=> $x150 (= ?x84 ?x249))))))))))))
 ))
 (let (($x130 (and $x70 $x257)))
 (let (($x258 (= $x130 true)))
 (let (($x82 (= $x258 true)))
 (let (($x166 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x269 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x11 (and $x269 $x166)))
 (let (($x376 (= $x11 true)))
 (let (($x7 (= $x376 true)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x321 (= (_ bv0 32) ?x101)))
 (let ((?x57 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x39 (= (_ bv0 32) ?x57)))
 (let ((?x6 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x342 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x330 (and $x370 $x222)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x305 (and $x267 $x330)))
 (let (($x300 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x369 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x339 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x339 $x369)))
 (let (($x44 (not $x213)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x128 $x98)))
 (let (($x361 (and (not $x115) $x44)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x12 $x365)))
 (let (($x350 (not $x53)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x313 (and $x146 $x372)))
 (let (($x286 (and (not $x313) $x350)))
 (let (($x34 (and (and (and (and (and (and $x286 $x361) $x212) $x300) $x305) $x342) $x39)))
 (let (($x381 (and $x34 $x321)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x360 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x360)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x353 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x360)))
 (let (($x234 (or false (or false (and (and true (or $x353 $x220)) (or $x236 $x64))))))
 (let (($x301 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x234)))
 (let (($x245 (and $x301 $x381)))
 (let (($x178 (= $x245 true)))
 (let (($x248 (= $x178 true)))
 (let ((?x371 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x215 (bvneg ?x371)))
 (let (($x108 (= ?x215 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x297 (= $x108 true)))
 (let (($x299 (= ?x215 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x5 (= $x299 true)))
 (let (($x72 (and $x5 $x297)))
 (let (($x10 (and $x72 $x248)))
 (let (($x171 (and $x10 $x7)))
 (let (($x163 (and $x171 $x82)))
 (let (($x292 (and $x163 $x186)))
 (let (($x268 (and $x292 $x164)))
 (let (($x255 (and $x268 $x55)))
 (let (($x88 (and $x255 $x127)))
 (let (($x185 (and $x88 $x384)))
 (let (($x85 (and $x185 $x138)))
 (let (($x319 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x310 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (=> $x45 (= ?x367 ?x310))))))))
 ))
 (let (($x158 (forall ((Lambda5 (_ BitVec 32)) )(let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x343 (_ bv1 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (= $x45 $x336))))))))
 ))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x230 (_ bv0 32))))
 (= $x49 $x68))))))))
 ))
 (let (($x246 (and $x107 $x380)))
 (let (($x131 (and $x246 $x158)))
 (let (($x282 (and $x131 $x319)))
 (let (($x156 (and $x282 $x85)))
 (let (($x38 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x84 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (=> $x150 (= ?x84 ?x19))))))))
 ))
 (let (($x197 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x290 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (= $x150 (bvuge ?x290 (_ bv1 32)))))))))
 ))
 (let (($x244 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x290 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x169 (_ bv0 32))))
 (= $x202 (= ?x290 (_ bv0 32)))))))))
 ))
 (let (($x296 (and $x244 $x37)))
 (let (($x123 (and $x296 $x197)))
 (let (($x218 (and $x123 $x38)))
 (let (($x83 (and $x218 $x156)))
 (let (($x417 (=> $x83 $x416)))
 (let (($x418 (not $x417)))
 (let (($x404 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x329 (select solver-mem_2 memmask-bounded-var!)))
 (let (($x111 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x263 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x263)))
 (let (($x190 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x263)))
 (let (($x398 (or false (or false (and (and true (or $x134 $x190)) (or $x96 $x111))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x398) (= ?x329 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x329 (_ bv0 8)))))))))))
 ))
 (and (and true $x404) $x418))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x413 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x316 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_2 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x287 ?x316)))
 (let ((?x31 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x278))))
 (let ((?x407 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv2 32))) ?x31)))
 (let ((?x410 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv3 32))) ?x407)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (=> $x45 (= ?x367 ?x410)))))))))))))
 ))
 (let (($x337 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x209 (_ bv1 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (= $x45 $x168)))))))
 ))
 (let (($x380 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (= false false)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x230 (_ bv0 32))))
 (=> $x49 $x295))))))
 ))
 (let (($x289 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x209 (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x230 (_ bv0 32))))
 (= $x49 $x281)))))))
 ))
 (let (($x126 (and $x289 $x380)))
 (let (($x241 (and $x126 $x337)))
 (let (($x414 (and $x241 $x413)))
 (let (($x415 (= $x414 true)))
 (let (($x416 (= $x415 true)))
 (let ((?x94 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x23 (= (_ bv0 2) ?x94)))
 (let (($x138 (= $x23 true)))
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x287 input.dst.llvm-%m1)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x216))))
 (let ((?x310 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x343 (_ bv1 32))))
 (=> $x336 (= ?x310 ?x104)))))))))))
 ))
 (let (($x170 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x209 (_ bv1 32))))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x343 (_ bv1 32))))
 (= $x336 $x168)))))))
 ))
 (let (($x375 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (= false false)))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (=> $x68 $x295))))))
 ))
 (let (($x363 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x209 (_ bv0 32))))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (= $x68 $x281)))))))
 ))
 (let (($x311 (and $x363 $x375)))
 (let (($x251 (and $x311 $x170)))
 (let (($x254 (and $x251 $x261)))
 (let (($x304 (= $x254 true)))
 (let (($x384 (= $x304 true)))
 (let (($x285 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x78 (bvadd ?x287 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x277))))
 (let ((?x84 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (=> $x150 (= ?x84 ?x253)))))))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x209 (_ bv1 32))))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (= $x150 $x168)))))))
 ))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let (($x295 (= false false)))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x169 (_ bv0 32))))
 (=> $x202 $x295))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x209 (_ bv0 32))))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x169 (_ bv0 32))))
 (= $x202 $x281)))))))
 ))
 (let (($x89 (and $x228 $x37)))
 (let (($x70 (and $x89 $x69)))
 (let (($x102 (and $x70 $x285)))
 (let (($x28 (= $x102 true)))
 (let (($x127 (= $x28 true)))
 (let (($x18 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x287 input.dst.llvm-%m1)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x216))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (=> $x45 (= ?x367 ?x104)))))))))))
 ))
 (let (($x200 (and $x241 $x18)))
 (let (($x114 (= $x200 true)))
 (let (($x55 (= $x114 true)))
 (let (($x80 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x287 input.dst.llvm-%m1)))
 (let ((?x368 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x368)))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x387)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (=> $x45 (= ?x367 ?x390))))))))))))
 ))
 (let (($x90 (and $x241 $x80)))
 (let (($x149 (= $x90 true)))
 (let (($x164 (= $x149 true)))
 (let (($x393 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x95 (bvadd ?x287 input.dst.llvm-%m1)))
 (let ((?x368 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x368)))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x387)))
 (let ((?x310 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x343 (_ bv1 32))))
 (=> $x336 (= ?x310 ?x390))))))))))))
 ))
 (let (($x348 (and $x251 $x393)))
 (let (($x195 (= $x348 true)))
 (let (($x186 (= $x195 true)))
 (let (($x257 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x78 (bvadd ?x287 input.dst.llvm-%m2)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x78))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv2 32))) ?x317)))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv3 32))) ?x9)))
 (let ((?x84 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (=> $x150 (= ?x84 ?x249))))))))))))
 ))
 (let (($x130 (and $x70 $x257)))
 (let (($x258 (= $x130 true)))
 (let (($x82 (= $x258 true)))
 (let (($x166 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x269 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x11 (and $x269 $x166)))
 (let (($x376 (= $x11 true)))
 (let (($x7 (= $x376 true)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x321 (= (_ bv0 32) ?x101)))
 (let ((?x57 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x39 (= (_ bv0 32) ?x57)))
 (let ((?x6 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x342 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x330 (and $x370 $x222)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x305 (and $x267 $x330)))
 (let (($x300 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x369 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x339 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x339 $x369)))
 (let (($x44 (not $x213)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x128 $x98)))
 (let (($x361 (and (not $x115) $x44)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x12 $x365)))
 (let (($x350 (not $x53)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x313 (and $x146 $x372)))
 (let (($x286 (and (not $x313) $x350)))
 (let (($x34 (and (and (and (and (and (and $x286 $x361) $x212) $x300) $x305) $x342) $x39)))
 (let (($x381 (and $x34 $x321)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x360 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x360)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x353 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x360)))
 (let (($x234 (or false (or false (and (and true (or $x353 $x220)) (or $x236 $x64))))))
 (let (($x301 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x234)))
 (let (($x245 (and $x301 $x381)))
 (let (($x178 (= $x245 true)))
 (let (($x248 (= $x178 true)))
 (let ((?x371 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x215 (bvneg ?x371)))
 (let (($x108 (= ?x215 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x297 (= $x108 true)))
 (let (($x299 (= ?x215 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x5 (= $x299 true)))
 (let (($x72 (and $x5 $x297)))
 (let (($x10 (and $x72 $x248)))
 (let (($x171 (and $x10 $x7)))
 (let (($x163 (and $x171 $x82)))
 (let (($x292 (and $x163 $x186)))
 (let (($x268 (and $x292 $x164)))
 (let (($x255 (and $x268 $x55)))
 (let (($x88 (and $x255 $x127)))
 (let (($x185 (and $x88 $x384)))
 (let (($x85 (and $x185 $x138)))
 (let (($x319 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x310 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (=> $x45 (= ?x367 ?x310))))))))
 ))
 (let (($x158 (forall ((Lambda5 (_ BitVec 32)) )(let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x343 (_ bv1 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x45 (bvuge ?x230 (_ bv1 32))))
 (= $x45 $x336))))))))
 ))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x343 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (let (($x36 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x230 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (= ?x230 (_ bv0 32))))
 (= $x49 $x68))))))))
 ))
 (let (($x246 (and $x107 $x380)))
 (let (($x131 (and $x246 $x158)))
 (let (($x282 (and $x131 $x319)))
 (let (($x156 (and $x282 $x85)))
 (let (($x38 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x84 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (=> $x150 (= ?x84 ?x19))))))))
 ))
 (let (($x197 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x290 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x169 (_ bv1 32))))
 (= $x150 (bvuge ?x290 (_ bv1 32)))))))))
 ))
 (let (($x244 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x290 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x169 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (= ?x169 (_ bv0 32))))
 (= $x202 (= ?x290 (_ bv0 32)))))))))
 ))
 (let (($x296 (and $x244 $x37)))
 (let (($x123 (and $x296 $x197)))
 (let (($x218 (and $x123 $x38)))
 (let (($x83 (and $x218 $x156)))
 (let (($x417 (=> $x83 $x416)))
 (let (($x418 (not $x417)))
 (let (($x404 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x329 (select solver-mem_2 memmask-bounded-var!)))
 (let (($x111 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x263 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x263)))
 (let (($x190 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x263)))
 (let (($x398 (or false (or false (and (and true (or $x134 $x190)) (or $x96 $x111))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x398) (= ?x329 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x329 (_ bv0 8)))))))))))
 ))
 (and (and true $x404) $x418))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!87))
  (define-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!85))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x05d3dc20)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!85))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2540ec20)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!86))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2540ec23)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x05d3dc23)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2540ec20)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x05d3dc20)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!92 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!89 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!92 (k!89 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!85!91 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000000) #x00
    (ite (= x!0 #x02808002) #x00
    (ite (= x!0 #x05d3dc20) #x00
    (ite (= x!0 #x2540ec21) #x00
    (ite (= x!0 #x00000001) #x40
    (ite (= x!0 #x2540ec20) #x00
    (ite (= x!0 #x04000002) #x00
    (ite (= x!0 #x02808001) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x05d3dc21) #x00
    (ite (= x!0 #x0541d088) #x40
    (ite (= x!0 #x04000003) #x00
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x02808003) #x00
    (ite (= x!0 #x2540ec23) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x02808000) #x00
    (ite (= x!0 #x05d3dc23) #x00
    (ite (= x!0 #x00000002) #x00
      #x02))))))))))))))))))))
  (define-fun k!88 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x2540ec21 x!0)
                    (ite (bvule #x2540ec23 x!0)
                         (ite (bvule #x2540ec24 x!0) #x2540ec24 #x2540ec23)
                         #x2540ec21)
                    #x2540ec20)))
    (let ((a!2 (ite (bvule #x05d3dc23 x!0)
                    (ite (bvule #x05d3dc24 x!0)
                         (ite (bvule #x2540ec20 x!0) a!1 #x05d3dc24)
                         #x05d3dc23)
                    #x05d3dc21)))
    (let ((a!3 (ite (bvule #x0541d088 x!0)
                    (ite (bvule #x05d3dc20 x!0)
                         (ite (bvule #x05d3dc21 x!0) a!2 #x05d3dc20)
                         #x0541d088)
                    #x04000003)))
    (let ((a!4 (ite (bvule #x04000001 x!0)
                    (ite (bvule #x04000002 x!0)
                         (ite (bvule #x04000003 x!0) a!3 #x04000002)
                         #x04000001)
                    #x04000000)))
    (let ((a!5 (ite (bvule #x02808002 x!0)
                    (ite (bvule #x02808003 x!0)
                         (ite (bvule #x04000000 x!0) a!4 #x02808003)
                         #x02808002)
                    #x02808001)))
    (let ((a!6 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x02808000 x!0)
                         (ite (bvule #x02808001 x!0) a!5 #x02808000)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!6 #x00000001)
           #x00000000))))))))
  (define-fun k!85 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!85!91 (k!88 x!0)))
  (define-fun k!90 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!87 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000001) #x01
    (ite (= x!0 #x00000001) #x40
      #x00)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (let ((a!1 (concat (k!87 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!87 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!87 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!87 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!85 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!85 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!85 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!85 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!94 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!85))
              (= x!3 (_ as-array k!86))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x02808000
      #x04000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!94 (k!90 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!87 (bvadd #x04000003 (bvmul #x00000004 x!0)))
                         (k!87 (bvadd #x04000002 (bvmul #x00000004 x!0)))
                         (k!87 (bvadd #x04000001 (bvmul #x00000004 x!0)))
                         (k!87 (bvadd #x04000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!85 (bvadd #x04000003 (bvmul #x00000004 x!0)))
                         (k!85 (bvadd #x04000002 (bvmul #x00000004 x!0)))
                         (k!85 (bvadd #x04000001 (bvmul #x00000004 x!0)))
                         (k!85 (bvadd #x04000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!93 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!93 (k!90 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!87 (bvadd #x04000003 (bvmul #x00000004 x!0)))
                         (k!87 (bvadd #x04000002 (bvmul #x00000004 x!0)))
                         (k!87 (bvadd #x04000001 (bvmul #x00000004 x!0)))
                         (k!87 (bvadd #x04000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!86 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x240 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x63 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x348)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x63))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv2 32))) ?x43)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv3 32))) ?x193)))
 (let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (=> $x131 (= ?x371 ?x275))))))))))))
 ))
 (let (($x200 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x79 (_ bv1 32))))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (= $x131 $x274)))))))
 ))
 (let (($x104 (forall ((Lambda5 (_ BitVec 32)) )(let (($x402 (= false false)))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x49 (_ bv0 32))))
 (=> $x194 $x402))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x79 (_ bv0 32))))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x49 (_ bv0 32))))
 (= $x194 $x219)))))))
 ))
 (let (($x332 (and $x279 $x104)))
 (let (($x114 (and $x332 $x200)))
 (let (($x309 (and $x114 $x240)))
 (let (($x264 (= $x309 true)))
 (let (($x211 (= $x264 true)))
 (let ((?x153 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x284 (bvneg ?x153)))
 (let (($x141 (= ?x284 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x272 (= $x141 true)))
 (let (($x174 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x28 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x232))))
 (let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (=> $x131 (= ?x371 ?x288)))))))))))
 ))
 (let (($x198 (and $x114 $x174)))
 (let (($x27 (= $x198 true)))
 (let (($x238 (= $x27 true)))
 (let (($x155 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x195 (bvadd ?x348 input.dst.llvm-%m2)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x151))))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (=> $x404 (= ?x8 ?x119)))))))))))
 ))
 (let (($x235 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x79 (_ bv1 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (= $x404 $x274)))))))
 ))
 (let (($x231 (forall ((Lambda5 (_ BitVec 32)) )(let (($x402 (= false false)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x355 (_ bv0 32))))
 (=> $x396 $x402))))))
 ))
 (let (($x130 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x79 (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x355 (_ bv0 32))))
 (= $x396 $x219)))))))
 ))
 (let (($x258 (and $x130 $x231)))
 (let (($x375 (and $x258 $x235)))
 (let (($x349 (and $x375 $x155)))
 (let (($x383 (= $x349 true)))
 (let (($x259 (= $x383 true)))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x28 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x232))))
 (let ((?x282 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (=> $x367 (= ?x282 ?x288)))))))))))
 ))
 (let (($x409 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x79 (_ bv1 32))))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (= $x367 $x274)))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let (($x402 (= false false)))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (=> $x68 $x402))))))
 ))
 (let (($x76 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x79 (_ bv0 32))))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (= $x68 $x219)))))))
 ))
 (let (($x316 (and $x76 $x246)))
 (let (($x405 (and $x316 $x409)))
 (let (($x377 (and $x405 $x298)))
 (let (($x16 (= $x377 true)))
 (let (($x280 (= $x16 true)))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x28 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x28))))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv2 32))) ?x262)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv3 32))) ?x304)))
 (let ((?x282 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (=> $x367 (= ?x282 ?x143))))))))))))
 ))
 (let (($x407 (and $x405 $x31)))
 (let (($x410 (= $x407 true)))
 (let (($x411 (= $x410 true)))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x28 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x28))))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv2 32))) ?x262)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv3 32))) ?x304)))
 (let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (=> $x131 (= ?x371 ?x143))))))))))))
 ))
 (let (($x85 (and $x114 $x138)))
 (let (($x156 (= $x85 true)))
 (let (($x83 (= $x156 true)))
 (let (($x149 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x195 (bvadd ?x348 input.dst.llvm-%m2)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x195))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x195 (_ bv2 32))) ?x289)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x195 (_ bv3 32))) ?x337)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (=> $x404 (= ?x8 ?x224))))))))))))
 ))
 (let (($x164 (and $x375 $x149)))
 (let (($x268 (= $x164 true)))
 (let (($x41 (= $x268 true)))
 (let ((?x209 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x281 (= (_ bv0 32) ?x209)))
 (let ((?x116 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x26 (= (_ bv0 32) ?x116)))
 (let ((?x118 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x11 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x376 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x11)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x87 $x376)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x271 $x7)))
 (let (($x269 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x340 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x321 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x245 (and $x321 $x381)))
 (let (($x178 (not $x245)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x39 $x34)))
 (let (($x10 (and (not $x101) $x178)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x305 $x357)))
 (let (($x342 (not $x6)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (and $x128 $x98)))
 (let (($x57 (and (not $x330) $x342)))
 (let (($x69 (and (and (and (and (and (and $x57 $x10) $x340) $x269) $x171) $x125) $x26)))
 (let (($x70 (and $x69 $x281)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x213 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x213)))
 (let (($x361 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x213)))
 (let (($x294 (or false (or false (and (and true (or $x44 $x361)) (or $x192 $x300))))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x294)))
 (let (($x179 (and $x222 $x70)))
 (let (($x287 (= $x179 true)))
 (let (($x78 (= $x287 true)))
 (let (($x313 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x146 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x291 (and $x146 $x313)))
 (let (($x12 (= $x291 true)))
 (let (($x365 (= $x12 true)))
 (let ((?x236 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x64 (= (_ bv0 2) ?x236)))
 (let (($x233 (= $x64 true)))
 (let (($x353 (= ?x284 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x220 (= $x353 true)))
 (let (($x65 (and $x220 $x233)))
 (let (($x53 (and $x65 $x365)))
 (let (($x366 (and $x53 $x78)))
 (let (($x139 (and $x366 $x41)))
 (let (($x91 (and $x139 $x83)))
 (let (($x412 (and $x91 $x411)))
 (let (($x322 (and $x412 $x280)))
 (let (($x135 (and $x322 $x259)))
 (let (($x105 (and $x135 $x238)))
 (let (($x175 (and $x105 $x272)))
 (let (($x108 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x282 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (=> $x367 (= ?x282 ?x371))))))))
 ))
 (let (($x159 (forall ((Lambda5 (_ BitVec 32)) )(let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (= $x367 $x131))))))))
 ))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x49 (_ bv0 32))))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (= $x68 $x194))))))))
 ))
 (let (($x45 (and $x107 $x246)))
 (let (($x324 (and $x45 $x159)))
 (let (($x297 (and $x324 $x108)))
 (let (($x303 (and $x297 $x175)))
 (let (($x150 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (=> $x404 (= ?x8 ?x181))))))))
 ))
 (let (($x71 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x42 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (= $x404 (bvuge ?x42 (_ bv1 32)))))))))
 ))
 (let (($x398 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x42 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x355 (_ bv0 32))))
 (= $x396 (= ?x42 (_ bv0 32)))))))))
 ))
 (let (($x122 (and $x398 $x231)))
 (let (($x169 (and $x122 $x71)))
 (let (($x160 (and $x169 $x150)))
 (let (($x270 (and $x160 $x303)))
 (let (($x315 (=> $x270 $x211)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x240 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x63 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x348)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x63))))
 (let ((?x193 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv2 32))) ?x43)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x63 (_ bv3 32))) ?x193)))
 (let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (=> $x131 (= ?x371 ?x275))))))))))))
 ))
 (let (($x200 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x79 (_ bv1 32))))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (= $x131 $x274)))))))
 ))
 (let (($x104 (forall ((Lambda5 (_ BitVec 32)) )(let (($x402 (= false false)))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x49 (_ bv0 32))))
 (=> $x194 $x402))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x79 (_ bv0 32))))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x49 (_ bv0 32))))
 (= $x194 $x219)))))))
 ))
 (let (($x332 (and $x279 $x104)))
 (let (($x114 (and $x332 $x200)))
 (let (($x309 (and $x114 $x240)))
 (let (($x264 (= $x309 true)))
 (let (($x211 (= $x264 true)))
 (let ((?x153 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x284 (bvneg ?x153)))
 (let (($x141 (= ?x284 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x272 (= $x141 true)))
 (let (($x174 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x28 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x232))))
 (let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (=> $x131 (= ?x371 ?x288)))))))))))
 ))
 (let (($x198 (and $x114 $x174)))
 (let (($x27 (= $x198 true)))
 (let (($x238 (= $x27 true)))
 (let (($x155 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x195 (bvadd ?x348 input.dst.llvm-%m2)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem ?x195))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x195 (_ bv2 32))) ?x151))))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (=> $x404 (= ?x8 ?x119)))))))))))
 ))
 (let (($x235 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x79 (_ bv1 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (= $x404 $x274)))))))
 ))
 (let (($x231 (forall ((Lambda5 (_ BitVec 32)) )(let (($x402 (= false false)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x355 (_ bv0 32))))
 (=> $x396 $x402))))))
 ))
 (let (($x130 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x79 (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x355 (_ bv0 32))))
 (= $x396 $x219)))))))
 ))
 (let (($x258 (and $x130 $x231)))
 (let (($x375 (and $x258 $x235)))
 (let (($x349 (and $x375 $x155)))
 (let (($x383 (= $x349 true)))
 (let (($x259 (= $x383 true)))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x28 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x232))))
 (let ((?x282 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (=> $x367 (= ?x282 ?x288)))))))))))
 ))
 (let (($x409 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x79 (_ bv1 32))))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (= $x367 $x274)))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let (($x402 (= false false)))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (=> $x68 $x402))))))
 ))
 (let (($x76 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x79 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x79 (_ bv0 32))))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (= $x68 $x219)))))))
 ))
 (let (($x316 (and $x76 $x246)))
 (let (($x405 (and $x316 $x409)))
 (let (($x377 (and $x405 $x298)))
 (let (($x16 (= $x377 true)))
 (let (($x280 (= $x16 true)))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x28 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x28))))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv2 32))) ?x262)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv3 32))) ?x304)))
 (let ((?x282 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (=> $x367 (= ?x282 ?x143))))))))))))
 ))
 (let (($x407 (and $x405 $x31)))
 (let (($x410 (= $x407 true)))
 (let (($x411 (= $x410 true)))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x28 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x28))))
 (let ((?x304 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv2 32))) ?x262)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x28 (_ bv3 32))) ?x304)))
 (let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (=> $x131 (= ?x371 ?x143))))))))))))
 ))
 (let (($x85 (and $x114 $x138)))
 (let (($x156 (= $x85 true)))
 (let (($x83 (= $x156 true)))
 (let (($x149 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x348 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x195 (bvadd ?x348 input.dst.llvm-%m2)))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x195 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x195))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x195 (_ bv2 32))) ?x289)))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x195 (_ bv3 32))) ?x337)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (=> $x404 (= ?x8 ?x224))))))))))))
 ))
 (let (($x164 (and $x375 $x149)))
 (let (($x268 (= $x164 true)))
 (let (($x41 (= $x268 true)))
 (let ((?x209 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x281 (= (_ bv0 32) ?x209)))
 (let ((?x116 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x26 (= (_ bv0 32) ?x116)))
 (let ((?x118 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x118)))
 (let ((?x11 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x376 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x11)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x87 $x376)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (and $x271 $x7)))
 (let (($x269 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x340 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x321 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x245 (and $x321 $x381)))
 (let (($x178 (not $x245)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x39 $x34)))
 (let (($x10 (and (not $x101) $x178)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x305 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x305 $x357)))
 (let (($x342 (not $x6)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (and $x128 $x98)))
 (let (($x57 (and (not $x330) $x342)))
 (let (($x69 (and (and (and (and (and (and $x57 $x10) $x340) $x269) $x171) $x125) $x26)))
 (let (($x70 (and $x69 $x281)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x213 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x213)))
 (let (($x361 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x213)))
 (let (($x294 (or false (or false (and (and true (or $x44 $x361)) (or $x192 $x300))))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x294)))
 (let (($x179 (and $x222 $x70)))
 (let (($x287 (= $x179 true)))
 (let (($x78 (= $x287 true)))
 (let (($x313 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x146 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x291 (and $x146 $x313)))
 (let (($x12 (= $x291 true)))
 (let (($x365 (= $x12 true)))
 (let ((?x236 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x64 (= (_ bv0 2) ?x236)))
 (let (($x233 (= $x64 true)))
 (let (($x353 (= ?x284 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x220 (= $x353 true)))
 (let (($x65 (and $x220 $x233)))
 (let (($x53 (and $x65 $x365)))
 (let (($x366 (and $x53 $x78)))
 (let (($x139 (and $x366 $x41)))
 (let (($x91 (and $x139 $x83)))
 (let (($x412 (and $x91 $x411)))
 (let (($x322 (and $x412 $x280)))
 (let (($x135 (and $x322 $x259)))
 (let (($x105 (and $x135 $x238)))
 (let (($x175 (and $x105 $x272)))
 (let (($x108 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x282 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (=> $x367 (= ?x282 ?x371))))))))
 ))
 (let (($x159 (forall ((Lambda5 (_ BitVec 32)) )(let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x49 (_ bv1 32))))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x343 (_ bv1 32))))
 (= $x367 $x131))))))))
 ))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let (($x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x49 (_ bv0 32))))
 (let (($x197 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x343 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x343 (_ bv0 32))))
 (= $x68 $x194))))))))
 ))
 (let (($x45 (and $x107 $x246)))
 (let (($x324 (and $x45 $x159)))
 (let (($x297 (and $x324 $x108)))
 (let (($x303 (and $x297 $x175)))
 (let (($x150 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (=> $x404 (= ?x8 ?x181))))))))
 ))
 (let (($x71 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x42 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x404 (bvuge ?x355 (_ bv1 32))))
 (= $x404 (bvuge ?x42 (_ bv1 32)))))))))
 ))
 (let (($x398 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x42 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x355 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x355 (_ bv0 32))))
 (= $x396 (= ?x42 (_ bv0 32)))))))))
 ))
 (let (($x122 (and $x398 $x231)))
 (let (($x169 (and $x122 $x71)))
 (let (($x160 (and $x169 $x150)))
 (let (($x270 (and $x160 $x303)))
 (let (($x315 (=> $x270 $x211)))
 (not $x315))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xfefa8717)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x12ce7b74)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb34e7f30)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000003a)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfefa8717)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb34e7f33)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x12ce7b77)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb34e7f30)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x12ce7b74)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xfefa8717)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000003a))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000003a) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfefa8800) #x10
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003a) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000003a) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003a) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003a) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003a) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000906b0)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00a02010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc08415a4)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00a02010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc08415a7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000906b3)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc08415a4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000906b0)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00a02010)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x08
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x08
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x417 (= false true)))
 (let (($x415 (= $x417 true)))
 (let ((?x29 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x29)))
 (let ((?x253 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x334 (= (_ bv0 32) ?x253)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x392 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x393 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x392)))
 (let (($x391 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x391 $x393)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x368 $x124)))
 (let (($x386 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x387 (and $x251 $x95)))
 (let (($x390 (not $x387)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x58 $x82)))
 (let (($x14 (and (not $x163) $x390)))
 (let (($x308 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x299 $x308)))
 (let (($x93 (not $x177)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x202 $x129)))
 (let (($x154 (and (not $x142) $x93)))
 (let (($x17 (and (and (and (and (and (and $x154 $x14) $x356) $x386) $x216) $x55) $x334)))
 (let (($x285 (and $x17 $x277)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x158 (or false (or false (and (and true (or $x215 $x242)) (or $x36 $x230))))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x102 (and $x172 $x285)))
 (let (($x335 (= $x102 true)))
 (let (($x278 (= $x335 true)))
 (let (($x133 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x140 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x96 (and $x140 $x133)))
 (let (($x237 (= $x96 true)))
 (let (($x243 (= $x237 true)))
 (let (($x401 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x384 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x383))))
 (let ((?x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x236 (_ bv1 32))))
 (=> $x53 (= ?x25 ?x46)))))))))))
 ))
 (let (($x80 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x342 (_ bv1 32))))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x236 (_ bv1 32))))
 (= $x53 $x381)))))))
 ))
 (let (($x186 (forall ((Lambda5 (_ BitVec 32)) )(let (($x181 (= false false)))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x236 (_ bv0 32))))
 (=> $x64 $x181))))))
 ))
 (let (($x250 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x342 (_ bv0 32))))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x236 (_ bv0 32))))
 (= $x64 $x57)))))))
 ))
 (let (($x289 (and $x250 $x186)))
 (let (($x90 (and $x289 $x80)))
 (let (($x290 (and $x90 $x401)))
 (let (($x394 (= $x290 true)))
 (let (($x244 (= $x394 true)))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x209 input.dst.llvm-%m2)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x144))))
 (let ((?x246 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (=> $x49 (= ?x246 ?x33)))))))))))
 ))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x342 (_ bv1 32))))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (= $x49 $x381)))))))
 ))
 (let (($x150 (forall ((Lambda5 (_ BitVec 32)) )(let (($x181 (= false false)))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x419 (_ bv0 32))))
 (=> $x71 $x181))))))
 ))
 (let (($x34 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x342 (_ bv0 32))))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x419 (_ bv0 32))))
 (= $x71 $x57)))))))
 ))
 (let (($x101 (and $x34 $x150)))
 (let (($x10 (and $x101 $x178)))
 (let (($x264 (and $x10 $x309)))
 (let (($x211 (= $x264 true)))
 (let (($x315 (= $x211 true)))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x384 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x383))))
 (let ((?x44 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (=> $x115 (= ?x44 ?x46)))))))))))
 ))
 (let (($x411 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x342 (_ bv1 32))))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (= $x115 $x381)))))))
 ))
 (let (($x372 (forall ((Lambda5 (_ BitVec 32)) )(let (($x181 (= false false)))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x233 (_ bv0 32))))
 (=> $x65 $x181))))))
 ))
 (let (($x307 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x342 (_ bv0 32))))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x233 (_ bv0 32))))
 (= $x65 $x57)))))))
 ))
 (let (($x31 (and $x307 $x372)))
 (let (($x412 (and $x31 $x411)))
 (let (($x238 (and $x412 $x27)))
 (let (($x105 (= $x238 true)))
 (let (($x283 (= $x105 true)))
 (let ((?x298 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x377 (= (_ bv0 2) ?x298)))
 (let (($x16 (= $x377 true)))
 (let (($x338 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x384 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x384))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv2 32))) ?x88)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv3 32))) ?x262)))
 (let ((?x44 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (=> $x115 (= ?x44 ?x94))))))))))))
 ))
 (let (($x232 (and $x412 $x338)))
 (let (($x110 (= $x232 true)))
 (let (($x288 (= $x110 true)))
 (let ((?x311 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x170 (bvneg ?x311)))
 (let (($x316 (= ?x170 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x408 (= $x316 true)))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x384 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x384))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv2 32))) ?x88)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv3 32))) ?x262)))
 (let ((?x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x236 (_ bv1 32))))
 (=> $x53 (= ?x25 ?x94))))))))))))
 ))
 (let (($x156 (and $x90 $x85)))
 (let (($x83 (= $x156 true)))
 (let (($x91 (= $x83 true)))
 (let (($x195 (= ?x170 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x241 (= $x195 true)))
 (let (($x130 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x209 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x78)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x24)))
 (let ((?x246 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (=> $x49 (= ?x246 ?x79))))))))))))
 ))
 (let (($x258 (and $x10 $x130)))
 (let (($x274 (= $x258 true)))
 (let (($x363 (= $x274 true)))
 (let (($x302 (and $x363 $x241)))
 (let (($x15 (and $x302 $x91)))
 (let (($x409 (and $x15 $x408)))
 (let (($x152 (and $x409 $x288)))
 (let (($x280 (and $x152 $x16)))
 (let (($x141 (and $x280 $x283)))
 (let (($x176 (and $x141 $x315)))
 (let (($x136 (and $x176 $x244)))
 (let (($x167 (and $x136 $x243)))
 (let (($x406 (and $x167 $x278)))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x44 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (=> $x115 (= ?x44 ?x25))))))))
 ))
 (let (($x60 (forall ((Lambda5 (_ BitVec 32)) )(let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x236 (_ bv1 32))))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (= $x115 $x53))))))))
 ))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x236 (_ bv0 32))))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x233 (_ bv0 32))))
 (= $x65 $x64))))))))
 ))
 (let (($x313 (and $x234 $x372)))
 (let (($x339 (and $x313 $x60)))
 (let (($x267 (and $x339 $x273)))
 (let (($x325 (and $x267 $x406)))
 (let (($x5 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x131 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x246 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (=> $x49 (= ?x246 ?x131))))))))
 ))
 (let (($x188 (forall ((Lambda5 (_ BitVec 32)) )(let (($x398 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x404 (ite $x398 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (= $x49 (bvuge ?x404 (_ bv1 32)))))))))
 ))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let (($x398 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x404 (ite $x398 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x419 (_ bv0 32))))
 (= $x71 (= ?x404 (_ bv0 32)))))))))
 ))
 (let (($x160 (and $x8 $x150)))
 (let (($x107 (and $x160 $x188)))
 (let (($x165 (and $x107 $x5)))
 (let (($x420 (and $x165 $x325)))
 (let (($x414 (=> $x420 $x415)))
 (not $x414))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x417 (= false true)))
 (let (($x415 (= $x417 true)))
 (let ((?x29 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x29)))
 (let ((?x253 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x334 (= (_ bv0 32) ?x253)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x392 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x393 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x392)))
 (let (($x391 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x391 $x393)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x368 $x124)))
 (let (($x386 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x387 (and $x251 $x95)))
 (let (($x390 (not $x387)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x58 $x82)))
 (let (($x14 (and (not $x163) $x390)))
 (let (($x308 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x299 $x308)))
 (let (($x93 (not $x177)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x202 $x129)))
 (let (($x154 (and (not $x142) $x93)))
 (let (($x17 (and (and (and (and (and (and $x154 $x14) $x356) $x386) $x216) $x55) $x334)))
 (let (($x285 (and $x17 $x277)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x158 (or false (or false (and (and true (or $x215 $x242)) (or $x36 $x230))))))
 (let (($x172 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x102 (and $x172 $x285)))
 (let (($x335 (= $x102 true)))
 (let (($x278 (= $x335 true)))
 (let (($x133 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x140 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x96 (and $x140 $x133)))
 (let (($x237 (= $x96 true)))
 (let (($x243 (= $x237 true)))
 (let (($x401 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x384 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x383))))
 (let ((?x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x236 (_ bv1 32))))
 (=> $x53 (= ?x25 ?x46)))))))))))
 ))
 (let (($x80 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x342 (_ bv1 32))))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x236 (_ bv1 32))))
 (= $x53 $x381)))))))
 ))
 (let (($x186 (forall ((Lambda5 (_ BitVec 32)) )(let (($x181 (= false false)))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x236 (_ bv0 32))))
 (=> $x64 $x181))))))
 ))
 (let (($x250 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x342 (_ bv0 32))))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x236 (_ bv0 32))))
 (= $x64 $x57)))))))
 ))
 (let (($x289 (and $x250 $x186)))
 (let (($x90 (and $x289 $x80)))
 (let (($x290 (and $x90 $x401)))
 (let (($x394 (= $x290 true)))
 (let (($x244 (= $x394 true)))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x209 input.dst.llvm-%m2)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x144))))
 (let ((?x246 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (=> $x49 (= ?x246 ?x33)))))))))))
 ))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x342 (_ bv1 32))))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (= $x49 $x381)))))))
 ))
 (let (($x150 (forall ((Lambda5 (_ BitVec 32)) )(let (($x181 (= false false)))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x419 (_ bv0 32))))
 (=> $x71 $x181))))))
 ))
 (let (($x34 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x342 (_ bv0 32))))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x419 (_ bv0 32))))
 (= $x71 $x57)))))))
 ))
 (let (($x101 (and $x34 $x150)))
 (let (($x10 (and $x101 $x178)))
 (let (($x264 (and $x10 $x309)))
 (let (($x211 (= $x264 true)))
 (let (($x315 (= $x211 true)))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x384 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x383))))
 (let ((?x44 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (=> $x115 (= ?x44 ?x46)))))))))))
 ))
 (let (($x411 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x342 (_ bv1 32))))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (= $x115 $x381)))))))
 ))
 (let (($x372 (forall ((Lambda5 (_ BitVec 32)) )(let (($x181 (= false false)))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x233 (_ bv0 32))))
 (=> $x65 $x181))))))
 ))
 (let (($x307 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x342 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x342 (_ bv0 32))))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x233 (_ bv0 32))))
 (= $x65 $x57)))))))
 ))
 (let (($x31 (and $x307 $x372)))
 (let (($x412 (and $x31 $x411)))
 (let (($x238 (and $x412 $x27)))
 (let (($x105 (= $x238 true)))
 (let (($x283 (= $x105 true)))
 (let ((?x298 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x377 (= (_ bv0 2) ?x298)))
 (let (($x16 (= $x377 true)))
 (let (($x338 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x384 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x384))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv2 32))) ?x88)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv3 32))) ?x262)))
 (let ((?x44 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (=> $x115 (= ?x44 ?x94))))))))))))
 ))
 (let (($x232 (and $x412 $x338)))
 (let (($x110 (= $x232 true)))
 (let (($x288 (= $x110 true)))
 (let ((?x311 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x170 (bvneg ?x311)))
 (let (($x316 (= ?x170 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x408 (= $x316 true)))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x384 (bvadd ?x209 input.dst.llvm-%m1)))
 (let ((?x88 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x384))))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv2 32))) ?x88)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x384 (_ bv3 32))) ?x262)))
 (let ((?x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x236 (_ bv1 32))))
 (=> $x53 (= ?x25 ?x94))))))))))))
 ))
 (let (($x156 (and $x90 $x85)))
 (let (($x83 (= $x156 true)))
 (let (($x91 (= $x83 true)))
 (let (($x195 (= ?x170 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x241 (= $x195 true)))
 (let (($x130 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x209 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x281 (bvadd ?x209 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x78)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x24)))
 (let ((?x246 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (=> $x49 (= ?x246 ?x79))))))))))))
 ))
 (let (($x258 (and $x10 $x130)))
 (let (($x274 (= $x258 true)))
 (let (($x363 (= $x274 true)))
 (let (($x302 (and $x363 $x241)))
 (let (($x15 (and $x302 $x91)))
 (let (($x409 (and $x15 $x408)))
 (let (($x152 (and $x409 $x288)))
 (let (($x280 (and $x152 $x16)))
 (let (($x141 (and $x280 $x283)))
 (let (($x176 (and $x141 $x315)))
 (let (($x136 (and $x176 $x244)))
 (let (($x167 (and $x136 $x243)))
 (let (($x406 (and $x167 $x278)))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x44 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (=> $x115 (= ?x44 ?x25))))))))
 ))
 (let (($x60 (forall ((Lambda5 (_ BitVec 32)) )(let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x236 (_ bv1 32))))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (bvuge ?x233 (_ bv1 32))))
 (= $x115 $x53))))))))
 ))
 (let (($x234 (forall ((Lambda5 (_ BitVec 32)) )(let (($x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x236 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x236 (_ bv0 32))))
 (let (($x297 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x233 (ite $x297 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x233 (_ bv0 32))))
 (= $x65 $x64))))))))
 ))
 (let (($x313 (and $x234 $x372)))
 (let (($x339 (and $x313 $x60)))
 (let (($x267 (and $x339 $x273)))
 (let (($x325 (and $x267 $x406)))
 (let (($x5 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x131 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x246 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (=> $x49 (= ?x246 ?x131))))))))
 ))
 (let (($x188 (forall ((Lambda5 (_ BitVec 32)) )(let (($x398 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x404 (ite $x398 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x419 (_ bv1 32))))
 (= $x49 (bvuge ?x404 (_ bv1 32)))))))))
 ))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let (($x398 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x404 (ite $x398 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x419 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x419 (_ bv0 32))))
 (= $x71 (= ?x404 (_ bv0 32)))))))))
 ))
 (let (($x160 (and $x8 $x150)))
 (let (($x107 (and $x160 $x188)))
 (let (($x165 (and $x107 $x5)))
 (let (($x420 (and $x165 $x325)))
 (let (($x414 (=> $x420 $x415)))
 (not $x414))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbe593f8c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x79a39728)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x79a3972b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbe593f8f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x79a39728)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbe593f8c)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000300)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000303)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000300)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x314 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_3 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x350 (bvadd ?x82 ?x314)))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x350 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x350))))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x350 (_ bv2 32))) ?x373)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x350 (_ bv3 32))) ?x214)))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (=> $x236 (= ?x372 ?x51)))))))))))))
 ))
 (let (($x19 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x295 (_ bv1 32))))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (= $x236 $x242)))))))
 ))
 (let (($x5 (forall ((Lambda5 (_ BitVec 32)) )(let (($x131 (= false false)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x194 (_ bv0 32))))
 (=> $x188 $x131))))))
 ))
 (let (($x123 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x295 (_ bv0 32))))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x194 (_ bv0 32))))
 (= $x188 $x187)))))))
 ))
 (let (($x38 (and $x123 $x5)))
 (let (($x345 (and $x38 $x19)))
 (let (($x137 (and $x345 $x147)))
 (let (($x20 (= $x137 true)))
 (let (($x256 (= $x20 true)))
 (let ((?x270 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x175 (= (_ bv0 2) ?x270)))
 (let (($x272 (= $x175 true)))
 (let (($x207 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x82 input.dst.llvm-%m1)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x321))))
 (let ((?x257 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x381 (_ bv1 32))))
 (=> $x366 (= ?x257 ?x35)))))))))))
 ))
 (let (($x29 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x295 (_ bv1 32))))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x381 (_ bv1 32))))
 (= $x366 $x242)))))))
 ))
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let (($x131 (= false false)))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (=> $x245 $x131))))))
 ))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x295 (_ bv0 32))))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (= $x245 $x187)))))))
 ))
 (let (($x253 (and $x132 $x265)))
 (let (($x277 (and $x253 $x29)))
 (let (($x151 (and $x277 $x207)))
 (let (($x119 (= $x151 true)))
 (let (($x97 (= $x119 true)))
 (let (($x28 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x163 (bvadd ?x82 input.dst.llvm-%m2)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x41))))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (=> $x236 (= ?x372 ?x104)))))))))))
 ))
 (let (($x405 (and $x345 $x28)))
 (let (($x407 (= $x405 true)))
 (let (($x413 (= $x407 true)))
 (let (($x87 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x82 input.dst.llvm-%m1)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x321))))
 (let ((?x24 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (=> $x9 (= ?x24 ?x35)))))))))))
 ))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x295 (_ bv1 32))))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (= $x9 $x242)))))))
 ))
 (let (($x281 (forall ((Lambda5 (_ BitVec 32)) )(let (($x131 (= false false)))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x178 (_ bv0 32))))
 (=> $x10 $x131))))))
 ))
 (let (($x324 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x295 (_ bv0 32))))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x178 (_ bv0 32))))
 (= $x10 $x187)))))))
 ))
 (let (($x72 (and $x324 $x281)))
 (let (($x108 (and $x72 $x227)))
 (let (($x166 (and $x108 $x87)))
 (let (($x271 (= $x166 true)))
 (let (($x11 (= $x271 true)))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x82 input.dst.llvm-%m1)))
 (let ((?x402 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x340))))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv2 32))) ?x402)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv3 32))) ?x42)))
 (let ((?x24 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (=> $x9 (= ?x24 ?x329))))))))))))
 ))
 (let (($x378 (and $x108 $x205)))
 (let (($x301 (= $x378 true)))
 (let (($x291 (= $x301 true)))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x82 input.dst.llvm-%m1)))
 (let ((?x402 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x340))))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv2 32))) ?x402)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv3 32))) ?x42)))
 (let ((?x257 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x381 (_ bv1 32))))
 (=> $x366 (= ?x257 ?x329))))))))))))
 ))
 (let (($x197 (and $x277 $x37)))
 (let (($x343 (= $x197 true)))
 (let (($x68 (= $x343 true)))
 (let (($x255 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x163 (bvadd ?x82 input.dst.llvm-%m2)))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x163))))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv2 32))) ?x387)))
 (let ((?x341 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv3 32))) ?x333)))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (=> $x236 (= ?x372 ?x341))))))))))))
 ))
 (let (($x368 (and $x345 $x255)))
 (let (($x391 (= $x368 true)))
 (let (($x392 (= $x391 true)))
 (let (($x208 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x315 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x401 (and $x315 $x208)))
 (let (($x290 (= $x401 true)))
 (let (($x394 (= $x290 true)))
 (let ((?x238 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x105 (= (_ bv0 32) ?x238)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x27 (= (_ bv0 32) ?x198)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x349 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x349)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x383 (and $x201 $x155)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x322 $x383)))
 (let (($x280 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x377 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x338 $x232)))
 (let (($x288 (not $x110)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x412 $x206)))
 (let (($x106 (and (not $x306) $x288)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x409 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (and $x409 $x379)))
 (let (($x31 (not $x307)))
 (let (($x384 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x408 (and $x149 $x384)))
 (let (($x411 (and (not $x408) $x31)))
 (let (($x312 (and (and (and (and (and (and $x411 $x106) $x377) $x280) $x135) $x174) $x27)))
 (let (($x144 (and $x312 $x105)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x15 (or false (or false (and (and true (or $x254 $x185)) (or $x138 $x85))))))
 (let (($x316 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x193 (and $x316 $x144)))
 (let (($x33 (= $x193 true)))
 (let (($x100 (= $x33 true)))
 (let ((?x195 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x241 (bvneg ?x195)))
 (let (($x186 (= ?x241 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x289 (= $x186 true)))
 (let (($x126 (= ?x241 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x250 (= $x126 true)))
 (let (($x224 (and $x250 $x289)))
 (let (($x240 (and $x224 $x100)))
 (let (($x244 (and $x240 $x394)))
 (let (($x393 (and $x244 $x392)))
 (let (($x380 (and $x393 $x68)))
 (let (($x12 (and $x380 $x291)))
 (let (($x168 (and $x12 $x11)))
 (let (($x328 (and $x168 $x413)))
 (let (($x196 (and $x328 $x97)))
 (let (($x303 (and $x196 $x272)))
 (let (($x375 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x257 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x24 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (=> $x9 (= ?x24 ?x257))))))))
 ))
 (let (($x287 (forall ((Lambda5 (_ BitVec 32)) )(let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x381 (_ bv1 32))))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (= $x9 $x366))))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x178 (_ bv0 32))))
 (= $x10 $x245))))))))
 ))
 (let (($x118 (and $x228 $x281)))
 (let (($x70 (and $x118 $x287)))
 (let (($x311 (and $x70 $x375)))
 (let (($x63 (and $x311 $x303)))
 (let (($x148 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (=> $x236 (= ?x372 ?x53))))))))
 ))
 (let (($x358 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (= $x236 (bvuge ?x49 (_ bv1 32)))))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x194 (_ bv0 32))))
 (= $x188 (= ?x49 (_ bv0 32)))))))))
 ))
 (let (($x165 (and $x246 $x5)))
 (let (($x234 (and $x165 $x358)))
 (let (($x300 (and $x234 $x148)))
 (let (($x86 (and $x300 $x63)))
 (let (($x61 (=> $x86 $x256)))
 (let (($x67 (not $x61)))
 (let (($x239 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x331 (select solver-mem_3 memmask-bounded-var!)))
 (let (($x225 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x352 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x354 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x103 (or false (or false (and (and true (or $x203 $x354)) (or $x352 $x225))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x103) (= ?x331 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x331 (_ bv0 8)))))))))))
 ))
 (and (and true $x239) $x67))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x314 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_3 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x350 (bvadd ?x82 ?x314)))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x350 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x350))))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x350 (_ bv2 32))) ?x373)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x350 (_ bv3 32))) ?x214)))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (=> $x236 (= ?x372 ?x51)))))))))))))
 ))
 (let (($x19 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x295 (_ bv1 32))))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (= $x236 $x242)))))))
 ))
 (let (($x5 (forall ((Lambda5 (_ BitVec 32)) )(let (($x131 (= false false)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x194 (_ bv0 32))))
 (=> $x188 $x131))))))
 ))
 (let (($x123 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x295 (_ bv0 32))))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x194 (_ bv0 32))))
 (= $x188 $x187)))))))
 ))
 (let (($x38 (and $x123 $x5)))
 (let (($x345 (and $x38 $x19)))
 (let (($x137 (and $x345 $x147)))
 (let (($x20 (= $x137 true)))
 (let (($x256 (= $x20 true)))
 (let ((?x270 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x175 (= (_ bv0 2) ?x270)))
 (let (($x272 (= $x175 true)))
 (let (($x207 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x82 input.dst.llvm-%m1)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x321))))
 (let ((?x257 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x381 (_ bv1 32))))
 (=> $x366 (= ?x257 ?x35)))))))))))
 ))
 (let (($x29 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x295 (_ bv1 32))))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x381 (_ bv1 32))))
 (= $x366 $x242)))))))
 ))
 (let (($x265 (forall ((Lambda5 (_ BitVec 32)) )(let (($x131 (= false false)))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (=> $x245 $x131))))))
 ))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x295 (_ bv0 32))))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (= $x245 $x187)))))))
 ))
 (let (($x253 (and $x132 $x265)))
 (let (($x277 (and $x253 $x29)))
 (let (($x151 (and $x277 $x207)))
 (let (($x119 (= $x151 true)))
 (let (($x97 (= $x119 true)))
 (let (($x28 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x163 (bvadd ?x82 input.dst.llvm-%m2)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x41))))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (=> $x236 (= ?x372 ?x104)))))))))))
 ))
 (let (($x405 (and $x345 $x28)))
 (let (($x407 (= $x405 true)))
 (let (($x413 (= $x407 true)))
 (let (($x87 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x82 input.dst.llvm-%m1)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x321))))
 (let ((?x24 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (=> $x9 (= ?x24 ?x35)))))))))))
 ))
 (let (($x227 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x295 (_ bv1 32))))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (= $x9 $x242)))))))
 ))
 (let (($x281 (forall ((Lambda5 (_ BitVec 32)) )(let (($x131 (= false false)))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x178 (_ bv0 32))))
 (=> $x10 $x131))))))
 ))
 (let (($x324 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x295 (_ bv0 32))))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x178 (_ bv0 32))))
 (= $x10 $x187)))))))
 ))
 (let (($x72 (and $x324 $x281)))
 (let (($x108 (and $x72 $x227)))
 (let (($x166 (and $x108 $x87)))
 (let (($x271 (= $x166 true)))
 (let (($x11 (= $x271 true)))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x82 input.dst.llvm-%m1)))
 (let ((?x402 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x340))))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv2 32))) ?x402)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv3 32))) ?x42)))
 (let ((?x24 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (=> $x9 (= ?x24 ?x329))))))))))))
 ))
 (let (($x378 (and $x108 $x205)))
 (let (($x301 (= $x378 true)))
 (let (($x291 (= $x301 true)))
 (let (($x37 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x340 (bvadd ?x82 input.dst.llvm-%m1)))
 (let ((?x402 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x340))))
 (let ((?x42 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv2 32))) ?x402)))
 (let ((?x329 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x340 (_ bv3 32))) ?x42)))
 (let ((?x257 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x381 (_ bv1 32))))
 (=> $x366 (= ?x257 ?x329))))))))))))
 ))
 (let (($x197 (and $x277 $x37)))
 (let (($x343 (= $x197 true)))
 (let (($x68 (= $x343 true)))
 (let (($x255 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x82 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x163 (bvadd ?x82 input.dst.llvm-%m2)))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x163))))
 (let ((?x333 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv2 32))) ?x387)))
 (let ((?x341 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv3 32))) ?x333)))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (=> $x236 (= ?x372 ?x341))))))))))))
 ))
 (let (($x368 (and $x345 $x255)))
 (let (($x391 (= $x368 true)))
 (let (($x392 (= $x391 true)))
 (let (($x208 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x315 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x401 (and $x315 $x208)))
 (let (($x290 (= $x401 true)))
 (let (($x394 (= $x290 true)))
 (let ((?x238 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x105 (= (_ bv0 32) ?x238)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x27 (= (_ bv0 32) ?x198)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x349 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x349)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x383 (and $x201 $x155)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x322 $x383)))
 (let (($x280 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x377 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x338 $x232)))
 (let (($x288 (not $x110)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x412 $x206)))
 (let (($x106 (and (not $x306) $x288)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x409 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (and $x409 $x379)))
 (let (($x31 (not $x307)))
 (let (($x384 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x408 (and $x149 $x384)))
 (let (($x411 (and (not $x408) $x31)))
 (let (($x312 (and (and (and (and (and (and $x411 $x106) $x377) $x280) $x135) $x174) $x27)))
 (let (($x144 (and $x312 $x105)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x15 (or false (or false (and (and true (or $x254 $x185)) (or $x138 $x85))))))
 (let (($x316 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x193 (and $x316 $x144)))
 (let (($x33 (= $x193 true)))
 (let (($x100 (= $x33 true)))
 (let ((?x195 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x241 (bvneg ?x195)))
 (let (($x186 (= ?x241 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x289 (= $x186 true)))
 (let (($x126 (= ?x241 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x250 (= $x126 true)))
 (let (($x224 (and $x250 $x289)))
 (let (($x240 (and $x224 $x100)))
 (let (($x244 (and $x240 $x394)))
 (let (($x393 (and $x244 $x392)))
 (let (($x380 (and $x393 $x68)))
 (let (($x12 (and $x380 $x291)))
 (let (($x168 (and $x12 $x11)))
 (let (($x328 (and $x168 $x413)))
 (let (($x196 (and $x328 $x97)))
 (let (($x303 (and $x196 $x272)))
 (let (($x375 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x257 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x24 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (=> $x9 (= ?x24 ?x257))))))))
 ))
 (let (($x287 (forall ((Lambda5 (_ BitVec 32)) )(let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x381 (_ bv1 32))))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x178 (_ bv1 32))))
 (= $x9 $x366))))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let (($x342 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x381 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (let (($x267 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x178 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (= ?x178 (_ bv0 32))))
 (= $x10 $x245))))))))
 ))
 (let (($x118 (and $x228 $x281)))
 (let (($x70 (and $x118 $x287)))
 (let (($x311 (and $x70 $x375)))
 (let (($x63 (and $x311 $x303)))
 (let (($x148 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (=> $x236 (= ?x372 ?x53))))))))
 ))
 (let (($x358 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x194 (_ bv1 32))))
 (= $x236 (bvuge ?x49 (_ bv1 32)))))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x49 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x194 (ite $x190 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (= ?x194 (_ bv0 32))))
 (= $x188 (= ?x49 (_ bv0 32)))))))))
 ))
 (let (($x165 (and $x246 $x5)))
 (let (($x234 (and $x165 $x358)))
 (let (($x300 (and $x234 $x148)))
 (let (($x86 (and $x300 $x63)))
 (let (($x61 (=> $x86 $x256)))
 (let (($x67 (not $x61)))
 (let (($x239 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x331 (select solver-mem_3 memmask-bounded-var!)))
 (let (($x225 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x352 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x354 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x103 (or false (or false (and (and true (or $x203 $x354)) (or $x352 $x225))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x103) (= ?x331 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x331 (_ bv0 8)))))))))))
 ))
 (and (and true $x239) $x67))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000004)
  (define-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!171))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!173))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000c0000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!171))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8a008000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x0001557c)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!172))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x0c880000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8a008003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000c0003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8a008000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000c0000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!175 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000004)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1!178 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000002) (= x!0 #x00000004)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!178 (k!175 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!176 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000010 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000010)
                    #x00000004)))
    (let ((a!2 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x00000004 x!0) a!1 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!2 #x00000000))))
  (define-fun k!171!180 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0c88000c) #x00
    (ite (= x!0 #x40020004) #x08
    (ite (= x!0 #x0c880000) #x00
    (ite (= x!0 #x0c880009) #x00
    (ite (= x!0 #x0c88000b) #x20
    (ite (= x!0 #x0c88000a) #x40
    (ite (= x!0 #x0c880008) #x00
    (ite (= x!0 #x0c880012) #x20
    (ite (= x!0 #x000c0004) #x02
    (ite (= x!0 #x0c88000e) #x40
    (ite (= x!0 #x0001558d) #x00
    (ite (= x!0 #x8a008000) #x00
    (ite (= x!0 #x0c880002) #x40
    (ite (= x!0 #x0c880041) #x00
    (ite (= x!0 #x0c880004) #x00
    (ite (= x!0 #x0c880043) #x00
    (ite (= x!0 #x0c880003) #x02
    (ite (= x!0 #x0c880001) #x00
    (ite (= x!0 #x0c880040) #x00
    (ite (= x!0 #x00015586) #x00
    (ite (= x!0 #x0c880013) #x00
    (ite (= x!0 #x0c880006) #x04
    (ite (= x!0 #x0c88000f) #x00
    (ite (= x!0 #x00015584) #x00
    (ite (= x!0 #x0001558f) #x00
    (ite (= x!0 #x0c880007) #x00
    (ite (= x!0 #x00015585) #x00
    (ite (= x!0 #x0001558e) #x04
    (ite (= x!0 #x000c0000) #x00
    (ite (= x!0 #x8a008001) #x00
    (ite (= x!0 #x00704023) #x00
    (ite (= x!0 #x000c0001) #x00
    (ite (= x!0 #x0c880010) #x00
    (ite (= x!0 #x0001558c) #x00
    (ite (= x!0 #x0c880005) #x20
    (ite (= x!0 #x8a008004) #x00
    (ite (= x!0 #x8a008003) #x00
    (ite (= x!0 #x00704024) #x00
    (ite (= x!0 #x00015587) #x00
    (ite (= x!0 #x0c880011) #x00
    (ite (= x!0 #x0c88000d) #x04
    (ite (= x!0 #x00704022) #x00
    (ite (= x!0 #x000c0003) #x00
    (ite (= x!0 #x00704025) #x00
    (ite (= x!0 #x0c880042) #x00
      #x03))))))))))))))))))))))))))))))))))))))))))))))
  (define-fun k!174 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x8a008001 x!0)
                    (ite (bvule #x8a008003 x!0)
                         (ite (bvule #x8a008004 x!0) #x8a008004 #x8a008003)
                         #x8a008001)
                    #x8a008000)))
    (let ((a!2 (ite (bvule #x0c880043 x!0)
                    (ite (bvule #x40020004 x!0)
                         (ite (bvule #x8a008000 x!0) a!1 #x40020004)
                         #x0c880043)
                    #x0c880042)))
    (let ((a!3 (ite (bvule #x0c880040 x!0)
                    (ite (bvule #x0c880041 x!0)
                         (ite (bvule #x0c880042 x!0) a!2 #x0c880041)
                         #x0c880040)
                    #x0c880013)))
    (let ((a!4 (ite (bvule #x0c880011 x!0)
                    (ite (bvule #x0c880012 x!0)
                         (ite (bvule #x0c880013 x!0) a!3 #x0c880012)
                         #x0c880011)
                    #x0c880010)))
    (let ((a!5 (ite (bvule #x0c88000e x!0)
                    (ite (bvule #x0c88000f x!0)
                         (ite (bvule #x0c880010 x!0) a!4 #x0c88000f)
                         #x0c88000e)
                    #x0c88000d)))
    (let ((a!6 (ite (bvule #x0c88000b x!0)
                    (ite (bvule #x0c88000c x!0)
                         (ite (bvule #x0c88000d x!0) a!5 #x0c88000c)
                         #x0c88000b)
                    #x0c88000a)))
    (let ((a!7 (ite (bvule #x0c880008 x!0)
                    (ite (bvule #x0c880009 x!0)
                         (ite (bvule #x0c88000a x!0) a!6 #x0c880009)
                         #x0c880008)
                    #x0c880007)))
    (let ((a!8 (ite (bvule #x0c880005 x!0)
                    (ite (bvule #x0c880006 x!0)
                         (ite (bvule #x0c880007 x!0) a!7 #x0c880006)
                         #x0c880005)
                    #x0c880004)))
    (let ((a!9 (ite (bvule #x0c880002 x!0)
                    (ite (bvule #x0c880003 x!0)
                         (ite (bvule #x0c880004 x!0) a!8 #x0c880003)
                         #x0c880002)
                    #x0c880001)))
    (let ((a!10 (ite (bvule #x00704025 x!0)
                     (ite (bvule #x0c880000 x!0)
                          (ite (bvule #x0c880001 x!0) a!9 #x0c880000)
                          #x00704025)
                     #x00704024)))
    (let ((a!11 (ite (bvule #x00704022 x!0)
                     (ite (bvule #x00704023 x!0)
                          (ite (bvule #x00704024 x!0) a!10 #x00704023)
                          #x00704022)
                     #x000c0004)))
    (let ((a!12 (ite (bvule #x000c0001 x!0)
                     (ite (bvule #x000c0003 x!0)
                          (ite (bvule #x000c0004 x!0) a!11 #x000c0003)
                          #x000c0001)
                     #x000c0000)))
    (let ((a!13 (ite (bvule #x0001558e x!0)
                     (ite (bvule #x0001558f x!0)
                          (ite (bvule #x000c0000 x!0) a!12 #x0001558f)
                          #x0001558e)
                     #x0001558d)))
    (let ((a!14 (ite (bvule #x00015587 x!0)
                     (ite (bvule #x0001558c x!0)
                          (ite (bvule #x0001558d x!0) a!13 #x0001558c)
                          #x00015587)
                     #x00015586)))
      (ite (bvule #x00015585 x!0)
           (ite (bvule #x00015586 x!0) a!14 #x00015585)
           #x00015584))))))))))))))))
  (define-fun k!171 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!171!180 (k!174 x!0)))
  (define-fun k!173 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0c88000b) #x20
    (ite (= x!0 #x0c88000a) #x40
    (ite (= x!0 #x0c880012) #x20
    (ite (= x!0 #x0c88000e) #x40
    (ite (= x!0 #x0c880002) #x40
    (ite (= x!0 #x0c880003) #x02
    (ite (= x!0 #x0c880006) #x04
    (ite (= x!0 #x0001558e) #x04
    (ite (= x!0 #x0c880005) #x20
    (ite (= x!0 #x0c88000d) #x04
      #x00)))))))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00040000
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!173 (bvadd #x0001557f (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0001557e (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0001557d (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0001557c (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!171 (bvadd #x0001557f (bvmul #x00000004 x!0)))
                         (k!171 (bvadd #x0001557e (bvmul #x00000004 x!0)))
                         (k!171 (bvadd #x0001557d (bvmul #x00000004 x!0)))
                         (k!171 (bvadd #x0001557c (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!171))
              (= x!3 (_ as-array k!172))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x0001557c))
      #x00704012
      #x00000043))
  (define-fun input.spec-%var-m1-1.0.1!177 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000010)
        (= x!0 #x00000003)
        (= x!0 #x00000000)
        (= x!0 #x00000004)
        (= x!0 #x00000001)
        (= x!0 #x00000002)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!177 (k!176 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02400000
    (ite (= x!0 #x00000010) #x00000000
    (ite (= x!0 #x00000002) #x20400000
    (ite (= x!0 #x00000001) #x00042000
    (ite (= x!0 #x00000004) #x00200000
    (ite (= x!0 #x00000003) #x00400400
      (let ((a!1 (concat (k!173 (bvadd #x0c880003 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0c880002 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0c880001 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0c880000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!171 (bvadd #x0c880003 (bvmul #x00000004 x!0)))
                         (k!171 (bvadd #x0c880002 (bvmul #x00000004 x!0)))
                         (k!171 (bvadd #x0c880001 (bvmul #x00000004 x!0)))
                         (k!171 (bvadd #x0c880000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2)))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!179 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000010)
        (= x!0 #x00000003)
        (= x!0 #x00000000)
        (= x!0 #x00000004)
        (= x!0 #x00000001)
        (= x!0 #x00000002)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!179
      (k!176 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02400000
    (ite (= x!0 #x00000010) #x00000000
    (ite (= x!0 #x00000001) #x00042000
    (ite (= x!0 #x00000002) #x20400000
    (ite (= x!0 #x00000004) #x00200000
    (ite (= x!0 #x00000003) #x00400400
      (let ((a!1 (concat (k!173 (bvadd #x0c880003 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0c880002 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0c880001 (bvmul #x00000004 x!0)))
                         (k!173 (bvadd #x0c880000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00040000
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun k!172 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x0a)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x420 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x197)))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x406))))
 (let ((?x195 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (=> $x70 (= ?x195 ?x369)))))))))))
 ))
 (let (($x166 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x388 (_ bv1 32))))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (= $x70 $x216)))))))
 ))
 (let (($x35 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (= ?x10 (_ bv0 32))))
 (=> $x342 $x81))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x388 (_ bv0 32))))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (= ?x10 (_ bv0 32))))
 (= $x342 $x386)))))))
 ))
 (let (($x7 (and $x162 $x35)))
 (let (($x271 (and $x7 $x166)))
 (let (($x192 (and $x271 $x222)))
 (let (($x361 (= $x192 true)))
 (let (($x213 (= $x361 true)))
 (let ((?x143 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x76 (bvneg ?x143)))
 (let (($x177 (= ?x76 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x142 (= $x177 true)))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x407 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x62))))
 (let ((?x195 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (=> $x70 (= ?x195 ?x296)))))))))))
 ))
 (let (($x215 (and $x271 $x96)))
 (let (($x74 (= $x215 true)))
 (let (($x99 (= $x74 true)))
 (let (($x78 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x343 (bvadd ?x197 input.dst.llvm-%m2)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x39))))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (=> $x239 (= ?x8 ?x317)))))))))))
 ))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x388 (_ bv1 32))))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (= $x239 $x216)))))))
 ))
 (let (($x36 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (= ?x109 (_ bv0 32))))
 (=> $x229 $x81))))))
 ))
 (let (($x368 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x388 (_ bv0 32))))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (= ?x109 (_ bv0 32))))
 (= $x229 $x386)))))))
 ))
 (let (($x391 (and $x368 $x36)))
 (let (($x265 (and $x391 $x55)))
 (let (($x219 (and $x265 $x78)))
 (let (($x258 (= $x219 true)))
 (let (($x274 (= $x258 true)))
 (let (($x282 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x407 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x62))))
 (let ((?x311 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (=> $x24 (= ?x311 ?x296)))))))))))
 ))
 (let (($x320 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x388 (_ bv1 32))))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (= $x24 $x216)))))))
 ))
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (=> $x245 $x81))))))
 ))
 (let (($x418 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x388 (_ bv0 32))))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (= $x245 $x386)))))))
 ))
 (let (($x314 (and $x418 $x118)))
 (let (($x217 (and $x314 $x320)))
 (let (($x297 (and $x217 $x282)))
 (let (($x233 (= $x297 true)))
 (let (($x65 (= $x233 true)))
 (let (($x373 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x407 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x407))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv2 32))) ?x182)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv3 32))) ?x119)))
 (let ((?x311 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (=> $x24 (= ?x311 ?x59))))))))))))
 ))
 (let (($x214 (and $x217 $x373)))
 (let (($x51 (= $x214 true)))
 (let (($x30 (= $x51 true)))
 (let (($x272 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x407 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x407))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv2 32))) ?x182)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv3 32))) ?x119)))
 (let ((?x195 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (=> $x70 (= ?x195 ?x59))))))))))))
 ))
 (let (($x303 (and $x271 $x272)))
 (let (($x63 (= $x303 true)))
 (let (($x86 (= $x63 true)))
 (let (($x301 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x343 (bvadd ?x197 input.dst.llvm-%m2)))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x343))))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv2 32))) ?x324)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv3 32))) ?x227)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (=> $x239 (= ?x8 ?x220))))))))))))
 ))
 (let (($x291 (and $x265 $x301)))
 (let (($x12 (= $x291 true)))
 (let (($x365 (= $x12 true)))
 (let ((?x295 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x187 (= (_ bv0 32) ?x295)))
 (let ((?x237 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x167 (= (_ bv0 32) ?x237)))
 (let ((?x243 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x401 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x401)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x394 (and $x351 $x290)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x176 $x394)))
 (let (($x315 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x105 $x144)))
 (let (($x33 (not $x193)))
 (let (($x312 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x238 (and $x27 $x312)))
 (let (($x240 (and (not $x238) $x33)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x135 $x43)))
 (let (($x174 (not $x46)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (and $x412 $x206)))
 (let (($x198 (and (not $x383) $x174)))
 (let (($x19 (and (and (and (and (and (and $x198 $x240) $x264) $x315) $x244) $x263) $x167)))
 (let (($x345 (and $x19 $x187)))
 (let (($x280 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x259 (or false (or false (and (and true (or $x288 $x106)) (or $x16 $x280))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x259)))
 (let (($x230 (and $x155 $x345)))
 (let (($x82 (= $x230 true)))
 (let (($x163 (= $x82 true)))
 (let (($x408 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x149 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x410 (and $x149 $x408)))
 (let (($x409 (= $x410 true)))
 (let (($x379 (= $x409 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x85 (= (_ bv0 2) ?x138)))
 (let (($x156 (= $x85 true)))
 (let (($x254 (= ?x76 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x185 (= $x254 true)))
 (let (($x83 (and $x185 $x156)))
 (let (($x307 (and $x83 $x379)))
 (let (($x389 (and $x307 $x163)))
 (let (($x125 (and $x389 $x365)))
 (let (($x90 (and $x125 $x86)))
 (let (($x191 (and $x90 $x30)))
 (let (($x146 (and $x191 $x65)))
 (let (($x136 (and $x146 $x274)))
 (let (($x336 (and $x136 $x99)))
 (let (($x260 (and $x336 $x142)))
 (let (($x186 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x195 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x311 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (=> $x24 (= ?x311 ?x195))))))))
 ))
 (let (($x363 (forall ((Lambda5 (_ BitVec 32)) )(let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (= $x24 $x70))))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (= ?x10 (_ bv0 32))))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (= $x245 $x342))))))))
 ))
 (let (($x9 (and $x228 $x118)))
 (let (($x235 (and $x9 $x363)))
 (let (($x289 (and $x235 $x186)))
 (let (($x158 (and $x289 $x260)))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x107 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (=> $x239 (= ?x8 ?x107))))))))
 ))
 (let (($x190 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x23 (ite $x354 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (= $x239 (bvuge ?x23 (_ bv1 32)))))))))
 ))
 (let (($x103 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x23 (ite $x354 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (= ?x109 (_ bv0 32))))
 (= $x229 (= ?x23 (_ bv0 32)))))))))
 ))
 (let (($x32 (and $x103 $x36)))
 (let (($x194 (and $x32 $x190)))
 (let (($x360 (and $x194 $x236)))
 (let (($x172 (and $x360 $x158)))
 (let (($x212 (=> $x172 $x213)))
 (not $x212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x222 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x420 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x197)))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x406))))
 (let ((?x195 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (=> $x70 (= ?x195 ?x369)))))))))))
 ))
 (let (($x166 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x388 (_ bv1 32))))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (= $x70 $x216)))))))
 ))
 (let (($x35 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (= ?x10 (_ bv0 32))))
 (=> $x342 $x81))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x388 (_ bv0 32))))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (= ?x10 (_ bv0 32))))
 (= $x342 $x386)))))))
 ))
 (let (($x7 (and $x162 $x35)))
 (let (($x271 (and $x7 $x166)))
 (let (($x192 (and $x271 $x222)))
 (let (($x361 (= $x192 true)))
 (let (($x213 (= $x361 true)))
 (let ((?x143 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x76 (bvneg ?x143)))
 (let (($x177 (= ?x76 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x142 (= $x177 true)))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x407 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x62))))
 (let ((?x195 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (=> $x70 (= ?x195 ?x296)))))))))))
 ))
 (let (($x215 (and $x271 $x96)))
 (let (($x74 (= $x215 true)))
 (let (($x99 (= $x74 true)))
 (let (($x78 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x343 (bvadd ?x197 input.dst.llvm-%m2)))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x39))))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (=> $x239 (= ?x8 ?x317)))))))))))
 ))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x388 (_ bv1 32))))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (= $x239 $x216)))))))
 ))
 (let (($x36 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (= ?x109 (_ bv0 32))))
 (=> $x229 $x81))))))
 ))
 (let (($x368 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x388 (_ bv0 32))))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (= ?x109 (_ bv0 32))))
 (= $x229 $x386)))))))
 ))
 (let (($x391 (and $x368 $x36)))
 (let (($x265 (and $x391 $x55)))
 (let (($x219 (and $x265 $x78)))
 (let (($x258 (= $x219 true)))
 (let (($x274 (= $x258 true)))
 (let (($x282 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x407 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x62))))
 (let ((?x311 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (=> $x24 (= ?x311 ?x296)))))))))))
 ))
 (let (($x320 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x388 (_ bv1 32))))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (= $x24 $x216)))))))
 ))
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (=> $x245 $x81))))))
 ))
 (let (($x418 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x388 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x386 (= ?x388 (_ bv0 32))))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (= $x245 $x386)))))))
 ))
 (let (($x314 (and $x418 $x118)))
 (let (($x217 (and $x314 $x320)))
 (let (($x297 (and $x217 $x282)))
 (let (($x233 (= $x297 true)))
 (let (($x65 (= $x233 true)))
 (let (($x373 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x407 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x407))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv2 32))) ?x182)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv3 32))) ?x119)))
 (let ((?x311 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (=> $x24 (= ?x311 ?x59))))))))))))
 ))
 (let (($x214 (and $x217 $x373)))
 (let (($x51 (= $x214 true)))
 (let (($x30 (= $x51 true)))
 (let (($x272 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x407 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x407))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv2 32))) ?x182)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv3 32))) ?x119)))
 (let ((?x195 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (=> $x70 (= ?x195 ?x59))))))))))))
 ))
 (let (($x303 (and $x271 $x272)))
 (let (($x63 (= $x303 true)))
 (let (($x86 (= $x63 true)))
 (let (($x301 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x197 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x343 (bvadd ?x197 input.dst.llvm-%m2)))
 (let ((?x324 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x343))))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv2 32))) ?x324)))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv3 32))) ?x227)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (=> $x239 (= ?x8 ?x220))))))))))))
 ))
 (let (($x291 (and $x265 $x301)))
 (let (($x12 (= $x291 true)))
 (let (($x365 (= $x12 true)))
 (let ((?x295 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x187 (= (_ bv0 32) ?x295)))
 (let ((?x237 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x167 (= (_ bv0 32) ?x237)))
 (let ((?x243 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x401 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x401)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x394 (and $x351 $x290)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x176 $x394)))
 (let (($x315 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x105 $x144)))
 (let (($x33 (not $x193)))
 (let (($x312 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x238 (and $x27 $x312)))
 (let (($x240 (and (not $x238) $x33)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x135 $x43)))
 (let (($x174 (not $x46)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (and $x412 $x206)))
 (let (($x198 (and (not $x383) $x174)))
 (let (($x19 (and (and (and (and (and (and $x198 $x240) $x264) $x315) $x244) $x263) $x167)))
 (let (($x345 (and $x19 $x187)))
 (let (($x280 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x259 (or false (or false (and (and true (or $x288 $x106)) (or $x16 $x280))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x259)))
 (let (($x230 (and $x155 $x345)))
 (let (($x82 (= $x230 true)))
 (let (($x163 (= $x82 true)))
 (let (($x408 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x149 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x410 (and $x149 $x408)))
 (let (($x409 (= $x410 true)))
 (let (($x379 (= $x409 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x85 (= (_ bv0 2) ?x138)))
 (let (($x156 (= $x85 true)))
 (let (($x254 (= ?x76 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x185 (= $x254 true)))
 (let (($x83 (and $x185 $x156)))
 (let (($x307 (and $x83 $x379)))
 (let (($x389 (and $x307 $x163)))
 (let (($x125 (and $x389 $x365)))
 (let (($x90 (and $x125 $x86)))
 (let (($x191 (and $x90 $x30)))
 (let (($x146 (and $x191 $x65)))
 (let (($x136 (and $x146 $x274)))
 (let (($x336 (and $x136 $x99)))
 (let (($x260 (and $x336 $x142)))
 (let (($x186 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x195 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x311 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (=> $x24 (= ?x311 ?x195))))))))
 ))
 (let (($x363 (forall ((Lambda5 (_ BitVec 32)) )(let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x10 (_ bv1 32))))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x381 (_ bv1 32))))
 (= $x24 $x70))))))))
 ))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let (($x25 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x10 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (= ?x10 (_ bv0 32))))
 (let (($x358 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x381 (ite $x358 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x381 (_ bv0 32))))
 (= $x245 $x342))))))))
 ))
 (let (($x9 (and $x228 $x118)))
 (let (($x235 (and $x9 $x363)))
 (let (($x289 (and $x235 $x186)))
 (let (($x158 (and $x289 $x260)))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x107 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x8 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (=> $x239 (= ?x8 ?x107))))))))
 ))
 (let (($x190 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x23 (ite $x354 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (bvuge ?x109 (_ bv1 32))))
 (= $x239 (bvuge ?x23 (_ bv1 32)))))))))
 ))
 (let (($x103 (forall ((Lambda5 (_ BitVec 32)) )(let (($x354 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x23 (ite $x354 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x109 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (= ?x109 (_ bv0 32))))
 (= $x229 (= ?x23 (_ bv0 32)))))))))
 ))
 (let (($x32 (and $x103 $x36)))
 (let (($x194 (and $x32 $x190)))
 (let (($x360 (and $x194 $x236)))
 (let (($x172 (and $x360 $x158)))
 (let (($x212 (=> $x172 $x213)))
 (not $x212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000906b0)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00a02010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc08415a4)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00a02010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc08415a7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000906b3)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc08415a4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000906b0)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00a02010)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x08
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x08
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000003a)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x12ce7b74)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xfefa8717)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb34e7f30)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xfefa8717)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb34e7f33)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x12ce7b77)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb34e7f30)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x12ce7b74)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xfefa8717)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000003a))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000003a) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003a) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000003a) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfefa8800) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003a) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003a) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003a) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x266 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_4 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x137 (bvadd ?x181 ?x266)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x285))))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (=> $x379 (= ?x106 ?x48))))))))))))
 ))
 (let (($x215 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x347 (_ bv1 32))))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (= $x379 $x272)))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (=> $x138 $x8))))))
 ))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (= ?x347 (_ bv0 32))))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (= $x138 $x413)))))))
 ))
 (let (($x395 (and $x219 $x136)))
 (let (($x74 (and $x395 $x215)))
 (let (($x226 (and $x74 $x223)))
 (let (($x173 (= $x226 true)))
 (let (($x318 (= $x173 true)))
 (let ((?x405 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x80 (= (_ bv0 2) ?x405)))
 (let (($x350 (= $x80 true)))
 (let (($x139 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x269))))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (=> $x379 (= ?x106 ?x375)))))))))))
 ))
 (let (($x168 (and $x74 $x139)))
 (let (($x199 (= $x168 true)))
 (let (($x268 (= $x199 true)))
 (let (($x92 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x62 (bvadd ?x181 input.dst.llvm-%m2)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x310))))
 (let ((?x281 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (=> $x25 (= ?x281 ?x231)))))))))))
 ))
 (let (($x63 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x347 (_ bv1 32))))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (= $x25 $x272)))))))
 ))
 (let (($x165 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x346 (_ bv0 32))))
 (=> $x112 $x8))))))
 ))
 (let (($x119 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (= ?x347 (_ bv0 32))))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x346 (_ bv0 32))))
 (= $x112 $x413)))))))
 ))
 (let (($x59 (and $x119 $x165)))
 (let (($x86 (and $x59 $x63)))
 (let (($x321 (and $x86 $x92)))
 (let (($x171 (= $x321 true)))
 (let (($x11 (= $x171 true)))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x269))))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (=> $x307 (= ?x110 ?x375)))))))))))
 ))
 (let (($x127 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x347 (_ bv1 32))))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (= $x307 $x272)))))))
 ))
 (let (($x149 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x85 (_ bv0 32))))
 (=> $x156 $x8))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (= ?x347 (_ bv0 32))))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x85 (_ bv0 32))))
 (= $x156 $x413)))))))
 ))
 (let (($x71 (and $x246 $x149)))
 (let (($x359 (and $x71 $x127)))
 (let (($x356 (and $x359 $x126)))
 (let (($x390 (= $x356 true)))
 (let (($x14 (= $x390 true)))
 (let (($x218 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x278))))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv2 32))) ?x382)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv3 32))) ?x153)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (=> $x307 (= ?x110 ?x361))))))))))))
 ))
 (let (($x145 (and $x359 $x218)))
 (let (($x188 (= $x145 true)))
 (let (($x50 (= $x188 true)))
 (let (($x370 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x278))))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv2 32))) ?x382)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv3 32))) ?x153)))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (=> $x379 (= ?x106 ?x361))))))))))))
 ))
 (let (($x411 (and $x74 $x370)))
 (let (($x17 (= $x411 true)))
 (let (($x396 (= $x17 true)))
 (let (($x305 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x62 (bvadd ?x181 input.dst.llvm-%m2)))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x62))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x62 (_ bv2 32))) ?x160)))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x62 (_ bv3 32))) ?x233)))
 (let ((?x281 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (=> $x25 (= ?x281 ?x209))))))))))))
 ))
 (let (($x39 (and $x86 $x305)))
 (let (($x101 (= $x39 true)))
 (let (($x317 (= $x101 true)))
 (let (($x125 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x291 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x248 (and $x291 $x125)))
 (let (($x162 (= $x248 true)))
 (let (($x89 (= $x162 true)))
 (let ((?x197 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x343 (= (_ bv0 32) ?x197)))
 (let ((?x253 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x29 (= (_ bv0 32) ?x253)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let ((?x368 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x391 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x368)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x216 (and $x386 $x391)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x388 $x216)))
 (let (($x341 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (and $x187 $x345)))
 (let (($x82 (not $x230)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x167 $x19)))
 (let (($x389 (and (not $x295) $x82)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x244 $x242)))
 (let (($x263 (not $x243)))
 (let (($x312 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (and $x27 $x312)))
 (let (($x237 (and (not $x394) $x263)))
 (let (($x380 (and (and (and (and (and (and $x237 $x389) $x129) $x341) $x132) $x265) $x29)))
 (let (($x159 (and $x380 $x343)))
 (let (($x315 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x208 (or false (or false (and (and true (or $x33 $x240)) (or $x211 $x315))))))
 (let (($x290 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x208)))
 (let (($x68 (and $x290 $x159)))
 (let (($x324 (= $x68 true)))
 (let (($x227 (= $x324 true)))
 (let ((?x259 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x155 (bvneg ?x259)))
 (let (($x135 (= ?x155 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (= $x135 true)))
 (let (($x206 (= ?x155 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x383 (= $x206 true)))
 (let (($x46 (and $x383 $x43)))
 (let (($x220 (and $x46 $x227)))
 (let (($x35 (and $x220 $x89)))
 (let (($x249 (and $x35 $x317)))
 (let (($x327 (and $x249 $x396)))
 (let (($x131 (and $x327 $x50)))
 (let (($x251 (and $x131 $x14)))
 (let (($x104 (and $x251 $x11)))
 (let (($x114 (and $x104 $x268)))
 (let (($x73 (and $x114 $x350)))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (=> $x307 (= ?x110 ?x106))))))))
 ))
 (let (($x152 (forall ((Lambda5 (_ BitVec 32)) )(let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (= $x307 $x379))))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x85 (_ bv0 32))))
 (= $x156 $x138))))))))
 ))
 (let (($x384 (and $x91 $x149)))
 (let (($x349 (and $x384 $x152)))
 (let (($x275 (and $x349 $x280)))
 (let (($x40 (and $x275 $x73)))
 (let (($x195 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x24 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x281 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (=> $x25 (= ?x281 ?x24))))))))
 ))
 (let (($x342 (forall ((Lambda5 (_ BitVec 32)) )(let (($x121 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x32 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (= $x25 (bvuge ?x32 (_ bv1 32)))))))))
 ))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let (($x121 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x32 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x346 (_ bv0 32))))
 (= $x112 (= ?x32 (_ bv0 32)))))))))
 ))
 (let (($x236 (and $x194 $x165)))
 (let (($x221 (and $x236 $x342)))
 (let (($x250 (and $x221 $x195)))
 (let (($x293 (and $x250 $x40)))
 (let (($x157 (=> $x293 $x318)))
 (let (($x385 (not $x157)))
 (let (($x332 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x58 (select solver-mem_4 memmask-bounded-var!)))
 (let (($x202 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x414 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x325 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x66 (or false (or false (and (and true (or $x325 $x414)) (or $x56 $x202))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x66) (= ?x58 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x58 (_ bv0 8)))))))))))
 ))
 (and (and true $x332) $x385))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x266 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_4 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x137 (bvadd ?x181 ?x266)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x285))))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (=> $x379 (= ?x106 ?x48))))))))))))
 ))
 (let (($x215 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x347 (_ bv1 32))))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (= $x379 $x272)))))))
 ))
 (let (($x136 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (=> $x138 $x8))))))
 ))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (= ?x347 (_ bv0 32))))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (= $x138 $x413)))))))
 ))
 (let (($x395 (and $x219 $x136)))
 (let (($x74 (and $x395 $x215)))
 (let (($x226 (and $x74 $x223)))
 (let (($x173 (= $x226 true)))
 (let (($x318 (= $x173 true)))
 (let ((?x405 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x80 (= (_ bv0 2) ?x405)))
 (let (($x350 (= $x80 true)))
 (let (($x139 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x269))))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (=> $x379 (= ?x106 ?x375)))))))))))
 ))
 (let (($x168 (and $x74 $x139)))
 (let (($x199 (= $x168 true)))
 (let (($x268 (= $x199 true)))
 (let (($x92 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x62 (bvadd ?x181 input.dst.llvm-%m2)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x310))))
 (let ((?x281 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (=> $x25 (= ?x281 ?x231)))))))))))
 ))
 (let (($x63 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x347 (_ bv1 32))))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (= $x25 $x272)))))))
 ))
 (let (($x165 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x346 (_ bv0 32))))
 (=> $x112 $x8))))))
 ))
 (let (($x119 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (= ?x347 (_ bv0 32))))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x346 (_ bv0 32))))
 (= $x112 $x413)))))))
 ))
 (let (($x59 (and $x119 $x165)))
 (let (($x86 (and $x59 $x63)))
 (let (($x321 (and $x86 $x92)))
 (let (($x171 (= $x321 true)))
 (let (($x11 (= $x171 true)))
 (let (($x126 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem ?x278))))
 (let ((?x375 (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x278 (_ bv2 32))) ?x269))))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (=> $x307 (= ?x110 ?x375)))))))))))
 ))
 (let (($x127 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x347 (_ bv1 32))))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (= $x307 $x272)))))))
 ))
 (let (($x149 (forall ((Lambda5 (_ BitVec 32)) )(let (($x8 (= false false)))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x85 (_ bv0 32))))
 (=> $x156 $x8))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x347 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x413 (= ?x347 (_ bv0 32))))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x85 (_ bv0 32))))
 (= $x156 $x413)))))))
 ))
 (let (($x71 (and $x246 $x149)))
 (let (($x359 (and $x71 $x127)))
 (let (($x356 (and $x359 $x126)))
 (let (($x390 (= $x356 true)))
 (let (($x14 (= $x390 true)))
 (let (($x218 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x278))))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv2 32))) ?x382)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv3 32))) ?x153)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (=> $x307 (= ?x110 ?x361))))))))))))
 ))
 (let (($x145 (and $x359 $x218)))
 (let (($x188 (= $x145 true)))
 (let (($x50 (= $x188 true)))
 (let (($x370 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x278 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x382 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x278))))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv2 32))) ?x382)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x278 (_ bv3 32))) ?x153)))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (=> $x379 (= ?x106 ?x361))))))))))))
 ))
 (let (($x411 (and $x74 $x370)))
 (let (($x17 (= $x411 true)))
 (let (($x396 (= $x17 true)))
 (let (($x305 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x181 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x62 (bvadd ?x181 input.dst.llvm-%m2)))
 (let ((?x160 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x62))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x62 (_ bv2 32))) ?x160)))
 (let ((?x209 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x62 (_ bv3 32))) ?x233)))
 (let ((?x281 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (=> $x25 (= ?x281 ?x209))))))))))))
 ))
 (let (($x39 (and $x86 $x305)))
 (let (($x101 (= $x39 true)))
 (let (($x317 (= $x101 true)))
 (let (($x125 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x291 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x248 (and $x291 $x125)))
 (let (($x162 (= $x248 true)))
 (let (($x89 (= $x162 true)))
 (let ((?x197 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x343 (= (_ bv0 32) ?x197)))
 (let ((?x253 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x29 (= (_ bv0 32) ?x253)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let ((?x368 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x391 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x368)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x216 (and $x386 $x391)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x388 $x216)))
 (let (($x341 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (and $x187 $x345)))
 (let (($x82 (not $x230)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x167 $x19)))
 (let (($x389 (and (not $x295) $x82)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x244 $x242)))
 (let (($x263 (not $x243)))
 (let (($x312 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (and $x27 $x312)))
 (let (($x237 (and (not $x394) $x263)))
 (let (($x380 (and (and (and (and (and (and $x237 $x389) $x129) $x341) $x132) $x265) $x29)))
 (let (($x159 (and $x380 $x343)))
 (let (($x315 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x240 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x208 (or false (or false (and (and true (or $x33 $x240)) (or $x211 $x315))))))
 (let (($x290 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x208)))
 (let (($x68 (and $x290 $x159)))
 (let (($x324 (= $x68 true)))
 (let (($x227 (= $x324 true)))
 (let ((?x259 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x155 (bvneg ?x259)))
 (let (($x135 (= ?x155 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x43 (= $x135 true)))
 (let (($x206 (= ?x155 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x383 (= $x206 true)))
 (let (($x46 (and $x383 $x43)))
 (let (($x220 (and $x46 $x227)))
 (let (($x35 (and $x220 $x89)))
 (let (($x249 (and $x35 $x317)))
 (let (($x327 (and $x249 $x396)))
 (let (($x131 (and $x327 $x50)))
 (let (($x251 (and $x131 $x14)))
 (let (($x104 (and $x251 $x11)))
 (let (($x114 (and $x104 $x268)))
 (let (($x73 (and $x114 $x350)))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (=> $x307 (= ?x110 ?x106))))))))
 ))
 (let (($x152 (forall ((Lambda5 (_ BitVec 32)) )(let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x262 (_ bv1 32))))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x85 (_ bv1 32))))
 (= $x307 $x379))))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x76 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x262 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (let (($x186 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x85 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x85 (_ bv0 32))))
 (= $x156 $x138))))))))
 ))
 (let (($x384 (and $x91 $x149)))
 (let (($x349 (and $x384 $x152)))
 (let (($x275 (and $x349 $x280)))
 (let (($x40 (and $x275 $x73)))
 (let (($x195 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x24 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x281 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (=> $x25 (= ?x281 ?x24))))))))
 ))
 (let (($x342 (forall ((Lambda5 (_ BitVec 32)) )(let (($x121 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x32 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x346 (_ bv1 32))))
 (= $x25 (bvuge ?x32 (_ bv1 32)))))))))
 ))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let (($x121 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x32 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x346 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x112 (= ?x346 (_ bv0 32))))
 (= $x112 (= ?x32 (_ bv0 32)))))))))
 ))
 (let (($x236 (and $x194 $x165)))
 (let (($x221 (and $x236 $x342)))
 (let (($x250 (and $x221 $x195)))
 (let (($x293 (and $x250 $x40)))
 (let (($x157 (=> $x293 $x318)))
 (let (($x385 (not $x157)))
 (let (($x332 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x58 (select solver-mem_4 memmask-bounded-var!)))
 (let (($x202 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x414 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x325 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x66 (or false (or false (and (and true (or $x325 $x414)) (or $x56 $x202))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x66) (= ?x58 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x58 (_ bv0 8)))))))))))
 ))
 (and (and true $x332) $x385))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!168))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x11020300)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!170))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02000004)
  (define-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!170))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x10299288)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!169))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x11020303)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x11020300)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!176 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000020) (= x!0 #x00000001)))
  (define-fun k!172 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000020 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000020)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!1 #x00000000)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!176 (k!172 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000020) true
      (input.spec-%var-m2-1.0.1 x!0)))))
  (define-fun k!171 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x11020301 x!0)
                    (ite (bvule #x11020303 x!0)
                         (ite (bvule #x11020304 x!0) #x11020304 #x11020303)
                         #x11020301)
                    #x11020300)))
    (let ((a!2 (ite (bvule #x1029930a x!0)
                    (ite (bvule #x1029930b x!0)
                         (ite (bvule #x11020300 x!0) a!1 #x1029930b)
                         #x1029930a)
                    #x10299309)))
    (let ((a!3 (ite (bvule #x1029928f x!0)
                    (ite (bvule #x10299308 x!0)
                         (ite (bvule #x10299309 x!0) a!2 #x10299308)
                         #x1029928f)
                    #x1029928e)))
    (let ((a!4 (ite (bvule #x1029928c x!0)
                    (ite (bvule #x1029928d x!0)
                         (ite (bvule #x1029928e x!0) a!3 #x1029928d)
                         #x1029928c)
                    #x1029928b)))
    (let ((a!5 (ite (bvule #x10299289 x!0)
                    (ite (bvule #x1029928a x!0)
                         (ite (bvule #x1029928b x!0) a!4 #x1029928a)
                         #x10299289)
                    #x10299288)))
    (let ((a!6 (ite (bvule #x02000007 x!0)
                    (ite (bvule #x02000008 x!0)
                         (ite (bvule #x10299288 x!0) a!5 #x02000008)
                         #x02000007)
                    #x02000005)))
    (let ((a!7 (ite (bvule #x00000103 x!0)
                    (ite (bvule #x02000004 x!0)
                         (ite (bvule #x02000005 x!0) a!6 #x02000004)
                         #x00000103)
                    #x00000102)))
    (let ((a!8 (ite (bvule #x00000100 x!0)
                    (ite (bvule #x00000101 x!0)
                         (ite (bvule #x00000102 x!0) a!7 #x00000101)
                         #x00000100)
                    #x00000013)))
    (let ((a!9 (ite (bvule #x00000011 x!0)
                    (ite (bvule #x00000012 x!0)
                         (ite (bvule #x00000013 x!0) a!8 #x00000012)
                         #x00000011)
                    #x00000010)))
    (let ((a!10 (ite (bvule #x00000002 x!0)
                     (ite (bvule #x00000003 x!0)
                          (ite (bvule #x00000010 x!0) a!9 #x00000003)
                          #x00000002)
                     #x00000001)))
      (ite (bvule #x00000001 x!0) a!10 #x00000000))))))))))))
  (define-fun k!170!175 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000101) #x00
    (ite (= x!0 #x00000011) #x00
    (ite (= x!0 #x11020304) #x01
    (ite (= x!0 #x10299288) #x00
    (ite (= x!0 #x00000012) #x00
    (ite (= x!0 #x02000004) #x00
    (ite (= x!0 #x1029930b) #x00
    (ite (= x!0 #x1029928e) #x04
    (ite (= x!0 #x1029928b) #x80
    (ite (= x!0 #x00000010) #x00
    (ite (= x!0 #x00000102) #x02
    (ite (= x!0 #x1029928c) #x00
    (ite (= x!0 #x10299308) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x1029928f) #x00
    (ite (= x!0 #x1029928a) #x00
    (ite (= x!0 #x11020300) #x00
    (ite (= x!0 #x02000005) #x00
    (ite (= x!0 #x1029928d) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x10299309) #x20
    (ite (= x!0 #x11020301) #x00
    (ite (= x!0 #x00000103) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x02000008) #x02
    (ite (= x!0 #x02000007) #x00
    (ite (= x!0 #x1029930a) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x10299289) #x40
    (ite (= x!0 #x11020303) #x00
    (ite (= x!0 #x00000100) #x00
    (ite (= x!0 #x00000013) #x00
      #x03)))))))))))))))))))))))))))))))))
  (define-fun k!170 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!170!175 (k!171 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!174 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000040) (= x!0 #x00000004)))
  (define-fun k!169 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
  (define-fun k!168 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x10299309) #x20
    (ite (= x!0 #x1029928e) #x04
    (ite (= x!0 #x1029928b) #x80
    (ite (= x!0 #x00000102) #x02
    (ite (= x!0 #x10299289) #x40
      #x00))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x80004000
    (ite (= x!0 #x00000001) #x00040000
    (ite (= x!0 #x00000020) #x00002000
      (let ((a!1 (concat (k!168 (bvadd #x1029928b (bvmul #x00000004 x!0)))
                         (k!168 (bvadd #x1029928a (bvmul #x00000004 x!0)))
                         (k!168 (bvadd #x10299289 (bvmul #x00000004 x!0)))
                         (k!168 (bvadd #x10299288 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!170 (bvadd #x1029928b (bvmul #x00000004 x!0)))
                         (k!170 (bvadd #x1029928a (bvmul #x00000004 x!0)))
                         (k!170 (bvadd #x10299289 (bvmul #x00000004 x!0)))
                         (k!170 (bvadd #x10299288 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!177 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000040) (= x!0 #x00000004)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00000100)
  (define-fun k!173 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000064 x!0)
                    (ite (bvule #x00000065 x!0)
                         (ite (bvule #x00020000 x!0) #x00020000 #x00000065)
                         #x00000064)
                    #x00000040)))
      (ite (bvule #x00000004 x!0)
           (ite (bvule #x00000040 x!0) a!1 #x00000004)
           #x00000000)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!174 (k!173 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000040) #x00020000
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!168 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!168 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!168 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!168 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!170 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!170 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!170 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!170 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!177
      (k!173 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000040) #x00020000
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!168 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!168 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!168 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!168 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x80004000
    (ite (= x!0 #x00000001) #x00040000
    (ite (= x!0 #x00000020) #x00002000
      (input.spec-%var-m2-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x372 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x158 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x411)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x142))))
 (let ((?x275 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (=> $x110 (= ?x275 ?x180)))))))))))
 ))
 (let (($x77 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x34 (_ bv1 32))))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (= $x110 $x78)))))))
 ))
 (let (($x384 (forall ((Lambda5 (_ BitVec 32)) )(let (($x292 (= false false)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (=> $x138 $x292))))))
 ))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x34 (_ bv0 32))))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (= $x138 $x6)))))))
 ))
 (let (($x266 (and $x67 $x384)))
 (let (($x18 (and $x266 $x77)))
 (let (($x241 (and $x18 $x372)))
 (let (($x170 (= $x241 true)))
 (let (($x234 (= $x170 true)))
 (let ((?x100 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x401 (bvneg ?x100)))
 (let (($x147 (= ?x401 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x214 (= $x147 true)))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x47))))
 (let ((?x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x349 (bvuge ?x156 (_ bv1 32))))
 (=> $x349 (= ?x259 ?x81)))))))))))
 ))
 (let (($x356 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x34 (_ bv1 32))))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x349 (bvuge ?x156 (_ bv1 32))))
 (= $x349 $x78)))))))
 ))
 (let (($x375 (forall ((Lambda5 (_ BitVec 32)) )(let (($x292 (= false false)))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x156 (_ bv0 32))))
 (=> $x76 $x292))))))
 ))
 (let (($x267 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x34 (_ bv0 32))))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x156 (_ bv0 32))))
 (= $x76 $x6)))))))
 ))
 (let (($x348 (and $x267 $x375)))
 (let (($x390 (and $x348 $x356)))
 (let (($x270 (and $x390 $x196)))
 (let (($x175 (= $x270 true)))
 (let (($x314 (= $x175 true)))
 (let (($x338 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x17 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x254))))
 (let ((?x121 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (=> $x332 (= ?x121 ?x408)))))))))))
 ))
 (let (($x274 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x34 (_ bv1 32))))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (= $x332 $x78)))))))
 ))
 (let (($x90 (forall ((Lambda5 (_ BitVec 32)) )(let (($x292 (= false false)))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x415 (_ bv0 32))))
 (=> $x330 $x292))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x34 (_ bv0 32))))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x415 (_ bv0 32))))
 (= $x330 $x6)))))))
 ))
 (let (($x101 (and $x39 $x90)))
 (let (($x136 (and $x101 $x274)))
 (let (($x232 (and $x136 $x338)))
 (let (($x298 (= $x232 true)))
 (let (($x377 (= $x298 true)))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x47))))
 (let ((?x275 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (=> $x110 (= ?x275 ?x81)))))))))))
 ))
 (let (($x360 (and $x18 $x107)))
 (let (($x358 (= $x360 true)))
 (let (($x381 (= $x358 true)))
 (let (($x285 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x54)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x199)))
 (let ((?x275 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (=> $x110 (= ?x275 ?x28))))))))))))
 ))
 (let (($x183 (and $x18 $x285)))
 (let (($x48 (= $x183 true)))
 (let (($x161 (= $x48 true)))
 (let (($x350 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x54)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x199)))
 (let ((?x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x349 (bvuge ?x156 (_ bv1 32))))
 (=> $x349 (= ?x259 ?x28))))))))))))
 ))
 (let (($x73 (and $x390 $x350)))
 (let (($x40 (= $x73 true)))
 (let (($x293 (= $x40 true)))
 (let (($x188 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x17 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x17))))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x17 (_ bv2 32))) ?x246)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x17 (_ bv3 32))) ?x127)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (=> $x332 (= ?x121 ?x247))))))))))))
 ))
 (let (($x50 (and $x136 $x188)))
 (let (($x131 (= $x50 true)))
 (let (($x371 (= $x131 true)))
 (let ((?x347 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x413 (= (_ bv0 32) ?x347)))
 (let ((?x207 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x328 (= (_ bv0 32) ?x207)))
 (let ((?x151 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x248 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x89 (and $x365 $x162)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x12 $x89)))
 (let (($x291 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x378 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x343 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x343 $x159)))
 (let (($x324 (not $x68)))
 (let (($x380 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x29 $x380)))
 (let (($x220 (and (not $x197) $x324)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x132 $x72)))
 (let (($x265 (not $x55)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x167 $x19)))
 (let (($x253 (and (not $x216) $x265)))
 (let (($x63 (and (and (and (and (and (and $x253 $x220) $x378) $x291) $x35) $x87) $x328)))
 (let (($x86 (and $x63 $x413)))
 (let (($x341 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x387 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x389 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x255 (or false (or false (and (and true (or $x82 $x389)) (or $x387 $x341))))))
 (let (($x391 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x255)))
 (let (($x418 (and $x391 $x86)))
 (let (($x181 (= $x418 true)))
 (let (($x62 (= $x181 true)))
 (let (($x394 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x27 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x84 (and $x27 $x394)))
 (let (($x244 (= $x84 true)))
 (let (($x242 (= $x244 true)))
 (let ((?x211 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x315 (= (_ bv0 2) ?x211)))
 (let (($x38 (= $x315 true)))
 (let (($x33 (= ?x401 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x240 (= $x33 true)))
 (let (($x176 (and $x240 $x38)))
 (let (($x243 (and $x176 $x242)))
 (let (($x65 (and $x243 $x62)))
 (let (($x287 (and $x65 $x371)))
 (let (($x198 (and $x287 $x293)))
 (let (($x374 (and $x198 $x161)))
 (let (($x228 (and $x374 $x381)))
 (let (($x7 (and $x228 $x377)))
 (let (($x184 (and $x7 $x314)))
 (let (($x51 (and $x184 $x214)))
 (let (($x135 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x275 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (=> $x110 (= ?x275 ?x259))))))))
 ))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x349 (bvuge ?x156 (_ bv1 32))))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (= $x110 $x349))))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x156 (_ bv0 32))))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (= $x138 $x76))))))))
 ))
 (let (($x307 (and $x91 $x384)))
 (let (($x141 (and $x307 $x16)))
 (let (($x43 (and $x141 $x135)))
 (let (($x217 (and $x43 $x51)))
 (let (($x25 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (=> $x332 (= ?x121 ?x190))))))))
 ))
 (let (($x210 (forall ((Lambda5 (_ BitVec 32)) )(let (($x414 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x123 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (= $x332 (bvuge ?x123 (_ bv1 32)))))))))
 ))
 (let (($x66 (forall ((Lambda5 (_ BitVec 32)) )(let (($x414 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x123 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x415 (_ bv0 32))))
 (= $x330 (= ?x123 (_ bv0 32)))))))))
 ))
 (let (($x299 (and $x66 $x90)))
 (let (($x346 (and $x299 $x210)))
 (let (($x245 (and $x346 $x25)))
 (let (($x364 (and $x245 $x217)))
 (let (($x148 (=> $x364 $x234)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x372 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x158 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x411)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x142))))
 (let ((?x275 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (=> $x110 (= ?x275 ?x180)))))))))))
 ))
 (let (($x77 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x34 (_ bv1 32))))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (= $x110 $x78)))))))
 ))
 (let (($x384 (forall ((Lambda5 (_ BitVec 32)) )(let (($x292 (= false false)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (=> $x138 $x292))))))
 ))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x34 (_ bv0 32))))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (= $x138 $x6)))))))
 ))
 (let (($x266 (and $x67 $x384)))
 (let (($x18 (and $x266 $x77)))
 (let (($x241 (and $x18 $x372)))
 (let (($x170 (= $x241 true)))
 (let (($x234 (= $x170 true)))
 (let ((?x100 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x401 (bvneg ?x100)))
 (let (($x147 (= ?x401 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x214 (= $x147 true)))
 (let (($x196 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x47))))
 (let ((?x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x349 (bvuge ?x156 (_ bv1 32))))
 (=> $x349 (= ?x259 ?x81)))))))))))
 ))
 (let (($x356 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x34 (_ bv1 32))))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x349 (bvuge ?x156 (_ bv1 32))))
 (= $x349 $x78)))))))
 ))
 (let (($x375 (forall ((Lambda5 (_ BitVec 32)) )(let (($x292 (= false false)))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x156 (_ bv0 32))))
 (=> $x76 $x292))))))
 ))
 (let (($x267 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x34 (_ bv0 32))))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x156 (_ bv0 32))))
 (= $x76 $x6)))))))
 ))
 (let (($x348 (and $x267 $x375)))
 (let (($x390 (and $x348 $x356)))
 (let (($x270 (and $x390 $x196)))
 (let (($x175 (= $x270 true)))
 (let (($x314 (= $x175 true)))
 (let (($x338 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x17 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem ?x17))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x17 (_ bv2 32))) ?x254))))
 (let ((?x121 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (=> $x332 (= ?x121 ?x408)))))))))))
 ))
 (let (($x274 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x34 (_ bv1 32))))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (= $x332 $x78)))))))
 ))
 (let (($x90 (forall ((Lambda5 (_ BitVec 32)) )(let (($x292 (= false false)))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x415 (_ bv0 32))))
 (=> $x330 $x292))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x34 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x6 (= ?x34 (_ bv0 32))))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x415 (_ bv0 32))))
 (= $x330 $x6)))))))
 ))
 (let (($x101 (and $x39 $x90)))
 (let (($x136 (and $x101 $x274)))
 (let (($x232 (and $x136 $x338)))
 (let (($x298 (= $x232 true)))
 (let (($x377 (= $x298 true)))
 (let (($x107 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x47))))
 (let ((?x275 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (=> $x110 (= ?x275 ?x81)))))))))))
 ))
 (let (($x360 (and $x18 $x107)))
 (let (($x358 (= $x360 true)))
 (let (($x381 (= $x358 true)))
 (let (($x285 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x54)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x199)))
 (let ((?x275 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (=> $x110 (= ?x275 ?x28))))))))))))
 ))
 (let (($x183 (and $x18 $x285)))
 (let (($x48 (= $x183 true)))
 (let (($x161 (= $x48 true)))
 (let (($x350 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x171 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x171))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv2 32))) ?x54)))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x171 (_ bv3 32))) ?x199)))
 (let ((?x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x349 (bvuge ?x156 (_ bv1 32))))
 (=> $x349 (= ?x259 ?x28))))))))))))
 ))
 (let (($x73 (and $x390 $x350)))
 (let (($x40 (= $x73 true)))
 (let (($x293 (= $x40 true)))
 (let (($x188 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x17 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x17 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x17))))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x17 (_ bv2 32))) ?x246)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x17 (_ bv3 32))) ?x127)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (=> $x332 (= ?x121 ?x247))))))))))))
 ))
 (let (($x50 (and $x136 $x188)))
 (let (($x131 (= $x50 true)))
 (let (($x371 (= $x131 true)))
 (let ((?x347 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x413 (= (_ bv0 32) ?x347)))
 (let ((?x207 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x328 (= (_ bv0 32) ?x207)))
 (let ((?x151 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x248 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x365 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x89 (and $x365 $x162)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x35 (and $x12 $x89)))
 (let (($x291 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x378 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x343 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x343 $x159)))
 (let (($x324 (not $x68)))
 (let (($x380 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x29 $x380)))
 (let (($x220 (and (not $x197) $x324)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x132 $x72)))
 (let (($x265 (not $x55)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x167 $x19)))
 (let (($x253 (and (not $x216) $x265)))
 (let (($x63 (and (and (and (and (and (and $x253 $x220) $x378) $x291) $x35) $x87) $x328)))
 (let (($x86 (and $x63 $x413)))
 (let (($x341 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x387 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x389 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x255 (or false (or false (and (and true (or $x82 $x389)) (or $x387 $x341))))))
 (let (($x391 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x255)))
 (let (($x418 (and $x391 $x86)))
 (let (($x181 (= $x418 true)))
 (let (($x62 (= $x181 true)))
 (let (($x394 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x27 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x84 (and $x27 $x394)))
 (let (($x244 (= $x84 true)))
 (let (($x242 (= $x244 true)))
 (let ((?x211 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x315 (= (_ bv0 2) ?x211)))
 (let (($x38 (= $x315 true)))
 (let (($x33 (= ?x401 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x240 (= $x33 true)))
 (let (($x176 (and $x240 $x38)))
 (let (($x243 (and $x176 $x242)))
 (let (($x65 (and $x243 $x62)))
 (let (($x287 (and $x65 $x371)))
 (let (($x198 (and $x287 $x293)))
 (let (($x374 (and $x198 $x161)))
 (let (($x228 (and $x374 $x381)))
 (let (($x7 (and $x228 $x377)))
 (let (($x184 (and $x7 $x314)))
 (let (($x51 (and $x184 $x214)))
 (let (($x135 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x275 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (=> $x110 (= ?x275 ?x259))))))))
 ))
 (let (($x16 (forall ((Lambda5 (_ BitVec 32)) )(let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x349 (bvuge ?x156 (_ bv1 32))))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x262 (_ bv1 32))))
 (= $x110 $x349))))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x156 (ite $x311 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x156 (_ bv0 32))))
 (let (($x342 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x262 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x262 (_ bv0 32))))
 (= $x138 $x76))))))))
 ))
 (let (($x307 (and $x91 $x384)))
 (let (($x141 (and $x307 $x16)))
 (let (($x43 (and $x141 $x135)))
 (let (($x217 (and $x43 $x51)))
 (let (($x25 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (=> $x332 (= ?x121 ?x190))))))))
 ))
 (let (($x210 (forall ((Lambda5 (_ BitVec 32)) )(let (($x414 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x123 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x415 (_ bv1 32))))
 (= $x332 (bvuge ?x123 (_ bv1 32)))))))))
 ))
 (let (($x66 (forall ((Lambda5 (_ BitVec 32)) )(let (($x414 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x123 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x415 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (= ?x415 (_ bv0 32))))
 (= $x330 (= ?x123 (_ bv0 32)))))))))
 ))
 (let (($x299 (and $x66 $x90)))
 (let (($x346 (and $x299 $x210)))
 (let (($x245 (and $x346 $x25)))
 (let (($x364 (and $x245 $x217)))
 (let (($x148 (=> $x364 $x234)))
 (not $x148))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1171c7c4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xe9560693)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xcd6196e0)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xe9560693)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xcd6196e3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1171c7c7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xcd6196e0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1171c7c4)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xe9560693)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000002c) #x02
      #x00))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000000b))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000b) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000b) #x00000002
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000b) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000002c) #x02
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000b) #x00000002
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000b) #x00000002
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000b) #x00000002
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x41056a84)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1014b340)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1014b343)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x41056a87)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1014b340)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x41056a84)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000001))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000001))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00008000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000001))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00008000
      (let ((a!1 (concat (k!23 (bvadd #xffffffff (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xfffffffe (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xfffffffd (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xfffffffc (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #xffffffff (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xfffffffe (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xfffffffd (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #xfffffffc (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00008000
      (let ((a!1 (concat (k!23 (bvadd #xffffffff (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xfffffffe (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xfffffffd (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #xfffffffc (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00008000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x313 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x31 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_5 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x226 (bvadd ?x47 ?x31)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x99))))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (=> $x295 (= ?x82 ?x130))))))))))))
 ))
 (let (($x144 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x11 (_ bv1 32))))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (= $x295 $x73)))))))
 ))
 (let (($x312 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (= false false)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x38 (_ bv0 32))))
 (=> $x176 $x190))))))
 ))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x11 (_ bv0 32))))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x38 (_ bv0 32))))
 (= $x176 $x54)))))))
 ))
 (let (($x109 (and $x194 $x312)))
 (let (($x98 (and $x109 $x144)))
 (let (($x57 (and $x98 $x313)))
 (let (($x419 (= $x57 true)))
 (let (($x357 (= $x419 true)))
 (let ((?x321 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x174 (= (_ bv0 2) ?x321)))
 (let (($x137 (= $x174 true)))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x336 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv1 32))) (select input.dst.llvm-mem ?x336))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv2 32))) ?x316))))
 (let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x211 (_ bv1 32))))
 (=> $x243 (= ?x108 ?x280)))))))))))
 ))
 (let (($x175 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x11 (_ bv1 32))))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x211 (_ bv1 32))))
 (= $x243 $x73)))))))
 ))
 (let (($x407 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (= false false)))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (=> $x315 $x190))))))
 ))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x11 (_ bv0 32))))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (= $x315 $x54)))))))
 ))
 (let (($x97 (and $x298 $x407)))
 (let (($x314 (and $x97 $x175)))
 (let (($x251 (and $x314 $x111)))
 (let (($x397 (= $x251 true)))
 (let (($x400 (= $x397 true)))
 (let (($x366 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x23 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x369))))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (=> $x156 (= ?x384 ?x213)))))))))))
 ))
 (let (($x293 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x11 (_ bv1 32))))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (= $x156 $x73)))))))
 ))
 (let (($x25 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (= false false)))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x276 (_ bv0 32))))
 (=> $x210 $x190))))))
 ))
 (let (($x28 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x11 (_ bv0 32))))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x276 (_ bv0 32))))
 (= $x210 $x54)))))))
 ))
 (let (($x405 (and $x28 $x25)))
 (let (($x198 (and $x405 $x293)))
 (let (($x269 (and $x198 $x366)))
 (let (($x302 (= $x269 true)))
 (let (($x14 (= $x302 true)))
 (let (($x206 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x336 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv1 32))) (select input.dst.llvm-mem ?x336))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv2 32))) ?x316))))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (=> $x295 (= ?x82 ?x280)))))))))))
 ))
 (let (($x146 (and $x98 $x206)))
 (let (($x282 (= $x146 true)))
 (let (($x297 (= $x282 true)))
 (let (($x120 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x336 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x336))))
 (let ((?x372 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv2 32))) ?x180)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv3 32))) ?x372)))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (=> $x295 (= ?x82 ?x234))))))))))))
 ))
 (let (($x124 (and $x98 $x120)))
 (let (($x112 (= $x124 true)))
 (let (($x239 (= $x112 true)))
 (let (($x263 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x336 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x336))))
 (let ((?x372 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv2 32))) ?x180)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv3 32))) ?x372)))
 (let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x211 (_ bv1 32))))
 (=> $x243 (= ?x108 ?x234))))))))))))
 ))
 (let (($x237 (and $x314 $x263)))
 (let (($x96 (= $x237 true)))
 (let (($x204 (= $x96 true)))
 (let (($x254 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x23 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x381 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x107)))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x381)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (=> $x156 (= ?x384 ?x185))))))))))))
 ))
 (let (($x88 (and $x198 $x254)))
 (let (($x408 (= $x88 true)))
 (let (($x410 (= $x408 true)))
 (let (($x178 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x131 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x267 (and $x131 $x178)))
 (let (($x179 (= $x267 true)))
 (let (($x375 (= $x179 true)))
 (let ((?x17 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x359 (= (_ bv0 32) ?x17)))
 (let ((?x215 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x411 (= (_ bv0 32) ?x215)))
 (let ((?x136 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x395 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x219 (and $x305 $x78)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x274 (and $x6 $x219)))
 (let (($x34 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x418 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x86 $x418)))
 (let (($x62 (not $x181)))
 (let (($x347 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x413 (and $x63 $x347)))
 (let (($x233 (and (not $x413) $x62)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x272 $x151)))
 (let (($x303 (not $x87)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x380 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x380 $x197)))
 (let (($x328 (and (not $x35) $x303)))
 (let (($x22 (and (and (and (and (and (and $x328 $x233) $x160) $x34) $x274) $x395) $x411)))
 (let (($x396 (and $x22 $x359)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x324 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x324)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x324)))
 (let (($x248 (or false (or false (and (and true (or $x220 $x182)) (or $x291 $x59))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x248)))
 (let (($x246 (and $x89 $x396)))
 (let (($x127 (= $x246 true)))
 (let (($x247 (= $x127 true)))
 (let ((?x391 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x167 (bvneg ?x391)))
 (let (($x72 (= ?x167 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x55 (= $x72 true)))
 (let (($x216 (= ?x167 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x353 (= $x216 true)))
 (let (($x265 (and $x353 $x55)))
 (let (($x218 (and $x265 $x247)))
 (let (($x348 (and $x218 $x375)))
 (let (($x409 (and $x348 $x410)))
 (let (($x69 (and $x409 $x204)))
 (let (($x8 (and $x69 $x239)))
 (let (($x296 (and $x8 $x297)))
 (let (($x231 (and $x296 $x14)))
 (let (($x37 (and $x231 $x400)))
 (let (($x189 (and $x37 $x137)))
 (let (($x355 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (=> $x295 (= ?x82 ?x108))))))))
 ))
 (let (($x368 (forall ((Lambda5 (_ BitVec 32)) )(let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x211 (_ bv1 32))))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (= $x295 $x243))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x38 (_ bv0 32))))
 (= $x176 $x315))))))))
 ))
 (let (($x394 (and $x208 $x312)))
 (let (($x187 (and $x394 $x368)))
 (let (($x388 (and $x187 $x355)))
 (let (($x344 (and $x388 $x189)))
 (let (($x383 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (=> $x156 (= ?x384 ?x349))))))))
 ))
 (let (($x83 (forall ((Lambda5 (_ BitVec 32)) )(let (($x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x332 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (= $x156 (bvuge ?x332 (_ bv1 32)))))))))
 ))
 (let (($x121 (forall ((Lambda5 (_ BitVec 32)) )(let (($x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x332 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x276 (_ bv0 32))))
 (= $x210 (= ?x332 (_ bv0 32)))))))))
 ))
 (let (($x245 (and $x121 $x25)))
 (let (($x91 (and $x245 $x83)))
 (let (($x75 (and $x91 $x383)))
 (let (($x362 (and $x75 $x344)))
 (let (($x339 (=> $x362 $x357)))
 (let (($x273 (not $x339)))
 (let (($x329 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x21 (select solver-mem_5 memmask-bounded-var!)))
 (let (($x286 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x404 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x258 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x404)))
 (let (($x52 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x404)))
 (let (($x393 (or false (or false (and (and true (or $x260 $x52)) (or $x258 $x286))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x393) (= ?x21 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x21 (_ bv0 8)))))))))))
 ))
 (and (and true $x329) $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x313 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x31 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_5 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x226 (bvadd ?x47 ?x31)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x99))))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (=> $x295 (= ?x82 ?x130))))))))))))
 ))
 (let (($x144 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x11 (_ bv1 32))))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (= $x295 $x73)))))))
 ))
 (let (($x312 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (= false false)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x38 (_ bv0 32))))
 (=> $x176 $x190))))))
 ))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x11 (_ bv0 32))))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x38 (_ bv0 32))))
 (= $x176 $x54)))))))
 ))
 (let (($x109 (and $x194 $x312)))
 (let (($x98 (and $x109 $x144)))
 (let (($x57 (and $x98 $x313)))
 (let (($x419 (= $x57 true)))
 (let (($x357 (= $x419 true)))
 (let ((?x321 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x174 (= (_ bv0 2) ?x321)))
 (let (($x137 (= $x174 true)))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x336 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv1 32))) (select input.dst.llvm-mem ?x336))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv2 32))) ?x316))))
 (let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x211 (_ bv1 32))))
 (=> $x243 (= ?x108 ?x280)))))))))))
 ))
 (let (($x175 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x11 (_ bv1 32))))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x211 (_ bv1 32))))
 (= $x243 $x73)))))))
 ))
 (let (($x407 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (= false false)))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (=> $x315 $x190))))))
 ))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x11 (_ bv0 32))))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (= $x315 $x54)))))))
 ))
 (let (($x97 (and $x298 $x407)))
 (let (($x314 (and $x97 $x175)))
 (let (($x251 (and $x314 $x111)))
 (let (($x397 (= $x251 true)))
 (let (($x400 (= $x397 true)))
 (let (($x366 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x23 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x369))))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (=> $x156 (= ?x384 ?x213)))))))))))
 ))
 (let (($x293 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (bvuge ?x11 (_ bv1 32))))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (= $x156 $x73)))))))
 ))
 (let (($x25 (forall ((Lambda5 (_ BitVec 32)) )(let (($x190 (= false false)))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x276 (_ bv0 32))))
 (=> $x210 $x190))))))
 ))
 (let (($x28 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x11 (_ bv0 32))))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x276 (_ bv0 32))))
 (= $x210 $x54)))))))
 ))
 (let (($x405 (and $x28 $x25)))
 (let (($x198 (and $x405 $x293)))
 (let (($x269 (and $x198 $x366)))
 (let (($x302 (= $x269 true)))
 (let (($x14 (= $x302 true)))
 (let (($x206 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x336 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv1 32))) (select input.dst.llvm-mem ?x336))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x336 (_ bv2 32))) ?x316))))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (=> $x295 (= ?x82 ?x280)))))))))))
 ))
 (let (($x146 (and $x98 $x206)))
 (let (($x282 (= $x146 true)))
 (let (($x297 (= $x282 true)))
 (let (($x120 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x336 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x336))))
 (let ((?x372 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv2 32))) ?x180)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv3 32))) ?x372)))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (=> $x295 (= ?x82 ?x234))))))))))))
 ))
 (let (($x124 (and $x98 $x120)))
 (let (($x112 (= $x124 true)))
 (let (($x239 (= $x112 true)))
 (let (($x263 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x336 (bvadd ?x47 input.dst.llvm-%m1)))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x336))))
 (let ((?x372 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv2 32))) ?x180)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x336 (_ bv3 32))) ?x372)))
 (let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x211 (_ bv1 32))))
 (=> $x243 (= ?x108 ?x234))))))))))))
 ))
 (let (($x237 (and $x314 $x263)))
 (let (($x96 (= $x237 true)))
 (let (($x204 (= $x96 true)))
 (let (($x254 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x47 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x23 (bvadd ?x47 input.dst.llvm-%m2)))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x381 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x107)))
 (let ((?x185 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x381)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (=> $x156 (= ?x384 ?x185))))))))))))
 ))
 (let (($x88 (and $x198 $x254)))
 (let (($x408 (= $x88 true)))
 (let (($x410 (= $x408 true)))
 (let (($x178 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x131 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x267 (and $x131 $x178)))
 (let (($x179 (= $x267 true)))
 (let (($x375 (= $x179 true)))
 (let ((?x17 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x359 (= (_ bv0 32) ?x17)))
 (let ((?x215 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x411 (= (_ bv0 32) ?x215)))
 (let ((?x136 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x395 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x219 (and $x305 $x78)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x274 (and $x6 $x219)))
 (let (($x34 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x418 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x86 $x418)))
 (let (($x62 (not $x181)))
 (let (($x347 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x413 (and $x63 $x347)))
 (let (($x233 (and (not $x413) $x62)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x272 $x151)))
 (let (($x303 (not $x87)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x380 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x380 $x197)))
 (let (($x328 (and (not $x35) $x303)))
 (let (($x22 (and (and (and (and (and (and $x328 $x233) $x160) $x34) $x274) $x395) $x411)))
 (let (($x396 (and $x22 $x359)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x324 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x324)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x324)))
 (let (($x248 (or false (or false (and (and true (or $x220 $x182)) (or $x291 $x59))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x248)))
 (let (($x246 (and $x89 $x396)))
 (let (($x127 (= $x246 true)))
 (let (($x247 (= $x127 true)))
 (let ((?x391 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x167 (bvneg ?x391)))
 (let (($x72 (= ?x167 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x55 (= $x72 true)))
 (let (($x216 (= ?x167 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x353 (= $x216 true)))
 (let (($x265 (and $x353 $x55)))
 (let (($x218 (and $x265 $x247)))
 (let (($x348 (and $x218 $x375)))
 (let (($x409 (and $x348 $x410)))
 (let (($x69 (and $x409 $x204)))
 (let (($x8 (and $x69 $x239)))
 (let (($x296 (and $x8 $x297)))
 (let (($x231 (and $x296 $x14)))
 (let (($x37 (and $x231 $x400)))
 (let (($x189 (and $x37 $x137)))
 (let (($x355 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x82 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (=> $x295 (= ?x82 ?x108))))))))
 ))
 (let (($x368 (forall ((Lambda5 (_ BitVec 32)) )(let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x243 (bvuge ?x211 (_ bv1 32))))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x38 (_ bv1 32))))
 (= $x295 $x243))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x211 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (let (($x43 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x38 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x38 (_ bv0 32))))
 (= $x176 $x315))))))))
 ))
 (let (($x394 (and $x208 $x312)))
 (let (($x187 (and $x394 $x368)))
 (let (($x388 (and $x187 $x355)))
 (let (($x344 (and $x388 $x189)))
 (let (($x383 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x349 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x384 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (=> $x156 (= ?x384 ?x349))))))))
 ))
 (let (($x83 (forall ((Lambda5 (_ BitVec 32)) )(let (($x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x332 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x276 (_ bv1 32))))
 (= $x156 (bvuge ?x332 (_ bv1 32)))))))))
 ))
 (let (($x121 (forall ((Lambda5 (_ BitVec 32)) )(let (($x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x332 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x276 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x210 (= ?x276 (_ bv0 32))))
 (= $x210 (= ?x332 (_ bv0 32)))))))))
 ))
 (let (($x245 (and $x121 $x25)))
 (let (($x91 (and $x245 $x83)))
 (let (($x75 (and $x91 $x383)))
 (let (($x362 (and $x75 $x344)))
 (let (($x339 (=> $x362 $x357)))
 (let (($x273 (not $x339)))
 (let (($x329 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x21 (select solver-mem_5 memmask-bounded-var!)))
 (let (($x286 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x404 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x258 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x404)))
 (let (($x52 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x404)))
 (let (($x393 (or false (or false (and (and true (or $x260 $x52)) (or $x258 $x286))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x393) (= ?x21 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x21 (_ bv0 8)))))))))))
 ))
 (and (and true $x329) $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!141))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000400)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!144))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!143))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x000001c8)
  (define-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!142))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000403)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000400)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!145 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x40000001 x!0)
                    (ite (bvule #x40000003 x!0)
                         (ite (bvule #x40000004 x!0) #x40000004 #x40000003)
                         #x40000001)
                    #x40000000)))
    (let ((a!2 (ite (bvule #x00000403 x!0)
                    (ite (bvule #x00000404 x!0)
                         (ite (bvule #x40000000 x!0) a!1 #x00000404)
                         #x00000403)
                    #x00000401)))
    (let ((a!3 (ite (bvule #x000001cb x!0)
                    (ite (bvule #x00000400 x!0)
                         (ite (bvule #x00000401 x!0) a!2 #x00000400)
                         #x000001cb)
                    #x000001ca)))
    (let ((a!4 (ite (bvule #x000001c8 x!0)
                    (ite (bvule #x000001c9 x!0)
                         (ite (bvule #x000001ca x!0) a!3 #x000001c9)
                         #x000001c8)
                    #x0000000f)))
    (let ((a!5 (ite (bvule #x0000000d x!0)
                    (ite (bvule #x0000000e x!0)
                         (ite (bvule #x0000000f x!0) a!4 #x0000000e)
                         #x0000000d)
                    #x0000000c)))
    (let ((a!6 (ite (bvule #x0000000a x!0)
                    (ite (bvule #x0000000b x!0)
                         (ite (bvule #x0000000c x!0) a!5 #x0000000b)
                         #x0000000a)
                    #x00000009)))
      (ite (bvule #x00000009 x!0) a!6 #x00000008))))))))
  (define-fun k!144!149 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x000001c8) #x10
    (ite (= x!0 #x000001c9) #x00
    (ite (= x!0 #x0000000a) #x08
    (ite (= x!0 #x00000404) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x00000009) #x01
    (ite (= x!0 #x0000000d) #x80
    (ite (= x!0 #x40000000) #x01
    (ite (= x!0 #x40000001) #x08
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x40000004) #x00
    (ite (= x!0 #x0000000c) #x10
    (ite (= x!0 #x000001cb) #x00
    (ite (= x!0 #x000001ca) #x00
    (ite (= x!0 #x0004000a) #x40
      #x02))))))))))))))))))
  (define-fun k!144 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!144!149 (k!145 x!0)))
  (define-fun k!146 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000001)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!151 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000001) (= x!0 #x00000000)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!151 (k!146 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m1-1.0.1!148 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!143 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x48)
  (define-fun k!142!150 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x000001c8) #x10
    (ite (= x!0 #x000001c9) #x00
    (ite (= x!0 #x0004000a) #x40
    (ite (= x!0 #x0000000a) #x08
    (ite (= x!0 #x0000000d) #x80
    (ite (= x!0 #x00000404) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x00000009) #x01
    (ite (= x!0 #x00000401) #x00
    (ite (= x!0 #x00000400) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x40000000) #x00
    (ite (= x!0 #x40000001) #x00
    (ite (= x!0 #x40000004) #x00
    (ite (= x!0 #x40000003) #x00
    (ite (= x!0 #x00000403) #x00
    (ite (= x!0 #x0000000c) #x10
    (ite (= x!0 #x000001cb) #x00
    (ite (= x!0 #x000001ca) #x00
      #x03))))))))))))))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!152 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!141 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000001c8) #x10
    (ite (= x!0 #x0000000a) #x08
    (ite (= x!0 #x0000000d) #x80
    (ite (= x!0 #x00000009) #x01
    (ite (= x!0 #x0000000c) #x10
      #x00))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00080100
    (ite (= x!0 #x00000001) #x00008010
      (let ((a!1 (concat (k!141 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x00000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!144 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!144 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!144 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!144 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun k!142 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!142!150 (k!145 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!142))
              (= x!3 (_ as-array k!143))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000008))
      #x00000000
      #x000001ca))
  (define-fun k!147 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!148 (k!147 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (let ((a!1 (concat (k!141 (bvadd #x000001cb (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x000001ca (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x000001c9 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x000001c8 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!144 (bvadd #x000001cb (bvmul #x00000004 x!0)))
                         (k!144 (bvadd #x000001ca (bvmul #x00000004 x!0)))
                         (k!144 (bvadd #x000001c9 (bvmul #x00000004 x!0)))
                         (k!144 (bvadd #x000001c8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!152
      (k!147 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (let ((a!1 (concat (k!141 (bvadd #x000001cb (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x000001ca (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x000001c9 (bvmul #x00000004 x!0)))
                         (k!141 (bvadd #x000001c8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00080100
    (ite (= x!0 #x00000001) #x00008010
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x103 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_6 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x374 (bvadd ?x263 ?x103)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x374 (_ bv1 32))) (select input.dst.llvm-mem ?x374))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x374 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x374 (_ bv2 32))) ?x177))))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (=> $x329 (= ?x66 ?x283))))))))))))
 ))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (bvuge ?x185 (_ bv1 32))))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (= $x329 $x409)))))))
 ))
 (let (($x20 (forall ((Lambda5 (_ BitVec 32)) )(let (($x277 (= false false)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x420 (_ bv0 32))))
 (=> $x300 $x277))))))
 ))
 (let (($x254 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x185 (_ bv0 32))))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x420 (_ bv0 32))))
 (= $x300 $x143)))))))
 ))
 (let (($x88 (and $x254 $x20)))
 (let (($x7 (and $x88 $x298)))
 (let (($x261 (and $x7 $x118)))
 (let (($x398 (= $x261 true)))
 (let (($x289 (= $x398 true)))
 (let ((?x223 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x225 (= (_ bv0 2) ?x223)))
 (let (($x48 (= $x225 true)))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x269 (bvadd ?x263 input.dst.llvm-%m1)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem ?x269))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv2 32))) ?x106))))
 (let ((?x391 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (=> $x187 (= ?x391 ?x337)))))))))))
 ))
 (let (($x206 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (bvuge ?x185 (_ bv1 32))))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (= $x187 $x409)))))))
 ))
 (let (($x306 (forall ((Lambda5 (_ BitVec 32)) )(let (($x277 (= false false)))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (=> $x193 $x277))))))
 ))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x185 (_ bv0 32))))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (= $x193 $x143)))))))
 ))
 (let (($x280 (and $x85 $x306)))
 (let (($x146 (and $x280 $x206)))
 (let (($x139 (and $x146 $x114)))
 (let (($x80 (= $x139 true)))
 (let (($x350 (= $x80 true)))
 (let (($x242 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x237 (bvadd ?x263 input.dst.llvm-%m2)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem ?x237))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv2 32))) ?x401))))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (=> $x329 (= ?x66 ?x290)))))))))))
 ))
 (let (($x230 (and $x7 $x242)))
 (let (($x389 (= $x230 true)))
 (let (($x129 (= $x389 true)))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x269 (bvadd ?x263 input.dst.llvm-%m1)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem ?x269))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv2 32))) ?x106))))
 (let ((?x388 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (=> $x82 (= ?x388 ?x337)))))))))))
 ))
 (let (($x134 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (bvuge ?x185 (_ bv1 32))))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (= $x82 $x409)))))))
 ))
 (let (($x394 (forall ((Lambda5 (_ BitVec 32)) )(let (($x277 (= false false)))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (=> $x315 $x277))))))
 ))
 (let (($x173 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x185 (_ bv0 32))))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (= $x315 $x143)))))))
 ))
 (let (($x385 (and $x173 $x394)))
 (let (($x79 (and $x385 $x134)))
 (let (($x165 (and $x79 $x299)))
 (let (($x342 (= $x165 true)))
 (let (($x262 (= $x342 true)))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x269 (bvadd ?x263 input.dst.llvm-%m1)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x269))))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv2 32))) ?x310)))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv3 32))) ?x251)))
 (let ((?x388 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (=> $x82 (= ?x388 ?x37))))))))))))
 ))
 (let (($x99 (and $x79 $x318)))
 (let (($x279 (= $x99 true)))
 (let (($x130 (= $x279 true)))
 (let (($x174 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x269 (bvadd ?x263 input.dst.llvm-%m1)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x269))))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv2 32))) ?x310)))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv3 32))) ?x251)))
 (let ((?x391 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (=> $x187 (= ?x391 ?x37))))))))))))
 ))
 (let (($x137 (and $x146 $x174)))
 (let (($x189 (= $x137 true)))
 (let (($x344 (= $x189 true)))
 (let (($x124 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x237 (bvadd ?x263 input.dst.llvm-%m2)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x237))))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv2 32))) ?x128)))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv3 32))) ?x325)))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (=> $x329 (= ?x66 ?x61))))))))))))
 ))
 (let (($x112 (and $x7 $x124)))
 (let (($x239 (= $x112 true)))
 (let (($x8 (= $x239 true)))
 (let (($x293 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x405 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x198 (and $x405 $x293)))
 (let (($x266 (= $x198 true)))
 (let (($x47 (= $x266 true)))
 (let ((?x131 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x371 (= (_ bv0 32) ?x131)))
 (let ((?x188 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x50 (= (_ bv0 32) ?x188)))
 (let ((?x218 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x396 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x396)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x127 (and $x17 $x246)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x22 $x127)))
 (let (($x411 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x327 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x101 $x78)))
 (let (($x274 (not $x219)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x6 $x305)))
 (let (($x136 (and (not $x39) $x274)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (and $x373 $x160)))
 (let (($x209 (not $x335)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x125 $x248)))
 (let (($x71 (and (not $x252) $x209)))
 (let (($x348 (and (and (and (and (and (and $x71 $x136) $x327) $x411) $x247) $x145) $x50)))
 (let (($x104 (and $x348 $x371)))
 (let (($x413 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x207 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x347 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x207)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x207)))
 (let (($x181 (or false (or false (and (and true (or $x272 $x151)) (or $x347 $x413))))))
 (let (($x233 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x181)))
 (let (($x356 (and $x233 $x104)))
 (let (($x168 (= $x356 true)))
 (let (($x41 (= $x168 true)))
 (let ((?x343 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x162 (bvneg ?x343)))
 (let (($x378 (= ?x162 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x291 (= $x378 true)))
 (let (($x220 (= ?x162 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x182 (= $x220 true)))
 (let (($x59 (and $x182 $x291)))
 (let (($x11 (and $x59 $x41)))
 (let (($x23 (and $x11 $x47)))
 (let (($x5 (and $x23 $x8)))
 (let (($x362 (and $x5 $x344)))
 (let (($x60 (and $x362 $x130)))
 (let (($x138 (and $x60 $x262)))
 (let (($x387 (and $x138 $x129)))
 (let (($x117 (and $x387 $x350)))
 (let (($x161 (and $x117 $x48)))
 (let (($x72 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x391 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x388 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (=> $x82 (= ?x388 ?x391))))))))
 ))
 (let (($x284 (forall ((Lambda5 (_ BitVec 32)) )(let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (= $x82 $x187))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (= $x315 $x193))))))))
 ))
 (let (($x295 (and $x208 $x394)))
 (let (($x341 (and $x295 $x284)))
 (let (($x55 (and $x341 $x72)))
 (let (($x334 (and $x55 $x161)))
 (let (($x156 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x346 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (=> $x329 (= ?x66 ?x346))))))))
 ))
 (let (($x229 (forall ((Lambda5 (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x301 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (= $x329 (bvuge ?x301 (_ bv1 32)))))))))
 ))
 (let (($x393 (forall ((Lambda5 (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x301 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x420 (_ bv0 32))))
 (= $x300 (= ?x301 (_ bv0 32)))))))))
 ))
 (let (($x30 (and $x393 $x20)))
 (let (($x276 (and $x30 $x229)))
 (let (($x311 (and $x276 $x156)))
 (let (($x256 (and $x311 $x334)))
 (let (($x363 (=> $x256 $x289)))
 (let (($x113 (not $x363)))
 (let (($x361 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x32 (select solver-mem_6 memmask-bounded-var!)))
 (let (($x281 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x322 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x195 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x249 (or false (or false (and (and true (or $x10 $x195)) (or $x322 $x281))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x249) (= ?x32 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x32 (_ bv0 8)))))))))))
 ))
 (and (and true $x361) $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x118 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x103 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_6 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x374 (bvadd ?x263 ?x103)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x374 (_ bv1 32))) (select input.dst.llvm-mem ?x374))))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x374 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x374 (_ bv2 32))) ?x177))))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (=> $x329 (= ?x66 ?x283))))))))))))
 ))
 (let (($x298 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (bvuge ?x185 (_ bv1 32))))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (= $x329 $x409)))))))
 ))
 (let (($x20 (forall ((Lambda5 (_ BitVec 32)) )(let (($x277 (= false false)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x420 (_ bv0 32))))
 (=> $x300 $x277))))))
 ))
 (let (($x254 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x185 (_ bv0 32))))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x420 (_ bv0 32))))
 (= $x300 $x143)))))))
 ))
 (let (($x88 (and $x254 $x20)))
 (let (($x7 (and $x88 $x298)))
 (let (($x261 (and $x7 $x118)))
 (let (($x398 (= $x261 true)))
 (let (($x289 (= $x398 true)))
 (let ((?x223 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x225 (= (_ bv0 2) ?x223)))
 (let (($x48 (= $x225 true)))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x269 (bvadd ?x263 input.dst.llvm-%m1)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem ?x269))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv2 32))) ?x106))))
 (let ((?x391 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (=> $x187 (= ?x391 ?x337)))))))))))
 ))
 (let (($x206 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (bvuge ?x185 (_ bv1 32))))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (= $x187 $x409)))))))
 ))
 (let (($x306 (forall ((Lambda5 (_ BitVec 32)) )(let (($x277 (= false false)))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (=> $x193 $x277))))))
 ))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x185 (_ bv0 32))))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (= $x193 $x143)))))))
 ))
 (let (($x280 (and $x85 $x306)))
 (let (($x146 (and $x280 $x206)))
 (let (($x139 (and $x146 $x114)))
 (let (($x80 (= $x139 true)))
 (let (($x350 (= $x80 true)))
 (let (($x242 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x237 (bvadd ?x263 input.dst.llvm-%m2)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem ?x237))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv2 32))) ?x401))))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (=> $x329 (= ?x66 ?x290)))))))))))
 ))
 (let (($x230 (and $x7 $x242)))
 (let (($x389 (= $x230 true)))
 (let (($x129 (= $x389 true)))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x269 (bvadd ?x263 input.dst.llvm-%m1)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem ?x269))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x269 (_ bv2 32))) ?x106))))
 (let ((?x388 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (=> $x82 (= ?x388 ?x337)))))))))))
 ))
 (let (($x134 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (bvuge ?x185 (_ bv1 32))))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (= $x82 $x409)))))))
 ))
 (let (($x394 (forall ((Lambda5 (_ BitVec 32)) )(let (($x277 (= false false)))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (=> $x315 $x277))))))
 ))
 (let (($x173 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x185 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x185 (_ bv0 32))))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (= $x315 $x143)))))))
 ))
 (let (($x385 (and $x173 $x394)))
 (let (($x79 (and $x385 $x134)))
 (let (($x165 (and $x79 $x299)))
 (let (($x342 (= $x165 true)))
 (let (($x262 (= $x342 true)))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x269 (bvadd ?x263 input.dst.llvm-%m1)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x269))))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv2 32))) ?x310)))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv3 32))) ?x251)))
 (let ((?x388 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (=> $x82 (= ?x388 ?x37))))))))))))
 ))
 (let (($x99 (and $x79 $x318)))
 (let (($x279 (= $x99 true)))
 (let (($x130 (= $x279 true)))
 (let (($x174 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x269 (bvadd ?x263 input.dst.llvm-%m1)))
 (let ((?x310 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x269))))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv2 32))) ?x310)))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x269 (_ bv3 32))) ?x251)))
 (let ((?x391 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (=> $x187 (= ?x391 ?x37))))))))))))
 ))
 (let (($x137 (and $x146 $x174)))
 (let (($x189 (= $x137 true)))
 (let (($x344 (= $x189 true)))
 (let (($x124 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x237 (bvadd ?x263 input.dst.llvm-%m2)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x237))))
 (let ((?x325 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv2 32))) ?x128)))
 (let ((?x61 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv3 32))) ?x325)))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (=> $x329 (= ?x66 ?x61))))))))))))
 ))
 (let (($x112 (and $x7 $x124)))
 (let (($x239 (= $x112 true)))
 (let (($x8 (= $x239 true)))
 (let (($x293 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x405 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x198 (and $x405 $x293)))
 (let (($x266 (= $x198 true)))
 (let (($x47 (= $x266 true)))
 (let ((?x131 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x371 (= (_ bv0 32) ?x131)))
 (let ((?x188 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x50 (= (_ bv0 32) ?x188)))
 (let ((?x218 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x218)))
 (let ((?x396 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x396)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x127 (and $x17 $x246)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x22 $x127)))
 (let (($x411 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x327 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x101 $x78)))
 (let (($x274 (not $x219)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x6 $x305)))
 (let (($x136 (and (not $x39) $x274)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (and $x373 $x160)))
 (let (($x209 (not $x335)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x125 $x248)))
 (let (($x71 (and (not $x252) $x209)))
 (let (($x348 (and (and (and (and (and (and $x71 $x136) $x327) $x411) $x247) $x145) $x50)))
 (let (($x104 (and $x348 $x371)))
 (let (($x413 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x207 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x347 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x207)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x207)))
 (let (($x181 (or false (or false (and (and true (or $x272 $x151)) (or $x347 $x413))))))
 (let (($x233 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x181)))
 (let (($x356 (and $x233 $x104)))
 (let (($x168 (= $x356 true)))
 (let (($x41 (= $x168 true)))
 (let ((?x343 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x162 (bvneg ?x343)))
 (let (($x378 (= ?x162 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x291 (= $x378 true)))
 (let (($x220 (= ?x162 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x182 (= $x220 true)))
 (let (($x59 (and $x182 $x291)))
 (let (($x11 (and $x59 $x41)))
 (let (($x23 (and $x11 $x47)))
 (let (($x5 (and $x23 $x8)))
 (let (($x362 (and $x5 $x344)))
 (let (($x60 (and $x362 $x130)))
 (let (($x138 (and $x60 $x262)))
 (let (($x387 (and $x138 $x129)))
 (let (($x117 (and $x387 $x350)))
 (let (($x161 (and $x117 $x48)))
 (let (($x72 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x391 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x388 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (=> $x82 (= ?x388 ?x391))))))))
 ))
 (let (($x284 (forall ((Lambda5 (_ BitVec 32)) )(let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x176 (_ bv1 32))))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x211 (_ bv1 32))))
 (= $x82 $x187))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x259 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x176 (ite $x259 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (let (($x83 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x211 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (= ?x211 (_ bv0 32))))
 (= $x315 $x193))))))))
 ))
 (let (($x295 (and $x208 $x394)))
 (let (($x341 (and $x295 $x284)))
 (let (($x55 (and $x341 $x72)))
 (let (($x334 (and $x55 $x161)))
 (let (($x156 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x346 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (=> $x329 (= ?x66 ?x346))))))))
 ))
 (let (($x229 (forall ((Lambda5 (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x301 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x420 (_ bv1 32))))
 (= $x329 (bvuge ?x301 (_ bv1 32)))))))))
 ))
 (let (($x393 (forall ((Lambda5 (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x301 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x420 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x420 (_ bv0 32))))
 (= $x300 (= ?x301 (_ bv0 32)))))))))
 ))
 (let (($x30 (and $x393 $x20)))
 (let (($x276 (and $x30 $x229)))
 (let (($x311 (and $x276 $x156)))
 (let (($x256 (and $x311 $x334)))
 (let (($x363 (=> $x256 $x289)))
 (let (($x113 (not $x363)))
 (let (($x361 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x32 (select solver-mem_6 memmask-bounded-var!)))
 (let (($x281 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x322 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x195 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x249 (or false (or false (and (and true (or $x10 $x195)) (or $x322 $x281))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x249) (= ?x32 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x32 (_ bv0 8)))))))))))
 ))
 (and (and true $x361) $x113))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!82))
  (define-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!84))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002990)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!84))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8402994)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00003800)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!83))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000044)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8402997)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002993)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8402994)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002990)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!89 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x0000000f) (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun k!86 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x0000000f x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x0000000f)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!1 #x00000000)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!89 (k!86 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000f) true
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      (input.spec-%var-m2-1.0.1 x!0)))))
  (define-fun k!85 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xe8402995 x!0)
                    (ite (bvule #xe8402997 x!0)
                         (ite (bvule #xe8402998 x!0) #xe8402998 #xe8402997)
                         #xe8402995)
                    #xe8402994)))
    (let ((a!2 (ite (bvule #x0000383f x!0)
                    (ite (bvule #x740061c4 x!0)
                         (ite (bvule #xe8402994 x!0) a!1 #x740061c4)
                         #x0000383f)
                    #x0000383e)))
    (let ((a!3 (ite (bvule #x0000383c x!0)
                    (ite (bvule #x0000383d x!0)
                         (ite (bvule #x0000383e x!0) a!2 #x0000383d)
                         #x0000383c)
                    #x00003807)))
    (let ((a!4 (ite (bvule #x00003805 x!0)
                    (ite (bvule #x00003806 x!0)
                         (ite (bvule #x00003807 x!0) a!3 #x00003806)
                         #x00003805)
                    #x00003804)))
    (let ((a!5 (ite (bvule #x00003802 x!0)
                    (ite (bvule #x00003803 x!0)
                         (ite (bvule #x00003804 x!0) a!4 #x00003803)
                         #x00003802)
                    #x00003801)))
    (let ((a!6 (ite (bvule #x00002994 x!0)
                    (ite (bvule #x00003800 x!0)
                         (ite (bvule #x00003801 x!0) a!5 #x00003800)
                         #x00002994)
                    #x00002993)))
    (let ((a!7 (ite (bvule #x00002990 x!0)
                    (ite (bvule #x00002991 x!0)
                         (ite (bvule #x00002993 x!0) a!6 #x00002991)
                         #x00002990)
                    #x00000083)))
    (let ((a!8 (ite (bvule #x00000081 x!0)
                    (ite (bvule #x00000082 x!0)
                         (ite (bvule #x00000083 x!0) a!7 #x00000082)
                         #x00000081)
                    #x00000080)))
    (let ((a!9 (ite (bvule #x00000046 x!0)
                    (ite (bvule #x00000047 x!0)
                         (ite (bvule #x00000080 x!0) a!8 #x00000047)
                         #x00000046)
                    #x00000045)))
      (ite (bvule #x00000045 x!0) a!9 #x00000044)))))))))))
  (define-fun k!84!88 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000044) #x00
    (ite (= x!0 #x00003800) #x00
    (ite (= x!0 #x0000383d) #x00
    (ite (= x!0 #xe8402994) #x00
    (ite (= x!0 #x00000046) #x80
    (ite (= x!0 #x00000080) #x00
    (ite (= x!0 #x00003806) #x01
    (ite (= x!0 #x00000047) #x00
    (ite (= x!0 #x00000045) #x80
    (ite (= x!0 #x00003803) #x80
    (ite (= x!0 #x00000083) #x00
    (ite (= x!0 #x00000082) #x00
    (ite (= x!0 #x00003804) #x10
    (ite (= x!0 #x00003807) #x00
    (ite (= x!0 #x0000383f) #x00
    (ite (= x!0 #x00000081) #x00
    (ite (= x!0 #x00003802) #x80
    (ite (= x!0 #x740061c4) #x20
    (ite (= x!0 #x0000383e) #x00
    (ite (= x!0 #x00002990) #x00
    (ite (= x!0 #xe8402995) #x00
    (ite (= x!0 #x00001988) #x20
    (ite (= x!0 #x00003805) #x00
    (ite (= x!0 #x00002991) #x00
    (ite (= x!0 #x0000383c) #x01
    (ite (= x!0 #xe8402997) #x00
    (ite (= x!0 #x00003801) #x00
    (ite (= x!0 #x00002993) #x00
      #x02)))))))))))))))))))))))))))))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!84!88 (k!85 x!0)))
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00003802) #x80
    (ite (= x!0 #x00000046) #x80
    (ite (= x!0 #x00003806) #x01
    (ite (= x!0 #x0000383c) #x01
    (ite (= x!0 #x00000045) #x80
    (ite (= x!0 #x00003803) #x80
    (ite (= x!0 #x00003804) #x10
      #x00))))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000f) #x00000001
    (ite (= x!0 #x00000000) #x80800000
    (ite (= x!0 #x00000001) #x00010010
      (let ((a!1 (concat (k!82 (bvadd #x00003803 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00003802 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00003801 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00003800 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!84 (bvadd #x00003803 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00003802 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00003801 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00003800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))))
  (define-fun input.spec-%var-m1-1.0.1!91 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x00020000)
  (define-fun k!87 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!91 (k!87 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000f) #x00000000
    (ite (= x!0 #x00000000) #x00808000
      (let ((a!1 (concat (k!82 (bvadd #x00000047 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000046 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000045 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000044 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!84 (bvadd #x00000047 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00000046 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00000045 (bvmul #x00000004 x!0)))
                         (k!84 (bvadd #x00000044 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2)))))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!90 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!90 (k!87 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000f) #x00000000
    (ite (= x!0 #x00000000) #x00808000
      (let ((a!1 (concat (k!82 (bvadd #x00000047 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000046 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000045 (bvmul #x00000004 x!0)))
                         (k!82 (bvadd #x00000044 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000f) #x00000001
    (ite (= x!0 #x00000000) #x80800000
    (ite (= x!0 #x00000001) #x00010010
      (input.spec-%var-m2-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x377 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x64 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_7 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x308 (bvadd ?x174 ?x64)))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x308))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x308 (_ bv2 32))) ?x366)))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x308 (_ bv3 32))) ?x390)))
 (let ((?x343 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (=> $x341 (= ?x343 ?x147)))))))))))))
 ))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x61 (_ bv1 32))))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (= $x341 $x5)))))))
 ))
 (let (($x123 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (=> $x259 $x74))))))
 ))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x61 (_ bv0 32))))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (= $x259 $x93)))))))
 ))
 (let (($x337 (and $x292 $x123)))
 (let (($x165 (and $x337 $x299)))
 (let (($x196 (and $x165 $x377)))
 (let (($x338 (= $x196 true)))
 (let (($x184 (= $x338 true)))
 (let ((?x180 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x372 (= (_ bv0 2) ?x180)))
 (let (($x142 (= $x372 true)))
 (let (($x331 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x230 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x121))))
 (let ((?x343 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (=> $x341 (= ?x343 ?x68)))))))))))
 ))
 (let (($x36 (and $x165 $x331)))
 (let (($x408 (= $x36 true)))
 (let (($x410 (= $x408 true)))
 (let (($x368 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x137 (bvadd ?x174 input.dst.llvm-%m2)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x275))))
 (let ((?x52 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (=> $x361 (= ?x52 ?x27)))))))))))
 ))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x61 (_ bv1 32))))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (= $x361 $x5)))))))
 ))
 (let (($x407 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x221 (_ bv0 32))))
 (=> $x250 $x74))))))
 ))
 (let (($x124 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x61 (_ bv0 32))))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x221 (_ bv0 32))))
 (= $x250 $x93)))))))
 ))
 (let (($x112 (and $x124 $x407)))
 (let (($x316 (and $x112 $x85)))
 (let (($x355 (and $x316 $x368)))
 (let (($x255 (= $x355 true)))
 (let (($x19 (= $x255 true)))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x230 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x121))))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (=> $x388 (= ?x55 ?x68)))))))))))
 ))
 (let (($x166 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x61 (_ bv1 32))))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (= $x388 $x5)))))))
 ))
 (let (($x295 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (=> $x193 $x74))))))
 ))
 (let (($x285 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x61 (_ bv0 32))))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (= $x193 $x93)))))))
 ))
 (let (($x70 (and $x285 $x295)))
 (let (($x288 (and $x70 $x166)))
 (let (($x157 (and $x288 $x258)))
 (let (($x169 (= $x157 true)))
 (let (($x67 (= $x169 true)))
 (let (($x354 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x230 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x230))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv2 32))) ?x171)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv3 32))) ?x139)))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (=> $x388 (= ?x55 ?x117))))))))))))
 ))
 (let (($x177 (and $x288 $x354)))
 (let (($x399 (= $x177 true)))
 (let (($x283 (= $x399 true)))
 (let (($x225 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x230 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x230))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv2 32))) ?x171)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv3 32))) ?x139)))
 (let ((?x343 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (=> $x341 (= ?x343 ?x117))))))))))))
 ))
 (let (($x48 (and $x165 $x225)))
 (let (($x161 (= $x48 true)))
 (let (($x334 (= $x161 true)))
 (let (($x99 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x137 (bvadd ?x174 input.dst.llvm-%m2)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x137))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x137 (_ bv2 32))) ?x253)))
 (let ((?x320 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x137 (_ bv3 32))) ?x226)))
 (let ((?x52 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (=> $x361 (= ?x52 ?x320))))))))))))
 ))
 (let (($x279 (and $x316 $x99)))
 (let (($x130 (= $x279 true)))
 (let (($x60 (= $x130 true)))
 (let (($x298 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x88 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x7 (and $x88 $x298)))
 (let (($x270 (= $x7 true)))
 (let (($x263 (= $x270 true)))
 (let ((?x405 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x73 (= (_ bv0 32) ?x405)))
 (let ((?x199 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x28 (= (_ bv0 32) ?x199)))
 (let ((?x11 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x11)))
 (let ((?x104 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x131 $x356)))
 (let (($x348 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x348 $x168)))
 (let (($x50 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x396 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x396 $x246)))
 (let (($x247 (not $x127)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x359 (and $x22 $x17)))
 (let (($x218 (and (not $x359) $x247)))
 (let (($x327 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x395 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x395 $x327)))
 (let (($x215 (not $x178)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x418 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x287 (and $x418 $x181)))
 (let (($x267 (and (not $x287) $x215)))
 (let (($x23 (and (and (and (and (and (and $x267 $x218) $x375) $x50) $x41) $x54) $x28)))
 (let (($x107 (and $x23 $x73)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x305 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x219 (or false (or false (and (and true (or $x373 $x160)) (or $x305 $x39))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x219)))
 (let (($x15 (and $x136 $x107)))
 (let (($x81 (= $x15 true)))
 (let (($x381 (= $x81 true)))
 (let ((?x380 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x62 (bvneg ?x380)))
 (let (($x303 (= ?x62 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x347 (= $x303 true)))
 (let (($x272 (= ?x62 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x151 (= $x272 true)))
 (let (($x413 (and $x151 $x347)))
 (let (($x185 (and $x413 $x381)))
 (let (($x237 (and $x185 $x263)))
 (let (($x115 (and $x237 $x60)))
 (let (($x256 (and $x115 $x334)))
 (let (($x257 (and $x256 $x283)))
 (let (($x376 (and $x257 $x67)))
 (let (($x216 (and $x376 $x19)))
 (let (($x175 (and $x216 $x410)))
 (let (($x417 (and $x175 $x142)))
 (let (($x378 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x343 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (=> $x388 (= ?x55 ?x343))))))))
 ))
 (let (($x353 (forall ((Lambda5 (_ BitVec 32)) )(let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (= $x388 $x341))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (= $x193 $x259))))))))
 ))
 (let (($x82 (and $x208 $x295)))
 (let (($x132 (and $x82 $x353)))
 (let (($x291 (and $x132 $x378)))
 (let (($x241 (and $x291 $x417)))
 (let (($x329 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x340 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x52 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (=> $x361 (= ?x52 ?x340))))))))
 ))
 (let (($x95 (forall ((Lambda5 (_ BitVec 32)) )(let (($x195 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x63 (ite $x195 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (= $x361 (bvuge ?x63 (_ bv1 32)))))))))
 ))
 (let (($x249 (forall ((Lambda5 (_ BitVec 32)) )(let (($x195 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x63 (ite $x195 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x221 (_ bv0 32))))
 (= $x250 (= ?x63 (_ bv0 32)))))))))
 ))
 (let (($x264 (and $x249 $x407)))
 (let (($x420 (and $x264 $x95)))
 (let (($x42 (and $x420 $x329)))
 (let (($x170 (and $x42 $x241)))
 (let (($x217 (=> $x170 $x184)))
 (let (($x214 (not $x217)))
 (let (($x333 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x29 (select solver-mem_7 memmask-bounded-var!)))
 (let (($x273 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x357 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x357)))
 (let (($x419 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x339 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x357)))
 (let (($x141 (or false (or false (and (and true (or $x339 $x419)) (or $x57 $x273))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x141) (= ?x29 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x29 (_ bv0 8)))))))))))
 ))
 (and (and true $x333) $x214))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x377 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x64 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_7 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x308 (bvadd ?x174 ?x64)))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x308))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x308 (_ bv2 32))) ?x366)))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x308 (_ bv3 32))) ?x390)))
 (let ((?x343 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (=> $x341 (= ?x343 ?x147)))))))))))))
 ))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x61 (_ bv1 32))))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (= $x341 $x5)))))))
 ))
 (let (($x123 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (=> $x259 $x74))))))
 ))
 (let (($x292 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x61 (_ bv0 32))))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (= $x259 $x93)))))))
 ))
 (let (($x337 (and $x292 $x123)))
 (let (($x165 (and $x337 $x299)))
 (let (($x196 (and $x165 $x377)))
 (let (($x338 (= $x196 true)))
 (let (($x184 (= $x338 true)))
 (let ((?x180 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x372 (= (_ bv0 2) ?x180)))
 (let (($x142 (= $x372 true)))
 (let (($x331 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x230 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x121))))
 (let ((?x343 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (=> $x341 (= ?x343 ?x68)))))))))))
 ))
 (let (($x36 (and $x165 $x331)))
 (let (($x408 (= $x36 true)))
 (let (($x410 (= $x408 true)))
 (let (($x368 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x137 (bvadd ?x174 input.dst.llvm-%m2)))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x275))))
 (let ((?x52 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (=> $x361 (= ?x52 ?x27)))))))))))
 ))
 (let (($x85 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x61 (_ bv1 32))))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (= $x361 $x5)))))))
 ))
 (let (($x407 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x221 (_ bv0 32))))
 (=> $x250 $x74))))))
 ))
 (let (($x124 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x61 (_ bv0 32))))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x221 (_ bv0 32))))
 (= $x250 $x93)))))))
 ))
 (let (($x112 (and $x124 $x407)))
 (let (($x316 (and $x112 $x85)))
 (let (($x355 (and $x316 $x368)))
 (let (($x255 (= $x355 true)))
 (let (($x19 (= $x255 true)))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x230 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem ?x230))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x230 (_ bv2 32))) ?x121))))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (=> $x388 (= ?x55 ?x68)))))))))))
 ))
 (let (($x166 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x61 (_ bv1 32))))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (= $x388 $x5)))))))
 ))
 (let (($x295 (forall ((Lambda5 (_ BitVec 32)) )(let (($x74 (= false false)))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (=> $x193 $x74))))))
 ))
 (let (($x285 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x61 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x61 (_ bv0 32))))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (= $x193 $x93)))))))
 ))
 (let (($x70 (and $x285 $x295)))
 (let (($x288 (and $x70 $x166)))
 (let (($x157 (and $x288 $x258)))
 (let (($x169 (= $x157 true)))
 (let (($x67 (= $x169 true)))
 (let (($x354 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x230 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x230))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv2 32))) ?x171)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv3 32))) ?x139)))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (=> $x388 (= ?x55 ?x117))))))))))))
 ))
 (let (($x177 (and $x288 $x354)))
 (let (($x399 (= $x177 true)))
 (let (($x283 (= $x399 true)))
 (let (($x225 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x230 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x230))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv2 32))) ?x171)))
 (let ((?x117 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x230 (_ bv3 32))) ?x139)))
 (let ((?x343 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (=> $x341 (= ?x343 ?x117))))))))))))
 ))
 (let (($x48 (and $x165 $x225)))
 (let (($x161 (= $x48 true)))
 (let (($x334 (= $x161 true)))
 (let (($x99 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x174 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x137 (bvadd ?x174 input.dst.llvm-%m2)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x137))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x137 (_ bv2 32))) ?x253)))
 (let ((?x320 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x137 (_ bv3 32))) ?x226)))
 (let ((?x52 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (=> $x361 (= ?x52 ?x320))))))))))))
 ))
 (let (($x279 (and $x316 $x99)))
 (let (($x130 (= $x279 true)))
 (let (($x60 (= $x130 true)))
 (let (($x298 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x88 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x7 (and $x88 $x298)))
 (let (($x270 (= $x7 true)))
 (let (($x263 (= $x270 true)))
 (let ((?x405 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x73 (= (_ bv0 32) ?x405)))
 (let ((?x199 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x28 (= (_ bv0 32) ?x199)))
 (let ((?x11 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x11)))
 (let ((?x104 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x131 $x356)))
 (let (($x348 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x348 $x168)))
 (let (($x50 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x396 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x396 $x246)))
 (let (($x247 (not $x127)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x359 (and $x22 $x17)))
 (let (($x218 (and (not $x359) $x247)))
 (let (($x327 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x395 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x395 $x327)))
 (let (($x215 (not $x178)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x418 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x287 (and $x418 $x181)))
 (let (($x267 (and (not $x287) $x215)))
 (let (($x23 (and (and (and (and (and (and $x267 $x218) $x375) $x50) $x41) $x54) $x28)))
 (let (($x107 (and $x23 $x73)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x305 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x34)))
 (let (($x219 (or false (or false (and (and true (or $x373 $x160)) (or $x305 $x39))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x219)))
 (let (($x15 (and $x136 $x107)))
 (let (($x81 (= $x15 true)))
 (let (($x381 (= $x81 true)))
 (let ((?x380 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x62 (bvneg ?x380)))
 (let (($x303 (= ?x62 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x347 (= $x303 true)))
 (let (($x272 (= ?x62 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x151 (= $x272 true)))
 (let (($x413 (and $x151 $x347)))
 (let (($x185 (and $x413 $x381)))
 (let (($x237 (and $x185 $x263)))
 (let (($x115 (and $x237 $x60)))
 (let (($x256 (and $x115 $x334)))
 (let (($x257 (and $x256 $x283)))
 (let (($x376 (and $x257 $x67)))
 (let (($x216 (and $x376 $x19)))
 (let (($x175 (and $x216 $x410)))
 (let (($x417 (and $x175 $x142)))
 (let (($x378 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x343 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (=> $x388 (= ?x55 ?x343))))))))
 ))
 (let (($x353 (forall ((Lambda5 (_ BitVec 32)) )(let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x341 (bvuge ?x315 (_ bv1 32))))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x388 (bvuge ?x176 (_ bv1 32))))
 (= $x388 $x341))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x315 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (let (($x229 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x176 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x176 (_ bv0 32))))
 (= $x193 $x259))))))))
 ))
 (let (($x82 (and $x208 $x295)))
 (let (($x132 (and $x82 $x353)))
 (let (($x291 (and $x132 $x378)))
 (let (($x241 (and $x291 $x417)))
 (let (($x329 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x340 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x52 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (=> $x361 (= ?x52 ?x340))))))))
 ))
 (let (($x95 (forall ((Lambda5 (_ BitVec 32)) )(let (($x195 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x63 (ite $x195 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x361 (bvuge ?x221 (_ bv1 32))))
 (= $x361 (bvuge ?x63 (_ bv1 32)))))))))
 ))
 (let (($x249 (forall ((Lambda5 (_ BitVec 32)) )(let (($x195 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x63 (ite $x195 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x221 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (= ?x221 (_ bv0 32))))
 (= $x250 (= ?x63 (_ bv0 32)))))))))
 ))
 (let (($x264 (and $x249 $x407)))
 (let (($x420 (and $x264 $x95)))
 (let (($x42 (and $x420 $x329)))
 (let (($x170 (and $x42 $x241)))
 (let (($x217 (=> $x170 $x184)))
 (let (($x214 (not $x217)))
 (let (($x333 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x29 (select solver-mem_7 memmask-bounded-var!)))
 (let (($x273 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x357 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x357)))
 (let (($x419 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x339 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x357)))
 (let (($x141 (or false (or false (and (and true (or $x339 $x419)) (or $x57 $x273))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x141) (= ?x29 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x29 (_ bv0 8)))))))))))
 ))
 (and (and true $x333) $x214))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 3
==result_count: 0
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x238 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x48)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x238))))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv2 32))) ?x240)))
 (let ((?x103 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv3 32))) ?x244)))
 (let ((?x291 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (=> $x55 (= ?x291 ?x103))))))))))))
 ))
 (let (($x364 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x133 (_ bv1 32))))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (= $x55 $x116)))))))
 ))
 (let (($x82 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (= false false)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (=> $x259 $x46))))))
 ))
 (let (($x148 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x133 (_ bv0 32))))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (= $x259 $x318)))))))
 ))
 (let (($x64 (and $x148 $x82)))
 (let (($x135 (and $x64 $x364)))
 (let (($x289 (and $x135 $x113)))
 (let (($x261 (= $x289 true)))
 (let (($x118 (= $x261 true)))
 (let ((?x125 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x274 (bvneg ?x125)))
 (let (($x251 (= ?x274 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x14 (= $x251 true)))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x159))))
 (let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x193 (_ bv1 32))))
 (=> $x132 (= ?x380 ?x235)))))))))))
 ))
 (let (($x157 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x133 (_ bv1 32))))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x193 (_ bv1 32))))
 (= $x132 $x116)))))))
 ))
 (let (($x68 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (= false false)))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x193 (_ bv0 32))))
 (=> $x245 $x46))))))
 ))
 (let (($x332 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x133 (_ bv0 32))))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x193 (_ bv0 32))))
 (= $x245 $x318)))))))
 ))
 (let (($x44 (and $x332 $x68)))
 (let (($x169 (and $x44 $x157)))
 (let (($x239 (and $x169 $x69)))
 (let (($x8 (= $x239 true)))
 (let (($x206 (= $x8 true)))
 (let (($x72 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x161 (bvadd ?x48 input.dst.llvm-%m2)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x311))))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (=> $x333 (= ?x195 ?x187)))))))))))
 ))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x133 (_ bv1 32))))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (= $x333 $x116)))))))
 ))
 (let (($x306 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (= false false)))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x313 (_ bv0 32))))
 (=> $x415 $x46))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x133 (_ bv0 32))))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x313 (_ bv0 32))))
 (= $x415 $x318)))))))
 ))
 (let (($x130 (and $x279 $x306)))
 (let (($x123 (and $x130 $x106)))
 (let (($x227 (and $x123 $x72)))
 (let (($x324 (= $x227 true)))
 (let (($x220 (= $x324 true)))
 (let (($x18 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x159))))
 (let ((?x291 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (=> $x55 (= ?x291 ?x235)))))))))))
 ))
 (let (($x56 (and $x135 $x18)))
 (let (($x97 (= $x56 true)))
 (let (($x154 (= $x97 true)))
 (let (($x366 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x255))))
 (let ((?x408 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv2 32))) ?x358)))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv3 32))) ?x408)))
 (let ((?x291 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (=> $x55 (= ?x291 ?x314))))))))))))
 ))
 (let (($x390 (and $x135 $x366)))
 (let (($x147 (= $x390 true)))
 (let (($x416 (= $x147 true)))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x255))))
 (let ((?x408 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv2 32))) ?x358)))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv3 32))) ?x408)))
 (let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x193 (_ bv1 32))))
 (=> $x132 (= ?x380 ?x314))))))))))))
 ))
 (let (($x417 (and $x169 $x142)))
 (let (($x241 (= $x417 true)))
 (let (($x170 (= $x241 true)))
 (let (($x399 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x161 (bvadd ?x48 input.dst.llvm-%m2)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x161))))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x161 (_ bv2 32))) ?x285)))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x161 (_ bv3 32))) ?x166)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (=> $x333 (= ?x195 ?x367))))))))))))
 ))
 (let (($x283 (and $x123 $x399)))
 (let (($x257 (= $x283 true)))
 (let (($x9 (= $x257 true)))
 (let ((?x61 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x93 (= (_ bv0 32) ?x61)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x325 (= (_ bv0 32) ?x96)))
 (let ((?x128 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x263 (and $x232 $x270)))
 (let (($x409 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x409 $x263)))
 (let (($x88 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x73 $x107)))
 (let (($x81 (not $x15)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x405 (and $x28 $x23)))
 (let (($x185 (and (not $x405) $x81)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x41 $x266)))
 (let (($x54 (not $x11)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x22 $x17)))
 (let (($x199 (and (not $x168) $x54)))
 (let (($x85 (and (and (and (and (and (and $x199 $x185) $x304) $x88) $x237) $x98) $x325)))
 (let (($x316 (and $x85 $x93)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x218 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x371 (or false (or false (and (and true (or $x247 $x218)) (or $x188 $x50))))))
 (let (($x356 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x371)))
 (let (($x412 (and $x356 $x316)))
 (let (($x174 (= $x412 true)))
 (let (($x137 (= $x174 true)))
 (let (($x287 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x418 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x411 (and $x418 $x287)))
 (let (($x395 (= $x411 true)))
 (let (($x327 (= $x395 true)))
 (let ((?x305 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x39 (= (_ bv0 2) ?x305)))
 (let (($x203 (= $x39 true)))
 (let (($x373 (= ?x274 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x160 (= $x373 true)))
 (let (($x101 (and $x160 $x203)))
 (let (($x178 (and $x101 $x327)))
 (let (($x134 (and $x178 $x137)))
 (let (($x260 (and $x134 $x9)))
 (let (($x86 (and $x260 $x170)))
 (let (($x49 (and $x86 $x416)))
 (let (($x300 (and $x49 $x154)))
 (let (($x144 (and $x300 $x220)))
 (let (($x146 (and $x144 $x206)))
 (let (($x231 (and $x146 $x14)))
 (let (($x303 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x291 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (=> $x55 (= ?x291 ?x380))))))))
 ))
 (let (($x182 (forall ((Lambda5 (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x193 (_ bv1 32))))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (= $x55 $x132))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x193 (_ bv0 32))))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (= $x259 $x245))))))))
 ))
 (let (($x388 (and $x208 $x82)))
 (let (($x205 (and $x388 $x182)))
 (let (($x347 (and $x205 $x303)))
 (let (($x397 (and $x347 $x231)))
 (let (($x361 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x278 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (=> $x333 (= ?x195 ?x278))))))))
 ))
 (let (($x150 (forall ((Lambda5 (_ BitVec 32)) )(let (($x419 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x6 (ite $x419 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (= $x333 (bvuge ?x6 (_ bv1 32)))))))))
 ))
 (let (($x141 (forall ((Lambda5 (_ BitVec 32)) )(let (($x419 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x6 (ite $x419 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x313 (_ bv0 32))))
 (= $x415 (= ?x6 (_ bv0 32)))))))))
 ))
 (let (($x45 (and $x141 $x306)))
 (let (($x221 (and $x45 $x150)))
 (let (($x153 (and $x221 $x361)))
 (let (($x400 (and $x153 $x397)))
 (let (($x398 (=> $x400 $x118)))
 (not $x398))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x238 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x48)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x238))))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv2 32))) ?x240)))
 (let ((?x103 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv3 32))) ?x244)))
 (let ((?x291 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (=> $x55 (= ?x291 ?x103))))))))))))
 ))
 (let (($x364 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x133 (_ bv1 32))))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (= $x55 $x116)))))))
 ))
 (let (($x82 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (= false false)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (=> $x259 $x46))))))
 ))
 (let (($x148 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x133 (_ bv0 32))))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (= $x259 $x318)))))))
 ))
 (let (($x64 (and $x148 $x82)))
 (let (($x135 (and $x64 $x364)))
 (let (($x289 (and $x135 $x113)))
 (let (($x261 (= $x289 true)))
 (let (($x118 (= $x261 true)))
 (let ((?x125 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x274 (bvneg ?x125)))
 (let (($x251 (= ?x274 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x14 (= $x251 true)))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x159))))
 (let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x193 (_ bv1 32))))
 (=> $x132 (= ?x380 ?x235)))))))))))
 ))
 (let (($x157 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x133 (_ bv1 32))))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x193 (_ bv1 32))))
 (= $x132 $x116)))))))
 ))
 (let (($x68 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (= false false)))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x193 (_ bv0 32))))
 (=> $x245 $x46))))))
 ))
 (let (($x332 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x133 (_ bv0 32))))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x193 (_ bv0 32))))
 (= $x245 $x318)))))))
 ))
 (let (($x44 (and $x332 $x68)))
 (let (($x169 (and $x44 $x157)))
 (let (($x239 (and $x169 $x69)))
 (let (($x8 (= $x239 true)))
 (let (($x206 (= $x8 true)))
 (let (($x72 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x161 (bvadd ?x48 input.dst.llvm-%m2)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x311))))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (=> $x333 (= ?x195 ?x187)))))))))))
 ))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x133 (_ bv1 32))))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (= $x333 $x116)))))))
 ))
 (let (($x306 (forall ((Lambda5 (_ BitVec 32)) )(let (($x46 (= false false)))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x313 (_ bv0 32))))
 (=> $x415 $x46))))))
 ))
 (let (($x279 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x133 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x133 (_ bv0 32))))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x313 (_ bv0 32))))
 (= $x415 $x318)))))))
 ))
 (let (($x130 (and $x279 $x306)))
 (let (($x123 (and $x130 $x106)))
 (let (($x227 (and $x123 $x72)))
 (let (($x324 (= $x227 true)))
 (let (($x220 (= $x324 true)))
 (let (($x18 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem ?x255))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x255 (_ bv2 32))) ?x159))))
 (let ((?x291 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (=> $x55 (= ?x291 ?x235)))))))))))
 ))
 (let (($x56 (and $x135 $x18)))
 (let (($x97 (= $x56 true)))
 (let (($x154 (= $x97 true)))
 (let (($x366 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x255))))
 (let ((?x408 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv2 32))) ?x358)))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv3 32))) ?x408)))
 (let ((?x291 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (=> $x55 (= ?x291 ?x314))))))))))))
 ))
 (let (($x390 (and $x135 $x366)))
 (let (($x147 (= $x390 true)))
 (let (($x416 (= $x147 true)))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x255 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x358 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x255))))
 (let ((?x408 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv2 32))) ?x358)))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x255 (_ bv3 32))) ?x408)))
 (let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x193 (_ bv1 32))))
 (=> $x132 (= ?x380 ?x314))))))))))))
 ))
 (let (($x417 (and $x169 $x142)))
 (let (($x241 (= $x417 true)))
 (let (($x170 (= $x241 true)))
 (let (($x399 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x48 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x161 (bvadd ?x48 input.dst.llvm-%m2)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x161))))
 (let ((?x166 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x161 (_ bv2 32))) ?x285)))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x161 (_ bv3 32))) ?x166)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (=> $x333 (= ?x195 ?x367))))))))))))
 ))
 (let (($x283 (and $x123 $x399)))
 (let (($x257 (= $x283 true)))
 (let (($x9 (= $x257 true)))
 (let ((?x61 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x93 (= (_ bv0 32) ?x61)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x325 (= (_ bv0 32) ?x96)))
 (let ((?x128 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x263 (and $x232 $x270)))
 (let (($x409 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x409 $x263)))
 (let (($x88 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x73 $x107)))
 (let (($x81 (not $x15)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x405 (and $x28 $x23)))
 (let (($x185 (and (not $x405) $x81)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x41 $x266)))
 (let (($x54 (not $x11)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x22 $x17)))
 (let (($x199 (and (not $x168) $x54)))
 (let (($x85 (and (and (and (and (and (and $x199 $x185) $x304) $x88) $x237) $x98) $x325)))
 (let (($x316 (and $x85 $x93)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x218 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x371 (or false (or false (and (and true (or $x247 $x218)) (or $x188 $x50))))))
 (let (($x356 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x371)))
 (let (($x412 (and $x356 $x316)))
 (let (($x174 (= $x412 true)))
 (let (($x137 (= $x174 true)))
 (let (($x287 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x418 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x411 (and $x418 $x287)))
 (let (($x395 (= $x411 true)))
 (let (($x327 (= $x395 true)))
 (let ((?x305 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x39 (= (_ bv0 2) ?x305)))
 (let (($x203 (= $x39 true)))
 (let (($x373 (= ?x274 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x160 (= $x373 true)))
 (let (($x101 (and $x160 $x203)))
 (let (($x178 (and $x101 $x327)))
 (let (($x134 (and $x178 $x137)))
 (let (($x260 (and $x134 $x9)))
 (let (($x86 (and $x260 $x170)))
 (let (($x49 (and $x86 $x416)))
 (let (($x300 (and $x49 $x154)))
 (let (($x144 (and $x300 $x220)))
 (let (($x146 (and $x144 $x206)))
 (let (($x231 (and $x146 $x14)))
 (let (($x303 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x380 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x291 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (=> $x55 (= ?x291 ?x380))))))))
 ))
 (let (($x182 (forall ((Lambda5 (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x193 (_ bv1 32))))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x315 (_ bv1 32))))
 (= $x55 $x132))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x193 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x193 (_ bv0 32))))
 (let (($x95 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x315 (ite $x95 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x315 (_ bv0 32))))
 (= $x259 $x245))))))))
 ))
 (let (($x388 (and $x208 $x82)))
 (let (($x205 (and $x388 $x182)))
 (let (($x347 (and $x205 $x303)))
 (let (($x397 (and $x347 $x231)))
 (let (($x361 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x278 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x195 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (=> $x333 (= ?x195 ?x278))))))))
 ))
 (let (($x150 (forall ((Lambda5 (_ BitVec 32)) )(let (($x419 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x6 (ite $x419 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x313 (_ bv1 32))))
 (= $x333 (bvuge ?x6 (_ bv1 32)))))))))
 ))
 (let (($x141 (forall ((Lambda5 (_ BitVec 32)) )(let (($x419 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x6 (ite $x419 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x313 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x313 (_ bv0 32))))
 (= $x415 (= ?x6 (_ bv0 32)))))))))
 ))
 (let (($x45 (and $x141 $x306)))
 (let (($x221 (and $x45 $x150)))
 (let (($x153 (and $x221 $x361)))
 (let (($x400 (and $x153 $x397)))
 (let (($x398 (=> $x400 $x118)))
 (not $x398))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00015004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3004a040)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3004a043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00015007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3004a040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00015004)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000021) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000021) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00008000
      (let ((a!1 (concat (k!24 (bvadd #x00000023 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000022 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000021 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000020 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x00000023 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000022 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000021 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000020 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00008000
      (let ((a!1 (concat (k!24 (bvadd #x00000023 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000022 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000021 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000020 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xe9560693)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1171c7c4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xcd6196e0)
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xe9560693)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xcd6196e3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1171c7c7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xcd6196e0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1171c7c4)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xe9560693)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000000b))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000b) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000002c) #x02
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000b) #x00000002
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000b) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000002c) #x02
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000b) #x00000002
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000b) #x00000002
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000b) #x00000002
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x402 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x265 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x10)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x352))))
 (let ((?x82 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (=> $x193 (= ?x82 ?x202)))))))))))
 ))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x358 (_ bv1 32))))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (= $x193 $x241)))))))
 ))
 (let (($x361 (forall ((Lambda5 (_ BitVec 32)) )(let (($x278 (= false false)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x191 (_ bv0 32))))
 (=> $x150 $x278))))))
 ))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x358 (_ bv0 32))))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x191 (_ bv0 32))))
 (= $x150 $x408)))))))
 ))
 (let (($x372 (and $x180 $x361)))
 (let (($x94 (and $x372 $x86)))
 (let (($x92 (and $x94 $x402)))
 (let (($x307 (= $x92 true)))
 (let (($x319 (= $x307 true)))
 (let ((?x356 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x22 (bvneg ?x356)))
 (let (($x65 (= ?x22 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x308 (= $x65 true)))
 (let (($x376 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x138 (bvadd ?x10 input.dst.llvm-%m1)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x341))))
 (let ((?x40 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x305 (_ bv1 32))))
 (=> $x178 (= ?x40 ?x89)))))))))))
 ))
 (let (($x206 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x358 (_ bv1 32))))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x305 (_ bv1 32))))
 (= $x178 $x241)))))))
 ))
 (let (($x204 (forall ((Lambda5 (_ BitVec 32)) )(let (($x278 (= false false)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x305 (_ bv0 32))))
 (=> $x39 $x278))))))
 ))
 (let (($x220 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x358 (_ bv0 32))))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x305 (_ bv0 32))))
 (= $x39 $x408)))))))
 ))
 (let (($x69 (and $x220 $x204)))
 (let (($x146 (and $x69 $x206)))
 (let (($x349 (and $x146 $x376)))
 (let (($x43 (= $x349 true)))
 (let (($x163 (= $x43 true)))
 (let (($x121 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x235 (bvadd ?x10 input.dst.llvm-%m2)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x80))))
 (let ((?x82 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (=> $x193 (= ?x82 ?x223)))))))))))
 ))
 (let (($x119 (and $x94 $x121)))
 (let (($x67 (= $x119 true)))
 (let (($x27 (= $x67 true)))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x138 (bvadd ?x10 input.dst.llvm-%m1)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x341))))
 (let ((?x247 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (=> $x359 (= ?x247 ?x89)))))))))))
 ))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x358 (_ bv1 32))))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (= $x359 $x241)))))))
 ))
 (let (($x181 (forall ((Lambda5 (_ BitVec 32)) )(let (($x278 (= false false)))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x203 (_ bv0 32))))
 (=> $x101 $x278))))))
 ))
 (let (($x197 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x358 (_ bv0 32))))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x203 (_ bv0 32))))
 (= $x101 $x408)))))))
 ))
 (let (($x357 (and $x197 $x181)))
 (let (($x71 (and $x357 $x26)))
 (let (($x173 (and $x71 $x79)))
 (let (($x385 (= $x173 true)))
 (let (($x344 (= $x385 true)))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x138 (bvadd ?x10 input.dst.llvm-%m1)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x138))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv2 32))) ?x406)))
 (let ((?x398 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv3 32))) ?x289)))
 (let ((?x247 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (=> $x359 (= ?x247 ?x398))))))))))))
 ))
 (let (($x250 (and $x71 $x31)))
 (let (($x281 (= $x250 true)))
 (let (($x74 (= $x281 true)))
 (let (($x267 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x138 (bvadd ?x10 input.dst.llvm-%m1)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x138))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv2 32))) ?x406)))
 (let ((?x398 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv3 32))) ?x289)))
 (let ((?x40 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x305 (_ bv1 32))))
 (=> $x178 (= ?x40 ?x398))))))))))))
 ))
 (let (($x90 (and $x146 $x267)))
 (let (($x403 (= $x90 true)))
 (let (($x16 (= $x403 true)))
 (let (($x211 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x235 (bvadd ?x10 input.dst.llvm-%m2)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x235))))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x235 (_ bv2 32))) ?x56)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x235 (_ bv3 32))) ?x300)))
 (let ((?x82 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (=> $x193 (= ?x82 ?x25))))))))))))
 ))
 (let (($x187 (and $x94 $x211)))
 (let (($x108 (= $x187 true)))
 (let (($x284 (= $x108 true)))
 (let ((?x354 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x177 (= (_ bv0 32) ?x354)))
 (let ((?x166 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x367 (= (_ bv0 32) ?x166)))
 (let ((?x334 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x334)))
 (let ((?x70 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x374 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x70)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x256 (and $x172 $x374)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x288 $x256)))
 (let (($x161 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x279 $x130)))
 (let (($x292 (not $x116)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x133 $x318)))
 (let (($x123 (and (not $x99) $x292)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x137 $x134)))
 (let (($x111 (not $x226)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x254 $x88)))
 (let (($x320 (and (not $x174) $x111)))
 (let (($x53 (and (and (and (and (and (and $x320 $x123) $x299) $x161) $x12) $x285) $x367)))
 (let (($x332 (and $x53 $x177)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x379 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x263 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x93 (or false (or false (and (and true (or $x270 $x263)) (or $x379 $x96))))))
 (let (($x412 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x404 (and $x412 $x332)))
 (let (($x68 (= $x404 true)))
 (let (($x44 (= $x68 true)))
 (let (($x15 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x73 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x81 (and $x73 $x15)))
 (let (($x185 (= $x81 true)))
 (let (($x120 (= $x185 true)))
 (let ((?x11 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x54 (= (_ bv0 2) ?x11)))
 (let (($x199 (= $x54 true)))
 (let (($x168 (= ?x22 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x47 (= $x168 true)))
 (let (($x28 (and $x47 $x199)))
 (let (($x143 (and $x28 $x120)))
 (let (($x258 (and $x143 $x44)))
 (let (($x72 (and $x258 $x284)))
 (let (($x63 (and $x72 $x16)))
 (let (($x32 (and $x63 $x74)))
 (let (($x362 (and $x32 $x344)))
 (let (($x243 (and $x362 $x27)))
 (let (($x368 (and $x243 $x163)))
 (let (($x126 (and $x368 $x308)))
 (let (($x198 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x40 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x247 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (=> $x359 (= ?x247 ?x40))))))))
 ))
 (let (($x104 (forall ((Lambda5 (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x305 (_ bv1 32))))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (= $x359 $x178))))))))
 ))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x305 (_ bv0 32))))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x203 (_ bv0 32))))
 (= $x101 $x39))))))))
 ))
 (let (($x287 (and $x219 $x181)))
 (let (($x396 (and $x287 $x104)))
 (let (($x348 (and $x396 $x198)))
 (let (($x212 (and $x348 $x126)))
 (let (($x151 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x82 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (=> $x193 (= ?x82 ?x132))))))))
 ))
 (let (($x351 (forall ((Lambda5 (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x333 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (= $x193 (bvuge ?x333 (_ bv1 32)))))))))
 ))
 (let (($x195 (forall ((Lambda5 (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x333 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x191 (_ bv0 32))))
 (= $x150 (= ?x333 (_ bv0 32)))))))))
 ))
 (let (($x153 (and $x195 $x361)))
 (let (($x208 (and $x153 $x351)))
 (let (($x87 (and $x208 $x151)))
 (let (($x158 (and $x87 $x212)))
 (let (($x290 (=> $x158 $x319)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x402 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x265 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x10)))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x352))))
 (let ((?x82 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (=> $x193 (= ?x82 ?x202)))))))))))
 ))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x358 (_ bv1 32))))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (= $x193 $x241)))))))
 ))
 (let (($x361 (forall ((Lambda5 (_ BitVec 32)) )(let (($x278 (= false false)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x191 (_ bv0 32))))
 (=> $x150 $x278))))))
 ))
 (let (($x180 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x358 (_ bv0 32))))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x191 (_ bv0 32))))
 (= $x150 $x408)))))))
 ))
 (let (($x372 (and $x180 $x361)))
 (let (($x94 (and $x372 $x86)))
 (let (($x92 (and $x94 $x402)))
 (let (($x307 (= $x92 true)))
 (let (($x319 (= $x307 true)))
 (let ((?x356 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x22 (bvneg ?x356)))
 (let (($x65 (= ?x22 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x308 (= $x65 true)))
 (let (($x376 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x138 (bvadd ?x10 input.dst.llvm-%m1)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x341))))
 (let ((?x40 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x305 (_ bv1 32))))
 (=> $x178 (= ?x40 ?x89)))))))))))
 ))
 (let (($x206 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x358 (_ bv1 32))))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x305 (_ bv1 32))))
 (= $x178 $x241)))))))
 ))
 (let (($x204 (forall ((Lambda5 (_ BitVec 32)) )(let (($x278 (= false false)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x305 (_ bv0 32))))
 (=> $x39 $x278))))))
 ))
 (let (($x220 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x358 (_ bv0 32))))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x305 (_ bv0 32))))
 (= $x39 $x408)))))))
 ))
 (let (($x69 (and $x220 $x204)))
 (let (($x146 (and $x69 $x206)))
 (let (($x349 (and $x146 $x376)))
 (let (($x43 (= $x349 true)))
 (let (($x163 (= $x43 true)))
 (let (($x121 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x235 (bvadd ?x10 input.dst.llvm-%m2)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x80))))
 (let ((?x82 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (=> $x193 (= ?x82 ?x223)))))))))))
 ))
 (let (($x119 (and $x94 $x121)))
 (let (($x67 (= $x119 true)))
 (let (($x27 (= $x67 true)))
 (let (($x79 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x138 (bvadd ?x10 input.dst.llvm-%m1)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem ?x138))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x138 (_ bv2 32))) ?x341))))
 (let ((?x247 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (=> $x359 (= ?x247 ?x89)))))))))))
 ))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x358 (_ bv1 32))))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (= $x359 $x241)))))))
 ))
 (let (($x181 (forall ((Lambda5 (_ BitVec 32)) )(let (($x278 (= false false)))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x203 (_ bv0 32))))
 (=> $x101 $x278))))))
 ))
 (let (($x197 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x358 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x358 (_ bv0 32))))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x203 (_ bv0 32))))
 (= $x101 $x408)))))))
 ))
 (let (($x357 (and $x197 $x181)))
 (let (($x71 (and $x357 $x26)))
 (let (($x173 (and $x71 $x79)))
 (let (($x385 (= $x173 true)))
 (let (($x344 (= $x385 true)))
 (let (($x31 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x138 (bvadd ?x10 input.dst.llvm-%m1)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x138))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv2 32))) ?x406)))
 (let ((?x398 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv3 32))) ?x289)))
 (let ((?x247 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (=> $x359 (= ?x247 ?x398))))))))))))
 ))
 (let (($x250 (and $x71 $x31)))
 (let (($x281 (= $x250 true)))
 (let (($x74 (= $x281 true)))
 (let (($x267 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x138 (bvadd ?x10 input.dst.llvm-%m1)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x138))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv2 32))) ?x406)))
 (let ((?x398 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x138 (_ bv3 32))) ?x289)))
 (let ((?x40 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x305 (_ bv1 32))))
 (=> $x178 (= ?x40 ?x398))))))))))))
 ))
 (let (($x90 (and $x146 $x267)))
 (let (($x403 (= $x90 true)))
 (let (($x16 (= $x403 true)))
 (let (($x211 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x10 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x235 (bvadd ?x10 input.dst.llvm-%m2)))
 (let ((?x56 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x235))))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x235 (_ bv2 32))) ?x56)))
 (let ((?x25 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x235 (_ bv3 32))) ?x300)))
 (let ((?x82 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (=> $x193 (= ?x82 ?x25))))))))))))
 ))
 (let (($x187 (and $x94 $x211)))
 (let (($x108 (= $x187 true)))
 (let (($x284 (= $x108 true)))
 (let ((?x354 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x177 (= (_ bv0 32) ?x354)))
 (let ((?x166 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x367 (= (_ bv0 32) ?x166)))
 (let ((?x334 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x334)))
 (let ((?x70 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x374 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x70)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x256 (and $x172 $x374)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x288 $x256)))
 (let (($x161 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x279 $x130)))
 (let (($x292 (not $x116)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x133 $x318)))
 (let (($x123 (and (not $x99) $x292)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x137 $x134)))
 (let (($x111 (not $x226)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x254 $x88)))
 (let (($x320 (and (not $x174) $x111)))
 (let (($x53 (and (and (and (and (and (and $x320 $x123) $x299) $x161) $x12) $x285) $x367)))
 (let (($x332 (and $x53 $x177)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x379 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x263 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x93 (or false (or false (and (and true (or $x270 $x263)) (or $x379 $x96))))))
 (let (($x412 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x404 (and $x412 $x332)))
 (let (($x68 (= $x404 true)))
 (let (($x44 (= $x68 true)))
 (let (($x15 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x73 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x81 (and $x73 $x15)))
 (let (($x185 (= $x81 true)))
 (let (($x120 (= $x185 true)))
 (let ((?x11 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x54 (= (_ bv0 2) ?x11)))
 (let (($x199 (= $x54 true)))
 (let (($x168 (= ?x22 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x47 (= $x168 true)))
 (let (($x28 (and $x47 $x199)))
 (let (($x143 (and $x28 $x120)))
 (let (($x258 (and $x143 $x44)))
 (let (($x72 (and $x258 $x284)))
 (let (($x63 (and $x72 $x16)))
 (let (($x32 (and $x63 $x74)))
 (let (($x362 (and $x32 $x344)))
 (let (($x243 (and $x362 $x27)))
 (let (($x368 (and $x243 $x163)))
 (let (($x126 (and $x368 $x308)))
 (let (($x198 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x40 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x247 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (=> $x359 (= ?x247 ?x40))))))))
 ))
 (let (($x104 (forall ((Lambda5 (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x305 (_ bv1 32))))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x203 (_ bv1 32))))
 (= $x359 $x178))))))))
 ))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x305 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (= ?x305 (_ bv0 32))))
 (let (($x347 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x203 (ite $x347 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (= ?x203 (_ bv0 32))))
 (= $x101 $x39))))))))
 ))
 (let (($x287 (and $x219 $x181)))
 (let (($x396 (and $x287 $x104)))
 (let (($x348 (and $x396 $x198)))
 (let (($x212 (and $x348 $x126)))
 (let (($x151 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x132 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x82 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (=> $x193 (= ?x82 ?x132))))))))
 ))
 (let (($x351 (forall ((Lambda5 (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x333 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x191 (_ bv1 32))))
 (= $x193 (bvuge ?x333 (_ bv1 32)))))))))
 ))
 (let (($x195 (forall ((Lambda5 (_ BitVec 32)) )(let (($x141 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x333 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x414 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x191 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x191 (_ bv0 32))))
 (= $x150 (= ?x333 (_ bv0 32)))))))))
 ))
 (let (($x153 (and $x195 $x361)))
 (let (($x208 (and $x153 $x351)))
 (let (($x87 (and $x208 $x151)))
 (let (($x158 (and $x87 $x212)))
 (let (($x290 (=> $x158 $x319)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x94814404)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x04900010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05046020)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x04900010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05046023)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x94814407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05046020)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x94814404)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x04900010)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000001))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000001))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000001))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000001))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000001))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x10000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda5!0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7a02c048)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xc2424ff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xde018824)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xc2424ff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xde018827)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7a02c04b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xde018824)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7a02c048)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xc2424ff0)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc2424ffb) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x433 (= true false)))
 (let (($x434 (= $x433 true)))
 (let ((?x382 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x297 (= (_ bv0 32) ?x382)))
 (let ((?x282 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x192 (= (_ bv0 32) ?x282)))
 (let ((?x201 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x201)))
 (let ((?x296 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x323 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x213 (and $x102 $x323)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x222 $x213)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x236 $x164)))
 (let (($x190 (not $x210)))
 (let (($x392 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x386 (and $x105 $x392)))
 (let (($x383 (and (not $x386) $x190)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (and $x214 $x301)))
 (let (($x286 (not $x277)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x338 (and $x20 $x42)))
 (let (($x271 (and (not $x338) $x286)))
 (let (($x425 (and (and (and (and (and (and $x271 $x383) $x76) $x183) $x186) $x152) $x192)))
 (let (($x426 (and $x425 $x297)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x317 (or false (or false (and (and true (or $x115 $x230)) (or $x275 $x217))))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x317)))
 (let (($x427 (and $x184 $x426)))
 (let (($x428 (= $x427 true)))
 (let (($x429 (= $x428 true)))
 (let (($x340 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x390))))
 (let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x266 (_ bv1 32))))
 (=> $x120 (= ?x263 ?x159)))))))))))
 ))
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x226 (_ bv1 32))))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x266 (_ bv1 32))))
 (= $x120 $x292)))))))
 ))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let (($x82 (= false false)))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x266 (_ bv0 32))))
 (=> $x11 $x82))))))
 ))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x226 (_ bv0 32))))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x266 (_ bv0 32))))
 (= $x11 $x111)))))))
 ))
 (let (($x261 (and $x8 $x138)))
 (let (($x244 (and $x261 $x113)))
 (let (($x224 (and $x244 $x340)))
 (let (($x329 (= $x224 true)))
 (let (($x59 (= $x329 true)))
 (let (($x397 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem ?x404))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv2 32))) ?x342))))
 (let ((?x418 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (=> $x34 (= ?x418 ?x294)))))))))))
 ))
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x226 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (= $x34 $x292)))))))
 ))
 (let (($x380 (forall ((Lambda5 (_ BitVec 32)) )(let (($x82 (= false false)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x30 (_ bv0 32))))
 (=> $x245 $x82))))))
 ))
 (let (($x10 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x226 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x30 (_ bv0 32))))
 (= $x245 $x111)))))))
 ))
 (let (($x235 (and $x10 $x380)))
 (let (($x97 (and $x235 $x147)))
 (let (($x242 (and $x97 $x397)))
 (let (($x84 (= $x242 true)))
 (let (($x309 (= $x84 true)))
 (let (($x239 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x390))))
 (let ((?x7 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (=> $x143 (= ?x7 ?x159)))))))))))
 ))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x226 (_ bv1 32))))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (= $x143 $x292)))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x82 (= false false)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x54 (_ bv0 32))))
 (=> $x199 $x82))))))
 ))
 (let (($x46 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x226 (_ bv0 32))))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x54 (_ bv0 32))))
 (= $x199 $x111)))))))
 ))
 (let (($x343 (and $x46 $x73)))
 (let (($x345 (and $x343 $x273)))
 (let (($x310 (and $x345 $x239)))
 (let (($x365 (= $x310 true)))
 (let (($x401 (= $x365 true)))
 (let (($x255 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x357))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x200)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x250)))
 (let ((?x7 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (=> $x143 (= ?x7 ?x32))))))))))))
 ))
 (let (($x410 (and $x345 $x255)))
 (let (($x175 (= $x410 true)))
 (let (($x331 (= $x175 true)))
 (let ((?x108 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x284 (bvneg ?x108)))
 (let (($x395 (= ?x284 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x327 (= $x395 true)))
 (let (($x274 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x413 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x357))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x413)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x373)))
 (let ((?x7 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (=> $x143 (= ?x7 ?x303))))))))))))
 ))
 (let (($x160 (and $x345 $x274)))
 (let (($x335 (= $x160 true)))
 (let (($x209 (= $x335 true)))
 (let (($x290 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x404))))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv2 32))) ?x80)))
 (let ((?x330 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv3 32))) ?x223)))
 (let ((?x359 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (=> $x101 (= ?x359 ?x330))))))))))))
 ))
 (let (($x399 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x226 (_ bv1 32))))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (= $x101 $x292)))))))
 ))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let (($x82 (= false false)))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x153 (_ bv0 32))))
 (=> $x193 $x82))))))
 ))
 (let (($x133 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x226 (_ bv0 32))))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x153 (_ bv0 32))))
 (= $x193 $x111)))))))
 ))
 (let (($x279 (and $x133 $x106)))
 (let (($x337 (and $x279 $x399)))
 (let (($x100 (and $x337 $x290)))
 (let (($x124 (= $x100 true)))
 (let (($x64 (= $x124 true)))
 (let (($x352 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem ?x404))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv2 32))) ?x342))))
 (let ((?x359 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (=> $x101 (= ?x359 ?x294)))))))))))
 ))
 (let (($x58 (and $x337 $x352)))
 (let (($x202 (= $x58 true)))
 (let (($x302 (= $x202 true)))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x404))))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv2 32))) ?x80)))
 (let ((?x330 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv3 32))) ?x223)))
 (let ((?x418 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (=> $x34 (= ?x418 ?x330))))))))))))
 ))
 (let (($x27 (and $x97 $x67)))
 (let (($x243 (= $x27 true)))
 (let (($x38 (= $x243 true)))
 (let (($x391 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x357))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x200)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x250)))
 (let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x266 (_ bv1 32))))
 (=> $x120 (= ?x263 ?x32))))))))))))
 ))
 (let (($x394 (and $x244 $x391)))
 (let (($x176 (= $x394 true)))
 (let (($x341 (= $x176 true)))
 (let (($x324 (= ?x284 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x220 (= $x324 true)))
 (let (($x56 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x404))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv2 32))) ?x360)))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv3 32))) ?x19)))
 (let ((?x418 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (=> $x34 (= ?x418 ?x314))))))))))))
 ))
 (let (($x300 (and $x97 $x56)))
 (let (($x25 (= $x300 true)))
 (let (($x346 (= $x25 true)))
 (let (($x241 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x404))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv2 32))) ?x360)))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv3 32))) ?x19)))
 (let ((?x359 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (=> $x101 (= ?x359 ?x314))))))))))))
 ))
 (let (($x170 (and $x337 $x241)))
 (let (($x86 (= $x170 true)))
 (let (($x94 (= $x86 true)))
 (let (($x311 (and $x94 $x346)))
 (let (($x109 (and $x311 $x220)))
 (let (($x353 (and $x109 $x341)))
 (let (($x75 (and $x353 $x38)))
 (let (($x37 (and $x75 $x302)))
 (let (($x110 (and $x37 $x64)))
 (let (($x136 (and $x110 $x209)))
 (let (($x127 (and $x136 $x327)))
 (let (($x36 (and $x127 $x331)))
 (let (($x400 (and $x36 $x401)))
 (let (($x262 (and $x400 $x309)))
 (let (($x62 (and $x262 $x59)))
 (let (($x430 (and $x62 $x429)))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x7 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (=> $x143 (= ?x7 ?x263))))))))
 ))
 (let (($x409 (forall ((Lambda5 (_ BitVec 32)) )(let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x266 (_ bv1 32))))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (= $x143 $x120))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x266 (_ bv0 32))))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x54 (_ bv0 32))))
 (= $x199 $x11))))))))
 ))
 (let (($x107 (and $x23 $x73)))
 (let (($x316 (and $x107 $x409)))
 (let (($x325 (and $x316 $x96)))
 (let (($x431 (and $x325 $x430)))
 (let (($x40 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x359 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x418 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (=> $x34 (= ?x418 ?x359))))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (= $x34 $x101))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x153 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x30 (_ bv0 32))))
 (= $x245 $x193))))))))
 ))
 (let (($x151 (and $x208 $x380)))
 (let (($x78 (and $x151 $x39)))
 (let (($x293 (and $x78 $x40)))
 (let (($x432 (and $x293 $x431)))
 (let (($x435 (=> $x432 $x434)))
 (not $x435))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x433 (= true false)))
 (let (($x434 (= $x433 true)))
 (let ((?x382 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x297 (= (_ bv0 32) ?x382)))
 (let ((?x282 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x192 (= (_ bv0 32) ?x282)))
 (let ((?x201 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x201)))
 (let ((?x296 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x323 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x296)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x213 (and $x102 $x323)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x222 $x213)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x236 $x164)))
 (let (($x190 (not $x210)))
 (let (($x392 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x386 (and $x105 $x392)))
 (let (($x383 (and (not $x386) $x190)))
 (let (($x301 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (and $x214 $x301)))
 (let (($x286 (not $x277)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x338 (and $x20 $x42)))
 (let (($x271 (and (not $x338) $x286)))
 (let (($x425 (and (and (and (and (and (and $x271 $x383) $x76) $x183) $x186) $x152) $x192)))
 (let (($x426 (and $x425 $x297)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x317 (or false (or false (and (and true (or $x115 $x230)) (or $x275 $x217))))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x317)))
 (let (($x427 (and $x184 $x426)))
 (let (($x428 (= $x427 true)))
 (let (($x429 (= $x428 true)))
 (let (($x340 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x390))))
 (let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x266 (_ bv1 32))))
 (=> $x120 (= ?x263 ?x159)))))))))))
 ))
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x226 (_ bv1 32))))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x266 (_ bv1 32))))
 (= $x120 $x292)))))))
 ))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let (($x82 (= false false)))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x266 (_ bv0 32))))
 (=> $x11 $x82))))))
 ))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x226 (_ bv0 32))))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x266 (_ bv0 32))))
 (= $x11 $x111)))))))
 ))
 (let (($x261 (and $x8 $x138)))
 (let (($x244 (and $x261 $x113)))
 (let (($x224 (and $x244 $x340)))
 (let (($x329 (= $x224 true)))
 (let (($x59 (= $x329 true)))
 (let (($x397 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem ?x404))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv2 32))) ?x342))))
 (let ((?x418 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (=> $x34 (= ?x418 ?x294)))))))))))
 ))
 (let (($x147 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x226 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (= $x34 $x292)))))))
 ))
 (let (($x380 (forall ((Lambda5 (_ BitVec 32)) )(let (($x82 (= false false)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x30 (_ bv0 32))))
 (=> $x245 $x82))))))
 ))
 (let (($x10 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x226 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x30 (_ bv0 32))))
 (= $x245 $x111)))))))
 ))
 (let (($x235 (and $x10 $x380)))
 (let (($x97 (and $x235 $x147)))
 (let (($x242 (and $x97 $x397)))
 (let (($x84 (= $x242 true)))
 (let (($x309 (= $x84 true)))
 (let (($x239 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x390))))
 (let ((?x7 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (=> $x143 (= ?x7 ?x159)))))))))))
 ))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x226 (_ bv1 32))))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (= $x143 $x292)))))))
 ))
 (let (($x73 (forall ((Lambda5 (_ BitVec 32)) )(let (($x82 (= false false)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x54 (_ bv0 32))))
 (=> $x199 $x82))))))
 ))
 (let (($x46 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x226 (_ bv0 32))))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x54 (_ bv0 32))))
 (= $x199 $x111)))))))
 ))
 (let (($x343 (and $x46 $x73)))
 (let (($x345 (and $x343 $x273)))
 (let (($x310 (and $x345 $x239)))
 (let (($x365 (= $x310 true)))
 (let (($x401 (= $x365 true)))
 (let (($x255 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x357))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x200)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x250)))
 (let ((?x7 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (=> $x143 (= ?x7 ?x32))))))))))))
 ))
 (let (($x410 (and $x345 $x255)))
 (let (($x175 (= $x410 true)))
 (let (($x331 (= $x175 true)))
 (let ((?x108 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x284 (bvneg ?x108)))
 (let (($x395 (= ?x284 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x327 (= $x395 true)))
 (let (($x274 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x413 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x357))))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x413)))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x373)))
 (let ((?x7 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (=> $x143 (= ?x7 ?x303))))))))))))
 ))
 (let (($x160 (and $x345 $x274)))
 (let (($x335 (= $x160 true)))
 (let (($x209 (= $x335 true)))
 (let (($x290 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x404))))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv2 32))) ?x80)))
 (let ((?x330 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv3 32))) ?x223)))
 (let ((?x359 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (=> $x101 (= ?x359 ?x330))))))))))))
 ))
 (let (($x399 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x226 (_ bv1 32))))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (= $x101 $x292)))))))
 ))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let (($x82 (= false false)))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x153 (_ bv0 32))))
 (=> $x193 $x82))))))
 ))
 (let (($x133 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x226 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (= ?x226 (_ bv0 32))))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x153 (_ bv0 32))))
 (= $x193 $x111)))))))
 ))
 (let (($x279 (and $x133 $x106)))
 (let (($x337 (and $x279 $x399)))
 (let (($x100 (and $x337 $x290)))
 (let (($x124 (= $x100 true)))
 (let (($x64 (= $x124 true)))
 (let (($x352 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem ?x404))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x404 (_ bv2 32))) ?x342))))
 (let ((?x359 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (=> $x101 (= ?x359 ?x294)))))))))))
 ))
 (let (($x58 (and $x337 $x352)))
 (let (($x202 (= $x58 true)))
 (let (($x302 (= $x202 true)))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x404))))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv2 32))) ?x80)))
 (let ((?x330 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x404 (_ bv3 32))) ?x223)))
 (let ((?x418 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (=> $x34 (= ?x418 ?x330))))))))))))
 ))
 (let (($x27 (and $x97 $x67)))
 (let (($x243 (= $x27 true)))
 (let (($x38 (= $x243 true)))
 (let (($x391 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x332 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x357))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv2 32))) ?x200)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x357 (_ bv3 32))) ?x250)))
 (let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x266 (_ bv1 32))))
 (=> $x120 (= ?x263 ?x32))))))))))))
 ))
 (let (($x394 (and $x244 $x391)))
 (let (($x176 (= $x394 true)))
 (let (($x341 (= $x176 true)))
 (let (($x324 (= ?x284 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x220 (= $x324 true)))
 (let (($x56 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x404))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv2 32))) ?x360)))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv3 32))) ?x19)))
 (let ((?x418 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (=> $x34 (= ?x418 ?x314))))))))))))
 ))
 (let (($x300 (and $x97 $x56)))
 (let (($x25 (= $x300 true)))
 (let (($x346 (= $x25 true)))
 (let (($x241 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x332 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x404 (bvadd ?x332 input.dst.llvm-%m2)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x404))))
 (let ((?x19 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv2 32))) ?x360)))
 (let ((?x314 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x404 (_ bv3 32))) ?x19)))
 (let ((?x359 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (=> $x101 (= ?x359 ?x314))))))))))))
 ))
 (let (($x170 (and $x337 $x241)))
 (let (($x86 (= $x170 true)))
 (let (($x94 (= $x86 true)))
 (let (($x311 (and $x94 $x346)))
 (let (($x109 (and $x311 $x220)))
 (let (($x353 (and $x109 $x341)))
 (let (($x75 (and $x353 $x38)))
 (let (($x37 (and $x75 $x302)))
 (let (($x110 (and $x37 $x64)))
 (let (($x136 (and $x110 $x209)))
 (let (($x127 (and $x136 $x327)))
 (let (($x36 (and $x127 $x331)))
 (let (($x400 (and $x36 $x401)))
 (let (($x262 (and $x400 $x309)))
 (let (($x62 (and $x262 $x59)))
 (let (($x430 (and $x62 $x429)))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x7 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (=> $x143 (= ?x7 ?x263))))))))
 ))
 (let (($x409 (forall ((Lambda5 (_ BitVec 32)) )(let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x266 (_ bv1 32))))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x54 (_ bv1 32))))
 (= $x143 $x120))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x266 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (= ?x266 (_ bv0 32))))
 (let (($x198 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x54 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x54 (_ bv0 32))))
 (= $x199 $x11))))))))
 ))
 (let (($x107 (and $x23 $x73)))
 (let (($x316 (and $x107 $x409)))
 (let (($x325 (and $x316 $x96)))
 (let (($x431 (and $x325 $x430)))
 (let (($x40 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x359 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x418 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (=> $x34 (= ?x418 ?x359))))))))
 ))
 (let (($x39 (forall ((Lambda5 (_ BitVec 32)) )(let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x153 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x30 (_ bv1 32))))
 (= $x34 $x101))))))))
 ))
 (let (($x208 (forall ((Lambda5 (_ BitVec 32)) )(let (($x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x153 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x153 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x30 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x30 (_ bv0 32))))
 (= $x245 $x193))))))))
 ))
 (let (($x151 (and $x208 $x380)))
 (let (($x78 (and $x151 $x39)))
 (let (($x293 (and $x78 $x40)))
 (let (($x432 (and $x293 $x431)))
 (let (($x435 (=> $x432 $x434)))
 (not $x435))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!27))
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!28))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!31 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!29 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!31 (k!29 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1!32 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!32 (k!29 x!0)))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000008 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000006 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!28 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000008 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000006 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000008 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000006 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 x!0)))))
  (define-fun k!30 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!34 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!34 (k!30 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!33 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!33 (k!30 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000004 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!28 (bvadd #x00000004 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000001 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000004 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xbff7bbf9)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x54c00b08)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!28))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xafb7f7e9)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xef040e1c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!27))
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xef040e1f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x54c00b0b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xef040e1c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x54c00b08)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!30 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!31 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!31 (k!30 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #xafb7f7ec (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xafb7f7eb (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xafb7f7ea (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xafb7f7e9 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!28 (bvadd #xafb7f7ec (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xafb7f7eb (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xafb7f7ea (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xafb7f7e9 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!33 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!33 (k!30 x!0)))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #xafb7f7ec (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xafb7f7eb (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xafb7f7ea (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xafb7f7e9 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!34 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!29 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!34 (k!29 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!32 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!32 (k!29 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #xbff7bbfc (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xbff7bbfb (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xbff7bbfa (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xbff7bbf9 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!28 (bvadd #xbff7bbfc (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xbff7bbfb (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xbff7bbfa (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #xbff7bbf9 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #xbff7bbfc (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xbff7bbfb (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xbff7bbfa (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xbff7bbf9 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m2-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x442 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x448 (=> $x442 true)))
 (let (($x449 (= $x448 true)))
 (let (($x450 (= $x449 true)))
 (let (($x443 (= $x442 true)))
 (let (($x444 (= $x443 true)))
 (let ((?x142 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x364 (= (_ bv0 32) ?x142)))
 (let ((?x135 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x417 (= (_ bv0 32) ?x135)))
 (let ((?x375 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x375)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x259)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x55 (and $x95 $x295)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x45 $x55)))
 (let (($x29 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x407 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x402 (and $x126 $x212)))
 (let (($x92 (not $x402)))
 (let (($x355 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x308 (and $x163 $x355)))
 (let (($x149 (and (not $x308) $x92)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x77 $x114)))
 (let (($x368 (not $x65)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x206 $x118)))
 (let (($x349 (and (not $x362) $x368)))
 (let (($x14 (and (and (and (and (and (and $x349 $x149) $x407) $x29) $x218) $x155) $x417)))
 (let (($x140 (and $x14 $x364)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x398 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x289 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x207 (or false (or false (and (and true (or $x289 $x398)) (or $x249 $x197))))))
 (let (($x385 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x207)))
 (let (($x339 (and $x385 $x140)))
 (let (($x437 (= $x339 true)))
 (let (($x438 (= $x437 true)))
 (let (($x177 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x53 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x148 (and $x53 $x177)))
 (let (($x312 (= $x148 true)))
 (let (($x154 (= $x312 true)))
 (let (($x9 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x356))))
 (let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x99 (_ bv1 32))))
 (=> $x358 (= ?x19 ?x405)))))))))))
 ))
 (let (($x303 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x25 (_ bv1 32))))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x99 (_ bv1 32))))
 (= $x358 $x109)))))))
 ))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let (($x418 (= false false)))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (=> $x106 $x418))))))
 ))
 (let (($x345 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x25 (_ bv0 32))))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (= $x106 $x346)))))))
 ))
 (let (($x182 (and $x345 $x205)))
 (let (($x233 (and $x182 $x303)))
 (let (($x334 (and $x233 $x9)))
 (let (($x70 (= $x334 true)))
 (let (($x374 (= $x70 true)))
 (let (($x88 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x214))))
 (let ((?x381 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (=> $x22 (= ?x381 ?x271)))))))))))
 ))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x25 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (= $x22 $x109)))))))
 ))
 (let (($x247 (forall ((Lambda5 (_ BitVec 32)) )(let (($x418 (= false false)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x101 (_ bv0 32))))
 (=> $x305 $x418))))))
 ))
 (let (($x321 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x25 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x101 (_ bv0 32))))
 (= $x305 $x346)))))))
 ))
 (let (($x265 (and $x321 $x247)))
 (let (($x294 (and $x265 $x194)))
 (let (($x174 (and $x294 $x88)))
 (let (($x318 (= $x174 true)))
 (let (($x130 (= $x318 true)))
 (let (($x185 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x356))))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (=> $x408 (= ?x258 ?x405)))))))))))
 ))
 (let (($x423 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x25 (_ bv1 32))))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (= $x408 $x109)))))))
 ))
 (let (($x161 (forall ((Lambda5 (_ BitVec 32)) )(let (($x418 (= false false)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x279 (_ bv0 32))))
 (=> $x292 $x418))))))
 ))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x25 (_ bv0 32))))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x279 (_ bv0 32))))
 (= $x292 $x346)))))))
 ))
 (let (($x323 (and $x296 $x161)))
 (let (($x201 (and $x323 $x423)))
 (let (($x232 (and $x201 $x185)))
 (let (($x298 (= $x232 true)))
 (let (($x5 (= $x298 true)))
 (let (($x361 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x175))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv2 32))) ?x377)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv3 32))) ?x390)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (=> $x408 (= ?x258 ?x227))))))))))))
 ))
 (let (($x132 (and $x201 $x361)))
 (let (($x87 (= $x132 true)))
 (let (($x347 (= $x87 true)))
 (let ((?x124 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x64 (bvneg ?x124)))
 (let (($x178 (= ?x64 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x415 (= $x178 true)))
 (let (($x52 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x430 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x175))))
 (let ((?x432 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x175 (_ bv2 32))) ?x430)))
 (let ((?x434 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x175 (_ bv3 32))) ?x432)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (=> $x408 (= ?x258 ?x434))))))))))))
 ))
 (let (($x48 (and $x201 $x52)))
 (let (($x150 (= $x48 true)))
 (let (($x414 (= $x150 true)))
 (let (($x76 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x341))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv2 32))) ?x62)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv3 32))) ?x139)))
 (let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (=> $x199 (= ?x143 ?x165))))))))))))
 ))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x25 (_ bv1 32))))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (= $x199 $x109)))))))
 ))
 (let (($x284 (forall ((Lambda5 (_ BitVec 32)) )(let (($x418 (= false false)))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x151 (_ bv0 32))))
 (=> $x34 $x418))))))
 ))
 (let (($x211 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x25 (_ bv0 32))))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x151 (_ bv0 32))))
 (= $x34 $x346)))))))
 ))
 (let (($x72 (and $x211 $x284)))
 (let (($x146 (and $x72 $x8)))
 (let (($x421 (and $x146 $x76)))
 (let (($x228 (= $x421 true)))
 (let (($x183 (= $x228 true)))
 (let (($x386 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x214))))
 (let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (=> $x199 (= ?x143 ?x271)))))))))))
 ))
 (let (($x91 (and $x146 $x386)))
 (let (($x236 (= $x91 true)))
 (let (($x164 (= $x236 true)))
 (let (($x60 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x341))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv2 32))) ?x62)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv3 32))) ?x139)))
 (let ((?x381 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (=> $x22 (= ?x381 ?x165))))))))))))
 ))
 (let (($x230 (and $x294 $x60)))
 (let (($x117 (= $x230 true)))
 (let (($x387 (= $x117 true)))
 (let (($x310 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x175))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv2 32))) ?x377)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv3 32))) ?x390)))
 (let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x99 (_ bv1 32))))
 (=> $x358 (= ?x19 ?x227))))))))))))
 ))
 (let (($x365 (and $x233 $x310)))
 (let (($x401 (= $x365 true)))
 (let (($x400 (= $x401 true)))
 (let (($x388 (= ?x64 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x46 (= $x388 true)))
 (let (($x202 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x341))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv2 32))) ?x171)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv3 32))) ?x80)))
 (let ((?x381 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (=> $x22 (= ?x381 ?x121))))))))))))
 ))
 (let (($x302 (and $x294 $x202)))
 (let (($x37 (= $x302 true)))
 (let (($x307 (= $x37 true)))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x341))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv2 32))) ?x171)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv3 32))) ?x80)))
 (let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (=> $x199 (= ?x143 ?x121))))))))))))
 ))
 (let (($x243 (and $x146 $x27)))
 (let (($x38 (= $x243 true)))
 (let (($x75 (= $x38 true)))
 (let (($x319 (and $x75 $x307)))
 (let (($x343 (and $x319 $x46)))
 (let (($x231 (and $x343 $x400)))
 (let (($x389 (and $x231 $x387)))
 (let (($x210 (and $x389 $x164)))
 (let (($x422 (and $x210 $x183)))
 (let (($x181 (and $x422 $x414)))
 (let (($x419 (and $x181 $x415)))
 (let (($x203 (and $x419 $x347)))
 (let (($x128 (and $x203 $x5)))
 (let (($x116 (and $x128 $x130)))
 (let (($x129 (and $x116 $x374)))
 (let (($x322 (and $x129 $x154)))
 (let (($x439 (and $x322 $x438)))
 (let (($x445 (and $x439 $x444)))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (=> $x408 (= ?x258 ?x19))))))))
 ))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x99 (_ bv1 32))))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (= $x408 $x358))))))))
 ))
 (let (($x399 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x279 (_ bv0 32))))
 (= $x292 $x106))))))))
 ))
 (let (($x332 (and $x399 $x161)))
 (let (($x216 (and $x332 $x169)))
 (let (($x94 (and $x216 $x86)))
 (let (($x446 (and $x94 $x445)))
 (let (($x263 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x381 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (=> $x22 (= ?x381 ?x143))))))))
 ))
 (let (($x11 (forall ((Lambda5 (_ BitVec 32)) )(let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (= $x22 $x199))))))))
 ))
 (let (($x78 (forall ((Lambda5 (_ BitVec 32)) )(let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x151 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x101 (_ bv0 32))))
 (= $x305 $x34))))))))
 ))
 (let (($x40 (and $x78 $x247)))
 (let (($x28 (and $x40 $x11)))
 (let (($x379 (and $x28 $x263)))
 (let (($x447 (and $x379 $x446)))
 (let (($x451 (=> $x447 $x450)))
 (not $x451)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x442 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x448 (=> $x442 true)))
 (let (($x449 (= $x448 true)))
 (let (($x450 (= $x449 true)))
 (let (($x443 (= $x442 true)))
 (let (($x444 (= $x443 true)))
 (let ((?x142 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x364 (= (_ bv0 32) ?x142)))
 (let ((?x135 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x417 (= (_ bv0 32) ?x135)))
 (let ((?x375 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x375)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x259)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x55 (and $x95 $x295)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x45 $x55)))
 (let (($x29 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x407 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x402 (and $x126 $x212)))
 (let (($x92 (not $x402)))
 (let (($x355 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x308 (and $x163 $x355)))
 (let (($x149 (and (not $x308) $x92)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x77 $x114)))
 (let (($x368 (not $x65)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x206 $x118)))
 (let (($x349 (and (not $x362) $x368)))
 (let (($x14 (and (and (and (and (and (and $x349 $x149) $x407) $x29) $x218) $x155) $x417)))
 (let (($x140 (and $x14 $x364)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x398 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x289 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x207 (or false (or false (and (and true (or $x289 $x398)) (or $x249 $x197))))))
 (let (($x385 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x207)))
 (let (($x339 (and $x385 $x140)))
 (let (($x437 (= $x339 true)))
 (let (($x438 (= $x437 true)))
 (let (($x177 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x53 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x148 (and $x53 $x177)))
 (let (($x312 (= $x148 true)))
 (let (($x154 (= $x312 true)))
 (let (($x9 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x356))))
 (let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x99 (_ bv1 32))))
 (=> $x358 (= ?x19 ?x405)))))))))))
 ))
 (let (($x303 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x25 (_ bv1 32))))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x99 (_ bv1 32))))
 (= $x358 $x109)))))))
 ))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let (($x418 (= false false)))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (=> $x106 $x418))))))
 ))
 (let (($x345 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x25 (_ bv0 32))))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (= $x106 $x346)))))))
 ))
 (let (($x182 (and $x345 $x205)))
 (let (($x233 (and $x182 $x303)))
 (let (($x334 (and $x233 $x9)))
 (let (($x70 (= $x334 true)))
 (let (($x374 (= $x70 true)))
 (let (($x88 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x214))))
 (let ((?x381 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (=> $x22 (= ?x381 ?x271)))))))))))
 ))
 (let (($x194 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x25 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (= $x22 $x109)))))))
 ))
 (let (($x247 (forall ((Lambda5 (_ BitVec 32)) )(let (($x418 (= false false)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x101 (_ bv0 32))))
 (=> $x305 $x418))))))
 ))
 (let (($x321 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x25 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x101 (_ bv0 32))))
 (= $x305 $x346)))))))
 ))
 (let (($x265 (and $x321 $x247)))
 (let (($x294 (and $x265 $x194)))
 (let (($x174 (and $x294 $x88)))
 (let (($x318 (= $x174 true)))
 (let (($x130 (= $x318 true)))
 (let (($x185 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x356))))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (=> $x408 (= ?x258 ?x405)))))))))))
 ))
 (let (($x423 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x25 (_ bv1 32))))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (= $x408 $x109)))))))
 ))
 (let (($x161 (forall ((Lambda5 (_ BitVec 32)) )(let (($x418 (= false false)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x279 (_ bv0 32))))
 (=> $x292 $x418))))))
 ))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x25 (_ bv0 32))))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x279 (_ bv0 32))))
 (= $x292 $x346)))))))
 ))
 (let (($x323 (and $x296 $x161)))
 (let (($x201 (and $x323 $x423)))
 (let (($x232 (and $x201 $x185)))
 (let (($x298 (= $x232 true)))
 (let (($x5 (= $x298 true)))
 (let (($x361 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x175))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv2 32))) ?x377)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv3 32))) ?x390)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (=> $x408 (= ?x258 ?x227))))))))))))
 ))
 (let (($x132 (and $x201 $x361)))
 (let (($x87 (= $x132 true)))
 (let (($x347 (= $x87 true)))
 (let ((?x124 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x64 (bvneg ?x124)))
 (let (($x178 (= ?x64 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x415 (= $x178 true)))
 (let (($x52 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x430 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x175))))
 (let ((?x432 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x175 (_ bv2 32))) ?x430)))
 (let ((?x434 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x175 (_ bv3 32))) ?x432)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (=> $x408 (= ?x258 ?x434))))))))))))
 ))
 (let (($x48 (and $x201 $x52)))
 (let (($x150 (= $x48 true)))
 (let (($x414 (= $x150 true)))
 (let (($x76 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x341))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv2 32))) ?x62)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv3 32))) ?x139)))
 (let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (=> $x199 (= ?x143 ?x165))))))))))))
 ))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x25 (_ bv1 32))))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (= $x199 $x109)))))))
 ))
 (let (($x284 (forall ((Lambda5 (_ BitVec 32)) )(let (($x418 (= false false)))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x151 (_ bv0 32))))
 (=> $x34 $x418))))))
 ))
 (let (($x211 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x25 (_ bv0 32))))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x151 (_ bv0 32))))
 (= $x34 $x346)))))))
 ))
 (let (($x72 (and $x211 $x284)))
 (let (($x146 (and $x72 $x8)))
 (let (($x421 (and $x146 $x76)))
 (let (($x228 (= $x421 true)))
 (let (($x183 (= $x228 true)))
 (let (($x386 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x214))))
 (let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (=> $x199 (= ?x143 ?x271)))))))))))
 ))
 (let (($x91 (and $x146 $x386)))
 (let (($x236 (= $x91 true)))
 (let (($x164 (= $x236 true)))
 (let (($x60 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x341))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv2 32))) ?x62)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x341 (_ bv3 32))) ?x139)))
 (let ((?x381 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (=> $x22 (= ?x381 ?x165))))))))))))
 ))
 (let (($x230 (and $x294 $x60)))
 (let (($x117 (= $x230 true)))
 (let (($x387 (= $x117 true)))
 (let (($x310 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x175 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x377 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x175))))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv2 32))) ?x377)))
 (let ((?x227 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x175 (_ bv3 32))) ?x390)))
 (let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x99 (_ bv1 32))))
 (=> $x358 (= ?x19 ?x227))))))))))))
 ))
 (let (($x365 (and $x233 $x310)))
 (let (($x401 (= $x365 true)))
 (let (($x400 (= $x401 true)))
 (let (($x388 (= ?x64 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x46 (= $x388 true)))
 (let (($x202 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x341))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv2 32))) ?x171)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv3 32))) ?x80)))
 (let ((?x381 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (=> $x22 (= ?x381 ?x121))))))))))))
 ))
 (let (($x302 (and $x294 $x202)))
 (let (($x37 (= $x302 true)))
 (let (($x307 (= $x37 true)))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x341 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x341))))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv2 32))) ?x171)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x341 (_ bv3 32))) ?x80)))
 (let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (=> $x199 (= ?x143 ?x121))))))))))))
 ))
 (let (($x243 (and $x146 $x27)))
 (let (($x38 (= $x243 true)))
 (let (($x75 (= $x38 true)))
 (let (($x319 (and $x75 $x307)))
 (let (($x343 (and $x319 $x46)))
 (let (($x231 (and $x343 $x400)))
 (let (($x389 (and $x231 $x387)))
 (let (($x210 (and $x389 $x164)))
 (let (($x422 (and $x210 $x183)))
 (let (($x181 (and $x422 $x414)))
 (let (($x419 (and $x181 $x415)))
 (let (($x203 (and $x419 $x347)))
 (let (($x128 (and $x203 $x5)))
 (let (($x116 (and $x128 $x130)))
 (let (($x129 (and $x116 $x374)))
 (let (($x322 (and $x129 $x154)))
 (let (($x439 (and $x322 $x438)))
 (let (($x445 (and $x439 $x444)))
 (let (($x86 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x19 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x258 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (=> $x408 (= ?x258 ?x19))))))))
 ))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x99 (_ bv1 32))))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x279 (_ bv1 32))))
 (= $x408 $x358))))))))
 ))
 (let (($x399 (forall ((Lambda5 (_ BitVec 32)) )(let (($x134 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x99 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (let (($x96 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x279 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x279 (_ bv0 32))))
 (= $x292 $x106))))))))
 ))
 (let (($x332 (and $x399 $x161)))
 (let (($x216 (and $x332 $x169)))
 (let (($x94 (and $x216 $x86)))
 (let (($x446 (and $x94 $x445)))
 (let (($x263 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x381 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (=> $x22 (= ?x381 ?x143))))))))
 ))
 (let (($x11 (forall ((Lambda5 (_ BitVec 32)) )(let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x151 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x101 (_ bv1 32))))
 (= $x22 $x199))))))))
 ))
 (let (($x78 (forall ((Lambda5 (_ BitVec 32)) )(let (($x351 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x151 (ite $x351 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (= ?x151 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x101 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (= ?x101 (_ bv0 32))))
 (= $x305 $x34))))))))
 ))
 (let (($x40 (and $x78 $x247)))
 (let (($x28 (and $x40 $x11)))
 (let (($x379 (and $x28 $x263)))
 (let (($x447 (and $x379 $x446)))
 (let (($x451 (=> $x447 $x450)))
 (not $x451)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 398 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x454 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x455 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x454)))
 (let ((?x172 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L2%3%fcallEnd)))
 (let ((?x453 (bvadd input.spec-%var-fi-0.L2%3%fcallStart ?x172)))
 (let (($x456 (= ?x453 ?x455)))
 (let (($x457 (= $x456 true)))
 (let (($x458 (= $x457 true)))
 (let ((?x270 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x104 (bvneg ?x270)))
 (let (($x237 (= ?x104 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x50 (= $x237 true)))
 (let (($x219 (= ?x104 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x179 (= $x219 true)))
 (let (($x192 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x297 (= $x192 true)))
 (let (($x426 (= $x297 true)))
 (let (($x404 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x337 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x260 (and $x337 $x404)))
 (let (($x424 (and $x260 $x192)))
 (let (($x152 (= $x424 true)))
 (let (($x282 (= $x152 true)))
 (let ((?x224 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x317 (= (_ bv0 32) ?x224)))
 (let ((?x336 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x340 (= (_ bv0 32) ?x336)))
 (let ((?x84 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x57 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x309 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x410 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x242 (and $x410 $x309)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x397 (and $x255 $x242)))
 (let (($x157 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (and $x127 $x188)))
 (let (($x395 (not $x411)))
 (let (($x413 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x145 $x413)))
 (let (($x209 (and (not $x274) $x395)))
 (let (($x376 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x394 $x376)))
 (let (($x66 (not $x158)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x391 (and $x51 $x235)))
 (let (($x6 (and (not $x391) $x66)))
 (let (($x184 (and (and (and (and (and (and $x6 $x209) $x136) $x157) $x397) $x262) $x340)))
 (let (($x20 (and $x184 $x317)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x324 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x31 (or false (or false (and (and true (or $x324 $x220)) (or $x71 $x252))))))
 (let (($x378 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x42 (and $x378 $x20)))
 (let (($x190 (= $x42 true)))
 (let (($x383 (= $x190 true)))
 (let (($x44 (= $x260 true)))
 (let (($x360 (= $x44 true)))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x122))))
 (let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x108 (_ bv1 32))))
 (=> $x223 (= ?x80 ?x208)))))))))))
 ))
 (let (($x201 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x37 (_ bv1 32))))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x108 (_ bv1 32))))
 (= $x223 $x273)))))))
 ))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x108 (_ bv0 32))))
 (=> $x284 $x381))))))
 ))
 (let (($x183 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x37 (_ bv0 32))))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x108 (_ bv0 32))))
 (= $x284 $x307)))))))
 ))
 (let (($x323 (and $x183 $x296)))
 (let (($x433 (and $x323 $x201)))
 (let (($x137 (and $x433 $x98)))
 (let (($x61 (= $x137 true)))
 (let (($x253 (= $x61 true)))
 (let (($x54 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x398))))
 (let ((?x299 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (=> $x134 (= ?x299 ?x249)))))))))))
 ))
 (let (($x271 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x37 (_ bv1 32))))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (= $x134 $x273)))))))
 ))
 (let (($x7 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x199 (_ bv0 32))))
 (=> $x266 $x381))))))
 ))
 (let (($x21 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x37 (_ bv0 32))))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x199 (_ bv0 32))))
 (= $x266 $x307)))))))
 ))
 (let (($x338 (and $x21 $x7)))
 (let (($x105 (and $x338 $x271)))
 (let (($x23 (and $x105 $x54)))
 (let (($x107 (= $x23 true)))
 (let (($x112 (= $x107 true)))
 (let (($x221 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x122))))
 (let ((?x225 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (=> $x330 (= ?x225 ?x208)))))))))))
 ))
 (let (($x402 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x37 (_ bv1 32))))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (= $x330 $x273)))))))
 ))
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x72 (_ bv0 32))))
 (=> $x109 $x381))))))
 ))
 (let (($x308 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x37 (_ bv0 32))))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x72 (_ bv0 32))))
 (= $x109 $x307)))))))
 ))
 (let (($x313 (and $x308 $x113)))
 (let (($x92 (and $x313 $x402)))
 (let (($x153 (and $x92 $x221)))
 (let (($x193 (= $x153 true)))
 (let (($x82 (= $x193 true)))
 (let (($x439 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x178))))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x264)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x87)))
 (let ((?x225 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (=> $x330 (= ?x225 ?x41))))))))))))
 ))
 (let (($x440 (and $x92 $x439)))
 (let (($x441 (= $x440 true)))
 (let (($x442 (= $x441 true)))
 (let (($x135 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x178))))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x295)))
 (let ((?x375 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x218)))
 (let ((?x225 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (=> $x330 (= ?x225 ?x375))))))))))))
 ))
 (let (($x417 (and $x92 $x135)))
 (let (($x14 (= $x417 true)))
 (let (($x142 (= $x14 true)))
 (let (($x77 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x231))))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x116)))
 (let ((?x334 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x367)))
 (let ((?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (=> $x292 (= ?x408 ?x334))))))))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x37 (_ bv1 32))))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (= $x292 $x273)))))))
 ))
 (let (($x64 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x40 (_ bv0 32))))
 (=> $x22 $x381))))))
 ))
 (let (($x290 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x37 (_ bv0 32))))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x40 (_ bv0 32))))
 (= $x22 $x307)))))))
 ))
 (let (($x388 (and $x290 $x64)))
 (let (($x205 (and $x388 $x246)))
 (let (($x114 (and $x205 $x77)))
 (let (($x65 (= $x114 true)))
 (let (($x368 (= $x65 true)))
 (let (($x344 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x398))))
 (let ((?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (=> $x292 (= ?x408 ?x249)))))))))))
 ))
 (let (($x173 (and $x205 $x344)))
 (let (($x272 (= $x173 true)))
 (let (($x207 (= $x272 true)))
 (let (($x129 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x231))))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x116)))
 (let ((?x334 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x367)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (=> $x134 (= ?x299 ?x334))))))))))))
 ))
 (let (($x256 (and $x105 $x129)))
 (let (($x285 (= $x256 true)))
 (let (($x53 (= $x285 true)))
 (let (($x131 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x178))))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x264)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x87)))
 (let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x108 (_ bv1 32))))
 (=> $x223 (= ?x80 ?x41))))))))))))
 ))
 (let (($x356 (and $x433 $x131)))
 (let (($x47 (= $x356 true)))
 (let (($x405 (= $x47 true)))
 (let (($x164 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x231))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x59)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x139)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (=> $x134 (= ?x299 ?x115))))))))))))
 ))
 (let (($x210 (and $x105 $x164)))
 (let (($x369 (= $x210 true)))
 (let (($x167 (= $x369 true)))
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x231))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x59)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x139)))
 (let ((?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (=> $x292 (= ?x408 ?x115))))))))))))
 ))
 (let (($x387 (and $x205 $x117)))
 (let (($x389 (= $x387 true)))
 (let (($x275 (= $x389 true)))
 (let (($x76 (and $x275 $x167)))
 (let (($x15 (and $x76 $x405)))
 (let (($x354 (and $x15 $x53)))
 (let (($x385 (and $x354 $x207)))
 (let (($x349 (and $x385 $x368)))
 (let (($x364 (and $x349 $x142)))
 (let (($x443 (and $x364 $x442)))
 (let (($x291 (and $x443 $x82)))
 (let (($x409 (and $x291 $x112)))
 (let (($x111 (and $x409 $x253)))
 (let (($x180 (and $x111 $x360)))
 (let (($x222 (and $x180 $x383)))
 (let (($x425 (and $x222 $x282)))
 (let (($x427 (and $x425 $x426)))
 (let (($x348 (and $x427 $x179)))
 (let (($x85 (and $x348 $x50)))
 (let (($x38 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x225 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (=> $x330 (= ?x225 ?x80))))))))
 ))
 (let (($x350 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x108 (_ bv1 32))))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (= $x330 $x223))))))))
 ))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x108 (_ bv0 32))))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x72 (_ bv0 32))))
 (= $x109 $x284))))))))
 ))
 (let (($x176 (and $x8 $x113)))
 (let (($x268 (and $x176 $x350)))
 (let (($x75 (and $x268 $x38)))
 (let (($x93 (and $x75 $x85)))
 (let (($x19 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (=> $x134 (= ?x299 ?x408))))))))
 ))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (= $x134 $x292))))))))
 ))
 (let (($x28 (forall ((Lambda5 (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x40 (_ bv0 32))))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x199 (_ bv0 32))))
 (= $x266 $x22))))))))
 ))
 (let (($x263 (and $x28 $x7)))
 (let (($x123 (and $x263 $x106)))
 (let (($x241 (and $x123 $x19)))
 (let (($x257 (and $x241 $x93)))
 (let (($x459 (=> $x257 $x458)))
 (not $x459)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x454 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x455 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x454)))
 (let ((?x172 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L2%3%fcallEnd)))
 (let ((?x453 (bvadd input.spec-%var-fi-0.L2%3%fcallStart ?x172)))
 (let (($x456 (= ?x453 ?x455)))
 (let (($x457 (= $x456 true)))
 (let (($x458 (= $x457 true)))
 (let ((?x270 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x104 (bvneg ?x270)))
 (let (($x237 (= ?x104 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x50 (= $x237 true)))
 (let (($x219 (= ?x104 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x179 (= $x219 true)))
 (let (($x192 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x297 (= $x192 true)))
 (let (($x426 (= $x297 true)))
 (let (($x404 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x337 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x260 (and $x337 $x404)))
 (let (($x424 (and $x260 $x192)))
 (let (($x152 (= $x424 true)))
 (let (($x282 (= $x152 true)))
 (let ((?x224 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x317 (= (_ bv0 32) ?x224)))
 (let ((?x336 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x340 (= (_ bv0 32) ?x336)))
 (let ((?x84 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x57 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x309 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x410 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x242 (and $x410 $x309)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x397 (and $x255 $x242)))
 (let (($x157 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (and $x127 $x188)))
 (let (($x395 (not $x411)))
 (let (($x413 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x145 $x413)))
 (let (($x209 (and (not $x274) $x395)))
 (let (($x376 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (and $x394 $x376)))
 (let (($x66 (not $x158)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x391 (and $x51 $x235)))
 (let (($x6 (and (not $x391) $x66)))
 (let (($x184 (and (and (and (and (and (and $x6 $x209) $x136) $x157) $x397) $x262) $x340)))
 (let (($x20 (and $x184 $x317)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x324 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x31 (or false (or false (and (and true (or $x324 $x220)) (or $x71 $x252))))))
 (let (($x378 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x42 (and $x378 $x20)))
 (let (($x190 (= $x42 true)))
 (let (($x383 (= $x190 true)))
 (let (($x44 (= $x260 true)))
 (let (($x360 (= $x44 true)))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x122))))
 (let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x108 (_ bv1 32))))
 (=> $x223 (= ?x80 ?x208)))))))))))
 ))
 (let (($x201 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x37 (_ bv1 32))))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x108 (_ bv1 32))))
 (= $x223 $x273)))))))
 ))
 (let (($x296 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x108 (_ bv0 32))))
 (=> $x284 $x381))))))
 ))
 (let (($x183 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x37 (_ bv0 32))))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x108 (_ bv0 32))))
 (= $x284 $x307)))))))
 ))
 (let (($x323 (and $x183 $x296)))
 (let (($x433 (and $x323 $x201)))
 (let (($x137 (and $x433 $x98)))
 (let (($x61 (= $x137 true)))
 (let (($x253 (= $x61 true)))
 (let (($x54 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x398))))
 (let ((?x299 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (=> $x134 (= ?x299 ?x249)))))))))))
 ))
 (let (($x271 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x37 (_ bv1 32))))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (= $x134 $x273)))))))
 ))
 (let (($x7 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x199 (_ bv0 32))))
 (=> $x266 $x381))))))
 ))
 (let (($x21 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x37 (_ bv0 32))))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x199 (_ bv0 32))))
 (= $x266 $x307)))))))
 ))
 (let (($x338 (and $x21 $x7)))
 (let (($x105 (and $x338 $x271)))
 (let (($x23 (and $x105 $x54)))
 (let (($x107 (= $x23 true)))
 (let (($x112 (= $x107 true)))
 (let (($x221 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x122))))
 (let ((?x225 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (=> $x330 (= ?x225 ?x208)))))))))))
 ))
 (let (($x402 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x37 (_ bv1 32))))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (= $x330 $x273)))))))
 ))
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x72 (_ bv0 32))))
 (=> $x109 $x381))))))
 ))
 (let (($x308 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x37 (_ bv0 32))))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x72 (_ bv0 32))))
 (= $x109 $x307)))))))
 ))
 (let (($x313 (and $x308 $x113)))
 (let (($x92 (and $x313 $x402)))
 (let (($x153 (and $x92 $x221)))
 (let (($x193 (= $x153 true)))
 (let (($x82 (= $x193 true)))
 (let (($x439 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x178))))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x264)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x87)))
 (let ((?x225 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (=> $x330 (= ?x225 ?x41))))))))))))
 ))
 (let (($x440 (and $x92 $x439)))
 (let (($x441 (= $x440 true)))
 (let (($x442 (= $x441 true)))
 (let (($x135 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x295 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x178))))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x295)))
 (let ((?x375 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x218)))
 (let ((?x225 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (=> $x330 (= ?x225 ?x375))))))))))))
 ))
 (let (($x417 (and $x92 $x135)))
 (let (($x14 (= $x417 true)))
 (let (($x142 (= $x14 true)))
 (let (($x77 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x231))))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x116)))
 (let ((?x334 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x367)))
 (let ((?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (=> $x292 (= ?x408 ?x334))))))))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x37 (_ bv1 32))))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (= $x292 $x273)))))))
 ))
 (let (($x64 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x40 (_ bv0 32))))
 (=> $x22 $x381))))))
 ))
 (let (($x290 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x37 (_ bv0 32))))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x40 (_ bv0 32))))
 (= $x22 $x307)))))))
 ))
 (let (($x388 (and $x290 $x64)))
 (let (($x205 (and $x388 $x246)))
 (let (($x114 (and $x205 $x77)))
 (let (($x65 (= $x114 true)))
 (let (($x368 (= $x65 true)))
 (let (($x344 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x398))))
 (let ((?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (=> $x292 (= ?x408 ?x249)))))))))))
 ))
 (let (($x173 (and $x205 $x344)))
 (let (($x272 (= $x173 true)))
 (let (($x207 (= $x272 true)))
 (let (($x129 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x116 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x231))))
 (let ((?x367 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x116)))
 (let ((?x334 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x367)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (=> $x134 (= ?x299 ?x334))))))))))))
 ))
 (let (($x256 (and $x105 $x129)))
 (let (($x285 (= $x256 true)))
 (let (($x53 (= $x285 true)))
 (let (($x131 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x178 (bvadd ?x400 input.dst.llvm-%m1)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x178))))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x264)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x87)))
 (let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x108 (_ bv1 32))))
 (=> $x223 (= ?x80 ?x41))))))))))))
 ))
 (let (($x356 (and $x433 $x131)))
 (let (($x47 (= $x356 true)))
 (let (($x405 (= $x47 true)))
 (let (($x164 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x231))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x59)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x139)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (=> $x134 (= ?x299 ?x115))))))))))))
 ))
 (let (($x210 (and $x105 $x164)))
 (let (($x369 (= $x210 true)))
 (let (($x167 (= $x369 true)))
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x231 (bvadd ?x400 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x231))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv2 32))) ?x59)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x231 (_ bv3 32))) ?x139)))
 (let ((?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (=> $x292 (= ?x408 ?x115))))))))))))
 ))
 (let (($x387 (and $x205 $x117)))
 (let (($x389 (= $x387 true)))
 (let (($x275 (= $x389 true)))
 (let (($x76 (and $x275 $x167)))
 (let (($x15 (and $x76 $x405)))
 (let (($x354 (and $x15 $x53)))
 (let (($x385 (and $x354 $x207)))
 (let (($x349 (and $x385 $x368)))
 (let (($x364 (and $x349 $x142)))
 (let (($x443 (and $x364 $x442)))
 (let (($x291 (and $x443 $x82)))
 (let (($x409 (and $x291 $x112)))
 (let (($x111 (and $x409 $x253)))
 (let (($x180 (and $x111 $x360)))
 (let (($x222 (and $x180 $x383)))
 (let (($x425 (and $x222 $x282)))
 (let (($x427 (and $x425 $x426)))
 (let (($x348 (and $x427 $x179)))
 (let (($x85 (and $x348 $x50)))
 (let (($x38 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x80 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x225 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (=> $x330 (= ?x225 ?x80))))))))
 ))
 (let (($x350 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x108 (_ bv1 32))))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x330 (bvuge ?x72 (_ bv1 32))))
 (= $x330 $x223))))))))
 ))
 (let (($x8 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x108 (_ bv0 32))))
 (let (($x86 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x72 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (= ?x72 (_ bv0 32))))
 (= $x109 $x284))))))))
 ))
 (let (($x176 (and $x8 $x113)))
 (let (($x268 (and $x176 $x350)))
 (let (($x75 (and $x268 $x38)))
 (let (($x93 (and $x75 $x85)))
 (let (($x19 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x408 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (=> $x134 (= ?x299 ?x408))))))))
 ))
 (let (($x106 (forall ((Lambda5 (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x40 (_ bv1 32))))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x199 (_ bv1 32))))
 (= $x134 $x292))))))))
 ))
 (let (($x28 (forall ((Lambda5 (_ BitVec 32)) )(let (($x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x40 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x40 (_ bv0 32))))
 (let (($x245 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x199 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x199 (_ bv0 32))))
 (= $x266 $x22))))))))
 ))
 (let (($x263 (and $x28 $x7)))
 (let (($x123 (and $x263 $x106)))
 (let (($x241 (and $x123 $x19)))
 (let (($x257 (and $x241 $x93)))
 (let (($x459 (=> $x257 $x458)))
 (not $x459)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x54 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x23 (= (_ bv0 32) ?x54)))
 (let ((?x293 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x198 (= (_ bv0 32) ?x293)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x304 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x304)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x120 $x221)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x208 $x153)))
 (let (($x333 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x442 (and $x440 $x441)))
 (let (($x443 (not $x442)))
 (let (($x438 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x439 (and $x437 $x438)))
 (let (($x283 (and (not $x439) $x443)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x417 (and $x238 $x135)))
 (let (($x14 (not $x417)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x218 $x375)))
 (let (($x364 (and (not $x155) $x14)))
 (let (($x98 (and (and (and (and (and (and $x364 $x283) $x261) $x333) $x193) $x291) $x198)))
 (let (($x137 (and $x98 $x23)))
 (let (($x419 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x431 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x433 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x87 (or false (or false (and (and true (or $x433 $x431)) (or $x132 $x419))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x382 (and $x168 $x137)))
 (let (($x192 (= $x382 true)))
 (let (($x424 (= $x192 true)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x188 (concat ?x274 (concat ?x6 ?x158)))))
 (let (($x42 (= ?x411 input.dst.llvm-%m1)))
 (let (($x190 (= $x42 true)))
 (let ((?x276 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x410 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x410 (concat ?x157 (concat ?x136 ?x276)))))
 (let (($x224 (= ?x57 input.dst.llvm-%m2)))
 (let (($x317 (= $x224 true)))
 (let (($x309 (= input.dst.llvm-%m2 ?x57)))
 (let (($x395 (= input.dst.llvm-%m1 ?x411)))
 (let (($x236 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x271 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x164 (and $x271 $x236)))
 (let (($x397 (and (and $x164 $x395) $x309)))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x77 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x77 input.dst.llvm-%m1)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x252))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x273 (_ bv1 32))))
 (=> $x24 (= ?x251 ?x51)))))))))))
 ))
 (let (($x288 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x166 (_ bv1 32))))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x273 (_ bv1 32))))
 (= $x24 $x374)))))))
 ))
 (let (($x400 (forall ((Lambda5 (_ BitVec 32)) )(let (($x408 (= false false)))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x273 (_ bv0 32))))
 (=> $x345 $x408))))))
 ))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x166 (_ bv0 32))))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x273 (_ bv0 32))))
 (= $x345 $x130)))))))
 ))
 (let (($x320 (and $x111 $x400)))
 (let (($x404 (and $x320 $x288)))
 (let (($x394 (and $x404 $x162)))
 (let (($x156 (and $x394 $x397)))
 (let (($x95 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x77 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x114 (bvadd ?x77 input.dst.llvm-%m2)))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x355))))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x99 (_ bv1 32))))
 (=> $x108 (= ?x113 ?x234)))))))))))
 ))
 (let (($x256 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x166 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x99 (_ bv1 32))))
 (= $x108 $x374)))))))
 ))
 (let (($x19 (forall ((Lambda5 (_ BitVec 32)) )(let (($x408 (= false false)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (=> $x106 $x408))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x166 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (= $x106 $x130)))))))
 ))
 (let (($x367 (and $x116 $x19)))
 (let (($x285 (and $x367 $x256)))
 (let (($x295 (and $x285 $x95)))
 (let (($x326 (and (and (and $x168 $x295) $x137) $x156)))
 (let (($x336 (= $x326 true)))
 (let (($x340 (= $x336 true)))
 (let (($x210 (= $x164 true)))
 (let (($x369 (= $x210 true)))
 (let (($x184 (and $x369 $x340)))
 (let (($x20 (and $x184 $x317)))
 (let (($x383 (and $x20 $x190)))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x115 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x273 (_ bv1 32))))
 (=> $x24 (= ?x251 ?x115))))))))
 ))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let (($x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x64 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x273 (_ bv1 32))))
 (= $x24 (bvuge ?x64 (_ bv1 32)))))))))
 ))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let (($x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x64 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x273 (_ bv0 32))))
 (= $x345 (= ?x64 (_ bv0 32)))))))))
 ))
 (let (($x175 (and $x205 $x400)))
 (let (($x196 (and $x175 $x62)))
 (let (($x301 (and $x196 $x275)))
 (let (($x222 (and $x301 $x383)))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x223 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x99 (_ bv1 32))))
 (=> $x108 (= ?x113 ?x223))))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x134 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x99 (_ bv1 32))))
 (= $x108 (bvuge ?x134 (_ bv1 32)))))))))
 ))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x134 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (= $x106 (= ?x134 (_ bv0 32)))))))))
 ))
 (let (($x241 (and $x299 $x19)))
 (let (($x8 (and $x241 $x69)))
 (let (($x243 (and $x8 $x27)))
 (let (($x213 (and $x243 $x222)))
 (let (($x152 (=> $x213 $x424)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x54 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x23 (= (_ bv0 32) ?x54)))
 (let ((?x293 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x198 (= (_ bv0 32) ?x293)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x304 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x304)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x120 $x221)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x193 (and $x208 $x153)))
 (let (($x333 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x441 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x442 (and $x440 $x441)))
 (let (($x443 (not $x442)))
 (let (($x438 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x439 (and $x437 $x438)))
 (let (($x283 (and (not $x439) $x443)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x417 (and $x238 $x135)))
 (let (($x14 (not $x417)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x218 $x375)))
 (let (($x364 (and (not $x155) $x14)))
 (let (($x98 (and (and (and (and (and (and $x364 $x283) $x261) $x333) $x193) $x291) $x198)))
 (let (($x137 (and $x98 $x23)))
 (let (($x419 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x431 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x433 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x87 (or false (or false (and (and true (or $x433 $x431)) (or $x132 $x419))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x382 (and $x168 $x137)))
 (let (($x192 (= $x382 true)))
 (let (($x424 (= $x192 true)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x188 (concat ?x274 (concat ?x6 ?x158)))))
 (let (($x42 (= ?x411 input.dst.llvm-%m1)))
 (let (($x190 (= $x42 true)))
 (let ((?x276 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x410 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x410 (concat ?x157 (concat ?x136 ?x276)))))
 (let (($x224 (= ?x57 input.dst.llvm-%m2)))
 (let (($x317 (= $x224 true)))
 (let (($x309 (= input.dst.llvm-%m2 ?x57)))
 (let (($x395 (= input.dst.llvm-%m1 ?x411)))
 (let (($x236 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x271 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x164 (and $x271 $x236)))
 (let (($x397 (and (and $x164 $x395) $x309)))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x77 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x357 (bvadd ?x77 input.dst.llvm-%m1)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x252))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x273 (_ bv1 32))))
 (=> $x24 (= ?x251 ?x51)))))))))))
 ))
 (let (($x288 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x166 (_ bv1 32))))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x273 (_ bv1 32))))
 (= $x24 $x374)))))))
 ))
 (let (($x400 (forall ((Lambda5 (_ BitVec 32)) )(let (($x408 (= false false)))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x273 (_ bv0 32))))
 (=> $x345 $x408))))))
 ))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x166 (_ bv0 32))))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x273 (_ bv0 32))))
 (= $x345 $x130)))))))
 ))
 (let (($x320 (and $x111 $x400)))
 (let (($x404 (and $x320 $x288)))
 (let (($x394 (and $x404 $x162)))
 (let (($x156 (and $x394 $x397)))
 (let (($x95 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x77 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x114 (bvadd ?x77 input.dst.llvm-%m2)))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x355))))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x99 (_ bv1 32))))
 (=> $x108 (= ?x113 ?x234)))))))))))
 ))
 (let (($x256 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x166 (_ bv1 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x99 (_ bv1 32))))
 (= $x108 $x374)))))))
 ))
 (let (($x19 (forall ((Lambda5 (_ BitVec 32)) )(let (($x408 (= false false)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (=> $x106 $x408))))))
 ))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x166 (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (= $x106 $x130)))))))
 ))
 (let (($x367 (and $x116 $x19)))
 (let (($x285 (and $x367 $x256)))
 (let (($x295 (and $x285 $x95)))
 (let (($x326 (and (and (and $x168 $x295) $x137) $x156)))
 (let (($x336 (= $x326 true)))
 (let (($x340 (= $x336 true)))
 (let (($x210 (= $x164 true)))
 (let (($x369 (= $x210 true)))
 (let (($x184 (and $x369 $x340)))
 (let (($x20 (and $x184 $x317)))
 (let (($x383 (and $x20 $x190)))
 (let (($x275 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x115 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x273 (_ bv1 32))))
 (=> $x24 (= ?x251 ?x115))))))))
 ))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let (($x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x64 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x273 (_ bv1 32))))
 (= $x24 (bvuge ?x64 (_ bv1 32)))))))))
 ))
 (let (($x205 (forall ((Lambda5 (_ BitVec 32)) )(let (($x37 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x64 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x273 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x345 (= ?x273 (_ bv0 32))))
 (= $x345 (= ?x64 (_ bv0 32)))))))))
 ))
 (let (($x175 (and $x205 $x400)))
 (let (($x196 (and $x175 $x62)))
 (let (($x301 (and $x196 $x275)))
 (let (($x222 (and $x301 $x383)))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x223 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x113 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x99 (_ bv1 32))))
 (=> $x108 (= ?x113 ?x223))))))))
 ))
 (let (($x69 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x134 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x99 (_ bv1 32))))
 (= $x108 (bvuge ?x134 (_ bv1 32)))))))))
 ))
 (let (($x299 (forall ((Lambda5 (_ BitVec 32)) )(let (($x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x134 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x99 (ite $x141 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x99 (_ bv0 32))))
 (= $x106 (= ?x134 (_ bv0 32)))))))))
 ))
 (let (($x241 (and $x299 $x19)))
 (let (($x8 (and $x241 $x69)))
 (let (($x243 (and $x8 $x27)))
 (let (($x213 (and $x243 $x222)))
 (let (($x152 (=> $x213 $x424)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x97 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x18 (= (_ bv0 2) ?x97)))
 (let (($x220 (= $x18 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x406 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x398 (concat ?x63 (concat ?x406 ?x70)))))
 (let (($x147 (= ?x215 input.dst.llvm-%m2)))
 (let (($x200 (= $x147 true)))
 (let (($x363 (= input.dst.llvm-%m2 ?x215)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x349 (concat ?x249 (concat ?x114 ?x177)))))
 (let (($x405 (= input.dst.llvm-%m1 ?x65)))
 (let (($x218 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x95 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x375 (and $x95 $x218)))
 (let (($x385 (and (and $x375 $x405) $x363)))
 (let (($x356 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x394 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x290 (bvadd ?x394 input.dst.llvm-%m1)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem ?x290))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv2 32))) ?x227))))
 (let ((?x168 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x296 (_ bv1 32))))
 (=> $x419 (= ?x168 ?x228)))))))))))
 ))
 (let (($x72 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x293 (_ bv1 32))))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x296 (_ bv1 32))))
 (= $x419 $x253)))))))
 ))
 (let (($x431 (forall ((Lambda5 (_ BitVec 32)) )(let (($x223 (= false false)))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x296 (_ bv0 32))))
 (=> $x41 $x223))))))
 ))
 (let (($x7 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x293 (_ bv0 32))))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x296 (_ bv0 32))))
 (= $x41 $x198)))))))
 ))
 (let (($x263 (and $x7 $x431)))
 (let (($x109 (and $x263 $x72)))
 (let (($x47 (and $x109 $x356)))
 (let (($x362 (and $x47 $x385)))
 (let ((?x354 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x30 (= (_ bv0 32) ?x354)))
 (let ((?x209 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x376 (= (_ bv0 32) ?x209)))
 (let ((?x167 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x192 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x424 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x192)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (and $x382 $x424)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x282 (and $x213 $x152)))
 (let (($x222 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x340 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (and $x340 $x184)))
 (let (($x317 (not $x224)))
 (let (($x326 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x336 (and $x156 $x326)))
 (let (($x42 (and (not $x336) $x317)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x276 $x217)))
 (let (($x57 (not $x384)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x157 $x160)))
 (let (($x397 (and (not $x136) $x57)))
 (let (($x40 (and (and (and (and (and (and $x397 $x42) $x383) $x222) $x282) $x76) $x376)))
 (let (($x22 (and $x40 $x30)))
 (let (($x410 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x394 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x127 (bvadd ?x394 input.dst.llvm-%m2)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x66))))
 (let ((?x400 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x284 (_ bv1 32))))
 (=> $x64 (= ?x400 ?x395)))))))))))
 ))
 (let (($x320 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x293 (_ bv1 32))))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x284 (_ bv1 32))))
 (= $x64 $x253)))))))
 ))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let (($x223 (= false false)))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x284 (_ bv0 32))))
 (=> $x69 $x223))))))
 ))
 (let (($x54 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x293 (_ bv0 32))))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x284 (_ bv0 32))))
 (= $x69 $x198)))))))
 ))
 (let (($x23 (and $x54 $x27)))
 (let (($x337 (and $x23 $x320)))
 (let (($x327 (and $x337 $x410)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x441 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x409 (or false (or false (and (and true (or $x440 $x441)) (or $x204 $x261))))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x409)))
 (let (($x133 (and (and (and $x120 $x327) $x22) $x362)))
 (let (($x260 (= $x133 true)))
 (let (($x187 (= $x260 true)))
 (let (($x155 (= $x375 true)))
 (let (($x142 (= $x155 true)))
 (let (($x212 (= ?x65 input.dst.llvm-%m1)))
 (let (($x234 (= $x212 true)))
 (let (($x238 (and $x234 $x142)))
 (let (($x324 (and $x238 $x187)))
 (let (($x360 (and $x324 $x200)))
 (let (($x367 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x168 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x296 (_ bv1 32))))
 (=> $x419 (= ?x168 ?x15))))))))
 ))
 (let (($x415 (forall ((Lambda5 (_ BitVec 32)) )(let (($x105 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x369 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x296 (_ bv1 32))))
 (= $x419 (bvuge ?x369 (_ bv1 32)))))))))
 ))
 (let (($x201 (forall ((Lambda5 (_ BitVec 32)) )(let (($x105 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x369 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x296 (_ bv0 32))))
 (= $x41 (= ?x369 (_ bv0 32)))))))))
 ))
 (let (($x178 (and $x201 $x431)))
 (let (($x264 (and $x178 $x415)))
 (let (($x374 (and $x264 $x367)))
 (let (($x180 (and $x374 $x360)))
 (let (($x387 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x400 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x284 (_ bv1 32))))
 (=> $x64 (= ?x400 ?x189))))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let (($x299 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x284 (_ bv1 32))))
 (= $x64 (bvuge ?x108 (_ bv1 32)))))))))
 ))
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let (($x299 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x284 (_ bv0 32))))
 (= $x69 (= ?x108 (_ bv0 32)))))))))
 ))
 (let (($x243 (and $x113 $x27)))
 (let (($x205 (and $x243 $x246)))
 (let (($x389 (and $x205 $x387)))
 (let (($x44 (and $x389 $x180)))
 (let (($x244 (=> $x44 $x220)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x97 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x18 (= (_ bv0 2) ?x97)))
 (let (($x220 (= $x18 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x406 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x398 (concat ?x63 (concat ?x406 ?x70)))))
 (let (($x147 (= ?x215 input.dst.llvm-%m2)))
 (let (($x200 (= $x147 true)))
 (let (($x363 (= input.dst.llvm-%m2 ?x215)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x349 (concat ?x249 (concat ?x114 ?x177)))))
 (let (($x405 (= input.dst.llvm-%m1 ?x65)))
 (let (($x218 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x95 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x375 (and $x95 $x218)))
 (let (($x385 (and (and $x375 $x405) $x363)))
 (let (($x356 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x394 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x290 (bvadd ?x394 input.dst.llvm-%m1)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv1 32))) (select input.dst.llvm-mem ?x290))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x290 (_ bv2 32))) ?x227))))
 (let ((?x168 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x296 (_ bv1 32))))
 (=> $x419 (= ?x168 ?x228)))))))))))
 ))
 (let (($x72 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x293 (_ bv1 32))))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x296 (_ bv1 32))))
 (= $x419 $x253)))))))
 ))
 (let (($x431 (forall ((Lambda5 (_ BitVec 32)) )(let (($x223 (= false false)))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x296 (_ bv0 32))))
 (=> $x41 $x223))))))
 ))
 (let (($x7 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x293 (_ bv0 32))))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x296 (_ bv0 32))))
 (= $x41 $x198)))))))
 ))
 (let (($x263 (and $x7 $x431)))
 (let (($x109 (and $x263 $x72)))
 (let (($x47 (and $x109 $x356)))
 (let (($x362 (and $x47 $x385)))
 (let ((?x354 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x30 (= (_ bv0 32) ?x354)))
 (let ((?x209 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x376 (= (_ bv0 32) ?x209)))
 (let ((?x167 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x192 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x424 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x192)))
 (let (($x382 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (and $x382 $x424)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x282 (and $x213 $x152)))
 (let (($x222 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x340 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (and $x340 $x184)))
 (let (($x317 (not $x224)))
 (let (($x326 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x336 (and $x156 $x326)))
 (let (($x42 (and (not $x336) $x317)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x276 $x217)))
 (let (($x57 (not $x384)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x157 $x160)))
 (let (($x397 (and (not $x136) $x57)))
 (let (($x40 (and (and (and (and (and (and $x397 $x42) $x383) $x222) $x282) $x76) $x376)))
 (let (($x22 (and $x40 $x30)))
 (let (($x410 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x394 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x127 (bvadd ?x394 input.dst.llvm-%m2)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x66))))
 (let ((?x400 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x284 (_ bv1 32))))
 (=> $x64 (= ?x400 ?x395)))))))))))
 ))
 (let (($x320 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x293 (_ bv1 32))))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x284 (_ bv1 32))))
 (= $x64 $x253)))))))
 ))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let (($x223 (= false false)))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x284 (_ bv0 32))))
 (=> $x69 $x223))))))
 ))
 (let (($x54 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x293 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (= ?x293 (_ bv0 32))))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x284 (_ bv0 32))))
 (= $x69 $x198)))))))
 ))
 (let (($x23 (and $x54 $x27)))
 (let (($x337 (and $x23 $x320)))
 (let (($x327 (and $x337 $x410)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x441 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x409 (or false (or false (and (and true (or $x440 $x441)) (or $x204 $x261))))))
 (let (($x120 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x409)))
 (let (($x133 (and (and (and $x120 $x327) $x22) $x362)))
 (let (($x260 (= $x133 true)))
 (let (($x187 (= $x260 true)))
 (let (($x155 (= $x375 true)))
 (let (($x142 (= $x155 true)))
 (let (($x212 (= ?x65 input.dst.llvm-%m1)))
 (let (($x234 (= $x212 true)))
 (let (($x238 (and $x234 $x142)))
 (let (($x324 (and $x238 $x187)))
 (let (($x360 (and $x324 $x200)))
 (let (($x367 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x168 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x296 (_ bv1 32))))
 (=> $x419 (= ?x168 ?x15))))))))
 ))
 (let (($x415 (forall ((Lambda5 (_ BitVec 32)) )(let (($x105 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x369 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x419 (bvuge ?x296 (_ bv1 32))))
 (= $x419 (bvuge ?x369 (_ bv1 32)))))))))
 ))
 (let (($x201 (forall ((Lambda5 (_ BitVec 32)) )(let (($x105 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x369 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x296 (ite $x301 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x296 (_ bv0 32))))
 (= $x41 (= ?x369 (_ bv0 32)))))))))
 ))
 (let (($x178 (and $x201 $x431)))
 (let (($x264 (and $x178 $x415)))
 (let (($x374 (and $x264 $x367)))
 (let (($x180 (and $x374 $x360)))
 (let (($x387 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x400 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x284 (_ bv1 32))))
 (=> $x64 (= ?x400 ?x189))))))))
 ))
 (let (($x246 (forall ((Lambda5 (_ BitVec 32)) )(let (($x299 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x284 (_ bv1 32))))
 (= $x64 (bvuge ?x108 (_ bv1 32)))))))))
 ))
 (let (($x113 (forall ((Lambda5 (_ BitVec 32)) )(let (($x299 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x108 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x284 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x284 (_ bv0 32))))
 (= $x69 (= ?x108 (_ bv0 32)))))))))
 ))
 (let (($x243 (and $x113 $x27)))
 (let (($x205 (and $x243 $x246)))
 (let (($x389 (and $x205 $x387)))
 (let (($x44 (and $x389 $x180)))
 (let (($x244 (=> $x44 $x220)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 212 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x202 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x60 (= (_ bv0 2) ?x202)))
 (let (($x58 (= $x60 true)))
 (let ((?x226 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x32 (concat ?x281 (concat ?x262 ?x226)))))
 (let (($x321 (= ?x74 input.dst.llvm-%m1)))
 (let (($x59 (= $x321 true)))
 (let ((?x333 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x54 (concat ?x314 (concat ?x120 ?x333)))))
 (let (($x378 (= input.dst.llvm-%m2 ?x23)))
 (let (($x280 (= input.dst.llvm-%m1 ?x74)))
 (let (($x411 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x127 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x6 (and $x127 $x411)))
 (let (($x252 (and (and $x6 $x280) $x378)))
 (let (($x221 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x230 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x236 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x347))))
 (let ((?x437 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x173 (_ bv1 32))))
 (=> $x375 (= ?x437 ?x130)))))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x176 (_ bv1 32))))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x173 (_ bv1 32))))
 (= $x375 $x152)))))))
 ))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let (($x189 (= false false)))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x173 (_ bv0 32))))
 (=> $x308 $x189))))))
 ))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x176 (_ bv0 32))))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x173 (_ bv0 32))))
 (= $x308 $x222)))))))
 ))
 (let (($x19 (and $x258 $x55)))
 (let (($x273 (and $x19 $x75)))
 (let (($x153 (and $x273 $x221)))
 (let (($x235 (and $x153 $x252)))
 (let ((?x285 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x288 (= (_ bv0 32) ?x285)))
 (let ((?x135 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x334 (= (_ bv0 32) ?x135)))
 (let ((?x425 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x425)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x220 (and $x83 $x18)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x44 $x220)))
 (let (($x180 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (and $x362 $x133)))
 (let (($x187 (not $x260)))
 (let (($x363 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x385 (and $x215 $x363)))
 (let (($x147 (and (not $x385) $x187)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x63 $x90)))
 (let (($x70 (not $x406)))
 (let (($x398 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x289 $x398)))
 (let (($x197 (and (not $x207) $x70)))
 (let (($x141 (and (and (and (and (and (and $x197 $x147) $x200) $x180) $x244) $x256) $x334)))
 (let (($x134 (and $x141 $x288)))
 (let (($x405 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x230 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x117 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x231))))
 (let ((?x431 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x388 (_ bv1 32))))
 (=> $x369 (= ?x431 ?x131)))))))))))
 ))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x176 (_ bv1 32))))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x388 (_ bv1 32))))
 (= $x369 $x152)))))))
 ))
 (let (($x387 (forall ((Lambda5 (_ BitVec 32)) )(let (($x189 (= false false)))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x388 (_ bv0 32))))
 (=> $x246 $x189))))))
 ))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x176 (_ bv0 32))))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x388 (_ bv0 32))))
 (= $x246 $x222)))))))
 ))
 (let (($x382 (and $x213 $x387)))
 (let (($x167 (and $x382 $x26)))
 (let (($x344 (and $x167 $x405)))
 (let (($x384 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x327 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x327)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x327)))
 (let (($x326 (or false (or false (and (and true (or $x43 $x157)) (or $x217 $x384))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x326)))
 (let (($x11 (and (and (and $x20 $x344) $x134) $x235)))
 (let (($x216 (= $x11 true)))
 (let (($x138 (= $x216 true)))
 (let (($x158 (= $x6 true)))
 (let (($x413 (= $x158 true)))
 (let (($x111 (= ?x23 input.dst.llvm-%m2)))
 (let (($x320 (= $x111 true)))
 (let (($x274 (and $x320 $x413)))
 (let (($x38 (and $x274 $x138)))
 (let (($x307 (and $x38 $x59)))
 (let (($x283 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x73 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x437 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x173 (_ bv1 32))))
 (=> $x375 (= ?x437 ?x73))))))))
 ))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let (($x349 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x114 (ite $x349 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x173 (_ bv1 32))))
 (= $x375 (bvuge ?x114 (_ bv1 32)))))))))
 ))
 (let (($x355 (forall ((Lambda5 (_ BitVec 32)) )(let (($x349 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x114 (ite $x349 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x173 (_ bv0 32))))
 (= $x308 (= ?x114 (_ bv0 32)))))))))
 ))
 (let (($x259 (and $x355 $x55)))
 (let (($x238 (and $x259 $x142)))
 (let (($x204 (and $x238 $x283)))
 (let (($x350 (and $x204 $x307)))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x361 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x431 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x388 (_ bv1 32))))
 (=> $x369 (= ?x431 ?x361))))))))
 ))
 (let (($x323 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x64 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x388 (_ bv1 32))))
 (= $x369 (bvuge ?x64 (_ bv1 32)))))))))
 ))
 (let (($x400 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x64 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x388 (_ bv0 32))))
 (= $x246 (= ?x64 (_ bv0 32)))))))))
 ))
 (let (($x389 (and $x400 $x387)))
 (let (($x201 (and $x389 $x323)))
 (let (($x116 (and $x201 $x318)))
 (let (($x268 (and $x116 $x350)))
 (let (($x302 (=> $x268 $x58)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x202 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x60 (= (_ bv0 2) ?x202)))
 (let (($x58 (= $x60 true)))
 (let ((?x226 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x32 (concat ?x281 (concat ?x262 ?x226)))))
 (let (($x321 (= ?x74 input.dst.llvm-%m1)))
 (let (($x59 (= $x321 true)))
 (let ((?x333 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x54 (concat ?x314 (concat ?x120 ?x333)))))
 (let (($x378 (= input.dst.llvm-%m2 ?x23)))
 (let (($x280 (= input.dst.llvm-%m1 ?x74)))
 (let (($x411 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x127 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x6 (and $x127 $x411)))
 (let (($x252 (and (and $x6 $x280) $x378)))
 (let (($x221 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x230 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x236 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x347))))
 (let ((?x437 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x173 (_ bv1 32))))
 (=> $x375 (= ?x437 ?x130)))))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x176 (_ bv1 32))))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x173 (_ bv1 32))))
 (= $x375 $x152)))))))
 ))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let (($x189 (= false false)))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x173 (_ bv0 32))))
 (=> $x308 $x189))))))
 ))
 (let (($x258 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x176 (_ bv0 32))))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x173 (_ bv0 32))))
 (= $x308 $x222)))))))
 ))
 (let (($x19 (and $x258 $x55)))
 (let (($x273 (and $x19 $x75)))
 (let (($x153 (and $x273 $x221)))
 (let (($x235 (and $x153 $x252)))
 (let ((?x285 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x288 (= (_ bv0 32) ?x285)))
 (let ((?x135 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x334 (= (_ bv0 32) ?x135)))
 (let ((?x425 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x425)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x220 (and $x83 $x18)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x44 $x220)))
 (let (($x180 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (and $x362 $x133)))
 (let (($x187 (not $x260)))
 (let (($x363 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x385 (and $x215 $x363)))
 (let (($x147 (and (not $x385) $x187)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x63 $x90)))
 (let (($x70 (not $x406)))
 (let (($x398 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x289 $x398)))
 (let (($x197 (and (not $x207) $x70)))
 (let (($x141 (and (and (and (and (and (and $x197 $x147) $x200) $x180) $x244) $x256) $x334)))
 (let (($x134 (and $x141 $x288)))
 (let (($x405 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x230 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x117 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv1 32))) (select input.dst.llvm-mem ?x117))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x117 (_ bv2 32))) ?x231))))
 (let ((?x431 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x388 (_ bv1 32))))
 (=> $x369 (= ?x431 ?x131)))))))))))
 ))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x176 (_ bv1 32))))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x388 (_ bv1 32))))
 (= $x369 $x152)))))))
 ))
 (let (($x387 (forall ((Lambda5 (_ BitVec 32)) )(let (($x189 (= false false)))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x388 (_ bv0 32))))
 (=> $x246 $x189))))))
 ))
 (let (($x213 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x176 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x176 (_ bv0 32))))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x388 (_ bv0 32))))
 (= $x246 $x222)))))))
 ))
 (let (($x382 (and $x213 $x387)))
 (let (($x167 (and $x382 $x26)))
 (let (($x344 (and $x167 $x405)))
 (let (($x384 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x327 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x327)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x327)))
 (let (($x326 (or false (or false (and (and true (or $x43 $x157)) (or $x217 $x384))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x326)))
 (let (($x11 (and (and (and $x20 $x344) $x134) $x235)))
 (let (($x216 (= $x11 true)))
 (let (($x138 (= $x216 true)))
 (let (($x158 (= $x6 true)))
 (let (($x413 (= $x158 true)))
 (let (($x111 (= ?x23 input.dst.llvm-%m2)))
 (let (($x320 (= $x111 true)))
 (let (($x274 (and $x320 $x413)))
 (let (($x38 (and $x274 $x138)))
 (let (($x307 (and $x38 $x59)))
 (let (($x283 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x73 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x437 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x173 (_ bv1 32))))
 (=> $x375 (= ?x437 ?x73))))))))
 ))
 (let (($x142 (forall ((Lambda5 (_ BitVec 32)) )(let (($x349 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x114 (ite $x349 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x375 (bvuge ?x173 (_ bv1 32))))
 (= $x375 (bvuge ?x114 (_ bv1 32)))))))))
 ))
 (let (($x355 (forall ((Lambda5 (_ BitVec 32)) )(let (($x349 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x114 (ite $x349 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x173 (ite $x374 (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x173 (_ bv0 32))))
 (= $x308 (= ?x114 (_ bv0 32)))))))))
 ))
 (let (($x259 (and $x355 $x55)))
 (let (($x238 (and $x259 $x142)))
 (let (($x204 (and $x238 $x283)))
 (let (($x350 (and $x204 $x307)))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x361 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x431 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x388 (_ bv1 32))))
 (=> $x369 (= ?x431 ?x361))))))))
 ))
 (let (($x323 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x64 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x369 (bvuge ?x388 (_ bv1 32))))
 (= $x369 (bvuge ?x64 (_ bv1 32)))))))))
 ))
 (let (($x400 (forall ((Lambda5 (_ BitVec 32)) )(let (($x113 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x64 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x388 (ite $x28 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (= ?x388 (_ bv0 32))))
 (= $x246 (= ?x64 (_ bv0 32)))))))))
 ))
 (let (($x389 (and $x400 $x387)))
 (let (($x201 (and $x389 $x323)))
 (let (($x116 (and $x201 $x318)))
 (let (($x268 (and $x116 $x350)))
 (let (($x302 (=> $x268 $x58)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 212 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x420 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x166 (bvadd ?x183 input.dst.llvm-%m2)))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x433))))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x102 (_ bv1 32))))
 (=> $x114 (= ?x55 ?x304)))))))))))
 ))
 (let (($x408 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x360 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x360 (_ bv1 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x102 (_ bv1 32))))
 (= $x114 $x220)))))))
 ))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let (($x361 (= false false)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x102 (_ bv0 32))))
 (=> $x323 $x361))))))
 ))
 (let (($x44 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x360 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x360 (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x102 (_ bv0 32))))
 (= $x323 $x180)))))))
 ))
 (let (($x83 (and $x44 $x318)))
 (let (($x425 (and $x83 $x408)))
 (let (($x32 (and $x425 $x420)))
 (let (($x233 (= $x32 true)))
 (let (($x196 (= $x233 true)))
 (let ((?x192 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x354 (concat ?x86 (concat ?x209 ?x192)))))
 (let (($x275 (= ?x30 input.dst.llvm-%m2)))
 (let (($x21 (= $x275 true)))
 (let (($x40 (= input.dst.llvm-%m2 ?x30)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x382 (concat ?x213 (concat ?x383 (concat ?x20 ?x156)))))
 (let (($x317 (= input.dst.llvm-%m1 ?x382)))
 (let (($x371 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x230 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x124 (and $x230 $x371)))
 (let (($x7 (and (and $x124 $x317) $x40)))
 (let (($x184 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x92 (bvadd ?x183 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x95))))
 (let ((?x242 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x291 (_ bv1 32))))
 (=> $x6 (= ?x242 ?x441)))))))))))
 ))
 (let (($x301 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x360 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x360 (_ bv1 32))))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x291 (_ bv1 32))))
 (= $x6 $x220)))))))
 ))
 (let (($x337 (forall ((Lambda5 (_ BitVec 32)) )(let (($x361 (= false false)))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x291 (_ bv0 32))))
 (=> $x293 $x361))))))
 ))
 (let (($x80 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x360 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x360 (_ bv0 32))))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x291 (_ bv0 32))))
 (= $x293 $x180)))))))
 ))
 (let (($x27 (and $x80 $x337)))
 (let (($x296 (and $x27 $x301)))
 (let (($x224 (and $x296 $x184)))
 (let (($x72 (and $x224 $x7)))
 (let ((?x193 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x76 (= (_ bv0 32) ?x193)))
 (let ((?x188 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x112 (= (_ bv0 32) ?x188)))
 (let ((?x319 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x319)))
 (let ((?x202 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x202)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x58 (and $x330 $x60)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x268 $x58)))
 (let (($x350 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (and $x235 $x11)))
 (let (($x138 (not $x216)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (and $x71 $x378)))
 (let (($x321 (and (not $x252) $x138)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x357 (and $x262 $x226)))
 (let (($x51 (not $x357)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x31 $x281)))
 (let (($x280 (and (not $x137) $x51)))
 (let (($x34 (and (and (and (and (and (and $x280 $x321) $x307) $x350) $x302) $x261) $x112)))
 (let (($x108 (and $x34 $x76)))
 (let (($x406 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x344 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x344)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x391 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x344)))
 (let (($x363 (or false (or false (and (and true (or $x391 $x289)) (or $x90 $x406))))))
 (let (($x324 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x363)))
 (let (($x292 (and (and (and $x324 $x32) $x108) $x72)))
 (let (($x241 (= $x292 true)))
 (let (($x345 (= $x241 true)))
 (let (($x227 (= $x124 true)))
 (let (($x229 (= $x227 true)))
 (let (($x282 (= ?x382 input.dst.llvm-%m1)))
 (let (($x26 (= $x282 true)))
 (let (($x182 (and $x26 $x229)))
 (let (($x9 (and $x182 $x345)))
 (let (($x81 (and $x9 $x21)))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x327 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x242 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x291 (_ bv1 32))))
 (=> $x6 (= ?x242 ?x327))))))))
 ))
 (let (($x413 (forall ((Lambda5 (_ BitVec 32)) )(let (($x54 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x120 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x291 (_ bv1 32))))
 (= $x6 (bvuge ?x120 (_ bv1 32)))))))))
 ))
 (let (($x253 (forall ((Lambda5 (_ BitVec 32)) )(let (($x54 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x120 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x291 (_ bv0 32))))
 (= $x293 (= ?x120 (_ bv0 32)))))))))
 ))
 (let (($x404 (and $x253 $x337)))
 (let (($x274 (and $x404 $x413)))
 (let (($x217 (and $x274 $x309)))
 (let (($x24 (and $x217 $x81)))
 (let (($x442 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x102 (_ bv1 32))))
 (=> $x114 (= ?x55 ?x218))))))))
 ))
 (let (($x65 (forall ((Lambda5 (_ BitVec 32)) )(let (($x400 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x369 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x102 (_ bv1 32))))
 (= $x114 (bvuge ?x369 (_ bv1 32)))))))))
 ))
 (let (($x431 (forall ((Lambda5 (_ BitVec 32)) )(let (($x400 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x369 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x102 (_ bv0 32))))
 (= $x323 (= ?x369 (_ bv0 32)))))))))
 ))
 (let (($x116 (and $x431 $x318)))
 (let (($x355 (and $x116 $x65)))
 (let (($x443 (and $x355 $x442)))
 (let (($x62 (and $x443 $x24)))
 (let (($x91 (=> $x62 $x196)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x420 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x166 (bvadd ?x183 input.dst.llvm-%m2)))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x433))))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x102 (_ bv1 32))))
 (=> $x114 (= ?x55 ?x304)))))))))))
 ))
 (let (($x408 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x360 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x360 (_ bv1 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x102 (_ bv1 32))))
 (= $x114 $x220)))))))
 ))
 (let (($x318 (forall ((Lambda5 (_ BitVec 32)) )(let (($x361 (= false false)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x102 (_ bv0 32))))
 (=> $x323 $x361))))))
 ))
 (let (($x44 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x360 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x360 (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x102 (_ bv0 32))))
 (= $x323 $x180)))))))
 ))
 (let (($x83 (and $x44 $x318)))
 (let (($x425 (and $x83 $x408)))
 (let (($x32 (and $x425 $x420)))
 (let (($x233 (= $x32 true)))
 (let (($x196 (= $x233 true)))
 (let ((?x192 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x30 (concat ?x354 (concat ?x86 (concat ?x209 ?x192)))))
 (let (($x275 (= ?x30 input.dst.llvm-%m2)))
 (let (($x21 (= $x275 true)))
 (let (($x40 (= input.dst.llvm-%m2 ?x30)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x382 (concat ?x213 (concat ?x383 (concat ?x20 ?x156)))))
 (let (($x317 (= input.dst.llvm-%m1 ?x382)))
 (let (($x371 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x230 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x124 (and $x230 $x371)))
 (let (($x7 (and (and $x124 $x317) $x40)))
 (let (($x184 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x183 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x92 (bvadd ?x183 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x95))))
 (let ((?x242 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x291 (_ bv1 32))))
 (=> $x6 (= ?x242 ?x441)))))))))))
 ))
 (let (($x301 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x360 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x360 (_ bv1 32))))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x291 (_ bv1 32))))
 (= $x6 $x220)))))))
 ))
 (let (($x337 (forall ((Lambda5 (_ BitVec 32)) )(let (($x361 (= false false)))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x291 (_ bv0 32))))
 (=> $x293 $x361))))))
 ))
 (let (($x80 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x360 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x180 (= ?x360 (_ bv0 32))))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x291 (_ bv0 32))))
 (= $x293 $x180)))))))
 ))
 (let (($x27 (and $x80 $x337)))
 (let (($x296 (and $x27 $x301)))
 (let (($x224 (and $x296 $x184)))
 (let (($x72 (and $x224 $x7)))
 (let ((?x193 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x76 (= (_ bv0 32) ?x193)))
 (let ((?x188 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x112 (= (_ bv0 32) ?x188)))
 (let ((?x319 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x319)))
 (let ((?x202 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x202)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x58 (and $x330 $x60)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x302 (and $x268 $x58)))
 (let (($x350 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (and $x235 $x11)))
 (let (($x138 (not $x216)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (and $x71 $x378)))
 (let (($x321 (and (not $x252) $x138)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x357 (and $x262 $x226)))
 (let (($x51 (not $x357)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x31 $x281)))
 (let (($x280 (and (not $x137) $x51)))
 (let (($x34 (and (and (and (and (and (and $x280 $x321) $x307) $x350) $x302) $x261) $x112)))
 (let (($x108 (and $x34 $x76)))
 (let (($x406 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x344 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x344)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x391 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x344)))
 (let (($x363 (or false (or false (and (and true (or $x391 $x289)) (or $x90 $x406))))))
 (let (($x324 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x363)))
 (let (($x292 (and (and (and $x324 $x32) $x108) $x72)))
 (let (($x241 (= $x292 true)))
 (let (($x345 (= $x241 true)))
 (let (($x227 (= $x124 true)))
 (let (($x229 (= $x227 true)))
 (let (($x282 (= ?x382 input.dst.llvm-%m1)))
 (let (($x26 (= $x282 true)))
 (let (($x182 (and $x26 $x229)))
 (let (($x9 (and $x182 $x345)))
 (let (($x81 (and $x9 $x21)))
 (let (($x309 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x327 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x242 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x291 (_ bv1 32))))
 (=> $x6 (= ?x242 ?x327))))))))
 ))
 (let (($x413 (forall ((Lambda5 (_ BitVec 32)) )(let (($x54 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x120 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x291 (_ bv1 32))))
 (= $x6 (bvuge ?x120 (_ bv1 32)))))))))
 ))
 (let (($x253 (forall ((Lambda5 (_ BitVec 32)) )(let (($x54 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x120 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x291 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x291 (_ bv0 32))))
 (= $x293 (= ?x120 (_ bv0 32)))))))))
 ))
 (let (($x404 (and $x253 $x337)))
 (let (($x274 (and $x404 $x413)))
 (let (($x217 (and $x274 $x309)))
 (let (($x24 (and $x217 $x81)))
 (let (($x442 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x102 (_ bv1 32))))
 (=> $x114 (= ?x55 ?x218))))))))
 ))
 (let (($x65 (forall ((Lambda5 (_ BitVec 32)) )(let (($x400 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x369 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x102 (_ bv1 32))))
 (= $x114 (bvuge ?x369 (_ bv1 32)))))))))
 ))
 (let (($x431 (forall ((Lambda5 (_ BitVec 32)) )(let (($x400 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x369 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x102 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x323 (= ?x102 (_ bv0 32))))
 (= $x323 (= ?x369 (_ bv0 32)))))))))
 ))
 (let (($x116 (and $x431 $x318)))
 (let (($x355 (and $x116 $x65)))
 (let (($x443 (and $x355 $x442)))
 (let (($x62 (and $x443 $x24)))
 (let (($x91 (=> $x62 $x196)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x438 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x438 input.dst.llvm-%m1)))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x335))))
 (let ((?x356 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x190 (_ bv1 32))))
 (=> $x124 (= ?x356 ?x362)))))))))))
 ))
 (let (($x308 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x284 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x284 (_ bv1 32))))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x190 (_ bv1 32))))
 (= $x124 $x58)))))))
 ))
 (let (($x167 (forall ((Lambda5 (_ BitVec 32)) )(let (($x218 (= false false)))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x190 (_ bv0 32))))
 (=> $x176 $x218))))))
 ))
 (let (($x389 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x284 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x284 (_ bv0 32))))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x190 (_ bv0 32))))
 (= $x176 $x350)))))))
 ))
 (let (($x168 (and $x389 $x167)))
 (let (($x234 (and $x168 $x308)))
 (let (($x147 (and $x234 $x187)))
 (let (($x402 (= $x147 true)))
 (let (($x53 (= $x402 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x288 (concat ?x162 (concat ?x334 ?x18)))))
 (let (($x208 (= ?x141 input.dst.llvm-%m1)))
 (let (($x419 (= $x208 true)))
 (let ((?x215 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x44 (concat ?x99 (concat ?x324 ?x215)))))
 (let (($x258 (= input.dst.llvm-%m2 ?x83)))
 (let (($x134 (= input.dst.llvm-%m1 ?x141)))
 (let (($x417 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x166 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x164 (and $x166 $x417)))
 (let (($x273 (and (and $x164 $x134) $x258)))
 (let (($x236 (and $x147 $x273)))
 (let ((?x106 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x388 (= (_ bv0 32) ?x106)))
 (let ((?x57 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x256 (= (_ bv0 32) ?x57)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x196 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x196)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (and $x233 $x91)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x384 (and $x62 $x338)))
 (let (($x24 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x241 (and $x72 $x292)))
 (let (($x345 (not $x241)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x30 $x40)))
 (let (($x275 (and (not $x7) $x345)))
 (let (($x424 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x86 $x424)))
 (let (($x192 (not $x209)))
 (let (($x354 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x316 $x354)))
 (let (($x61 (and (not $x263) $x192)))
 (let (($x37 (and (and (and (and (and (and $x61 $x275) $x21) $x24) $x384) $x42) $x256)))
 (let (($x205 (and $x37 $x388)))
 (let (($x317 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x438 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x439 (bvadd ?x438 input.dst.llvm-%m2)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x439 (_ bv1 32))) (select input.dst.llvm-mem ?x439))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x439 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x439 (_ bv2 32))) ?x212))))
 (let ((?x337 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x177 (_ bv1 32))))
 (=> $x120 (= ?x337 ?x340)))))))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x284 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x284 (_ bv1 32))))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x177 (_ bv1 32))))
 (= $x120 $x58)))))))
 ))
 (let (($x442 (forall ((Lambda5 (_ BitVec 32)) )(let (($x218 (= false false)))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x177 (_ bv0 32))))
 (=> $x65 $x218))))))
 ))
 (let (($x268 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x284 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x284 (_ bv0 32))))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x177 (_ bv0 32))))
 (= $x65 $x350)))))))
 ))
 (let (($x330 (and $x268 $x442)))
 (let (($x319 (and $x330 $x223)))
 (let (($x22 (and $x319 $x317)))
 (let (($x357 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x32)))
 (let (($x378 (or false (or false (and (and true (or $x109 $x31)) (or $x226 $x357))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x378)))
 (let (($x41 (and (and (and $x38 $x22) $x205) $x236)))
 (let (($x440 (= $x41 true)))
 (let (($x367 (= $x440 true)))
 (let (($x347 (= $x164 true)))
 (let (($x132 (= $x347 true)))
 (let (($x244 (= ?x83 input.dst.llvm-%m2)))
 (let (($x408 (= $x244 true)))
 (let (($x210 (and $x408 $x132)))
 (let (($x129 (and $x210 $x367)))
 (let (($x415 (and $x129 $x419)))
 (let (($x272 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x344 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x356 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x190 (_ bv1 32))))
 (=> $x124 (= ?x356 ?x344))))))))
 ))
 (let (($x229 (forall ((Lambda5 (_ BitVec 32)) )(let (($x213 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x20 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x190 (_ bv1 32))))
 (= $x124 (bvuge ?x20 (_ bv1 32)))))))))
 ))
 (let (($x152 (forall ((Lambda5 (_ BitVec 32)) )(let (($x213 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x20 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x190 (_ bv0 32))))
 (= $x176 (= ?x20 (_ bv0 32)))))))))
 ))
 (let (($x245 (and $x152 $x167)))
 (let (($x182 (and $x245 $x229)))
 (let (($x90 (and $x182 $x272)))
 (let (($x423 (and $x90 $x415)))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x337 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x177 (_ bv1 32))))
 (=> $x120 (= ?x337 ?x411))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x431 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x114 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x177 (_ bv1 32))))
 (= $x120 (bvuge ?x114 (_ bv1 32)))))))))
 ))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let (($x431 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x114 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x177 (_ bv0 32))))
 (= $x65 (= ?x114 (_ bv0 32)))))))))
 ))
 (let (($x443 (and $x55 $x442)))
 (let (($x253 (and $x443 $x23)))
 (let (($x136 (and $x253 $x160)))
 (let (($x264 (and $x136 $x423)))
 (let (($x313 (=> $x264 $x53)))
 (not $x313)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x438 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x438 input.dst.llvm-%m1)))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x335))))
 (let ((?x356 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x190 (_ bv1 32))))
 (=> $x124 (= ?x356 ?x362)))))))))))
 ))
 (let (($x308 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x284 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x284 (_ bv1 32))))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x190 (_ bv1 32))))
 (= $x124 $x58)))))))
 ))
 (let (($x167 (forall ((Lambda5 (_ BitVec 32)) )(let (($x218 (= false false)))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x190 (_ bv0 32))))
 (=> $x176 $x218))))))
 ))
 (let (($x389 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x284 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x284 (_ bv0 32))))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x190 (_ bv0 32))))
 (= $x176 $x350)))))))
 ))
 (let (($x168 (and $x389 $x167)))
 (let (($x234 (and $x168 $x308)))
 (let (($x147 (and $x234 $x187)))
 (let (($x402 (= $x147 true)))
 (let (($x53 (= $x402 true)))
 (let ((?x18 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x288 (concat ?x162 (concat ?x334 ?x18)))))
 (let (($x208 (= ?x141 input.dst.llvm-%m1)))
 (let (($x419 (= $x208 true)))
 (let ((?x215 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x83 (concat ?x44 (concat ?x99 (concat ?x324 ?x215)))))
 (let (($x258 (= input.dst.llvm-%m2 ?x83)))
 (let (($x134 (= input.dst.llvm-%m1 ?x141)))
 (let (($x417 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x166 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x164 (and $x166 $x417)))
 (let (($x273 (and (and $x164 $x134) $x258)))
 (let (($x236 (and $x147 $x273)))
 (let ((?x106 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x388 (= (_ bv0 32) ?x106)))
 (let ((?x57 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x256 (= (_ bv0 32) ?x57)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x196 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x196)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (and $x233 $x91)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x384 (and $x62 $x338)))
 (let (($x24 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x241 (and $x72 $x292)))
 (let (($x345 (not $x241)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x30 $x40)))
 (let (($x275 (and (not $x7) $x345)))
 (let (($x424 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x86 $x424)))
 (let (($x192 (not $x209)))
 (let (($x354 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x316 $x354)))
 (let (($x61 (and (not $x263) $x192)))
 (let (($x37 (and (and (and (and (and (and $x61 $x275) $x21) $x24) $x384) $x42) $x256)))
 (let (($x205 (and $x37 $x388)))
 (let (($x317 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x438 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x439 (bvadd ?x438 input.dst.llvm-%m2)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x439 (_ bv1 32))) (select input.dst.llvm-mem ?x439))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x439 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x439 (_ bv2 32))) ?x212))))
 (let ((?x337 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x177 (_ bv1 32))))
 (=> $x120 (= ?x337 ?x340)))))))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x284 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x284 (_ bv1 32))))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x177 (_ bv1 32))))
 (= $x120 $x58)))))))
 ))
 (let (($x442 (forall ((Lambda5 (_ BitVec 32)) )(let (($x218 (= false false)))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x177 (_ bv0 32))))
 (=> $x65 $x218))))))
 ))
 (let (($x268 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x284 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x284 (_ bv0 32))))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x177 (_ bv0 32))))
 (= $x65 $x350)))))))
 ))
 (let (($x330 (and $x268 $x442)))
 (let (($x319 (and $x330 $x223)))
 (let (($x22 (and $x319 $x317)))
 (let (($x357 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x32)))
 (let (($x378 (or false (or false (and (and true (or $x109 $x31)) (or $x226 $x357))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x378)))
 (let (($x41 (and (and (and $x38 $x22) $x205) $x236)))
 (let (($x440 (= $x41 true)))
 (let (($x367 (= $x440 true)))
 (let (($x347 (= $x164 true)))
 (let (($x132 (= $x347 true)))
 (let (($x244 (= ?x83 input.dst.llvm-%m2)))
 (let (($x408 (= $x244 true)))
 (let (($x210 (and $x408 $x132)))
 (let (($x129 (and $x210 $x367)))
 (let (($x415 (and $x129 $x419)))
 (let (($x272 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x344 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x356 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x190 (_ bv1 32))))
 (=> $x124 (= ?x356 ?x344))))))))
 ))
 (let (($x229 (forall ((Lambda5 (_ BitVec 32)) )(let (($x213 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x20 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x190 (_ bv1 32))))
 (= $x124 (bvuge ?x20 (_ bv1 32)))))))))
 ))
 (let (($x152 (forall ((Lambda5 (_ BitVec 32)) )(let (($x213 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x20 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x217 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x190 (ite $x217 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x190 (_ bv0 32))))
 (= $x176 (= ?x20 (_ bv0 32)))))))))
 ))
 (let (($x245 (and $x152 $x167)))
 (let (($x182 (and $x245 $x229)))
 (let (($x90 (and $x182 $x272)))
 (let (($x423 (and $x90 $x415)))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x411 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x337 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x177 (_ bv1 32))))
 (=> $x120 (= ?x337 ?x411))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let (($x431 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x114 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x177 (_ bv1 32))))
 (= $x120 (bvuge ?x114 (_ bv1 32)))))))))
 ))
 (let (($x55 (forall ((Lambda5 (_ BitVec 32)) )(let (($x431 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x114 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x177 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x177 (_ bv0 32))))
 (= $x65 (= ?x114 (_ bv0 32)))))))))
 ))
 (let (($x443 (and $x55 $x442)))
 (let (($x253 (and $x443 $x23)))
 (let (($x136 (and $x253 $x160)))
 (let (($x264 (and $x136 $x423)))
 (let (($x313 (=> $x264 $x53)))
 (not $x313)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x56 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x10 (bvneg ?x56)))
 (let (($x328 (= ?x10 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x346 (= $x328 true)))
 (let (($x332 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x8 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x251 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x193 (and $x251 $x8)))
 (let (($x12 (and $x193 $x332)))
 (let (($x169 (= $x12 true)))
 (let (($x94 (= $x169 true)))
 (let ((?x161 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x78 (= (_ bv0 32) ?x161)))
 (let ((?x39 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x305 (= (_ bv0 32) ?x39)))
 (let ((?x372 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x372)))
 (let ((?x458 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x459 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x458)))
 (let (($x457 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x460 (and $x457 $x459)))
 (let (($x456 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x373 (and $x456 $x460)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x453 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x17 $x237)))
 (let (($x85 (not $x50)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x348 (and $x219 $x179)))
 (let (($x257 (and (not $x348) $x85)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x427 $x191)))
 (let (($x270 (not $x33)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x426 (and $x301 $x296)))
 (let (($x287 (and (not $x426) $x270)))
 (let (($x418 (and (and (and (and (and (and $x287 $x257) $x453) $x455) $x373) $x303) $x305)))
 (let (($x396 (and $x418 $x78)))
 (let (($x283 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x336 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x122)))
 (let (($x277 (or false (or false (and (and true (or $x198 $x14)) (or $x336 $x283))))))
 (let (($x297 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x277)))
 (let (($x247 (and $x297 $x396)))
 (let (($x143 (= $x247 true)))
 (let (($x379 (= $x143 true)))
 (let (($x76 (= $x193 true)))
 (let (($x34 (= $x76 true)))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x158))))
 (let ((?x32 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x417 (bvuge ?x324 (_ bv1 32))))
 (=> $x417 (= ?x32 ?x201)))))))))))
 ))
 (let (($x165 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (bvuge ?x307 (_ bv1 32))))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x417 (bvuge ?x324 (_ bv1 32))))
 (= $x417 $x302)))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x411 (= false false)))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x324 (_ bv0 32))))
 (=> $x215 $x411))))))
 ))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x307 (_ bv0 32))))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x324 (_ bv0 32))))
 (= $x215 $x284)))))))
 ))
 (let (($x338 (and $x62 $x91)))
 (let (($x42 (and $x338 $x165)))
 (let (($x321 (and $x42 $x138)))
 (let (($x202 (= $x321 true)))
 (let (($x60 (= $x202 true)))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x424 (bvadd ?x86 input.dst.llvm-%m2)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem ?x424))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv2 32))) ?x381))))
 (let ((?x167 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (=> $x20 (= ?x167 ?x282)))))))))))
 ))
 (let (($x319 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (bvuge ?x307 (_ bv1 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (= $x20 $x302)))))))
 ))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let (($x411 (= false false)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x333 (_ bv0 32))))
 (=> $x23 $x411))))))
 ))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x307 (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x333 (_ bv0 32))))
 (= $x23 $x284)))))))
 ))
 (let (($x268 (and $x178 $x160)))
 (let (($x278 (and $x268 $x319)))
 (let (($x131 (and $x278 $x228)))
 (let (($x47 (= $x131 true)))
 (let (($x405 (= $x47 true)))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x158))))
 (let ((?x221 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (=> $x164 (= ?x221 ?x201)))))))))))
 ))
 (let (($x141 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (bvuge ?x307 (_ bv1 32))))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (= $x164 $x302)))))))
 ))
 (let (($x425 (forall ((Lambda5 (_ BitVec 32)) )(let (($x411 (= false false)))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (= ?x200 (_ bv0 32))))
 (=> $x360 $x411))))))
 ))
 (let (($x334 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x307 (_ bv0 32))))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (= ?x200 (_ bv0 32))))
 (= $x360 $x284)))))))
 ))
 (let (($x18 (and $x334 $x425)))
 (let (($x134 (and $x18 $x141)))
 (let (($x437 (and $x134 $x116)))
 (let (($x204 (= $x437 true)))
 (let (($x291 (= $x204 true)))
 (let ((?x415 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x423 (= (_ bv0 2) ?x415)))
 (let (($x264 (= $x423 true)))
 (let (($x41 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x409))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x255)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x111)))
 (let ((?x221 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (=> $x164 (= ?x221 ?x362))))))))))))
 ))
 (let (($x440 (and $x134 $x41)))
 (let (($x367 (= $x440 true)))
 (let (($x129 (= $x367 true)))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x409))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x255)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x111)))
 (let ((?x32 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x417 (bvuge ?x324 (_ bv1 32))))
 (=> $x417 (= ?x32 ?x362))))))))))))
 ))
 (let (($x147 (and $x42 $x187)))
 (let (($x285 (= $x147 true)))
 (let (($x288 (= $x285 true)))
 (let (($x259 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x424 (bvadd ?x86 input.dst.llvm-%m2)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x424))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv2 32))) ?x30)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv3 32))) ?x9)))
 (let ((?x167 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (=> $x20 (= ?x167 ?x241))))))))))))
 ))
 (let (($x21 (and $x278 $x259)))
 (let (($x189 (= $x21 true)))
 (let (($x81 (= $x189 true)))
 (let (($x225 (and $x81 $x288)))
 (let (($x208 (and $x225 $x129)))
 (let (($x402 (and $x208 $x264)))
 (let (($x293 (and $x402 $x291)))
 (let (($x289 (and $x293 $x405)))
 (let (($x188 (and $x289 $x60)))
 (let (($x108 (and $x188 $x34)))
 (let (($x96 (and $x108 $x379)))
 (let (($x353 (and $x96 $x94)))
 (let (($x74 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x32 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x221 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (=> $x164 (= ?x221 ?x32))))))))
 ))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x417 (bvuge ?x324 (_ bv1 32))))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (= $x164 $x417))))))))
 ))
 (let (($x220 (forall ((Lambda5 (_ BitVec 32)) )(let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x324 (_ bv0 32))))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (= ?x200 (_ bv0 32))))
 (= $x360 $x215))))))))
 ))
 (let (($x329 (and $x220 $x425)))
 (let (($x210 (and $x329 $x132)))
 (let (($x226 (and $x210 $x74)))
 (let (($x25 (and $x226 $x353)))
 (let (($x398 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x167 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (=> $x20 (= ?x167 ?x371))))))))
 ))
 (let (($x382 (forall ((Lambda5 (_ BitVec 32)) )(let (($x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x120 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (= $x20 (bvuge ?x120 (_ bv1 32)))))))))
 ))
 (let (($x337 (forall ((Lambda5 (_ BitVec 32)) )(let (($x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x120 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x333 (_ bv0 32))))
 (= $x23 (= ?x120 (_ bv0 32)))))))))
 ))
 (let (($x136 (and $x337 $x160)))
 (let (($x152 (and $x136 $x382)))
 (let (($x207 (and $x152 $x398)))
 (let (($x121 (and $x207 $x25)))
 (let (($x311 (=> $x121 $x346)))
 (not $x311)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x56 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x10 (bvneg ?x56)))
 (let (($x328 (= ?x10 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x346 (= $x328 true)))
 (let (($x332 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x8 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x251 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x193 (and $x251 $x8)))
 (let (($x12 (and $x193 $x332)))
 (let (($x169 (= $x12 true)))
 (let (($x94 (= $x169 true)))
 (let ((?x161 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x78 (= (_ bv0 32) ?x161)))
 (let ((?x39 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x305 (= (_ bv0 32) ?x39)))
 (let ((?x372 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x372)))
 (let ((?x458 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x459 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x458)))
 (let (($x457 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x460 (and $x457 $x459)))
 (let (($x456 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x373 (and $x456 $x460)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x453 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x17 $x237)))
 (let (($x85 (not $x50)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x348 (and $x219 $x179)))
 (let (($x257 (and (not $x348) $x85)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x427 $x191)))
 (let (($x270 (not $x33)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x426 (and $x301 $x296)))
 (let (($x287 (and (not $x426) $x270)))
 (let (($x418 (and (and (and (and (and (and $x287 $x257) $x453) $x455) $x373) $x303) $x305)))
 (let (($x396 (and $x418 $x78)))
 (let (($x283 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x336 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x122)))
 (let (($x277 (or false (or false (and (and true (or $x198 $x14)) (or $x336 $x283))))))
 (let (($x297 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x277)))
 (let (($x247 (and $x297 $x396)))
 (let (($x143 (= $x247 true)))
 (let (($x379 (= $x143 true)))
 (let (($x76 (= $x193 true)))
 (let (($x34 (= $x76 true)))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x158))))
 (let ((?x32 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x417 (bvuge ?x324 (_ bv1 32))))
 (=> $x417 (= ?x32 ?x201)))))))))))
 ))
 (let (($x165 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (bvuge ?x307 (_ bv1 32))))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x417 (bvuge ?x324 (_ bv1 32))))
 (= $x417 $x302)))))))
 ))
 (let (($x91 (forall ((Lambda5 (_ BitVec 32)) )(let (($x411 (= false false)))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x324 (_ bv0 32))))
 (=> $x215 $x411))))))
 ))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x307 (_ bv0 32))))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x324 (_ bv0 32))))
 (= $x215 $x284)))))))
 ))
 (let (($x338 (and $x62 $x91)))
 (let (($x42 (and $x338 $x165)))
 (let (($x321 (and $x42 $x138)))
 (let (($x202 (= $x321 true)))
 (let (($x60 (= $x202 true)))
 (let (($x228 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x424 (bvadd ?x86 input.dst.llvm-%m2)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem ?x424))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv2 32))) ?x381))))
 (let ((?x167 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (=> $x20 (= ?x167 ?x282)))))))))))
 ))
 (let (($x319 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (bvuge ?x307 (_ bv1 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (= $x20 $x302)))))))
 ))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let (($x411 (= false false)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x333 (_ bv0 32))))
 (=> $x23 $x411))))))
 ))
 (let (($x178 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x307 (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x333 (_ bv0 32))))
 (= $x23 $x284)))))))
 ))
 (let (($x268 (and $x178 $x160)))
 (let (($x278 (and $x268 $x319)))
 (let (($x131 (and $x278 $x228)))
 (let (($x47 (= $x131 true)))
 (let (($x405 (= $x47 true)))
 (let (($x116 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x158))))
 (let ((?x221 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (=> $x164 (= ?x221 ?x201)))))))))))
 ))
 (let (($x141 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x302 (bvuge ?x307 (_ bv1 32))))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (= $x164 $x302)))))))
 ))
 (let (($x425 (forall ((Lambda5 (_ BitVec 32)) )(let (($x411 (= false false)))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (= ?x200 (_ bv0 32))))
 (=> $x360 $x411))))))
 ))
 (let (($x334 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x307 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (= ?x307 (_ bv0 32))))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (= ?x200 (_ bv0 32))))
 (= $x360 $x284)))))))
 ))
 (let (($x18 (and $x334 $x425)))
 (let (($x134 (and $x18 $x141)))
 (let (($x437 (and $x134 $x116)))
 (let (($x204 (= $x437 true)))
 (let (($x291 (= $x204 true)))
 (let ((?x415 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x423 (= (_ bv0 2) ?x415)))
 (let (($x264 (= $x423 true)))
 (let (($x41 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x409))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x255)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x111)))
 (let ((?x221 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (=> $x164 (= ?x221 ?x362))))))))))))
 ))
 (let (($x440 (and $x134 $x41)))
 (let (($x367 (= $x440 true)))
 (let (($x129 (= $x367 true)))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x409 (bvadd ?x86 input.dst.llvm-%m1)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x409))))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv2 32))) ?x255)))
 (let ((?x362 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x409 (_ bv3 32))) ?x111)))
 (let ((?x32 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x417 (bvuge ?x324 (_ bv1 32))))
 (=> $x417 (= ?x32 ?x362))))))))))))
 ))
 (let (($x147 (and $x42 $x187)))
 (let (($x285 (= $x147 true)))
 (let (($x288 (= $x285 true)))
 (let (($x259 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x86 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x424 (bvadd ?x86 input.dst.llvm-%m2)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x424))))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv2 32))) ?x30)))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv3 32))) ?x9)))
 (let ((?x167 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (=> $x20 (= ?x167 ?x241))))))))))))
 ))
 (let (($x21 (and $x278 $x259)))
 (let (($x189 (= $x21 true)))
 (let (($x81 (= $x189 true)))
 (let (($x225 (and $x81 $x288)))
 (let (($x208 (and $x225 $x129)))
 (let (($x402 (and $x208 $x264)))
 (let (($x293 (and $x402 $x291)))
 (let (($x289 (and $x293 $x405)))
 (let (($x188 (and $x289 $x60)))
 (let (($x108 (and $x188 $x34)))
 (let (($x96 (and $x108 $x379)))
 (let (($x353 (and $x96 $x94)))
 (let (($x74 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x32 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x221 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (=> $x164 (= ?x221 ?x32))))))))
 ))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x417 (bvuge ?x324 (_ bv1 32))))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x200 (_ bv1 32))))
 (= $x164 $x417))))))))
 ))
 (let (($x220 (forall ((Lambda5 (_ BitVec 32)) )(let (($x44 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x324 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x324 (_ bv0 32))))
 (let (($x90 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x200 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (= ?x200 (_ bv0 32))))
 (= $x360 $x215))))))))
 ))
 (let (($x329 (and $x220 $x425)))
 (let (($x210 (and $x329 $x132)))
 (let (($x226 (and $x210 $x74)))
 (let (($x25 (and $x226 $x353)))
 (let (($x398 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x371 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x167 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (=> $x20 (= ?x167 ?x371))))))))
 ))
 (let (($x382 (forall ((Lambda5 (_ BitVec 32)) )(let (($x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x120 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x333 (_ bv1 32))))
 (= $x20 (bvuge ?x120 (_ bv1 32)))))))))
 ))
 (let (($x337 (forall ((Lambda5 (_ BitVec 32)) )(let (($x55 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x120 (ite $x55 (_ bv1 32) (_ bv0 32))))
 (let (($x400 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x333 (ite $x400 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x333 (_ bv0 32))))
 (= $x23 (= ?x120 (_ bv0 32)))))))))
 ))
 (let (($x136 (and $x337 $x160)))
 (let (($x152 (and $x136 $x382)))
 (let (($x207 (and $x152 $x398)))
 (let (($x121 (and $x207 $x25)))
 (let (($x311 (=> $x121 $x346)))
 (not $x311)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x276 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x145 (bvneg ?x276)))
 (let (($x391 (= ?x145 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x309 (= $x391 true)))
 (let (($x261 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x176 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x217 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x26 (and $x217 $x176)))
 (let (($x69 (and $x26 $x261)))
 (let (($x102 (= $x69 true)))
 (let (($x385 (= $x102 true)))
 (let ((?x388 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x387 (= (_ bv0 32) ?x388)))
 (let ((?x106 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x256 (= (_ bv0 32) ?x106)))
 (let ((?x243 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x57 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x389 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x384 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x384 $x389)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x233 $x168)))
 (let (($x24 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (and $x224 $x295)))
 (let (($x77 (not $x212)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x300 $x316)))
 (let (($x317 (and (not $x184) $x77)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (and $x378 $x38)))
 (let (($x58 (not $x330)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x252 $x139)))
 (let (($x84 (and (not $x71) $x58)))
 (let (($x75 (and (and (and (and (and (and $x84 $x317) $x263) $x24) $x205) $x37) $x256)))
 (let (($x258 (and $x75 $x387)))
 (let (($x304 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x351 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x262 (or false (or false (and (and true (or $x351 $x99)) (or $x130 $x304))))))
 (let (($x280 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x262)))
 (let (($x97 (and $x280 $x258)))
 (let (($x203 (= $x97 true)))
 (let (($x368 (= $x203 true)))
 (let (($x124 (= $x26 true)))
 (let (($x229 (= $x124 true)))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x34 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x101))))
 (let ((?x275 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x302 (_ bv1 32))))
 (=> $x40 (= ?x275 ?x39)))))))))))
 ))
 (let (($x405 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x127 (_ bv1 32))))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x302 (_ bv1 32))))
 (= $x40 $x133)))))))
 ))
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let (($x371 (= false false)))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x302 (_ bv0 32))))
 (=> $x223 $x371))))))
 ))
 (let (($x383 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x127 (_ bv0 32))))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x302 (_ bv0 32))))
 (= $x223 $x231)))))))
 ))
 (let (($x228 (and $x383 $x117)))
 (let (($x289 (and $x228 $x405)))
 (let (($x349 (and $x289 $x114)))
 (let (($x355 (= $x349 true)))
 (let (($x73 (= $x355 true)))
 (let (($x439 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x105 (bvadd ?x53 input.dst.llvm-%m2)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x170))))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (=> $x324 (= ?x425 ?x346)))))))))))
 ))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x127 (_ bv1 32))))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (= $x324 $x133)))))))
 ))
 (let (($x398 (forall ((Lambda5 (_ BitVec 32)) )(let (($x371 (= false false)))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x156 (_ bv0 32))))
 (=> $x382 $x371))))))
 ))
 (let (($x157 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x127 (_ bv0 32))))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x156 (_ bv0 32))))
 (= $x382 $x231)))))))
 ))
 (let (($x255 (and $x157 $x398)))
 (let (($x147 (and $x255 $x187)))
 (let (($x80 (and $x147 $x439)))
 (let (($x441 (= $x80 true)))
 (let (($x246 (= $x441 true)))
 (let (($x161 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x34 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x101))))
 (let ((?x9 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (=> $x7 (= ?x9 ?x39)))))))))))
 ))
 (let (($x104 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x127 (_ bv1 32))))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (= $x7 $x133)))))))
 ))
 (let (($x424 (forall ((Lambda5 (_ BitVec 32)) )(let (($x371 (= false false)))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x319 (_ bv0 32))))
 (=> $x278 $x371))))))
 ))
 (let (($x297 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x127 (_ bv0 32))))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x319 (_ bv0 32))))
 (= $x278 $x231)))))))
 ))
 (let (($x301 (and $x297 $x424)))
 (let (($x427 (and $x301 $x104)))
 (let (($x78 (and $x427 $x161)))
 (let (($x396 (= $x78 true)))
 (let (($x247 (= $x396 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x85 (= (_ bv0 2) ?x50)))
 (let (($x257 (= $x85 true)))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x34 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x271)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x198)))
 (let ((?x9 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (=> $x7 (= ?x9 ?x43))))))))))))
 ))
 (let (($x179 (and $x427 $x219)))
 (let (($x348 (= $x179 true)))
 (let (($x93 (= $x348 true)))
 (let (($x336 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x34 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x271)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x198)))
 (let ((?x275 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x302 (_ bv1 32))))
 (=> $x40 (= ?x275 ?x43))))))))))))
 ))
 (let (($x142 (and $x289 $x336)))
 (let (($x283 (= $x142 true)))
 (let (($x98 (= $x283 true)))
 (let (($x293 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x105 (bvadd ?x53 input.dst.llvm-%m2)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x105))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv2 32))) ?x158)))
 (let ((?x437 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv3 32))) ?x15)))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (=> $x324 (= ?x425 ?x437))))))))))))
 ))
 (let (($x326 (and $x147 $x293)))
 (let (($x199 (= $x326 true)))
 (let (($x222 (= $x199 true)))
 (let (($x82 (and $x222 $x98)))
 (let (($x17 (and $x82 $x93)))
 (let (($x358 (and $x17 $x257)))
 (let (($x143 (and $x358 $x247)))
 (let (($x177 (and $x143 $x246)))
 (let (($x442 (and $x177 $x73)))
 (let (($x182 (and $x442 $x229)))
 (let (($x313 (and $x182 $x368)))
 (let (($x274 (and $x313 $x385)))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x275 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x9 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (=> $x7 (= ?x9 ?x275))))))))
 ))
 (let (($x61 (forall ((Lambda5 (_ BitVec 32)) )(let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x302 (_ bv1 32))))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (= $x7 $x40))))))))
 ))
 (let (($x66 (forall ((Lambda5 (_ BitVec 32)) )(let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x302 (_ bv0 32))))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x319 (_ bv0 32))))
 (= $x278 $x223))))))))
 ))
 (let (($x22 (and $x66 $x424)))
 (let (($x209 (and $x22 $x61)))
 (let (($x196 (and $x209 $x62)))
 (let (($x6 (and $x196 $x274)))
 (let (($x281 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x417 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (=> $x324 (= ?x425 ?x417))))))))
 ))
 (let (($x83 (forall ((Lambda5 (_ BitVec 32)) )(let (($x337 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x20 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (= $x324 (bvuge ?x20 (_ bv1 32)))))))))
 ))
 (let (($x167 (forall ((Lambda5 (_ BitVec 32)) )(let (($x337 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x20 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x156 (_ bv0 32))))
 (= $x382 (= ?x20 (_ bv0 32)))))))))
 ))
 (let (($x207 (and $x167 $x398)))
 (let (($x220 (and $x207 $x83)))
 (let (($x137 (and $x220 $x281)))
 (let (($x320 (and $x137 $x6)))
 (let (($x433 (=> $x320 $x309)))
 (not $x433)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x276 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x145 (bvneg ?x276)))
 (let (($x391 (= ?x145 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x309 (= $x391 true)))
 (let (($x261 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x176 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x217 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x26 (and $x217 $x176)))
 (let (($x69 (and $x26 $x261)))
 (let (($x102 (= $x69 true)))
 (let (($x385 (= $x102 true)))
 (let ((?x388 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x387 (= (_ bv0 32) ?x388)))
 (let ((?x106 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x256 (= (_ bv0 32) ?x106)))
 (let ((?x243 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x57 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x389 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x384 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x384 $x389)))
 (let (($x233 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x205 (and $x233 $x168)))
 (let (($x24 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (and $x224 $x295)))
 (let (($x77 (not $x212)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x300 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x300 $x316)))
 (let (($x317 (and (not $x184) $x77)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (and $x378 $x38)))
 (let (($x58 (not $x330)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x252 $x139)))
 (let (($x84 (and (not $x71) $x58)))
 (let (($x75 (and (and (and (and (and (and $x84 $x317) $x263) $x24) $x205) $x37) $x256)))
 (let (($x258 (and $x75 $x387)))
 (let (($x304 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x351 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x262 (or false (or false (and (and true (or $x351 $x99)) (or $x130 $x304))))))
 (let (($x280 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x262)))
 (let (($x97 (and $x280 $x258)))
 (let (($x203 (= $x97 true)))
 (let (($x368 (= $x203 true)))
 (let (($x124 (= $x26 true)))
 (let (($x229 (= $x124 true)))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x34 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x101))))
 (let ((?x275 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x302 (_ bv1 32))))
 (=> $x40 (= ?x275 ?x39)))))))))))
 ))
 (let (($x405 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x127 (_ bv1 32))))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x302 (_ bv1 32))))
 (= $x40 $x133)))))))
 ))
 (let (($x117 (forall ((Lambda5 (_ BitVec 32)) )(let (($x371 (= false false)))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x302 (_ bv0 32))))
 (=> $x223 $x371))))))
 ))
 (let (($x383 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x127 (_ bv0 32))))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x302 (_ bv0 32))))
 (= $x223 $x231)))))))
 ))
 (let (($x228 (and $x383 $x117)))
 (let (($x289 (and $x228 $x405)))
 (let (($x349 (and $x289 $x114)))
 (let (($x355 (= $x349 true)))
 (let (($x73 (= $x355 true)))
 (let (($x439 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x105 (bvadd ?x53 input.dst.llvm-%m2)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x170))))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (=> $x324 (= ?x425 ?x346)))))))))))
 ))
 (let (($x187 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x127 (_ bv1 32))))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (= $x324 $x133)))))))
 ))
 (let (($x398 (forall ((Lambda5 (_ BitVec 32)) )(let (($x371 (= false false)))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x156 (_ bv0 32))))
 (=> $x382 $x371))))))
 ))
 (let (($x157 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x127 (_ bv0 32))))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x156 (_ bv0 32))))
 (= $x382 $x231)))))))
 ))
 (let (($x255 (and $x157 $x398)))
 (let (($x147 (and $x255 $x187)))
 (let (($x80 (and $x147 $x439)))
 (let (($x441 (= $x80 true)))
 (let (($x246 (= $x441 true)))
 (let (($x161 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x34 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x39 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x101))))
 (let ((?x9 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (=> $x7 (= ?x9 ?x39)))))))))))
 ))
 (let (($x104 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x127 (_ bv1 32))))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (= $x7 $x133)))))))
 ))
 (let (($x424 (forall ((Lambda5 (_ BitVec 32)) )(let (($x371 (= false false)))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x319 (_ bv0 32))))
 (=> $x278 $x371))))))
 ))
 (let (($x297 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x127 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (= ?x127 (_ bv0 32))))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x319 (_ bv0 32))))
 (= $x278 $x231)))))))
 ))
 (let (($x301 (and $x297 $x424)))
 (let (($x427 (and $x301 $x104)))
 (let (($x78 (and $x427 $x161)))
 (let (($x396 (= $x78 true)))
 (let (($x247 (= $x396 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x85 (= (_ bv0 2) ?x50)))
 (let (($x257 (= $x85 true)))
 (let (($x219 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x34 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x271)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x198)))
 (let ((?x9 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (=> $x7 (= ?x9 ?x43))))))))))))
 ))
 (let (($x179 (and $x427 $x219)))
 (let (($x348 (= $x179 true)))
 (let (($x93 (= $x348 true)))
 (let (($x336 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x34 (bvadd ?x53 input.dst.llvm-%m1)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x198 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x271)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x198)))
 (let ((?x275 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x302 (_ bv1 32))))
 (=> $x40 (= ?x275 ?x43))))))))))))
 ))
 (let (($x142 (and $x289 $x336)))
 (let (($x283 (= $x142 true)))
 (let (($x98 (= $x283 true)))
 (let (($x293 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x53 (bvmul Lambda5 (_ bv4 32))))
 (let ((?x105 (bvadd ?x53 input.dst.llvm-%m2)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x105))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv2 32))) ?x158)))
 (let ((?x437 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv3 32))) ?x15)))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (=> $x324 (= ?x425 ?x437))))))))))))
 ))
 (let (($x326 (and $x147 $x293)))
 (let (($x199 (= $x326 true)))
 (let (($x222 (= $x199 true)))
 (let (($x82 (and $x222 $x98)))
 (let (($x17 (and $x82 $x93)))
 (let (($x358 (and $x17 $x257)))
 (let (($x143 (and $x358 $x247)))
 (let (($x177 (and $x143 $x246)))
 (let (($x442 (and $x177 $x73)))
 (let (($x182 (and $x442 $x229)))
 (let (($x313 (and $x182 $x368)))
 (let (($x274 (and $x313 $x385)))
 (let (($x62 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x275 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda5)))
 (let ((?x9 (input.spec-%var-m1-1.1.1 Lambda5)))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (=> $x7 (= ?x9 ?x275))))))))
 ))
 (let (($x61 (forall ((Lambda5 (_ BitVec 32)) )(let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x302 (_ bv1 32))))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x319 (_ bv1 32))))
 (= $x7 $x40))))))))
 ))
 (let (($x66 (forall ((Lambda5 (_ BitVec 32)) )(let (($x307 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda5)))
 (let ((?x302 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x223 (= ?x302 (_ bv0 32))))
 (let (($x226 (input.spec-%var-m1-1.0.1 Lambda5)))
 (let ((?x319 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x319 (_ bv0 32))))
 (= $x278 $x223))))))))
 ))
 (let (($x22 (and $x66 $x424)))
 (let (($x209 (and $x22 $x61)))
 (let (($x196 (and $x209 $x62)))
 (let (($x6 (and $x196 $x274)))
 (let (($x281 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x417 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda5)))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda5)))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (=> $x324 (= ?x425 ?x417))))))))
 ))
 (let (($x83 (forall ((Lambda5 (_ BitVec 32)) )(let (($x337 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x20 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x156 (_ bv1 32))))
 (= $x324 (bvuge ?x20 (_ bv1 32)))))))))
 ))
 (let (($x167 (forall ((Lambda5 (_ BitVec 32)) )(let (($x337 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda5)))
 (let ((?x20 (ite $x337 (_ bv1 32) (_ bv0 32))))
 (let (($x431 (input.spec-%var-m2-1.0.1 Lambda5)))
 (let ((?x156 (ite $x431 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (= ?x156 (_ bv0 32))))
 (= $x382 (= ?x20 (_ bv0 32)))))))))
 ))
 (let (($x207 (and $x167 $x398)))
 (let (($x220 (and $x207 $x83)))
 (let (($x137 (and $x220 $x281)))
 (let (($x320 (and $x137 $x6)))
 (let (($x433 (=> $x320 $x309)))
 (not $x433)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x417 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x431 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x213 (or (bvugt input.memlabel-mem--arg.0_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x344 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x213) (or $x431 $x417)))))))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x337 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= ?x337 (_ bv0 32))))
 (let ((?x220 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x53 $x278)))
 (let (($x147 (and $x44 $x226)))
 (let (($x208 (and $x147 $x157)))
 (and $x208 $x344)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x417 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x431 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x213 (or (bvugt input.memlabel-mem--arg.0_begin ?x22) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x344 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x213) (or $x431 $x417)))))))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x337 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= ?x337 (_ bv0 32))))
 (let ((?x220 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x53 $x278)))
 (let (($x147 (and $x44 $x226)))
 (let (($x208 (and $x147 $x157)))
 (and $x208 $x344)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (= true false)))
 (let (($x91 (= $x189 true)))
 (let ((?x400 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x200 (concat ?x90 (concat ?x160 (concat ?x54 ?x400)))))
 (let (($x360 (= ?x200 input.dst.llvm-%m)))
 (let (($x408 (= $x360 true)))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x433 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x6 (_ bv3 32)))))
 (let (($x329 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x433)))))))
 (let (($x320 (= $x329 true)))
 (let (($x413 (= $x320 true)))
 (let ((?x256 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x368 (bvugt ?x256 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x256 (_ bv3 32)))))
 (let (($x102 (=> (bvule ?x256 (bvsub (bvadd ?x256 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x368)))))))
 (let (($x75 (= $x102 true)))
 (let (($x388 (= $x75 true)))
 (let (($x389 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x19 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x389)))))))
 (let (($x376 (= $x19 true)))
 (let (($x24 (= $x376 true)))
 (let (($x317 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x378 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv1 32))) (select input.dst.llvm-mem ?x378))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv2 32))) ?x84))))
 (let ((?x395 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x147 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x442 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x442 (_ bv1 32))))
 (=> $x51 (= ?x395 ?x295))))))))))
 ))
 (let (($x175 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x355 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x442 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x442 (_ bv1 32))))
 (= $x51 (bvuge ?x355 (_ bv1 32))))))))
 ))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let (($x127 (= false false)))
 (let (($x147 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x442 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x442 (_ bv0 32))))
 (=> $x443 $x127))))))
 ))
 (let (($x217 (forall ((Lambda5 (_ BitVec 32)) )(let (($x147 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x442 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x442 (_ bv0 32))))
 (= $x443 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x124 (and $x217 $x26)))
 (let (($x351 (and $x124 $x175)))
 (let (($x173 (and $x351 $x317)))
 (let (($x354 (= $x173 true)))
 (let (($x263 (= $x354 true)))
 (let ((?x78 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x396 (= (_ bv0 32) ?x78)))
 (let ((?x305 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x305)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x39 $x418)))
 (let (($x247 (and $x161 $x396)))
 (let (($x237 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x237 $x247)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x358 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x303 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x358 $x172)))))))
 (let (($x328 (and $x303 $x143)))
 (let (($x56 (= $x328 true)))
 (let (($x121 (= $x56 true)))
 (let ((?x238 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x104 (bvugt ?x238 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x426 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x238 (_ bv3 32)))))
 (let (($x348 (=> (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x426 $x104)))))))
 (let (($x142 (= $x348 true)))
 (let (($x283 (= $x142 true)))
 (let (($x25 (and $x283 $x121)))
 (let (($x308 (and $x25 $x263)))
 (let (($x106 (and $x308 $x24)))
 (let (($x385 (and $x106 $x388)))
 (let (($x411 (and $x385 $x413)))
 (let (($x164 (and $x411 $x408)))
 (let ((?x32 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x92 (= ?x32 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x383 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x230 (ite $x383 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x230 (_ bv1 32))))
 (let (($x115 (=> $x34 $x92)))
 (let (($x375 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x14 (= $x34 $x375)))
 (let (($x127 (= false false)))
 (let (($x117 (= ?x230 (_ bv0 32))))
 (let (($x289 (=> $x117 $x127)))
 (let (($x47 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x405 (= $x117 $x47)))
 (let (($x11 (and $x405 $x289)))
 (let (($x374 (and $x11 $x14)))
 (let (($x108 (and $x374 $x115)))
 (let (($x132 (and $x108 $x164)))
 (let ((?x221 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x199 (= ?x221 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x231 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x135 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x135 (_ bv1 32))))
 (let (($x222 (=> $x437 $x199)))
 (let (($x204 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x291 (= $x437 $x204)))
 (let (($x255 (= ?x135 (_ bv0 32))))
 (let (($x158 (=> $x255 $x127)))
 (let (($x187 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x116 (= $x255 $x187)))
 (let (($x15 (and $x116 $x158)))
 (let (($x293 (and $x15 $x291)))
 (let (($x381 (and $x293 $x222)))
 (let (($x210 (and $x381 $x132)))
 (let ((?x417 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x338 (= ?x417 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x66 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x66 (_ bv1 32))))
 (let (($x201 (=> $x81 $x338)))
 (let (($x155 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x62 (= $x81 $x155)))
 (let (($x438 (= ?x66 (_ bv0 32))))
 (let (($x9 (=> $x438 $x127)))
 (let (($x61 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x209 (= $x438 $x61)))
 (let (($x275 (and $x209 $x9)))
 (let (($x196 (and $x275 $x62)))
 (let (($x335 (and $x196 $x201)))
 (let (($x87 (and $x335 $x210)))
 (let ((?x167 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x398 (= ?x167 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x307 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x192 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x192 (_ bv1 32))))
 (let (($x302 (=> $x137 $x398)))
 (let (($x425 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x424 (= $x137 $x425)))
 (let (($x40 (= ?x192 (_ bv0 32))))
 (let (($x95 (=> $x40 $x127)))
 (let (($x7 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x324 (= $x40 $x7)))
 (let (($x156 (and $x324 $x95)))
 (let (($x281 (and $x156 $x424)))
 (let (($x152 (and $x281 $x302)))
 (let (($x241 (and $x152 $x87)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x284 (and $x22 $x241)))
 (let (($x371 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x259 (and $x371 $x284)))
 (let (($x133 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x74 (and $x133 $x259)))
 (let (($x337 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x357 (and $x337 $x74)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x59 (and $x260 $x357)))
 (let (($x266 (and $x127 $x59)))
 (let (($x41 (= ?x32 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x350 (and $x41 $x266)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x178 (and $x207 $x350)))
 (let (($x268 (and $x127 $x178)))
 (let (($x361 (= ?x221 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x86 (and $x361 $x268)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x72 (and $x318 $x86)))
 (let (($x292 (and $x127 $x72)))
 (let (($x299 (= ?x417 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x340 (and $x299 $x292)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x30 (and $x278 $x340)))
 (let (($x345 (and $x127 $x30)))
 (let (($x220 (= ?x167 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x21 (and $x220 $x345)))
 (let (($x28 (=> $x21 $x91)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x189 (= true false)))
 (let (($x91 (= $x189 true)))
 (let ((?x400 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x200 (concat ?x90 (concat ?x160 (concat ?x54 ?x400)))))
 (let (($x360 (= ?x200 input.dst.llvm-%m)))
 (let (($x408 (= $x360 true)))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x433 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x6 (_ bv3 32)))))
 (let (($x329 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x433)))))))
 (let (($x320 (= $x329 true)))
 (let (($x413 (= $x320 true)))
 (let ((?x256 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x368 (bvugt ?x256 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x256 (_ bv3 32)))))
 (let (($x102 (=> (bvule ?x256 (bvsub (bvadd ?x256 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x368)))))))
 (let (($x75 (= $x102 true)))
 (let (($x388 (= $x75 true)))
 (let (($x389 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x19 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x389)))))))
 (let (($x376 (= $x19 true)))
 (let (($x24 (= $x376 true)))
 (let (($x317 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x378 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x84 (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv1 32))) (select input.dst.llvm-mem ?x378))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv2 32))) ?x84))))
 (let ((?x395 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x147 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x442 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x442 (_ bv1 32))))
 (=> $x51 (= ?x395 ?x295))))))))))
 ))
 (let (($x175 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x355 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x442 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x442 (_ bv1 32))))
 (= $x51 (bvuge ?x355 (_ bv1 32))))))))
 ))
 (let (($x26 (forall ((Lambda5 (_ BitVec 32)) )(let (($x127 (= false false)))
 (let (($x147 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x442 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x442 (_ bv0 32))))
 (=> $x443 $x127))))))
 ))
 (let (($x217 (forall ((Lambda5 (_ BitVec 32)) )(let (($x147 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x442 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x442 (_ bv0 32))))
 (= $x443 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x124 (and $x217 $x26)))
 (let (($x351 (and $x124 $x175)))
 (let (($x173 (and $x351 $x317)))
 (let (($x354 (= $x173 true)))
 (let (($x263 (= $x354 true)))
 (let ((?x78 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x396 (= (_ bv0 32) ?x78)))
 (let ((?x305 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x305)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x39 $x418)))
 (let (($x247 (and $x161 $x396)))
 (let (($x237 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x237 $x247)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x358 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x303 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x358 $x172)))))))
 (let (($x328 (and $x303 $x143)))
 (let (($x56 (= $x328 true)))
 (let (($x121 (= $x56 true)))
 (let ((?x238 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x104 (bvugt ?x238 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x426 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x238 (_ bv3 32)))))
 (let (($x348 (=> (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x426 $x104)))))))
 (let (($x142 (= $x348 true)))
 (let (($x283 (= $x142 true)))
 (let (($x25 (and $x283 $x121)))
 (let (($x308 (and $x25 $x263)))
 (let (($x106 (and $x308 $x24)))
 (let (($x385 (and $x106 $x388)))
 (let (($x411 (and $x385 $x413)))
 (let (($x164 (and $x411 $x408)))
 (let ((?x32 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x92 (= ?x32 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x383 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x230 (ite $x383 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x230 (_ bv1 32))))
 (let (($x115 (=> $x34 $x92)))
 (let (($x375 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x14 (= $x34 $x375)))
 (let (($x127 (= false false)))
 (let (($x117 (= ?x230 (_ bv0 32))))
 (let (($x289 (=> $x117 $x127)))
 (let (($x47 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x405 (= $x117 $x47)))
 (let (($x11 (and $x405 $x289)))
 (let (($x374 (and $x11 $x14)))
 (let (($x108 (and $x374 $x115)))
 (let (($x132 (and $x108 $x164)))
 (let ((?x221 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x199 (= ?x221 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x231 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x135 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x437 (bvuge ?x135 (_ bv1 32))))
 (let (($x222 (=> $x437 $x199)))
 (let (($x204 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x291 (= $x437 $x204)))
 (let (($x255 (= ?x135 (_ bv0 32))))
 (let (($x158 (=> $x255 $x127)))
 (let (($x187 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x116 (= $x255 $x187)))
 (let (($x15 (and $x116 $x158)))
 (let (($x293 (and $x15 $x291)))
 (let (($x381 (and $x293 $x222)))
 (let (($x210 (and $x381 $x132)))
 (let ((?x417 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x338 (= ?x417 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x215 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x66 (ite $x215 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x66 (_ bv1 32))))
 (let (($x201 (=> $x81 $x338)))
 (let (($x155 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x62 (= $x81 $x155)))
 (let (($x438 (= ?x66 (_ bv0 32))))
 (let (($x9 (=> $x438 $x127)))
 (let (($x61 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x209 (= $x438 $x61)))
 (let (($x275 (and $x209 $x9)))
 (let (($x196 (and $x275 $x62)))
 (let (($x335 (and $x196 $x201)))
 (let (($x87 (and $x335 $x210)))
 (let ((?x167 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x398 (= ?x167 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x307 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x192 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x192 (_ bv1 32))))
 (let (($x302 (=> $x137 $x398)))
 (let (($x425 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x424 (= $x137 $x425)))
 (let (($x40 (= ?x192 (_ bv0 32))))
 (let (($x95 (=> $x40 $x127)))
 (let (($x7 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x324 (= $x40 $x7)))
 (let (($x156 (and $x324 $x95)))
 (let (($x281 (and $x156 $x424)))
 (let (($x152 (and $x281 $x302)))
 (let (($x241 (and $x152 $x87)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x284 (and $x22 $x241)))
 (let (($x371 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x259 (and $x371 $x284)))
 (let (($x133 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x74 (and $x133 $x259)))
 (let (($x337 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x357 (and $x337 $x74)))
 (let (($x260 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x59 (and $x260 $x357)))
 (let (($x266 (and $x127 $x59)))
 (let (($x41 (= ?x32 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x350 (and $x41 $x266)))
 (let (($x207 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x178 (and $x207 $x350)))
 (let (($x268 (and $x127 $x178)))
 (let (($x361 (= ?x221 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x86 (and $x361 $x268)))
 (let (($x318 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x72 (and $x318 $x86)))
 (let (($x292 (and $x127 $x72)))
 (let (($x299 (= ?x417 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x340 (and $x299 $x292)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x30 (and $x278 $x340)))
 (let (($x345 (and $x127 $x30)))
 (let (($x220 (= ?x167 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x21 (and $x220 $x345)))
 (let (($x28 (=> $x21 $x91)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffefff4)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfffffff1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffefff7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffefff4)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      false)))))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffefff6) #xff
    (ite (= x!0 #xfffefff5) #xff
    (ite (= x!0 #xfffefff7) #xff
    (ite (= x!0 #xfffefff4) #xf1
      #x00)))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffefff7)
                                     (k!4 #xfffefff6)
                                     (k!4 #xfffefff5)
                                     (k!4 #xfffefff4)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffefff7)
                                     (k!4 #xfffefff6)
                                     (k!4 #xfffefff5)
                                     (k!4 #xfffefff4)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffefff7)
                                     (k!4 #xfffefff6)
                                     (k!4 #xfffefff5)
                                     (k!4 #xfffefff4)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #xfffefff7)
                                     (k!4 #xfffefff6)
                                     (k!4 #xfffefff5)
                                     (k!4 #xfffefff4))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa000000c)
  (define-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa000000c)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000003)
        (= x!0 #x00000002)
        (= x!0 #x00000001)
        (= x!0 #x00000000)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa000000f) #x80
      #x00))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa000000f)
                                     (k!4 #xa000000e)
                                     (k!4 #xa000000d)
                                     (k!4 #xa000000c)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa000000f)
                                     (k!4 #xa000000e)
                                     (k!4 #xa000000d)
                                     (k!4 #xa000000c)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa000000f)
                                     (k!4 #xa000000e)
                                     (k!4 #xa000000d)
                                     (k!4 #xa000000c)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #xa000000f)
                                     (k!4 #xa000000e)
                                     (k!4 #xa000000d)
                                     (k!4 #xa000000c))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x108 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x108 (_ bv1 32))))
 (let (($x198 (= ?x108 (_ bv0 32))))
 (let (($x76 (or $x198 $x179)))
 (let (($x287 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x219 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x219 (_ bv1 32))))
 (let (($x296 (and $x257 $x76)))
 (let (($x348 (= ?x219 (_ bv0 32))))
 (let (($x314 (and $x348 $x76)))
 (let (($x191 (or $x314 $x296)))
 (let (($x17 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x237 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x237 (_ bv1 32))))
 (let (($x456 (and $x247 $x191)))
 (let (($x39 (= ?x237 (_ bv0 32))))
 (let (($x33 (and $x39 $x191)))
 (let (($x455 (or $x33 $x456)))
 (let (($x442 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x443 (ite $x442 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x443 (_ bv1 32))))
 (let (($x453 (and $x242 $x455)))
 (let (($x114 (= ?x443 (_ bv0 32))))
 (let (($x110 (and $x114 $x455)))
 (let (($x454 (or $x110 $x453)))
 (let (($x248 (or false $x454)))
 (let (($x457 (= $x248 true)))
 (let (($x458 (= $x457 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x409 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x440 (concat ?x415 (concat ?x334 (concat ?x409 ?x42)))))
 (let (($x367 (= ?x440 input.dst.llvm-%m)))
 (let (($x134 (= $x367 true)))
 (let ((?x192 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x183 (= (bvand ?x192 (_ bv4294967292 32)) ?x192)))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x280 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x180 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x363 (and true $x180)))
 (let ((?x431 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x227 (= (bvand ?x431 (_ bv4294967292 32)) ?x431)))
 (let (($x244 (and $x227 $x363)))
 (let (($x246 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x192 (bvsub ?x192 (_ bv8 32))) (bvult ?x192 (bvsub ?x192 (_ bv8 32))))))
 (let (($x130 (and (and (and true $x246) $x244) $x280)))
 (let (($x304 (and $x130 $x183)))
 (let (($x31 (= $x304 true)))
 (let (($x252 (= $x31 true)))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x93 (and true $x165)))
 (let (($x86 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x347 (and $x86 $x93)))
 (let (($x345 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x431 (bvsub ?x431 (_ bv12 32))) (bvult ?x431 (bvsub ?x431 (_ bv12 32))))))
 (let (($x13 (and (and (and true $x86) $x345) $x347)))
 (let (($x65 (= $x13 true)))
 (let (($x10 (= $x65 true)))
 (let (($x74 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv1 32))) (select input.dst.llvm-mem ?x400))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv2 32))) ?x360))))
 (let ((?x410 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x92 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x97 (_ bv1 32))))
 (=> $x6 (= ?x410 ?x241))))))))))
 ))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x97 (_ bv1 32))))
 (= $x6 (bvuge ?x258 (_ bv1 32))))))))
 ))
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let (($x231 (= false false)))
 (let (($x92 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x97 (_ bv0 32))))
 (=> $x203 $x231))))))
 ))
 (let (($x313 (forall ((Lambda5 (_ BitVec 32)) )(let (($x92 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x97 (_ bv0 32))))
 (= $x203 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x102 (and $x313 $x261)))
 (let (($x333 (and $x102 $x145)))
 (let (($x357 (and $x333 $x74)))
 (let (($x59 (= $x357 true)))
 (let (($x266 (= $x59 true)))
 (let ((?x317 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x173 (= (_ bv0 32) ?x317)))
 (let ((?x295 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x295)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x184 $x212)))
 (let (($x354 (and $x77 $x173)))
 (let (($x395 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x395 $x354)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x364 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x364 $x224)))))))
 (let (($x308 (and $x84 $x263)))
 (let (($x234 (= $x308 true)))
 (let (($x233 (= $x234 true)))
 (let (($x350 (and $x233 $x266)))
 (let (($x346 (and $x350 $x10)))
 (let (($x139 (and $x346 $x252)))
 (let (($x273 (and $x139 $x134)))
 (let ((?x381 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x51 (= ?x381 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x272 (=> $x242 $x51)))
 (let (($x217 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x176 (= $x242 $x217)))
 (let (($x231 (= false false)))
 (let (($x355 (=> $x114 $x231)))
 (let (($x113 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x349 (= $x114 $x113)))
 (let (($x73 (and $x349 $x355)))
 (let (($x26 (and $x73 $x176)))
 (let (($x197 (and $x26 $x272)))
 (let (($x141 (and $x197 $x273)))
 (let ((?x291 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x25 (= ?x291 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x213 (=> $x247 $x25)))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x328 (= $x247 $x143)))
 (let (($x78 (=> $x39 $x231)))
 (let (($x418 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x161 (= $x39 $x418)))
 (let (($x396 (and $x161 $x78)))
 (let (($x56 (and $x396 $x328)))
 (let (($x147 (and $x56 $x213)))
 (let (($x236 (and $x147 $x141)))
 (let ((?x116 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x373 (= ?x116 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x460 (=> $x257 $x373)))
 (let (($x358 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x172 (= $x257 $x358)))
 (let (($x85 (=> $x348 $x231)))
 (let (($x283 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x50 (= $x348 $x283)))
 (let (($x101 (and $x50 $x85)))
 (let (($x151 (and $x101 $x172)))
 (let (($x303 (and $x151 $x460)))
 (let (($x129 (and $x303 $x236)))
 (let ((?x152 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x104 (= ?x152 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x427 (=> $x179 $x104)))
 (let (($x277 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x301 (= $x179 $x277)))
 (let (($x98 (=> $x198 $x231)))
 (let (($x238 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x107 (= $x198 $x238)))
 (let (($x82 (and $x107 $x98)))
 (let (($x426 (and $x82 $x301)))
 (let (($x270 (and $x426 $x427)))
 (let (($x423 (and $x270 $x129)))
 (let (($x374 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x264 (and $x374 $x423)))
 (let (($x375 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x402 (and $x375 $x264)))
 (let (($x11 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x397 (and $x11 $x402)))
 (let (($x405 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x282 (and $x405 $x397)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x131 (and $x228 $x282)))
 (let (($x216 (and $x231 $x131)))
 (let (($x230 (= ?x381 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x251 (and $x230 $x216)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x290 (and $x222 $x251)))
 (let (($x188 (and $x231 $x290)))
 (let (($x326 (= ?x291 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x112 (and $x326 $x188)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x321 (and $x204 $x112)))
 (let (($x202 (and $x231 $x321)))
 (let (($x15 (= ?x116 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x138 (and $x15 $x202)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x60 (and $x105 $x138)))
 (let (($x27 (and $x231 $x60)))
 (let (($x335 (= ?x152 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x8 (and $x335 $x27)))
 (let (($x61 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x404 (_ bv3 32)))))
 (let (($x62 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x61)))))))
 (let (($x156 (bvugt ?x192 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x192 (_ bv3 32)))))
 (let (($x398 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x156)))))))
 (let (($x83 (bvugt ?x431 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x431 (_ bv3 32)))))
 (let (($x307 (=> (bvule ?x431 (bvsub (bvadd ?x431 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x337 $x83)))))))
 (let (($x157 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x32 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x157)))))))
 (let (($x23 (and $x32 $x307)))
 (let (($x40 (and $x23 $x398)))
 (let (($x302 (and $x40 $x62)))
 (let (($x193 (and $x302 $x8)))
 (let (($x459 (=> $x193 $x458)))
 (not $x459))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x108 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x108 (_ bv1 32))))
 (let (($x198 (= ?x108 (_ bv0 32))))
 (let (($x76 (or $x198 $x179)))
 (let (($x287 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x219 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x219 (_ bv1 32))))
 (let (($x296 (and $x257 $x76)))
 (let (($x348 (= ?x219 (_ bv0 32))))
 (let (($x314 (and $x348 $x76)))
 (let (($x191 (or $x314 $x296)))
 (let (($x17 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x237 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x237 (_ bv1 32))))
 (let (($x456 (and $x247 $x191)))
 (let (($x39 (= ?x237 (_ bv0 32))))
 (let (($x33 (and $x39 $x191)))
 (let (($x455 (or $x33 $x456)))
 (let (($x442 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x443 (ite $x442 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x443 (_ bv1 32))))
 (let (($x453 (and $x242 $x455)))
 (let (($x114 (= ?x443 (_ bv0 32))))
 (let (($x110 (and $x114 $x455)))
 (let (($x454 (or $x110 $x453)))
 (let (($x248 (or false $x454)))
 (let (($x457 (= $x248 true)))
 (let (($x458 (= $x457 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x409 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x440 (concat ?x415 (concat ?x334 (concat ?x409 ?x42)))))
 (let (($x367 (= ?x440 input.dst.llvm-%m)))
 (let (($x134 (= $x367 true)))
 (let ((?x192 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x183 (= (bvand ?x192 (_ bv4294967292 32)) ?x192)))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x280 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x180 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x363 (and true $x180)))
 (let ((?x431 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x227 (= (bvand ?x431 (_ bv4294967292 32)) ?x431)))
 (let (($x244 (and $x227 $x363)))
 (let (($x246 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x192 (bvsub ?x192 (_ bv8 32))) (bvult ?x192 (bvsub ?x192 (_ bv8 32))))))
 (let (($x130 (and (and (and true $x246) $x244) $x280)))
 (let (($x304 (and $x130 $x183)))
 (let (($x31 (= $x304 true)))
 (let (($x252 (= $x31 true)))
 (let (($x165 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x93 (and true $x165)))
 (let (($x86 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x347 (and $x86 $x93)))
 (let (($x345 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x431 (bvsub ?x431 (_ bv12 32))) (bvult ?x431 (bvsub ?x431 (_ bv12 32))))))
 (let (($x13 (and (and (and true $x86) $x345) $x347)))
 (let (($x65 (= $x13 true)))
 (let (($x10 (= $x65 true)))
 (let (($x74 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x400 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv1 32))) (select input.dst.llvm-mem ?x400))))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv2 32))) ?x360))))
 (let ((?x410 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x92 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x97 (_ bv1 32))))
 (=> $x6 (= ?x410 ?x241))))))))))
 ))
 (let (($x145 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x97 (_ bv1 32))))
 (= $x6 (bvuge ?x258 (_ bv1 32))))))))
 ))
 (let (($x261 (forall ((Lambda5 (_ BitVec 32)) )(let (($x231 (= false false)))
 (let (($x92 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x97 (_ bv0 32))))
 (=> $x203 $x231))))))
 ))
 (let (($x313 (forall ((Lambda5 (_ BitVec 32)) )(let (($x92 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (= ?x97 (_ bv0 32))))
 (= $x203 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x102 (and $x313 $x261)))
 (let (($x333 (and $x102 $x145)))
 (let (($x357 (and $x333 $x74)))
 (let (($x59 (= $x357 true)))
 (let (($x266 (= $x59 true)))
 (let ((?x317 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x173 (= (_ bv0 32) ?x317)))
 (let ((?x295 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x295)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x184 $x212)))
 (let (($x354 (and $x77 $x173)))
 (let (($x395 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (and $x395 $x354)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x364 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x364 $x224)))))))
 (let (($x308 (and $x84 $x263)))
 (let (($x234 (= $x308 true)))
 (let (($x233 (= $x234 true)))
 (let (($x350 (and $x233 $x266)))
 (let (($x346 (and $x350 $x10)))
 (let (($x139 (and $x346 $x252)))
 (let (($x273 (and $x139 $x134)))
 (let ((?x381 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x51 (= ?x381 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x272 (=> $x242 $x51)))
 (let (($x217 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x176 (= $x242 $x217)))
 (let (($x231 (= false false)))
 (let (($x355 (=> $x114 $x231)))
 (let (($x113 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x349 (= $x114 $x113)))
 (let (($x73 (and $x349 $x355)))
 (let (($x26 (and $x73 $x176)))
 (let (($x197 (and $x26 $x272)))
 (let (($x141 (and $x197 $x273)))
 (let ((?x291 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x25 (= ?x291 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x213 (=> $x247 $x25)))
 (let (($x143 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x328 (= $x247 $x143)))
 (let (($x78 (=> $x39 $x231)))
 (let (($x418 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x161 (= $x39 $x418)))
 (let (($x396 (and $x161 $x78)))
 (let (($x56 (and $x396 $x328)))
 (let (($x147 (and $x56 $x213)))
 (let (($x236 (and $x147 $x141)))
 (let ((?x116 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x373 (= ?x116 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x460 (=> $x257 $x373)))
 (let (($x358 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x172 (= $x257 $x358)))
 (let (($x85 (=> $x348 $x231)))
 (let (($x283 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x50 (= $x348 $x283)))
 (let (($x101 (and $x50 $x85)))
 (let (($x151 (and $x101 $x172)))
 (let (($x303 (and $x151 $x460)))
 (let (($x129 (and $x303 $x236)))
 (let ((?x152 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x104 (= ?x152 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x427 (=> $x179 $x104)))
 (let (($x277 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x301 (= $x179 $x277)))
 (let (($x98 (=> $x198 $x231)))
 (let (($x238 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x107 (= $x198 $x238)))
 (let (($x82 (and $x107 $x98)))
 (let (($x426 (and $x82 $x301)))
 (let (($x270 (and $x426 $x427)))
 (let (($x423 (and $x270 $x129)))
 (let (($x374 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x264 (and $x374 $x423)))
 (let (($x375 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x402 (and $x375 $x264)))
 (let (($x11 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x397 (and $x11 $x402)))
 (let (($x405 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x282 (and $x405 $x397)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x131 (and $x228 $x282)))
 (let (($x216 (and $x231 $x131)))
 (let (($x230 (= ?x381 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x251 (and $x230 $x216)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x290 (and $x222 $x251)))
 (let (($x188 (and $x231 $x290)))
 (let (($x326 (= ?x291 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x112 (and $x326 $x188)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x321 (and $x204 $x112)))
 (let (($x202 (and $x231 $x321)))
 (let (($x15 (= ?x116 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x138 (and $x15 $x202)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x60 (and $x105 $x138)))
 (let (($x27 (and $x231 $x60)))
 (let (($x335 (= ?x152 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x8 (and $x335 $x27)))
 (let (($x61 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x404 (_ bv3 32)))))
 (let (($x62 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x61)))))))
 (let (($x156 (bvugt ?x192 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x192 (_ bv3 32)))))
 (let (($x398 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x156)))))))
 (let (($x83 (bvugt ?x431 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x431 (_ bv3 32)))))
 (let (($x307 (=> (bvule ?x431 (bvsub (bvadd ?x431 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x337 $x83)))))))
 (let (($x157 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x32 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x157)))))))
 (let (($x23 (and $x32 $x307)))
 (let (($x40 (and $x23 $x398)))
 (let (($x302 (and $x40 $x62)))
 (let (($x193 (and $x302 $x8)))
 (let (($x459 (=> $x193 $x458)))
 (not $x459))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 236 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x370 (bvmul (_ bv4294967295 32) ?x62)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x159 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x424)))
 (let ((?x36 (bvadd ?x159 ?x370)))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x352 (concat ?x294 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x7 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x425 (bvadd ?x7 (_ bv3 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem ?x425) (concat ?x46 ?x352))))
 (let ((?x144 (bvmul (_ bv4294967295 32) ?x393)))
 (let ((?x341 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x250 (concat ?x341 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x95 (bvadd ?x133 (_ bv3 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem ?x95) (concat ?x171 ?x250))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x332 (concat ?x279 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x167 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x221 (bvadd ?x167 (_ bv3 32))))
 (let ((?x218 (concat (select input.dst.llvm-mem ?x221) (concat ?x94 ?x332))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x329)))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x160)))
 (let ((?x377 (bvadd (bvadd (bvadd ?x399 ?x218) ?x269) ?x144)))
 (let (($x390 (= ?x377 ?x36)))
 (let (($x310 (= $x390 true)))
 (let (($x365 (= $x310 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x456 (concat ?x33 (concat ?x314 (concat ?x8 ?x60)))))
 (let (($x71 (= ?x456 input.dst.llvm-%m)))
 (let (($x20 (= $x71 true)))
 (let (($x106 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x92 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x308 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x234 (and true $x308)))
 (let (($x77 (= (bvand ?x167 (_ bv4294967292 32)) ?x167)))
 (let (($x233 (and $x77 $x234)))
 (let (($x184 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv8 32))) (bvult ?x7 (bvsub ?x7 (_ bv8 32))))))
 (let (($x256 (and (and (and true $x184) $x233) $x92)))
 (let (($x309 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x54 (and true $x309)))
 (let (($x313 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x400 (and $x313 $x54)))
 (let (($x274 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x167 (bvsub ?x167 (_ bv12 32))) (bvult ?x167 (bvsub ?x167 (_ bv12 32))))))
 (let (($x408 (and (and (and true $x313) $x274) $x400)))
 (let (($x453 (and (and $x408 $x256) $x106)))
 (let (($x455 (= input.dst.llvm-%m ?x456)))
 (let (($x454 (and $x455 $x453)))
 (let ((?x188 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x112 (= (_ bv0 32) ?x188)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x131 $x251)))
 (let (($x321 (and $x290 $x112)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x282 $x321)))
 (let (($x264 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x64 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem ?x64))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv2 32))) ?x123))))
 (let ((?x437 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x231 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x13 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x13 (_ bv1 32))))
 (=> $x229 (= ?x437 ?x236))))))))))
 ))
 (let (($x182 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x93 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x13 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x13 (_ bv1 32))))
 (= $x229 (bvuge ?x93 (_ bv1 32))))))))
 ))
 (let (($x80 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x231 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x13 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x13 (_ bv0 32))))
 (=> $x65 $x81))))))
 ))
 (let (($x346 (forall ((Lambda5 (_ BitVec 32)) )(let (($x231 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x13 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x13 (_ bv0 32))))
 (= $x65 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x441 (and $x346 $x80)))
 (let (($x109 (and $x441 $x182)))
 (let (($x402 (and $x109 $x264)))
 (let (($x357 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x357)))))))
 (let (($x458 (and (and (and $x86 $x402) $x202) $x454)))
 (let (($x459 (= $x458 true)))
 (let (($x12 (= $x459 true)))
 (let (($x164 (= $x408 true)))
 (let (($x136 (= $x164 true)))
 (let (($x387 (and $x256 $x106)))
 (let (($x258 (= $x387 true)))
 (let (($x69 (= $x258 true)))
 (let (($x200 (and $x69 $x136)))
 (let (($x175 (and $x200 $x12)))
 (let (($x115 (and $x175 $x20)))
 (let (($x107 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x82 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x82 (_ bv1 32))))
 (let (($x85 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x101 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x101 (_ bv1 32))))
 (let (($x300 (and $x460 $x427)))
 (let (($x78 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x396 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x396 (_ bv1 32))))
 (let (($x316 (and $x213 $x300)))
 (let (($x355 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x73 (ite $x355 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x73 (_ bv1 32))))
 (let (($x330 (and $x272 $x316)))
 (let (($x170 (and $x330 $x115)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x378 (= ?x47 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x364 (=> $x272 $x378)))
 (let (($x197 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x99 (= $x272 $x197)))
 (let (($x81 (= false false)))
 (let (($x242 (= ?x73 (_ bv0 32))))
 (let (($x124 (=> $x242 $x81)))
 (let (($x176 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x26 (= $x242 $x176)))
 (let (($x51 (and $x26 $x124)))
 (let (($x249 (and $x51 $x99)))
 (let (($x224 (and $x249 $x364)))
 (let (($x338 (and $x224 $x170)))
 (let ((?x381 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x439 (= ?x381 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x113 (=> $x213 $x439)))
 (let (($x147 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x442 (= $x213 $x147)))
 (let (($x247 (= ?x396 (_ bv0 32))))
 (let (($x121 (=> $x247 $x81)))
 (let (($x328 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x56 (= $x247 $x328)))
 (let (($x25 (and $x56 $x121)))
 (let (($x443 (and $x25 $x442)))
 (let (($x349 (and $x443 $x113)))
 (let (($x384 (and $x349 $x338)))
 (let (($x305 (= ?x62 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x418 (=> $x460 $x305)))
 (let (($x303 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x17 (= $x460 $x303)))
 (let (($x257 (= ?x101 (_ bv0 32))))
 (let (($x372 (=> $x257 $x81)))
 (let (($x172 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x151 (= $x257 $x172)))
 (let (($x373 (and $x151 $x372)))
 (let (($x237 (and $x373 $x17)))
 (let (($x161 (and $x237 $x418)))
 (let (($x57 (and $x161 $x384)))
 (let (($x142 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x283 (=> $x427 $x142)))
 (let (($x270 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x287 (= $x427 $x270)))
 (let (($x179 (= ?x82 (_ bv0 32))))
 (let (($x297 (=> $x179 $x81)))
 (let (($x301 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x426 (= $x179 $x301)))
 (let (($x104 (and $x426 $x297)))
 (let (($x219 (and $x104 $x287)))
 (let (($x50 (and $x219 $x283)))
 (let (($x389 (and $x50 $x57)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x168 (and $x238 $x389)))
 (let (($x198 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x162 (and $x198 $x168)))
 (let (($x122 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x243 (and $x122 $x162)))
 (let (($x14 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x19 (and $x14 $x243)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x376 (and $x34 $x19)))
 (let (($x24 (and $x81 $x376)))
 (let (($x289 (= ?x47 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x406 (and $x289 $x24)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x75 (and $x228 $x406)))
 (let (($x388 (and $x81 $x75)))
 (let (($x230 (= ?x381 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x385 (and $x230 $x388)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x391 (and $x222 $x385)))
 (let (($x433 (and $x81 $x391)))
 (let (($x66 (= ?x62 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x235 (and $x66 $x433)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x356 (and $x40 $x235)))
 (let (($x90 (and $x81 $x356)))
 (let (($x438 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x320 (and $x438 $x90)))
 (let (($x15 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x116 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x15)))))))
 (let (($x369 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x371 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x425)))
 (let (($x319 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x371 $x369)))))))
 (let (($x199 (bvugt ?x167 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x157 (=> (bvule ?x167 (bvsub (bvadd ?x167 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x199)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x361 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x361)))
 (let (($x156 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x22)))))))
 (let (($x326 (and $x156 $x157)))
 (let (($x83 (and $x326 $x319)))
 (let (($x215 (and $x83 $x116)))
 (let (($x413 (and $x215 $x320)))
 (let (($x401 (=> $x413 $x365)))
 (not $x401))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x370 (bvmul (_ bv4294967295 32) ?x62)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x159 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x424)))
 (let ((?x36 (bvadd ?x159 ?x370)))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x352 (concat ?x294 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x7 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x425 (bvadd ?x7 (_ bv3 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem ?x425) (concat ?x46 ?x352))))
 (let ((?x144 (bvmul (_ bv4294967295 32) ?x393)))
 (let ((?x341 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x250 (concat ?x341 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x95 (bvadd ?x133 (_ bv3 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem ?x95) (concat ?x171 ?x250))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x332 (concat ?x279 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x167 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x221 (bvadd ?x167 (_ bv3 32))))
 (let ((?x218 (concat (select input.dst.llvm-mem ?x221) (concat ?x94 ?x332))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x329)))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x160)))
 (let ((?x377 (bvadd (bvadd (bvadd ?x399 ?x218) ?x269) ?x144)))
 (let (($x390 (= ?x377 ?x36)))
 (let (($x310 (= $x390 true)))
 (let (($x365 (= $x310 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x456 (concat ?x33 (concat ?x314 (concat ?x8 ?x60)))))
 (let (($x71 (= ?x456 input.dst.llvm-%m)))
 (let (($x20 (= $x71 true)))
 (let (($x106 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x92 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x308 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x234 (and true $x308)))
 (let (($x77 (= (bvand ?x167 (_ bv4294967292 32)) ?x167)))
 (let (($x233 (and $x77 $x234)))
 (let (($x184 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv8 32))) (bvult ?x7 (bvsub ?x7 (_ bv8 32))))))
 (let (($x256 (and (and (and true $x184) $x233) $x92)))
 (let (($x309 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x54 (and true $x309)))
 (let (($x313 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x400 (and $x313 $x54)))
 (let (($x274 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x167 (bvsub ?x167 (_ bv12 32))) (bvult ?x167 (bvsub ?x167 (_ bv12 32))))))
 (let (($x408 (and (and (and true $x313) $x274) $x400)))
 (let (($x453 (and (and $x408 $x256) $x106)))
 (let (($x455 (= input.dst.llvm-%m ?x456)))
 (let (($x454 (and $x455 $x453)))
 (let ((?x188 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x112 (= (_ bv0 32) ?x188)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x131 $x251)))
 (let (($x321 (and $x290 $x112)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x282 $x321)))
 (let (($x264 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x64 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem ?x64))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x64 (_ bv2 32))) ?x123))))
 (let ((?x437 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x231 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x13 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x13 (_ bv1 32))))
 (=> $x229 (= ?x437 ?x236))))))))))
 ))
 (let (($x182 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x93 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x13 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x13 (_ bv1 32))))
 (= $x229 (bvuge ?x93 (_ bv1 32))))))))
 ))
 (let (($x80 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (= false false)))
 (let (($x231 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x13 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x13 (_ bv0 32))))
 (=> $x65 $x81))))))
 ))
 (let (($x346 (forall ((Lambda5 (_ BitVec 32)) )(let (($x231 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x13 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x13 (_ bv0 32))))
 (= $x65 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x441 (and $x346 $x80)))
 (let (($x109 (and $x441 $x182)))
 (let (($x402 (and $x109 $x264)))
 (let (($x357 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x74 $x357)))))))
 (let (($x458 (and (and (and $x86 $x402) $x202) $x454)))
 (let (($x459 (= $x458 true)))
 (let (($x12 (= $x459 true)))
 (let (($x164 (= $x408 true)))
 (let (($x136 (= $x164 true)))
 (let (($x387 (and $x256 $x106)))
 (let (($x258 (= $x387 true)))
 (let (($x69 (= $x258 true)))
 (let (($x200 (and $x69 $x136)))
 (let (($x175 (and $x200 $x12)))
 (let (($x115 (and $x175 $x20)))
 (let (($x107 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x82 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x82 (_ bv1 32))))
 (let (($x85 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x101 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x460 (bvuge ?x101 (_ bv1 32))))
 (let (($x300 (and $x460 $x427)))
 (let (($x78 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x396 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x396 (_ bv1 32))))
 (let (($x316 (and $x213 $x300)))
 (let (($x355 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x73 (ite $x355 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x73 (_ bv1 32))))
 (let (($x330 (and $x272 $x316)))
 (let (($x170 (and $x330 $x115)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x378 (= ?x47 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x364 (=> $x272 $x378)))
 (let (($x197 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x99 (= $x272 $x197)))
 (let (($x81 (= false false)))
 (let (($x242 (= ?x73 (_ bv0 32))))
 (let (($x124 (=> $x242 $x81)))
 (let (($x176 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x26 (= $x242 $x176)))
 (let (($x51 (and $x26 $x124)))
 (let (($x249 (and $x51 $x99)))
 (let (($x224 (and $x249 $x364)))
 (let (($x338 (and $x224 $x170)))
 (let ((?x381 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x439 (= ?x381 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x113 (=> $x213 $x439)))
 (let (($x147 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x442 (= $x213 $x147)))
 (let (($x247 (= ?x396 (_ bv0 32))))
 (let (($x121 (=> $x247 $x81)))
 (let (($x328 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x56 (= $x247 $x328)))
 (let (($x25 (and $x56 $x121)))
 (let (($x443 (and $x25 $x442)))
 (let (($x349 (and $x443 $x113)))
 (let (($x384 (and $x349 $x338)))
 (let (($x305 (= ?x62 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x418 (=> $x460 $x305)))
 (let (($x303 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x17 (= $x460 $x303)))
 (let (($x257 (= ?x101 (_ bv0 32))))
 (let (($x372 (=> $x257 $x81)))
 (let (($x172 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x151 (= $x257 $x172)))
 (let (($x373 (and $x151 $x372)))
 (let (($x237 (and $x373 $x17)))
 (let (($x161 (and $x237 $x418)))
 (let (($x57 (and $x161 $x384)))
 (let (($x142 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x283 (=> $x427 $x142)))
 (let (($x270 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x287 (= $x427 $x270)))
 (let (($x179 (= ?x82 (_ bv0 32))))
 (let (($x297 (=> $x179 $x81)))
 (let (($x301 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x426 (= $x179 $x301)))
 (let (($x104 (and $x426 $x297)))
 (let (($x219 (and $x104 $x287)))
 (let (($x50 (and $x219 $x283)))
 (let (($x389 (and $x50 $x57)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x168 (and $x238 $x389)))
 (let (($x198 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x162 (and $x198 $x168)))
 (let (($x122 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x243 (and $x122 $x162)))
 (let (($x14 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x19 (and $x14 $x243)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x376 (and $x34 $x19)))
 (let (($x24 (and $x81 $x376)))
 (let (($x289 (= ?x47 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x406 (and $x289 $x24)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x75 (and $x228 $x406)))
 (let (($x388 (and $x81 $x75)))
 (let (($x230 (= ?x381 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x385 (and $x230 $x388)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x391 (and $x222 $x385)))
 (let (($x433 (and $x81 $x391)))
 (let (($x66 (= ?x62 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x235 (and $x66 $x433)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x356 (and $x40 $x235)))
 (let (($x90 (and $x81 $x356)))
 (let (($x438 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x320 (and $x438 $x90)))
 (let (($x15 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x116 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x15)))))))
 (let (($x369 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x371 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x425)))
 (let (($x319 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x371 $x369)))))))
 (let (($x199 (bvugt ?x167 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x157 (=> (bvule ?x167 (bvsub (bvadd ?x167 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x199)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x361 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x361)))
 (let (($x156 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x22)))))))
 (let (($x326 (and $x156 $x157)))
 (let (($x83 (and $x326 $x319)))
 (let (($x215 (and $x83 $x116)))
 (let (($x413 (and $x215 $x320)))
 (let (($x401 (=> $x413 $x365)))
 (not $x401))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x381 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x304 (bvmul (_ bv4294967295 32) ?x381)))
 (let ((?x130 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x304)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x211 (concat ?x21 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x394 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x369 (bvadd ?x394 (_ bv3 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem ?x369) (concat ?x153 ?x211))))
 (let ((?x420 (bvmul (_ bv4294967295 32) ?x244)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x302 (concat ?x37 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x15 (bvadd ?x404 (_ bv3 32))))
 (let ((?x30 (concat (select input.dst.llvm-mem ?x15) (concat ?x336 ?x302))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x310 (concat ?x390 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x401 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x226 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x199 (bvadd ?x226 (_ bv3 32))))
 (let ((?x138 (concat (select input.dst.llvm-mem ?x199) (concat ?x401 ?x310))))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x343)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x377)))
 (let ((?x183 (bvadd (bvadd (bvadd ?x159 ?x138) ?x30) ?x420)))
 (let (($x262 (= ?x183 ?x130)))
 (let (($x166 (= $x262 true)))
 (let (($x31 (= $x166 true)))
 (let ((?x406 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x388 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x320 (concat ?x90 (concat ?x433 (concat ?x388 ?x406)))))
 (let (($x245 (= ?x320 input.dst.llvm-%m)))
 (let (($x169 (= $x245 true)))
 (let (($x210 (= (bvand ?x394 (_ bv4294967292 32)) ?x394)))
 (let (($x387 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x256 (and true $x92)))
 (let (($x308 (= (bvand ?x226 (_ bv4294967292 32)) ?x226)))
 (let (($x205 (and $x308 $x256)))
 (let (($x317 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x394 (bvsub ?x394 (_ bv8 32))) (bvult ?x394 (bvsub ?x394 (_ bv8 32))))))
 (let (($x368 (and (and (and true $x317) $x205) $x387)))
 (let (($x164 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x136 (and true $x164)))
 (let (($x274 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x200 (and $x274 $x136)))
 (let (($x410 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x226 (bvsub ?x226 (_ bv12 32))) (bvult ?x226 (bvsub ?x226 (_ bv12 32))))))
 (let (($x268 (and (and (and true $x274) $x410) $x200)))
 (let (($x411 (and (and $x268 $x368) $x210)))
 (let (($x413 (= input.dst.llvm-%m ?x320)))
 (let (($x327 (and $x413 $x411)))
 (let ((?x162 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x243 (= (_ bv0 32) ?x162)))
 (let ((?x57 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x389 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x384 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x384 $x389)))
 (let (($x19 (and $x168 $x243)))
 (let (($x338 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x376 (and $x338 $x19)))
 (let (($x20 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x455))))
 (let ((?x155 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x81 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x64 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x423 (bvuge ?x64 (_ bv1 32))))
 (=> $x423 (= ?x155 ?x12))))))))))
 ))
 (let (($x402 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x363 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x64 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x423 (bvuge ?x64 (_ bv1 32))))
 (= $x423 (bvuge ?x363 (_ bv1 32))))))))
 ))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let (($x62 (= false false)))
 (let (($x81 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x64 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (= ?x64 (_ bv0 32))))
 (=> $x273 $x62))))))
 ))
 (let (($x440 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x64 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (= ?x64 (_ bv0 32))))
 (= $x273 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x409 (and $x440 $x111)))
 (let (($x248 (and $x409 $x402)))
 (let (($x115 (and $x248 $x20)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x231 $x13)))))))
 (let (($x225 (and (and (and $x93 $x115) $x376) $x327)))
 (let (($x329 (= $x225 true)))
 (let (($x160 (= $x329 true)))
 (let (($x259 (= $x268 true)))
 (let (($x74 (= $x259 true)))
 (let (($x261 (and $x368 $x210)))
 (let (($x70 (= $x261 true)))
 (let (($x102 (= $x70 true)))
 (let (($x357 (and $x102 $x74)))
 (let (($x399 (and $x357 $x160)))
 (let (($x94 (and $x399 $x169)))
 (let (($x426 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x104 (ite $x426 (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x104 (_ bv0 32))))
 (let (($x372 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x373 (ite $x372 (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x373 (_ bv1 32))))
 (let (($x395 (and $x418 $x427)))
 (let (($x121 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x25 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x25 (_ bv1 32))))
 (let (($x184 (and $x113 $x395)))
 (let (($x124 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x51 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x51 (_ bv1 32))))
 (let (($x97 (and $x364 $x184)))
 (let (($x379 (and $x97 $x94)))
 (let ((?x375 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x84 (= ?x375 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x58 (=> $x364 $x84)))
 (let (($x224 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x300 (= $x364 $x224)))
 (let (($x62 (= false false)))
 (let (($x272 (= ?x51 (_ bv0 32))))
 (let (($x38 (=> $x272 $x62)))
 (let (($x99 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x249 (= $x272 $x99)))
 (let (($x378 (and $x249 $x38)))
 (let (($x316 (and $x378 $x300)))
 (let (($x351 (and $x316 $x58)))
 (let (($x279 (and $x351 $x379)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x217 (= ?x47 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x176 (=> $x113 $x217)))
 (let (($x349 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x355 (= $x113 $x349)))
 (let (($x213 (= ?x25 (_ bv0 32))))
 (let (($x114 (=> $x213 $x62)))
 (let (($x442 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x443 (= $x213 $x442)))
 (let (($x439 (and $x443 $x114)))
 (let (($x73 (and $x439 $x355)))
 (let (($x26 (and $x73 $x176)))
 (let (($x96 (and $x26 $x279)))
 (let (($x143 (= ?x381 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x328 (=> $x418 $x143)))
 (let (($x161 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x78 (= $x418 $x161)))
 (let (($x460 (= ?x373 (_ bv0 32))))
 (let (($x39 (=> $x460 $x62)))
 (let (($x17 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x237 (= $x460 $x17)))
 (let (($x305 (and $x237 $x39)))
 (let (($x396 (and $x305 $x78)))
 (let (($x56 (and $x396 $x328)))
 (let (($x332 (and $x56 $x96)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x358 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x283 (bvuge ?x104 (_ bv1 32))))
 (let (($x172 (=> $x283 $x358)))
 (let (($x50 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x85 (= $x283 $x50)))
 (let (($x348 (=> $x427 $x62)))
 (let (($x287 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x219 (= $x427 $x287)))
 (let (($x142 (and $x219 $x348)))
 (let (($x101 (and $x142 $x85)))
 (let (($x151 (and $x101 $x172)))
 (let (($x353 (and $x151 $x332)))
 (let (($x301 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x218 (and $x301 $x353)))
 (let (($x179 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x239 (and $x179 $x218)))
 (let (($x107 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x67 (and $x107 $x239)))
 (let (($x43 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x89 (and $x43 $x67)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x171 (and $x108 $x89)))
 (let (($x103 (and $x62 $x171)))
 (let (($x374 (= ?x375 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x341 (and $x374 $x103)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x146 (and $x34 $x341)))
 (let (($x250 (and $x62 $x146)))
 (let (($x289 (= ?x47 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x119 (and $x289 $x250)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x269 (and $x228 $x119)))
 (let (($x331 (and $x62 $x269)))
 (let (($x230 (= ?x381 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x265 (and $x230 $x331)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x125 (and $x135 $x265)))
 (let (($x100 (and $x62 $x125)))
 (let (($x275 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x46 (and $x275 $x100)))
 (let (($x152 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x9 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x152)))))))
 (let (($x208 (bvugt ?x394 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x369)))
 (let (($x55 (=> (bvule ?x394 (bvsub (bvadd ?x394 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x271 $x208)))))))
 (let (($x291 (bvugt ?x226 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x7 (=> (bvule ?x226 (bvsub (bvadd ?x226 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x209 $x291)))))))
 (let (($x324 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x318 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x337 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x318 $x324)))))))
 (let (($x299 (and $x337 $x7)))
 (let (($x127 (and $x299 $x55)))
 (let (($x192 (and $x127 $x9)))
 (let (($x194 (and $x192 $x46)))
 (let (($x419 (=> $x194 $x31)))
 (not $x419)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x381 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x304 (bvmul (_ bv4294967295 32) ?x381)))
 (let ((?x130 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x304)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x211 (concat ?x21 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x394 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x369 (bvadd ?x394 (_ bv3 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem ?x369) (concat ?x153 ?x211))))
 (let ((?x420 (bvmul (_ bv4294967295 32) ?x244)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x302 (concat ?x37 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x15 (bvadd ?x404 (_ bv3 32))))
 (let ((?x30 (concat (select input.dst.llvm-mem ?x15) (concat ?x336 ?x302))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x310 (concat ?x390 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x401 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x226 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x199 (bvadd ?x226 (_ bv3 32))))
 (let ((?x138 (concat (select input.dst.llvm-mem ?x199) (concat ?x401 ?x310))))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x343)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x377)))
 (let ((?x183 (bvadd (bvadd (bvadd ?x159 ?x138) ?x30) ?x420)))
 (let (($x262 (= ?x183 ?x130)))
 (let (($x166 (= $x262 true)))
 (let (($x31 (= $x166 true)))
 (let ((?x406 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x388 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x320 (concat ?x90 (concat ?x433 (concat ?x388 ?x406)))))
 (let (($x245 (= ?x320 input.dst.llvm-%m)))
 (let (($x169 (= $x245 true)))
 (let (($x210 (= (bvand ?x394 (_ bv4294967292 32)) ?x394)))
 (let (($x387 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x92 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x256 (and true $x92)))
 (let (($x308 (= (bvand ?x226 (_ bv4294967292 32)) ?x226)))
 (let (($x205 (and $x308 $x256)))
 (let (($x317 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x394 (bvsub ?x394 (_ bv8 32))) (bvult ?x394 (bvsub ?x394 (_ bv8 32))))))
 (let (($x368 (and (and (and true $x317) $x205) $x387)))
 (let (($x164 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x136 (and true $x164)))
 (let (($x274 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x200 (and $x274 $x136)))
 (let (($x410 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x226 (bvsub ?x226 (_ bv12 32))) (bvult ?x226 (bvsub ?x226 (_ bv12 32))))))
 (let (($x268 (and (and (and true $x274) $x410) $x200)))
 (let (($x411 (and (and $x268 $x368) $x210)))
 (let (($x413 (= input.dst.llvm-%m ?x320)))
 (let (($x327 (and $x413 $x411)))
 (let ((?x162 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x243 (= (_ bv0 32) ?x162)))
 (let ((?x57 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x389 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let (($x384 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (and $x384 $x389)))
 (let (($x19 (and $x168 $x243)))
 (let (($x338 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x376 (and $x338 $x19)))
 (let (($x20 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x455))))
 (let ((?x155 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x81 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x64 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x423 (bvuge ?x64 (_ bv1 32))))
 (=> $x423 (= ?x155 ?x12))))))))))
 ))
 (let (($x402 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x363 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x64 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x423 (bvuge ?x64 (_ bv1 32))))
 (= $x423 (bvuge ?x363 (_ bv1 32))))))))
 ))
 (let (($x111 (forall ((Lambda5 (_ BitVec 32)) )(let (($x62 (= false false)))
 (let (($x81 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x64 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (= ?x64 (_ bv0 32))))
 (=> $x273 $x62))))))
 ))
 (let (($x440 (forall ((Lambda5 (_ BitVec 32)) )(let (($x81 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x64 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x273 (= ?x64 (_ bv0 32))))
 (= $x273 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x409 (and $x440 $x111)))
 (let (($x248 (and $x409 $x402)))
 (let (($x115 (and $x248 $x20)))
 (let (($x13 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x231 $x13)))))))
 (let (($x225 (and (and (and $x93 $x115) $x376) $x327)))
 (let (($x329 (= $x225 true)))
 (let (($x160 (= $x329 true)))
 (let (($x259 (= $x268 true)))
 (let (($x74 (= $x259 true)))
 (let (($x261 (and $x368 $x210)))
 (let (($x70 (= $x261 true)))
 (let (($x102 (= $x70 true)))
 (let (($x357 (and $x102 $x74)))
 (let (($x399 (and $x357 $x160)))
 (let (($x94 (and $x399 $x169)))
 (let (($x426 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x104 (ite $x426 (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x104 (_ bv0 32))))
 (let (($x372 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x373 (ite $x372 (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x373 (_ bv1 32))))
 (let (($x395 (and $x418 $x427)))
 (let (($x121 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x25 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x25 (_ bv1 32))))
 (let (($x184 (and $x113 $x395)))
 (let (($x124 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x51 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x364 (bvuge ?x51 (_ bv1 32))))
 (let (($x97 (and $x364 $x184)))
 (let (($x379 (and $x97 $x94)))
 (let ((?x375 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x84 (= ?x375 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x58 (=> $x364 $x84)))
 (let (($x224 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x300 (= $x364 $x224)))
 (let (($x62 (= false false)))
 (let (($x272 (= ?x51 (_ bv0 32))))
 (let (($x38 (=> $x272 $x62)))
 (let (($x99 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x249 (= $x272 $x99)))
 (let (($x378 (and $x249 $x38)))
 (let (($x316 (and $x378 $x300)))
 (let (($x351 (and $x316 $x58)))
 (let (($x279 (and $x351 $x379)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x217 (= ?x47 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x176 (=> $x113 $x217)))
 (let (($x349 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x355 (= $x113 $x349)))
 (let (($x213 (= ?x25 (_ bv0 32))))
 (let (($x114 (=> $x213 $x62)))
 (let (($x442 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x443 (= $x213 $x442)))
 (let (($x439 (and $x443 $x114)))
 (let (($x73 (and $x439 $x355)))
 (let (($x26 (and $x73 $x176)))
 (let (($x96 (and $x26 $x279)))
 (let (($x143 (= ?x381 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x328 (=> $x418 $x143)))
 (let (($x161 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x78 (= $x418 $x161)))
 (let (($x460 (= ?x373 (_ bv0 32))))
 (let (($x39 (=> $x460 $x62)))
 (let (($x17 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x237 (= $x460 $x17)))
 (let (($x305 (and $x237 $x39)))
 (let (($x396 (and $x305 $x78)))
 (let (($x56 (and $x396 $x328)))
 (let (($x332 (and $x56 $x96)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x358 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x283 (bvuge ?x104 (_ bv1 32))))
 (let (($x172 (=> $x283 $x358)))
 (let (($x50 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x85 (= $x283 $x50)))
 (let (($x348 (=> $x427 $x62)))
 (let (($x287 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x219 (= $x427 $x287)))
 (let (($x142 (and $x219 $x348)))
 (let (($x101 (and $x142 $x85)))
 (let (($x151 (and $x101 $x172)))
 (let (($x353 (and $x151 $x332)))
 (let (($x301 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x218 (and $x301 $x353)))
 (let (($x179 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x239 (and $x179 $x218)))
 (let (($x107 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x67 (and $x107 $x239)))
 (let (($x43 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x89 (and $x43 $x67)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x171 (and $x108 $x89)))
 (let (($x103 (and $x62 $x171)))
 (let (($x374 (= ?x375 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x341 (and $x374 $x103)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x146 (and $x34 $x341)))
 (let (($x250 (and $x62 $x146)))
 (let (($x289 (= ?x47 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x119 (and $x289 $x250)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x269 (and $x228 $x119)))
 (let (($x331 (and $x62 $x269)))
 (let (($x230 (= ?x381 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x265 (and $x230 $x331)))
 (let (($x135 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x125 (and $x135 $x265)))
 (let (($x100 (and $x62 $x125)))
 (let (($x275 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x46 (and $x275 $x100)))
 (let (($x152 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x9 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x152)))))))
 (let (($x208 (bvugt ?x394 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x369)))
 (let (($x55 (=> (bvule ?x394 (bvsub (bvadd ?x394 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x271 $x208)))))))
 (let (($x291 (bvugt ?x226 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x7 (=> (bvule ?x226 (bvsub (bvadd ?x226 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x209 $x291)))))))
 (let (($x324 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x318 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x337 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x318 $x324)))))))
 (let (($x299 (and $x337 $x7)))
 (let (($x127 (and $x299 $x55)))
 (let (($x192 (and $x127 $x9)))
 (let (($x194 (and $x192 $x46)))
 (let (($x419 (=> $x194 $x31)))
 (not $x419)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 253 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x188 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x424)))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x123 (concat ?x367 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x425 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x208 (bvadd ?x425 (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x208) (concat ?x236 ?x123))))
 (let ((?x191 (bvmul (_ bv4294967295 32) ?x216)))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x350 (concat ?x335 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x152 (bvadd ?x133 (_ bv3 32))))
 (let ((?x441 (concat (select input.dst.llvm-mem ?x152) (concat ?x10 ?x350))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x31 (concat ?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x255 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x291 (bvadd ?x255 (_ bv3 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem ?x291) (concat ?x415 ?x31))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x177)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x183)))
 (let ((?x202 (bvadd (bvadd (bvadd ?x304 ?x207) ?x441) ?x191)))
 (let (($x251 (= ?x202 ?x188)))
 (let (($x112 (= $x251 true)))
 (let (($x457 (= $x112 true)))
 (let ((?x341 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x100 (concat ?x331 (concat ?x250 ?x341)))))
 (let (($x253 (= ?x46 input.dst.llvm-%m)))
 (let (($x365 (= $x253 true)))
 (let (($x241 (= (bvand ?x425 (_ bv4294967292 32)) ?x425)))
 (let (($x261 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x387 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x368 (and true $x387)))
 (let (($x92 (= (bvand ?x255 (_ bv4294967292 32)) ?x255)))
 (let (($x313 (and $x92 $x368)))
 (let (($x234 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x425 (bvsub ?x425 (_ bv8 32))) (bvult ?x425 (bvsub ?x425 (_ bv8 32))))))
 (let (($x6 (and (and (and true $x234) $x313) $x261)))
 (let (($x259 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x74 (and true $x259)))
 (let (($x410 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x357 (and $x410 $x74)))
 (let (($x408 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x255 (bvsub ?x255 (_ bv12 32))) (bvult ?x255 (bvsub ?x255 (_ bv12 32))))))
 (let (($x165 (and (and (and true $x410) $x408) $x357)))
 (let (($x393 (and (and $x165 $x6) $x241)))
 (let (($x194 (= input.dst.llvm-%m ?x46)))
 (let (($x144 (and $x194 $x393)))
 (let ((?x239 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x67 (= (_ bv0 32) ?x239)))
 (let ((?x332 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x353 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x332)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x96 $x353)))
 (let (($x89 (and $x218 $x67)))
 (let (($x279 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x279 $x89)))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x406 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv1 32))) (select input.dst.llvm-mem ?x406))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv2 32))) ?x413))))
 (let ((?x398 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x62 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x60 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x60 (_ bv1 32))))
 (=> $x71 (= ?x398 ?x160))))))))))
 ))
 (let (($x115 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x60 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x60 (_ bv1 32))))
 (= $x71 (bvuge ?x282 (_ bv1 32))))))))
 ))
 (let (($x456 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x62 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x60 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x458 (= ?x60 (_ bv0 32))))
 (=> $x458 $x381))))))
 ))
 (let (($x110 (forall ((Lambda5 (_ BitVec 32)) )(let (($x62 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x60 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x458 (= ?x60 (_ bv0 32))))
 (= $x458 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x193 (and $x110 $x456)))
 (let (($x323 (and $x193 $x115)))
 (let (($x94 (and $x323 $x169)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x363 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x64)))))))
 (let (($x294 (and (and (and $x363 $x94) $x171) $x144)))
 (let (($x343 (= $x294 true)))
 (let (($x377 (= $x343 true)))
 (let (($x204 (= $x165 true)))
 (let (($x231 (= $x204 true)))
 (let (($x145 (and $x6 $x241)))
 (let (($x87 (= $x145 true)))
 (let (($x276 (= $x87 true)))
 (let (($x13 (and $x276 $x231)))
 (let (($x159 (and $x13 $x377)))
 (let (($x401 (and $x159 $x365)))
 (let (($x219 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x142 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x142 (_ bv1 32))))
 (let (($x39 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x305 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x305 (_ bv0 32))))
 (let (($x173 (and $x418 $x172)))
 (let (($x114 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x439 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x439 (_ bv1 32))))
 (let (($x317 (and $x176 $x173)))
 (let (($x38 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x378 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x378 (_ bv1 32))))
 (let (($x258 (and $x58 $x317)))
 (let (($x36 (and $x258 $x401)))
 (let ((?x198 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x212 (= ?x198 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x295 (=> $x58 $x212)))
 (let (($x351 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x395 (= $x58 $x351)))
 (let (($x381 (= false false)))
 (let (($x364 (= ?x378 (_ bv0 32))))
 (let (($x330 (=> $x364 $x381)))
 (let (($x300 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x316 (= $x364 $x300)))
 (let (($x84 (and $x316 $x330)))
 (let (($x184 (and $x84 $x395)))
 (let (($x77 (and $x184 $x295)))
 (let (($x390 (and $x77 $x36)))
 (let ((?x375 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x197 (= ?x375 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x99 (=> $x176 $x197)))
 (let (($x26 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x124 (= $x176 $x26)))
 (let (($x113 (= ?x439 (_ bv0 32))))
 (let (($x242 (=> $x113 $x381)))
 (let (($x355 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x73 (= $x113 $x355)))
 (let (($x217 (and $x73 $x242)))
 (let (($x51 (and $x217 $x124)))
 (let (($x249 (and $x51 $x99)))
 (let (($x370 (and $x249 $x390)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x147 (= ?x47 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x328 (bvuge ?x305 (_ bv1 32))))
 (let (($x442 (=> $x328 $x147)))
 (let (($x56 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x121 (= $x328 $x56)))
 (let (($x247 (=> $x418 $x381)))
 (let (($x78 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x396 (= $x418 $x78)))
 (let (($x143 (and $x396 $x247)))
 (let (($x25 (and $x143 $x121)))
 (let (($x443 (and $x25 $x442)))
 (let (($x310 (and $x443 $x370)))
 (let (($x303 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x17 (=> $x172 $x303)))
 (let (($x151 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x372 (= $x172 $x151)))
 (let (($x283 (= ?x142 (_ bv0 32))))
 (let (($x257 (=> $x283 $x381)))
 (let (($x85 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x101 (= $x283 $x85)))
 (let (($x358 (and $x101 $x257)))
 (let (($x373 (and $x358 $x372)))
 (let (($x237 (and $x373 $x17)))
 (let (($x286 (and $x237 $x310)))
 (let (($x287 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x138 (and $x287 $x286)))
 (let (($x427 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x252 (and $x427 $x138)))
 (let (($x426 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x72 (and $x426 $x252)))
 (let (($x277 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x132 (and $x277 $x72)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x336 (and $x82 $x132)))
 (let (($x98 (and $x381 $x336)))
 (let (($x238 (= ?x198 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x37 (and $x238 $x98)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x223 (and $x108 $x37)))
 (let (($x302 (and $x381 $x223)))
 (let (($x374 (= ?x375 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x292 (and $x374 $x302)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x30 (and $x34 $x292)))
 (let (($x139 (and $x381 $x30)))
 (let (($x289 (= ?x47 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x345 (and $x289 $x139)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x180 (and $x117 $x345)))
 (let (($x246 (and $x381 $x180)))
 (let (($x222 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x153 (and $x222 $x246)))
 (let (($x201 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x40 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x201)))))))
 (let (($x220 (bvugt ?x425 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x417 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x95 (=> (bvule ?x425 (bvsub (bvadd ?x425 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x417 $x220)))))))
 (let (($x285 (bvugt ?x255 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x394 (=> (bvule ?x255 (bvsub (bvadd ?x255 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x293 $x285)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x337 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x337)))
 (let (($x221 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x22)))))))
 (let (($x137 (and $x221 $x394)))
 (let (($x371 (and $x137 $x95)))
 (let (($x281 (and $x371 $x40)))
 (let (($x189 (and $x281 $x153)))
 (let (($x76 (=> $x189 $x457)))
 (not $x76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x188 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x424)))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x123 (concat ?x367 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x425 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x208 (bvadd ?x425 (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x208) (concat ?x236 ?x123))))
 (let ((?x191 (bvmul (_ bv4294967295 32) ?x216)))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x350 (concat ?x335 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x152 (bvadd ?x133 (_ bv3 32))))
 (let ((?x441 (concat (select input.dst.llvm-mem ?x152) (concat ?x10 ?x350))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x31 (concat ?x166 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x255 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x291 (bvadd ?x255 (_ bv3 32))))
 (let ((?x207 (concat (select input.dst.llvm-mem ?x291) (concat ?x415 ?x31))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x177)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x183)))
 (let ((?x202 (bvadd (bvadd (bvadd ?x304 ?x207) ?x441) ?x191)))
 (let (($x251 (= ?x202 ?x188)))
 (let (($x112 (= $x251 true)))
 (let (($x457 (= $x112 true)))
 (let ((?x341 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x100 (concat ?x331 (concat ?x250 ?x341)))))
 (let (($x253 (= ?x46 input.dst.llvm-%m)))
 (let (($x365 (= $x253 true)))
 (let (($x241 (= (bvand ?x425 (_ bv4294967292 32)) ?x425)))
 (let (($x261 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x387 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x368 (and true $x387)))
 (let (($x92 (= (bvand ?x255 (_ bv4294967292 32)) ?x255)))
 (let (($x313 (and $x92 $x368)))
 (let (($x234 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x425 (bvsub ?x425 (_ bv8 32))) (bvult ?x425 (bvsub ?x425 (_ bv8 32))))))
 (let (($x6 (and (and (and true $x234) $x313) $x261)))
 (let (($x259 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x74 (and true $x259)))
 (let (($x410 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x357 (and $x410 $x74)))
 (let (($x408 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x255 (bvsub ?x255 (_ bv12 32))) (bvult ?x255 (bvsub ?x255 (_ bv12 32))))))
 (let (($x165 (and (and (and true $x410) $x408) $x357)))
 (let (($x393 (and (and $x165 $x6) $x241)))
 (let (($x194 (= input.dst.llvm-%m ?x46)))
 (let (($x144 (and $x194 $x393)))
 (let ((?x239 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x67 (= (_ bv0 32) ?x239)))
 (let ((?x332 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x353 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x332)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (and $x96 $x353)))
 (let (($x89 (and $x218 $x67)))
 (let (($x279 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x279 $x89)))
 (let (($x169 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x406 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv1 32))) (select input.dst.llvm-mem ?x406))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv2 32))) ?x413))))
 (let ((?x398 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x62 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x60 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x60 (_ bv1 32))))
 (=> $x71 (= ?x398 ?x160))))))))))
 ))
 (let (($x115 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x62 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x60 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x60 (_ bv1 32))))
 (= $x71 (bvuge ?x282 (_ bv1 32))))))))
 ))
 (let (($x456 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (= false false)))
 (let (($x62 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x60 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x458 (= ?x60 (_ bv0 32))))
 (=> $x458 $x381))))))
 ))
 (let (($x110 (forall ((Lambda5 (_ BitVec 32)) )(let (($x62 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x60 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x458 (= ?x60 (_ bv0 32))))
 (= $x458 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x193 (and $x110 $x456)))
 (let (($x323 (and $x193 $x115)))
 (let (($x94 (and $x323 $x169)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x363 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x64)))))))
 (let (($x294 (and (and (and $x363 $x94) $x171) $x144)))
 (let (($x343 (= $x294 true)))
 (let (($x377 (= $x343 true)))
 (let (($x204 (= $x165 true)))
 (let (($x231 (= $x204 true)))
 (let (($x145 (and $x6 $x241)))
 (let (($x87 (= $x145 true)))
 (let (($x276 (= $x87 true)))
 (let (($x13 (and $x276 $x231)))
 (let (($x159 (and $x13 $x377)))
 (let (($x401 (and $x159 $x365)))
 (let (($x219 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x142 (ite $x219 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x142 (_ bv1 32))))
 (let (($x39 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x305 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x418 (= ?x305 (_ bv0 32))))
 (let (($x173 (and $x418 $x172)))
 (let (($x114 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x439 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x439 (_ bv1 32))))
 (let (($x317 (and $x176 $x173)))
 (let (($x38 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x378 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x378 (_ bv1 32))))
 (let (($x258 (and $x58 $x317)))
 (let (($x36 (and $x258 $x401)))
 (let ((?x198 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x212 (= ?x198 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x295 (=> $x58 $x212)))
 (let (($x351 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x395 (= $x58 $x351)))
 (let (($x381 (= false false)))
 (let (($x364 (= ?x378 (_ bv0 32))))
 (let (($x330 (=> $x364 $x381)))
 (let (($x300 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x316 (= $x364 $x300)))
 (let (($x84 (and $x316 $x330)))
 (let (($x184 (and $x84 $x395)))
 (let (($x77 (and $x184 $x295)))
 (let (($x390 (and $x77 $x36)))
 (let ((?x375 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x197 (= ?x375 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x99 (=> $x176 $x197)))
 (let (($x26 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x124 (= $x176 $x26)))
 (let (($x113 (= ?x439 (_ bv0 32))))
 (let (($x242 (=> $x113 $x381)))
 (let (($x355 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x73 (= $x113 $x355)))
 (let (($x217 (and $x73 $x242)))
 (let (($x51 (and $x217 $x124)))
 (let (($x249 (and $x51 $x99)))
 (let (($x370 (and $x249 $x390)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x147 (= ?x47 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x328 (bvuge ?x305 (_ bv1 32))))
 (let (($x442 (=> $x328 $x147)))
 (let (($x56 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x121 (= $x328 $x56)))
 (let (($x247 (=> $x418 $x381)))
 (let (($x78 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x396 (= $x418 $x78)))
 (let (($x143 (and $x396 $x247)))
 (let (($x25 (and $x143 $x121)))
 (let (($x443 (and $x25 $x442)))
 (let (($x310 (and $x443 $x370)))
 (let (($x303 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x17 (=> $x172 $x303)))
 (let (($x151 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x372 (= $x172 $x151)))
 (let (($x283 (= ?x142 (_ bv0 32))))
 (let (($x257 (=> $x283 $x381)))
 (let (($x85 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x101 (= $x283 $x85)))
 (let (($x358 (and $x101 $x257)))
 (let (($x373 (and $x358 $x372)))
 (let (($x237 (and $x373 $x17)))
 (let (($x286 (and $x237 $x310)))
 (let (($x287 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x138 (and $x287 $x286)))
 (let (($x427 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x252 (and $x427 $x138)))
 (let (($x426 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x72 (and $x426 $x252)))
 (let (($x277 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x132 (and $x277 $x72)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x336 (and $x82 $x132)))
 (let (($x98 (and $x381 $x336)))
 (let (($x238 (= ?x198 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x37 (and $x238 $x98)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x223 (and $x108 $x37)))
 (let (($x302 (and $x381 $x223)))
 (let (($x374 (= ?x375 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x292 (and $x374 $x302)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x30 (and $x34 $x292)))
 (let (($x139 (and $x381 $x30)))
 (let (($x289 (= ?x47 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x345 (and $x289 $x139)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x180 (and $x117 $x345)))
 (let (($x246 (and $x381 $x180)))
 (let (($x222 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x153 (and $x222 $x246)))
 (let (($x201 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x40 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x201)))))))
 (let (($x220 (bvugt ?x425 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x417 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x95 (=> (bvule ?x425 (bvsub (bvadd ?x425 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x417 $x220)))))))
 (let (($x285 (bvugt ?x255 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x394 (=> (bvule ?x255 (bvsub (bvadd ?x255 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x293 $x285)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x337 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x260 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x337)))
 (let (($x221 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x260 $x22)))))))
 (let (($x137 (and $x221 $x394)))
 (let (($x371 (and $x137 $x95)))
 (let (($x281 (and $x371 $x40)))
 (let (($x189 (and $x281 $x153)))
 (let (($x76 (=> $x189 $x457)))
 (not $x76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 252 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x162 (bvadd ?x179 ?x198)))
 (let ((?x455 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x454 (concat ?x455 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x369 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x220 (bvadd ?x369 (_ bv3 32))))
 (let ((?x356 (concat (select input.dst.llvm-mem ?x220) (concat ?x170 ?x454))))
 (let ((?x90 (bvmul (_ bv4294967295 32) ?x356)))
 (let ((?x340 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x334 (concat ?x340 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x201 (bvadd ?x404 (_ bv3 32))))
 (let ((?x423 (concat (select input.dst.llvm-mem ?x201) (concat ?x440 ?x334))))
 (let ((?x457 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x76 (concat ?x457 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x167 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x285 (bvadd ?x167 (_ bv3 32))))
 (let ((?x348 (concat (select input.dst.llvm-mem ?x285) (concat ?x65 ?x76))))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x397)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x202)))
 (let ((?x168 (bvadd (bvadd (bvadd ?x188 ?x348) ?x423) ?x90)))
 (let (($x389 (= ?x168 ?x162)))
 (let (($x243 (= $x389 true)))
 (let (($x63 (= $x243 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x246 (concat ?x139 (concat ?x302 ?x37)))))
 (let (($x24 (= ?x153 input.dst.llvm-%m)))
 (let (($x419 (= $x24 true)))
 (let (($x178 (= (bvand ?x369 (_ bv4294967292 32)) ?x369)))
 (let (($x145 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x261 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x6 (and true $x261)))
 (let (($x387 (= (bvand ?x167 (_ bv4294967292 32)) ?x167)))
 (let (($x274 (and $x387 $x6)))
 (let (($x256 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x369 (bvsub ?x369 (_ bv8 32))) (bvult ?x369 (bvsub ?x369 (_ bv8 32))))))
 (let (($x333 (and (and (and true $x256) $x274) $x145)))
 (let (($x204 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x231 (and true $x204)))
 (let (($x408 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x13 (and $x408 $x231)))
 (let (($x268 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x167 (bvsub ?x167 (_ bv12 32))) (bvult ?x167 (bvsub ?x167 (_ bv12 32))))))
 (let (($x437 (and (and (and true $x408) $x268) $x13)))
 (let (($x244 (and (and $x437 $x333) $x178)))
 (let (($x189 (= input.dst.llvm-%m ?x153)))
 (let (($x420 (and $x189 $x244)))
 (let ((?x252 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x72 (= (_ bv0 32) ?x252)))
 (let ((?x310 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x310)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x370 $x286)))
 (let (($x132 (and $x138 $x72)))
 (let (($x390 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x336 (and $x390 $x132)))
 (let (($x365 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x341 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x194))))
 (let ((?x383 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x381 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x406 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x406 (_ bv1 32))))
 (=> $x245 (= ?x383 ?x377))))))))))
 ))
 (let (($x94 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x338 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x406 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x406 (_ bv1 32))))
 (= $x245 (bvuge ?x338 (_ bv1 32))))))))
 ))
 (let (($x320 (forall ((Lambda5 (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x381 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x406 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x406 (_ bv0 32))))
 (=> $x225 $x47))))))
 ))
 (let (($x120 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x406 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x406 (_ bv0 32))))
 (= $x225 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x385 (and $x120 $x320)))
 (let (($x342 (and $x385 $x94)))
 (let (($x401 (and $x342 $x365)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x282 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x60)))))))
 (let (($x21 (and (and (and $x282 $x401) $x336) $x420)))
 (let (($x177 (= $x21 true)))
 (let (($x183 (= $x177 true)))
 (let (($x438 (= $x437 true)))
 (let (($x81 (= $x438 true)))
 (let (($x54 (and $x333 $x178)))
 (let (($x284 (= $x54 true)))
 (let (($x309 (= $x284 true)))
 (let (($x64 (and $x309 $x81)))
 (let (($x304 (and $x64 $x183)))
 (let (($x415 (and $x304 $x419)))
 (let (($x101 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x358 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x358 (_ bv0 32))))
 (let (($x247 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x143 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x143 (_ bv0 32))))
 (let (($x233 (and $x328 $x172)))
 (let (($x242 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x217 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x217 (_ bv1 32))))
 (let (($x234 (and $x99 $x233)))
 (let (($x330 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x84 (ite $x330 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x84 (_ bv1 32))))
 (let (($x70 (and $x295 $x234)))
 (let (($x262 (and $x70 $x415)))
 (let (($x263 (= ?x179 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x354 (=> $x295 $x263)))
 (let (($x77 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x173 (= $x295 $x77)))
 (let (($x47 (= false false)))
 (let (($x58 (= ?x84 (_ bv0 32))))
 (let (($x97 (=> $x58 $x47)))
 (let (($x395 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x184 (= $x58 $x395)))
 (let (($x212 (and $x184 $x97)))
 (let (($x317 (and $x212 $x173)))
 (let (($x308 (and $x317 $x354)))
 (let (($x166 (and $x308 $x262)))
 (let (($x224 (= ?x198 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x300 (=> $x99 $x224)))
 (let (($x249 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x38 (= $x99 $x249)))
 (let (($x176 (= ?x217 (_ bv0 32))))
 (let (($x272 (=> $x176 $x47)))
 (let (($x124 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x51 (= $x176 $x124)))
 (let (($x197 (and $x51 $x272)))
 (let (($x378 (and $x197 $x38)))
 (let (($x316 (and $x378 $x300)))
 (let (($x130 (and $x316 $x166)))
 (let ((?x375 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x349 (= ?x375 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x442 (bvuge ?x143 (_ bv1 32))))
 (let (($x355 (=> $x442 $x349)))
 (let (($x443 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x114 (= $x442 $x443)))
 (let (($x213 (=> $x328 $x47)))
 (let (($x121 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x25 (= $x328 $x121)))
 (let (($x147 (and $x25 $x213)))
 (let (($x439 (and $x147 $x114)))
 (let (($x73 (and $x439 $x355)))
 (let (($x31 (and $x73 $x130)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x161 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x17 (bvuge ?x358 (_ bv1 32))))
 (let (($x78 (=> $x17 $x161)))
 (let (($x237 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x39 (= $x17 $x237)))
 (let (($x460 (=> $x172 $x47)))
 (let (($x372 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x373 (= $x172 $x372)))
 (let (($x303 (and $x373 $x460)))
 (let (($x305 (and $x303 $x39)))
 (let (($x396 (and $x305 $x78)))
 (let (($x59 (and $x396 $x31)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x207 (and $x85 $x59)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x33 (and $x283 $x207)))
 (let (($x219 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x80 (and $x219 $x33)))
 (let (($x270 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x347 (and $x270 $x80)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x10 (and $x104 $x347)))
 (let (($x360 (and $x47 $x10)))
 (let (($x301 (= ?x179 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x335 (and $x301 $x360)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x297 (and $x82 $x335)))
 (let (($x350 (and $x47 $x297)))
 (let (($x238 (= ?x198 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x346 (and $x238 $x350)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x441 (and $x108 $x346)))
 (let (($x321 (and $x47 $x441)))
 (let (($x374 (= ?x375 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x229 (and $x374 $x321)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x131 (and $x11 $x229)))
 (let (($x134 (and $x47 $x131)))
 (let (($x228 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x236 (and $x228 $x134)))
 (let (($x215 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x135 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x215)))))))
 (let (($x83 (bvugt ?x369 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x15 (=> (bvule ?x369 (bvsub (bvadd ?x369 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x83)))))))
 (let (($x326 (bvugt ?x167 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x425 (=> (bvule ?x167 (bvsub (bvadd ?x167 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x326)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x318 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x318)))
 (let (($x199 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x22)))))))
 (let (($x209 (and $x199 $x425)))
 (let (($x271 (and $x209 $x15)))
 (let (($x158 (and $x271 $x135)))
 (let (($x190 (and $x158 $x236)))
 (let (($x391 (=> $x190 $x63)))
 (not $x391))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x162 (bvadd ?x179 ?x198)))
 (let ((?x455 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x454 (concat ?x455 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x369 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x220 (bvadd ?x369 (_ bv3 32))))
 (let ((?x356 (concat (select input.dst.llvm-mem ?x220) (concat ?x170 ?x454))))
 (let ((?x90 (bvmul (_ bv4294967295 32) ?x356)))
 (let ((?x340 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x334 (concat ?x340 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x201 (bvadd ?x404 (_ bv3 32))))
 (let ((?x423 (concat (select input.dst.llvm-mem ?x201) (concat ?x440 ?x334))))
 (let ((?x457 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x76 (concat ?x457 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x167 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x285 (bvadd ?x167 (_ bv3 32))))
 (let ((?x348 (concat (select input.dst.llvm-mem ?x285) (concat ?x65 ?x76))))
 (let ((?x397 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x397)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x202)))
 (let ((?x168 (bvadd (bvadd (bvadd ?x188 ?x348) ?x423) ?x90)))
 (let (($x389 (= ?x168 ?x162)))
 (let (($x243 (= $x389 true)))
 (let (($x63 (= $x243 true)))
 (let ((?x37 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x246 (concat ?x139 (concat ?x302 ?x37)))))
 (let (($x24 (= ?x153 input.dst.llvm-%m)))
 (let (($x419 (= $x24 true)))
 (let (($x178 (= (bvand ?x369 (_ bv4294967292 32)) ?x369)))
 (let (($x145 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x261 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x6 (and true $x261)))
 (let (($x387 (= (bvand ?x167 (_ bv4294967292 32)) ?x167)))
 (let (($x274 (and $x387 $x6)))
 (let (($x256 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x369 (bvsub ?x369 (_ bv8 32))) (bvult ?x369 (bvsub ?x369 (_ bv8 32))))))
 (let (($x333 (and (and (and true $x256) $x274) $x145)))
 (let (($x204 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x231 (and true $x204)))
 (let (($x408 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x13 (and $x408 $x231)))
 (let (($x268 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x167 (bvsub ?x167 (_ bv12 32))) (bvult ?x167 (bvsub ?x167 (_ bv12 32))))))
 (let (($x437 (and (and (and true $x408) $x268) $x13)))
 (let (($x244 (and (and $x437 $x333) $x178)))
 (let (($x189 (= input.dst.llvm-%m ?x153)))
 (let (($x420 (and $x189 $x244)))
 (let ((?x252 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x72 (= (_ bv0 32) ?x252)))
 (let ((?x310 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x310)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x370 $x286)))
 (let (($x132 (and $x138 $x72)))
 (let (($x390 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x336 (and $x390 $x132)))
 (let (($x365 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x341 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv1 32))) (select input.dst.llvm-mem ?x341))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x341 (_ bv2 32))) ?x194))))
 (let ((?x383 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x381 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x406 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x406 (_ bv1 32))))
 (=> $x245 (= ?x383 ?x377))))))))))
 ))
 (let (($x94 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x338 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x406 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x406 (_ bv1 32))))
 (= $x245 (bvuge ?x338 (_ bv1 32))))))))
 ))
 (let (($x320 (forall ((Lambda5 (_ BitVec 32)) )(let (($x47 (= false false)))
 (let (($x381 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x406 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x406 (_ bv0 32))))
 (=> $x225 $x47))))))
 ))
 (let (($x120 (forall ((Lambda5 (_ BitVec 32)) )(let (($x381 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x406 (ite $x381 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x406 (_ bv0 32))))
 (= $x225 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x385 (and $x120 $x320)))
 (let (($x342 (and $x385 $x94)))
 (let (($x401 (and $x342 $x365)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x282 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x60)))))))
 (let (($x21 (and (and (and $x282 $x401) $x336) $x420)))
 (let (($x177 (= $x21 true)))
 (let (($x183 (= $x177 true)))
 (let (($x438 (= $x437 true)))
 (let (($x81 (= $x438 true)))
 (let (($x54 (and $x333 $x178)))
 (let (($x284 (= $x54 true)))
 (let (($x309 (= $x284 true)))
 (let (($x64 (and $x309 $x81)))
 (let (($x304 (and $x64 $x183)))
 (let (($x415 (and $x304 $x419)))
 (let (($x101 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x358 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (= ?x358 (_ bv0 32))))
 (let (($x247 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x143 (ite $x247 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (= ?x143 (_ bv0 32))))
 (let (($x233 (and $x328 $x172)))
 (let (($x242 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x217 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x217 (_ bv1 32))))
 (let (($x234 (and $x99 $x233)))
 (let (($x330 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x84 (ite $x330 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x84 (_ bv1 32))))
 (let (($x70 (and $x295 $x234)))
 (let (($x262 (and $x70 $x415)))
 (let (($x263 (= ?x179 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x354 (=> $x295 $x263)))
 (let (($x77 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x173 (= $x295 $x77)))
 (let (($x47 (= false false)))
 (let (($x58 (= ?x84 (_ bv0 32))))
 (let (($x97 (=> $x58 $x47)))
 (let (($x395 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x184 (= $x58 $x395)))
 (let (($x212 (and $x184 $x97)))
 (let (($x317 (and $x212 $x173)))
 (let (($x308 (and $x317 $x354)))
 (let (($x166 (and $x308 $x262)))
 (let (($x224 (= ?x198 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x300 (=> $x99 $x224)))
 (let (($x249 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x38 (= $x99 $x249)))
 (let (($x176 (= ?x217 (_ bv0 32))))
 (let (($x272 (=> $x176 $x47)))
 (let (($x124 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x51 (= $x176 $x124)))
 (let (($x197 (and $x51 $x272)))
 (let (($x378 (and $x197 $x38)))
 (let (($x316 (and $x378 $x300)))
 (let (($x130 (and $x316 $x166)))
 (let ((?x375 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x349 (= ?x375 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x442 (bvuge ?x143 (_ bv1 32))))
 (let (($x355 (=> $x442 $x349)))
 (let (($x443 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x114 (= $x442 $x443)))
 (let (($x213 (=> $x328 $x47)))
 (let (($x121 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x25 (= $x328 $x121)))
 (let (($x147 (and $x25 $x213)))
 (let (($x439 (and $x147 $x114)))
 (let (($x73 (and $x439 $x355)))
 (let (($x31 (and $x73 $x130)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x161 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x17 (bvuge ?x358 (_ bv1 32))))
 (let (($x78 (=> $x17 $x161)))
 (let (($x237 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x39 (= $x17 $x237)))
 (let (($x460 (=> $x172 $x47)))
 (let (($x372 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x373 (= $x172 $x372)))
 (let (($x303 (and $x373 $x460)))
 (let (($x305 (and $x303 $x39)))
 (let (($x396 (and $x305 $x78)))
 (let (($x59 (and $x396 $x31)))
 (let (($x85 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x207 (and $x85 $x59)))
 (let (($x283 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x33 (and $x283 $x207)))
 (let (($x219 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x80 (and $x219 $x33)))
 (let (($x270 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x347 (and $x270 $x80)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x10 (and $x104 $x347)))
 (let (($x360 (and $x47 $x10)))
 (let (($x301 (= ?x179 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x335 (and $x301 $x360)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x297 (and $x82 $x335)))
 (let (($x350 (and $x47 $x297)))
 (let (($x238 (= ?x198 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x346 (and $x238 $x350)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x441 (and $x108 $x346)))
 (let (($x321 (and $x47 $x441)))
 (let (($x374 (= ?x375 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x229 (and $x374 $x321)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x131 (and $x11 $x229)))
 (let (($x134 (and $x47 $x131)))
 (let (($x228 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x236 (and $x228 $x134)))
 (let (($x215 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x135 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x215)))))))
 (let (($x83 (bvugt ?x369 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x15 (=> (bvule ?x369 (bvsub (bvadd ?x369 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x83)))))))
 (let (($x326 (bvugt ?x167 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x425 (=> (bvule ?x167 (bvsub (bvadd ?x167 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x326)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x318 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x318)))
 (let (($x199 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x22)))))))
 (let (($x209 (and $x199 $x425)))
 (let (($x271 (and $x209 $x15)))
 (let (($x158 (and $x271 $x135)))
 (let (($x190 (and $x158 $x236)))
 (let (($x391 (=> $x190 $x63)))
 (not $x391))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 252 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x353 (bvmul (_ bv4294967295 32) ?x198)))
 (let ((?x352 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x353)))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x160 (concat ?x327 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x208 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x83 (bvadd ?x208 (_ bv3 32))))
 (let ((?x100 (concat (select input.dst.llvm-mem ?x83) (concat ?x96 ?x160))))
 (let ((?x89 (bvmul (_ bv4294967295 32) ?x100)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x459 (concat ?x8 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x215 (bvadd ?x133 (_ bv3 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem ?x215) (concat ?x456 ?x459))))
 (let ((?x391 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x433 (concat ?x391 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x337 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x326 (bvadd ?x337 (_ bv3 32))))
 (let ((?x28 (concat (select input.dst.llvm-mem ?x326) (concat ?x98 ?x433))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x384)))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x168)))
 (let ((?x239 (bvadd (bvadd (bvadd ?x389 ?x28) ?x175) ?x89)))
 (let (($x269 (= ?x239 ?x352)))
 (let (($x331 (= $x269 true)))
 (let (($x146 (= $x331 true)))
 (let ((?x335 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x350 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x236 (concat ?x134 (concat ?x321 (concat ?x350 ?x335)))))
 (let (($x431 (= ?x236 input.dst.llvm-%m)))
 (let (($x314 (= $x431 true)))
 (let (($x91 (= (bvand ?x208 (_ bv4294967292 32)) ?x208)))
 (let (($x54 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x145 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x333 (and true $x145)))
 (let (($x261 (= (bvand ?x337 (_ bv4294967292 32)) ?x337)))
 (let (($x410 (and $x261 $x333)))
 (let (($x368 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x208 (bvsub ?x208 (_ bv8 32))) (bvult ?x208 (bvsub ?x208 (_ bv8 32))))))
 (let (($x400 (and (and (and true $x368) $x410) $x54)))
 (let (($x438 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x81 (and true $x438)))
 (let (($x268 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x64 (and $x268 $x81)))
 (let (($x165 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x337 (bvsub ?x337 (_ bv12 32))) (bvult ?x337 (bvsub ?x337 (_ bv12 32))))))
 (let (($x155 (and (and (and true $x268) $x165) $x64)))
 (let (($x216 (and (and $x155 $x400) $x91)))
 (let (($x190 (= input.dst.llvm-%m ?x236)))
 (let (($x191 (and $x190 $x216)))
 (let ((?x33 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x80 (= (_ bv0 32) ?x33)))
 (let ((?x31 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x130 $x59)))
 (let (($x347 (and $x207 $x80)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x166 $x347)))
 (let (($x419 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x189))))
 (let ((?x405 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x47 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x341 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x341 (_ bv1 32))))
 (=> $x253 (= ?x405 ?x183))))))))))
 ))
 (let (($x401 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x341 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x341 (_ bv1 32))))
 (= $x253 (bvuge ?x279 (_ bv1 32))))))))
 ))
 (let (($x46 (forall ((Lambda5 (_ BitVec 32)) )(let (($x375 (= false false)))
 (let (($x47 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x341 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x341 (_ bv0 32))))
 (=> $x294 $x375))))))
 ))
 (let (($x366 (forall ((Lambda5 (_ BitVec 32)) )(let (($x47 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x341 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x341 (_ bv0 32))))
 (= $x294 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x119 (and $x366 $x46)))
 (let (($x382 (and $x119 $x401)))
 (let (($x415 (and $x382 $x419)))
 (let (($x406 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x381 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x338 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x381 $x406)))))))
 (let (($x367 (and (and (and $x338 $x415) $x10) $x191)))
 (let (($x397 (= $x367 true)))
 (let (($x202 (= $x397 true)))
 (let (($x275 (= $x155 true)))
 (let (($x62 (= $x275 true)))
 (let (($x136 (and $x400 $x91)))
 (let (($x86 (= $x136 true)))
 (let (($x164 (= $x86 true)))
 (let (($x60 (and $x164 $x62)))
 (let (($x188 (and $x60 $x202)))
 (let (($x65 (and $x188 $x314)))
 (let (($x373 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x303 (ite $x373 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x303 (_ bv1 32))))
 (let (($x213 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x147 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x147 (_ bv1 32))))
 (let (($x205 (and $x355 $x78)))
 (let (($x272 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x197 (ite $x272 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x197 (_ bv0 32))))
 (let (($x256 (and $x99 $x205)))
 (let (($x97 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x212 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x212 (_ bv1 32))))
 (let (($x87 (and $x354 $x256)))
 (let (($x112 (and $x87 $x65)))
 (let ((?x427 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x196 (= ?x427 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x203 (=> $x354 $x196)))
 (let (($x308 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x233 (= $x354 $x308)))
 (let (($x375 (= false false)))
 (let (($x295 (= ?x212 (_ bv0 32))))
 (let (($x258 (=> $x295 $x375)))
 (let (($x173 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x317 (= $x295 $x173)))
 (let (($x263 (and $x317 $x258)))
 (let (($x234 (and $x263 $x233)))
 (let (($x92 (and $x234 $x203)))
 (let (($x457 (and $x92 $x112)))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x351 (= ?x179 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x300 (bvuge ?x197 (_ bv1 32))))
 (let (($x395 (=> $x300 $x351)))
 (let (($x316 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x330 (= $x300 $x316)))
 (let (($x364 (=> $x99 $x375)))
 (let (($x38 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x378 (= $x99 $x38)))
 (let (($x224 (and $x378 $x364)))
 (let (($x84 (and $x224 $x330)))
 (let (($x184 (and $x84 $x395)))
 (let (($x251 (and $x184 $x457)))
 (let (($x26 (= ?x198 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x124 (=> $x355 $x26)))
 (let (($x73 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x242 (= $x355 $x73)))
 (let (($x442 (= ?x147 (_ bv0 32))))
 (let (($x113 (=> $x442 $x375)))
 (let (($x114 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x439 (= $x442 $x114)))
 (let (($x349 (and $x439 $x113)))
 (let (($x217 (and $x349 $x242)))
 (let (($x51 (and $x217 $x124)))
 (let (($x76 (and $x51 $x251)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x56 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x121 (=> $x78 $x56)))
 (let (($x396 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x247 (= $x78 $x396)))
 (let (($x17 (= ?x303 (_ bv0 32))))
 (let (($x418 (=> $x17 $x375)))
 (let (($x39 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x305 (= $x17 $x39)))
 (let (($x161 (and $x305 $x418)))
 (let (($x143 (and $x161 $x247)))
 (let (($x25 (and $x143 $x121)))
 (let (($x103 (and $x25 $x76)))
 (let (($x372 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x348 (and $x372 $x103)))
 (let (($x172 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x19 (and $x172 $x348)))
 (let (($x101 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x409 (and $x101 $x19)))
 (let (($x50 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x141 (and $x50 $x409)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x440 (and $x142 $x141)))
 (let (($x66 (and $x375 $x440)))
 (let (($x287 (= ?x427 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x340 (and $x287 $x66)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x266 (and $x104 $x340)))
 (let (($x334 (and $x375 $x266)))
 (let (($x301 (= ?x179 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x111 (and $x301 $x334)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x423 (and $x82 $x111)))
 (let (($x376 (and $x375 $x423)))
 (let (($x238 (= ?x198 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x129 (and $x238 $x376)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x57 (and $x122 $x129)))
 (let (($x12 (and $x375 $x57)))
 (let (($x34 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x170 (and $x34 $x12)))
 (let (($x192 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x117 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x192)))))))
 (let (($x127 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x152 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x127)))))))
 (let (($x299 (bvugt ?x337 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x326)))
 (let (($x369 (=> (bvule ?x337 (bvsub (bvadd ?x337 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x299)))))))
 (let (($x255 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x199 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x291 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x255)))))))
 (let (($x293 (and $x291 $x369)))
 (let (($x417 (and $x293 $x152)))
 (let (($x187 (and $x417 $x117)))
 (let (($x453 (and $x187 $x170)))
 (let (($x75 (=> $x453 $x146)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x353 (bvmul (_ bv4294967295 32) ?x198)))
 (let ((?x352 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x353)))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x160 (concat ?x327 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x208 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x83 (bvadd ?x208 (_ bv3 32))))
 (let ((?x100 (concat (select input.dst.llvm-mem ?x83) (concat ?x96 ?x160))))
 (let ((?x89 (bvmul (_ bv4294967295 32) ?x100)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x459 (concat ?x8 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x215 (bvadd ?x133 (_ bv3 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem ?x215) (concat ?x456 ?x459))))
 (let ((?x391 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x433 (concat ?x391 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x337 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x326 (bvadd ?x337 (_ bv3 32))))
 (let ((?x28 (concat (select input.dst.llvm-mem ?x326) (concat ?x98 ?x433))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x384)))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x168)))
 (let ((?x239 (bvadd (bvadd (bvadd ?x389 ?x28) ?x175) ?x89)))
 (let (($x269 (= ?x239 ?x352)))
 (let (($x331 (= $x269 true)))
 (let (($x146 (= $x331 true)))
 (let ((?x335 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x350 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x236 (concat ?x134 (concat ?x321 (concat ?x350 ?x335)))))
 (let (($x431 (= ?x236 input.dst.llvm-%m)))
 (let (($x314 (= $x431 true)))
 (let (($x91 (= (bvand ?x208 (_ bv4294967292 32)) ?x208)))
 (let (($x54 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x145 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x333 (and true $x145)))
 (let (($x261 (= (bvand ?x337 (_ bv4294967292 32)) ?x337)))
 (let (($x410 (and $x261 $x333)))
 (let (($x368 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x208 (bvsub ?x208 (_ bv8 32))) (bvult ?x208 (bvsub ?x208 (_ bv8 32))))))
 (let (($x400 (and (and (and true $x368) $x410) $x54)))
 (let (($x438 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x81 (and true $x438)))
 (let (($x268 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x64 (and $x268 $x81)))
 (let (($x165 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x337 (bvsub ?x337 (_ bv12 32))) (bvult ?x337 (bvsub ?x337 (_ bv12 32))))))
 (let (($x155 (and (and (and true $x268) $x165) $x64)))
 (let (($x216 (and (and $x155 $x400) $x91)))
 (let (($x190 (= input.dst.llvm-%m ?x236)))
 (let (($x191 (and $x190 $x216)))
 (let ((?x33 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x80 (= (_ bv0 32) ?x33)))
 (let ((?x31 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x130 $x59)))
 (let (($x347 (and $x207 $x80)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x166 $x347)))
 (let (($x419 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x37 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x189))))
 (let ((?x405 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x47 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x341 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x341 (_ bv1 32))))
 (=> $x253 (= ?x405 ?x183))))))))))
 ))
 (let (($x401 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x341 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x341 (_ bv1 32))))
 (= $x253 (bvuge ?x279 (_ bv1 32))))))))
 ))
 (let (($x46 (forall ((Lambda5 (_ BitVec 32)) )(let (($x375 (= false false)))
 (let (($x47 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x341 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x341 (_ bv0 32))))
 (=> $x294 $x375))))))
 ))
 (let (($x366 (forall ((Lambda5 (_ BitVec 32)) )(let (($x47 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x341 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x341 (_ bv0 32))))
 (= $x294 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x119 (and $x366 $x46)))
 (let (($x382 (and $x119 $x401)))
 (let (($x415 (and $x382 $x419)))
 (let (($x406 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x381 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x338 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x381 $x406)))))))
 (let (($x367 (and (and (and $x338 $x415) $x10) $x191)))
 (let (($x397 (= $x367 true)))
 (let (($x202 (= $x397 true)))
 (let (($x275 (= $x155 true)))
 (let (($x62 (= $x275 true)))
 (let (($x136 (and $x400 $x91)))
 (let (($x86 (= $x136 true)))
 (let (($x164 (= $x86 true)))
 (let (($x60 (and $x164 $x62)))
 (let (($x188 (and $x60 $x202)))
 (let (($x65 (and $x188 $x314)))
 (let (($x373 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x303 (ite $x373 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x303 (_ bv1 32))))
 (let (($x213 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x147 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x147 (_ bv1 32))))
 (let (($x205 (and $x355 $x78)))
 (let (($x272 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x197 (ite $x272 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x197 (_ bv0 32))))
 (let (($x256 (and $x99 $x205)))
 (let (($x97 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x212 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x212 (_ bv1 32))))
 (let (($x87 (and $x354 $x256)))
 (let (($x112 (and $x87 $x65)))
 (let ((?x427 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x196 (= ?x427 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x203 (=> $x354 $x196)))
 (let (($x308 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x233 (= $x354 $x308)))
 (let (($x375 (= false false)))
 (let (($x295 (= ?x212 (_ bv0 32))))
 (let (($x258 (=> $x295 $x375)))
 (let (($x173 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x317 (= $x295 $x173)))
 (let (($x263 (and $x317 $x258)))
 (let (($x234 (and $x263 $x233)))
 (let (($x92 (and $x234 $x203)))
 (let (($x457 (and $x92 $x112)))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x351 (= ?x179 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x300 (bvuge ?x197 (_ bv1 32))))
 (let (($x395 (=> $x300 $x351)))
 (let (($x316 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x330 (= $x300 $x316)))
 (let (($x364 (=> $x99 $x375)))
 (let (($x38 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x378 (= $x99 $x38)))
 (let (($x224 (and $x378 $x364)))
 (let (($x84 (and $x224 $x330)))
 (let (($x184 (and $x84 $x395)))
 (let (($x251 (and $x184 $x457)))
 (let (($x26 (= ?x198 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x124 (=> $x355 $x26)))
 (let (($x73 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x242 (= $x355 $x73)))
 (let (($x442 (= ?x147 (_ bv0 32))))
 (let (($x113 (=> $x442 $x375)))
 (let (($x114 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x439 (= $x442 $x114)))
 (let (($x349 (and $x439 $x113)))
 (let (($x217 (and $x349 $x242)))
 (let (($x51 (and $x217 $x124)))
 (let (($x76 (and $x51 $x251)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x56 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x121 (=> $x78 $x56)))
 (let (($x396 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x247 (= $x78 $x396)))
 (let (($x17 (= ?x303 (_ bv0 32))))
 (let (($x418 (=> $x17 $x375)))
 (let (($x39 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x305 (= $x17 $x39)))
 (let (($x161 (and $x305 $x418)))
 (let (($x143 (and $x161 $x247)))
 (let (($x25 (and $x143 $x121)))
 (let (($x103 (and $x25 $x76)))
 (let (($x372 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x348 (and $x372 $x103)))
 (let (($x172 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x19 (and $x172 $x348)))
 (let (($x101 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x409 (and $x101 $x19)))
 (let (($x50 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x141 (and $x50 $x409)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x440 (and $x142 $x141)))
 (let (($x66 (and $x375 $x440)))
 (let (($x287 (= ?x427 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x340 (and $x287 $x66)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x266 (and $x104 $x340)))
 (let (($x334 (and $x375 $x266)))
 (let (($x301 (= ?x179 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x111 (and $x301 $x334)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x423 (and $x82 $x111)))
 (let (($x376 (and $x375 $x423)))
 (let (($x238 (= ?x198 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x129 (and $x238 $x376)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x57 (and $x122 $x129)))
 (let (($x12 (and $x375 $x57)))
 (let (($x34 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x170 (and $x34 $x12)))
 (let (($x192 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x117 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x192)))))))
 (let (($x127 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x152 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x127)))))))
 (let (($x299 (bvugt ?x337 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x326)))
 (let (($x369 (=> (bvule ?x337 (bvsub (bvadd ?x337 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x299)))))))
 (let (($x255 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x199 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x291 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x156 $x255)))))))
 (let (($x293 (and $x291 $x369)))
 (let (($x417 (and $x293 $x152)))
 (let (($x187 (and $x417 $x117)))
 (let (($x453 (and $x187 $x170)))
 (let (($x75 (=> $x453 $x146)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 253 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x138 (bvmul (_ bv4294967295 32) ?x179)))
 (let ((?x283 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x252 (bvadd ?x283 ?x138)))
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x194 (concat ?x393 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x220 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x127 (bvadd ?x220 (_ bv3 32))))
 (let ((?x310 (concat (select input.dst.llvm-mem ?x127) (concat ?x377 ?x194))))
 (let ((?x180 (bvmul (_ bv4294967295 32) ?x310)))
 (let ((?x289 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x42 (concat ?x289 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x192 (bvadd ?x404 (_ bv3 32))))
 (let ((?x385 (concat (select input.dst.llvm-mem ?x192) (concat ?x329 ?x42))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x146 (concat ?x331 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x318 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x299 (bvadd ?x318 (_ bv3 32))))
 (let ((?x260 (concat (select input.dst.llvm-mem ?x299) (concat ?x27 ?x146))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x332)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x239)))
 (let ((?x336 (bvadd (bvadd (bvadd ?x353 ?x260) ?x385) ?x180)))
 (let (($x286 (= ?x336 ?x252)))
 (let (($x72 (= $x286 true)))
 (let (($x211 (= $x72 true)))
 (let ((?x340 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x376 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x12 (concat ?x376 (concat ?x334 ?x340)))))
 (let (($x257 (= ?x170 input.dst.llvm-%m)))
 (let (($x273 (= $x257 true)))
 (let (($x182 (= (bvand ?x220 (_ bv4294967292 32)) ?x220)))
 (let (($x136 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x54 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x400 (and true $x54)))
 (let (($x145 (= (bvand ?x318 (_ bv4294967292 32)) ?x318)))
 (let (($x408 (and $x145 $x400)))
 (let (($x6 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x220 (bvsub ?x220 (_ bv8 32))) (bvult ?x220 (bvsub ?x220 (_ bv8 32))))))
 (let (($x200 (and (and (and true $x6) $x408) $x136)))
 (let (($x275 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x62 (and true $x275)))
 (let (($x165 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x60 (and $x165 $x62)))
 (let (($x437 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x318 (bvsub ?x318 (_ bv12 32))) (bvult ?x318 (bvsub ?x318 (_ bv12 32))))))
 (let (($x398 (and (and (and true $x165) $x437) $x60)))
 (let (($x356 (and (and $x398 $x200) $x182)))
 (let (($x453 (= input.dst.llvm-%m ?x170)))
 (let (($x90 (and $x453 $x356)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x409 (= (_ bv0 32) ?x19)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x348 (and $x251 $x103)))
 (let (($x141 (and $x348 $x409)))
 (let (($x457 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x440 (and $x457 $x141)))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x190))))
 (let ((?x14 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x375 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x37 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x37 (_ bv1 32))))
 (=> $x24 (= ?x14 ?x202))))))))))
 ))
 (let (($x415 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x390 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x37 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x37 (_ bv1 32))))
 (= $x24 (bvuge ?x390 (_ bv1 32))))))))
 ))
 (let (($x153 (forall ((Lambda5 (_ BitVec 32)) )(let (($x198 (= false false)))
 (let (($x375 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x37 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x37 (_ bv0 32))))
 (=> $x21 $x198))))))
 ))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let (($x375 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x37 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x37 (_ bv0 32))))
 (= $x21 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x292 (and $x280 $x153)))
 (let (($x227 (and $x292 $x415)))
 (let (($x65 (and $x227 $x314)))
 (let (($x341 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x279 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x341)))))))
 (let (($x455 (and (and (and $x279 $x65) $x440) $x90)))
 (let (($x384 (= $x455 true)))
 (let (($x168 (= $x384 true)))
 (let (($x222 (= $x398 true)))
 (let (($x381 (= $x222 true)))
 (let (($x74 (and $x200 $x182)))
 (let (($x93 (= $x74 true)))
 (let (($x259 (= $x93 true)))
 (let (($x406 (and $x259 $x381)))
 (let (($x389 (and $x406 $x168)))
 (let (($x98 (and $x389 $x273)))
 (let (($x305 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x161 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x161 (_ bv0 32))))
 (let (($x113 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x349 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x349 (_ bv1 32))))
 (let (($x313 (and $x124 $x78)))
 (let (($x364 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x224 (ite $x364 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x224 (_ bv0 32))))
 (let (($x368 (and $x300 $x313)))
 (let (($x258 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x263 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x263 (_ bv1 32))))
 (let (($x284 (and $x203 $x368)))
 (let (($x63 (and $x284 $x98)))
 (let (($x106 (= ?x283 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x69 (=> $x203 $x106)))
 (let (($x92 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x205 (= $x203 $x92)))
 (let (($x198 (= false false)))
 (let (($x354 (= ?x263 (_ bv0 32))))
 (let (($x70 (=> $x354 $x198)))
 (let (($x233 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x234 (= $x354 $x233)))
 (let (($x196 (and $x234 $x70)))
 (let (($x256 (and $x196 $x205)))
 (let (($x387 (and $x256 $x69)))
 (let (($x391 (and $x387 $x63)))
 (let ((?x427 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x77 (= ?x427 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x395 (bvuge ?x224 (_ bv1 32))))
 (let (($x173 (=> $x395 $x77)))
 (let (($x184 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x97 (= $x395 $x184)))
 (let (($x58 (=> $x300 $x198)))
 (let (($x330 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x84 (= $x300 $x330)))
 (let (($x351 (and $x84 $x58)))
 (let (($x212 (and $x351 $x97)))
 (let (($x317 (and $x212 $x173)))
 (let (($x243 (and $x317 $x391)))
 (let (($x249 (= ?x179 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x38 (=> $x124 $x249)))
 (let (($x51 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x272 (= $x124 $x51)))
 (let (($x355 (= ?x349 (_ bv0 32))))
 (let (($x176 (=> $x355 $x198)))
 (let (($x242 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x217 (= $x355 $x242)))
 (let (($x26 (and $x217 $x176)))
 (let (($x197 (and $x26 $x272)))
 (let (($x378 (and $x197 $x38)))
 (let (($x433 (and $x378 $x243)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x443 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x121 (bvuge ?x161 (_ bv1 32))))
 (let (($x114 (=> $x121 $x443)))
 (let (($x25 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x213 (= $x121 $x25)))
 (let (($x328 (=> $x78 $x198)))
 (let (($x247 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x143 (= $x78 $x247)))
 (let (($x56 (and $x143 $x328)))
 (let (($x147 (and $x56 $x213)))
 (let (($x439 (and $x147 $x114)))
 (let (($x32 (and $x439 $x433)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x28 (and $x39 $x32)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x171 (and $x17 $x28)))
 (let (($x373 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x71 (and $x373 $x171)))
 (let (($x151 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x110 (and $x151 $x71)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x456 (and $x358 $x110)))
 (let (($x311 (and $x198 $x456)))
 (let (($x85 (= ?x283 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x8 (and $x85 $x311)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x230 (and $x142 $x8)))
 (let (($x459 (and $x198 $x230)))
 (let (($x287 (= ?x427 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x193 (and $x287 $x459)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x175 (and $x104 $x193)))
 (let (($x218 (and $x198 $x175)))
 (let (($x301 (= ?x179 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x20 (and $x301 $x218)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x125 (and $x107 $x20)))
 (let (($x379 (and $x198 $x125)))
 (let (($x108 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x96 (and $x108 $x379)))
 (let (($x281 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x11 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x281)))))))
 (let (($x371 (bvugt ?x220 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x201 (=> (bvule ?x220 (bvsub (bvadd ?x220 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x371)))))))
 (let (($x137 (bvugt ?x318 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x299)))
 (let (($x208 (=> (bvule ?x318 (bvsub (bvadd ?x318 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x394 $x137)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x285 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x22)))))))
 (let (($x157 (and $x285 $x208)))
 (let (($x319 (and $x157 $x201)))
 (let (($x116 (and $x319 $x11)))
 (let (($x413 (and $x116 $x96)))
 (let (($x30 (=> $x413 $x211)))
 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x138 (bvmul (_ bv4294967295 32) ?x179)))
 (let ((?x283 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x252 (bvadd ?x283 ?x138)))
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x194 (concat ?x393 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x220 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x127 (bvadd ?x220 (_ bv3 32))))
 (let ((?x310 (concat (select input.dst.llvm-mem ?x127) (concat ?x377 ?x194))))
 (let ((?x180 (bvmul (_ bv4294967295 32) ?x310)))
 (let ((?x289 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x42 (concat ?x289 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x192 (bvadd ?x404 (_ bv3 32))))
 (let ((?x385 (concat (select input.dst.llvm-mem ?x192) (concat ?x329 ?x42))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x146 (concat ?x331 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x318 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x299 (bvadd ?x318 (_ bv3 32))))
 (let ((?x260 (concat (select input.dst.llvm-mem ?x299) (concat ?x27 ?x146))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x332)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x239)))
 (let ((?x336 (bvadd (bvadd (bvadd ?x353 ?x260) ?x385) ?x180)))
 (let (($x286 (= ?x336 ?x252)))
 (let (($x72 (= $x286 true)))
 (let (($x211 (= $x72 true)))
 (let ((?x340 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x334 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x376 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x12 (concat ?x376 (concat ?x334 ?x340)))))
 (let (($x257 (= ?x170 input.dst.llvm-%m)))
 (let (($x273 (= $x257 true)))
 (let (($x182 (= (bvand ?x220 (_ bv4294967292 32)) ?x220)))
 (let (($x136 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x54 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x400 (and true $x54)))
 (let (($x145 (= (bvand ?x318 (_ bv4294967292 32)) ?x318)))
 (let (($x408 (and $x145 $x400)))
 (let (($x6 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x220 (bvsub ?x220 (_ bv8 32))) (bvult ?x220 (bvsub ?x220 (_ bv8 32))))))
 (let (($x200 (and (and (and true $x6) $x408) $x136)))
 (let (($x275 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x62 (and true $x275)))
 (let (($x165 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x60 (and $x165 $x62)))
 (let (($x437 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x318 (bvsub ?x318 (_ bv12 32))) (bvult ?x318 (bvsub ?x318 (_ bv12 32))))))
 (let (($x398 (and (and (and true $x165) $x437) $x60)))
 (let (($x356 (and (and $x398 $x200) $x182)))
 (let (($x453 (= input.dst.llvm-%m ?x170)))
 (let (($x90 (and $x453 $x356)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x409 (= (_ bv0 32) ?x19)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x348 (and $x251 $x103)))
 (let (($x141 (and $x348 $x409)))
 (let (($x457 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x440 (and $x457 $x141)))
 (let (($x314 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x190))))
 (let ((?x14 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x375 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x37 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x37 (_ bv1 32))))
 (=> $x24 (= ?x14 ?x202))))))))))
 ))
 (let (($x415 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x390 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x375 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x37 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x37 (_ bv1 32))))
 (= $x24 (bvuge ?x390 (_ bv1 32))))))))
 ))
 (let (($x153 (forall ((Lambda5 (_ BitVec 32)) )(let (($x198 (= false false)))
 (let (($x375 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x37 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x37 (_ bv0 32))))
 (=> $x21 $x198))))))
 ))
 (let (($x280 (forall ((Lambda5 (_ BitVec 32)) )(let (($x375 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x37 (ite $x375 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (= ?x37 (_ bv0 32))))
 (= $x21 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x292 (and $x280 $x153)))
 (let (($x227 (and $x292 $x415)))
 (let (($x65 (and $x227 $x314)))
 (let (($x341 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x279 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x47 $x341)))))))
 (let (($x455 (and (and (and $x279 $x65) $x440) $x90)))
 (let (($x384 (= $x455 true)))
 (let (($x168 (= $x384 true)))
 (let (($x222 (= $x398 true)))
 (let (($x381 (= $x222 true)))
 (let (($x74 (and $x200 $x182)))
 (let (($x93 (= $x74 true)))
 (let (($x259 (= $x93 true)))
 (let (($x406 (and $x259 $x381)))
 (let (($x389 (and $x406 $x168)))
 (let (($x98 (and $x389 $x273)))
 (let (($x305 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x161 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x161 (_ bv0 32))))
 (let (($x113 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x349 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x349 (_ bv1 32))))
 (let (($x313 (and $x124 $x78)))
 (let (($x364 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x224 (ite $x364 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x224 (_ bv0 32))))
 (let (($x368 (and $x300 $x313)))
 (let (($x258 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x263 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x263 (_ bv1 32))))
 (let (($x284 (and $x203 $x368)))
 (let (($x63 (and $x284 $x98)))
 (let (($x106 (= ?x283 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x69 (=> $x203 $x106)))
 (let (($x92 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x205 (= $x203 $x92)))
 (let (($x198 (= false false)))
 (let (($x354 (= ?x263 (_ bv0 32))))
 (let (($x70 (=> $x354 $x198)))
 (let (($x233 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x234 (= $x354 $x233)))
 (let (($x196 (and $x234 $x70)))
 (let (($x256 (and $x196 $x205)))
 (let (($x387 (and $x256 $x69)))
 (let (($x391 (and $x387 $x63)))
 (let ((?x427 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x77 (= ?x427 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x395 (bvuge ?x224 (_ bv1 32))))
 (let (($x173 (=> $x395 $x77)))
 (let (($x184 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x97 (= $x395 $x184)))
 (let (($x58 (=> $x300 $x198)))
 (let (($x330 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x84 (= $x300 $x330)))
 (let (($x351 (and $x84 $x58)))
 (let (($x212 (and $x351 $x97)))
 (let (($x317 (and $x212 $x173)))
 (let (($x243 (and $x317 $x391)))
 (let (($x249 (= ?x179 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x38 (=> $x124 $x249)))
 (let (($x51 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x272 (= $x124 $x51)))
 (let (($x355 (= ?x349 (_ bv0 32))))
 (let (($x176 (=> $x355 $x198)))
 (let (($x242 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x217 (= $x355 $x242)))
 (let (($x26 (and $x217 $x176)))
 (let (($x197 (and $x26 $x272)))
 (let (($x378 (and $x197 $x38)))
 (let (($x433 (and $x378 $x243)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x443 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x121 (bvuge ?x161 (_ bv1 32))))
 (let (($x114 (=> $x121 $x443)))
 (let (($x25 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x213 (= $x121 $x25)))
 (let (($x328 (=> $x78 $x198)))
 (let (($x247 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x143 (= $x78 $x247)))
 (let (($x56 (and $x143 $x328)))
 (let (($x147 (and $x56 $x213)))
 (let (($x439 (and $x147 $x114)))
 (let (($x32 (and $x439 $x433)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x28 (and $x39 $x32)))
 (let (($x17 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x171 (and $x17 $x28)))
 (let (($x373 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x71 (and $x373 $x171)))
 (let (($x151 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x110 (and $x151 $x71)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x456 (and $x358 $x110)))
 (let (($x311 (and $x198 $x456)))
 (let (($x85 (= ?x283 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x8 (and $x85 $x311)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x230 (and $x142 $x8)))
 (let (($x459 (and $x198 $x230)))
 (let (($x287 (= ?x427 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x193 (and $x287 $x459)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x175 (and $x104 $x193)))
 (let (($x218 (and $x198 $x175)))
 (let (($x301 (= ?x179 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x20 (and $x301 $x218)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x125 (and $x107 $x20)))
 (let (($x379 (and $x198 $x125)))
 (let (($x108 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x96 (and $x108 $x379)))
 (let (($x281 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x11 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x281)))))))
 (let (($x371 (bvugt ?x220 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x201 (=> (bvule ?x220 (bvsub (bvadd ?x220 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x371)))))))
 (let (($x137 (bvugt ?x318 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x299)))
 (let (($x208 (=> (bvule ?x318 (bvsub (bvadd ?x318 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x394 $x137)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x285 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x22)))))))
 (let (($x157 (and $x285 $x208)))
 (let (($x319 (and $x157 $x201)))
 (let (($x116 (and $x319 $x11)))
 (let (($x413 (and $x116 $x96)))
 (let (($x30 (=> $x413 $x211)))
 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 253 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x172 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x33 (bvadd ?x172 ?x424)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x420 (concat ?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x83 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x371 (bvadd ?x83 (_ bv3 32))))
 (let ((?x131 (concat (select input.dst.llvm-mem ?x371) (concat ?x262 ?x420))))
 (let ((?x134 (bvmul (_ bv4294967295 32) ?x131)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x250 (concat ?x296 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x281 (bvadd ?x133 (_ bv3 32))))
 (let ((?x253 (concat (select input.dst.llvm-mem ?x281) (concat ?x366 ?x250))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x30 (concat ?x211 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x53 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x137 (bvadd ?x53 (_ bv3 32))))
 (let ((?x418 (concat (select input.dst.llvm-mem ?x137) (concat ?x225 ?x30))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x36)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x336)))
 (let ((?x207 (bvadd (bvadd (bvadd ?x252 ?x418) ?x253) ?x134)))
 (let (($x59 (= ?x207 ?x33)))
 (let (($x80 (= $x59 true)))
 (let (($x123 (= $x80 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x379 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x379 (concat ?x218 (concat ?x459 ?x8)))))
 (let (($x360 (= ?x96 input.dst.llvm-%m)))
 (let (($x75 (= $x360 true)))
 (let (($x402 (= (bvand ?x83 (_ bv4294967292 32)) ?x83)))
 (let (($x74 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x200 (and true $x136)))
 (let (($x54 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x268 (and $x54 $x200)))
 (let (($x333 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x83 (bvsub ?x83 (_ bv8 32))) (bvult ?x83 (bvsub ?x83 (_ bv8 32))))))
 (let (($x357 (and (and (and true $x333) $x268) $x74)))
 (let (($x222 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x381 (and true $x222)))
 (let (($x437 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x406 (and $x437 $x381)))
 (let (($x155 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv12 32))) (bvult ?x53 (bvsub ?x53 (_ bv12 32))))))
 (let (($x383 (and (and (and true $x437) $x155) $x406)))
 (let (($x100 (and (and $x383 $x357) $x402)))
 (let (($x413 (= input.dst.llvm-%m ?x96)))
 (let (($x89 (and $x413 $x100)))
 (let ((?x171 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x71 (= (_ bv0 32) ?x171)))
 (let ((?x433 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x433)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x243 $x32)))
 (let (($x110 (and $x28 $x71)))
 (let (($x391 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x456 (and $x391 $x110)))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x340 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x453 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x453))))
 (let ((?x43 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x335 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x431 (bvuge ?x335 (_ bv1 32))))
 (=> $x431 (= ?x43 ?x168))))))))))
 ))
 (let (($x65 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x335 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x431 (bvuge ?x335 (_ bv1 32))))
 (= $x431 (bvuge ?x166 (_ bv1 32))))))))
 ))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let (($x179 (= false false)))
 (let (($x198 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x335 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x335 (_ bv0 32))))
 (=> $x367 $x179))))))
 ))
 (let (($x290 (forall ((Lambda5 (_ BitVec 32)) )(let (($x198 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x335 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x335 (_ bv0 32))))
 (= $x367 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x346 (and $x290 $x236)))
 (let (($x264 (and $x346 $x65)))
 (let (($x98 (and $x264 $x273)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x375 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x390 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x375 $x37)))))))
 (let (($x327 (and (and (and $x390 $x98) $x456) $x89)))
 (let (($x332 (= $x327 true)))
 (let (($x239 (= $x332 true)))
 (let (($x228 (= $x383 true)))
 (let (($x47 (= $x228 true)))
 (let (($x231 (and $x357 $x402)))
 (let (($x363 (= $x231 true)))
 (let (($x204 (= $x363 true)))
 (let (($x341 (and $x204 $x47)))
 (let (($x353 (and $x341 $x239)))
 (let (($x27 (and $x353 $x75)))
 (let (($x143 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x56 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x56 (_ bv1 32))))
 (let (($x176 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x26 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x26 (_ bv0 32))))
 (let (($x274 (and $x124 $x114)))
 (let (($x58 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x351 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x395 (= ?x351 (_ bv0 32))))
 (let (($x6 (and $x395 $x274)))
 (let (($x70 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x196 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x196 (_ bv1 32))))
 (let (($x86 (and $x69 $x6)))
 (let (($x269 (and $x86 $x27)))
 (let (($x210 (= ?x172 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x102 (=> $x69 $x210)))
 (let (($x387 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x313 (= $x69 $x387)))
 (let (($x179 (= false false)))
 (let (($x203 (= ?x196 (_ bv0 32))))
 (let (($x87 (=> $x203 $x179)))
 (let (($x205 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x256 (= $x203 $x205)))
 (let (($x106 (and $x256 $x87)))
 (let (($x368 (and $x106 $x313)))
 (let (($x261 (and $x368 $x102)))
 (let (($x331 (and $x261 $x269)))
 (let ((?x283 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x308 (= ?x283 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x173 (bvuge ?x351 (_ bv1 32))))
 (let (($x233 (=> $x173 $x308)))
 (let (($x317 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x258 (= $x173 $x317)))
 (let (($x295 (=> $x395 $x179)))
 (let (($x97 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x212 (= $x395 $x97)))
 (let (($x77 (and $x212 $x295)))
 (let (($x263 (and $x77 $x258)))
 (let (($x234 (and $x263 $x233)))
 (let (($x352 (and $x234 $x331)))
 (let ((?x427 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x316 (= ?x427 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x38 (bvuge ?x26 (_ bv1 32))))
 (let (($x330 (=> $x38 $x316)))
 (let (($x378 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x364 (= $x38 $x378)))
 (let (($x99 (=> $x124 $x179)))
 (let (($x272 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x197 (= $x124 $x272)))
 (let (($x249 (and $x197 $x99)))
 (let (($x224 (and $x249 $x364)))
 (let (($x84 (and $x224 $x330)))
 (let (($x146 (and $x84 $x352)))
 (let (($x73 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x242 (=> $x114 $x73)))
 (let (($x439 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x113 (= $x114 $x439)))
 (let (($x121 (= ?x56 (_ bv0 32))))
 (let (($x442 (=> $x121 $x179)))
 (let (($x213 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x147 (= $x121 $x213)))
 (let (($x443 (and $x147 $x442)))
 (let (($x349 (and $x443 $x113)))
 (let (($x217 (and $x349 $x242)))
 (let (($x458 (and $x217 $x146)))
 (let (($x247 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x260 (and $x247 $x458)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x246 (and $x78 $x260)))
 (let (($x305 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x320 (and $x305 $x246)))
 (let (($x237 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x388 (and $x237 $x320)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x329 (and $x303 $x388)))
 (let (($x109 (and $x179 $x329)))
 (let (($x372 (= ?x172 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x289 (and $x372 $x109)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x460 (and $x358 $x289)))
 (let (($x42 (and $x179 $x460)))
 (let (($x85 (= ?x283 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x120 (and $x85 $x42)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x385 (and $x142 $x120)))
 (let (($x132 (and $x179 $x385)))
 (let (($x287 (= ?x427 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x245 (and $x287 $x132)))
 (let (($x426 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x370 (and $x426 $x245)))
 (let (($x144 (and $x179 $x370)))
 (let (($x82 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x377 (and $x82 $x144)))
 (let (($x158 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x122 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x158)))))))
 (let (($x271 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x371)))
 (let (($x215 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x271)))))))
 (let (($x209 (bvugt ?x53 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x425 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x220 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x425 $x209)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x326 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x22)))))))
 (let (($x7 (and $x326 $x220)))
 (let (($x55 (and $x7 $x215)))
 (let (($x9 (and $x55 $x122)))
 (let (($x169 (and $x9 $x377)))
 (let (($x441 (=> $x169 $x123)))
 (not $x441))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x172 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x33 (bvadd ?x172 ?x424)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x420 (concat ?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x83 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x371 (bvadd ?x83 (_ bv3 32))))
 (let ((?x131 (concat (select input.dst.llvm-mem ?x371) (concat ?x262 ?x420))))
 (let ((?x134 (bvmul (_ bv4294967295 32) ?x131)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x250 (concat ?x296 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x281 (bvadd ?x133 (_ bv3 32))))
 (let ((?x253 (concat (select input.dst.llvm-mem ?x281) (concat ?x366 ?x250))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x30 (concat ?x211 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x53 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x137 (bvadd ?x53 (_ bv3 32))))
 (let ((?x418 (concat (select input.dst.llvm-mem ?x137) (concat ?x225 ?x30))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x36)))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x336)))
 (let ((?x207 (bvadd (bvadd (bvadd ?x252 ?x418) ?x253) ?x134)))
 (let (($x59 (= ?x207 ?x33)))
 (let (($x80 (= $x59 true)))
 (let (($x123 (= $x80 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x379 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x379 (concat ?x218 (concat ?x459 ?x8)))))
 (let (($x360 (= ?x96 input.dst.llvm-%m)))
 (let (($x75 (= $x360 true)))
 (let (($x402 (= (bvand ?x83 (_ bv4294967292 32)) ?x83)))
 (let (($x74 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x136 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x200 (and true $x136)))
 (let (($x54 (= (bvand ?x53 (_ bv4294967292 32)) ?x53)))
 (let (($x268 (and $x54 $x200)))
 (let (($x333 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x83 (bvsub ?x83 (_ bv8 32))) (bvult ?x83 (bvsub ?x83 (_ bv8 32))))))
 (let (($x357 (and (and (and true $x333) $x268) $x74)))
 (let (($x222 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x381 (and true $x222)))
 (let (($x437 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x406 (and $x437 $x381)))
 (let (($x155 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x53 (bvsub ?x53 (_ bv12 32))) (bvult ?x53 (bvsub ?x53 (_ bv12 32))))))
 (let (($x383 (and (and (and true $x437) $x155) $x406)))
 (let (($x100 (and (and $x383 $x357) $x402)))
 (let (($x413 (= input.dst.llvm-%m ?x96)))
 (let (($x89 (and $x413 $x100)))
 (let ((?x171 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x71 (= (_ bv0 32) ?x171)))
 (let ((?x433 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x433)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x243 $x32)))
 (let (($x110 (and $x28 $x71)))
 (let (($x391 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x456 (and $x391 $x110)))
 (let (($x273 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x340 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x453 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x453))))
 (let ((?x43 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x198 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x335 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x431 (bvuge ?x335 (_ bv1 32))))
 (=> $x431 (= ?x43 ?x168))))))))))
 ))
 (let (($x65 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x198 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x335 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x431 (bvuge ?x335 (_ bv1 32))))
 (= $x431 (bvuge ?x166 (_ bv1 32))))))))
 ))
 (let (($x236 (forall ((Lambda5 (_ BitVec 32)) )(let (($x179 (= false false)))
 (let (($x198 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x335 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x335 (_ bv0 32))))
 (=> $x367 $x179))))))
 ))
 (let (($x290 (forall ((Lambda5 (_ BitVec 32)) )(let (($x198 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x335 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x335 (_ bv0 32))))
 (= $x367 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x346 (and $x290 $x236)))
 (let (($x264 (and $x346 $x65)))
 (let (($x98 (and $x264 $x273)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x375 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x390 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x375 $x37)))))))
 (let (($x327 (and (and (and $x390 $x98) $x456) $x89)))
 (let (($x332 (= $x327 true)))
 (let (($x239 (= $x332 true)))
 (let (($x228 (= $x383 true)))
 (let (($x47 (= $x228 true)))
 (let (($x231 (and $x357 $x402)))
 (let (($x363 (= $x231 true)))
 (let (($x204 (= $x363 true)))
 (let (($x341 (and $x204 $x47)))
 (let (($x353 (and $x341 $x239)))
 (let (($x27 (and $x353 $x75)))
 (let (($x143 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x56 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x56 (_ bv1 32))))
 (let (($x176 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x26 (ite $x176 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (= ?x26 (_ bv0 32))))
 (let (($x274 (and $x124 $x114)))
 (let (($x58 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x351 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x395 (= ?x351 (_ bv0 32))))
 (let (($x6 (and $x395 $x274)))
 (let (($x70 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x196 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x196 (_ bv1 32))))
 (let (($x86 (and $x69 $x6)))
 (let (($x269 (and $x86 $x27)))
 (let (($x210 (= ?x172 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x102 (=> $x69 $x210)))
 (let (($x387 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x313 (= $x69 $x387)))
 (let (($x179 (= false false)))
 (let (($x203 (= ?x196 (_ bv0 32))))
 (let (($x87 (=> $x203 $x179)))
 (let (($x205 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x256 (= $x203 $x205)))
 (let (($x106 (and $x256 $x87)))
 (let (($x368 (and $x106 $x313)))
 (let (($x261 (and $x368 $x102)))
 (let (($x331 (and $x261 $x269)))
 (let ((?x283 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x308 (= ?x283 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x173 (bvuge ?x351 (_ bv1 32))))
 (let (($x233 (=> $x173 $x308)))
 (let (($x317 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x258 (= $x173 $x317)))
 (let (($x295 (=> $x395 $x179)))
 (let (($x97 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x212 (= $x395 $x97)))
 (let (($x77 (and $x212 $x295)))
 (let (($x263 (and $x77 $x258)))
 (let (($x234 (and $x263 $x233)))
 (let (($x352 (and $x234 $x331)))
 (let ((?x427 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x316 (= ?x427 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x38 (bvuge ?x26 (_ bv1 32))))
 (let (($x330 (=> $x38 $x316)))
 (let (($x378 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x364 (= $x38 $x378)))
 (let (($x99 (=> $x124 $x179)))
 (let (($x272 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x197 (= $x124 $x272)))
 (let (($x249 (and $x197 $x99)))
 (let (($x224 (and $x249 $x364)))
 (let (($x84 (and $x224 $x330)))
 (let (($x146 (and $x84 $x352)))
 (let (($x73 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x242 (=> $x114 $x73)))
 (let (($x439 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x113 (= $x114 $x439)))
 (let (($x121 (= ?x56 (_ bv0 32))))
 (let (($x442 (=> $x121 $x179)))
 (let (($x213 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x147 (= $x121 $x213)))
 (let (($x443 (and $x147 $x442)))
 (let (($x349 (and $x443 $x113)))
 (let (($x217 (and $x349 $x242)))
 (let (($x458 (and $x217 $x146)))
 (let (($x247 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x260 (and $x247 $x458)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x246 (and $x78 $x260)))
 (let (($x305 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x320 (and $x305 $x246)))
 (let (($x237 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x388 (and $x237 $x320)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x329 (and $x303 $x388)))
 (let (($x109 (and $x179 $x329)))
 (let (($x372 (= ?x172 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x289 (and $x372 $x109)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x460 (and $x358 $x289)))
 (let (($x42 (and $x179 $x460)))
 (let (($x85 (= ?x283 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x120 (and $x85 $x42)))
 (let (($x142 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x385 (and $x142 $x120)))
 (let (($x132 (and $x179 $x385)))
 (let (($x287 (= ?x427 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x245 (and $x287 $x132)))
 (let (($x426 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x370 (and $x426 $x245)))
 (let (($x144 (and $x179 $x370)))
 (let (($x82 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x377 (and $x82 $x144)))
 (let (($x158 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x122 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x135 $x158)))))))
 (let (($x271 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x371)))
 (let (($x215 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x271)))))))
 (let (($x209 (bvugt ?x53 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x425 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x220 (=> (bvule ?x53 (bvsub (bvadd ?x53 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x425 $x209)))))))
 (let (($x22 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x326 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x22)))))))
 (let (($x7 (and $x326 $x220)))
 (let (($x55 (and $x7 $x215)))
 (let (($x9 (and $x55 $x122)))
 (let (($x169 (and $x9 $x377)))
 (let (($x441 (=> $x169 $x123)))
 (not $x441))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 252 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x202 (concat ?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x127 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x271 (bvadd ?x127 (_ bv3 32))))
 (let ((?x12 (concat (select input.dst.llvm-mem ?x271) (concat ?x251 ?x202))))
 (let ((?x141 (bvmul (_ bv4294967295 32) ?x12)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x177 (concat ?x302 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x158 (bvadd ?x404 (_ bv3 32))))
 (let ((?x304 (concat (select input.dst.llvm-mem ?x158) (concat ?x153 ?x177))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x321 (concat ?x441 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x41 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x209 (bvadd ?x41 (_ bv3 32))))
 (let ((?x323 (concat (select input.dst.llvm-mem ?x209) (concat ?x311 ?x321))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x130)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x207)))
 (let ((?x19 (bvadd (bvadd (bvadd ?x59 ?x323) ?x304) ?x141)))
 (let ((?x17 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x103 (= ?x17 ?x19)))
 (let (($x409 (= $x103 true)))
 (let (($x454 (= $x409 true)))
 (let ((?x289 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x377 (concat ?x144 (concat ?x132 (concat ?x42 ?x289)))))
 (let (($x167 (= ?x377 input.dst.llvm-%m)))
 (let (($x139 (= $x167 true)))
 (let (($x115 (= (bvand ?x127 (_ bv4294967292 32)) ?x127)))
 (let (($x231 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x74 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x357 (and true $x74)))
 (let (($x136 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x165 (and $x136 $x357)))
 (let (($x400 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x127 (bvsub ?x127 (_ bv8 32))) (bvult ?x127 (bvsub ?x127 (_ bv8 32))))))
 (let (($x13 (and (and (and true $x400) $x165) $x231)))
 (let (($x228 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x47 (and true $x228)))
 (let (($x155 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x341 (and $x155 $x47)))
 (let (($x398 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv12 32))) (bvult ?x41 (bvsub ?x41 (_ bv12 32))))))
 (let (($x405 (and (and (and true $x155) $x398) $x341)))
 (let (($x310 (and (and $x405 $x13) $x115)))
 (let (($x169 (= input.dst.llvm-%m ?x377)))
 (let (($x180 (and $x169 $x310)))
 (let ((?x246 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x320 (= (_ bv0 32) ?x246)))
 (let ((?x146 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x458 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x352 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x352 $x458)))
 (let (($x388 (and $x260 $x320)))
 (let (($x331 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x331 $x388)))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x413))))
 (let ((?x277 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x179 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x340 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x340 (_ bv1 32))))
 (=> $x257 (= ?x277 ?x239))))))))))
 ))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x457 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x340 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x340 (_ bv1 32))))
 (= $x257 (bvuge ?x457 (_ bv1 32))))))))
 ))
 (let (($x170 (forall ((Lambda5 (_ BitVec 32)) )(let (($x427 (= false false)))
 (let (($x179 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x340 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x455 (= ?x340 (_ bv0 32))))
 (=> $x455 $x427))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let (($x179 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x340 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x455 (= ?x340 (_ bv0 32))))
 (= $x455 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x111 (and $x162 $x170)))
 (let (($x411 (and $x111 $x98)))
 (let (($x27 (and $x411 $x75)))
 (let (($x335 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x335)))))))
 (let (($x393 (and (and (and $x166 $x27) $x329) $x180)))
 (let (($x36 (= $x393 true)))
 (let (($x336 (= $x36 true)))
 (let (($x34 (= $x405 true)))
 (let (($x375 (= $x34 true)))
 (let (($x81 (and $x13 $x115)))
 (let (($x282 (= $x81 true)))
 (let (($x438 (= $x282 true)))
 (let (($x37 (and $x438 $x375)))
 (let (($x252 (and $x37 $x336)))
 (let (($x225 (and $x252 $x139)))
 (let (($x147 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x443 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x443 (_ bv0 32))))
 (let (($x99 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x249 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x249 (_ bv0 32))))
 (let (($x410 (and $x38 $x114)))
 (let (($x295 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x77 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x77 (_ bv0 32))))
 (let (($x333 (and $x173 $x410)))
 (let (($x87 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x106 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x106 (_ bv1 32))))
 (let (($x93 (and $x102 $x333)))
 (let (($x72 (and $x93 $x225)))
 (let (($x241 (= ?x17 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x276 (=> $x102 $x241)))
 (let (($x261 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x274 (= $x102 $x261)))
 (let (($x427 (= false false)))
 (let (($x69 (= ?x106 (_ bv0 32))))
 (let (($x284 (=> $x69 $x427)))
 (let (($x313 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x368 (= $x69 $x313)))
 (let (($x210 (and $x368 $x284)))
 (let (($x6 (and $x210 $x274)))
 (let (($x145 (and $x6 $x276)))
 (let (($x211 (and $x145 $x72)))
 (let ((?x172 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x92 (= ?x172 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x233 (bvuge ?x77 (_ bv1 32))))
 (let (($x205 (=> $x233 $x92)))
 (let (($x234 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x70 (= $x233 $x234)))
 (let (($x354 (=> $x173 $x427)))
 (let (($x258 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x263 (= $x173 $x258)))
 (let (($x308 (and $x263 $x354)))
 (let (($x196 (and $x308 $x70)))
 (let (($x256 (and $x196 $x205)))
 (let (($x286 (and $x256 $x211)))
 (let ((?x283 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x184 (= ?x283 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x330 (bvuge ?x249 (_ bv1 32))))
 (let (($x97 (=> $x330 $x184)))
 (let (($x84 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x58 (= $x330 $x84)))
 (let (($x300 (=> $x38 $x427)))
 (let (($x364 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x224 (= $x38 $x364)))
 (let (($x316 (and $x224 $x300)))
 (let (($x351 (and $x316 $x58)))
 (let (($x212 (and $x351 $x97)))
 (let (($x30 (and $x212 $x286)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x51 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x242 (bvuge ?x443 (_ bv1 32))))
 (let (($x272 (=> $x242 $x51)))
 (let (($x217 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x176 (= $x242 $x217)))
 (let (($x355 (=> $x114 $x427)))
 (let (($x113 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x349 (= $x114 $x113)))
 (let (($x73 (and $x349 $x355)))
 (let (($x26 (and $x73 $x176)))
 (let (($x197 (and $x26 $x272)))
 (let (($x66 (and $x197 $x30)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x418 (and $x213 $x66)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x347 (and $x121 $x418)))
 (let (($x143 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x119 (and $x143 $x347)))
 (let (($x396 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x343 (and $x396 $x119)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x366 (and $x161 $x343)))
 (let (($x374 (and $x427 $x366)))
 (let (($x39 (= ?x17 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x296 (and $x39 $x374)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x248 (and $x303 $x296)))
 (let (($x250 (and $x427 $x248)))
 (let (($x372 (= ?x172 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x46 (and $x372 $x250)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x253 (and $x358 $x46)))
 (let (($x10 (and $x427 $x253)))
 (let (($x85 (= ?x283 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x159 (and $x85 $x10)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x31 (and $x219 $x159)))
 (let (($x183 (and $x427 $x31)))
 (let (($x104 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x262 (and $x104 $x183)))
 (let (($x187 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x107 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x187)))))))
 (let (($x417 (bvugt ?x127 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x271)))
 (let (($x192 (=> (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x417)))))))
 (let (($x293 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x369 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x209)))
 (let (($x83 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x369 $x293)))))))
 (let (($x361 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x299 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x291 $x361)))))))
 (let (($x394 (and $x299 $x83)))
 (let (($x95 (and $x394 $x192)))
 (let (($x40 (and $x95 $x107)))
 (let (($x244 (and $x40 $x262)))
 (let (($x423 (=> $x244 $x454)))
 (not $x423)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x202 (concat ?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x127 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x271 (bvadd ?x127 (_ bv3 32))))
 (let ((?x12 (concat (select input.dst.llvm-mem ?x271) (concat ?x251 ?x202))))
 (let ((?x141 (bvmul (_ bv4294967295 32) ?x12)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x177 (concat ?x302 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x158 (bvadd ?x404 (_ bv3 32))))
 (let ((?x304 (concat (select input.dst.llvm-mem ?x158) (concat ?x153 ?x177))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x321 (concat ?x441 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x41 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x209 (bvadd ?x41 (_ bv3 32))))
 (let ((?x323 (concat (select input.dst.llvm-mem ?x209) (concat ?x311 ?x321))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x130)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x207)))
 (let ((?x19 (bvadd (bvadd (bvadd ?x59 ?x323) ?x304) ?x141)))
 (let ((?x17 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x103 (= ?x17 ?x19)))
 (let (($x409 (= $x103 true)))
 (let (($x454 (= $x409 true)))
 (let ((?x289 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x377 (concat ?x144 (concat ?x132 (concat ?x42 ?x289)))))
 (let (($x167 (= ?x377 input.dst.llvm-%m)))
 (let (($x139 (= $x167 true)))
 (let (($x115 (= (bvand ?x127 (_ bv4294967292 32)) ?x127)))
 (let (($x231 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x74 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x357 (and true $x74)))
 (let (($x136 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x165 (and $x136 $x357)))
 (let (($x400 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x127 (bvsub ?x127 (_ bv8 32))) (bvult ?x127 (bvsub ?x127 (_ bv8 32))))))
 (let (($x13 (and (and (and true $x400) $x165) $x231)))
 (let (($x228 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x47 (and true $x228)))
 (let (($x155 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x341 (and $x155 $x47)))
 (let (($x398 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv12 32))) (bvult ?x41 (bvsub ?x41 (_ bv12 32))))))
 (let (($x405 (and (and (and true $x155) $x398) $x341)))
 (let (($x310 (and (and $x405 $x13) $x115)))
 (let (($x169 (= input.dst.llvm-%m ?x377)))
 (let (($x180 (and $x169 $x310)))
 (let ((?x246 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x320 (= (_ bv0 32) ?x246)))
 (let ((?x146 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x458 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x146)))
 (let (($x352 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x352 $x458)))
 (let (($x388 (and $x260 $x320)))
 (let (($x331 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x331 $x388)))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x413))))
 (let ((?x277 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x179 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x340 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x340 (_ bv1 32))))
 (=> $x257 (= ?x277 ?x239))))))))))
 ))
 (let (($x98 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x457 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x340 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x340 (_ bv1 32))))
 (= $x257 (bvuge ?x457 (_ bv1 32))))))))
 ))
 (let (($x170 (forall ((Lambda5 (_ BitVec 32)) )(let (($x427 (= false false)))
 (let (($x179 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x340 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x455 (= ?x340 (_ bv0 32))))
 (=> $x455 $x427))))))
 ))
 (let (($x162 (forall ((Lambda5 (_ BitVec 32)) )(let (($x179 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x340 (ite $x179 (_ bv1 32) (_ bv0 32))))
 (let (($x455 (= ?x340 (_ bv0 32))))
 (= $x455 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x111 (and $x162 $x170)))
 (let (($x411 (and $x111 $x98)))
 (let (($x27 (and $x411 $x75)))
 (let (($x335 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x198 $x335)))))))
 (let (($x393 (and (and (and $x166 $x27) $x329) $x180)))
 (let (($x36 (= $x393 true)))
 (let (($x336 (= $x36 true)))
 (let (($x34 (= $x405 true)))
 (let (($x375 (= $x34 true)))
 (let (($x81 (and $x13 $x115)))
 (let (($x282 (= $x81 true)))
 (let (($x438 (= $x282 true)))
 (let (($x37 (and $x438 $x375)))
 (let (($x252 (and $x37 $x336)))
 (let (($x225 (and $x252 $x139)))
 (let (($x147 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x443 (ite $x147 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (= ?x443 (_ bv0 32))))
 (let (($x99 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x249 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (= ?x249 (_ bv0 32))))
 (let (($x410 (and $x38 $x114)))
 (let (($x295 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x77 (ite $x295 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (= ?x77 (_ bv0 32))))
 (let (($x333 (and $x173 $x410)))
 (let (($x87 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x106 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x106 (_ bv1 32))))
 (let (($x93 (and $x102 $x333)))
 (let (($x72 (and $x93 $x225)))
 (let (($x241 (= ?x17 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x276 (=> $x102 $x241)))
 (let (($x261 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x274 (= $x102 $x261)))
 (let (($x427 (= false false)))
 (let (($x69 (= ?x106 (_ bv0 32))))
 (let (($x284 (=> $x69 $x427)))
 (let (($x313 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x368 (= $x69 $x313)))
 (let (($x210 (and $x368 $x284)))
 (let (($x6 (and $x210 $x274)))
 (let (($x145 (and $x6 $x276)))
 (let (($x211 (and $x145 $x72)))
 (let ((?x172 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x92 (= ?x172 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x233 (bvuge ?x77 (_ bv1 32))))
 (let (($x205 (=> $x233 $x92)))
 (let (($x234 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x70 (= $x233 $x234)))
 (let (($x354 (=> $x173 $x427)))
 (let (($x258 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x263 (= $x173 $x258)))
 (let (($x308 (and $x263 $x354)))
 (let (($x196 (and $x308 $x70)))
 (let (($x256 (and $x196 $x205)))
 (let (($x286 (and $x256 $x211)))
 (let ((?x283 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x184 (= ?x283 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x330 (bvuge ?x249 (_ bv1 32))))
 (let (($x97 (=> $x330 $x184)))
 (let (($x84 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x58 (= $x330 $x84)))
 (let (($x300 (=> $x38 $x427)))
 (let (($x364 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x224 (= $x38 $x364)))
 (let (($x316 (and $x224 $x300)))
 (let (($x351 (and $x316 $x58)))
 (let (($x212 (and $x351 $x97)))
 (let (($x30 (and $x212 $x286)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x51 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x242 (bvuge ?x443 (_ bv1 32))))
 (let (($x272 (=> $x242 $x51)))
 (let (($x217 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x176 (= $x242 $x217)))
 (let (($x355 (=> $x114 $x427)))
 (let (($x113 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x349 (= $x114 $x113)))
 (let (($x73 (and $x349 $x355)))
 (let (($x26 (and $x73 $x176)))
 (let (($x197 (and $x26 $x272)))
 (let (($x66 (and $x197 $x30)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x418 (and $x213 $x66)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x347 (and $x121 $x418)))
 (let (($x143 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x119 (and $x143 $x347)))
 (let (($x396 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x343 (and $x396 $x119)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x366 (and $x161 $x343)))
 (let (($x374 (and $x427 $x366)))
 (let (($x39 (= ?x17 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x296 (and $x39 $x374)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x248 (and $x303 $x296)))
 (let (($x250 (and $x427 $x248)))
 (let (($x372 (= ?x172 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x46 (and $x372 $x250)))
 (let (($x358 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x253 (and $x358 $x46)))
 (let (($x10 (and $x427 $x253)))
 (let (($x85 (= ?x283 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x159 (and $x85 $x10)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x31 (and $x219 $x159)))
 (let (($x183 (and $x427 $x31)))
 (let (($x104 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x262 (and $x104 $x183)))
 (let (($x187 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x107 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x187)))))))
 (let (($x417 (bvugt ?x127 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x271)))
 (let (($x192 (=> (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x152 $x417)))))))
 (let (($x293 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x369 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x209)))
 (let (($x83 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x369 $x293)))))))
 (let (($x361 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x255 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x299 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x291 $x361)))))))
 (let (($x394 (and $x299 $x83)))
 (let (($x95 (and $x394 $x192)))
 (let (($x40 (and $x95 $x107)))
 (let (($x244 (and $x40 $x262)))
 (let (($x423 (=> $x244 $x454)))
 (not $x423)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 251 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x71 (bvmul (_ bv4294967295 32) ?x172)))
 (let ((?x175 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x71)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x63 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x371 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x417 (bvadd ?x371 (_ bv3 32))))
 (let ((?x110 (concat (select input.dst.llvm-mem ?x417) (concat ?x433 ?x63))))
 (let ((?x456 (bvmul (_ bv4294967295 32) ?x110)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x290 (concat ?x397 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x187 (bvadd ?x133 (_ bv3 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem ?x187) (concat ?x346 ?x290))))
 (let ((?x376 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x21 (concat ?x376 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x226 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x293 (bvadd ?x226 (_ bv3 32))))
 (let ((?x301 (concat (select input.dst.llvm-mem ?x293) (concat ?x23 ?x21))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x76)))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x19)))
 (let ((?x32 (bvadd (bvadd (bvadd ?x409 ?x301) ?x314) ?x456)))
 (let (($x218 (= ?x32 ?x175)))
 (let (($x230 (= $x218 true)))
 (let (($x266 (= $x230 true)))
 (let ((?x296 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x262 (concat ?x183 (concat ?x10 (concat ?x250 ?x296)))))
 (let (($x328 (= ?x262 input.dst.llvm-%m)))
 (let (($x294 (= $x328 true)))
 (let (($x94 (= (bvand ?x371 (_ bv4294967292 32)) ?x371)))
 (let (($x81 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x231 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x13 (and true $x231)))
 (let (($x74 (= (bvand ?x226 (_ bv4294967292 32)) ?x226)))
 (let (($x437 (and $x74 $x13)))
 (let (($x200 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x371 (bvsub ?x371 (_ bv8 32))) (bvult ?x371 (bvsub ?x371 (_ bv8 32))))))
 (let (($x64 (and (and (and true $x200) $x437) $x81)))
 (let (($x34 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x375 (and true $x34)))
 (let (($x398 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x37 (and $x398 $x375)))
 (let (($x383 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x226 (bvsub ?x226 (_ bv12 32))) (bvult ?x226 (bvsub ?x226 (_ bv12 32))))))
 (let (($x14 (and (and (and true $x398) $x383) $x37)))
 (let (($x131 (and (and $x14 $x64) $x94)))
 (let (($x244 (= input.dst.llvm-%m ?x262)))
 (let (($x134 (and $x244 $x131)))
 (let ((?x347 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x119 (= (_ bv0 32) ?x347)))
 (let ((?x30 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x418 (and $x286 $x66)))
 (let (($x343 (and $x418 $x119)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x366 (and $x211 $x343)))
 (let (($x139 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x169))))
 (let ((?x270 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x427 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x8 (ite $x427 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x8 (_ bv1 32))))
 (=> $x360 (= ?x270 ?x336))))))))))
 ))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x391 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x8 (ite $x427 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x8 (_ bv1 32))))
 (= $x360 (bvuge ?x391 (_ bv1 32))))))))
 ))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let (($x283 (= false false)))
 (let (($x427 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x8 (ite $x427 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x8 (_ bv0 32))))
 (=> $x327 $x283))))))
 ))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let (($x427 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x8 (ite $x427 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x8 (_ bv0 32))))
 (= $x327 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x193 (and $x67 $x96)))
 (let (($x399 (and $x193 $x27)))
 (let (($x225 (and $x399 $x139)))
 (let (($x340 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x457 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x340)))))))
 (let (($x189 (and (and (and $x457 $x225) $x366) $x134)))
 (let (($x130 (= $x189 true)))
 (let (($x207 (= $x130 true)))
 (let (($x108 (= $x14 true)))
 (let (($x198 (= $x108 true)))
 (let (($x62 (and $x64 $x94)))
 (let (($x338 (= $x62 true)))
 (let (($x275 (= $x338 true)))
 (let (($x335 (and $x275 $x198)))
 (let (($x59 (and $x335 $x207)))
 (let (($x311 (and $x59 $x294)))
 (let (($x349 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x73 (ite $x349 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x73 (_ bv1 32))))
 (let (($x300 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x316 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x316 (_ bv1 32))))
 (let (($x408 (and $x97 $x272)))
 (let (($x354 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x308 (ite $x354 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x308 (_ bv1 32))))
 (let (($x400 (and $x205 $x408)))
 (let (($x284 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x210 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x210 (_ bv0 32))))
 (let (($x363 (and $x102 $x400)))
 (let (($x123 (and $x363 $x311)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x178 (= ?x78 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x276 (bvuge ?x210 (_ bv1 32))))
 (let (($x309 (=> $x276 $x178)))
 (let (($x145 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x410 (= $x276 $x145)))
 (let (($x283 (= false false)))
 (let (($x86 (=> $x102 $x283)))
 (let (($x274 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x6 (= $x102 $x274)))
 (let (($x241 (and $x6 $x86)))
 (let (($x333 (and $x241 $x410)))
 (let (($x54 (and $x333 $x309)))
 (let (($x441 (and $x54 $x123)))
 (let ((?x17 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x387 (= ?x17 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x313 (=> $x205 $x387)))
 (let (($x256 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x87 (= $x205 $x256)))
 (let (($x233 (= ?x308 (_ bv0 32))))
 (let (($x203 (=> $x233 $x283)))
 (let (($x70 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x196 (= $x233 $x70)))
 (let (($x92 (and $x196 $x203)))
 (let (($x106 (and $x92 $x87)))
 (let (($x368 (and $x106 $x313)))
 (let (($x80 (and $x368 $x441)))
 (let (($x317 (= ?x172 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x258 (=> $x97 $x317)))
 (let (($x212 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x295 (= $x97 $x212)))
 (let (($x330 (= ?x316 (_ bv0 32))))
 (let (($x395 (=> $x330 $x283)))
 (let (($x58 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x351 (= $x330 $x58)))
 (let (($x184 (and $x351 $x395)))
 (let (($x77 (and $x184 $x295)))
 (let (($x263 (and $x77 $x258)))
 (let (($x321 (and $x263 $x80)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x378 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x364 (=> $x272 $x378)))
 (let (($x197 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x99 (= $x272 $x197)))
 (let (($x242 (= ?x73 (_ bv0 32))))
 (let (($x124 (=> $x242 $x283)))
 (let (($x176 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x26 (= $x242 $x176)))
 (let (($x51 (and $x26 $x124)))
 (let (($x249 (and $x51 $x99)))
 (let (($x224 (and $x249 $x364)))
 (let (($x337 (and $x224 $x321)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x323 (and $x113 $x337)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x440 (and $x114 $x323)))
 (let (($x147 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x24 (and $x147 $x440)))
 (let (($x25 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x280 (and $x25 $x24)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x153 (and $x56 $x280)))
 (let (($x235 (and $x283 $x153)))
 (let (($x247 (= ?x78 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x302 (and $x247 $x235)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x238 (and $x161 $x302)))
 (let (($x177 (and $x283 $x238)))
 (let (($x39 (= ?x17 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x292 (and $x39 $x177)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x304 (and $x303 $x292)))
 (let (($x348 (and $x283 $x304)))
 (let (($x372 (= ?x172 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x419 (and $x372 $x348)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x57 (and $x101 $x419)))
 (let (($x112 (and $x283 $x57)))
 (let (($x142 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x251 (and $x142 $x112)))
 (let (($x116 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x426 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x116)))))))
 (let (($x319 (bvugt ?x371 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x417)))
 (let (($x281 (=> (bvule ?x371 (bvsub (bvadd ?x371 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x201 $x319)))))))
 (let (($x157 (bvugt ?x226 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x293)))
 (let (($x127 (=> (bvule ?x226 (bvsub (bvadd ?x226 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x157)))))))
 (let (($x53 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x299 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x299)))
 (let (($x137 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x53)))))))
 (let (($x425 (and $x137 $x127)))
 (let (($x15 (and $x425 $x281)))
 (let (($x135 (and $x15 $x426)))
 (let (($x190 (and $x135 $x251)))
 (let (($x297 (=> $x190 $x266)))
 (not $x297)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x71 (bvmul (_ bv4294967295 32) ?x172)))
 (let ((?x175 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x71)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x63 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x371 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x417 (bvadd ?x371 (_ bv3 32))))
 (let ((?x110 (concat (select input.dst.llvm-mem ?x417) (concat ?x433 ?x63))))
 (let ((?x456 (bvmul (_ bv4294967295 32) ?x110)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x290 (concat ?x397 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x187 (bvadd ?x133 (_ bv3 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem ?x187) (concat ?x346 ?x290))))
 (let ((?x376 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x21 (concat ?x376 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x226 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x293 (bvadd ?x226 (_ bv3 32))))
 (let ((?x301 (concat (select input.dst.llvm-mem ?x293) (concat ?x23 ?x21))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x76)))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x19)))
 (let ((?x32 (bvadd (bvadd (bvadd ?x409 ?x301) ?x314) ?x456)))
 (let (($x218 (= ?x32 ?x175)))
 (let (($x230 (= $x218 true)))
 (let (($x266 (= $x230 true)))
 (let ((?x296 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x262 (concat ?x183 (concat ?x10 (concat ?x250 ?x296)))))
 (let (($x328 (= ?x262 input.dst.llvm-%m)))
 (let (($x294 (= $x328 true)))
 (let (($x94 (= (bvand ?x371 (_ bv4294967292 32)) ?x371)))
 (let (($x81 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x231 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x13 (and true $x231)))
 (let (($x74 (= (bvand ?x226 (_ bv4294967292 32)) ?x226)))
 (let (($x437 (and $x74 $x13)))
 (let (($x200 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x371 (bvsub ?x371 (_ bv8 32))) (bvult ?x371 (bvsub ?x371 (_ bv8 32))))))
 (let (($x64 (and (and (and true $x200) $x437) $x81)))
 (let (($x34 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x375 (and true $x34)))
 (let (($x398 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x37 (and $x398 $x375)))
 (let (($x383 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x226 (bvsub ?x226 (_ bv12 32))) (bvult ?x226 (bvsub ?x226 (_ bv12 32))))))
 (let (($x14 (and (and (and true $x398) $x383) $x37)))
 (let (($x131 (and (and $x14 $x64) $x94)))
 (let (($x244 (= input.dst.llvm-%m ?x262)))
 (let (($x134 (and $x244 $x131)))
 (let ((?x347 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x119 (= (_ bv0 32) ?x347)))
 (let ((?x30 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x418 (and $x286 $x66)))
 (let (($x343 (and $x418 $x119)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x366 (and $x211 $x343)))
 (let (($x139 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x169))))
 (let ((?x270 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x427 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x8 (ite $x427 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x8 (_ bv1 32))))
 (=> $x360 (= ?x270 ?x336))))))))))
 ))
 (let (($x27 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x391 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x8 (ite $x427 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x8 (_ bv1 32))))
 (= $x360 (bvuge ?x391 (_ bv1 32))))))))
 ))
 (let (($x96 (forall ((Lambda5 (_ BitVec 32)) )(let (($x283 (= false false)))
 (let (($x427 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x8 (ite $x427 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x8 (_ bv0 32))))
 (=> $x327 $x283))))))
 ))
 (let (($x67 (forall ((Lambda5 (_ BitVec 32)) )(let (($x427 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x8 (ite $x427 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (= ?x8 (_ bv0 32))))
 (= $x327 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x193 (and $x67 $x96)))
 (let (($x399 (and $x193 $x27)))
 (let (($x225 (and $x399 $x139)))
 (let (($x340 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x457 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x179 $x340)))))))
 (let (($x189 (and (and (and $x457 $x225) $x366) $x134)))
 (let (($x130 (= $x189 true)))
 (let (($x207 (= $x130 true)))
 (let (($x108 (= $x14 true)))
 (let (($x198 (= $x108 true)))
 (let (($x62 (and $x64 $x94)))
 (let (($x338 (= $x62 true)))
 (let (($x275 (= $x338 true)))
 (let (($x335 (and $x275 $x198)))
 (let (($x59 (and $x335 $x207)))
 (let (($x311 (and $x59 $x294)))
 (let (($x349 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x73 (ite $x349 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x73 (_ bv1 32))))
 (let (($x300 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x316 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x316 (_ bv1 32))))
 (let (($x408 (and $x97 $x272)))
 (let (($x354 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x308 (ite $x354 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x308 (_ bv1 32))))
 (let (($x400 (and $x205 $x408)))
 (let (($x284 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x210 (ite $x284 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (= ?x210 (_ bv0 32))))
 (let (($x363 (and $x102 $x400)))
 (let (($x123 (and $x363 $x311)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x178 (= ?x78 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x276 (bvuge ?x210 (_ bv1 32))))
 (let (($x309 (=> $x276 $x178)))
 (let (($x145 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x410 (= $x276 $x145)))
 (let (($x283 (= false false)))
 (let (($x86 (=> $x102 $x283)))
 (let (($x274 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x6 (= $x102 $x274)))
 (let (($x241 (and $x6 $x86)))
 (let (($x333 (and $x241 $x410)))
 (let (($x54 (and $x333 $x309)))
 (let (($x441 (and $x54 $x123)))
 (let ((?x17 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x387 (= ?x17 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x313 (=> $x205 $x387)))
 (let (($x256 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x87 (= $x205 $x256)))
 (let (($x233 (= ?x308 (_ bv0 32))))
 (let (($x203 (=> $x233 $x283)))
 (let (($x70 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x196 (= $x233 $x70)))
 (let (($x92 (and $x196 $x203)))
 (let (($x106 (and $x92 $x87)))
 (let (($x368 (and $x106 $x313)))
 (let (($x80 (and $x368 $x441)))
 (let (($x317 (= ?x172 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x258 (=> $x97 $x317)))
 (let (($x212 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x295 (= $x97 $x212)))
 (let (($x330 (= ?x316 (_ bv0 32))))
 (let (($x395 (=> $x330 $x283)))
 (let (($x58 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x351 (= $x330 $x58)))
 (let (($x184 (and $x351 $x395)))
 (let (($x77 (and $x184 $x295)))
 (let (($x263 (and $x77 $x258)))
 (let (($x321 (and $x263 $x80)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x378 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x364 (=> $x272 $x378)))
 (let (($x197 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x99 (= $x272 $x197)))
 (let (($x242 (= ?x73 (_ bv0 32))))
 (let (($x124 (=> $x242 $x283)))
 (let (($x176 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x26 (= $x242 $x176)))
 (let (($x51 (and $x26 $x124)))
 (let (($x249 (and $x51 $x99)))
 (let (($x224 (and $x249 $x364)))
 (let (($x337 (and $x224 $x321)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x323 (and $x113 $x337)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x440 (and $x114 $x323)))
 (let (($x147 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x24 (and $x147 $x440)))
 (let (($x25 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x280 (and $x25 $x24)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x153 (and $x56 $x280)))
 (let (($x235 (and $x283 $x153)))
 (let (($x247 (= ?x78 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x302 (and $x247 $x235)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x238 (and $x161 $x302)))
 (let (($x177 (and $x283 $x238)))
 (let (($x39 (= ?x17 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x292 (and $x39 $x177)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x304 (and $x303 $x292)))
 (let (($x348 (and $x283 $x304)))
 (let (($x372 (= ?x172 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x419 (and $x372 $x348)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x57 (and $x101 $x419)))
 (let (($x112 (and $x283 $x57)))
 (let (($x142 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x251 (and $x142 $x112)))
 (let (($x116 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x426 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x116)))))))
 (let (($x319 (bvugt ?x371 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x417)))
 (let (($x281 (=> (bvule ?x371 (bvsub (bvadd ?x371 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x201 $x319)))))))
 (let (($x157 (bvugt ?x226 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x293)))
 (let (($x127 (=> (bvule ?x226 (bvsub (bvadd ?x226 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x157)))))))
 (let (($x53 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x299 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x299)))
 (let (($x137 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x53)))))))
 (let (($x425 (and $x137 $x127)))
 (let (($x15 (and $x425 $x281)))
 (let (($x135 (and $x15 $x426)))
 (let (($x190 (and $x135 $x251)))
 (let (($x297 (=> $x190 $x266)))
 (not $x297)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 253 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x260 (bvmul (_ bv4294967295 32) ?x17)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x246 (bvadd ?x78 ?x260)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x413 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x271 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x319 (bvadd ?x271 (_ bv3 32))))
 (let ((?x146 (concat (select input.dst.llvm-mem ?x319) (concat ?x239 ?x413))))
 (let ((?x370 (bvmul (_ bv4294967295 32) ?x146)))
 (let ((?x287 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x345 (concat ?x287 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x384 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x116 (bvadd ?x404 (_ bv3 32))))
 (let ((?x111 (concat (select input.dst.llvm-mem ?x116) (concat ?x384 ?x345))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x266 (concat ?x230 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x22 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x157 (bvadd ?x22 (_ bv3 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem ?x157) (concat ?x223 ?x266))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x125)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x32)))
 (let ((?x329 (bvadd (bvadd (bvadd ?x71 ?x61) ?x111) ?x370)))
 (let (($x458 (= ?x329 ?x246)))
 (let (($x320 (= $x458 true)))
 (let (($x194 (= $x320 true)))
 (let ((?x302 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x251 (concat ?x112 (concat ?x348 (concat ?x177 ?x302)))))
 (let (($x342 (= ?x251 input.dst.llvm-%m)))
 (let (($x109 (= $x342 true)))
 (let (($x401 (= (bvand ?x271 (_ bv4294967292 32)) ?x271)))
 (let (($x62 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x81 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x64 (and true $x81)))
 (let (($x231 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x155 (and $x231 $x64)))
 (let (($x357 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x271 (bvsub ?x271 (_ bv8 32))) (bvult ?x271 (bvsub ?x271 (_ bv8 32))))))
 (let (($x60 (and (and (and true $x357) $x155) $x62)))
 (let (($x108 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x198 (and true $x108)))
 (let (($x383 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x335 (and $x383 $x198)))
 (let (($x405 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv12 32))) (bvult ?x22 (bvsub ?x22 (_ bv12 32))))))
 (let (($x43 (and (and (and true $x383) $x405) $x335)))
 (let (($x12 (and (and $x43 $x60) $x401)))
 (let (($x190 (= input.dst.llvm-%m ?x251)))
 (let (($x141 (and $x190 $x12)))
 (let ((?x440 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x24 (= (_ bv0 32) ?x440)))
 (let ((?x321 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x337 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x321)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (and $x80 $x337)))
 (let (($x280 (and $x323 $x24)))
 (let (($x441 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x441 $x280)))
 (let (($x294 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x296 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x244))))
 (let ((?x50 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x283 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x289 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x289 (_ bv1 32))))
 (=> $x167 (= ?x50 ?x207))))))))))
 ))
 (let (($x225 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x331 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x289 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x289 (_ bv1 32))))
 (= $x167 (bvuge ?x331 (_ bv1 32))))))))
 ))
 (let (($x377 (forall ((Lambda5 (_ BitVec 32)) )(let (($x172 (= false false)))
 (let (($x283 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x289 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x393 (= ?x289 (_ bv0 32))))
 (=> $x393 $x172))))))
 ))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x289 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x393 (= ?x289 (_ bv0 32))))
 (= $x393 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x120 (and $x138 $x377)))
 (let (($x365 (and $x120 $x225)))
 (let (($x311 (and $x365 $x294)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x391 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x427 $x8)))))))
 (let (($x191 (and (and (and $x391 $x311) $x153) $x141)))
 (let (($x76 (= $x191 true)))
 (let (($x19 (= $x76 true)))
 (let (($x82 (= $x43 true)))
 (let (($x179 (= $x82 true)))
 (let (($x381 (and $x60 $x401)))
 (let (($x279 (= $x381 true)))
 (let (($x222 (= $x279 true)))
 (let (($x340 (and $x222 $x179)))
 (let (($x409 (and $x340 $x19)))
 (let (($x23 (and $x409 $x109)))
 (let (($x26 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x51 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x51 (_ bv0 32))))
 (let (($x395 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x184 (ite $x395 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x184 (_ bv1 32))))
 (let (($x268 (and $x258 $x272)))
 (let (($x203 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x92 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x92 (_ bv1 32))))
 (let (($x200 (and $x313 $x268)))
 (let (($x86 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x241 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x241 (_ bv0 32))))
 (let (($x282 (and $x276 $x200)))
 (let (($x423 (and $x282 $x23)))
 (let ((?x121 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x91 (= ?x121 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x309 (bvuge ?x241 (_ bv1 32))))
 (let (($x164 (=> $x309 $x91)))
 (let (($x54 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x408 (= $x309 $x54)))
 (let (($x172 (= false false)))
 (let (($x93 (=> $x276 $x172)))
 (let (($x410 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x333 (= $x276 $x410)))
 (let (($x178 (and $x333 $x93)))
 (let (($x400 (and $x178 $x408)))
 (let (($x136 (and $x400 $x164)))
 (let (($x376 (and $x136 $x423)))
 (let (($x261 (= ?x78 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x274 (=> $x313 $x261)))
 (let (($x368 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x284 (= $x313 $x368)))
 (let (($x205 (= ?x92 (_ bv0 32))))
 (let (($x69 (=> $x205 $x172)))
 (let (($x87 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x106 (= $x205 $x87)))
 (let (($x387 (and $x106 $x69)))
 (let (($x210 (and $x387 $x284)))
 (let (($x6 (and $x210 $x274)))
 (let (($x454 (and $x6 $x376)))
 (let (($x234 (= ?x17 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x70 (=> $x258 $x234)))
 (let (($x263 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x354 (= $x258 $x263)))
 (let (($x97 (= ?x184 (_ bv0 32))))
 (let (($x173 (=> $x97 $x172)))
 (let (($x295 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x77 (= $x97 $x295)))
 (let (($x317 (and $x77 $x173)))
 (let (($x308 (and $x317 $x354)))
 (let (($x196 (and $x308 $x70)))
 (let (($x21 (and $x196 $x454)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x84 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x364 (bvuge ?x51 (_ bv1 32))))
 (let (($x58 (=> $x364 $x84)))
 (let (($x224 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x300 (= $x364 $x224)))
 (let (($x38 (=> $x272 $x172)))
 (let (($x99 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x249 (= $x272 $x99)))
 (let (($x378 (and $x249 $x38)))
 (let (($x316 (and $x378 $x300)))
 (let (($x351 (and $x316 $x58)))
 (let (($x442 (and $x351 $x21)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x301 (and $x176 $x442)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x28 (and $x242 $x301)))
 (let (($x349 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x188 (and $x349 $x28)))
 (let (($x439 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x236 (and $x439 $x188)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x346 (and $x443 $x236)))
 (let (($x350 (and $x172 $x346)))
 (let (($x213 (= ?x121 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x397 (and $x213 $x350)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x265 (and $x56 $x397)))
 (let (($x290 (and $x172 $x265)))
 (let (($x247 (= ?x78 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x431 (and $x247 $x290)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x314 (and $x161 $x431)))
 (let (($x171 (and $x172 $x314)))
 (let (($x39 (= ?x17 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x356 (and $x39 $x171)))
 (let (($x373 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x379 (and $x373 $x356)))
 (let (($x243 (and $x172 $x379)))
 (let (($x358 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x433 (and $x358 $x243)))
 (let (($x9 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x219 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x9)))))))
 (let (($x55 (bvugt ?x271 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x319)))
 (let (($x158 (=> (bvule ?x271 (bvsub (bvadd ?x271 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x215 $x55)))))))
 (let (($x7 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x371 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x7)))))))
 (let (($x361 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x324 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x324)))
 (let (($x209 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x291 $x361)))))))
 (let (($x369 (and $x209 $x371)))
 (let (($x152 (and $x369 $x158)))
 (let (($x117 (and $x152 $x219)))
 (let (($x90 (and $x117 $x433)))
 (let (($x385 (=> $x90 $x194)))
 (not $x385)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x260 (bvmul (_ bv4294967295 32) ?x17)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x246 (bvadd ?x78 ?x260)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x413 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x271 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x319 (bvadd ?x271 (_ bv3 32))))
 (let ((?x146 (concat (select input.dst.llvm-mem ?x319) (concat ?x239 ?x413))))
 (let ((?x370 (bvmul (_ bv4294967295 32) ?x146)))
 (let ((?x287 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x345 (concat ?x287 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x384 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x116 (bvadd ?x404 (_ bv3 32))))
 (let ((?x111 (concat (select input.dst.llvm-mem ?x116) (concat ?x384 ?x345))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x266 (concat ?x230 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x22 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x157 (bvadd ?x22 (_ bv3 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem ?x157) (concat ?x223 ?x266))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x125)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x32)))
 (let ((?x329 (bvadd (bvadd (bvadd ?x71 ?x61) ?x111) ?x370)))
 (let (($x458 (= ?x329 ?x246)))
 (let (($x320 (= $x458 true)))
 (let (($x194 (= $x320 true)))
 (let ((?x302 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x251 (concat ?x112 (concat ?x348 (concat ?x177 ?x302)))))
 (let (($x342 (= ?x251 input.dst.llvm-%m)))
 (let (($x109 (= $x342 true)))
 (let (($x401 (= (bvand ?x271 (_ bv4294967292 32)) ?x271)))
 (let (($x62 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x81 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x64 (and true $x81)))
 (let (($x231 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x155 (and $x231 $x64)))
 (let (($x357 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x271 (bvsub ?x271 (_ bv8 32))) (bvult ?x271 (bvsub ?x271 (_ bv8 32))))))
 (let (($x60 (and (and (and true $x357) $x155) $x62)))
 (let (($x108 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x198 (and true $x108)))
 (let (($x383 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x335 (and $x383 $x198)))
 (let (($x405 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv12 32))) (bvult ?x22 (bvsub ?x22 (_ bv12 32))))))
 (let (($x43 (and (and (and true $x383) $x405) $x335)))
 (let (($x12 (and (and $x43 $x60) $x401)))
 (let (($x190 (= input.dst.llvm-%m ?x251)))
 (let (($x141 (and $x190 $x12)))
 (let ((?x440 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x24 (= (_ bv0 32) ?x440)))
 (let ((?x321 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x337 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x321)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (and $x80 $x337)))
 (let (($x280 (and $x323 $x24)))
 (let (($x441 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x441 $x280)))
 (let (($x294 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x296 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x244))))
 (let ((?x50 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x283 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x289 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x289 (_ bv1 32))))
 (=> $x167 (= ?x50 ?x207))))))))))
 ))
 (let (($x225 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x331 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x289 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x289 (_ bv1 32))))
 (= $x167 (bvuge ?x331 (_ bv1 32))))))))
 ))
 (let (($x377 (forall ((Lambda5 (_ BitVec 32)) )(let (($x172 (= false false)))
 (let (($x283 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x289 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x393 (= ?x289 (_ bv0 32))))
 (=> $x393 $x172))))))
 ))
 (let (($x138 (forall ((Lambda5 (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x289 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x393 (= ?x289 (_ bv0 32))))
 (= $x393 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x120 (and $x138 $x377)))
 (let (($x365 (and $x120 $x225)))
 (let (($x311 (and $x365 $x294)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x391 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x427 $x8)))))))
 (let (($x191 (and (and (and $x391 $x311) $x153) $x141)))
 (let (($x76 (= $x191 true)))
 (let (($x19 (= $x76 true)))
 (let (($x82 (= $x43 true)))
 (let (($x179 (= $x82 true)))
 (let (($x381 (and $x60 $x401)))
 (let (($x279 (= $x381 true)))
 (let (($x222 (= $x279 true)))
 (let (($x340 (and $x222 $x179)))
 (let (($x409 (and $x340 $x19)))
 (let (($x23 (and $x409 $x109)))
 (let (($x26 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x51 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x51 (_ bv0 32))))
 (let (($x395 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x184 (ite $x395 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (bvuge ?x184 (_ bv1 32))))
 (let (($x268 (and $x258 $x272)))
 (let (($x203 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x92 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x92 (_ bv1 32))))
 (let (($x200 (and $x313 $x268)))
 (let (($x86 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x241 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x276 (= ?x241 (_ bv0 32))))
 (let (($x282 (and $x276 $x200)))
 (let (($x423 (and $x282 $x23)))
 (let ((?x121 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x91 (= ?x121 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x309 (bvuge ?x241 (_ bv1 32))))
 (let (($x164 (=> $x309 $x91)))
 (let (($x54 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x408 (= $x309 $x54)))
 (let (($x172 (= false false)))
 (let (($x93 (=> $x276 $x172)))
 (let (($x410 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x333 (= $x276 $x410)))
 (let (($x178 (and $x333 $x93)))
 (let (($x400 (and $x178 $x408)))
 (let (($x136 (and $x400 $x164)))
 (let (($x376 (and $x136 $x423)))
 (let (($x261 (= ?x78 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x274 (=> $x313 $x261)))
 (let (($x368 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x284 (= $x313 $x368)))
 (let (($x205 (= ?x92 (_ bv0 32))))
 (let (($x69 (=> $x205 $x172)))
 (let (($x87 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x106 (= $x205 $x87)))
 (let (($x387 (and $x106 $x69)))
 (let (($x210 (and $x387 $x284)))
 (let (($x6 (and $x210 $x274)))
 (let (($x454 (and $x6 $x376)))
 (let (($x234 (= ?x17 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x70 (=> $x258 $x234)))
 (let (($x263 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x354 (= $x258 $x263)))
 (let (($x97 (= ?x184 (_ bv0 32))))
 (let (($x173 (=> $x97 $x172)))
 (let (($x295 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x77 (= $x97 $x295)))
 (let (($x317 (and $x77 $x173)))
 (let (($x308 (and $x317 $x354)))
 (let (($x196 (and $x308 $x70)))
 (let (($x21 (and $x196 $x454)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x84 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x364 (bvuge ?x51 (_ bv1 32))))
 (let (($x58 (=> $x364 $x84)))
 (let (($x224 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x300 (= $x364 $x224)))
 (let (($x38 (=> $x272 $x172)))
 (let (($x99 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x249 (= $x272 $x99)))
 (let (($x378 (and $x249 $x38)))
 (let (($x316 (and $x378 $x300)))
 (let (($x351 (and $x316 $x58)))
 (let (($x442 (and $x351 $x21)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x301 (and $x176 $x442)))
 (let (($x242 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x28 (and $x242 $x301)))
 (let (($x349 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x188 (and $x349 $x28)))
 (let (($x439 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x236 (and $x439 $x188)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x346 (and $x443 $x236)))
 (let (($x350 (and $x172 $x346)))
 (let (($x213 (= ?x121 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x397 (and $x213 $x350)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x265 (and $x56 $x397)))
 (let (($x290 (and $x172 $x265)))
 (let (($x247 (= ?x78 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x431 (and $x247 $x290)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x314 (and $x161 $x431)))
 (let (($x171 (and $x172 $x314)))
 (let (($x39 (= ?x17 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x356 (and $x39 $x171)))
 (let (($x373 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x379 (and $x373 $x356)))
 (let (($x243 (and $x172 $x379)))
 (let (($x358 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x433 (and $x358 $x243)))
 (let (($x9 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x219 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x122 $x9)))))))
 (let (($x55 (bvugt ?x271 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x319)))
 (let (($x158 (=> (bvule ?x271 (bvsub (bvadd ?x271 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x215 $x55)))))))
 (let (($x7 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x371 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x7)))))))
 (let (($x361 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x324 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x291 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x324)))
 (let (($x209 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x291 $x361)))))))
 (let (($x369 (and $x209 $x371)))
 (let (($x152 (and $x369 $x158)))
 (let (($x117 (and $x152 $x219)))
 (let (($x90 (and $x117 $x433)))
 (let (($x385 (=> $x90 $x194)))
 (not $x385)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 253 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x121 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x347 (bvadd ?x121 ?x424)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x180 (concat ?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x417 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x55 (bvadd ?x417 (_ bv3 32))))
 (let ((?x31 (concat (select input.dst.llvm-mem ?x55) (concat ?x72 ?x180))))
 (let ((?x183 (bvmul (_ bv4294967295 32) ?x31)))
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x459 (concat ?x229 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x9 (bvadd ?x133 (_ bv3 32))))
 (let ((?x360 (concat (select input.dst.llvm-mem ?x9) (concat ?x67 ?x459))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x385 (concat ?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x455 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x41 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x7 (bvadd ?x41 (_ bv3 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem ?x7) (concat ?x455 ?x385))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x269)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x329)))
 (let ((?x418 (bvadd (bvadd (bvadd ?x246 ?x124) ?x360) ?x183)))
 (let (($x66 (= ?x418 ?x347)))
 (let (($x119 (= $x66 true)))
 (let (($x420 (= $x119 true)))
 (let ((?x397 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x433 (concat ?x243 (concat ?x171 (concat ?x290 ?x397)))))
 (let (($x374 (= ?x433 input.dst.llvm-%m)))
 (let (($x297 (= $x374 true)))
 (let (($x415 (= (bvand ?x417 (_ bv4294967292 32)) ?x417)))
 (let (($x381 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x60 (and true $x62)))
 (let (($x81 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x398 (and $x81 $x60)))
 (let (($x13 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x417 (bvsub ?x417 (_ bv8 32))) (bvult ?x417 (bvsub ?x417 (_ bv8 32))))))
 (let (($x406 (and (and (and true $x13) $x398) $x381)))
 (let (($x82 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x179 (and true $x82)))
 (let (($x405 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x340 (and $x405 $x179)))
 (let (($x14 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv12 32))) (bvult ?x41 (bvsub ?x41 (_ bv12 32))))))
 (let (($x277 (and (and (and true $x405) $x14) $x340)))
 (let (($x110 (and (and $x277 $x406) $x415)))
 (let (($x90 (= input.dst.llvm-%m ?x433)))
 (let (($x456 (and $x90 $x110)))
 (let ((?x28 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x188 (= (_ bv0 32) ?x28)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x442 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let (($x454 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x454 $x442)))
 (let (($x236 (and $x301 $x188)))
 (let (($x376 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x376 $x236)))
 (let (($x109 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x302 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem ?x302))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv2 32))) ?x190))))
 (let ((?x151 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x172 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x296 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x296 (_ bv1 32))))
 (=> $x328 (= ?x151 ?x19))))))))))
 ))
 (let (($x311 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x296 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x296 (_ bv1 32))))
 (= $x328 (bvuge ?x211 (_ bv1 32))))))))
 ))
 (let (($x262 (forall ((Lambda5 (_ BitVec 32)) )(let (($x17 (= false false)))
 (let (($x172 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x296 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x296 (_ bv0 32))))
 (=> $x189 $x17))))))
 ))
 (let (($x33 (forall ((Lambda5 (_ BitVec 32)) )(let (($x172 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x296 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x296 (_ bv0 32))))
 (= $x189 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x46 (and $x33 $x262)))
 (let (($x216 (and $x46 $x311)))
 (let (($x23 (and $x216 $x109)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x331 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x283 $x289)))))))
 (let (($x168 (and (and (and $x331 $x23) $x346) $x456)))
 (let (($x125 (= $x168 true)))
 (let (($x32 (= $x125 true)))
 (let (($x104 (= $x277 true)))
 (let (($x427 (= $x104 true)))
 (let (($x47 (and $x406 $x415)))
 (let (($x390 (= $x47 true)))
 (let (($x228 (= $x390 true)))
 (let (($x8 (and $x228 $x427)))
 (let (($x71 (and $x8 $x32)))
 (let (($x223 (and $x71 $x297)))
 (let (($x249 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x378 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x378 (_ bv1 32))))
 (let (($x173 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x317 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x317 (_ bv0 32))))
 (let (($x165 (and $x258 $x58)))
 (let (($x69 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x387 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x387 (_ bv1 32))))
 (let (($x357 (and $x274 $x165)))
 (let (($x93 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x178 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x178 (_ bv0 32))))
 (let (($x338 (and $x309 $x357)))
 (let (($x218 (and $x338 $x223)))
 (let ((?x114 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x182 (= ?x114 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x164 (bvuge ?x178 (_ bv1 32))))
 (let (($x259 (=> $x164 $x182)))
 (let (($x136 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x268 (= $x164 $x136)))
 (let (($x17 (= false false)))
 (let (($x363 (=> $x309 $x17)))
 (let (($x408 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x400 (= $x309 $x408)))
 (let (($x91 (and $x400 $x363)))
 (let (($x200 (and $x91 $x268)))
 (let (($x74 (and $x200 $x259)))
 (let (($x230 (and $x74 $x218)))
 (let (($x145 (= ?x121 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x410 (=> $x274 $x145)))
 (let (($x6 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x86 (= $x274 $x6)))
 (let (($x313 (= ?x387 (_ bv0 32))))
 (let (($x102 (=> $x313 $x17)))
 (let (($x284 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x210 (= $x313 $x284)))
 (let (($x261 (and $x210 $x102)))
 (let (($x241 (and $x261 $x86)))
 (let (($x333 (and $x241 $x410)))
 (let (($x175 (and $x333 $x230)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x256 (= ?x78 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x70 (bvuge ?x317 (_ bv1 32))))
 (let (($x87 (=> $x70 $x256)))
 (let (($x196 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x203 (= $x70 $x196)))
 (let (($x233 (=> $x258 $x17)))
 (let (($x354 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x308 (= $x258 $x354)))
 (let (($x234 (and $x308 $x233)))
 (let (($x92 (and $x234 $x203)))
 (let (($x106 (and $x92 $x87)))
 (let (($x266 (and $x106 $x175)))
 (let (($x212 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x295 (=> $x58 $x212)))
 (let (($x351 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x395 (= $x58 $x351)))
 (let (($x364 (= ?x378 (_ bv0 32))))
 (let (($x330 (=> $x364 $x17)))
 (let (($x300 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x316 (= $x364 $x300)))
 (let (($x84 (and $x316 $x330)))
 (let (($x184 (and $x84 $x395)))
 (let (($x77 (and $x184 $x295)))
 (let (($x367 (and $x77 $x266)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x61 (and $x99 $x367)))
 (let (($x272 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x144 (and $x272 $x61)))
 (let (($x26 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x170 (and $x26 $x144)))
 (let (($x217 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x334 (and $x217 $x170)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x384 (and $x73 $x334)))
 (let (($x382 (and $x17 $x384)))
 (let (($x113 (= ?x114 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x287 (and $x113 $x382)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x355 (and $x443 $x287)))
 (let (($x345 (and $x17 $x355)))
 (let (($x213 (= ?x121 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x162 (and $x213 $x345)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x111 (and $x56 $x162)))
 (let (($x388 (and $x17 $x111)))
 (let (($x247 (= ?x78 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x257 (and $x247 $x388)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x352 (and $x305 $x257)))
 (let (($x89 (and $x17 $x352)))
 (let (($x303 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x239 (and $x303 $x89)))
 (let (($x40 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x101 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x40)))))))
 (let (($x95 (bvugt ?x417 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x187 (=> (bvule ?x417 (bvsub (bvadd ?x417 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x192 $x95)))))))
 (let (($x394 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x271 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x394)))))))
 (let (($x361 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x293 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x361)))))))
 (let (($x208 (and $x293 $x271)))
 (let (($x201 (and $x208 $x187)))
 (let (($x11 (and $x201 $x101)))
 (let (($x273 (and $x11 $x239)))
 (let (($x253 (=> $x273 $x420)))
 (not $x253))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x121 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x347 (bvadd ?x121 ?x424)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x180 (concat ?x169 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x417 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x55 (bvadd ?x417 (_ bv3 32))))
 (let ((?x31 (concat (select input.dst.llvm-mem ?x55) (concat ?x72 ?x180))))
 (let ((?x183 (bvmul (_ bv4294967295 32) ?x31)))
 (let ((?x229 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x459 (concat ?x229 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x9 (bvadd ?x133 (_ bv3 32))))
 (let ((?x360 (concat (select input.dst.llvm-mem ?x9) (concat ?x67 ?x459))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x385 (concat ?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x455 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x41 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x7 (bvadd ?x41 (_ bv3 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem ?x7) (concat ?x455 ?x385))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x269)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x329)))
 (let ((?x418 (bvadd (bvadd (bvadd ?x246 ?x124) ?x360) ?x183)))
 (let (($x66 (= ?x418 ?x347)))
 (let (($x119 (= $x66 true)))
 (let (($x420 (= $x119 true)))
 (let ((?x397 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x433 (concat ?x243 (concat ?x171 (concat ?x290 ?x397)))))
 (let (($x374 (= ?x433 input.dst.llvm-%m)))
 (let (($x297 (= $x374 true)))
 (let (($x415 (= (bvand ?x417 (_ bv4294967292 32)) ?x417)))
 (let (($x381 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x60 (and true $x62)))
 (let (($x81 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x398 (and $x81 $x60)))
 (let (($x13 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x417 (bvsub ?x417 (_ bv8 32))) (bvult ?x417 (bvsub ?x417 (_ bv8 32))))))
 (let (($x406 (and (and (and true $x13) $x398) $x381)))
 (let (($x82 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x179 (and true $x82)))
 (let (($x405 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x340 (and $x405 $x179)))
 (let (($x14 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv12 32))) (bvult ?x41 (bvsub ?x41 (_ bv12 32))))))
 (let (($x277 (and (and (and true $x405) $x14) $x340)))
 (let (($x110 (and (and $x277 $x406) $x415)))
 (let (($x90 (= input.dst.llvm-%m ?x433)))
 (let (($x456 (and $x90 $x110)))
 (let ((?x28 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x188 (= (_ bv0 32) ?x28)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x442 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let (($x454 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x454 $x442)))
 (let (($x236 (and $x301 $x188)))
 (let (($x376 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x376 $x236)))
 (let (($x109 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x302 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem ?x302))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv2 32))) ?x190))))
 (let ((?x151 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x172 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x296 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x296 (_ bv1 32))))
 (=> $x328 (= ?x151 ?x19))))))))))
 ))
 (let (($x311 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x211 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x296 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x296 (_ bv1 32))))
 (= $x328 (bvuge ?x211 (_ bv1 32))))))))
 ))
 (let (($x262 (forall ((Lambda5 (_ BitVec 32)) )(let (($x17 (= false false)))
 (let (($x172 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x296 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x296 (_ bv0 32))))
 (=> $x189 $x17))))))
 ))
 (let (($x33 (forall ((Lambda5 (_ BitVec 32)) )(let (($x172 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x296 (ite $x172 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x296 (_ bv0 32))))
 (= $x189 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x46 (and $x33 $x262)))
 (let (($x216 (and $x46 $x311)))
 (let (($x23 (and $x216 $x109)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x331 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x283 $x289)))))))
 (let (($x168 (and (and (and $x331 $x23) $x346) $x456)))
 (let (($x125 (= $x168 true)))
 (let (($x32 (= $x125 true)))
 (let (($x104 (= $x277 true)))
 (let (($x427 (= $x104 true)))
 (let (($x47 (and $x406 $x415)))
 (let (($x390 (= $x47 true)))
 (let (($x228 (= $x390 true)))
 (let (($x8 (and $x228 $x427)))
 (let (($x71 (and $x8 $x32)))
 (let (($x223 (and $x71 $x297)))
 (let (($x249 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x378 (ite $x249 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x378 (_ bv1 32))))
 (let (($x173 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x317 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x317 (_ bv0 32))))
 (let (($x165 (and $x258 $x58)))
 (let (($x69 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x387 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x274 (bvuge ?x387 (_ bv1 32))))
 (let (($x357 (and $x274 $x165)))
 (let (($x93 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x178 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x178 (_ bv0 32))))
 (let (($x338 (and $x309 $x357)))
 (let (($x218 (and $x338 $x223)))
 (let ((?x114 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x182 (= ?x114 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x164 (bvuge ?x178 (_ bv1 32))))
 (let (($x259 (=> $x164 $x182)))
 (let (($x136 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x268 (= $x164 $x136)))
 (let (($x17 (= false false)))
 (let (($x363 (=> $x309 $x17)))
 (let (($x408 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x400 (= $x309 $x408)))
 (let (($x91 (and $x400 $x363)))
 (let (($x200 (and $x91 $x268)))
 (let (($x74 (and $x200 $x259)))
 (let (($x230 (and $x74 $x218)))
 (let (($x145 (= ?x121 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x410 (=> $x274 $x145)))
 (let (($x6 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x86 (= $x274 $x6)))
 (let (($x313 (= ?x387 (_ bv0 32))))
 (let (($x102 (=> $x313 $x17)))
 (let (($x284 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x210 (= $x313 $x284)))
 (let (($x261 (and $x210 $x102)))
 (let (($x241 (and $x261 $x86)))
 (let (($x333 (and $x241 $x410)))
 (let (($x175 (and $x333 $x230)))
 (let ((?x78 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x256 (= ?x78 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x70 (bvuge ?x317 (_ bv1 32))))
 (let (($x87 (=> $x70 $x256)))
 (let (($x196 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x203 (= $x70 $x196)))
 (let (($x233 (=> $x258 $x17)))
 (let (($x354 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x308 (= $x258 $x354)))
 (let (($x234 (and $x308 $x233)))
 (let (($x92 (and $x234 $x203)))
 (let (($x106 (and $x92 $x87)))
 (let (($x266 (and $x106 $x175)))
 (let (($x212 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x295 (=> $x58 $x212)))
 (let (($x351 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x395 (= $x58 $x351)))
 (let (($x364 (= ?x378 (_ bv0 32))))
 (let (($x330 (=> $x364 $x17)))
 (let (($x300 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x316 (= $x364 $x300)))
 (let (($x84 (and $x316 $x330)))
 (let (($x184 (and $x84 $x395)))
 (let (($x77 (and $x184 $x295)))
 (let (($x367 (and $x77 $x266)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x61 (and $x99 $x367)))
 (let (($x272 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x144 (and $x272 $x61)))
 (let (($x26 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x170 (and $x26 $x144)))
 (let (($x217 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x334 (and $x217 $x170)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x384 (and $x73 $x334)))
 (let (($x382 (and $x17 $x384)))
 (let (($x113 (= ?x114 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x287 (and $x113 $x382)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x355 (and $x443 $x287)))
 (let (($x345 (and $x17 $x355)))
 (let (($x213 (= ?x121 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x162 (and $x213 $x345)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x111 (and $x56 $x162)))
 (let (($x388 (and $x17 $x111)))
 (let (($x247 (= ?x78 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x257 (and $x247 $x388)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x352 (and $x305 $x257)))
 (let (($x89 (and $x17 $x352)))
 (let (($x303 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x239 (and $x303 $x89)))
 (let (($x40 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x101 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x107 $x40)))))))
 (let (($x95 (bvugt ?x417 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x187 (=> (bvule ?x417 (bvsub (bvadd ?x417 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x192 $x95)))))))
 (let (($x394 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x271 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x394)))))))
 (let (($x361 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x293 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x53 $x361)))))))
 (let (($x208 (and $x293 $x271)))
 (let (($x201 (and $x208 $x187)))
 (let (($x11 (and $x201 $x101)))
 (let (($x273 (and $x11 $x239)))
 (let (($x253 (=> $x273 $x420)))
 (not $x253))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 252 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x207 (concat ?x134 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x319 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x95 (bvadd ?x319 (_ bv3 32))))
 (let ((?x112 (concat (select input.dst.llvm-mem ?x95) (concat ?x80 ?x207))))
 (let ((?x280 (bvmul (_ bv4294967295 32) ?x112)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x36 (concat ?x42 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x40 (bvadd ?x404 (_ bv3 32))))
 (let ((?x252 (concat (select input.dst.llvm-mem ?x40) (concat ?x377 ?x36))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x253 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x285 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x394 (bvadd ?x285 (_ bv3 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem ?x394) (concat ?x350 ?x10))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x286)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x418)))
 (let ((?x440 (bvadd (bvadd (bvadd ?x66 ?x264) ?x252) ?x280)))
 (let ((?x114 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x337 (= ?x114 ?x440)))
 (let (($x24 (= $x337 true)))
 (let (($x202 (= $x24 true)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x345 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x388 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x239 (concat ?x89 (concat ?x388 (concat ?x345 ?x287)))))
 (let (($x307 (= ?x239 input.dst.llvm-%m)))
 (let (($x132 (= $x307 true)))
 (let (($x65 (= (bvand ?x319 (_ bv4294967292 32)) ?x319)))
 (let (($x47 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x381 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x406 (and true $x381)))
 (let (($x62 (= (bvand ?x285 (_ bv4294967292 32)) ?x285)))
 (let (($x383 (and $x62 $x406)))
 (let (($x64 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x319 (bvsub ?x319 (_ bv8 32))) (bvult ?x319 (bvsub ?x319 (_ bv8 32))))))
 (let (($x341 (and (and (and true $x64) $x383) $x47)))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x427 (and true $x104)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x8 (and $x14 $x427)))
 (let (($x43 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x285 (bvsub ?x285 (_ bv12 32))) (bvult ?x285 (bvsub ?x285 (_ bv12 32))))))
 (let (($x270 (and (and (and true $x14) $x43) $x8)))
 (let (($x146 (and (and $x270 $x341) $x65)))
 (let (($x273 (= input.dst.llvm-%m ?x239)))
 (let (($x370 (and $x273 $x146)))
 (let ((?x144 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x170 (= (_ bv0 32) ?x144)))
 (let ((?x266 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x367 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x175 $x367)))
 (let (($x334 (and $x61 $x170)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x230 $x334)))
 (let (($x297 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x397 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem ?x397))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv2 32))) ?x90))))
 (let ((?x237 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x17 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x302 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x302 (_ bv1 32))))
 (=> $x342 (= ?x237 ?x32))))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x441 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x302 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x302 (_ bv1 32))))
 (= $x342 (bvuge ?x441 (_ bv1 32))))))))
 ))
 (let (($x251 (forall ((Lambda5 (_ BitVec 32)) )(let (($x78 (= false false)))
 (let (($x17 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x302 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x302 (_ bv0 32))))
 (=> $x191 $x78))))))
 ))
 (let (($x103 (forall ((Lambda5 (_ BitVec 32)) )(let (($x17 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x302 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x302 (_ bv0 32))))
 (= $x191 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x292 (and $x103 $x251)))
 (let (($x453 (and $x292 $x23)))
 (let (($x223 (and $x453 $x297)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x296)))))))
 (let (($x100 (and (and (and $x211 $x223) $x384) $x370)))
 (let (($x269 (= $x100 true)))
 (let (($x329 (= $x269 true)))
 (let (($x142 (= $x270 true)))
 (let (($x283 (= $x142 true)))
 (let (($x375 (and $x341 $x65)))
 (let (($x166 (= $x375 true)))
 (let (($x34 (= $x166 true)))
 (let (($x289 (and $x34 $x283)))
 (let (($x246 (and $x289 $x329)))
 (let (($x455 (and $x246 $x132)))
 (let (($x316 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x84 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x84 (_ bv0 32))))
 (let (($x233 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x234 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x234 (_ bv0 32))))
 (let (($x437 (and $x70 $x58)))
 (let (($x102 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x261 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x261 (_ bv1 32))))
 (let (($x13 (and $x410 $x437)))
 (let (($x363 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x91 (ite $x363 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x91 (_ bv0 32))))
 (let (($x279 (and $x164 $x13)))
 (let (($x320 (and $x279 $x455)))
 (let ((?x242 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x402 (= ?x242 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x259 (bvuge ?x91 (_ bv1 32))))
 (let (($x204 (=> $x259 $x402)))
 (let (($x74 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x165 (= $x259 $x74)))
 (let (($x78 (= false false)))
 (let (($x282 (=> $x164 $x78)))
 (let (($x268 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x200 (= $x164 $x268)))
 (let (($x182 (and $x200 $x282)))
 (let (($x357 (and $x182 $x165)))
 (let (($x231 (and $x357 $x204)))
 (let (($x194 (and $x231 $x320)))
 (let (($x54 (= ?x114 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x408 (=> $x410 $x54)))
 (let (($x333 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x93 (= $x410 $x333)))
 (let (($x274 (= ?x261 (_ bv0 32))))
 (let (($x276 (=> $x274 $x78)))
 (let (($x86 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x241 (= $x274 $x86)))
 (let (($x145 (and $x241 $x276)))
 (let (($x178 (and $x145 $x93)))
 (let (($x400 (and $x178 $x408)))
 (let (($x458 (and $x400 $x194)))
 (let ((?x121 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x368 (= ?x121 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x87 (bvuge ?x234 (_ bv1 32))))
 (let (($x284 (=> $x87 $x368)))
 (let (($x106 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x69 (= $x87 $x106)))
 (let (($x205 (=> $x70 $x78)))
 (let (($x203 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x92 (= $x70 $x203)))
 (let (($x256 (and $x92 $x205)))
 (let (($x387 (and $x256 $x69)))
 (let (($x210 (and $x387 $x284)))
 (let (($x385 (and $x210 $x458)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x263 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x295 (bvuge ?x84 (_ bv1 32))))
 (let (($x354 (=> $x295 $x263)))
 (let (($x77 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x173 (= $x295 $x77)))
 (let (($x97 (=> $x58 $x78)))
 (let (($x395 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x184 (= $x58 $x395)))
 (let (($x212 (and $x184 $x97)))
 (let (($x317 (and $x212 $x173)))
 (let (($x308 (and $x317 $x354)))
 (let (($x235 (and $x308 $x385)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x124 (and $x300 $x235)))
 (let (($x364 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x343 (and $x364 $x124)))
 (let (($x249 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x193 (and $x249 $x343)))
 (let (($x197 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x332 (and $x197 $x193)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x67 (and $x51 $x332)))
 (let (($x85 (and $x78 $x67)))
 (let (($x176 (= ?x242 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x229 (and $x176 $x85)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x227 (and $x73 $x229)))
 (let (($x459 (and $x78 $x227)))
 (let (($x113 (= ?x114 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x96 (and $x113 $x459)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x360 (and $x443 $x96)))
 (let (($x366 (and $x78 $x360)))
 (let (($x213 (= ?x121 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x353 (and $x213 $x366)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x30 (and $x143 $x353)))
 (let (($x336 (and $x78 $x30)))
 (let (($x161 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x72 (and $x161 $x336)))
 (let (($x135 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x426 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x373 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x426 $x135)))))))
 (let (($x15 (bvugt ?x319 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x116 (=> (bvule ?x319 (bvsub (bvadd ?x319 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x15)))))))
 (let (($x425 (bvugt ?x285 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x394)))
 (let (($x417 (=> (bvule ?x285 (bvsub (bvadd ?x285 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x425)))))))
 (let (($x18 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x157 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x18)))))))
 (let (($x220 (and $x157 $x417)))
 (let (($x215 (and $x220 $x116)))
 (let (($x122 (and $x215 $x373)))
 (let (($x310 (and $x122 $x72)))
 (let (($x304 (=> $x310 $x202)))
 (not $x304)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x134 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x207 (concat ?x134 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x319 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x95 (bvadd ?x319 (_ bv3 32))))
 (let ((?x112 (concat (select input.dst.llvm-mem ?x95) (concat ?x80 ?x207))))
 (let ((?x280 (bvmul (_ bv4294967295 32) ?x112)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x36 (concat ?x42 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x40 (bvadd ?x404 (_ bv3 32))))
 (let ((?x252 (concat (select input.dst.llvm-mem ?x40) (concat ?x377 ?x36))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x10 (concat ?x253 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x285 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x394 (bvadd ?x285 (_ bv3 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem ?x394) (concat ?x350 ?x10))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x286)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x418)))
 (let ((?x440 (bvadd (bvadd (bvadd ?x66 ?x264) ?x252) ?x280)))
 (let ((?x114 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x337 (= ?x114 ?x440)))
 (let (($x24 (= $x337 true)))
 (let (($x202 (= $x24 true)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x345 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x388 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x239 (concat ?x89 (concat ?x388 (concat ?x345 ?x287)))))
 (let (($x307 (= ?x239 input.dst.llvm-%m)))
 (let (($x132 (= $x307 true)))
 (let (($x65 (= (bvand ?x319 (_ bv4294967292 32)) ?x319)))
 (let (($x47 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x381 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x406 (and true $x381)))
 (let (($x62 (= (bvand ?x285 (_ bv4294967292 32)) ?x285)))
 (let (($x383 (and $x62 $x406)))
 (let (($x64 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x319 (bvsub ?x319 (_ bv8 32))) (bvult ?x319 (bvsub ?x319 (_ bv8 32))))))
 (let (($x341 (and (and (and true $x64) $x383) $x47)))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x427 (and true $x104)))
 (let (($x14 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x8 (and $x14 $x427)))
 (let (($x43 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x285 (bvsub ?x285 (_ bv12 32))) (bvult ?x285 (bvsub ?x285 (_ bv12 32))))))
 (let (($x270 (and (and (and true $x14) $x43) $x8)))
 (let (($x146 (and (and $x270 $x341) $x65)))
 (let (($x273 (= input.dst.llvm-%m ?x239)))
 (let (($x370 (and $x273 $x146)))
 (let ((?x144 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x170 (= (_ bv0 32) ?x144)))
 (let ((?x266 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x367 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x175 $x367)))
 (let (($x334 (and $x61 $x170)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x230 $x334)))
 (let (($x297 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x397 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem ?x397))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv2 32))) ?x90))))
 (let ((?x237 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x17 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x302 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x302 (_ bv1 32))))
 (=> $x342 (= ?x237 ?x32))))))))))
 ))
 (let (($x23 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x441 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x302 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x302 (_ bv1 32))))
 (= $x342 (bvuge ?x441 (_ bv1 32))))))))
 ))
 (let (($x251 (forall ((Lambda5 (_ BitVec 32)) )(let (($x78 (= false false)))
 (let (($x17 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x302 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x302 (_ bv0 32))))
 (=> $x191 $x78))))))
 ))
 (let (($x103 (forall ((Lambda5 (_ BitVec 32)) )(let (($x17 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x302 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x302 (_ bv0 32))))
 (= $x191 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x292 (and $x103 $x251)))
 (let (($x453 (and $x292 $x23)))
 (let (($x223 (and $x453 $x297)))
 (let (($x296 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x296)))))))
 (let (($x100 (and (and (and $x211 $x223) $x384) $x370)))
 (let (($x269 (= $x100 true)))
 (let (($x329 (= $x269 true)))
 (let (($x142 (= $x270 true)))
 (let (($x283 (= $x142 true)))
 (let (($x375 (and $x341 $x65)))
 (let (($x166 (= $x375 true)))
 (let (($x34 (= $x166 true)))
 (let (($x289 (and $x34 $x283)))
 (let (($x246 (and $x289 $x329)))
 (let (($x455 (and $x246 $x132)))
 (let (($x316 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x84 (ite $x316 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x84 (_ bv0 32))))
 (let (($x233 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x234 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (= ?x234 (_ bv0 32))))
 (let (($x437 (and $x70 $x58)))
 (let (($x102 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x261 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x261 (_ bv1 32))))
 (let (($x13 (and $x410 $x437)))
 (let (($x363 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x91 (ite $x363 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x91 (_ bv0 32))))
 (let (($x279 (and $x164 $x13)))
 (let (($x320 (and $x279 $x455)))
 (let ((?x242 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x402 (= ?x242 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x259 (bvuge ?x91 (_ bv1 32))))
 (let (($x204 (=> $x259 $x402)))
 (let (($x74 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x165 (= $x259 $x74)))
 (let (($x78 (= false false)))
 (let (($x282 (=> $x164 $x78)))
 (let (($x268 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x200 (= $x164 $x268)))
 (let (($x182 (and $x200 $x282)))
 (let (($x357 (and $x182 $x165)))
 (let (($x231 (and $x357 $x204)))
 (let (($x194 (and $x231 $x320)))
 (let (($x54 (= ?x114 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x408 (=> $x410 $x54)))
 (let (($x333 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x93 (= $x410 $x333)))
 (let (($x274 (= ?x261 (_ bv0 32))))
 (let (($x276 (=> $x274 $x78)))
 (let (($x86 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x241 (= $x274 $x86)))
 (let (($x145 (and $x241 $x276)))
 (let (($x178 (and $x145 $x93)))
 (let (($x400 (and $x178 $x408)))
 (let (($x458 (and $x400 $x194)))
 (let ((?x121 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x368 (= ?x121 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x87 (bvuge ?x234 (_ bv1 32))))
 (let (($x284 (=> $x87 $x368)))
 (let (($x106 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x69 (= $x87 $x106)))
 (let (($x205 (=> $x70 $x78)))
 (let (($x203 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x92 (= $x70 $x203)))
 (let (($x256 (and $x92 $x205)))
 (let (($x387 (and $x256 $x69)))
 (let (($x210 (and $x387 $x284)))
 (let (($x385 (and $x210 $x458)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x263 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x295 (bvuge ?x84 (_ bv1 32))))
 (let (($x354 (=> $x295 $x263)))
 (let (($x77 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x173 (= $x295 $x77)))
 (let (($x97 (=> $x58 $x78)))
 (let (($x395 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x184 (= $x58 $x395)))
 (let (($x212 (and $x184 $x97)))
 (let (($x317 (and $x212 $x173)))
 (let (($x308 (and $x317 $x354)))
 (let (($x235 (and $x308 $x385)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x124 (and $x300 $x235)))
 (let (($x364 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x343 (and $x364 $x124)))
 (let (($x249 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x193 (and $x249 $x343)))
 (let (($x197 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x332 (and $x197 $x193)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x67 (and $x51 $x332)))
 (let (($x85 (and $x78 $x67)))
 (let (($x176 (= ?x242 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x229 (and $x176 $x85)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x227 (and $x73 $x229)))
 (let (($x459 (and $x78 $x227)))
 (let (($x113 (= ?x114 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x96 (and $x113 $x459)))
 (let (($x443 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x360 (and $x443 $x96)))
 (let (($x366 (and $x78 $x360)))
 (let (($x213 (= ?x121 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x353 (and $x213 $x366)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x30 (and $x143 $x353)))
 (let (($x336 (and $x78 $x30)))
 (let (($x161 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x72 (and $x161 $x336)))
 (let (($x135 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x426 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x373 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x426 $x135)))))))
 (let (($x15 (bvugt ?x319 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x116 (=> (bvule ?x319 (bvsub (bvadd ?x319 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x15)))))))
 (let (($x425 (bvugt ?x285 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x394)))
 (let (($x417 (=> (bvule ?x285 (bvsub (bvadd ?x285 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x425)))))))
 (let (($x18 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x157 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x18)))))))
 (let (($x220 (and $x157 $x417)))
 (let (($x215 (and $x220 $x116)))
 (let (($x122 (and $x215 $x373)))
 (let (($x310 (and $x122 $x72)))
 (let (($x304 (=> $x310 $x202)))
 (not $x304)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 251 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x188 (bvmul (_ bv4294967295 32) ?x114)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x63 (bvadd ?x424 ?x188)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x423 (concat ?x19 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x55 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x15 (bvadd ?x55 (_ bv3 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem ?x15) (concat ?x21 ?x423))))
 (let ((?x346 (bvmul (_ bv4294967295 32) ?x236)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x33 (concat ?x130 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x135 (bvadd ?x133 (_ bv3 32))))
 (let ((?x294 (concat (select input.dst.llvm-mem ?x135) (concat ?x46 ?x33))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x393 (concat ?x348 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x291 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x425 (bvadd ?x291 (_ bv3 32))))
 (let ((?x39 (concat (select input.dst.llvm-mem ?x425) (concat ?x226 ?x393))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x440 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x321)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x440)))
 (let ((?x442 (bvadd (bvadd (bvadd ?x24 ?x39) ?x294) ?x346)))
 (let (($x314 (= ?x442 ?x63)))
 (let (($x171 (= $x314 true)))
 (let (($x265 (= $x171 true)))
 (let ((?x229 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x336 (concat ?x366 (concat ?x459 ?x229)))))
 (let (($x38 (= ?x72 input.dst.llvm-%m)))
 (let (($x327 (= $x38 true)))
 (let (($x98 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x375 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x47 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x341 (and true $x47)))
 (let (($x381 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x405 (and $x381 $x341)))
 (let (($x60 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv8 32))) (bvult ?x55 (bvsub ?x55 (_ bv8 32))))))
 (let (($x37 (and (and (and true $x60) $x405) $x375)))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x283 (and true $x142)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x289 (and $x43 $x283)))
 (let (($x277 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv12 32))) (bvult ?x291 (bvsub ?x291 (_ bv12 32))))))
 (let (($x50 (and (and (and true $x43) $x277) $x289)))
 (let (($x31 (and (and $x50 $x37) $x98)))
 (let (($x310 (= input.dst.llvm-%m ?x72)))
 (let (($x183 (and $x310 $x31)))
 (let ((?x343 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x193 (= (_ bv0 32) ?x343)))
 (let ((?x385 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x385)))
 (let (($x458 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x458 $x235)))
 (let (($x332 (and $x124 $x193)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x194 $x332)))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x273))))
 (let ((?x396 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x78 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x397 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x397 (_ bv1 32))))
 (=> $x374 (= ?x396 ?x329))))))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x376 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x397 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x397 (_ bv1 32))))
 (= $x374 (bvuge ?x376 (_ bv1 32))))))))
 ))
 (let (($x433 (forall ((Lambda5 (_ BitVec 32)) )(let (($x121 (= false false)))
 (let (($x78 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x397 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x397 (_ bv0 32))))
 (=> $x168 $x121))))))
 ))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let (($x78 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x397 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x397 (_ bv0 32))))
 (= $x168 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x431 (and $x160 $x433)))
 (let (($x389 (and $x431 $x223)))
 (let (($x455 (and $x389 $x132)))
 (let (($x302 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x441 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x302)))))))
 (let (($x169 (and (and (and $x441 $x455) $x67) $x183)))
 (let (($x286 (= $x169 true)))
 (let (($x418 (= $x286 true)))
 (let (($x358 (= $x50 true)))
 (let (($x172 (= $x358 true)))
 (let (($x198 (and $x37 $x98)))
 (let (($x457 (= $x198 true)))
 (let (($x108 (= $x457 true)))
 (let (($x296 (and $x108 $x172)))
 (let (($x66 (and $x296 $x418)))
 (let (($x350 (and $x66 $x327)))
 (let (($x184 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x212 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x212 (_ bv1 32))))
 (let (($x205 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x256 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (bvuge ?x256 (_ bv1 32))))
 (let (($x155 (and $x284 $x354)))
 (let (($x276 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x145 (ite $x276 (_ bv1 32) (_ bv0 32))))
 (let (($x410 (= ?x145 (_ bv0 32))))
 (let (($x64 (and $x410 $x155)))
 (let (($x282 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x182 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x182 (_ bv0 32))))
 (let (($x390 (and $x259 $x64)))
 (let (($x420 (and $x390 $x350)))
 (let ((?x272 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x115 (= ?x272 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x204 (bvuge ?x182 (_ bv1 32))))
 (let (($x438 (=> $x204 $x115)))
 (let (($x231 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x437 (= $x204 $x231)))
 (let (($x121 (= false false)))
 (let (($x338 (=> $x259 $x121)))
 (let (($x165 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x357 (= $x259 $x165)))
 (let (($x402 (and $x357 $x338)))
 (let (($x13 (and $x402 $x437)))
 (let (($x81 (and $x13 $x438)))
 (let (($x253 (and $x81 $x420)))
 (let ((?x242 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x136 (= ?x242 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x408 (bvuge ?x145 (_ bv1 32))))
 (let (($x268 (=> $x408 $x136)))
 (let (($x400 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x363 (= $x408 $x400)))
 (let (($x309 (=> $x410 $x121)))
 (let (($x93 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x178 (= $x410 $x93)))
 (let (($x54 (and $x178 $x309)))
 (let (($x91 (and $x54 $x363)))
 (let (($x200 (and $x91 $x268)))
 (let (($x119 (and $x200 $x253)))
 (let (($x6 (= ?x114 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x86 (=> $x284 $x6)))
 (let (($x210 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x102 (= $x284 $x210)))
 (let (($x87 (= ?x256 (_ bv0 32))))
 (let (($x313 (=> $x87 $x121)))
 (let (($x69 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x387 (= $x87 $x69)))
 (let (($x368 (and $x387 $x313)))
 (let (($x261 (and $x368 $x102)))
 (let (($x241 (and $x261 $x86)))
 (let (($x10 (and $x241 $x119)))
 (let (($x196 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x203 (=> $x354 $x196)))
 (let (($x308 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x233 (= $x354 $x308)))
 (let (($x295 (= ?x212 (_ bv0 32))))
 (let (($x258 (=> $x295 $x121)))
 (let (($x173 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x317 (= $x295 $x173)))
 (let (($x263 (and $x317 $x258)))
 (let (($x234 (and $x263 $x233)))
 (let (($x92 (and $x234 $x203)))
 (let (($x288 (and $x92 $x10)))
 (let (($x395 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x264 (and $x395 $x288)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x153 (and $x58 $x264)))
 (let (($x316 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x167 (and $x316 $x153)))
 (let (($x224 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x138 (and $x224 $x167)))
 (let (($x378 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x377 (and $x378 $x138)))
 (let (($x129 (and $x121 $x377)))
 (let (($x99 (= ?x272 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x42 (and $x99 $x129)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x372 (and $x51 $x42)))
 (let (($x36 (and $x121 $x372)))
 (let (($x176 (= ?x242 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x120 (and $x176 $x36)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x252 (and $x73 $x120)))
 (let (($x323 (and $x121 $x252)))
 (let (($x113 (= ?x114 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x139 (and $x113 $x323)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x57 (and $x147 $x139)))
 (let (($x123 (and $x121 $x57)))
 (let (($x56 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x80 (and $x56 $x123)))
 (let (($x117 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x305 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x117)))))))
 (let (($x152 (bvugt ?x55 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x9 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x152)))))))
 (let (($x369 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x371 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x425)))
 (let (($x319 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x371 $x369)))))))
 (let (($x44 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x293 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x293)))
 (let (($x7 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x361 $x44)))))))
 (let (($x83 (and $x7 $x319)))
 (let (($x192 (and $x83 $x9)))
 (let (($x107 (and $x192 $x305)))
 (let (($x244 (and $x107 $x80)))
 (let (($x238 (=> $x244 $x265)))
 (not $x238)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x114 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x188 (bvmul (_ bv4294967295 32) ?x114)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x63 (bvadd ?x424 ?x188)))
 (let ((?x19 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x423 (concat ?x19 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x55 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x15 (bvadd ?x55 (_ bv3 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem ?x15) (concat ?x21 ?x423))))
 (let ((?x346 (bvmul (_ bv4294967295 32) ?x236)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x33 (concat ?x130 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x135 (bvadd ?x133 (_ bv3 32))))
 (let ((?x294 (concat (select input.dst.llvm-mem ?x135) (concat ?x46 ?x33))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x393 (concat ?x348 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x291 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x425 (bvadd ?x291 (_ bv3 32))))
 (let ((?x39 (concat (select input.dst.llvm-mem ?x425) (concat ?x226 ?x393))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x440 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x321)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x440)))
 (let ((?x442 (bvadd (bvadd (bvadd ?x24 ?x39) ?x294) ?x346)))
 (let (($x314 (= ?x442 ?x63)))
 (let (($x171 (= $x314 true)))
 (let (($x265 (= $x171 true)))
 (let ((?x229 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x336 (concat ?x366 (concat ?x459 ?x229)))))
 (let (($x38 (= ?x72 input.dst.llvm-%m)))
 (let (($x327 (= $x38 true)))
 (let (($x98 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x375 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x47 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x341 (and true $x47)))
 (let (($x381 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x405 (and $x381 $x341)))
 (let (($x60 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv8 32))) (bvult ?x55 (bvsub ?x55 (_ bv8 32))))))
 (let (($x37 (and (and (and true $x60) $x405) $x375)))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x283 (and true $x142)))
 (let (($x43 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x289 (and $x43 $x283)))
 (let (($x277 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv12 32))) (bvult ?x291 (bvsub ?x291 (_ bv12 32))))))
 (let (($x50 (and (and (and true $x43) $x277) $x289)))
 (let (($x31 (and (and $x50 $x37) $x98)))
 (let (($x310 (= input.dst.llvm-%m ?x72)))
 (let (($x183 (and $x310 $x31)))
 (let ((?x343 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x193 (= (_ bv0 32) ?x343)))
 (let ((?x385 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x385)))
 (let (($x458 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x458 $x235)))
 (let (($x332 (and $x124 $x193)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x194 $x332)))
 (let (($x132 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x273))))
 (let ((?x396 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x78 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x397 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x397 (_ bv1 32))))
 (=> $x374 (= ?x396 ?x329))))))))))
 ))
 (let (($x223 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x376 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x397 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x397 (_ bv1 32))))
 (= $x374 (bvuge ?x376 (_ bv1 32))))))))
 ))
 (let (($x433 (forall ((Lambda5 (_ BitVec 32)) )(let (($x121 (= false false)))
 (let (($x78 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x397 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x397 (_ bv0 32))))
 (=> $x168 $x121))))))
 ))
 (let (($x160 (forall ((Lambda5 (_ BitVec 32)) )(let (($x78 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x397 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x397 (_ bv0 32))))
 (= $x168 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x431 (and $x160 $x433)))
 (let (($x389 (and $x431 $x223)))
 (let (($x455 (and $x389 $x132)))
 (let (($x302 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x441 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x17 $x302)))))))
 (let (($x169 (and (and (and $x441 $x455) $x67) $x183)))
 (let (($x286 (= $x169 true)))
 (let (($x418 (= $x286 true)))
 (let (($x358 (= $x50 true)))
 (let (($x172 (= $x358 true)))
 (let (($x198 (and $x37 $x98)))
 (let (($x457 (= $x198 true)))
 (let (($x108 (= $x457 true)))
 (let (($x296 (and $x108 $x172)))
 (let (($x66 (and $x296 $x418)))
 (let (($x350 (and $x66 $x327)))
 (let (($x184 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x212 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (bvuge ?x212 (_ bv1 32))))
 (let (($x205 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x256 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x284 (bvuge ?x256 (_ bv1 32))))
 (let (($x155 (and $x284 $x354)))
 (let (($x276 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x145 (ite $x276 (_ bv1 32) (_ bv0 32))))
 (let (($x410 (= ?x145 (_ bv0 32))))
 (let (($x64 (and $x410 $x155)))
 (let (($x282 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x182 (ite $x282 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (= ?x182 (_ bv0 32))))
 (let (($x390 (and $x259 $x64)))
 (let (($x420 (and $x390 $x350)))
 (let ((?x272 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x115 (= ?x272 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x204 (bvuge ?x182 (_ bv1 32))))
 (let (($x438 (=> $x204 $x115)))
 (let (($x231 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x437 (= $x204 $x231)))
 (let (($x121 (= false false)))
 (let (($x338 (=> $x259 $x121)))
 (let (($x165 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x357 (= $x259 $x165)))
 (let (($x402 (and $x357 $x338)))
 (let (($x13 (and $x402 $x437)))
 (let (($x81 (and $x13 $x438)))
 (let (($x253 (and $x81 $x420)))
 (let ((?x242 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x136 (= ?x242 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x408 (bvuge ?x145 (_ bv1 32))))
 (let (($x268 (=> $x408 $x136)))
 (let (($x400 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x363 (= $x408 $x400)))
 (let (($x309 (=> $x410 $x121)))
 (let (($x93 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x178 (= $x410 $x93)))
 (let (($x54 (and $x178 $x309)))
 (let (($x91 (and $x54 $x363)))
 (let (($x200 (and $x91 $x268)))
 (let (($x119 (and $x200 $x253)))
 (let (($x6 (= ?x114 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x86 (=> $x284 $x6)))
 (let (($x210 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x102 (= $x284 $x210)))
 (let (($x87 (= ?x256 (_ bv0 32))))
 (let (($x313 (=> $x87 $x121)))
 (let (($x69 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x387 (= $x87 $x69)))
 (let (($x368 (and $x387 $x313)))
 (let (($x261 (and $x368 $x102)))
 (let (($x241 (and $x261 $x86)))
 (let (($x10 (and $x241 $x119)))
 (let (($x196 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x203 (=> $x354 $x196)))
 (let (($x308 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x233 (= $x354 $x308)))
 (let (($x295 (= ?x212 (_ bv0 32))))
 (let (($x258 (=> $x295 $x121)))
 (let (($x173 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x317 (= $x295 $x173)))
 (let (($x263 (and $x317 $x258)))
 (let (($x234 (and $x263 $x233)))
 (let (($x92 (and $x234 $x203)))
 (let (($x288 (and $x92 $x10)))
 (let (($x395 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x264 (and $x395 $x288)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x153 (and $x58 $x264)))
 (let (($x316 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x167 (and $x316 $x153)))
 (let (($x224 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x138 (and $x224 $x167)))
 (let (($x378 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x377 (and $x378 $x138)))
 (let (($x129 (and $x121 $x377)))
 (let (($x99 (= ?x272 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x42 (and $x99 $x129)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x372 (and $x51 $x42)))
 (let (($x36 (and $x121 $x372)))
 (let (($x176 (= ?x242 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x120 (and $x176 $x36)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x252 (and $x73 $x120)))
 (let (($x323 (and $x121 $x252)))
 (let (($x113 (= ?x114 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x139 (and $x113 $x323)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x57 (and $x147 $x139)))
 (let (($x123 (and $x121 $x57)))
 (let (($x56 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x80 (and $x56 $x123)))
 (let (($x117 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x305 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x117)))))))
 (let (($x152 (bvugt ?x55 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x9 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x158 $x152)))))))
 (let (($x369 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x371 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x425)))
 (let (($x319 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x371 $x369)))))))
 (let (($x44 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x293 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x293)))
 (let (($x7 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x361 $x44)))))))
 (let (($x83 (and $x7 $x319)))
 (let (($x192 (and $x83 $x9)))
 (let (($x107 (and $x192 $x305)))
 (let (($x244 (and $x107 $x80)))
 (let (($x238 (=> $x244 $x265)))
 (not $x238)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 253 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x144 (bvmul (_ bv4294967295 32) ?x242)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x456 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x95 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x152 (bvadd ?x95 (_ bv3 32))))
 (let ((?x352 (concat (select input.dst.llvm-mem ?x152) (concat ?x218 ?x456))))
 (let ((?x89 (bvmul (_ bv4294967295 32) ?x352)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x177 (concat ?x245 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x117 (bvadd ?x404 (_ bv3 32))))
 (let ((?x342 (concat (select input.dst.llvm-mem ?x117) (concat ?x103 ?x177))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x248 (concat ?x238 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x41 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x369 (bvadd ?x41 (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem ?x369) (concat ?x189 ?x248))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x236)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x188)))
 (let ((?x61 (bvadd (bvadd (bvadd ?x314 ?x97) ?x342) ?x89)))
 (let (($x367 (= ?x61 ?x144)))
 (let (($x170 (= $x367 true)))
 (let (($x413 (= $x170 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x123 (concat ?x323 (concat ?x36 ?x42)))))
 (let (($x411 (= ?x80 input.dst.llvm-%m)))
 (let (($x382 (= $x411 true)))
 (let (($x27 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x198 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x375 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x37 (and true $x375)))
 (let (($x47 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x14 (and $x47 $x37)))
 (let (($x406 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv8 32))) (bvult ?x95 (bvsub ?x95 (_ bv8 32))))))
 (let (($x335 (and (and (and true $x406) $x14) $x198)))
 (let (($x358 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x172 (and true $x358)))
 (let (($x277 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x296 (and $x277 $x172)))
 (let (($x270 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv12 32))) (bvult ?x41 (bvsub ?x41 (_ bv12 32))))))
 (let (($x151 (and (and (and true $x277) $x270) $x296)))
 (let (($x112 (and (and $x151 $x335) $x27)))
 (let (($x244 (= input.dst.llvm-%m ?x80)))
 (let (($x280 (and $x244 $x112)))
 (let ((?x153 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x167 (= (_ bv0 32) ?x153)))
 (let ((?x10 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x119 $x288)))
 (let (($x138 (and $x264 $x167)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x377 (and $x253 $x138)))
 (let (($x327 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x229 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x310))))
 (let ((?x25 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x121 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x287 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x287 (_ bv1 32))))
 (=> $x307 (= ?x25 ?x418))))))))))
 ))
 (let (($x455 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x230 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x287 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x287 (_ bv1 32))))
 (= $x307 (bvuge ?x230 (_ bv1 32))))))))
 ))
 (let (($x239 (forall ((Lambda5 (_ BitVec 32)) )(let (($x114 (= false false)))
 (let (($x121 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x287 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x287 (_ bv0 32))))
 (=> $x100 $x114))))))
 ))
 (let (($x260 (forall ((Lambda5 (_ BitVec 32)) )(let (($x121 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x287 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x287 (_ bv0 32))))
 (= $x100 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x162 (and $x260 $x239)))
 (let (($x75 (and $x162 $x455)))
 (let (($x350 (and $x75 $x327)))
 (let (($x397 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x376 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x397)))))))
 (let (($x134 (and (and (and $x376 $x350) $x377) $x280)))
 (let (($x321 (= $x134 true)))
 (let (($x440 (= $x321 true)))
 (let (($x303 (= $x151 true)))
 (let (($x17 (= $x303 true)))
 (let (($x179 (and $x335 $x27)))
 (let (($x391 (= $x179 true)))
 (let (($x82 (= $x391 true)))
 (let (($x302 (and $x82 $x17)))
 (let (($x24 (and $x302 $x440)))
 (let (($x226 (and $x24 $x382)))
 (let (($x317 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x263 (ite $x317 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (= ?x263 (_ bv0 32))))
 (let (($x313 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x368 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x368 (_ bv1 32))))
 (let (($x398 (and $x86 $x354)))
 (let (($x309 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x54 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x54 (_ bv0 32))))
 (let (($x60 (and $x408 $x398)))
 (let (($x338 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x402 (ite $x338 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x402 (_ bv0 32))))
 (let (($x166 (and $x204 $x60)))
 (let (($x304 (and $x166 $x226)))
 (let ((?x364 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x94 (= ?x364 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x438 (bvuge ?x402 (_ bv1 32))))
 (let (($x275 (=> $x438 $x94)))
 (let (($x81 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x155 (= $x438 $x81)))
 (let (($x114 (= false false)))
 (let (($x279 (=> $x204 $x114)))
 (let (($x437 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x13 (= $x204 $x437)))
 (let (($x115 (and $x13 $x279)))
 (let (($x64 (and $x115 $x155)))
 (let (($x62 (and $x64 $x275)))
 (let (($x348 (and $x62 $x304)))
 (let ((?x272 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x74 (= ?x272 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x268 (bvuge ?x54 (_ bv1 32))))
 (let (($x165 (=> $x268 $x74)))
 (let (($x200 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x282 (= $x268 $x200)))
 (let (($x164 (=> $x408 $x114)))
 (let (($x363 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x91 (= $x408 $x363)))
 (let (($x136 (and $x91 $x164)))
 (let (($x182 (and $x136 $x282)))
 (let (($x357 (and $x182 $x165)))
 (let (($x202 (and $x357 $x348)))
 (let (($x333 (= ?x242 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x93 (=> $x86 $x333)))
 (let (($x241 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x276 (= $x86 $x241)))
 (let (($x284 (= ?x368 (_ bv0 32))))
 (let (($x274 (=> $x284 $x114)))
 (let (($x102 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x261 (= $x284 $x102)))
 (let (($x6 (and $x261 $x274)))
 (let (($x145 (and $x6 $x276)))
 (let (($x178 (and $x145 $x93)))
 (let (($x393 (and $x178 $x202)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x106 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x203 (bvuge ?x263 (_ bv1 32))))
 (let (($x69 (=> $x203 $x106)))
 (let (($x92 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x205 (= $x203 $x92)))
 (let (($x70 (=> $x354 $x114)))
 (let (($x233 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x234 (= $x354 $x233)))
 (let (($x196 (and $x234 $x70)))
 (let (($x256 (and $x196 $x205)))
 (let (($x387 (and $x256 $x69)))
 (let (($x330 (and $x387 $x393)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x39 (and $x173 $x330)))
 (let (($x295 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x301 (and $x295 $x39)))
 (let (($x184 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x59 (and $x184 $x301)))
 (let (($x351 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x262 (and $x351 $x59)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x46 (and $x84 $x262)))
 (let (($x250 (and $x114 $x46)))
 (let (($x300 (= ?x364 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x130 (and $x300 $x250)))
 (let (($x378 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x20 (and $x378 $x130)))
 (let (($x33 (and $x114 $x20)))
 (let (($x99 (= ?x272 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x328 (and $x99 $x33)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x294 (and $x51 $x328)))
 (let (($x28 (and $x114 $x294)))
 (let (($x176 (= ?x242 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x243 (and $x176 $x28)))
 (let (($x349 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x454 (and $x349 $x243)))
 (let (($x21 (and $x114 $x454)))
 (let (($x443 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x141 (and $x443 $x21)))
 (let (($x11 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x143 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x11)))))))
 (let (($x201 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x40 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x201)))))))
 (let (($x208 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x369)))
 (let (($x55 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x271 $x208)))))))
 (let (($x299 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x394 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x326 $x299)))))))
 (let (($x127 (and $x394 $x55)))
 (let (($x281 (and $x127 $x40)))
 (let (($x426 (and $x281 $x143)))
 (let (($x19 (and $x426 $x141)))
 (let (($x111 (=> $x19 $x413)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x144 (bvmul (_ bv4294967295 32) ?x242)))
 (let ((?x90 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x456 (concat ?x90 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x95 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x152 (bvadd ?x95 (_ bv3 32))))
 (let ((?x352 (concat (select input.dst.llvm-mem ?x152) (concat ?x218 ?x456))))
 (let ((?x89 (bvmul (_ bv4294967295 32) ?x352)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x177 (concat ?x245 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x117 (bvadd ?x404 (_ bv3 32))))
 (let ((?x342 (concat (select input.dst.llvm-mem ?x117) (concat ?x103 ?x177))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x248 (concat ?x238 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x41 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x369 (bvadd ?x41 (_ bv3 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem ?x369) (concat ?x189 ?x248))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x236)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x188)))
 (let ((?x61 (bvadd (bvadd (bvadd ?x314 ?x97) ?x342) ?x89)))
 (let (($x367 (= ?x61 ?x144)))
 (let (($x170 (= $x367 true)))
 (let (($x413 (= $x170 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x123 (concat ?x323 (concat ?x36 ?x42)))))
 (let (($x411 (= ?x80 input.dst.llvm-%m)))
 (let (($x382 (= $x411 true)))
 (let (($x27 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x198 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x375 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x37 (and true $x375)))
 (let (($x47 (= (bvand ?x41 (_ bv4294967292 32)) ?x41)))
 (let (($x14 (and $x47 $x37)))
 (let (($x406 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv8 32))) (bvult ?x95 (bvsub ?x95 (_ bv8 32))))))
 (let (($x335 (and (and (and true $x406) $x14) $x198)))
 (let (($x358 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x172 (and true $x358)))
 (let (($x277 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x296 (and $x277 $x172)))
 (let (($x270 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x41 (bvsub ?x41 (_ bv12 32))) (bvult ?x41 (bvsub ?x41 (_ bv12 32))))))
 (let (($x151 (and (and (and true $x277) $x270) $x296)))
 (let (($x112 (and (and $x151 $x335) $x27)))
 (let (($x244 (= input.dst.llvm-%m ?x80)))
 (let (($x280 (and $x244 $x112)))
 (let ((?x153 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x167 (= (_ bv0 32) ?x153)))
 (let ((?x10 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x119 $x288)))
 (let (($x138 (and $x264 $x167)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x377 (and $x253 $x138)))
 (let (($x327 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x229 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x310))))
 (let ((?x25 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x121 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x287 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x287 (_ bv1 32))))
 (=> $x307 (= ?x25 ?x418))))))))))
 ))
 (let (($x455 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x230 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x287 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x287 (_ bv1 32))))
 (= $x307 (bvuge ?x230 (_ bv1 32))))))))
 ))
 (let (($x239 (forall ((Lambda5 (_ BitVec 32)) )(let (($x114 (= false false)))
 (let (($x121 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x287 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x287 (_ bv0 32))))
 (=> $x100 $x114))))))
 ))
 (let (($x260 (forall ((Lambda5 (_ BitVec 32)) )(let (($x121 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x287 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (= ?x287 (_ bv0 32))))
 (= $x100 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x162 (and $x260 $x239)))
 (let (($x75 (and $x162 $x455)))
 (let (($x350 (and $x75 $x327)))
 (let (($x397 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x376 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x78 $x397)))))))
 (let (($x134 (and (and (and $x376 $x350) $x377) $x280)))
 (let (($x321 (= $x134 true)))
 (let (($x440 (= $x321 true)))
 (let (($x303 (= $x151 true)))
 (let (($x17 (= $x303 true)))
 (let (($x179 (and $x335 $x27)))
 (let (($x391 (= $x179 true)))
 (let (($x82 (= $x391 true)))
 (let (($x302 (and $x82 $x17)))
 (let (($x24 (and $x302 $x440)))
 (let (($x226 (and $x24 $x382)))
 (let (($x317 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x263 (ite $x317 (_ bv1 32) (_ bv0 32))))
 (let (($x354 (= ?x263 (_ bv0 32))))
 (let (($x313 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x368 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x368 (_ bv1 32))))
 (let (($x398 (and $x86 $x354)))
 (let (($x309 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x54 (ite $x309 (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x54 (_ bv0 32))))
 (let (($x60 (and $x408 $x398)))
 (let (($x338 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x402 (ite $x338 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x402 (_ bv0 32))))
 (let (($x166 (and $x204 $x60)))
 (let (($x304 (and $x166 $x226)))
 (let ((?x364 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x94 (= ?x364 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x438 (bvuge ?x402 (_ bv1 32))))
 (let (($x275 (=> $x438 $x94)))
 (let (($x81 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x155 (= $x438 $x81)))
 (let (($x114 (= false false)))
 (let (($x279 (=> $x204 $x114)))
 (let (($x437 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x13 (= $x204 $x437)))
 (let (($x115 (and $x13 $x279)))
 (let (($x64 (and $x115 $x155)))
 (let (($x62 (and $x64 $x275)))
 (let (($x348 (and $x62 $x304)))
 (let ((?x272 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x74 (= ?x272 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x268 (bvuge ?x54 (_ bv1 32))))
 (let (($x165 (=> $x268 $x74)))
 (let (($x200 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x282 (= $x268 $x200)))
 (let (($x164 (=> $x408 $x114)))
 (let (($x363 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x91 (= $x408 $x363)))
 (let (($x136 (and $x91 $x164)))
 (let (($x182 (and $x136 $x282)))
 (let (($x357 (and $x182 $x165)))
 (let (($x202 (and $x357 $x348)))
 (let (($x333 (= ?x242 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x93 (=> $x86 $x333)))
 (let (($x241 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x276 (= $x86 $x241)))
 (let (($x284 (= ?x368 (_ bv0 32))))
 (let (($x274 (=> $x284 $x114)))
 (let (($x102 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x261 (= $x284 $x102)))
 (let (($x6 (and $x261 $x274)))
 (let (($x145 (and $x6 $x276)))
 (let (($x178 (and $x145 $x93)))
 (let (($x393 (and $x178 $x202)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x106 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x203 (bvuge ?x263 (_ bv1 32))))
 (let (($x69 (=> $x203 $x106)))
 (let (($x92 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x205 (= $x203 $x92)))
 (let (($x70 (=> $x354 $x114)))
 (let (($x233 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x234 (= $x354 $x233)))
 (let (($x196 (and $x234 $x70)))
 (let (($x256 (and $x196 $x205)))
 (let (($x387 (and $x256 $x69)))
 (let (($x330 (and $x387 $x393)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x39 (and $x173 $x330)))
 (let (($x295 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x301 (and $x295 $x39)))
 (let (($x184 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x59 (and $x184 $x301)))
 (let (($x351 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x262 (and $x351 $x59)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x46 (and $x84 $x262)))
 (let (($x250 (and $x114 $x46)))
 (let (($x300 (= ?x364 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x130 (and $x300 $x250)))
 (let (($x378 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x20 (and $x378 $x130)))
 (let (($x33 (and $x114 $x20)))
 (let (($x99 (= ?x272 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x328 (and $x99 $x33)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x294 (and $x51 $x328)))
 (let (($x28 (and $x114 $x294)))
 (let (($x176 (= ?x242 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x243 (and $x176 $x28)))
 (let (($x349 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x454 (and $x349 $x243)))
 (let (($x21 (and $x114 $x454)))
 (let (($x443 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x141 (and $x443 $x21)))
 (let (($x11 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x143 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x101 $x11)))))))
 (let (($x201 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x40 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x201)))))))
 (let (($x208 (bvugt ?x41 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x369)))
 (let (($x55 (=> (bvule ?x41 (bvsub (bvadd ?x41 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x271 $x208)))))))
 (let (($x299 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x394 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x326 $x299)))))))
 (let (($x127 (and $x394 $x55)))
 (let (($x281 (and $x127 $x40)))
 (let (($x426 (and $x281 $x143)))
 (let (($x19 (and $x426 $x141)))
 (let (($x111 (=> $x19 $x413)))
 (not $x111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 252 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x329 (concat ?x370 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x15 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x201 (bvadd ?x15 (_ bv3 32))))
 (let ((?x336 (concat (select input.dst.llvm-mem ?x201) (concat ?x458 ?x329))))
 (let ((?x332 (bvmul (_ bv4294967295 32) ?x336)))
 (let ((?x290 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x125 (concat ?x290 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x11 (bvadd ?x133 (_ bv3 32))))
 (let ((?x71 (concat (select input.dst.llvm-mem ?x11) (concat ?x433 ?x125))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x388 (concat ?x111 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x318 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x208 (bvadd ?x318 (_ bv3 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem ?x208) (concat ?x129 ?x388))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x175)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x61)))
 (let ((?x343 (bvadd (bvadd (bvadd ?x367 ?x365) ?x71) ?x332)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x235 (= ?x424 ?x343)))
 (let (($x193 (= $x235 true)))
 (let (($x180 (= $x193 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x21 (concat ?x28 (concat ?x33 ?x130)))))
 (let (($x156 (= ?x141 input.dst.llvm-%m)))
 (let (($x255 (= $x156 true)))
 (let (($x225 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x179 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x198 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x335 (and true $x198)))
 (let (($x375 (= (bvand ?x318 (_ bv4294967292 32)) ?x318)))
 (let (($x43 (and $x375 $x335)))
 (let (($x341 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x15 (bvsub ?x15 (_ bv8 32))) (bvult ?x15 (bvsub ?x15 (_ bv8 32))))))
 (let (($x340 (and (and (and true $x341) $x43) $x179)))
 (let (($x303 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x17 (and true $x303)))
 (let (($x270 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x302 (and $x270 $x17)))
 (let (($x50 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x318 (bvsub ?x318 (_ bv12 32))) (bvult ?x318 (bvsub ?x318 (_ bv12 32))))))
 (let (($x237 (and (and (and true $x270) $x50) $x302)))
 (let (($x346 (and (and $x237 $x340) $x225)))
 (let (($x19 (= input.dst.llvm-%m ?x141)))
 (let (($x442 (and $x19 $x346)))
 (let ((?x301 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x59 (= (_ bv0 32) ?x301)))
 (let ((?x393 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x393)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x202 $x330)))
 (let (($x262 (and $x39 $x59)))
 (let (($x348 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x348 $x262)))
 (let (($x382 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x440 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x244))))
 (let ((?x439 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x114 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x229 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x229 (_ bv1 32))))
 (=> $x38 (= ?x439 ?x440))))))))))
 ))
 (let (($x350 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x229 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x229 (_ bv1 32))))
 (= $x38 (bvuge ?x194 (_ bv1 32))))))))
 ))
 (let (($x72 (forall ((Lambda5 (_ BitVec 32)) )(let (($x242 (= false false)))
 (let (($x114 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x229 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x229 (_ bv0 32))))
 (=> $x169 $x242))))))
 ))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let (($x114 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x229 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x229 (_ bv0 32))))
 (= $x169 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x96 (and $x347 $x72)))
 (let (($x131 (and $x96 $x350)))
 (let (($x226 (and $x131 $x382)))
 (let (($x287 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x287)))))))
 (let (($x190 (and (and (and $x230 $x226) $x46) $x442)))
 (let (($x236 (= $x190 true)))
 (let (($x188 (= $x236 true)))
 (let (($x161 (= $x237 true)))
 (let (($x78 (= $x161 true)))
 (let (($x427 (and $x340 $x225)))
 (let (($x331 (= $x427 true)))
 (let (($x104 (= $x331 true)))
 (let (($x397 (and $x104 $x78)))
 (let (($x314 (and $x397 $x188)))
 (let (($x189 (and $x314 $x255)))
 (let (($x234 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x196 (ite $x234 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x196 (_ bv1 32))))
 (let (($x274 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x6 (ite $x274 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x6 (_ bv0 32))))
 (let (($x383 (and $x86 $x69)))
 (let (($x164 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x136 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x136 (_ bv0 32))))
 (let (($x406 (and $x268 $x383)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x115 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x115 (_ bv0 32))))
 (let (($x457 (and $x438 $x406)))
 (let (($x265 (and $x457 $x189)))
 (let ((?x58 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x401 (= ?x58 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x275 (bvuge ?x115 (_ bv1 32))))
 (let (($x222 (=> $x275 $x401)))
 (let (($x62 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x398 (= $x275 $x62)))
 (let (($x242 (= false false)))
 (let (($x390 (=> $x438 $x242)))
 (let (($x155 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x64 (= $x438 $x155)))
 (let (($x94 (and $x64 $x390)))
 (let (($x60 (and $x94 $x398)))
 (let (($x381 (and $x60 $x222)))
 (let (($x238 (and $x381 $x265)))
 (let ((?x364 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x231 (= ?x364 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x165 (bvuge ?x136 (_ bv1 32))))
 (let (($x437 (=> $x165 $x231)))
 (let (($x357 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x338 (= $x165 $x357)))
 (let (($x259 (=> $x268 $x242)))
 (let (($x282 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x182 (= $x268 $x282)))
 (let (($x74 (and $x182 $x259)))
 (let (($x402 (and $x74 $x338)))
 (let (($x13 (and $x402 $x437)))
 (let (($x171 (and $x13 $x238)))
 (let ((?x272 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x400 (= ?x272 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x93 (bvuge ?x6 (_ bv1 32))))
 (let (($x363 (=> $x93 $x400)))
 (let (($x178 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x309 (= $x93 $x178)))
 (let (($x410 (=> $x86 $x242)))
 (let (($x276 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x145 (= $x86 $x276)))
 (let (($x333 (and $x145 $x410)))
 (let (($x54 (and $x333 $x309)))
 (let (($x91 (and $x54 $x363)))
 (let (($x248 (and $x91 $x171)))
 (let (($x210 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x102 (=> $x69 $x210)))
 (let (($x387 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x313 (= $x69 $x387)))
 (let (($x203 (= ?x196 (_ bv0 32))))
 (let (($x87 (=> $x203 $x242)))
 (let (($x205 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x256 (= $x203 $x205)))
 (let (($x106 (and $x256 $x87)))
 (let (($x368 (and $x106 $x313)))
 (let (($x261 (and $x368 $x102)))
 (let (($x85 (and $x261 $x248)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x97 (and $x233 $x85)))
 (let (($x354 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x334 (and $x354 $x97)))
 (let (($x317 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x292 (and $x317 $x334)))
 (let (($x77 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x76 (and $x77 $x292)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x103 (and $x212 $x76)))
 (let (($x247 (and $x242 $x103)))
 (let (($x395 (= ?x58 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x245 (and $x395 $x247)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x399 (and $x84 $x245)))
 (let (($x177 (and $x242 $x399)))
 (let (($x300 (= ?x364 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x251 (and $x300 $x177)))
 (let (($x378 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x342 (and $x378 $x251)))
 (let (($x384 (and $x242 $x342)))
 (let (($x99 (= ?x272 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x409 (and $x99 $x384)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x266 (and $x26 $x409)))
 (let (($x32 (and $x242 $x266)))
 (let (($x73 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x218 (and $x73 $x32)))
 (let (($x122 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x373 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x147 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x373 $x122)))))))
 (let (($x215 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x135 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x215)))))))
 (let (($x220 (bvugt ?x318 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x417 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x95 (=> (bvule ?x318 (bvsub (bvadd ?x318 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x417 $x220)))))))
 (let (($x324 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x326 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x326)))
 (let (($x425 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x324)))))))
 (let (($x371 (and $x425 $x95)))
 (let (($x158 (and $x371 $x135)))
 (let (($x219 (and $x158 $x147)))
 (let (($x110 (and $x219 $x218)))
 (let (($x360 (=> $x110 $x180)))
 (not $x360)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x370 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x329 (concat ?x370 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x15 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x201 (bvadd ?x15 (_ bv3 32))))
 (let ((?x336 (concat (select input.dst.llvm-mem ?x201) (concat ?x458 ?x329))))
 (let ((?x332 (bvmul (_ bv4294967295 32) ?x336)))
 (let ((?x290 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x125 (concat ?x290 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x433 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x133 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x11 (bvadd ?x133 (_ bv3 32))))
 (let ((?x71 (concat (select input.dst.llvm-mem ?x11) (concat ?x433 ?x125))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x388 (concat ?x111 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x318 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x208 (bvadd ?x318 (_ bv3 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem ?x208) (concat ?x129 ?x388))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x175)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x61)))
 (let ((?x343 (bvadd (bvadd (bvadd ?x367 ?x365) ?x71) ?x332)))
 (let ((?x424 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x235 (= ?x424 ?x343)))
 (let (($x193 (= $x235 true)))
 (let (($x180 (= $x193 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x21 (concat ?x28 (concat ?x33 ?x130)))))
 (let (($x156 (= ?x141 input.dst.llvm-%m)))
 (let (($x255 (= $x156 true)))
 (let (($x225 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x179 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x198 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv4 32))) (bvult ?x133 (bvsub ?x133 (_ bv4 32))))))
 (let (($x335 (and true $x198)))
 (let (($x375 (= (bvand ?x318 (_ bv4294967292 32)) ?x318)))
 (let (($x43 (and $x375 $x335)))
 (let (($x341 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x15 (bvsub ?x15 (_ bv8 32))) (bvult ?x15 (bvsub ?x15 (_ bv8 32))))))
 (let (($x340 (and (and (and true $x341) $x43) $x179)))
 (let (($x303 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x17 (and true $x303)))
 (let (($x270 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x302 (and $x270 $x17)))
 (let (($x50 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x318 (bvsub ?x318 (_ bv12 32))) (bvult ?x318 (bvsub ?x318 (_ bv12 32))))))
 (let (($x237 (and (and (and true $x270) $x50) $x302)))
 (let (($x346 (and (and $x237 $x340) $x225)))
 (let (($x19 (= input.dst.llvm-%m ?x141)))
 (let (($x442 (and $x19 $x346)))
 (let ((?x301 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x59 (= (_ bv0 32) ?x301)))
 (let ((?x393 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x393)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x202 $x330)))
 (let (($x262 (and $x39 $x59)))
 (let (($x348 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x348 $x262)))
 (let (($x382 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x440 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x244))))
 (let ((?x439 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x114 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x229 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x229 (_ bv1 32))))
 (=> $x38 (= ?x439 ?x440))))))))))
 ))
 (let (($x350 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x194 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x229 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x229 (_ bv1 32))))
 (= $x38 (bvuge ?x194 (_ bv1 32))))))))
 ))
 (let (($x72 (forall ((Lambda5 (_ BitVec 32)) )(let (($x242 (= false false)))
 (let (($x114 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x229 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x229 (_ bv0 32))))
 (=> $x169 $x242))))))
 ))
 (let (($x347 (forall ((Lambda5 (_ BitVec 32)) )(let (($x114 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x229 (ite $x114 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x229 (_ bv0 32))))
 (= $x169 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x96 (and $x347 $x72)))
 (let (($x131 (and $x96 $x350)))
 (let (($x226 (and $x131 $x382)))
 (let (($x287 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x287)))))))
 (let (($x190 (and (and (and $x230 $x226) $x46) $x442)))
 (let (($x236 (= $x190 true)))
 (let (($x188 (= $x236 true)))
 (let (($x161 (= $x237 true)))
 (let (($x78 (= $x161 true)))
 (let (($x427 (and $x340 $x225)))
 (let (($x331 (= $x427 true)))
 (let (($x104 (= $x331 true)))
 (let (($x397 (and $x104 $x78)))
 (let (($x314 (and $x397 $x188)))
 (let (($x189 (and $x314 $x255)))
 (let (($x234 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x196 (ite $x234 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x196 (_ bv1 32))))
 (let (($x274 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x6 (ite $x274 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x6 (_ bv0 32))))
 (let (($x383 (and $x86 $x69)))
 (let (($x164 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x136 (ite $x164 (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x136 (_ bv0 32))))
 (let (($x406 (and $x268 $x383)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x115 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x115 (_ bv0 32))))
 (let (($x457 (and $x438 $x406)))
 (let (($x265 (and $x457 $x189)))
 (let ((?x58 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x401 (= ?x58 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x275 (bvuge ?x115 (_ bv1 32))))
 (let (($x222 (=> $x275 $x401)))
 (let (($x62 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x398 (= $x275 $x62)))
 (let (($x242 (= false false)))
 (let (($x390 (=> $x438 $x242)))
 (let (($x155 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x64 (= $x438 $x155)))
 (let (($x94 (and $x64 $x390)))
 (let (($x60 (and $x94 $x398)))
 (let (($x381 (and $x60 $x222)))
 (let (($x238 (and $x381 $x265)))
 (let ((?x364 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x231 (= ?x364 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x165 (bvuge ?x136 (_ bv1 32))))
 (let (($x437 (=> $x165 $x231)))
 (let (($x357 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x338 (= $x165 $x357)))
 (let (($x259 (=> $x268 $x242)))
 (let (($x282 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x182 (= $x268 $x282)))
 (let (($x74 (and $x182 $x259)))
 (let (($x402 (and $x74 $x338)))
 (let (($x13 (and $x402 $x437)))
 (let (($x171 (and $x13 $x238)))
 (let ((?x272 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x400 (= ?x272 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x93 (bvuge ?x6 (_ bv1 32))))
 (let (($x363 (=> $x93 $x400)))
 (let (($x178 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x309 (= $x93 $x178)))
 (let (($x410 (=> $x86 $x242)))
 (let (($x276 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x145 (= $x86 $x276)))
 (let (($x333 (and $x145 $x410)))
 (let (($x54 (and $x333 $x309)))
 (let (($x91 (and $x54 $x363)))
 (let (($x248 (and $x91 $x171)))
 (let (($x210 (= ?x424 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x102 (=> $x69 $x210)))
 (let (($x387 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x313 (= $x69 $x387)))
 (let (($x203 (= ?x196 (_ bv0 32))))
 (let (($x87 (=> $x203 $x242)))
 (let (($x205 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x256 (= $x203 $x205)))
 (let (($x106 (and $x256 $x87)))
 (let (($x368 (and $x106 $x313)))
 (let (($x261 (and $x368 $x102)))
 (let (($x85 (and $x261 $x248)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x97 (and $x233 $x85)))
 (let (($x354 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x334 (and $x354 $x97)))
 (let (($x317 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x292 (and $x317 $x334)))
 (let (($x77 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x76 (and $x77 $x292)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x103 (and $x212 $x76)))
 (let (($x247 (and $x242 $x103)))
 (let (($x395 (= ?x58 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x245 (and $x395 $x247)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x399 (and $x84 $x245)))
 (let (($x177 (and $x242 $x399)))
 (let (($x300 (= ?x364 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x251 (and $x300 $x177)))
 (let (($x378 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x342 (and $x378 $x251)))
 (let (($x384 (and $x242 $x342)))
 (let (($x99 (= ?x272 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x409 (and $x99 $x384)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x266 (and $x26 $x409)))
 (let (($x32 (and $x242 $x266)))
 (let (($x73 (= ?x424 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x218 (and $x73 $x32)))
 (let (($x122 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x373 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x147 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x373 $x122)))))))
 (let (($x215 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x135 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x215)))))))
 (let (($x220 (bvugt ?x318 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x417 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x95 (=> (bvule ?x318 (bvsub (bvadd ?x318 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x417 $x220)))))))
 (let (($x324 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x326 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x326)))
 (let (($x425 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x157 $x324)))))))
 (let (($x371 (and $x425 $x95)))
 (let (($x158 (and $x371 $x135)))
 (let (($x219 (and $x158 $x147)))
 (let (($x110 (and $x219 $x218)))
 (let (($x360 (=> $x110 $x180)))
 (not $x360)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 251 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x418 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x420 (concat ?x418 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x152 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x215 (bvadd ?x152 (_ bv3 32))))
 (let ((?x138 (concat (select input.dst.llvm-mem ?x215) (concat ?x10 ?x420))))
 (let ((?x377 (bvmul (_ bv4294967295 32) ?x138)))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x260 (concat ?x269 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x122 (bvadd ?x404 (_ bv3 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem ?x122) (concat ?x162 ?x260))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x168 (concat ?x44 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x221 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x220 (bvadd ?x221 (_ bv3 32))))
 (let ((?x113 (concat (select input.dst.llvm-mem ?x220) (concat ?x285 ?x168))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x336)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x235)))
 (let ((?x288 (bvadd (bvadd (bvadd ?x180 ?x113) ?x132) ?x377)))
 (let (($x167 (= (_ bv0 32) ?x288)))
 (let (($x207 (= $x167 true)))
 (let (($x252 (= $x207 true)))
 (let ((?x399 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x409 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x218 (concat ?x409 (concat ?x251 ?x399)))))
 (let (($x191 (= ?x110 input.dst.llvm-%m)))
 (let (($x129 (= $x191 true)))
 (let (($x283 (= (bvand ?x152 (_ bv4294967292 32)) ?x152)))
 (let (($x331 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x340 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x277 (and true $x340)))
 (let (($x335 (= (bvand ?x221 (_ bv4294967292 32)) ?x221)))
 (let (($x225 (and $x335 $x277)))
 (let (($x108 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x152 (bvsub ?x152 (_ bv8 32))) (bvult ?x152 (bvsub ?x152 (_ bv8 32))))))
 (let (($x270 (and (and (and true $x108) $x225) $x331)))
 (let (($x78 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x397 (and true $x78)))
 (let (($x441 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x23 (and $x441 $x397)))
 (let (($x303 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x221 (bvsub ?x221 (_ bv12 32))) (bvult ?x221 (bvsub ?x221 (_ bv12 32))))))
 (let (($x56 (and (and (and true $x441) $x303) $x23)))
 (let (($x89 (and (and $x56 $x270) $x283)))
 (let (($x144 (= input.dst.llvm-%m ?x110)))
 (let (($x109 (and $x144 $x89)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x76 (= (_ bv0 32) ?x292)))
 (let ((?x85 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x334 (and $x248 $x97)))
 (let (($x103 (and $x334 $x76)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x171 $x103)))
 (let (($x189 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x328 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv1 32))) (select input.dst.llvm-mem ?x328))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv2 32))) ?x63))))
 (let ((?x176 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x87 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x134 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x134 (_ bv1 32))))
 (=> $x382 (= ?x176 ?x314))))))))))
 ))
 (let (($x423 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x36 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x134 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x134 (_ bv1 32))))
 (= $x382 (bvuge ?x36 (_ bv1 32))))))))
 ))
 (let (($x120 (forall ((Lambda5 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x87 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x134 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x134 (_ bv0 32))))
 (=> $x321 $x197))))))
 ))
 (let (($x112 (forall ((Lambda5 (_ BitVec 32)) )(let (($x87 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x134 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x134 (_ bv0 32))))
 (= $x321 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x244 (and $x112 $x120)))
 (let (($x304 (and $x244 $x423)))
 (let (($x265 (and $x304 $x189)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x459 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x169)))))))
 (let (($x175 (and (and (and $x459 $x265) $x247) $x109)))
 (let (($x61 (= $x175 true)))
 (let (($x367 (= $x61 true)))
 (let (($x121 (= $x56 true)))
 (let (($x287 (= $x121 true)))
 (let (($x211 (and $x270 $x283)))
 (let (($x142 (= $x211 true)))
 (let (($x289 (= $x142 true)))
 (let (($x100 (and $x289 $x287)))
 (let (($x258 (and $x100 $x367)))
 (let (($x413 (and $x258 $x129)))
 (let (($x242 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x69 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x69 (_ bv0 32))))
 (let (($x333 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x93 (ite $x333 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x93 (_ bv0 32))))
 (let (($x341 (and $x178 $x387)))
 (let (($x74 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x165 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (= ?x165 (_ bv0 32))))
 (let (($x391 (and $x357 $x341)))
 (let (($x94 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x275 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x275 (_ bv0 32))))
 (let (($x34 (and $x62 $x391)))
 (let (($x111 (and $x34 $x413)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x228 (= ?x77 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x381 (bvuge ?x275 (_ bv1 32))))
 (let (($x47 (=> $x381 $x228)))
 (let (($x383 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x406 (= $x381 $x383)))
 (let (($x197 (= false false)))
 (let (($x401 (=> $x62 $x197)))
 (let (($x60 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x62 $x60)))
 (let (($x222 (and $x166 $x401)))
 (let (($x457 (and $x222 $x406)))
 (let (($x405 (and $x457 $x47)))
 (let (($x170 (and $x405 $x111)))
 (let ((?x351 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x155 (= ?x351 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x13 (bvuge ?x165 (_ bv1 32))))
 (let (($x64 (=> $x13 $x155)))
 (let (($x279 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x115 (= $x13 $x279)))
 (let (($x231 (=> $x357 $x197)))
 (let (($x402 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x204 (= $x357 $x402)))
 (let (($x437 (and $x204 $x231)))
 (let (($x438 (and $x437 $x115)))
 (let (($x390 (and $x438 $x64)))
 (let (($x388 (and $x390 $x170)))
 (let ((?x224 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x282 (= ?x224 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x91 (bvuge ?x93 (_ bv1 32))))
 (let (($x182 (=> $x91 $x282)))
 (let (($x164 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x136 (= $x91 $x164)))
 (let (($x400 (=> $x178 $x197)))
 (let (($x54 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x408 (= $x178 $x54)))
 (let (($x363 (and $x408 $x400)))
 (let (($x268 (and $x363 $x136)))
 (let (($x259 (and $x268 $x182)))
 (let (($x12 (and $x259 $x388)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x276 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x261 (bvuge ?x69 (_ bv1 32))))
 (let (($x145 (=> $x261 $x276)))
 (let (($x274 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x6 (= $x261 $x274)))
 (let (($x210 (=> $x387 $x197)))
 (let (($x368 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x284 (= $x387 $x368)))
 (let (($x102 (and $x284 $x210)))
 (let (($x86 (and $x102 $x6)))
 (let (($x410 (and $x86 $x145)))
 (let (($x365 (and $x410 $x12)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x67 (and $x256 $x365)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x374 (and $x92 $x67)))
 (let (($x196 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x160 (and $x196 $x374)))
 (let (($x233 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x433 (and $x233 $x160)))
 (let (($x354 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x159 (and $x354 $x433)))
 (let (($x290 (and $x197 $x159)))
 (let (($x317 (= ?x77 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x213 (and $x317 $x290)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x125 (and $x295 $x213)))
 (let (($x431 (and $x197 $x125)))
 (let (($x184 (= ?x351 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x71 (and $x184 $x431)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x124 (and $x58 $x71)))
 (let (($x297 (and $x197 $x124)))
 (let (($x316 (= ?x224 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x30 (and $x316 $x297)))
 (let (($x378 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x320 (and $x378 $x30)))
 (let (($x458 (and $x197 $x320)))
 (let (($x272 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x273 (and $x272 $x458)))
 (let (($x107 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x305 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x349 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x305 $x107)))))))
 (let (($x192 (bvugt ?x152 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x117 (=> (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x192)))))))
 (let (($x83 (bvugt ?x221 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x15 (=> (bvule ?x221 (bvsub (bvadd ?x221 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x83)))))))
 (let (($x157 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x293 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x326 $x157)))))))
 (let (($x318 (and $x293 $x15)))
 (let (($x187 (and $x318 $x117)))
 (let (($x101 (and $x187 $x349)))
 (let (($x370 (and $x101 $x273)))
 (let (($x323 (=> $x370 $x252)))
 (not $x323)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x418 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x420 (concat ?x418 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x152 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x215 (bvadd ?x152 (_ bv3 32))))
 (let ((?x138 (concat (select input.dst.llvm-mem ?x215) (concat ?x10 ?x420))))
 (let ((?x377 (bvmul (_ bv4294967295 32) ?x138)))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x260 (concat ?x269 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x404 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x122 (bvadd ?x404 (_ bv3 32))))
 (let ((?x132 (concat (select input.dst.llvm-mem ?x122) (concat ?x162 ?x260))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x168 (concat ?x44 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x221 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x220 (bvadd ?x221 (_ bv3 32))))
 (let ((?x113 (concat (select input.dst.llvm-mem ?x220) (concat ?x285 ?x168))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x336)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x235)))
 (let ((?x288 (bvadd (bvadd (bvadd ?x180 ?x113) ?x132) ?x377)))
 (let (($x167 (= (_ bv0 32) ?x288)))
 (let (($x207 (= $x167 true)))
 (let (($x252 (= $x207 true)))
 (let ((?x399 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x409 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x218 (concat ?x409 (concat ?x251 ?x399)))))
 (let (($x191 (= ?x110 input.dst.llvm-%m)))
 (let (($x129 (= $x191 true)))
 (let (($x283 (= (bvand ?x152 (_ bv4294967292 32)) ?x152)))
 (let (($x331 (= (bvand ?x404 (_ bv4294967292 32)) ?x404)))
 (let (($x340 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x404 (bvsub ?x404 (_ bv4 32))) (bvult ?x404 (bvsub ?x404 (_ bv4 32))))))
 (let (($x277 (and true $x340)))
 (let (($x335 (= (bvand ?x221 (_ bv4294967292 32)) ?x221)))
 (let (($x225 (and $x335 $x277)))
 (let (($x108 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x152 (bvsub ?x152 (_ bv8 32))) (bvult ?x152 (bvsub ?x152 (_ bv8 32))))))
 (let (($x270 (and (and (and true $x108) $x225) $x331)))
 (let (($x78 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x397 (and true $x78)))
 (let (($x441 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x23 (and $x441 $x397)))
 (let (($x303 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x221 (bvsub ?x221 (_ bv12 32))) (bvult ?x221 (bvsub ?x221 (_ bv12 32))))))
 (let (($x56 (and (and (and true $x441) $x303) $x23)))
 (let (($x89 (and (and $x56 $x270) $x283)))
 (let (($x144 (= input.dst.llvm-%m ?x110)))
 (let (($x109 (and $x144 $x89)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x76 (= (_ bv0 32) ?x292)))
 (let ((?x85 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x334 (and $x248 $x97)))
 (let (($x103 (and $x334 $x76)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x171 $x103)))
 (let (($x189 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x328 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv1 32))) (select input.dst.llvm-mem ?x328))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x328 (_ bv2 32))) ?x63))))
 (let ((?x176 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x87 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x134 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x134 (_ bv1 32))))
 (=> $x382 (= ?x176 ?x314))))))))))
 ))
 (let (($x423 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x36 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x134 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x382 (bvuge ?x134 (_ bv1 32))))
 (= $x382 (bvuge ?x36 (_ bv1 32))))))))
 ))
 (let (($x120 (forall ((Lambda5 (_ BitVec 32)) )(let (($x197 (= false false)))
 (let (($x87 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x134 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x134 (_ bv0 32))))
 (=> $x321 $x197))))))
 ))
 (let (($x112 (forall ((Lambda5 (_ BitVec 32)) )(let (($x87 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x134 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x134 (_ bv0 32))))
 (= $x321 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x244 (and $x112 $x120)))
 (let (($x304 (and $x244 $x423)))
 (let (($x265 (and $x304 $x189)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x459 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x169)))))))
 (let (($x175 (and (and (and $x459 $x265) $x247) $x109)))
 (let (($x61 (= $x175 true)))
 (let (($x367 (= $x61 true)))
 (let (($x121 (= $x56 true)))
 (let (($x287 (= $x121 true)))
 (let (($x211 (and $x270 $x283)))
 (let (($x142 (= $x211 true)))
 (let (($x289 (= $x142 true)))
 (let (($x100 (and $x289 $x287)))
 (let (($x258 (and $x100 $x367)))
 (let (($x413 (and $x258 $x129)))
 (let (($x242 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x69 (ite $x242 (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x69 (_ bv0 32))))
 (let (($x333 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x93 (ite $x333 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x93 (_ bv0 32))))
 (let (($x341 (and $x178 $x387)))
 (let (($x74 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x165 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x357 (= ?x165 (_ bv0 32))))
 (let (($x391 (and $x357 $x341)))
 (let (($x94 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x275 (ite $x94 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x275 (_ bv0 32))))
 (let (($x34 (and $x62 $x391)))
 (let (($x111 (and $x34 $x413)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x228 (= ?x77 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x381 (bvuge ?x275 (_ bv1 32))))
 (let (($x47 (=> $x381 $x228)))
 (let (($x383 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x406 (= $x381 $x383)))
 (let (($x197 (= false false)))
 (let (($x401 (=> $x62 $x197)))
 (let (($x60 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x166 (= $x62 $x60)))
 (let (($x222 (and $x166 $x401)))
 (let (($x457 (and $x222 $x406)))
 (let (($x405 (and $x457 $x47)))
 (let (($x170 (and $x405 $x111)))
 (let ((?x351 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x155 (= ?x351 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x13 (bvuge ?x165 (_ bv1 32))))
 (let (($x64 (=> $x13 $x155)))
 (let (($x279 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x115 (= $x13 $x279)))
 (let (($x231 (=> $x357 $x197)))
 (let (($x402 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x204 (= $x357 $x402)))
 (let (($x437 (and $x204 $x231)))
 (let (($x438 (and $x437 $x115)))
 (let (($x390 (and $x438 $x64)))
 (let (($x388 (and $x390 $x170)))
 (let ((?x224 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x282 (= ?x224 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x91 (bvuge ?x93 (_ bv1 32))))
 (let (($x182 (=> $x91 $x282)))
 (let (($x164 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x136 (= $x91 $x164)))
 (let (($x400 (=> $x178 $x197)))
 (let (($x54 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x408 (= $x178 $x54)))
 (let (($x363 (and $x408 $x400)))
 (let (($x268 (and $x363 $x136)))
 (let (($x259 (and $x268 $x182)))
 (let (($x12 (and $x259 $x388)))
 (let ((?x105 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x276 (= ?x105 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x261 (bvuge ?x69 (_ bv1 32))))
 (let (($x145 (=> $x261 $x276)))
 (let (($x274 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x6 (= $x261 $x274)))
 (let (($x210 (=> $x387 $x197)))
 (let (($x368 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x284 (= $x387 $x368)))
 (let (($x102 (and $x284 $x210)))
 (let (($x86 (and $x102 $x6)))
 (let (($x410 (and $x86 $x145)))
 (let (($x365 (and $x410 $x12)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x67 (and $x256 $x365)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x374 (and $x92 $x67)))
 (let (($x196 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x160 (and $x196 $x374)))
 (let (($x233 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x433 (and $x233 $x160)))
 (let (($x354 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x159 (and $x354 $x433)))
 (let (($x290 (and $x197 $x159)))
 (let (($x317 (= ?x77 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x213 (and $x317 $x290)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x125 (and $x295 $x213)))
 (let (($x431 (and $x197 $x125)))
 (let (($x184 (= ?x351 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x71 (and $x184 $x431)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x124 (and $x58 $x71)))
 (let (($x297 (and $x197 $x124)))
 (let (($x316 (= ?x224 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x30 (and $x316 $x297)))
 (let (($x378 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x320 (and $x378 $x30)))
 (let (($x458 (and $x197 $x320)))
 (let (($x272 (= ?x105 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x273 (and $x272 $x458)))
 (let (($x107 (bvugt ?x404 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x305 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x349 (=> (bvule ?x404 (bvsub (bvadd ?x404 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x305 $x107)))))))
 (let (($x192 (bvugt ?x152 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x117 (=> (bvule ?x152 (bvsub (bvadd ?x152 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x192)))))))
 (let (($x83 (bvugt ?x221 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x15 (=> (bvule ?x221 (bvsub (bvadd ?x221 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x83)))))))
 (let (($x157 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x293 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x326 $x157)))))))
 (let (($x318 (and $x293 $x15)))
 (let (($x187 (and $x318 $x117)))
 (let (($x101 (and $x187 $x349)))
 (let (($x370 (and $x101 $x273)))
 (let (($x323 (=> $x370 $x252)))
 (not $x323)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 251 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x261 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x261 (_ bv1 32))))
 (let (($x274 (= ?x261 (_ bv0 32))))
 (let (($x153 (or $x274 $x410)))
 (let (($x363 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x91 (ite $x363 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x91 (_ bv1 32))))
 (let (($x123 (and $x259 $x153)))
 (let (($x164 (= ?x91 (_ bv0 32))))
 (let (($x31 (and $x164 $x153)))
 (let (($x119 (or $x31 $x123)))
 (let (($x437 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x13 (ite $x437 (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x13 (_ bv1 32))))
 (let (($x183 (and $x390 $x119)))
 (let (($x279 (= ?x13 (_ bv0 32))))
 (let (($x10 (and $x279 $x119)))
 (let (($x418 (or $x10 $x183)))
 (let (($x222 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x381 (ite $x222 (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x381 (_ bv1 32))))
 (let (($x420 (and $x405 $x418)))
 (let (($x383 (= ?x381 (_ bv0 32))))
 (let (($x310 (and $x383 $x418)))
 (let (($x57 (or $x310 $x420)))
 (let (($x138 (or false $x57)))
 (let (($x377 (= $x138 true)))
 (let (($x288 (= $x377 true)))
 (let ((?x297 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x329 (concat ?x343 (concat ?x370 (concat ?x320 ?x297)))))
 (let (($x385 (= ?x329 input.dst.llvm-%m)))
 (let (($x146 (= $x385 true)))
 (let (($x374 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x160 (and true $x374)))
 (let (($x258 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x433 (and $x258 $x160)))
 (let ((?x199 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x191 (bvsub ?x199 (_ bv12 32))))
 (let (($x170 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x199 ?x191) (bvult ?x199 ?x191))))
 (let (($x213 (and (and (and true $x258) $x170) $x433)))
 (let (($x125 (= $x213 true)))
 (let (($x431 (= $x125 true)))
 (let ((?x116 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x352 (= (bvand ?x116 (_ bv4294967292 32)) ?x116)))
 (let ((?x215 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x399 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x384 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x215 (bvsub ?x215 (_ bv4 32))) (bvult ?x215 (bvsub ?x215 (_ bv4 32))))))
 (let (($x409 (and true $x384)))
 (let (($x103 (= (bvand ?x199 (_ bv4294967292 32)) ?x199)))
 (let (($x177 (and $x103 $x409)))
 (let (($x334 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x116 (bvsub ?x116 (_ bv8 32))) (bvult ?x116 (bvsub ?x116 (_ bv8 32))))))
 (let (($x110 (and (and (and true $x334) $x177) $x399)))
 (let (($x89 (and $x110 $x352)))
 (let (($x109 (= $x89 true)))
 (let (($x175 (= $x109 true)))
 (let (($x255 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x346))))
 (let ((?x249 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x210 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x230 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x230 (_ bv1 32))))
 (=> $x87 (= ?x249 ?x190))))))))))
 ))
 (let (($x321 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x230 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x230 (_ bv1 32))))
 (= $x87 (bvuge ?x287 (_ bv1 32))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (= false false)))
 (let (($x210 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x230 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x230 (_ bv0 32))))
 (=> $x443 $x300))))))
 ))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let (($x210 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x230 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x230 (_ bv0 32))))
 (= $x443 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x257 (and $x114 $x75)))
 (let (($x439 (and $x257 $x321)))
 (let (($x189 (and $x439 $x255)))
 (let (($x265 (= $x189 true)))
 (let (($x456 (= $x265 true)))
 (let ((?x211 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x142 (= (_ bv0 32) ?x211)))
 (let ((?x270 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x270)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (and $x331 $x311)))
 (let (($x289 (and $x283 $x142)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x98 $x289)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x427 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x27)))))))
 (let (($x441 (and $x427 $x50)))
 (let (($x376 (= $x441 true)))
 (let (($x358 (= $x376 true)))
 (let (($x238 (and $x358 $x456)))
 (let (($x61 (and $x238 $x175)))
 (let (($x71 (and $x61 $x431)))
 (let (($x336 (and $x71 $x146)))
 (let ((?x233 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x65 (= ?x233 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x14 (=> $x405 $x65)))
 (let (($x341 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x391 (= $x405 $x341)))
 (let (($x300 (= false false)))
 (let (($x228 (=> $x383 $x300)))
 (let (($x457 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x415 (= $x383 $x457)))
 (let (($x47 (and $x415 $x228)))
 (let (($x34 (and $x47 $x391)))
 (let (($x37 (and $x34 $x14)))
 (let (($x235 (and $x37 $x336)))
 (let ((?x173 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x60 (= ?x173 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x166 (=> $x390 $x60)))
 (let (($x94 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x275 (= $x390 $x94)))
 (let (($x155 (=> $x279 $x300)))
 (let (($x438 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x81 (= $x279 $x438)))
 (let (($x64 (and $x81 $x155)))
 (let (($x62 (and $x64 $x275)))
 (let (($x401 (and $x62 $x166)))
 (let (($x180 (and $x401 $x235)))
 (let ((?x395 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x402 (= ?x395 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x204 (=> $x259 $x402)))
 (let (($x74 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x165 (= $x259 $x74)))
 (let (($x282 (=> $x164 $x300)))
 (let (($x268 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x200 (= $x164 $x268)))
 (let (($x182 (and $x200 $x282)))
 (let (($x357 (and $x182 $x165)))
 (let (($x231 (and $x357 $x204)))
 (let (($x216 (and $x231 $x180)))
 (let ((?x122 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x54 (= ?x122 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x408 (=> $x410 $x54)))
 (let (($x333 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x93 (= $x410 $x333)))
 (let (($x276 (=> $x274 $x300)))
 (let (($x86 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x241 (= $x274 $x86)))
 (let (($x145 (and $x241 $x276)))
 (let (($x178 (and $x145 $x93)))
 (let (($x400 (and $x178 $x408)))
 (let (($x250 (and $x400 $x216)))
 (let (($x284 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x285 (and $x284 $x250)))
 (let (($x313 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x366 (and $x313 $x285)))
 (let (($x69 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x44 (and $x69 $x366)))
 (let (($x256 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x360 (and $x256 $x44)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x168 (and $x92 $x360)))
 (let (($x70 (and $x300 $x168)))
 (let (($x196 (= ?x233 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x113 (and $x196 $x70)))
 (let (($x308 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x264 (and $x308 $x113)))
 (let (($x246 (and $x300 $x264)))
 (let (($x263 (= ?x173 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x239 (and $x263 $x246)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x162 (and $x77 $x239)))
 (let (($x345 (and $x300 $x162)))
 (let (($x212 (= ?x395 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x269 (and $x212 $x345)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x419 (and $x58 $x269)))
 (let (($x260 (and $x300 $x419)))
 (let (($x224 (= ?x122 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x307 (and $x224 $x260)))
 (let (($x147 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x426 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x215 (_ bv3 32)))))
 (let (($x272 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x426 $x147)))))))
 (let (($x135 (bvugt ?x116 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x116 (_ bv3 32)))))
 (let (($x373 (=> (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x135)))))))
 (let (($x95 (bvugt ?x199 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x199 (_ bv3 32)))))
 (let (($x201 (=> (bvule ?x199 (bvsub (bvadd ?x199 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x95)))))))
 (let (($x394 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x417 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x394)))))))
 (let (($x278 (and $x417 $x201)))
 (let (($x133 (and $x278 $x373)))
 (let (($x424 (and $x133 $x272)))
 (let (($x132 (and $x424 $x307)))
 (let (($x167 (=> $x132 $x288)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x261 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x410 (bvuge ?x261 (_ bv1 32))))
 (let (($x274 (= ?x261 (_ bv0 32))))
 (let (($x153 (or $x274 $x410)))
 (let (($x363 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x91 (ite $x363 (_ bv1 32) (_ bv0 32))))
 (let (($x259 (bvuge ?x91 (_ bv1 32))))
 (let (($x123 (and $x259 $x153)))
 (let (($x164 (= ?x91 (_ bv0 32))))
 (let (($x31 (and $x164 $x153)))
 (let (($x119 (or $x31 $x123)))
 (let (($x437 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x13 (ite $x437 (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x13 (_ bv1 32))))
 (let (($x183 (and $x390 $x119)))
 (let (($x279 (= ?x13 (_ bv0 32))))
 (let (($x10 (and $x279 $x119)))
 (let (($x418 (or $x10 $x183)))
 (let (($x222 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x381 (ite $x222 (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x381 (_ bv1 32))))
 (let (($x420 (and $x405 $x418)))
 (let (($x383 (= ?x381 (_ bv0 32))))
 (let (($x310 (and $x383 $x418)))
 (let (($x57 (or $x310 $x420)))
 (let (($x138 (or false $x57)))
 (let (($x377 (= $x138 true)))
 (let (($x288 (= $x377 true)))
 (let ((?x297 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x329 (concat ?x343 (concat ?x370 (concat ?x320 ?x297)))))
 (let (($x385 (= ?x329 input.dst.llvm-%m)))
 (let (($x146 (= $x385 true)))
 (let (($x374 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x160 (and true $x374)))
 (let (($x258 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x433 (and $x258 $x160)))
 (let ((?x199 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x191 (bvsub ?x199 (_ bv12 32))))
 (let (($x170 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x199 ?x191) (bvult ?x199 ?x191))))
 (let (($x213 (and (and (and true $x258) $x170) $x433)))
 (let (($x125 (= $x213 true)))
 (let (($x431 (= $x125 true)))
 (let ((?x116 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x352 (= (bvand ?x116 (_ bv4294967292 32)) ?x116)))
 (let ((?x215 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x399 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x384 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x215 (bvsub ?x215 (_ bv4 32))) (bvult ?x215 (bvsub ?x215 (_ bv4 32))))))
 (let (($x409 (and true $x384)))
 (let (($x103 (= (bvand ?x199 (_ bv4294967292 32)) ?x199)))
 (let (($x177 (and $x103 $x409)))
 (let (($x334 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x116 (bvsub ?x116 (_ bv8 32))) (bvult ?x116 (bvsub ?x116 (_ bv8 32))))))
 (let (($x110 (and (and (and true $x334) $x177) $x399)))
 (let (($x89 (and $x110 $x352)))
 (let (($x109 (= $x89 true)))
 (let (($x175 (= $x109 true)))
 (let (($x255 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul Lambda5 (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x346))))
 (let ((?x249 (input.spec-%var-m-0.1.1 Lambda5)))
 (let (($x210 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x230 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x230 (_ bv1 32))))
 (=> $x87 (= ?x249 ?x190))))))))))
 ))
 (let (($x321 (forall ((Lambda5 (_ BitVec 32)) )(let ((?x287 (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x210 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x230 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x230 (_ bv1 32))))
 (= $x87 (bvuge ?x287 (_ bv1 32))))))))
 ))
 (let (($x75 (forall ((Lambda5 (_ BitVec 32)) )(let (($x300 (= false false)))
 (let (($x210 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x230 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x230 (_ bv0 32))))
 (=> $x443 $x300))))))
 ))
 (let (($x114 (forall ((Lambda5 (_ BitVec 32)) )(let (($x210 (input.spec-%var-m-0.0.1 Lambda5)))
 (let ((?x230 (ite $x210 (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x230 (_ bv0 32))))
 (= $x443 (= (ite (and (bvule (_ bv0 32) Lambda5) (bvult Lambda5 (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x257 (and $x114 $x75)))
 (let (($x439 (and $x257 $x321)))
 (let (($x189 (and $x439 $x255)))
 (let (($x265 (= $x189 true)))
 (let (($x456 (= $x265 true)))
 (let ((?x211 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x142 (= (_ bv0 32) ?x211)))
 (let ((?x270 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x270)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (and $x331 $x311)))
 (let (($x289 (and $x283 $x142)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x98 $x289)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x427 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x43 $x27)))))))
 (let (($x441 (and $x427 $x50)))
 (let (($x376 (= $x441 true)))
 (let (($x358 (= $x376 true)))
 (let (($x238 (and $x358 $x456)))
 (let (($x61 (and $x238 $x175)))
 (let (($x71 (and $x61 $x431)))
 (let (($x336 (and $x71 $x146)))
 (let ((?x233 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x65 (= ?x233 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x14 (=> $x405 $x65)))
 (let (($x341 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x391 (= $x405 $x341)))
 (let (($x300 (= false false)))
 (let (($x228 (=> $x383 $x300)))
 (let (($x457 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x415 (= $x383 $x457)))
 (let (($x47 (and $x415 $x228)))
 (let (($x34 (and $x47 $x391)))
 (let (($x37 (and $x34 $x14)))
 (let (($x235 (and $x37 $x336)))
 (let ((?x173 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x60 (= ?x173 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x166 (=> $x390 $x60)))
 (let (($x94 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x275 (= $x390 $x94)))
 (let (($x155 (=> $x279 $x300)))
 (let (($x438 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x81 (= $x279 $x438)))
 (let (($x64 (and $x81 $x155)))
 (let (($x62 (and $x64 $x275)))
 (let (($x401 (and $x62 $x166)))
 (let (($x180 (and $x401 $x235)))
 (let ((?x395 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x402 (= ?x395 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x204 (=> $x259 $x402)))
 (let (($x74 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x165 (= $x259 $x74)))
 (let (($x282 (=> $x164 $x300)))
 (let (($x268 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x200 (= $x164 $x268)))
 (let (($x182 (and $x200 $x282)))
 (let (($x357 (and $x182 $x165)))
 (let (($x231 (and $x357 $x204)))
 (let (($x216 (and $x231 $x180)))
 (let ((?x122 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x54 (= ?x122 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x408 (=> $x410 $x54)))
 (let (($x333 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x93 (= $x410 $x333)))
 (let (($x276 (=> $x274 $x300)))
 (let (($x86 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x241 (= $x274 $x86)))
 (let (($x145 (and $x241 $x276)))
 (let (($x178 (and $x145 $x93)))
 (let (($x400 (and $x178 $x408)))
 (let (($x250 (and $x400 $x216)))
 (let (($x284 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x285 (and $x284 $x250)))
 (let (($x313 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x366 (and $x313 $x285)))
 (let (($x69 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x44 (and $x69 $x366)))
 (let (($x256 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x360 (and $x256 $x44)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x168 (and $x92 $x360)))
 (let (($x70 (and $x300 $x168)))
 (let (($x196 (= ?x233 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x113 (and $x196 $x70)))
 (let (($x308 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x264 (and $x308 $x113)))
 (let (($x246 (and $x300 $x264)))
 (let (($x263 (= ?x173 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x239 (and $x263 $x246)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x162 (and $x77 $x239)))
 (let (($x345 (and $x300 $x162)))
 (let (($x212 (= ?x395 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x269 (and $x212 $x345)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x419 (and $x58 $x269)))
 (let (($x260 (and $x300 $x419)))
 (let (($x224 (= ?x122 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x307 (and $x224 $x260)))
 (let (($x147 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x426 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x215 (_ bv3 32)))))
 (let (($x272 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x426 $x147)))))))
 (let (($x135 (bvugt ?x116 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x116 (_ bv3 32)))))
 (let (($x373 (=> (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x135)))))))
 (let (($x95 (bvugt ?x199 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x199 (_ bv3 32)))))
 (let (($x201 (=> (bvule ?x199 (bvsub (bvadd ?x199 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x95)))))))
 (let (($x394 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x417 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x137 $x394)))))))
 (let (($x278 (and $x417 $x201)))
 (let (($x133 (and $x278 $x373)))
 (let (($x424 (and $x133 $x272)))
 (let (($x132 (and $x424 $x307)))
 (let (($x167 (=> $x132 $x288)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.462362/query
