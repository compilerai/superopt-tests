==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x6 $x12)))
 (let (($x17 (and $x11 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x6 $x12)))
 (let (($x17 (and $x11 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv1661363587 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3191897543 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x467 (= true false)))
 (let (($x468 (= $x467 true)))
 (let ((?x451 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x453 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x460 (concat ?x459 (concat ?x456 (concat ?x453 ?x451)))))
 (let (($x461 (= ?x460 input.dst.llvm-%m2)))
 (let (($x462 (= $x461 true)))
 (let (($x463 (= $x462 true)))
 (let ((?x436 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x438 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x444 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x445 (concat ?x444 (concat ?x441 (concat ?x438 ?x436)))))
 (let (($x446 (= ?x445 input.dst.llvm-%m1)))
 (let (($x447 (= $x446 true)))
 (let (($x448 (= $x447 true)))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x314 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x420))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 ?x426))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 $x295))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (=> $x22 $x66)))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 $x283))))))
 ))
 (let (($x390 (and $x389 $x56)))
 (let (($x400 (and $x390 $x399)))
 (let (($x430 (and $x400 $x429)))
 (let (($x431 (= $x430 true)))
 (let (($x432 (= $x431 true)))
 (let (($x433 (= $x432 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x315 (bvadd ?x314 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x319))))
 (let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 ?x325))))))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 $x295))))))
 ))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (=> $x123 $x66)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 $x283))))))
 ))
 (let (($x286 (and $x285 $x128)))
 (let (($x298 (and $x286 $x297)))
 (let (($x329 (and $x298 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let ((?x197 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x198 (= (_ bv0 32) ?x197)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (and $x187 $x190)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x186 $x191)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x176 $x177)))
 (let (($x179 (not $x178)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x173 $x174)))
 (let (($x181 (and (not $x175) $x179)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x167 $x168)))
 (let (($x170 (not $x169)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x162 $x164)))
 (let (($x172 (and (not $x165) $x170)))
 (let (($x204 (and (and (and (and (and (and $x172 $x181) $x183) $x185) $x192) $x194) $x196)))
 (let (($x205 (and $x204 $x198)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x333 (and $x208 $x332)))
 (let (($x434 (and $x333 $x433)))
 (let (($x449 (and $x434 $x448)))
 (let (($x464 (and $x449 $x463)))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 (bvuge ?x119 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 (= ?x119 (_ bv0 32)))))))
 ))
 (let (($x129 (and $x125 $x128)))
 (let (($x145 (and $x129 $x144)))
 (let (($x159 (and $x145 $x158)))
 (let (($x465 (and $x159 $x464)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 (bvuge ?x73 (_ bv1 32)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 (= ?x73 (_ bv0 32)))))))
 ))
 (let (($x47 (and $x34 $x56)))
 (let (($x42 (and $x47 $x28)))
 (let (($x84 (and $x42 $x83)))
 (let (($x466 (and $x84 $x465)))
 (let (($x469 (=> $x466 $x468)))
 (not $x469))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x467 (= true false)))
 (let (($x468 (= $x467 true)))
 (let ((?x451 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x453 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x456 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x459 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x460 (concat ?x459 (concat ?x456 (concat ?x453 ?x451)))))
 (let (($x461 (= ?x460 input.dst.llvm-%m2)))
 (let (($x462 (= $x461 true)))
 (let (($x463 (= $x462 true)))
 (let ((?x436 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x438 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x444 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x445 (concat ?x444 (concat ?x441 (concat ?x438 ?x436)))))
 (let (($x446 (= ?x445 input.dst.llvm-%m1)))
 (let (($x447 (= $x446 true)))
 (let (($x448 (= $x447 true)))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x416 (bvadd ?x314 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv1 32))) (select input.dst.llvm-mem ?x416))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x416 (_ bv2 32))) ?x420))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 ?x426))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 $x295))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (=> $x22 $x66)))))
 ))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 $x283))))))
 ))
 (let (($x390 (and $x389 $x56)))
 (let (($x400 (and $x390 $x399)))
 (let (($x430 (and $x400 $x429)))
 (let (($x431 (= $x430 true)))
 (let (($x432 (= $x431 true)))
 (let (($x433 (= $x432 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x315 (bvadd ?x314 input.dst.llvm-%m1)))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x319))))
 (let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 ?x325))))))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x282 (_ bv1 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 $x295))))))
 ))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (=> $x123 $x66)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (= ?x282 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 $x283))))))
 ))
 (let (($x286 (and $x285 $x128)))
 (let (($x298 (and $x286 $x297)))
 (let (($x329 (and $x298 $x328)))
 (let (($x330 (= $x329 true)))
 (let (($x331 (= $x330 true)))
 (let (($x332 (= $x331 true)))
 (let ((?x197 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x198 (= (_ bv0 32) ?x197)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x196 (= (_ bv0 32) ?x195)))
 (let ((?x193 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x189)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (and $x187 $x190)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x186 $x191)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x176 $x177)))
 (let (($x179 (not $x178)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x173 $x174)))
 (let (($x181 (and (not $x175) $x179)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x167 $x168)))
 (let (($x170 (not $x169)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x162 $x164)))
 (let (($x172 (and (not $x165) $x170)))
 (let (($x204 (and (and (and (and (and (and $x172 $x181) $x183) $x185) $x192) $x194) $x196)))
 (let (($x205 (and $x204 $x198)))
 (let (($x206 (= $x205 true)))
 (let (($x207 (= $x206 true)))
 (let (($x208 (= $x207 true)))
 (let (($x333 (and $x208 $x332)))
 (let (($x434 (and $x333 $x433)))
 (let (($x449 (and $x434 $x448)))
 (let (($x464 (and $x449 $x463)))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (=> $x142 (= ?x155 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x144 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x122 (_ bv1 32))))
 (= $x142 (bvuge ?x119 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x122 (_ bv0 32))))
 (= $x123 (= ?x119 (_ bv0 32)))))))
 ))
 (let (($x129 (and $x125 $x128)))
 (let (($x145 (and $x129 $x144)))
 (let (($x159 (and $x145 $x158)))
 (let (($x465 (and $x159 $x464)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (=> $x72 (= ?x80 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (bvuge ?x5 (_ bv1 32))))
 (= $x72 (bvuge ?x73 (_ bv1 32)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x73 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x5 (_ bv0 32))))
 (= $x22 (= ?x73 (_ bv0 32)))))))
 ))
 (let (($x47 (and $x34 $x56)))
 (let (($x42 (and $x47 $x28)))
 (let (($x84 (and $x42 $x83)))
 (let (($x466 (and $x84 $x465)))
 (let (($x469 (=> $x466 $x468)))
 (not $x469))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x2c9dffed)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x98008000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00080001) #x80
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #x00000006) #x9d
    (ite (= x!0 #x00080003) #x98
    (ite (= x!0 #x00000007) #x2c
    (ite (= x!0 #x00000004) #xed
      #x00)))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00080003)
                                      (k!13 #x00080002)
                                      (k!13 #x00080001)
                                      (k!13 #x00080000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8117e448)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdaddd4a4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x3fbf7f98)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfffdfbfc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdaddd4a7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8117e44b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdaddd4a4)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8117e448)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdaddd4a7) #xff
    (ite (= x!0 #xdaddd4a4) #xfc
    (ite (= x!0 #x8117e449) #x7f
    (ite (= x!0 #x8117e44b) #x3f
    (ite (= x!0 #xdaddd4a6) #xfd
    (ite (= x!0 #xdaddd4a5) #xfb
    (ite (= x!0 #x8117e44a) #xbf
    (ite (= x!0 #x8117e448) #x98
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xdaddd4a7)
                                      (k!13 #xdaddd4a6)
                                      (k!13 #xdaddd4a5)
                                      (k!13 #xdaddd4a4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x8117e44b)
                                      (k!13 #x8117e44a)
                                      (k!13 #x8117e449)
                                      (k!13 #x8117e448))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x131 (= (_ bv0 32) ?x130)))
 (let ((?x278 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x126 (= (_ bv0 32) ?x278)))
 (let ((?x276 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x276)))
 (let ((?x113 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x273 (and $x112 $x274)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x111 $x273)))
 (let (($x464 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x462 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x452 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x451 (and $x452 $x453)))
 (let (($x454 (not $x451)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x459 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x456 (and $x459 $x455)))
 (let (($x460 (and (not $x456) $x454)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x445 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x447 (and $x445 $x446)))
 (let (($x448 (not $x447)))
 (let (($x436 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x439 (and $x437 $x436)))
 (let (($x458 (and (not $x439) $x448)))
 (let (($x57 (and (and (and (and (and (and $x458 $x460) $x462) $x464) $x275) $x277) $x126)))
 (let (($x29 (and $x57 $x131)))
 (let (($x471 (= $x29 true)))
 (let (($x472 (= $x471 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x149 (concat ?x139 (concat ?x135 ?x117)))))
 (let (($x152 (= input.dst.llvm-%m2 ?x151)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x110 (concat ?x107 (concat ?x103 ?x105)))))
 (let (($x115 (= input.dst.llvm-%m1 ?x114)))
 (let (($x153 (and $x115 $x152)))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x401 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x412))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 ?x407))))))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 $x245))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (=> $x123 $x175)))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 $x235))))))
 ))
 (let (($x380 (and $x377 $x174)))
 (let (($x387 (and $x380 $x12)))
 (let (($x414 (and $x387 $x60)))
 (let (($x15 (and $x414 $x153)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x265 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x259))))
 (let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 ?x269))))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 $x245))))))
 ))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (=> $x320 $x175)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 $x235))))))
 ))
 (let (($x238 (and $x237 $x319)))
 (let (($x89 (and $x238 $x92)))
 (let (($x272 (and $x89 $x271)))
 (let (($x444 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x433 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x11 (and (and (and (and (and (and $x433 $x444) $x458) $x460) $x462) $x464) $x272)))
 (let (($x77 (and (and (and (and (and $x11 $x275) $x277) $x126) $x131) $x15)))
 (let (($x18 (= $x77 true)))
 (let (($x23 (= $x18 true)))
 (let (($x74 (= $x23 true)))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 (bvuge ?x315 (_ bv1 32)))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 (= ?x315 (_ bv0 32)))))))
 ))
 (let (($x322 (and $x317 $x319)))
 (let (($x334 (and $x322 $x400)))
 (let (($x429 (and $x334 $x428)))
 (let (($x8 (and $x429 $x74)))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 (bvuge ?x282 (_ bv1 32)))))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 (= ?x282 (_ bv0 32)))))))
 ))
 (let (($x178 (and $x80 $x174)))
 (let (($x155 (and $x178 $x124)))
 (let (($x183 (and $x155 $x202)))
 (let (($x41 (and $x183 $x8)))
 (let (($x473 (=> $x41 $x472)))
 (not $x473))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x131 (= (_ bv0 32) ?x130)))
 (let ((?x278 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x126 (= (_ bv0 32) ?x278)))
 (let ((?x276 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x276)))
 (let ((?x113 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x273 (and $x112 $x274)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x111 $x273)))
 (let (($x464 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x462 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x452 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x451 (and $x452 $x453)))
 (let (($x454 (not $x451)))
 (let (($x455 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x459 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x456 (and $x459 $x455)))
 (let (($x460 (and (not $x456) $x454)))
 (let (($x446 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x445 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x447 (and $x445 $x446)))
 (let (($x448 (not $x447)))
 (let (($x436 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x437 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x439 (and $x437 $x436)))
 (let (($x458 (and (not $x439) $x448)))
 (let (($x57 (and (and (and (and (and (and $x458 $x460) $x462) $x464) $x275) $x277) $x126)))
 (let (($x29 (and $x57 $x131)))
 (let (($x471 (= $x29 true)))
 (let (($x472 (= $x471 true)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x151 (concat ?x149 (concat ?x139 (concat ?x135 ?x117)))))
 (let (($x152 (= input.dst.llvm-%m2 ?x151)))
 (let ((?x105 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x110 (concat ?x107 (concat ?x103 ?x105)))))
 (let (($x115 (= input.dst.llvm-%m1 ?x114)))
 (let (($x153 (and $x115 $x152)))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x401 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x412))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 ?x407))))))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 $x245))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (=> $x123 $x175)))))
 ))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 $x235))))))
 ))
 (let (($x380 (and $x377 $x174)))
 (let (($x387 (and $x380 $x12)))
 (let (($x414 (and $x387 $x60)))
 (let (($x15 (and $x414 $x153)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x265 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x259))))
 (let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 ?x269))))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (bvuge ?x233 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 $x245))))))
 ))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x175 (= false false)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (=> $x320 $x175)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x233 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 $x235))))))
 ))
 (let (($x238 (and $x237 $x319)))
 (let (($x89 (and $x238 $x92)))
 (let (($x272 (and $x89 $x271)))
 (let (($x444 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x433 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x11 (and (and (and (and (and (and $x433 $x444) $x458) $x460) $x462) $x464) $x272)))
 (let (($x77 (and (and (and (and (and $x11 $x275) $x277) $x126) $x131) $x15)))
 (let (($x18 (= $x77 true)))
 (let (($x23 (= $x18 true)))
 (let (($x74 (= $x23 true)))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (=> $x398 (= ?x423 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (bvuge ?x225 (_ bv1 32))))
 (= $x398 (bvuge ?x315 (_ bv1 32)))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x315 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x225 (_ bv0 32))))
 (= $x320 (= ?x315 (_ bv0 32)))))))
 ))
 (let (($x322 (and $x317 $x319)))
 (let (($x334 (and $x322 $x400)))
 (let (($x429 (and $x334 $x428)))
 (let (($x8 (and $x429 $x74)))
 (let (($x202 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (=> $x84 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x211 (_ bv1 32))))
 (= $x84 (bvuge ?x282 (_ bv1 32)))))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x282 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (= ?x211 (_ bv0 32))))
 (= $x123 (= ?x282 (_ bv0 32)))))))
 ))
 (let (($x178 (and $x80 $x174)))
 (let (($x155 (and $x178 $x124)))
 (let (($x183 (and $x155 $x202)))
 (let (($x41 (and $x183 $x8)))
 (let (($x473 (=> $x41 $x472)))
 (not $x473))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x144 (= (_ bv1069514648 32) input.dst.llvm-%m2)))
 (let (($x154 (= $x144 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x388 (concat ?x332 (concat ?x329 (concat ?x214 ?x286)))))
 (let (($x389 (= input.dst.llvm-%m2 ?x388)))
 (let ((?x397 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x283 (concat ?x207 (concat ?x206 (concat ?x20 ?x397)))))
 (let (($x284 (= input.dst.llvm-%m1 ?x283)))
 (let (($x425 (and $x284 $x389)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x346 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x59))))
 (let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 ?x394))))))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 $x216))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (=> $x423 $x427)))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 $x7))))))
 ))
 (let (($x368 (and $x71 $x430)))
 (let (($x373 (and $x368 $x372)))
 (let (($x393 (and $x373 $x69)))
 (let (($x421 (and $x393 $x425)))
 (let ((?x221 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x224 (= (_ bv0 32) ?x221)))
 (let ((?x227 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x223 (= (_ bv0 32) ?x227)))
 (let ((?x297 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (and $x229 $x226)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x362 $x295)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x346 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x353))))
 (let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 ?x361))))))))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 $x216))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (=> $x272 $x427)))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 $x7))))))
 ))
 (let (($x210 (and $x212 $x274)))
 (let (($x343 (and $x210 $x435)))
 (let (($x220 (and $x343 $x359)))
 (let (($x43 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x152 $x153)))
 (let (($x77 (not $x15)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x136 $x140)))
 (let (($x23 (and (not $x151) $x77)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x149 $x137)))
 (let (($x134 (not $x139)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x104 $x114)))
 (let (($x117 (and (not $x115) $x134)))
 (let (($x102 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x110 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x159 (and (and (and (and (and (and $x110 $x102) $x117) $x23) $x8) $x43) $x220)))
 (let (($x279 (and (and (and (and (and $x159 $x296) $x222) $x223) $x224) $x421)))
 (let (($x161 (= $x279 true)))
 (let (($x79 (= $x161 true)))
 (let (($x81 (= $x79 true)))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 (bvuge ?x269 (_ bv1 32)))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 (= ?x269 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x111 $x274)))
 (let (($x12 (and $x273 $x6)))
 (let (($x413 (and $x12 $x410)))
 (let (($x82 (and $x413 $x81)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x431 (and $x426 $x430)))
 (let (($x446 (and $x431 $x445)))
 (let (($x78 (and $x446 $x460)))
 (let (($x166 (and $x78 $x82)))
 (let (($x160 (=> $x166 $x154)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x144 (= (_ bv1069514648 32) input.dst.llvm-%m2)))
 (let (($x154 (= $x144 true)))
 (let ((?x286 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x388 (concat ?x332 (concat ?x329 (concat ?x214 ?x286)))))
 (let (($x389 (= input.dst.llvm-%m2 ?x388)))
 (let ((?x397 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x283 (concat ?x207 (concat ?x206 (concat ?x20 ?x397)))))
 (let (($x284 (= input.dst.llvm-%m1 ?x283)))
 (let (($x425 (and $x284 $x389)))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x346 input.dst.llvm-%m2)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x59))))
 (let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 ?x394))))))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 $x216))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (=> $x423 $x427)))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 $x7))))))
 ))
 (let (($x368 (and $x71 $x430)))
 (let (($x373 (and $x368 $x372)))
 (let (($x393 (and $x373 $x69)))
 (let (($x421 (and $x393 $x425)))
 (let ((?x221 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x224 (= (_ bv0 32) ?x221)))
 (let ((?x227 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x223 (= (_ bv0 32) ?x227)))
 (let ((?x297 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x297)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (and $x229 $x226)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x296 (and $x362 $x295)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x346 input.dst.llvm-%m1)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x353))))
 (let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 ?x361))))))))))
 ))
 (let (($x435 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x101 (_ bv1 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 $x216))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x427 (= false false)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (=> $x272 $x427)))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x101 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x101 (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 $x7))))))
 ))
 (let (($x210 (and $x212 $x274)))
 (let (($x343 (and $x210 $x435)))
 (let (($x220 (and $x343 $x359)))
 (let (($x43 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x152 $x153)))
 (let (($x77 (not $x15)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x136 $x140)))
 (let (($x23 (and (not $x151) $x77)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x149 $x137)))
 (let (($x134 (not $x139)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x104 $x114)))
 (let (($x117 (and (not $x115) $x134)))
 (let (($x102 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x110 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x159 (and (and (and (and (and (and $x110 $x102) $x117) $x23) $x8) $x43) $x220)))
 (let (($x279 (and (and (and (and (and $x159 $x296) $x222) $x223) $x224) $x421)))
 (let (($x161 (= $x279 true)))
 (let (($x79 (= $x161 true)))
 (let (($x81 (= $x79 true)))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x412 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (=> $x377 (= ?x412 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x377 (bvuge ?x271 (_ bv1 32))))
 (= $x377 (bvuge ?x269 (_ bv1 32)))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x271 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x272 (= ?x271 (_ bv0 32))))
 (= $x272 (= ?x269 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x111 $x274)))
 (let (($x12 (and $x273 $x6)))
 (let (($x413 (and $x12 $x410)))
 (let (($x82 (and $x413 $x81)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (=> $x449 (= ?x453 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x449 (bvuge ?x334 (_ bv1 32))))
 (= $x449 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x334 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x334 (_ bv0 32))))
 (= $x423 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x431 (and $x426 $x430)))
 (let (($x446 (and $x431 $x445)))
 (let (($x78 (and $x446 $x460)))
 (let (($x166 (and $x78 $x82)))
 (let (($x160 (=> $x166 $x154)))
 (not $x160))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4af602fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x46fa3af8)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xfd5ef300)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x46fa3afb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4af602ff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x46fa3af8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4af602fc)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x46fa3afb) #xfd
    (ite (= x!0 #x4af602ff) #x04
    (ite (= x!0 #x46fa3afa) #x5e
    (ite (= x!0 #x46fa3af9) #xf3
      #x00)))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x46fa3afb)
                                      (k!13 #x46fa3afa)
                                      (k!13 #x46fa3af9)
                                      (k!13 #x46fa3af8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x4af602ff)
                                      (k!13 #x4af602fe)
                                      (k!13 #x4af602fd)
                                      (k!13 #x4af602fc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x88015508)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00412944)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x880b6c00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00412947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8801550b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00412944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x88015508)
  (define-fun input.spec-%var-m2-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00412944 x!0) #x00412944 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!29 (k!28 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00412944) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00412946) #x0b
    (ite (= x!0 #x00412945) #x6c
    (ite (= x!0 #x00412947) #x88
      #x00))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x8801550b)
                                      (k!26 #x8801550a)
                                      (k!26 #x88015509)
                                      (k!26 #x88015508))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x00412944 x!0) #x00412944 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!30 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!30 (k!27 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x00412947)
                                      (k!26 #x00412946)
                                      (k!26 #x00412945)
                                      (k!26 #x00412944))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00412944) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x456 ((_ extract 8 0) input.dst.llvm-%m2)))
 (let ((?x458 ((_ extract 8 0) input.dst.llvm-%m1)))
 (let ((?x455 (bvmul ?x458 (_ bv26 9))))
 (let (($x457 (= ?x455 ?x456)))
 (let (($x38 (= $x457 true)))
 (let ((?x278 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x403 (concat ?x406 (concat ?x70 ?x278)))))
 (let (($x186 (= input.dst.llvm-%m2 ?x411)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x258 (concat ?x266 (concat ?x264 ?x89)))))
 (let (($x259 (= input.dst.llvm-%m1 ?x261)))
 (let (($x205 (and $x259 $x186)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x281 (bvadd ?x309 input.dst.llvm-%m2)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x120))))
 (let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 ?x384))))))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 $x467))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (=> $x412 $x407)))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 $x466))))))
 ))
 (let (($x9 (and $x35 $x60)))
 (let (($x432 (and $x9 $x428)))
 (let (($x86 (and $x432 $x386)))
 (let (($x201 (and $x86 $x205)))
 (let ((?x276 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x276)))
 (let ((?x275 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x30 (= (_ bv0 32) ?x275)))
 (let ((?x44 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x37 $x76)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x260 $x99)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x309 input.dst.llvm-%m1)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x301))))
 (let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 ?x304))))))))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 $x467))))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (=> $x220 $x407)))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 $x466))))))
 ))
 (let (($x293 (and $x138 $x226)))
 (let (($x232 (and $x293 $x62)))
 (let (($x257 (and $x232 $x98)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x389 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x421 (and $x389 $x425)))
 (let (($x279 (not $x421)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x388 (and $x217 $x330)))
 (let (($x79 (and (not $x388) $x279)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x332 $x314)))
 (let (($x298 (not $x329)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x75 $x283)))
 (let (($x286 (and (not $x284) $x298)))
 (let (($x204 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x207 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x320 (and (and (and (and (and (and $x207 $x204) $x286) $x79) $x82) $x129) $x257)))
 (let (($x444 (and (and (and (and (and $x320 $x100) $x112) $x30) $x277) $x201)))
 (let (($x67 (= $x444 true)))
 (let (($x440 (= $x67 true)))
 (let (($x441 (= $x440 true)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 (bvuge ?x361 (_ bv1 32)))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 (= ?x361 (_ bv0 32)))))))
 ))
 (let (($x295 (and $x362 $x226)))
 (let (($x372 (and $x295 $x376)))
 (let (($x391 (and $x372 $x26)))
 (let (($x438 (and $x391 $x441)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 (bvuge ?x374 (_ bv1 32)))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 (= ?x374 (_ bv0 32)))))))
 ))
 (let (($x414 (and $x405 $x60)))
 (let (($x137 (and $x414 $x149)))
 (let (($x417 (and $x137 $x23)))
 (let (($x436 (and $x417 $x438)))
 (let (($x176 (=> $x436 $x38)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x456 ((_ extract 8 0) input.dst.llvm-%m2)))
 (let ((?x458 ((_ extract 8 0) input.dst.llvm-%m1)))
 (let ((?x455 (bvmul ?x458 (_ bv26 9))))
 (let (($x457 (= ?x455 ?x456)))
 (let (($x38 (= $x457 true)))
 (let ((?x278 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x411 (concat ?x403 (concat ?x406 (concat ?x70 ?x278)))))
 (let (($x186 (= input.dst.llvm-%m2 ?x411)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x258 (concat ?x266 (concat ?x264 ?x89)))))
 (let (($x259 (= input.dst.llvm-%m1 ?x261)))
 (let (($x205 (and $x259 $x186)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x281 (bvadd ?x309 input.dst.llvm-%m2)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x120))))
 (let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 ?x384))))))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 $x467))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (=> $x412 $x407)))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 $x466))))))
 ))
 (let (($x9 (and $x35 $x60)))
 (let (($x432 (and $x9 $x428)))
 (let (($x86 (and $x432 $x386)))
 (let (($x201 (and $x86 $x205)))
 (let ((?x276 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x276)))
 (let ((?x275 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x30 (= (_ bv0 32) ?x275)))
 (let ((?x44 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x44)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x37 $x76)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x260 $x99)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x309 input.dst.llvm-%m1)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x301))))
 (let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 ?x304))))))))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x467 (bvuge ?x465 (_ bv1 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 $x467))))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x407 (= false false)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (=> $x220 $x407)))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x465 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x465 (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 $x466))))))
 ))
 (let (($x293 (and $x138 $x226)))
 (let (($x232 (and $x293 $x62)))
 (let (($x257 (and $x232 $x98)))
 (let (($x129 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x389 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x421 (and $x389 $x425)))
 (let (($x279 (not $x421)))
 (let (($x330 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x388 (and $x217 $x330)))
 (let (($x79 (and (not $x388) $x279)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x332 $x314)))
 (let (($x298 (not $x329)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x75 $x283)))
 (let (($x286 (and (not $x284) $x298)))
 (let (($x204 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x207 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x320 (and (and (and (and (and (and $x207 $x204) $x286) $x79) $x82) $x129) $x257)))
 (let (($x444 (and (and (and (and (and $x320 $x100) $x112) $x30) $x277) $x201)))
 (let (($x67 (= $x444 true)))
 (let (($x440 (= $x67 true)))
 (let (($x441 (= $x440 true)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x59 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (=> $x71 (= ?x59 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x376 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x359 (_ bv1 32))))
 (= $x71 (bvuge ?x361 (_ bv1 32)))))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x359 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x359 (_ bv0 32))))
 (= $x220 (= ?x361 (_ bv0 32)))))))
 ))
 (let (($x295 (and $x362 $x226)))
 (let (($x372 (and $x295 $x376)))
 (let (($x391 (and $x372 $x26)))
 (let (($x438 (and $x391 $x441)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x153 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (=> $x135 (= ?x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x12 (_ bv1 32))))
 (= $x135 (bvuge ?x374 (_ bv1 32)))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x374 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x12 (_ bv0 32))))
 (= $x412 (= ?x374 (_ bv0 32)))))))
 ))
 (let (($x414 (and $x405 $x60)))
 (let (($x137 (and $x414 $x149)))
 (let (($x417 (and $x137 $x23)))
 (let (($x436 (and $x417 $x438)))
 (let (($x176 (=> $x436 $x38)))
 (not $x176)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffdfffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffdfaf8)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xd3ef0080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x63750000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffdfafb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffdffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffdfaf8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffdfffc)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffdfafb) #x63
    (ite (= x!0 #xfffdffff) #xd3
    (ite (= x!0 #xfffdfffc) #x80
    (ite (= x!0 #xfffdfafa) #x75
    (ite (= x!0 #xfffdfffe) #xef
      #x00))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdfafb)
                                      (k!13 #xfffdfafa)
                                      (k!13 #xfffdfaf9)
                                      (k!13 #xfffdfaf8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xfffdffff)
                                      (k!13 #xfffdfffe)
                                      (k!13 #xfffdfffd)
                                      (k!13 #xfffdfffc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x800b0004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00084040)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7fe10000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x02de0014)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00084043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x800b0007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00084040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x800b0004)
  (define-fun input.spec-%var-m2-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x800b0004 x!0) #x800b0004 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!29 (k!28 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x800b0004) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00084042) #xde
    (ite (= x!0 #x00084040) #x14
    (ite (= x!0 #x800b0006) #xe1
    (ite (= x!0 #x00084043) #x02
    (ite (= x!0 #x800b0007) #x7f
      #x00))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x800b0007)
                                      (k!26 #x800b0006)
                                      (k!26 #x800b0005)
                                      (k!26 #x800b0004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x800b0004 x!0) #x800b0004 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!30 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!30 (k!27 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!26 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!2 (k!26 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!3 (k!26 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040)))))
            (a!4 (k!26 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!26 #x00084043)
                                      (k!26 #x00084042)
                                      (k!26 #x00084041)
                                      (k!26 #x00084040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x800b0004) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x108 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 3) ?x108)))
 (let (($x117 (= $x114 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x392 (concat ?x51 (concat ?x141 (concat ?x127 ?x349)))))
 (let (($x27 (= input.dst.llvm-%m2 ?x392)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x435 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x360 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x351 (concat ?x360 (concat ?x346 (concat ?x435 ?x164)))))
 (let (($x350 (= input.dst.llvm-%m1 ?x351)))
 (let (($x156 (and $x350 $x27)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x134 (bvadd ?x90 input.dst.llvm-%m2)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x379))))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 ?x45))))))))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 $x328))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (=> $x59 $x394)))))
 ))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 $x57))))))
 ))
 (let (($x73 (and $x253 $x69)))
 (let (($x268 (and $x73 $x269)))
 (let (($x136 (and $x268 $x448)))
 (let (($x195 (and $x136 $x156)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x296 (= (_ bv0 32) ?x229)))
 (let ((?x172 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x190 (= (_ bv0 32) ?x172)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x357 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x357)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x63 $x358)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x194 $x177)))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd ?x90 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x94))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 ?x25))))))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 $x328))))))
 ))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (=> $x257 $x394)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 $x57))))))
 ))
 (let (($x395 (and $x285 $x76)))
 (let (($x10 (and $x395 $x243)))
 (let (($x22 (and $x10 $x54)))
 (let (($x458 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x186 $x205)))
 (let (($x444 (not $x201)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (and $x131 $x404)))
 (let (($x440 (and (not $x411) $x444)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x403 $x52)))
 (let (($x126 (not $x406)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x265 $x261)))
 (let (($x278 (and (not $x259) $x126)))
 (let (($x470 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x258 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x78 (and (and (and (and (and (and $x258 $x470) $x278) $x440) $x438) $x458) $x22)))
 (let (($x111 (and (and (and (and (and $x78 $x203) $x68) $x190) $x296) $x195)))
 (let (($x113 (= $x111 true)))
 (let (($x274 (= $x113 true)))
 (let (($x102 (= $x274 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 (bvuge ?x304 (_ bv1 32)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 (= ?x304 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x260 $x76)))
 (let (($x428 (and $x99 $x365)))
 (let (($x385 (and $x428 $x459)))
 (let (($x418 (and $x385 $x102)))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 (bvuge ?x364 (_ bv1 32)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 (= ?x364 (_ bv0 32)))))))
 ))
 (let (($x393 (and $x396 $x69)))
 (let (($x314 (and $x393 $x332)))
 (let (($x183 (and $x314 $x79)))
 (let (($x103 (and $x183 $x418)))
 (let (($x419 (=> $x103 $x117)))
 (not $x419)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x108 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 3) ?x108)))
 (let (($x117 (= $x114 true)))
 (let ((?x349 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x392 (concat ?x51 (concat ?x141 (concat ?x127 ?x349)))))
 (let (($x27 (= input.dst.llvm-%m2 ?x392)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x435 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x360 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x351 (concat ?x360 (concat ?x346 (concat ?x435 ?x164)))))
 (let (($x350 (= input.dst.llvm-%m1 ?x351)))
 (let (($x156 (and $x350 $x27)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x134 (bvadd ?x90 input.dst.llvm-%m2)))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x379))))
 (let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 ?x45))))))))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 $x328))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (=> $x59 $x394)))))
 ))
 (let (($x253 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 $x57))))))
 ))
 (let (($x73 (and $x253 $x69)))
 (let (($x268 (and $x73 $x269)))
 (let (($x136 (and $x268 $x448)))
 (let (($x195 (and $x136 $x156)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x296 (= (_ bv0 32) ?x229)))
 (let ((?x172 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x190 (= (_ bv0 32) ?x172)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x165)))
 (let ((?x357 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x357)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x63 $x358)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x194 $x177)))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x90 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd ?x90 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x94))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 ?x25))))))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x474 (_ bv1 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 $x328))))))
 ))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x394 (= false false)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (=> $x257 $x394)))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x474 (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 $x57))))))
 ))
 (let (($x395 (and $x285 $x76)))
 (let (($x10 (and $x395 $x243)))
 (let (($x22 (and $x10 $x54)))
 (let (($x458 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x438 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x186 $x205)))
 (let (($x444 (not $x201)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (and $x131 $x404)))
 (let (($x440 (and (not $x411) $x444)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x403 $x52)))
 (let (($x126 (not $x406)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x265 $x261)))
 (let (($x278 (and (not $x259) $x126)))
 (let (($x470 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x258 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x78 (and (and (and (and (and (and $x258 $x470) $x278) $x440) $x438) $x458) $x22)))
 (let (($x111 (and (and (and (and (and $x78 $x203) $x68) $x190) $x296) $x195)))
 (let (($x113 (= $x111 true)))
 (let (($x274 (= $x113 true)))
 (let (($x102 (= $x274 true)))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (=> $x35 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x98 (_ bv1 32))))
 (= $x35 (bvuge ?x304 (_ bv1 32)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x98 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (= ?x98 (_ bv0 32))))
 (= $x257 (= ?x304 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x260 $x76)))
 (let (($x428 (and $x99 $x365)))
 (let (($x385 (and $x428 $x459)))
 (let (($x418 (and $x385 $x102)))
 (let (($x79 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (=> $x214 (= ?x425 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x372 (_ bv1 32))))
 (= $x214 (bvuge ?x364 (_ bv1 32)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (= ?x372 (_ bv0 32))))
 (= $x59 (= ?x364 (_ bv0 32)))))))
 ))
 (let (($x393 (and $x396 $x69)))
 (let (($x314 (and $x393 $x332)))
 (let (($x183 (and $x314 $x79)))
 (let (($x103 (and $x183 $x418)))
 (let (($x419 (=> $x103 $x117)))
 (not $x419)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08145504)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00240000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000006) #x24
    (ite (= x!0 #x00000001) #x55
    (ite (= x!0 #x00000000) #x04
    (ite (= x!0 #x00000003) #x08
    (ite (= x!0 #x00000002) #x14
      #x00))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000007)
                                      (k!13 #x00000006)
                                      (k!13 #x00000005)
                                      (k!13 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbcade630)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0991b34)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xb5fddf04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xebbb7b00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0991b37)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbcade633)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0991b34)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbcade630)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0991b37) #xeb
    (ite (= x!0 #xbcade631) #xdf
    (ite (= x!0 #xbcade633) #xb5
    (ite (= x!0 #xbcade630) #x04
    (ite (= x!0 #xc0991b36) #xbb
    (ite (= x!0 #xc0991b35) #x7b
    (ite (= x!0 #xbcade632) #xfd
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xc0991b37)
                                      (k!13 #xc0991b36)
                                      (k!13 #xc0991b35)
                                      (k!13 #xc0991b34))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #xbcade633)
                                      (k!13 #xbcade632)
                                      (k!13 #xbcade631)
                                      (k!13 #xbcade630))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x286 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x286)))
 (let (($x330 (= $x202 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x383 (concat ?x280 (concat ?x319 (concat ?x30 ?x317)))))
 (let (($x118 (= input.dst.llvm-%m2 ?x383)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x300 (concat ?x124 (concat ?x461 ?x62)))))
 (let (($x147 (= input.dst.llvm-%m1 ?x299)))
 (let (($x77 (and $x147 $x118)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x410 (bvadd ?x171 input.dst.llvm-%m2)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv1 32))) (select input.dst.llvm-mem ?x410))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv2 32))) ?x367))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 ?x369))))))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 $x450))))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (=> $x120 $x384)))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 $x83))))))
 ))
 (let (($x84 (and $x178 $x386)))
 (let (($x26 (and $x84 $x422)))
 (let (($x139 (and $x26 $x323)))
 (let (($x153 (and $x139 $x77)))
 (let ((?x321 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x321)))
 (let ((?x37 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x37)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x211 (and $x305 $x248)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x311 $x211)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x342 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x347))))
 (let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 ?x408))))))))))
 ))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 $x450))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (=> $x22 $x384)))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 $x83))))))
 ))
 (let (($x130 (and $x462 $x358)))
 (let (($x225 (and $x130 $x129)))
 (let (($x245 (and $x225 $x40)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x27 $x156)))
 (let (($x111 (not $x195)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x392 (and $x227 $x224)))
 (let (($x274 (and (not $x392) $x111)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x51 $x223)))
 (let (($x353 (not $x141)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (and $x343 $x351)))
 (let (($x349 (and (not $x350) $x353)))
 (let (($x473 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x360 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x360 $x473) $x349) $x274) $x418) $x105) $x245)))
 (let (($x226 (and (and (and (and (and $x359 $x237) $x238) $x100) $x44) $x153)))
 (let (($x204 (= $x226 true)))
 (let (($x198 (= $x204 true)))
 (let (($x20 (= $x198 true)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 (bvuge ?x25 (_ bv1 32)))))))
 ))
 (let (($x194 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 (= ?x25 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x194 $x358)))
 (let (($x269 (and $x177 $x263)))
 (let (($x437 (and $x269 $x370)))
 (let (($x397 (and $x437 $x20)))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 (bvuge ?x21 (_ bv1 32)))))))
 ))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 (= ?x21 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x371 $x386)))
 (let (($x52 (and $x86 $x403)))
 (let (($x452 (and $x52 $x440)))
 (let (($x193 (and $x452 $x397)))
 (let (($x388 (=> $x193 $x330)))
 (not $x388)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x286 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x286)))
 (let (($x330 (= $x202 true)))
 (let ((?x317 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x383 (concat ?x280 (concat ?x319 (concat ?x30 ?x317)))))
 (let (($x118 (= input.dst.llvm-%m2 ?x383)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x461 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x300 (concat ?x124 (concat ?x461 ?x62)))))
 (let (($x147 (= input.dst.llvm-%m1 ?x299)))
 (let (($x77 (and $x147 $x118)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x410 (bvadd ?x171 input.dst.llvm-%m2)))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv1 32))) (select input.dst.llvm-mem ?x410))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv2 32))) ?x367))))
 (let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 ?x369))))))))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 $x450))))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (=> $x120 $x384)))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 $x83))))))
 ))
 (let (($x84 (and $x178 $x386)))
 (let (($x26 (and $x84 $x422)))
 (let (($x139 (and $x26 $x323)))
 (let (($x153 (and $x139 $x77)))
 (let ((?x321 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x44 (= (_ bv0 32) ?x321)))
 (let ((?x37 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x37)))
 (let ((?x32 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x211 (and $x305 $x248)))
 (let (($x311 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x237 (and $x311 $x211)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x342 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv1 32))) (select input.dst.llvm-mem ?x342))))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x342 (_ bv2 32))) ?x347))))
 (let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 ?x408))))))))))
 ))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (bvuge ?x163 (_ bv1 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 $x450))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x384 (= false false)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (=> $x22 $x384)))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (= ?x163 (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 $x83))))))
 ))
 (let (($x130 (and $x462 $x358)))
 (let (($x225 (and $x130 $x129)))
 (let (($x245 (and $x225 $x40)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x27 $x156)))
 (let (($x111 (not $x195)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x392 (and $x227 $x224)))
 (let (($x274 (and (not $x392) $x111)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x51 $x223)))
 (let (($x353 (not $x141)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x343 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (and $x343 $x351)))
 (let (($x349 (and (not $x350) $x353)))
 (let (($x473 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x360 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x360 $x473) $x349) $x274) $x418) $x105) $x245)))
 (let (($x226 (and (and (and (and (and $x359 $x237) $x238) $x100) $x44) $x153)))
 (let (($x204 (= $x226 true)))
 (let (($x198 (= $x204 true)))
 (let (($x20 (= $x198 true)))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (=> $x253 (= ?x379 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x54 (_ bv1 32))))
 (= $x253 (bvuge ?x25 (_ bv1 32)))))))
 ))
 (let (($x194 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x25 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (= ?x54 (_ bv0 32))))
 (= $x22 (= ?x25 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x194 $x358)))
 (let (($x269 (and $x177 $x263)))
 (let (($x437 (and $x269 $x370)))
 (let (($x397 (and $x437 $x20)))
 (let (($x440 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x205 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (=> $x70 (= ?x205 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x428 (_ bv1 32))))
 (= $x70 (bvuge ?x21 (_ bv1 32)))))))
 ))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x428 (_ bv0 32))))
 (= $x120 (= ?x21 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x371 $x386)))
 (let (($x52 (and $x86 $x403)))
 (let (($x452 (and $x52 $x440)))
 (let (($x193 (and $x452 $x397)))
 (let (($x388 (=> $x193 $x330)))
 (not $x388)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 175 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x453 (= (_ bv0 2) ?x278)))
 (let (($x404 (= $x453 true)))
 (let ((?x271 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x434 (concat ?x378 (concat ?x11 (concat ?x190 ?x271)))))
 (let (($x443 (= input.dst.llvm-%m2 ?x434)))
 (let ((?x243 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x93 (concat ?x335 (concat ?x176 ?x243)))))
 (let (($x95 (= input.dst.llvm-%m1 ?x250)))
 (let (($x279 (and $x95 $x443)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x207 (bvadd ?x236 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x47))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 ?x66))))))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 $x87))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (=> $x379 $x45)))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 $x64))))))
 ))
 (let (($x119 (and $x175 $x448)))
 (let (($x459 (and $x119 $x174)))
 (let (($x16 (and $x459 $x298)))
 (let (($x425 (and $x16 $x279)))
 (let ((?x270 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x270)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x203 (= (_ bv0 32) ?x63)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x423 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x322 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x423)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x96 $x322)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x399 (and $x254 $x41)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x235 (bvadd ?x236 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x288))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 ?x208))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 $x87))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (=> $x245 $x45)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 $x64))))))
 ))
 (let (($x415 (and $x162 $x248)))
 (let (($x460 (and $x415 $x458)))
 (let (($x282 (and $x460 $x210)))
 (let (($x283 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x397 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x118 $x77)))
 (let (($x226 (not $x153)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x316 $x125)))
 (let (($x198 (and (not $x383) $x226)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x280 $x277)))
 (let (($x275 (not $x319)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x309 $x299)))
 (let (($x317 (and (not $x147) $x275)))
 (let (($x232 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x300 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x300 $x232) $x317) $x198) $x397) $x283) $x282)))
 (let (($x76 (and (and (and (and (and $x98 $x399) $x445) $x203) $x165) $x425)))
 (let (($x470 (= $x76 true)))
 (let (($x454 (= $x470 true)))
 (let (($x264 (= $x454 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 (bvuge ?x408 (_ bv1 32)))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 (= ?x408 (_ bv0 32)))))))
 ))
 (let (($x211 (and $x311 $x248)))
 (let (($x422 (and $x211 $x354)))
 (let (($x217 (and $x422 $x104)))
 (let (($x89 (and $x217 $x264)))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 (bvuge ?x72 (_ bv1 32)))))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 (= ?x72 (_ bv0 32)))))))
 ))
 (let (($x136 (and $x375 $x448)))
 (let (($x223 (and $x136 $x51)))
 (let (($x23 (and $x223 $x274)))
 (let (($x267 (and $x23 $x89)))
 (let (($x411 (=> $x267 $x404)))
 (not $x411)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x453 (= (_ bv0 2) ?x278)))
 (let (($x404 (= $x453 true)))
 (let ((?x271 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x434 (concat ?x378 (concat ?x11 (concat ?x190 ?x271)))))
 (let (($x443 (= input.dst.llvm-%m2 ?x434)))
 (let ((?x243 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x93 (concat ?x335 (concat ?x176 ?x243)))))
 (let (($x95 (= input.dst.llvm-%m1 ?x250)))
 (let (($x279 (and $x95 $x443)))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x207 (bvadd ?x236 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x47))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 ?x66))))))))))
 ))
 (let (($x174 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 $x87))))))
 ))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (=> $x379 $x45)))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 $x64))))))
 ))
 (let (($x119 (and $x175 $x448)))
 (let (($x459 (and $x119 $x174)))
 (let (($x16 (and $x459 $x298)))
 (let (($x425 (and $x16 $x279)))
 (let ((?x270 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x270)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x203 (= (_ bv0 32) ?x63)))
 (let ((?x216 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x423 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x322 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x423)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x96 $x322)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x399 (and $x254 $x41)))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x236 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x235 (bvadd ?x236 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x288))))
 (let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 ?x208))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x8 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 $x87))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x45 (= false false)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (=> $x245 $x45)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x8 (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 $x64))))))
 ))
 (let (($x415 (and $x162 $x248)))
 (let (($x460 (and $x415 $x458)))
 (let (($x282 (and $x460 $x210)))
 (let (($x283 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x397 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x118 $x77)))
 (let (($x226 (not $x153)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x316 $x125)))
 (let (($x198 (and (not $x383) $x226)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x280 $x277)))
 (let (($x275 (not $x319)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x309 $x299)))
 (let (($x317 (and (not $x147) $x275)))
 (let (($x232 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x300 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x300 $x232) $x317) $x198) $x397) $x283) $x282)))
 (let (($x76 (and (and (and (and (and $x98 $x399) $x445) $x203) $x165) $x425)))
 (let (($x470 (= $x76 true)))
 (let (($x454 (= $x470 true)))
 (let (($x264 (= $x454 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x367 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (=> $x178 (= ?x367 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x40 (_ bv1 32))))
 (= $x178 (bvuge ?x408 (_ bv1 32)))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x408 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x40 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x245 (= ?x40 (_ bv0 32))))
 (= $x245 (= ?x408 (_ bv0 32)))))))
 ))
 (let (($x211 (and $x311 $x248)))
 (let (($x422 (and $x211 $x354)))
 (let (($x217 (and $x422 $x104)))
 (let (($x89 (and $x217 $x264)))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x156 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (=> $x127 (= ?x156 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x269 (_ bv1 32))))
 (= $x127 (bvuge ?x72 (_ bv1 32)))))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x269 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x269 (_ bv0 32))))
 (= $x379 (= ?x72 (_ bv0 32)))))))
 ))
 (let (($x136 (and $x375 $x448)))
 (let (($x223 (and $x136 $x51)))
 (let (($x23 (and $x223 $x274)))
 (let (($x267 (and $x23 $x89)))
 (let (($x411 (=> $x267 $x404)))
 (not $x411)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x19 input.dst.llvm-%m1)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x209))))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 ?x6))))))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 $x246))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (=> $x282 $x369)))))
 ))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 $x81))))))
 ))
 (let (($x318 (and $x463 $x322)))
 (let (($x356 (and $x318 $x105)))
 (let (($x293 (and $x356 $x464)))
 (let (($x351 (= $x293 true)))
 (let (($x349 (= $x351 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x106 (concat ?x230 (concat ?x100 ?x159)))))
 (let (($x315 (= input.dst.llvm-%m2 ?x219)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x157 (concat ?x148 (concat ?x273 ?x129)))))
 (let (($x189 (= input.dst.llvm-%m1 ?x170)))
 (let (($x444 (and $x189 $x315)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x258 (bvadd ?x19 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x256))))
 (let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 ?x352))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 $x246))))))
 ))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (=> $x367 $x369)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 $x81))))))
 ))
 (let (($x429 (and $x427 $x323)))
 (let (($x370 (and $x429 $x426)))
 (let (($x181 (and $x370 $x126)))
 (let (($x205 (and $x181 $x444)))
 (let ((?x220 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x32 (= (_ bv0 32) ?x220)))
 (let ((?x305 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x237 (= (_ bv0 32) ?x305)))
 (let ((?x115 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x12 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x398 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x334 (and $x339 $x398)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x345 $x334)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x443 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (and $x443 $x279)))
 (let (($x76 (not $x425)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x434 (and $x272 $x366)))
 (let (($x454 (and (not $x434) $x76)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x378 $x296)))
 (let (($x172 (not $x11)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x90 $x250)))
 (let (($x271 (and (not $x95) $x172)))
 (let (($x10 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x93 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x54 (and (and (and (and (and (and $x93 $x10) $x271) $x454) $x89) $x261) $x293)))
 (let (($x358 (and (and (and (and (and $x54 $x138) $x50) $x237) $x32) $x205)))
 (let (($x473 (= $x358 true)))
 (let (($x152 (= $x473 true)))
 (let (($x435 (= $x152 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 (bvuge ?x208 (_ bv1 32)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 (= ?x208 (_ bv0 32)))))))
 ))
 (let (($x41 (and $x254 $x322)))
 (let (($x174 (and $x41 $x308)))
 (let (($x131 (and $x174 $x329)))
 (let (($x164 (and $x131 $x435)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 (bvuge ?x28 (_ bv1 32)))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 (= ?x28 (_ bv0 32)))))))
 ))
 (let (($x139 (and $x107 $x323)))
 (let (($x277 (and $x139 $x280)))
 (let (($x79 (and $x277 $x198)))
 (let (($x348 (and $x79 $x164)))
 (let (($x15 (=> $x348 $x349)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x19 input.dst.llvm-%m1)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x209))))
 (let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 ?x6))))))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 $x246))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (=> $x282 $x369)))))
 ))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 $x81))))))
 ))
 (let (($x318 (and $x463 $x322)))
 (let (($x356 (and $x318 $x105)))
 (let (($x293 (and $x356 $x464)))
 (let (($x351 (= $x293 true)))
 (let (($x349 (= $x351 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x106 (concat ?x230 (concat ?x100 ?x159)))))
 (let (($x315 (= input.dst.llvm-%m2 ?x219)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x273 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x157 (concat ?x148 (concat ?x273 ?x129)))))
 (let (($x189 (= input.dst.llvm-%m1 ?x170)))
 (let (($x444 (and $x189 $x315)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x258 (bvadd ?x19 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x256))))
 (let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 ?x352))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x166 (_ bv1 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 $x246))))))
 ))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x369 (= false false)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (=> $x367 $x369)))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x166 (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 $x81))))))
 ))
 (let (($x429 (and $x427 $x323)))
 (let (($x370 (and $x429 $x426)))
 (let (($x181 (and $x370 $x126)))
 (let (($x205 (and $x181 $x444)))
 (let ((?x220 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x32 (= (_ bv0 32) ?x220)))
 (let ((?x305 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x237 (= (_ bv0 32) ?x305)))
 (let ((?x115 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x12 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x398 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x12)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x334 (and $x339 $x398)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x345 $x334)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x443 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (and $x443 $x279)))
 (let (($x76 (not $x425)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x434 (and $x272 $x366)))
 (let (($x454 (and (not $x434) $x76)))
 (let (($x296 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x378 $x296)))
 (let (($x172 (not $x11)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x90 $x250)))
 (let (($x271 (and (not $x95) $x172)))
 (let (($x10 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x93 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x54 (and (and (and (and (and (and $x93 $x10) $x271) $x454) $x89) $x261) $x293)))
 (let (($x358 (and (and (and (and (and $x54 $x138) $x50) $x237) $x32) $x205)))
 (let (($x473 (= $x358 true)))
 (let (($x152 (= $x473 true)))
 (let (($x435 (= $x152 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x47 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (=> $x175 (= ?x47 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (= $x175 (bvuge ?x208 (_ bv1 32)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x210 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (= ?x210 (_ bv0 32))))
 (= $x282 (= ?x208 (_ bv0 32)))))))
 ))
 (let (($x41 (and $x254 $x322)))
 (let (($x174 (and $x41 $x308)))
 (let (($x131 (and $x174 $x329)))
 (let (($x164 (and $x131 $x435)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (=> $x30 (= ?x77 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x422 (_ bv1 32))))
 (= $x30 (bvuge ?x28 (_ bv1 32)))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x422 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x422 (_ bv0 32))))
 (= $x367 (= ?x28 (_ bv0 32)))))))
 ))
 (let (($x139 (and $x107 $x323)))
 (let (($x277 (and $x139 $x280)))
 (let (($x79 (and $x277 $x198)))
 (let (($x348 (and $x79 $x164)))
 (let (($x15 (=> $x348 $x349)))
 (not $x15))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x466 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x121))))
 (let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 ?x316))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 $x283))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (=> $x47 $x66)))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 $x74))))))
 ))
 (let (($x412 (and $x402 $x298)))
 (let (($x300 (and $x412 $x303)))
 (let (($x458 (and $x300 $x451)))
 (let (($x421 (= $x458 true)))
 (let (($x125 (= $x421 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x58 (concat ?x56 (concat ?x165 ?x203)))))
 (let (($x156 (= input.dst.llvm-%m2 ?x111)))
 (let ((?x295 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x289 (concat ?x439 (concat ?x235 ?x295)))))
 (let (($x320 (= input.dst.llvm-%m1 ?x288)))
 (let (($x27 (and $x320 $x156)))
 (let (($x195 (and $x458 $x27)))
 (let ((?x445 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x472 (= (_ bv0 32) ?x445)))
 (let ((?x257 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x216 (= (_ bv0 32) ?x257)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x380 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x380)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x284 (and $x374 $x285)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x372 $x284)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd ?x466 input.dst.llvm-%m1)))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x468))))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 ?x328))))))))))
 ))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 $x283))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (=> $x293 $x66)))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 $x74))))))
 ))
 (let (($x55 (and $x218 $x398)))
 (let (($x455 (and $x55 $x38)))
 (let (($x287 (and $x455 $x292)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x315 $x444)))
 (let (($x358 (not $x205)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x362 $x110)))
 (let (($x152 (and (not $x219) $x358)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x106 $x44)))
 (let (($x37 (not $x230)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x171 $x170)))
 (let (($x159 (and (not $x189) $x37)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x157 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x157 $x225) $x159) $x152) $x164) $x351) $x287)))
 (let (($x389 (and (and (and (and (and $x359 $x108) $x399) $x216) $x472) $x195)))
 (let (($x461 (= $x389 true)))
 (let (($x62 (= $x461 true)))
 (let (($x306 (= $x62 true)))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 (bvuge ?x6 (_ bv1 32)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 (= ?x6 (_ bv0 32)))))))
 ))
 (let (($x334 (and $x345 $x398)))
 (let (($x426 (and $x334 $x142)))
 (let (($x227 (and $x426 $x406)))
 (let (($x299 (and $x227 $x306)))
 (let (($x454 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x16 (and $x36 $x298)))
 (let (($x296 (and $x16 $x378)))
 (let (($x440 (and $x296 $x454)))
 (let (($x317 (and $x440 $x299)))
 (let (($x383 (=> $x317 $x125)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x466 input.dst.llvm-%m2)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x121))))
 (let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 ?x316))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 $x283))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (=> $x47 $x66)))))
 ))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 $x74))))))
 ))
 (let (($x412 (and $x402 $x298)))
 (let (($x300 (and $x412 $x303)))
 (let (($x458 (and $x300 $x451)))
 (let (($x421 (= $x458 true)))
 (let (($x125 (= $x421 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x58 (concat ?x56 (concat ?x165 ?x203)))))
 (let (($x156 (= input.dst.llvm-%m2 ?x111)))
 (let ((?x295 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x439 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x289 (concat ?x439 (concat ?x235 ?x295)))))
 (let (($x320 (= input.dst.llvm-%m1 ?x288)))
 (let (($x27 (and $x320 $x156)))
 (let (($x195 (and $x458 $x27)))
 (let ((?x445 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x472 (= (_ bv0 32) ?x445)))
 (let ((?x257 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x216 (= (_ bv0 32) ?x257)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x399 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x380 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x380)))
 (let (($x374 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x284 (and $x374 $x285)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x372 $x284)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x466 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd ?x466 input.dst.llvm-%m1)))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x468))))
 (let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 ?x328))))))))))
 ))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x94 (_ bv1 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 $x283))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x66 (= false false)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (=> $x293 $x66)))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (= ?x94 (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 $x74))))))
 ))
 (let (($x55 (and $x218 $x398)))
 (let (($x455 (and $x55 $x38)))
 (let (($x287 (and $x455 $x292)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x315 $x444)))
 (let (($x358 (not $x205)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x362 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x362 $x110)))
 (let (($x152 (and (not $x219) $x358)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x106 $x44)))
 (let (($x37 (not $x230)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x171 $x170)))
 (let (($x159 (and (not $x189) $x37)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x157 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x359 (and (and (and (and (and (and $x157 $x225) $x159) $x152) $x164) $x351) $x287)))
 (let (($x389 (and (and (and (and (and $x359 $x108) $x399) $x216) $x472) $x195)))
 (let (($x461 (= $x389 true)))
 (let (($x62 (= $x461 true)))
 (let (($x306 (= $x62 true)))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (=> $x427 (= ?x256 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x464 (_ bv1 32))))
 (= $x427 (bvuge ?x6 (_ bv1 32)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x464 (_ bv0 32))))
 (= $x293 (= ?x6 (_ bv0 32)))))))
 ))
 (let (($x334 (and $x345 $x398)))
 (let (($x426 (and $x334 $x142)))
 (let (($x227 (and $x426 $x406)))
 (let (($x299 (and $x227 $x306)))
 (let (($x454 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (=> $x190 (= ?x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x174 (_ bv1 32))))
 (= $x190 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x174 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (= ?x174 (_ bv0 32))))
 (= $x47 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x16 (and $x36 $x298)))
 (let (($x296 (and $x16 $x378)))
 (let (($x440 (and $x296 $x454)))
 (let (($x317 (and $x440 $x299)))
 (let (($x383 (=> $x317 $x125)))
 (not $x383))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x201 (= false true)))
 (let (($x366 (= $x201 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x361 (concat ?x48 (concat ?x32 ?x237)))))
 (let (($x77 (= input.dst.llvm-%m2 ?x226)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x53 (concat ?x149 (concat ?x240 ?x99)))))
 (let (($x78 (= input.dst.llvm-%m1 ?x209)))
 (let (($x118 (and $x78 $x77)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x319 (bvadd ?x290 input.dst.llvm-%m2)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x302))))
 (let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 ?x272))))))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 $x261))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (=> $x256 $x352)))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 $x238))))))
 ))
 (let (($x391 (and $x396 $x126)))
 (let (($x93 (and $x391 $x97)))
 (let (($x105 (and $x93 $x417)))
 (let (($x153 (and $x105 $x118)))
 (let ((?x50 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x50)))
 (let ((?x22 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x115 (= (_ bv0 32) ?x22)))
 (let ((?x339 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x339)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x259)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x368 $x286)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x462 $x202)))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x290 input.dst.llvm-%m1)))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x474))))
 (let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 ?x364))))))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 $x261))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (=> $x287 $x352)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 $x238))))))
 ))
 (let (($x14 (and $x321 $x285)))
 (let (($x114 (and $x14 $x140)))
 (let (($x101 (and $x114 $x7)))
 (let (($x421 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x156 $x27)))
 (let (($x389 (not $x195)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x88 $x31)))
 (let (($x62 (and (not $x111) $x389)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x58 $x206)))
 (let (($x260 (not $x56)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (and $x331 $x288)))
 (let (($x203 (and (not $x320) $x260)))
 (let (($x236 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x289 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x289 $x236) $x203) $x62) $x299) $x421) $x101)))
 (let (($x186 (and (and (and (and (and $x98 $x161) $x138) $x115) $x46) $x153)))
 (let (($x176 (= $x186 true)))
 (let (($x243 (= $x176 true)))
 (let (($x91 (= $x243 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 (bvuge ?x328 (_ bv1 32)))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 (= ?x328 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x372 $x285)))
 (let (($x303 (and $x284 $x104)))
 (let (($x262 (and $x303 $x353)))
 (let (($x250 (and $x262 $x91)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 (bvuge ?x407 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 (= ?x407 (_ bv0 32)))))))
 ))
 (let (($x181 (and $x255 $x126)))
 (let (($x44 (and $x181 $x106)))
 (let (($x155 (and $x44 $x152)))
 (let (($x271 (and $x155 $x250)))
 (let (($x434 (=> $x271 $x366)))
 (not $x434))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x201 (= false true)))
 (let (($x366 (= $x201 true)))
 (let ((?x237 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x361 (concat ?x48 (concat ?x32 ?x237)))))
 (let (($x77 (= input.dst.llvm-%m2 ?x226)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x209 (concat ?x53 (concat ?x149 (concat ?x240 ?x99)))))
 (let (($x78 (= input.dst.llvm-%m1 ?x209)))
 (let (($x118 (and $x78 $x77)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x319 (bvadd ?x290 input.dst.llvm-%m2)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv1 32))) (select input.dst.llvm-mem ?x319))))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x319 (_ bv2 32))) ?x302))))
 (let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 ?x272))))))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 $x261))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (=> $x256 $x352)))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 $x238))))))
 ))
 (let (($x391 (and $x396 $x126)))
 (let (($x93 (and $x391 $x97)))
 (let (($x105 (and $x93 $x417)))
 (let (($x153 (and $x105 $x118)))
 (let ((?x50 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x50)))
 (let ((?x22 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x115 (= (_ bv0 32) ?x22)))
 (let ((?x339 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x339)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x259)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x368 $x286)))
 (let (($x462 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x462 $x202)))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x231 (bvadd ?x290 input.dst.llvm-%m1)))
 (let ((?x474 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x474))))
 (let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 ?x364))))))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x418 (_ bv1 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 $x261))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x352 (= false false)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (=> $x287 $x352)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x418 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (= ?x418 (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 $x238))))))
 ))
 (let (($x14 (and $x321 $x285)))
 (let (($x114 (and $x14 $x140)))
 (let (($x101 (and $x114 $x7)))
 (let (($x421 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x156 $x27)))
 (let (($x389 (not $x195)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x88 $x31)))
 (let (($x62 (and (not $x111) $x389)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x58 $x206)))
 (let (($x260 (not $x56)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (and $x331 $x288)))
 (let (($x203 (and (not $x320) $x260)))
 (let (($x236 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x289 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x98 (and (and (and (and (and (and $x289 $x236) $x203) $x62) $x299) $x421) $x101)))
 (let (($x186 (and (and (and (and (and $x98 $x161) $x138) $x115) $x46) $x153)))
 (let (($x176 (= $x186 true)))
 (let (($x243 (= $x176 true)))
 (let (($x91 (= $x243 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x121 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (=> $x402 (= ?x121 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x292 (_ bv1 32))))
 (= $x402 (bvuge ?x328 (_ bv1 32)))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x328 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x292 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (= ?x292 (_ bv0 32))))
 (= $x287 (= ?x328 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x372 $x285)))
 (let (($x303 (and $x284 $x104)))
 (let (($x262 (and $x303 $x353)))
 (let (($x250 (and $x262 $x91)))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x444 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (=> $x100 (= ?x444 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x426 (_ bv1 32))))
 (= $x100 (bvuge ?x407 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x407 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x426 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x256 (= ?x426 (_ bv0 32))))
 (= $x256 (= ?x407 (_ bv0 32)))))))
 ))
 (let (($x181 (and $x255 $x126)))
 (let (($x44 (and $x181 $x106)))
 (let (($x155 (and $x44 $x152)))
 (let (($x271 (and $x155 $x250)))
 (let (($x434 (=> $x271 $x366)))
 (not $x434))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x18362800)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xdb28c100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000a) #x28
    (ite (= x!0 #x00000009) #xc1
    (ite (= x!0 #x00000001) #x28
    (ite (= x!0 #x0000000b) #xdb
    (ite (= x!0 #x00000003) #x18
    (ite (= x!0 #x00000002) #x36
      #x00)))))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x00000003)
                                      (k!13 #x00000002)
                                      (k!13 #x00000001)
                                      (k!13 #x00000000))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x0000000b)
                                      (k!13 #x0000000a)
                                      (k!13 #x00000009)
                                      (k!13 #x00000008))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2b722c14)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x13587418)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x6df53b00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xeffef800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1358741b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2b722c17)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x13587418)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2b722c14)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1358741b) #xef
    (ite (= x!0 #x2b722c15) #x3b
    (ite (= x!0 #x2b722c17) #x6d
    (ite (= x!0 #x1358741a) #xfe
    (ite (= x!0 #x13587419) #xf8
    (ite (= x!0 #x2b722c16) #xf5
      #x00)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x1358741b)
                                      (k!13 #x1358741a)
                                      (k!13 #x13587419)
                                      (k!13 #x13587418))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!13 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!2 (k!13 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!3 (k!13 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14)))))
            (a!4 (k!13 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!13 #x2b722c17)
                                      (k!13 #x2b722c16)
                                      (k!13 #x2b722c15)
                                      (k!13 #x2b722c14))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x454 (= true false)))
 (let (($x440 (= $x454 true)))
 (let ((?x42 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x257 (= (_ bv0 32) ?x42)))
 (let ((?x185 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x468 (= (_ bv0 32) ?x185)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x447)))
 (let (($x466 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x376 (and $x466 $x223)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (and $x397 $x376)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x377 (and $x214 $x408)))
 (let (($x310 (not $x377)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x90 $x405)))
 (let (($x124 (and (not $x168) $x310)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (and $x252 $x335)))
 (let (($x11 (not $x413)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x442 $x60)))
 (let (($x34 (and (not $x230) $x11)))
 (let (($x141 (and (and (and (and (and (and $x34 $x124) $x263) $x455) $x314) $x200) $x468)))
 (let (($x346 (and $x141 $x257)))
 (let (($x449 (= $x346 true)))
 (let (($x430 (= $x449 true)))
 (let (($x76 (= $x430 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x384 (bvadd ?x193 input.dst.llvm-%m2)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x371))))
 (let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 ?x59))))))))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 $x169))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (=> $x104 $x304)))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 $x64))))))
 ))
 (let (($x36 (and $x471 $x353)))
 (let (($x178 (and $x36 $x139)))
 (let (($x342 (and $x178 $x157)))
 (let (($x148 (= $x342 true)))
 (let (($x70 (= $x148 true)))
 (let (($x394 (= $x70 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x83 (= (_ bv0 2) ?x276)))
 (let (($x416 (= $x83 true)))
 (let (($x241 (= $x416 true)))
 (let ((?x340 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x281 (= (_ bv0 2) ?x340)))
 (let (($x446 (= $x281 true)))
 (let (($x144 (= $x446 true)))
 (let (($x245 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x247 (bvadd ?x193 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x244))))
 (let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 ?x154))))))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 $x169))))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (=> $x130 $x304)))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 $x64))))))
 ))
 (let (($x173 (and $x268 $x368)))
 (let (($x72 (and $x173 $x367)))
 (let (($x436 (and $x72 $x245)))
 (let (($x388 (= $x436 true)))
 (let (($x441 (= $x388 true)))
 (let (($x94 (= $x441 true)))
 (let (($x158 (and $x94 $x144)))
 (let (($x379 (and $x158 $x241)))
 (let (($x71 (and $x379 $x394)))
 (let (($x279 (and $x71 $x76)))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 (bvuge ?x474 (_ bv1 32)))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 (= ?x474 (_ bv0 32)))))))
 ))
 (let (($x259 (and $x101 $x368)))
 (let (($x391 (and $x259 $x396)))
 (let (($x272 (and $x391 $x135)))
 (let (($x443 (and $x272 $x279)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 (bvuge ?x284 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 (= ?x284 (_ bv0 32)))))))
 ))
 (let (($x262 (and $x121 $x353)))
 (let (($x75 (and $x262 $x165)))
 (let (($x389 (and $x75 $x195)))
 (let (($x425 (and $x389 $x443)))
 (let (($x467 (=> $x425 $x440)))
 (not $x467))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x454 (= true false)))
 (let (($x440 (= $x454 true)))
 (let ((?x42 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x257 (= (_ bv0 32) ?x42)))
 (let ((?x185 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x468 (= (_ bv0 32) ?x185)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x447 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x447)))
 (let (($x466 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x376 (and $x466 $x223)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (and $x397 $x376)))
 (let (($x455 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x377 (and $x214 $x408)))
 (let (($x310 (not $x377)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x90 $x405)))
 (let (($x124 (and (not $x168) $x310)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (and $x252 $x335)))
 (let (($x11 (not $x413)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x442 $x60)))
 (let (($x34 (and (not $x230) $x11)))
 (let (($x141 (and (and (and (and (and (and $x34 $x124) $x263) $x455) $x314) $x200) $x468)))
 (let (($x346 (and $x141 $x257)))
 (let (($x449 (= $x346 true)))
 (let (($x430 (= $x449 true)))
 (let (($x76 (= $x430 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x384 (bvadd ?x193 input.dst.llvm-%m2)))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x371))))
 (let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 ?x59))))))))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 $x169))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (=> $x104 $x304)))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 $x64))))))
 ))
 (let (($x36 (and $x471 $x353)))
 (let (($x178 (and $x36 $x139)))
 (let (($x342 (and $x178 $x157)))
 (let (($x148 (= $x342 true)))
 (let (($x70 (= $x148 true)))
 (let (($x394 (= $x70 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x83 (= (_ bv0 2) ?x276)))
 (let (($x416 (= $x83 true)))
 (let (($x241 (= $x416 true)))
 (let ((?x340 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x281 (= (_ bv0 2) ?x340)))
 (let (($x446 (= $x281 true)))
 (let (($x144 (= $x446 true)))
 (let (($x245 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x193 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x247 (bvadd ?x193 input.dst.llvm-%m1)))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x244))))
 (let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 ?x154))))))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x401 (_ bv1 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 $x169))))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x304 (= false false)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (=> $x130 $x304)))))
 ))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x401 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x401 (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 $x64))))))
 ))
 (let (($x173 (and $x268 $x368)))
 (let (($x72 (and $x173 $x367)))
 (let (($x436 (and $x72 $x245)))
 (let (($x388 (= $x436 true)))
 (let (($x441 (= $x388 true)))
 (let (($x94 (= $x441 true)))
 (let (($x158 (and $x94 $x144)))
 (let (($x379 (and $x158 $x241)))
 (let (($x71 (and $x379 $x394)))
 (let (($x279 (and $x71 $x76)))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (=> $x10 (= ?x309 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x428 (_ bv1 32))))
 (= $x10 (bvuge ?x474 (_ bv1 32)))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x474 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x428 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x428 (_ bv0 32))))
 (= $x130 (= ?x474 (_ bv0 32)))))))
 ))
 (let (($x259 (and $x101 $x368)))
 (let (($x391 (and $x259 $x396)))
 (let (($x272 (and $x391 $x135)))
 (let (($x443 (and $x272 $x279)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x461 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (=> $x288 (= ?x461 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x288 (bvuge ?x412 (_ bv1 32))))
 (= $x288 (bvuge ?x284 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x284 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x412 (_ bv0 32))))
 (= $x104 (= ?x284 (_ bv0 32)))))))
 ))
 (let (($x262 (and $x121 $x353)))
 (let (($x75 (and $x262 $x165)))
 (let (($x389 (and $x75 $x195)))
 (let (($x425 (and $x389 $x443)))
 (let (($x467 (=> $x425 $x440)))
 (not $x467))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0a72c79c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd1026788)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd102678b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0a72c79f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd1026788)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0a72c79c)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000010))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000010))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000010) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000010))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000010))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000010) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000010) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x23 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_0 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x557 (bvadd ?x177 ?x23)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv1 32))) (select input.dst.llvm-mem ?x557))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv2 32))) ?x561))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x567)))))))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 $x344))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (=> $x309 $x302)))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 $x438))))))
 ))
 (let (($x187 (and $x261 $x457)))
 (let (($x57 (and $x187 $x233)))
 (let (($x571 (and $x57 $x570)))
 (let (($x572 (= $x571 true)))
 (let (($x573 (= $x572 true)))
 (let ((?x31 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x293 (= (_ bv0 2) ?x31)))
 (let (($x54 (= $x293 true)))
 (let (($x345 (= $x54 true)))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x205 (bvadd ?x177 input.dst.llvm-%m2)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x395))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x439))))))))))
 ))
 (let (($x331 (and $x57 $x295)))
 (let (($x56 (= $x331 true)))
 (let (($x260 (= $x56 true)))
 (let (($x79 (= $x260 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x9 (bvadd ?x177 input.dst.llvm-%m1)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x429))))
 (let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 ?x352))))))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 $x344))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (=> $x148 $x302)))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 $x438))))))
 ))
 (let (($x387 (and $x68 $x208)))
 (let (($x115 (and $x387 $x355)))
 (let (($x85 (and $x115 $x297)))
 (let (($x222 (= $x85 true)))
 (let (($x116 (= $x222 true)))
 (let (($x221 (= $x116 true)))
 (let (($x336 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x162 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x179 (and $x162 $x336)))
 (let (($x87 (= $x179 true)))
 (let (($x311 (= $x87 true)))
 (let (($x96 (= $x311 true)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x424 (= (_ bv0 32) ?x240)))
 (let ((?x242 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x41 (= (_ bv0 32) ?x242)))
 (let ((?x29 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x14 $x189)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x360 (and $x321 $x13)))
 (let (($x192 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x62 $x212)))
 (let (($x299 (not $x306)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x464 (and $x440 $x467)))
 (let (($x435 (and (not $x464) $x299)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x430 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x430 $x76)))
 (let (($x443 (not $x279)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x141 $x257)))
 (let (($x454 (and (not $x346) $x443)))
 (let (($x432 (and (and (and (and (and (and $x454 $x435) $x119) $x192) $x360) $x105) $x41)))
 (let (($x239 (and $x432 $x424)))
 (let (($x5 (= $x239 true)))
 (let (($x196 (= $x5 true)))
 (let (($x375 (= $x196 true)))
 (let ((?x232 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x215 (= (_ bv0 2) ?x232)))
 (let (($x200 (= $x215 true)))
 (let (($x307 (= $x200 true)))
 (let (($x21 (and $x307 $x375)))
 (let (($x102 (and $x21 $x96)))
 (let (($x191 (and $x102 $x221)))
 (let (($x88 (and $x191 $x79)))
 (let (($x12 (and $x88 $x345)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 (bvuge ?x406 (_ bv1 32)))))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 (= ?x406 (_ bv0 32)))))))
 ))
 (let (($x442 (and $x394 $x208)))
 (let (($x408 (and $x442 $x214)))
 (let (($x223 (and $x408 $x447)))
 (let (($x398 (and $x223 $x12)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 (bvuge ?x46 (_ bv1 32)))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 (= ?x46 (_ bv0 32)))))))
 ))
 (let (($x417 (and $x275 $x457)))
 (let (($x247 (and $x417 $x99)))
 (let (($x351 (and $x247 $x224)))
 (let (($x225 (and $x351 $x398)))
 (let (($x574 (=> $x225 $x573)))
 (let (($x575 (not $x574)))
 (let (($x501 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x485 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x486 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x487 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x486)))
 (let (($x489 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x490 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x486)))
 (let (($x495 (or false (or false (and (and true (or $x490 $x489)) (or $x487 $x485))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x495) (= (select solver-mem_0 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_0 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x501) $x575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x570 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x23 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_0 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x557 (bvadd ?x177 ?x23)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv1 32))) (select input.dst.llvm-mem ?x557))))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x557 (_ bv2 32))) ?x561))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x567)))))))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 $x344))))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (=> $x309 $x302)))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 $x438))))))
 ))
 (let (($x187 (and $x261 $x457)))
 (let (($x57 (and $x187 $x233)))
 (let (($x571 (and $x57 $x570)))
 (let (($x572 (= $x571 true)))
 (let (($x573 (= $x572 true)))
 (let ((?x31 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x293 (= (_ bv0 2) ?x31)))
 (let (($x54 (= $x293 true)))
 (let (($x345 (= $x54 true)))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x205 (bvadd ?x177 input.dst.llvm-%m2)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x395))))
 (let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 ?x439))))))))))
 ))
 (let (($x331 (and $x57 $x295)))
 (let (($x56 (= $x331 true)))
 (let (($x260 (= $x56 true)))
 (let (($x79 (= $x260 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x9 (bvadd ?x177 input.dst.llvm-%m1)))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv1 32))) (select input.dst.llvm-mem ?x9))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x9 (_ bv2 32))) ?x429))))
 (let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 ?x352))))))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (bvuge ?x220 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 $x344))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x302 (= false false)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (=> $x148 $x302)))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x438 (= ?x220 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 $x438))))))
 ))
 (let (($x387 (and $x68 $x208)))
 (let (($x115 (and $x387 $x355)))
 (let (($x85 (and $x115 $x297)))
 (let (($x222 (= $x85 true)))
 (let (($x116 (= $x222 true)))
 (let (($x221 (= $x116 true)))
 (let (($x336 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x162 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x179 (and $x162 $x336)))
 (let (($x87 (= $x179 true)))
 (let (($x311 (= $x87 true)))
 (let (($x96 (= $x311 true)))
 (let ((?x240 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x424 (= (_ bv0 32) ?x240)))
 (let ((?x242 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x41 (= (_ bv0 32) ?x242)))
 (let ((?x29 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x14 $x189)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x360 (and $x321 $x13)))
 (let (($x192 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x62 $x212)))
 (let (($x299 (not $x306)))
 (let (($x467 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x440 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x464 (and $x440 $x467)))
 (let (($x435 (and (not $x464) $x299)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x430 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x430 $x76)))
 (let (($x443 (not $x279)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x346 (and $x141 $x257)))
 (let (($x454 (and (not $x346) $x443)))
 (let (($x432 (and (and (and (and (and (and $x454 $x435) $x119) $x192) $x360) $x105) $x41)))
 (let (($x239 (and $x432 $x424)))
 (let (($x5 (= $x239 true)))
 (let (($x196 (= $x5 true)))
 (let (($x375 (= $x196 true)))
 (let ((?x232 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x215 (= (_ bv0 2) ?x232)))
 (let (($x200 (= $x215 true)))
 (let (($x307 (= $x200 true)))
 (let (($x21 (and $x307 $x375)))
 (let (($x102 (and $x21 $x96)))
 (let (($x191 (and $x102 $x221)))
 (let (($x88 (and $x191 $x79)))
 (let (($x12 (and $x88 $x345)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x472 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (=> $x168 (= ?x472 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x214 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x342 (_ bv1 32))))
 (= $x168 (bvuge ?x406 (_ bv1 32)))))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x342 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x342 (_ bv0 32))))
 (= $x148 (= ?x406 (_ bv0 32)))))))
 ))
 (let (($x442 (and $x394 $x208)))
 (let (($x408 (and $x442 $x214)))
 (let (($x223 (and $x408 $x447)))
 (let (($x398 (and $x223 $x12)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (=> $x19 (= ?x244 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x391 (_ bv1 32))))
 (= $x19 (bvuge ?x46 (_ bv1 32)))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x46 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x391 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x391 (_ bv0 32))))
 (= $x309 (= ?x46 (_ bv0 32)))))))
 ))
 (let (($x417 (and $x275 $x457)))
 (let (($x247 (and $x417 $x99)))
 (let (($x351 (and $x247 $x224)))
 (let (($x225 (and $x351 $x398)))
 (let (($x574 (=> $x225 $x573)))
 (let (($x575 (not $x574)))
 (let (($x501 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x485 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x486 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x487 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x486)))
 (let (($x489 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x490 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x486)))
 (let (($x495 (or false (or false (and (and true (or $x490 $x489)) (or $x487 $x485))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x495) (= (select solver-mem_0 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_0 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x501) $x575)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!59))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x411c2454)
  (define-fun solver-mem_0 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!59))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x83101500)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!60))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x83101503)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x411c2457)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x83101500)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x411c2454)
  (define-fun k!63 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!65 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!65 (k!63 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!59!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x01000003) #x00
    (ite (= x!0 #x01000001) #x00
    (ite (= x!0 #x411c2454) #x00
    (ite (= x!0 #x83101501) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x83101500) #x00
    (ite (= x!0 #x411c2455) #x00
    (ite (= x!0 #x01000000) #x00
    (ite (= x!0 #x83101503) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x01000002) #x00
    (ite (= x!0 #x411c2457) #x00
    (ite (= x!0 #x00000c22) #x40
    (ite (= x!0 #x00000000) #x10
    (ite (= x!0 #x00000002) #x00
      #x02))))))))))))))))
  (define-fun k!61 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x83101501 x!0)
                    (ite (bvule #x83101503 x!0)
                         (ite (bvule #x83101504 x!0) #x83101504 #x83101503)
                         #x83101501)
                    #x83101500)))
    (let ((a!2 (ite (bvule #x411c2457 x!0)
                    (ite (bvule #x411c2458 x!0)
                         (ite (bvule #x83101500 x!0) a!1 #x411c2458)
                         #x411c2457)
                    #x411c2455)))
    (let ((a!3 (ite (bvule #x01000003 x!0)
                    (ite (bvule #x411c2454 x!0)
                         (ite (bvule #x411c2455 x!0) a!2 #x411c2454)
                         #x01000003)
                    #x01000002)))
    (let ((a!4 (ite (bvule #x01000000 x!0)
                    (ite (bvule #x01000001 x!0)
                         (ite (bvule #x01000002 x!0) a!3 #x01000001)
                         #x01000000)
                    #x00000c22)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x00000c22 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!59 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!59!66 (k!61 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (concat (k!59 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!59 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!64 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!62 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!59))
              (= x!3 (_ as-array k!60))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x01000000
      #x83101501))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!64 (k!62 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (concat (k!59 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!59 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!59 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000010
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!60 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x354 (bvadd ?x28 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x277))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 ?x138))))))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x243 (_ bv1 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (= $x311 $x201))))))
 ))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x53 (= false false)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (=> $x163 $x53)))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (= $x163 $x176))))))
 ))
 (let (($x366 (and $x40 $x424)))
 (let (($x281 (and $x366 $x421)))
 (let (($x384 (and $x281 $x178)))
 (let (($x6 (= $x384 true)))
 (let (($x137 (= $x6 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x150 (= (_ bv0 2) ?x93)))
 (let (($x106 (= $x150 true)))
 (let (($x207 (= $x106 true)))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x354 (bvadd ?x28 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x277))))
 (let ((?x447 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (=> $x394 (= ?x447 ?x138))))))))))
 ))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x243 (_ bv1 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (= $x394 $x201))))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x53 (= false false)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (=> $x457 $x53)))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (= $x457 $x176))))))
 ))
 (let (($x448 (and $x58 $x247)))
 (let (($x323 (and $x448 $x136)))
 (let (($x319 (and $x323 $x315)))
 (let (($x184 (= $x319 true)))
 (let (($x322 (= $x184 true)))
 (let (($x50 (= $x322 true)))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x125 (bvadd ?x28 input.dst.llvm-%m1)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x174))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 ?x378))))))))))
 ))
 (let (($x452 (and $x281 $x211)))
 (let (($x305 (= $x452 true)))
 (let (($x382 (= $x305 true)))
 (let (($x86 (= $x382 true)))
 (let (($x563 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x565 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x559 (and $x565 $x563)))
 (let (($x560 (= $x559 true)))
 (let (($x558 (= $x560 true)))
 (let (($x561 (= $x558 true)))
 (let ((?x79 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x79)))
 (let ((?x56 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x260 (= (_ bv0 32) ?x56)))
 (let ((?x295 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x295)))
 (let ((?x359 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x439 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x359)))
 (let (($x358 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x358 $x439)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x198 (and $x155 $x236)))
 (let (($x152 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (and $x187 $x403)))
 (let (($x57 (not $x233)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x191 $x114)))
 (let (($x372 (and (not $x261) $x57)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x126 $x297)))
 (let (($x222 (not $x85)))
 (let (($x407 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x25 $x407)))
 (let (($x221 (and (not $x352) $x222)))
 (let (($x398 (and (and (and (and (and (and $x221 $x372) $x328) $x152) $x198) $x331) $x260)))
 (let (($x225 (and $x398 $x88)))
 (let (($x274 (= $x225 true)))
 (let (($x399 (= $x274 true)))
 (let (($x129 (= $x399 true)))
 (let ((?x255 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x265 (= (_ bv0 2) ?x255)))
 (let (($x390 (= $x265 true)))
 (let (($x426 (= $x390 true)))
 (let (($x159 (and $x426 $x129)))
 (let (($x564 (and $x159 $x561)))
 (let (($x120 (and $x564 $x86)))
 (let (($x22 (and $x120 $x50)))
 (let (($x44 (and $x22 $x207)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (= $x311 (bvuge ?x360 (_ bv1 32)))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (= $x163 (= ?x360 (_ bv0 32)))))))
 ))
 (let (($x239 (and $x41 $x424)))
 (let (($x117 (and $x239 $x102)))
 (let (($x177 (and $x117 $x237)))
 (let (($x444 (and $x177 $x44)))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x447 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (=> $x394 (= ?x447 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (= $x394 (bvuge ?x249 (_ bv1 32)))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (= $x457 (= ?x249 (_ bv0 32)))))))
 ))
 (let (($x244 (and $x19 $x247)))
 (let (($x442 (and $x244 $x208)))
 (let (($x232 (and $x442 $x314)))
 (let (($x190 (and $x232 $x444)))
 (let (($x35 (=> $x190 $x137)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x354 (bvadd ?x28 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x277))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 ?x138))))))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x243 (_ bv1 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (= $x311 $x201))))))
 ))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x53 (= false false)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (=> $x163 $x53)))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (= $x163 $x176))))))
 ))
 (let (($x366 (and $x40 $x424)))
 (let (($x281 (and $x366 $x421)))
 (let (($x384 (and $x281 $x178)))
 (let (($x6 (= $x384 true)))
 (let (($x137 (= $x6 true)))
 (let ((?x93 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x150 (= (_ bv0 2) ?x93)))
 (let (($x106 (= $x150 true)))
 (let (($x207 (= $x106 true)))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x354 (bvadd ?x28 input.dst.llvm-%m2)))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x277))))
 (let ((?x447 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (=> $x394 (= ?x447 ?x138))))))))))
 ))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x243 (_ bv1 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (= $x394 $x201))))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x53 (= false false)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (=> $x457 $x53)))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (= $x457 $x176))))))
 ))
 (let (($x448 (and $x58 $x247)))
 (let (($x323 (and $x448 $x136)))
 (let (($x319 (and $x323 $x315)))
 (let (($x184 (= $x319 true)))
 (let (($x322 (= $x184 true)))
 (let (($x50 (= $x322 true)))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x125 (bvadd ?x28 input.dst.llvm-%m1)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x174))))
 (let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 ?x378))))))))))
 ))
 (let (($x452 (and $x281 $x211)))
 (let (($x305 (= $x452 true)))
 (let (($x382 (= $x305 true)))
 (let (($x86 (= $x382 true)))
 (let (($x563 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x565 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x559 (and $x565 $x563)))
 (let (($x560 (= $x559 true)))
 (let (($x558 (= $x560 true)))
 (let (($x561 (= $x558 true)))
 (let ((?x79 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x79)))
 (let ((?x56 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x260 (= (_ bv0 32) ?x56)))
 (let ((?x295 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x295)))
 (let ((?x359 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x439 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x359)))
 (let (($x358 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x358 $x439)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x198 (and $x155 $x236)))
 (let (($x152 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x233 (and $x187 $x403)))
 (let (($x57 (not $x233)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x191 $x114)))
 (let (($x372 (and (not $x261) $x57)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x126 $x297)))
 (let (($x222 (not $x85)))
 (let (($x407 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x25 $x407)))
 (let (($x221 (and (not $x352) $x222)))
 (let (($x398 (and (and (and (and (and (and $x221 $x372) $x328) $x152) $x198) $x331) $x260)))
 (let (($x225 (and $x398 $x88)))
 (let (($x274 (= $x225 true)))
 (let (($x399 (= $x274 true)))
 (let (($x129 (= $x399 true)))
 (let ((?x255 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x265 (= (_ bv0 2) ?x255)))
 (let (($x390 (= $x265 true)))
 (let (($x426 (= $x390 true)))
 (let (($x159 (and $x426 $x129)))
 (let (($x564 (and $x159 $x561)))
 (let (($x120 (and $x564 $x86)))
 (let (($x22 (and $x120 $x50)))
 (let (($x44 (and $x22 $x207)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (=> $x311 (= ?x251 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x105 (_ bv1 32))))
 (= $x311 (bvuge ?x360 (_ bv1 32)))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x105 (_ bv0 32))))
 (= $x163 (= ?x360 (_ bv0 32)))))))
 ))
 (let (($x239 (and $x41 $x424)))
 (let (($x117 (and $x239 $x102)))
 (let (($x177 (and $x117 $x237)))
 (let (($x444 (and $x177 $x44)))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x447 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (=> $x394 (= ?x447 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x272 (_ bv1 32))))
 (= $x394 (bvuge ?x249 (_ bv1 32)))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x272 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x272 (_ bv0 32))))
 (= $x457 (= ?x249 (_ bv0 32)))))))
 ))
 (let (($x244 (and $x19 $x247)))
 (let (($x442 (and $x244 $x208)))
 (let (($x232 (and $x442 $x314)))
 (let (($x190 (and $x232 $x444)))
 (let (($x35 (=> $x190 $x137)))
 (not $x35)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xed27f784)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xafb8460c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0f492010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0f492013)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xafb8460f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0f492010)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xafb8460c)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xed27f784) #x01
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!18 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000001
      (concat (k!15 (bvadd #xed27f787 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f786 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f785 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xed27f784 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000001
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x10314d08)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0956d684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000030)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04cbcc90)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x04cbcc93)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0956d687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04cbcc90)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0956d684)
  (define-fun input.spec-%var-m2-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!18 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000030 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000030)
         #x00000000))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000c3) #x20
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000030)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x10314d0b (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d0a (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d09 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x10314d08 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x20000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x20000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000030) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000030) true
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x455 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_1 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x536 (bvadd ?x250 ?x455)))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv1 32))) (select input.dst.llvm-mem ?x536))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv2 32))) ?x540))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 ?x553)))))))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x24 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (= $x312 $x313))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x115 (= false false)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (=> $x186 $x115)))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x24 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (= $x186 $x146))))))
 ))
 (let (($x431 (and $x292 $x366)))
 (let (($x78 (and $x431 $x209)))
 (let (($x547 (and $x78 $x546)))
 (let (($x545 (= $x547 true)))
 (let (($x548 (= $x545 true)))
 (let ((?x396 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x391 (= (_ bv0 2) ?x396)))
 (let (($x309 (= $x391 true)))
 (let (($x10 (= $x309 true)))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x145 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem ?x145))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv2 32))) ?x179))))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (=> $x126 (= ?x372 ?x481))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x24 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (= $x126 $x313))))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x115 (= false false)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (=> $x251 $x115)))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x24 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (= $x251 $x146))))))
 ))
 (let (($x8 (and $x330 $x9)))
 (let (($x64 (and $x8 $x408)))
 (let (($x108 (and $x64 $x273)))
 (let (($x483 (= $x108 true)))
 (let (($x484 (= $x483 true)))
 (let (($x409 (= $x484 true)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x411 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x340))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 ?x158))))))))))
 ))
 (let (($x324 (and $x78 $x347)))
 (let (($x438 (= $x324 true)))
 (let (($x418 (= $x438 true)))
 (let (($x308 (= $x418 true)))
 (let (($x60 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x574 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x230 (and $x574 $x60)))
 (let (($x52 (= $x230 true)))
 (let (($x71 (= $x52 true)))
 (let (($x213 (= $x71 true)))
 (let ((?x497 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x498 (= (_ bv0 32) ?x497)))
 (let ((?x412 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x496 (= (_ bv0 32) ?x412)))
 (let ((?x307 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x307)))
 (let ((?x386 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x386)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (and $x137 $x259)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x6 $x215)))
 (let (($x384 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x150 $x106)))
 (let (($x44 (not $x207)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x50 $x22)))
 (let (($x190 (and (not $x93) $x44)))
 (let (($x420 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x423 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x423 $x420)))
 (let (($x319 (not $x315)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x231 $x277)))
 (let (($x322 (and (not $x32) $x319)))
 (let (($x488 (and (and (and (and (and (and $x322 $x190) $x139) $x384) $x200) $x141) $x496)))
 (let (($x493 (and $x488 $x498)))
 (let (($x494 (= $x493 true)))
 (let (($x567 (= $x494 true)))
 (let (($x568 (= $x567 true)))
 (let ((?x354 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x228 (= (_ bv0 2) ?x354)))
 (let (($x339 (= $x228 true)))
 (let (($x465 (= $x339 true)))
 (let (($x570 (and $x465 $x568)))
 (let (($x370 (and $x570 $x213)))
 (let (($x489 (and $x370 $x308)))
 (let (($x482 (and $x489 $x409)))
 (let (($x351 (and $x482 $x10)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (= $x312 (bvuge ?x564 (_ bv1 32)))))))
 ))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (= $x186 (= ?x564 (_ bv0 32)))))))
 ))
 (let (($x201 (and $x176 $x366)))
 (let (($x174 (and $x201 $x383)))
 (let (($x393 (and $x174 $x448)))
 (let (($x157 (and $x393 $x351)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (=> $x126 (= ?x372 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (= $x126 (bvuge ?x87 (_ bv1 32)))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (= $x251 (= ?x87 (_ bv0 32)))))))
 ))
 (let (($x33 (and $x355 $x9)))
 (let (($x222 (and $x33 $x85)))
 (let (($x293 (and $x222 $x328)))
 (let (($x342 (and $x293 $x157)))
 (let (($x551 (=> $x342 $x548)))
 (let (($x554 (not $x551)))
 (let (($x361 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x195 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x389 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x364 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x389)))
 (let (($x130 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x389)))
 (let (($x268 (or false (or false (and (and true (or $x7 $x130)) (or $x364 $x195))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x268) (= (select solver-mem_1 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_1 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x361) $x554)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x455 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_1 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m1)))
 (let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x536 (bvadd ?x250 ?x455)))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv1 32))) (select input.dst.llvm-mem ?x536))))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x536 (_ bv2 32))) ?x540))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 ?x553)))))))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x24 (_ bv1 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (= $x312 $x313))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x115 (= false false)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (=> $x186 $x115)))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x24 (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (= $x186 $x146))))))
 ))
 (let (($x431 (and $x292 $x366)))
 (let (($x78 (and $x431 $x209)))
 (let (($x547 (and $x78 $x546)))
 (let (($x545 (= $x547 true)))
 (let (($x548 (= $x545 true)))
 (let ((?x396 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x391 (= (_ bv0 2) ?x396)))
 (let (($x309 (= $x391 true)))
 (let (($x10 (= $x309 true)))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x145 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv1 32))) (select input.dst.llvm-mem ?x145))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x145 (_ bv2 32))) ?x179))))
 (let ((?x372 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (=> $x126 (= ?x372 ?x481))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (bvuge ?x24 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (= $x126 $x313))))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x115 (= false false)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (=> $x251 $x115)))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x24 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (= ?x24 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (= $x251 $x146))))))
 ))
 (let (($x8 (and $x330 $x9)))
 (let (($x64 (and $x8 $x408)))
 (let (($x108 (and $x64 $x273)))
 (let (($x483 (= $x108 true)))
 (let (($x484 (= $x483 true)))
 (let (($x409 (= $x484 true)))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x250 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x411 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv1 32))) (select input.dst.llvm-mem ?x411))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x411 (_ bv2 32))) ?x340))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 ?x158))))))))))
 ))
 (let (($x324 (and $x78 $x347)))
 (let (($x438 (= $x324 true)))
 (let (($x418 (= $x438 true)))
 (let (($x308 (= $x418 true)))
 (let (($x60 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x574 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x230 (and $x574 $x60)))
 (let (($x52 (= $x230 true)))
 (let (($x71 (= $x52 true)))
 (let (($x213 (= $x71 true)))
 (let ((?x497 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x498 (= (_ bv0 32) ?x497)))
 (let ((?x412 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x496 (= (_ bv0 32) ?x412)))
 (let ((?x307 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x307)))
 (let ((?x386 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x386)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (and $x137 $x259)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x6 $x215)))
 (let (($x384 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x150 $x106)))
 (let (($x44 (not $x207)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x50 $x22)))
 (let (($x190 (and (not $x93) $x44)))
 (let (($x420 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x423 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x423 $x420)))
 (let (($x319 (not $x315)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x231 $x277)))
 (let (($x322 (and (not $x32) $x319)))
 (let (($x488 (and (and (and (and (and (and $x322 $x190) $x139) $x384) $x200) $x141) $x496)))
 (let (($x493 (and $x488 $x498)))
 (let (($x494 (= $x493 true)))
 (let (($x567 (= $x494 true)))
 (let (($x568 (= $x567 true)))
 (let ((?x354 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x228 (= (_ bv0 2) ?x354)))
 (let (($x339 (= $x228 true)))
 (let (($x465 (= $x339 true)))
 (let (($x570 (and $x465 $x568)))
 (let (($x370 (and $x570 $x213)))
 (let (($x489 (and $x370 $x308)))
 (let (($x482 (and $x489 $x409)))
 (let (($x351 (and $x482 $x10)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (=> $x312 (= ?x120 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x226 (_ bv1 32))))
 (= $x312 (bvuge ?x564 (_ bv1 32)))))))
 ))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x564 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x226 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x226 (_ bv0 32))))
 (= $x186 (= ?x564 (_ bv0 32)))))))
 ))
 (let (($x201 (and $x176 $x366)))
 (let (($x174 (and $x201 $x383)))
 (let (($x393 (and $x174 $x448)))
 (let (($x157 (and $x393 $x351)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (=> $x126 (= ?x372 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x117 (_ bv1 32))))
 (= $x126 (bvuge ?x87 (_ bv1 32)))))))
 ))
 (let (($x355 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x251 (= ?x117 (_ bv0 32))))
 (= $x251 (= ?x87 (_ bv0 32)))))))
 ))
 (let (($x33 (and $x355 $x9)))
 (let (($x222 (and $x33 $x85)))
 (let (($x293 (and $x222 $x328)))
 (let (($x342 (and $x293 $x157)))
 (let (($x551 (=> $x342 $x548)))
 (let (($x554 (not $x551)))
 (let (($x361 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let (($x195 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x389 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x364 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x389)))
 (let (($x130 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x389)))
 (let (($x268 (or false (or false (and (and true (or $x7 $x130)) (or $x364 $x195))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x268) (= (select solver-mem_1 memmask-bounded-var!) (select input.dst.llvm-mem memmask-bounded-var!)) (= (select solver-mem_1 memmask-bounded-var!) (_ bv0 8))))))))))
 ))
 (and (and true $x361) $x554)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!80))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x21000400)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0d0b1a14)
  (define-fun solver-mem_1 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!80))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!81))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0d0b1a17)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x21000403)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0d0b1a14)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x21000400)
  (define-fun k!82 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x21000401 x!0)
                    (ite (bvule #x21000403 x!0)
                         (ite (bvule #x21000404 x!0) #x21000404 #x21000403)
                         #x21000401)
                    #x21000400)))
    (let ((a!2 (ite (bvule #x0d0b1a18 x!0)
                    (ite (bvule #x10040004 x!0)
                         (ite (bvule #x21000400 x!0) a!1 #x10040004)
                         #x0d0b1a18)
                    #x0d0b1a17)))
    (let ((a!3 (ite (bvule #x0d0b1a14 x!0)
                    (ite (bvule #x0d0b1a15 x!0)
                         (ite (bvule #x0d0b1a17 x!0) a!2 #x0d0b1a15)
                         #x0d0b1a14)
                    #x04000003)))
    (let ((a!4 (ite (bvule #x04000001 x!0)
                    (ite (bvule #x04000002 x!0)
                         (ite (bvule #x04000003 x!0) a!3 #x04000002)
                         #x04000001)
                    #x04000000)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x04000000 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!80!85 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000000) #x00
    (ite (= x!0 #x21000400) #x00
    (ite (= x!0 #x0d0b1a15) #x00
    (ite (= x!0 #x21000404) #x40
    (ite (= x!0 #x00000001) #x40
    (ite (= x!0 #x0d0b1a14) #x00
    (ite (= x!0 #x21000401) #x00
    (ite (= x!0 #x0d093452) #x10
    (ite (= x!0 #x04000002) #x00
    (ite (= x!0 #x0d0b1a18) #x10
    (ite (= x!0 #x0d0b1a17) #x00
    (ite (= x!0 #x10040004) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x04000001) #x00
    (ite (= x!0 #x04000003) #x00
    (ite (= x!0 #x21000403) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000002) #x04
      #x02)))))))))))))))))))
  (define-fun k!80 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!80!85 (k!82 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!86 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!84 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!86 (k!84 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (concat (k!80 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!80 (bvmul #x00000004 x!0)))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!80))
              (= x!3 (_ as-array k!81))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x04000000
      #x00000010))
  (define-fun k!83 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!87 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!87 (k!83 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (concat (k!80 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!80 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!80 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00044000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun k!81 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x14)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x79 (= false true)))
 (let (($x88 (= $x79 true)))
 (let ((?x212 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x14 (= (_ bv0 32) ?x212)))
 (let ((?x140 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x435 (= (_ bv0 32) ?x140)))
 (let ((?x221 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x203 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x474 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x203)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x407 (and $x132 $x474)))
 (let (($x385 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x385 $x407)))
 (let (($x437 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x426 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x350 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x360 $x350)))
 (let (($x237 (not $x69)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x405 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x405 $x127)))
 (let (($x265 (and (not $x13) $x237)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x433 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x433 $x109)))
 (let (($x217 (not $x206)))
 (let (($x459 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x30 $x459)))
 (let (($x168 (and (not $x193) $x217)))
 (let (($x306 (and (and (and (and (and (and $x168 $x265) $x426) $x437) $x135) $x191) $x435)))
 (let (($x142 (and $x306 $x14)))
 (let (($x238 (= $x142 true)))
 (let (($x100 (= $x238 true)))
 (let (($x205 (= $x100 true)))
 (let (($x66 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x91 (bvadd ?x402 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x501 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x417))))
 (let ((?x448 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (=> $x176 (= ?x448 ?x501))))))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x551 (_ bv1 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (= $x176 $x56))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (=> $x9 $x227)))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (= $x9 $x554))))))
 ))
 (let (($x47 (and $x572 $x222)))
 (let (($x378 (and $x47 $x283)))
 (let (($x131 (and $x378 $x66)))
 (let (($x500 (= $x131 true)))
 (let (($x576 (= $x500 true)))
 (let (($x298 (= $x576 true)))
 (let ((?x436 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x388 (= (_ bv0 2) ?x436)))
 (let (($x245 (= $x388 true)))
 (let (($x285 (= $x245 true)))
 (let (($x310 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x134 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x380 (and $x134 $x310)))
 (let (($x83 (= $x380 true)))
 (let (($x304 (= $x83 true)))
 (let (($x416 (= $x304 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x11 (= (_ bv0 2) ?x182)))
 (let (($x329 (= $x11 true)))
 (let (($x20 (= $x329 true)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x492 (bvadd ?x402 input.dst.llvm-%m1)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv1 32))) (select input.dst.llvm-mem ?x492))))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv2 32))) ?x147))))
 (let ((?x194 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (=> $x71 (= ?x194 ?x427))))))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x551 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (= $x71 $x56))))))
 ))
 (let (($x498 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (=> $x485 $x227)))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (= $x485 $x554))))))
 ))
 (let (($x326 (and $x46 $x498)))
 (let (($x70 (and $x326 $x398)))
 (let (($x104 (and $x70 $x320)))
 (let (($x422 (= $x104 true)))
 (let (($x133 (= $x422 true)))
 (let (($x165 (= $x133 true)))
 (let (($x377 (and $x165 $x20)))
 (let (($x316 (and $x377 $x416)))
 (let (($x374 (and $x316 $x285)))
 (let (($x45 (and $x374 $x298)))
 (let (($x189 (and $x45 $x205)))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (=> $x71 (= ?x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (= $x71 (bvuge ?x200 (_ bv1 32)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (= $x485 (= ?x200 (_ bv0 32)))))))
 ))
 (let (($x493 (and $x496 $x498)))
 (let (($x143 (and $x493 $x370)))
 (let (($x250 (and $x143 $x254)))
 (let (($x453 (and $x250 $x189)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (=> $x176 (= ?x448 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (= $x176 (bvuge ?x344 (_ bv1 32)))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (= $x9 (= ?x344 (_ bv0 32)))))))
 ))
 (let (($x372 (and $x126 $x222)))
 (let (($x201 (and $x372 $x366)))
 (let (($x354 (and $x201 $x323)))
 (let (($x274 (and $x354 $x453)))
 (let (($x225 (=> $x274 $x88)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x79 (= false true)))
 (let (($x88 (= $x79 true)))
 (let ((?x212 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x14 (= (_ bv0 32) ?x212)))
 (let ((?x140 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x435 (= (_ bv0 32) ?x140)))
 (let ((?x221 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x203 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x474 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x203)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x407 (and $x132 $x474)))
 (let (($x385 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x385 $x407)))
 (let (($x437 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x426 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x350 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x360 $x350)))
 (let (($x237 (not $x69)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x405 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x405 $x127)))
 (let (($x265 (and (not $x13) $x237)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x433 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x433 $x109)))
 (let (($x217 (not $x206)))
 (let (($x459 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x30 $x459)))
 (let (($x168 (and (not $x193) $x217)))
 (let (($x306 (and (and (and (and (and (and $x168 $x265) $x426) $x437) $x135) $x191) $x435)))
 (let (($x142 (and $x306 $x14)))
 (let (($x238 (= $x142 true)))
 (let (($x100 (= $x238 true)))
 (let (($x205 (= $x100 true)))
 (let (($x66 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x91 (bvadd ?x402 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x501 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x417))))
 (let ((?x448 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (=> $x176 (= ?x448 ?x501))))))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x551 (_ bv1 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (= $x176 $x56))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (=> $x9 $x227)))))
 ))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (= $x9 $x554))))))
 ))
 (let (($x47 (and $x572 $x222)))
 (let (($x378 (and $x47 $x283)))
 (let (($x131 (and $x378 $x66)))
 (let (($x500 (= $x131 true)))
 (let (($x576 (= $x500 true)))
 (let (($x298 (= $x576 true)))
 (let ((?x436 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x388 (= (_ bv0 2) ?x436)))
 (let (($x245 (= $x388 true)))
 (let (($x285 (= $x245 true)))
 (let (($x310 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x134 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x380 (and $x134 $x310)))
 (let (($x83 (= $x380 true)))
 (let (($x304 (= $x83 true)))
 (let (($x416 (= $x304 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x11 (= (_ bv0 2) ?x182)))
 (let (($x329 (= $x11 true)))
 (let (($x20 (= $x329 true)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x492 (bvadd ?x402 input.dst.llvm-%m1)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv1 32))) (select input.dst.llvm-mem ?x492))))
 (let ((?x427 (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x492 (_ bv2 32))) ?x147))))
 (let ((?x194 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (=> $x71 (= ?x194 ?x427))))))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x551 (_ bv1 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (= $x71 $x56))))))
 ))
 (let (($x498 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x227 (= false false)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (=> $x485 $x227)))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x554 (= ?x551 (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (= $x485 $x554))))))
 ))
 (let (($x326 (and $x46 $x498)))
 (let (($x70 (and $x326 $x398)))
 (let (($x104 (and $x70 $x320)))
 (let (($x422 (= $x104 true)))
 (let (($x133 (= $x422 true)))
 (let (($x165 (= $x133 true)))
 (let (($x377 (and $x165 $x20)))
 (let (($x316 (and $x377 $x416)))
 (let (($x374 (and $x316 $x285)))
 (let (($x45 (and $x374 $x298)))
 (let (($x189 (and $x45 $x205)))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x194 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (=> $x71 (= ?x194 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x141 (_ bv1 32))))
 (= $x71 (bvuge ?x200 (_ bv1 32)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x141 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x141 (_ bv0 32))))
 (= $x485 (= ?x200 (_ bv0 32)))))))
 ))
 (let (($x493 (and $x496 $x498)))
 (let (($x143 (and $x493 $x370)))
 (let (($x250 (and $x143 $x254)))
 (let (($x453 (and $x250 $x189)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (=> $x176 (= ?x448 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x176 (bvuge ?x177 (_ bv1 32))))
 (= $x176 (bvuge ?x344 (_ bv1 32)))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x344 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x177 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x177 (_ bv0 32))))
 (= $x9 (= ?x344 (_ bv0 32)))))))
 ))
 (let (($x372 (and $x126 $x222)))
 (let (($x201 (and $x372 $x366)))
 (let (($x354 (and $x201 $x323)))
 (let (($x274 (and $x354 $x453)))
 (let (($x225 (=> $x274 $x88)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd5061dc4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbc572dd0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbc572dd3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd5061dc7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbc572dd0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd5061dc4)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00018080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xef028004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xef028007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00018083)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xef028004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00018080)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!16 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x643 (= true false)))
 (let (($x644 (= $x643 true)))
 (let ((?x628 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x629 (= (_ bv0 32) ?x628)))
 (let ((?x626 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x627 (= (_ bv0 32) ?x626)))
 (let ((?x624 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x625 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x624)))
 (let ((?x620 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x621 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x620)))
 (let (($x619 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (and $x619 $x621)))
 (let (($x618 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x623 (and $x618 $x622)))
 (let (($x617 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x609 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x608 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x610 (and $x608 $x609)))
 (let (($x611 (not $x610)))
 (let (($x606 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x605 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x607 (and $x605 $x606)))
 (let (($x613 (and (not $x607) $x611)))
 (let (($x600 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x601 (and $x599 $x600)))
 (let (($x602 (not $x601)))
 (let (($x596 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x597 (and $x594 $x596)))
 (let (($x604 (and (not $x597) $x602)))
 (let (($x635 (and (and (and (and (and (and $x604 $x613) $x615) $x617) $x623) $x625) $x627)))
 (let (($x636 (and $x635 $x629)))
 (let (($x637 (= $x636 true)))
 (let (($x638 (= $x637 true)))
 (let (($x639 (= $x638 true)))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x415 (bvadd ?x336 input.dst.llvm-%m2)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem ?x415))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv2 32))) ?x579))))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 ?x583))))))))))
 ))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (= $x160 $x418))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (=> $x194 $x78)))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (= $x194 $x443))))))
 ))
 (let (($x404 (and $x269 $x545)))
 (let (($x347 (and $x404 $x43)))
 (let (($x587 (and $x347 $x586)))
 (let (($x588 (= $x587 true)))
 (let (($x589 (= $x588 true)))
 (let (($x590 (= $x589 true)))
 (let ((?x403 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x233 (= (_ bv0 2) ?x403)))
 (let (($x124 (= $x233 true)))
 (let (($x335 (= $x124 true)))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x287))))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x555))))))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (= $x193 $x418))))))
 ))
 (let (($x501 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (=> $x457 $x78)))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (= $x457 $x443))))))
 ))
 (let (($x406 (and $x72 $x501)))
 (let (($x293 (and $x406 $x311)))
 (let (($x429 (and $x293 $x25)))
 (let (($x352 (= $x429 true)))
 (let (($x116 (= $x352 true)))
 (let (($x114 (= $x116 true)))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x566))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv2 32))) ?x558)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv3 32))) ?x28)))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (=> $x459 (= ?x360 ?x73)))))))))))
 ))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (= $x459 $x418))))))
 ))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (=> $x394 $x78)))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (= $x394 $x443))))))
 ))
 (let (($x491 (and $x246 $x449)))
 (let (($x76 (and $x491 $x89)))
 (let (($x29 (and $x76 $x232)))
 (let (($x105 (= $x29 true)))
 (let (($x163 (= $x105 true)))
 (let (($x242 (= $x163 true)))
 (let (($x296 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x566))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv2 32))) ?x558)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv3 32))) ?x28)))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x73)))))))))))
 ))
 (let (($x95 (and $x293 $x296)))
 (let (($x452 (= $x95 true)))
 (let (($x305 (= $x452 true)))
 (let (($x382 (= $x305 true)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x287))))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (=> $x459 (= ?x360 ?x555))))))))))
 ))
 (let (($x31 (and $x76 $x57)))
 (let (($x61 (= $x31 true)))
 (let (($x328 (= $x61 true)))
 (let (($x266 (= $x328 true)))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x415 (bvadd ?x336 input.dst.llvm-%m2)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x415))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv2 32))) ?x108)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv3 32))) ?x32)))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 ?x315)))))))))))
 ))
 (let (($x391 (and $x347 $x50)))
 (let (($x483 (= $x391 true)))
 (let (($x409 (= $x483 true)))
 (let (($x484 (= $x409 true)))
 (let (($x118 (and $x484 $x266)))
 (let (($x376 (and $x118 $x382)))
 (let (($x41 (and $x376 $x242)))
 (let (($x261 (and $x41 $x114)))
 (let (($x413 (and $x261 $x335)))
 (let (($x591 (and $x413 $x590)))
 (let (($x640 (and $x591 $x639)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x360)))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (= $x193 $x459))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (= $x457 $x394))))))
 ))
 (let (($x235 (and $x19 $x501)))
 (let (($x433 (and $x235 $x154)))
 (let (($x181 (and $x433 $x265)))
 (let (($x641 (and $x181 $x640)))
 (let (($x288 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (= $x160 (bvuge ?x52 (_ bv1 32)))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (= $x194 (= ?x52 (_ bv0 32)))))))
 ))
 (let (($x144 (and $x209 $x545)))
 (let (($x492 (and $x144 $x276)))
 (let (($x381 (and $x492 $x288)))
 (let (($x642 (and $x381 $x641)))
 (let (($x645 (=> $x642 $x644)))
 (not $x645))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x643 (= true false)))
 (let (($x644 (= $x643 true)))
 (let ((?x628 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x629 (= (_ bv0 32) ?x628)))
 (let ((?x626 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x627 (= (_ bv0 32) ?x626)))
 (let ((?x624 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x625 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x624)))
 (let ((?x620 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x621 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x620)))
 (let (($x619 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (and $x619 $x621)))
 (let (($x618 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x623 (and $x618 $x622)))
 (let (($x617 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x615 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x609 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x608 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x610 (and $x608 $x609)))
 (let (($x611 (not $x610)))
 (let (($x606 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x605 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x607 (and $x605 $x606)))
 (let (($x613 (and (not $x607) $x611)))
 (let (($x600 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x601 (and $x599 $x600)))
 (let (($x602 (not $x601)))
 (let (($x596 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x594 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x597 (and $x594 $x596)))
 (let (($x604 (and (not $x597) $x602)))
 (let (($x635 (and (and (and (and (and (and $x604 $x613) $x615) $x617) $x623) $x625) $x627)))
 (let (($x636 (and $x635 $x629)))
 (let (($x637 (= $x636 true)))
 (let (($x638 (= $x637 true)))
 (let (($x639 (= $x638 true)))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x415 (bvadd ?x336 input.dst.llvm-%m2)))
 (let ((?x579 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem ?x415))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x415 (_ bv2 32))) ?x579))))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 ?x583))))))))))
 ))
 (let (($x43 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (= $x160 $x418))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (=> $x194 $x78)))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (= $x194 $x443))))))
 ))
 (let (($x404 (and $x269 $x545)))
 (let (($x347 (and $x404 $x43)))
 (let (($x587 (and $x347 $x586)))
 (let (($x588 (= $x587 true)))
 (let (($x589 (= $x588 true)))
 (let (($x590 (= $x589 true)))
 (let ((?x403 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x233 (= (_ bv0 2) ?x403)))
 (let (($x124 (= $x233 true)))
 (let (($x335 (= $x124 true)))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x287))))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x555))))))))))
 ))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (= $x193 $x418))))))
 ))
 (let (($x501 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (=> $x457 $x78)))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (= $x457 $x443))))))
 ))
 (let (($x406 (and $x72 $x501)))
 (let (($x293 (and $x406 $x311)))
 (let (($x429 (and $x293 $x25)))
 (let (($x352 (= $x429 true)))
 (let (($x116 (= $x352 true)))
 (let (($x114 (= $x116 true)))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x566))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv2 32))) ?x558)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv3 32))) ?x28)))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (=> $x459 (= ?x360 ?x73)))))))))))
 ))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x279 (_ bv1 32))))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (= $x459 $x418))))))
 ))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x78 (= false false)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (=> $x394 $x78)))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x443 (= ?x279 (_ bv0 32))))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (= $x394 $x443))))))
 ))
 (let (($x491 (and $x246 $x449)))
 (let (($x76 (and $x491 $x89)))
 (let (($x29 (and $x76 $x232)))
 (let (($x105 (= $x29 true)))
 (let (($x163 (= $x105 true)))
 (let (($x242 (= $x163 true)))
 (let (($x296 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x558 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x566))))
 (let ((?x28 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv2 32))) ?x558)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x566 (_ bv3 32))) ?x28)))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x73)))))))))))
 ))
 (let (($x95 (and $x293 $x296)))
 (let (($x452 (= $x95 true)))
 (let (($x305 (= $x452 true)))
 (let (($x382 (= $x305 true)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x566 (bvadd ?x336 input.dst.llvm-%m1)))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x287))))
 (let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (=> $x459 (= ?x360 ?x555))))))))))
 ))
 (let (($x31 (and $x76 $x57)))
 (let (($x61 (= $x31 true)))
 (let (($x328 (= $x61 true)))
 (let (($x266 (= $x328 true)))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x336 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x415 (bvadd ?x336 input.dst.llvm-%m2)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x415))))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv2 32))) ?x108)))
 (let ((?x315 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x415 (_ bv3 32))) ?x32)))
 (let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 ?x315)))))))))))
 ))
 (let (($x391 (and $x347 $x50)))
 (let (($x483 (= $x391 true)))
 (let (($x409 (= $x483 true)))
 (let (($x484 (= $x409 true)))
 (let (($x118 (and $x484 $x266)))
 (let (($x376 (and $x118 $x382)))
 (let (($x41 (and $x376 $x242)))
 (let (($x261 (and $x41 $x114)))
 (let (($x413 (and $x261 $x335)))
 (let (($x591 (and $x413 $x590)))
 (let (($x640 (and $x591 $x639)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x350 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (=> $x193 (= ?x350 ?x360)))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x459 (bvuge ?x244 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (bvuge ?x99 (_ bv1 32))))
 (= $x193 $x459))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x244 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x244 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x99 (_ bv0 32))))
 (= $x457 $x394))))))
 ))
 (let (($x235 (and $x19 $x501)))
 (let (($x433 (and $x235 $x154)))
 (let (($x181 (and $x433 $x265)))
 (let (($x641 (and $x181 $x640)))
 (let (($x288 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (=> $x160 (= ?x147 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x143 (_ bv1 32))))
 (= $x160 (bvuge ?x52 (_ bv1 32)))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x143 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x194 (= ?x143 (_ bv0 32))))
 (= $x194 (= ?x52 (_ bv0 32)))))))
 ))
 (let (($x144 (and $x209 $x545)))
 (let (($x492 (and $x144 $x276)))
 (let (($x381 (and $x492 $x288)))
 (let (($x642 (and $x381 $x641)))
 (let (($x645 (=> $x642 $x644)))
 (not $x645))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x93d62328)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x83eadfc8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x44b4264b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x93d6232b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x93d62328)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfc8 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!38))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00100000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000003c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!39))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04421800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40040103)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000003f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000003c)
  (define-fun input.spec-%var-m2-1.0.1!42 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!42 (k!40 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x40040100) false
    (ite (= x!0 #x0000003c) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!44 (k!41 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421800 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!43 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!43 (k!41 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!39 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x653 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x660 (=> $x653 true)))
 (let (($x661 (= $x660 true)))
 (let (($x662 (= $x661 true)))
 (let (($x654 (= $x653 true)))
 (let (($x655 (= $x654 true)))
 (let (($x656 (= $x655 true)))
 (let ((?x264 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x564 (= (_ bv0 32) ?x264)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x153 (= (_ bv0 32) ?x86)))
 (let ((?x159 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x569 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x569)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (and $x102 $x226)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x461 $x186)))
 (let (($x161 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x230 $x24)))
 (let (($x451 (not $x234)))
 (let (($x577 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x386 $x577)))
 (let (($x431 (and (not $x60) $x451)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x574 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x571 (and $x574 $x259)))
 (let (($x137 (not $x571)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (and $x44 $x139)))
 (let (($x178 (and (not $x464) $x137)))
 (let (($x447 (and (and (and (and (and (and $x178 $x431) $x156) $x161) $x129) $x120) $x153)))
 (let (($x466 (and $x447 $x564)))
 (let (($x647 (= $x466 true)))
 (let (($x648 (= $x647 true)))
 (let (($x649 (= $x648 true)))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x252 input.dst.llvm-%m2)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x401))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 ?x338))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (= $x203 $x201))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (=> $x350 $x237)))))
 ))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (= $x350 $x133))))))
 ))
 (let (($x96 (and $x33 $x331)))
 (let (($x450 (and $x96 $x426)))
 (let (($x290 (and $x450 $x487)))
 (let (($x26 (= $x290 true)))
 (let (($x166 (= $x26 true)))
 (let (($x36 (= $x166 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x88 (= (_ bv0 2) ?x79)))
 (let (($x225 (= $x88 true)))
 (let (($x169 (= $x225 true)))
 (let (($x149 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x191 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x212 (and $x191 $x149)))
 (let (($x100 (= $x212 true)))
 (let (($x205 (= $x100 true)))
 (let (($x453 (= $x205 true)))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x562))))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x469))))))))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (= $x232 $x201))))))
 ))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (=> $x311 $x237)))))
 ))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (= $x311 $x133))))))
 ))
 (let (($x521 (and $x524 $x559)))
 (let (($x97 (and $x521 $x530)))
 (let (($x414 (and $x97 $x70)))
 (let (($x438 (= $x414 true)))
 (let (($x318 (= $x438 true)))
 (let (($x15 (= $x318 true)))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x45)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x30)))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (=> $x314 (= ?x114 ?x217)))))))))))
 ))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (= $x314 $x201))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (=> $x72 $x237)))))
 ))
 (let (($x468 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (= $x72 $x133))))))
 ))
 (let (($x374 (and $x468 $x172)))
 (let (($x175 (and $x374 $x417)))
 (let (($x412 (and $x175 $x485)))
 (let (($x496 (= $x412 true)))
 (let (($x497 (= $x496 true)))
 (let (($x498 (= $x497 true)))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x45)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x30)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x217)))))))))))
 ))
 (let (($x255 (and $x97 $x13)))
 (let (($x136 (= $x255 true)))
 (let (($x448 (= $x136 true)))
 (let (($x58 (= $x448 true)))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x562))))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (=> $x314 (= ?x114 ?x469))))))))))
 ))
 (let (($x424 (and $x175 $x240)))
 (let (($x126 (= $x424 true)))
 (let (($x355 (= $x126 true)))
 (let (($x9 (= $x355 true)))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x252 input.dst.llvm-%m2)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x214)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x270)))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 ?x327)))))))))))
 ))
 (let (($x188 (and $x450 $x38)))
 (let (($x112 (= $x188 true)))
 (let (($x113 (= $x112 true)))
 (let (($x309 (= $x113 true)))
 (let (($x389 (and $x309 $x9)))
 (let (($x393 (and $x389 $x58)))
 (let (($x556 (and $x393 $x498)))
 (let (($x349 (and $x556 $x15)))
 (let (($x189 (and $x349 $x453)))
 (let (($x367 (and $x189 $x169)))
 (let (($x190 (and $x367 $x36)))
 (let (($x650 (and $x190 $x649)))
 (let (($x657 (and $x650 $x656)))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x114)))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (= $x232 $x314))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (= $x311 $x72))))))
 ))
 (let (($x558 (and $x125 $x559)))
 (let (($x163 (and $x558 $x105)))
 (let (($x124 (and $x163 $x233)))
 (let (($x658 (and $x124 $x657)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x459 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (= $x203 (bvuge ?x459 (_ bv1 32)))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x459 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (= $x350 (= ?x459 (_ bv0 32)))))))
 ))
 (let (($x119 (and $x69 $x331)))
 (let (($x415 (and $x119 $x407)))
 (let (($x322 (and $x415 $x319)))
 (let (($x659 (and $x322 $x658)))
 (let (($x663 (=> $x659 $x662)))
 (not $x663)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x653 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x660 (=> $x653 true)))
 (let (($x661 (= $x660 true)))
 (let (($x662 (= $x661 true)))
 (let (($x654 (= $x653 true)))
 (let (($x655 (= $x654 true)))
 (let (($x656 (= $x655 true)))
 (let ((?x264 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x564 (= (_ bv0 32) ?x264)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x153 (= (_ bv0 32) ?x86)))
 (let ((?x159 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x569 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x569)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x186 (and $x102 $x226)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (and $x461 $x186)))
 (let (($x161 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x230 $x24)))
 (let (($x451 (not $x234)))
 (let (($x577 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x386 $x577)))
 (let (($x431 (and (not $x60) $x451)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x574 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x571 (and $x574 $x259)))
 (let (($x137 (not $x571)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (and $x44 $x139)))
 (let (($x178 (and (not $x464) $x137)))
 (let (($x447 (and (and (and (and (and (and $x178 $x431) $x156) $x161) $x129) $x120) $x153)))
 (let (($x466 (and $x447 $x564)))
 (let (($x647 (= $x466 true)))
 (let (($x648 (= $x647 true)))
 (let (($x649 (= $x648 true)))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x252 input.dst.llvm-%m2)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x401))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 ?x338))))))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (= $x203 $x201))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (=> $x350 $x237)))))
 ))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (= $x350 $x133))))))
 ))
 (let (($x96 (and $x33 $x331)))
 (let (($x450 (and $x96 $x426)))
 (let (($x290 (and $x450 $x487)))
 (let (($x26 (= $x290 true)))
 (let (($x166 (= $x26 true)))
 (let (($x36 (= $x166 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x88 (= (_ bv0 2) ?x79)))
 (let (($x225 (= $x88 true)))
 (let (($x169 (= $x225 true)))
 (let (($x149 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x191 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x212 (and $x191 $x149)))
 (let (($x100 (= $x212 true)))
 (let (($x205 (= $x100 true)))
 (let (($x453 (= $x205 true)))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x562))))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x469))))))))))
 ))
 (let (($x530 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (= $x232 $x201))))))
 ))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (=> $x311 $x237)))))
 ))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (= $x311 $x133))))))
 ))
 (let (($x521 (and $x524 $x559)))
 (let (($x97 (and $x521 $x530)))
 (let (($x414 (and $x97 $x70)))
 (let (($x438 (= $x414 true)))
 (let (($x318 (= $x438 true)))
 (let (($x15 (= $x318 true)))
 (let (($x485 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x45)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x30)))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (=> $x314 (= ?x114 ?x217)))))))))))
 ))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x422 (_ bv1 32))))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (= $x314 $x201))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x237 (= false false)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (=> $x72 $x237)))))
 ))
 (let (($x468 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x133 (= ?x422 (_ bv0 32))))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (= $x72 $x133))))))
 ))
 (let (($x374 (and $x468 $x172)))
 (let (($x175 (and $x374 $x417)))
 (let (($x412 (and $x175 $x485)))
 (let (($x496 (= $x412 true)))
 (let (($x497 (= $x496 true)))
 (let (($x498 (= $x497 true)))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x45)))
 (let ((?x217 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x30)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x217)))))))))))
 ))
 (let (($x255 (and $x97 $x13)))
 (let (($x136 (= $x255 true)))
 (let (($x448 (= $x136 true)))
 (let (($x58 (= $x448 true)))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x252 input.dst.llvm-%m1)))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x562))))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (=> $x314 (= ?x114 ?x469))))))))))
 ))
 (let (($x424 (and $x175 $x240)))
 (let (($x126 (= $x424 true)))
 (let (($x355 (= $x126 true)))
 (let (($x9 (= $x355 true)))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x252 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x252 input.dst.llvm-%m2)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x270 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x214)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x270)))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 ?x327)))))))))))
 ))
 (let (($x188 (and $x450 $x38)))
 (let (($x112 (= $x188 true)))
 (let (($x113 (= $x112 true)))
 (let (($x309 (= $x113 true)))
 (let (($x389 (and $x309 $x9)))
 (let (($x393 (and $x389 $x58)))
 (let (($x556 (and $x393 $x498)))
 (let (($x349 (and $x556 $x15)))
 (let (($x189 (and $x349 $x453)))
 (let (($x367 (and $x189 $x169)))
 (let (($x190 (and $x367 $x36)))
 (let (($x650 (and $x190 $x649)))
 (let (($x657 (and $x650 $x656)))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (=> $x232 (= ?x261 ?x114)))))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x268 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x251 (_ bv1 32))))
 (= $x232 $x314))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x268 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x251 (_ bv0 32))))
 (= $x311 $x72))))))
 ))
 (let (($x558 (and $x125 $x559)))
 (let (($x163 (and $x558 $x105)))
 (let (($x124 (and $x163 $x233)))
 (let (($x658 (and $x124 $x657)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (=> $x203 (= ?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x407 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x459 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x203 (bvuge ?x433 (_ bv1 32))))
 (= $x203 (bvuge ?x459 (_ bv1 32)))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x459 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x433 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x350 (= ?x433 (_ bv0 32))))
 (= $x350 (= ?x459 (_ bv0 32)))))))
 ))
 (let (($x119 (and $x69 $x331)))
 (let (($x415 (and $x119 $x407)))
 (let (($x322 (and $x415 $x319)))
 (let (($x659 (and $x322 $x658)))
 (let (($x663 (=> $x659 $x662)))
 (not $x663)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x380 (= false true)))
 (let (($x316 (= $x380 true)))
 (let ((?x523 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x522 (= (_ bv0 32) ?x523)))
 (let ((?x253 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x75 (= (_ bv0 32) ?x253)))
 (let ((?x519 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x519)))
 (let ((?x514 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x515 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x514)))
 (let (($x548 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x518 (and $x548 $x515)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x345 $x518)))
 (let (($x547 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x512 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x517 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x517 $x512)))
 (let (($x62 (not $x200)))
 (let (($x508 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x511 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x505 (and $x511 $x508)))
 (let (($x513 (and (not $x505) $x62)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x183 $x185)))
 (let (($x206 (not $x236)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x142 $x333)))
 (let (($x215 (and (not $x294) $x206)))
 (let (($x534 (and (and (and (and (and (and $x215 $x513) $x554) $x547) $x260) $x8) $x75)))
 (let (($x416 (and $x534 $x522)))
 (let (($x285 (= $x416 true)))
 (let (($x47 (= $x285 true)))
 (let (($x436 (= $x47 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x413 (bvadd ?x335 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x280))))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 ?x243))))))))))
 ))
 (let (($x664 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (= $x583 $x662))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (=> $x261 $x403)))))
 ))
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (= $x261 $x650))))))
 ))
 (let (($x653 (and $x652 $x320)))
 (let (($x50 (and $x653 $x664)))
 (let (($x221 (and $x50 $x474)))
 (let (($x37 (= $x221 true)))
 (let (($x371 (= $x37 true)))
 (let (($x435 (= $x371 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x179 (= (_ bv0 2) ?x277)))
 (let (($x495 (= $x179 true)))
 (let (($x597 (= $x495 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x19 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x457 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x247 (and $x457 $x19)))
 (let (($x404 (and $x247 $x269)))
 (let (($x418 (= $x404 true)))
 (let (($x43 (= $x418 true)))
 (let (($x347 (= $x43 true)))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem ?x527))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv2 32))) ?x284))))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x359))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (= $x485 $x662))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (=> $x530 $x403)))))
 ))
 (let (($x645 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (= $x530 $x650))))))
 ))
 (let (($x265 (and $x645 $x576)))
 (let (($x241 (and $x265 $x303)))
 (let (($x147 (and $x241 $x427)))
 (let (($x42 (= $x147 true)))
 (let (($x400 (= $x42 true)))
 (let (($x288 (= $x400 true)))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x423 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x527))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv2 32))) ?x423)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv3 32))) ?x387)))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (=> $x141 (= ?x15 ?x361)))))))))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (= $x141 $x662))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (=> $x524 $x403)))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (= $x524 $x650))))))
 ))
 (let (($x155 (and $x20 $x107)))
 (let (($x291 (and $x155 $x152)))
 (let (($x452 (and $x291 $x95)))
 (let (($x305 (= $x452 true)))
 (let (($x376 (= $x305 true)))
 (let (($x223 (= $x376 true)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x423 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x527))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv2 32))) ?x423)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv3 32))) ?x387)))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x361)))))))))))
 ))
 (let (($x65 (and $x241 $x332)))
 (let (($x287 (= $x65 true)))
 (let (($x282 (= $x287 true)))
 (let (($x555 (= $x282 true)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem ?x527))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv2 32))) ?x284))))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (=> $x141 (= ?x15 ?x359))))))))))
 ))
 (let (($x526 (and $x291 $x40)))
 (let (($x242 (= $x526 true)))
 (let (($x41 (= $x242 true)))
 (let (($x66 (= $x41 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x413 (bvadd ?x335 input.dst.llvm-%m2)))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x413))))
 (let ((?x586 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv2 32))) ?x584)))
 (let ((?x592 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv3 32))) ?x586)))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 ?x592)))))))))))
 ))
 (let (($x231 (and $x50 $x275)))
 (let (($x228 (= $x231 true)))
 (let (($x399 (= $x228 true)))
 (let (($x173 (= $x399 true)))
 (let (($x131 (and $x173 $x66)))
 (let (($x31 (and $x131 $x555)))
 (let (($x63 (and $x31 $x223)))
 (let (($x381 (and $x63 $x288)))
 (let (($x420 (and $x381 $x347)))
 (let (($x593 (and $x420 $x597)))
 (let (($x132 (and $x593 $x435)))
 (let (($x388 (and $x132 $x436)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x15)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (= $x485 $x141))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (= $x530 $x524))))))
 ))
 (let (($x45 (and $x82 $x576)))
 (let (($x497 (and $x45 $x496)))
 (let (($x299 (and $x497 $x191)))
 (let (($x83 (and $x299 $x388)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (= $x583 (bvuge ?x314 (_ bv1 32)))))))
 ))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (= $x261 (= ?x314 (_ bv0 32)))))))
 ))
 (let (($x582 (and $x187 $x320)))
 (let (($x34 (and $x582 $x585)))
 (let (($x219 (and $x34 $x151)))
 (let (($x304 (and $x219 $x83)))
 (let (($x245 (=> $x304 $x316)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x380 (= false true)))
 (let (($x316 (= $x380 true)))
 (let ((?x523 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x522 (= (_ bv0 32) ?x523)))
 (let ((?x253 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x75 (= (_ bv0 32) ?x253)))
 (let ((?x519 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x519)))
 (let ((?x514 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x515 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x514)))
 (let (($x548 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x518 (and $x548 $x515)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x345 $x518)))
 (let (($x547 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x512 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x517 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x517 $x512)))
 (let (($x62 (not $x200)))
 (let (($x508 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x511 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x505 (and $x511 $x508)))
 (let (($x513 (and (not $x505) $x62)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x183 $x185)))
 (let (($x206 (not $x236)))
 (let (($x333 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x142 $x333)))
 (let (($x215 (and (not $x294) $x206)))
 (let (($x534 (and (and (and (and (and (and $x215 $x513) $x554) $x547) $x260) $x8) $x75)))
 (let (($x416 (and $x534 $x522)))
 (let (($x285 (= $x416 true)))
 (let (($x47 (= $x285 true)))
 (let (($x436 (= $x47 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x413 (bvadd ?x335 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x280))))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 ?x243))))))))))
 ))
 (let (($x664 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (= $x583 $x662))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (=> $x261 $x403)))))
 ))
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (= $x261 $x650))))))
 ))
 (let (($x653 (and $x652 $x320)))
 (let (($x50 (and $x653 $x664)))
 (let (($x221 (and $x50 $x474)))
 (let (($x37 (= $x221 true)))
 (let (($x371 (= $x37 true)))
 (let (($x435 (= $x371 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x179 (= (_ bv0 2) ?x277)))
 (let (($x495 (= $x179 true)))
 (let (($x597 (= $x495 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x19 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x457 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x247 (and $x457 $x19)))
 (let (($x404 (and $x247 $x269)))
 (let (($x418 (= $x404 true)))
 (let (($x43 (= $x418 true)))
 (let (($x347 (= $x43 true)))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem ?x527))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv2 32))) ?x284))))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x359))))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (= $x485 $x662))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (=> $x530 $x403)))))
 ))
 (let (($x645 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (= $x530 $x650))))))
 ))
 (let (($x265 (and $x645 $x576)))
 (let (($x241 (and $x265 $x303)))
 (let (($x147 (and $x241 $x427)))
 (let (($x42 (= $x147 true)))
 (let (($x400 (= $x42 true)))
 (let (($x288 (= $x400 true)))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x423 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x527))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv2 32))) ?x423)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv3 32))) ?x387)))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (=> $x141 (= ?x15 ?x361)))))))))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x662 (bvuge ?x649 (_ bv1 32))))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (= $x141 $x662))))))
 ))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x403 (= false false)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (=> $x524 $x403)))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (= ?x649 (_ bv0 32))))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (= $x524 $x650))))))
 ))
 (let (($x155 (and $x20 $x107)))
 (let (($x291 (and $x155 $x152)))
 (let (($x452 (and $x291 $x95)))
 (let (($x305 (= $x452 true)))
 (let (($x376 (= $x305 true)))
 (let (($x223 (= $x376 true)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x423 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x527))))
 (let ((?x387 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv2 32))) ?x423)))
 (let ((?x361 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x527 (_ bv3 32))) ?x387)))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x361)))))))))))
 ))
 (let (($x65 (and $x241 $x332)))
 (let (($x287 (= $x65 true)))
 (let (($x282 (= $x287 true)))
 (let (($x555 (= $x282 true)))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x527 (bvadd ?x335 input.dst.llvm-%m1)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv1 32))) (select input.dst.llvm-mem ?x527))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x527 (_ bv2 32))) ?x284))))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (=> $x141 (= ?x15 ?x359))))))))))
 ))
 (let (($x526 (and $x291 $x40)))
 (let (($x242 (= $x526 true)))
 (let (($x41 (= $x242 true)))
 (let (($x66 (= $x41 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x335 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x413 (bvadd ?x335 input.dst.llvm-%m2)))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x413))))
 (let ((?x586 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv2 32))) ?x584)))
 (let ((?x592 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x413 (_ bv3 32))) ?x586)))
 (let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 ?x592)))))))))))
 ))
 (let (($x231 (and $x50 $x275)))
 (let (($x228 (= $x231 true)))
 (let (($x399 (= $x228 true)))
 (let (($x173 (= $x399 true)))
 (let (($x131 (and $x173 $x66)))
 (let (($x31 (and $x131 $x555)))
 (let (($x63 (and $x31 $x223)))
 (let (($x381 (and $x63 $x288)))
 (let (($x420 (and $x381 $x347)))
 (let (($x593 (and $x420 $x597)))
 (let (($x132 (and $x593 $x435)))
 (let (($x388 (and $x132 $x436)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x349 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (=> $x485 (= ?x349 ?x15)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x528 (_ bv1 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (bvuge ?x520 (_ bv1 32))))
 (= $x485 $x141))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x528 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x524 (= ?x528 (_ bv0 32))))
 (let ((?x520 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (= ?x520 (_ bv0 32))))
 (= $x530 $x524))))))
 ))
 (let (($x45 (and $x82 $x576)))
 (let (($x497 (and $x45 $x496)))
 (let (($x299 (and $x497 $x191)))
 (let (($x83 (and $x299 $x388)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (=> $x583 (= ?x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x583 (bvuge ?x163 (_ bv1 32))))
 (= $x583 (bvuge ?x314 (_ bv1 32)))))))
 ))
 (let (($x187 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x314 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x163 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x163 (_ bv0 32))))
 (= $x261 (= ?x314 (_ bv0 32)))))))
 ))
 (let (($x582 (and $x187 $x320)))
 (let (($x34 (and $x582 $x585)))
 (let (($x219 (and $x34 $x151)))
 (let (($x304 (and $x219 $x83)))
 (let (($x245 (=> $x304 $x316)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1e574863)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x44d84147)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x419 (= (_ bv0 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x346 (= $x419 true)))
 (let (($x489 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x366 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x379 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x14 (and $x379 $x366)))
 (let (($x220 (and $x14 $x489)))
 (let (($x262 (= $x220 true)))
 (let (($x441 (= $x262 true)))
 (let (($x184 (= $x441 true)))
 (let ((?x256 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x93 (= (_ bv0 32) ?x256)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x428 (= (_ bv0 32) ?x195)))
 (let ((?x150 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x368 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x456 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x456)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x341 (and $x375 $x411)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x439 (and $x434 $x341)))
 (let (($x348 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x463 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x492 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (and $x492 $x463)))
 (let (($x570 (not $x329)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x566 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x566 $x402)))
 (let (($x644 (and (not $x276) $x570)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x482 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x482 $x396)))
 (let (($x344 (not $x177)))
 (let (($x409 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x391 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (and $x391 $x409)))
 (let (($x143 (and (not $x325) $x344)))
 (let (($x55 (and (and (and (and (and (and $x143 $x644) $x317) $x348) $x439) $x368) $x428)))
 (let (($x239 (and $x55 $x93)))
 (let (($x91 (= $x239 true)))
 (let (($x295 (= $x91 true)))
 (let (($x279 (= $x295 true)))
 (let (($x159 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x225 (bvadd ?x235 input.dst.llvm-%m2)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x16))))
 (let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 ?x129))))))))))
 ))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (= $x88 $x188))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (=> $x349 $x306)))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (= $x349 $x416))))))
 ))
 (let (($x436 (and $x47 $x647)))
 (let (($x154 (and $x436 $x113)))
 (let (($x120 (and $x154 $x159)))
 (let (($x654 (= $x120 true)))
 (let (($x656 (= $x654 true)))
 (let (($x655 (= $x656 true)))
 (let ((?x560 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x559 (= (_ bv0 2) ?x560)))
 (let (($x115 (= $x559 true)))
 (let (($x33 (= $x115 true)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x208))))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x358))))))))))
 ))
 (let (($x595 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (= $x95 $x188))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (=> $x303 $x306)))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (= $x303 $x416))))))
 ))
 (let (($x133 (and $x422 $x324)))
 (let (($x476 (and $x133 $x595)))
 (let (($x322 (and $x476 $x319)))
 (let (($x406 (= $x322 true)))
 (let (($x251 (= $x406 true)))
 (let (($x311 (= $x251 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x440 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x440)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x257)))
 (let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (=> $x296 (= ?x288 ?x167)))))))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (= $x296 $x188))))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (=> $x645 $x306)))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (= $x645 $x416))))))
 ))
 (let (($x384 (and $x165 $x484)))
 (let (($x449 (and $x384 $x491)))
 (let (($x56 (and $x449 $x307)))
 (let (($x398 (= $x56 true)))
 (let (($x414 (= $x398 true)))
 (let (($x438 (= $x414 true)))
 (let (($x469 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x440 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x440)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x257)))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x167)))))))))))
 ))
 (let (($x424 (and $x476 $x469)))
 (let (($x126 (= $x424 true)))
 (let (($x355 (= $x126 true)))
 (let (($x9 (= $x355 true)))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x208))))
 (let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (=> $x296 (= ?x288 ?x358))))))))))
 ))
 (let (($x486 (and $x449 $x171)))
 (let (($x490 (= $x486 true)))
 (let (($x641 (= $x490 true)))
 (let (($x640 (= $x641 true)))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x225 (bvadd ?x235 input.dst.llvm-%m2)))
 (let ((?x487 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x225))))
 (let ((?x594 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv2 32))) ?x487)))
 (let ((?x589 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv3 32))) ?x594)))
 (let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 ?x589)))))))))))
 ))
 (let (($x599 (and $x154 $x600)))
 (let (($x602 (= $x599 true)))
 (let (($x601 (= $x602 true)))
 (let (($x604 (= $x601 true)))
 (let (($x421 (and $x604 $x640)))
 (let (($x13 (and $x421 $x9)))
 (let (($x318 (and $x13 $x438)))
 (let (($x293 (and $x318 $x311)))
 (let (($x96 (and $x293 $x33)))
 (let (($x657 (and $x96 $x655)))
 (let (($x357 (and $x657 $x279)))
 (let (($x49 (and $x357 $x184)))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x288)))))))
 ))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (= $x95 $x296))))))
 ))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (= $x303 $x645))))))
 ))
 (let (($x423 (and $x410 $x324)))
 (let (($x376 (and $x423 $x305)))
 (let (($x39 (and $x376 $x457)))
 (let (($x158 (and $x39 $x49)))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (= $x88 (bvuge ?x141 (_ bv1 32)))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (= $x349 (= ?x141 (_ bv0 32)))))))
 ))
 (let (($x100 (and $x238 $x647)))
 (let (($x413 (and $x100 $x169)))
 (let (($x588 (and $x413 $x339)))
 (let (($x445 (and $x588 $x158)))
 (let (($x61 (=> $x445 $x346)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x419 (= (_ bv0 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x346 (= $x419 true)))
 (let (($x489 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x366 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x379 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x14 (and $x379 $x366)))
 (let (($x220 (and $x14 $x489)))
 (let (($x262 (= $x220 true)))
 (let (($x441 (= $x262 true)))
 (let (($x184 (= $x441 true)))
 (let ((?x256 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x93 (= (_ bv0 32) ?x256)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x428 (= (_ bv0 32) ?x195)))
 (let ((?x150 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x368 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x456 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x411 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x456)))
 (let (($x375 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x341 (and $x375 $x411)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x439 (and $x434 $x341)))
 (let (($x348 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x463 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x492 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x329 (and $x492 $x463)))
 (let (($x570 (not $x329)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x566 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x566 $x402)))
 (let (($x644 (and (not $x276) $x570)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x482 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x482 $x396)))
 (let (($x344 (not $x177)))
 (let (($x409 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x391 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x325 (and $x391 $x409)))
 (let (($x143 (and (not $x325) $x344)))
 (let (($x55 (and (and (and (and (and (and $x143 $x644) $x317) $x348) $x439) $x368) $x428)))
 (let (($x239 (and $x55 $x93)))
 (let (($x91 (= $x239 true)))
 (let (($x295 (= $x91 true)))
 (let (($x279 (= $x295 true)))
 (let (($x159 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x225 (bvadd ?x235 input.dst.llvm-%m2)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x16))))
 (let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 ?x129))))))))))
 ))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (= $x88 $x188))))))
 ))
 (let (($x647 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (=> $x349 $x306)))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (= $x349 $x416))))))
 ))
 (let (($x436 (and $x47 $x647)))
 (let (($x154 (and $x436 $x113)))
 (let (($x120 (and $x154 $x159)))
 (let (($x654 (= $x120 true)))
 (let (($x656 (= $x654 true)))
 (let (($x655 (= $x656 true)))
 (let ((?x560 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x559 (= (_ bv0 2) ?x560)))
 (let (($x115 (= $x559 true)))
 (let (($x33 (= $x115 true)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x208))))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x358))))))))))
 ))
 (let (($x595 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (= $x95 $x188))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (=> $x303 $x306)))))
 ))
 (let (($x422 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (= $x303 $x416))))))
 ))
 (let (($x133 (and $x422 $x324)))
 (let (($x476 (and $x133 $x595)))
 (let (($x322 (and $x476 $x319)))
 (let (($x406 (= $x322 true)))
 (let (($x251 (= $x406 true)))
 (let (($x311 (= $x251 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x440 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x440)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x257)))
 (let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (=> $x296 (= ?x288 ?x167)))))))))))
 ))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x522 (_ bv1 32))))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (= $x296 $x188))))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x306 (= false false)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (=> $x645 $x306)))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (= ?x522 (_ bv0 32))))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (= $x645 $x416))))))
 ))
 (let (($x384 (and $x165 $x484)))
 (let (($x449 (and $x384 $x491)))
 (let (($x56 (and $x449 $x307)))
 (let (($x398 (= $x56 true)))
 (let (($x414 (= $x398 true)))
 (let (($x438 (= $x414 true)))
 (let (($x469 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x440 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x440)))
 (let ((?x167 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x257)))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x167)))))))))))
 ))
 (let (($x424 (and $x476 $x469)))
 (let (($x126 (= $x424 true)))
 (let (($x355 (= $x126 true)))
 (let (($x9 (= $x355 true)))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x168 (bvadd ?x235 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x208))))
 (let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (=> $x296 (= ?x288 ?x358))))))))))
 ))
 (let (($x486 (and $x449 $x171)))
 (let (($x490 (= $x486 true)))
 (let (($x641 (= $x490 true)))
 (let (($x640 (= $x641 true)))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x235 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x225 (bvadd ?x235 input.dst.llvm-%m2)))
 (let ((?x487 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x225))))
 (let ((?x594 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv2 32))) ?x487)))
 (let ((?x589 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x225 (_ bv3 32))) ?x594)))
 (let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 ?x589)))))))))))
 ))
 (let (($x599 (and $x154 $x600)))
 (let (($x602 (= $x599 true)))
 (let (($x601 (= $x602 true)))
 (let (($x604 (= $x601 true)))
 (let (($x421 (and $x604 $x640)))
 (let (($x13 (and $x421 $x9)))
 (let (($x318 (and $x13 $x438)))
 (let (($x293 (and $x318 $x311)))
 (let (($x96 (and $x293 $x33)))
 (let (($x657 (and $x96 $x655)))
 (let (($x357 (and $x657 $x279)))
 (let (($x49 (and $x357 $x184)))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x381 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (=> $x95 (= ?x381 ?x288)))))))
 ))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x394 (_ bv1 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x121 (_ bv1 32))))
 (= $x95 $x296))))))
 ))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x394 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x394 (_ bv0 32))))
 (let ((?x121 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x121 (_ bv0 32))))
 (= $x303 $x645))))))
 ))
 (let (($x423 (and $x410 $x324)))
 (let (($x376 (and $x423 $x305)))
 (let (($x39 (and $x376 $x457)))
 (let (($x158 (and $x39 $x49)))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x584 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (=> $x88 (= ?x584 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x497 (_ bv1 32))))
 (= $x88 (bvuge ?x141 (_ bv1 32)))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x497 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x349 (= ?x497 (_ bv0 32))))
 (= $x349 (= ?x141 (_ bv0 32)))))))
 ))
 (let (($x100 (and $x238 $x647)))
 (let (($x413 (and $x100 $x169)))
 (let (($x588 (and $x413 $x339)))
 (let (($x445 (and $x588 $x158)))
 (let (($x61 (=> $x445 $x346)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1e7c3aa4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xaf0e7910)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!21))
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xaf0e7913)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1e7c3aa7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xaf0e7910)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1e7c3aa4)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!25 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!25 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!23 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!21))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!25 (k!23 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!21 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!21 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!21 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x637 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x255 (bvneg ?x637)))
 (let (($x136 (= ?x255 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x283 (= $x136 true)))
 (let (($x622 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x627 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x620 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x624 (and $x620 $x627)))
 (let (($x623 (and $x624 $x622)))
 (let (($x636 (= $x623 true)))
 (let (($x633 (= $x636 true)))
 (let (($x628 (= $x633 true)))
 (let ((?x477 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x504 (= (_ bv0 32) ?x477)))
 (let ((?x392 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x478 (= (_ bv0 32) ?x392)))
 (let ((?x479 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x509 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x479)))
 (let ((?x507 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x475 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x507)))
 (let (($x506 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x503 (and $x506 $x475)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x502 (and $x170 $x503)))
 (let (($x18 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x473 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x453 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x543 (and $x453 $x546)))
 (let (($x98 (not $x543)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x407 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x407 $x212)))
 (let (($x217 (and (not $x205) $x98)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x17 $x336)))
 (let (($x430 (not $x148)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x350 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x415 (and $x350 $x59)))
 (let (($x81 (and (not $x415) $x430)))
 (let (($x72 (and (and (and (and (and (and $x81 $x217) $x473) $x18) $x502) $x509) $x478)))
 (let (($x564 (and $x72 $x504)))
 (let (($x233 (= $x564 true)))
 (let (($x616 (= $x233 true)))
 (let (($x631 (= $x616 true)))
 (let (($x515 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x558 input.dst.llvm-%m2)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x548 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x513))))
 (let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 ?x548))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (= $x347 $x231))))))
 ))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (=> $x381 $x99)))))
 ))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (= $x381 $x220))))))
 ))
 (let (($x184 (and $x441 $x534)))
 (let (($x105 (and $x184 $x399)))
 (let (($x518 (and $x105 $x515)))
 (let (($x388 (= $x518 true)))
 (let (($x304 (= $x388 true)))
 (let (($x83 (= $x304 true)))
 (let ((?x298 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x576 (= (_ bv0 2) ?x298)))
 (let (($x651 (= $x576 true)))
 (let (($x652 (= $x651 true)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x334))))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x390))))))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (= $x307 $x231))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (=> $x595 $x99)))))
 ))
 (let (($x649 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (= $x595 $x220))))))
 ))
 (let (($x650 (and $x649 $x638)))
 (let (($x596 (and $x650 $x267)))
 (let (($x219 (and $x596 $x151)))
 (let (($x521 (= $x219 true)))
 (let (($x520 (= $x521 true)))
 (let (($x530 (= $x520 true)))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x289))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x51)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x281)))
 (let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (=> $x393 (= ?x311 ?x575)))))))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (= $x393 $x231))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (=> $x422 $x99)))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (= $x422 $x220))))))
 ))
 (let (($x309 (and $x455 $x374)))
 (let (($x175 (and $x309 $x11)))
 (let (($x352 (and $x175 $x266)))
 (let (($x116 (= $x352 true)))
 (let (($x147 (= $x116 true)))
 (let (($x42 (= $x147 true)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x289))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x51)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x281)))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x575)))))))))))
 ))
 (let (($x526 (and $x596 $x359)))
 (let (($x242 (= $x526 true)))
 (let (($x41 (= $x242 true)))
 (let (($x66 (= $x41 true)))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x334))))
 (let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (=> $x393 (= ?x311 ?x390))))))))))
 ))
 (let (($x89 (and $x175 $x364)))
 (let (($x76 (= $x89 true)))
 (let (($x264 (= $x76 true)))
 (let (($x244 (= $x264 true)))
 (let (($x90 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x558 input.dst.llvm-%m2)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x420))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv2 32))) ?x229)))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv3 32))) ?x197)))
 (let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 ?x201)))))))))))
 ))
 (let (($x216 (and $x105 $x90)))
 (let (($x338 (= $x216 true)))
 (let (($x290 (= $x338 true)))
 (let (($x145 (= $x290 true)))
 (let (($x563 (and $x145 $x244)))
 (let (($x332 (and $x563 $x66)))
 (let (($x400 (and $x332 $x42)))
 (let (($x97 (and $x400 $x530)))
 (let (($x653 (and $x97 $x652)))
 (let (($x380 (and $x653 $x83)))
 (let (($x617 (and $x380 $x631)))
 (let (($x634 (and $x617 $x628)))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x311)))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (= $x307 $x393))))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (= $x595 $x422))))))
 ))
 (let (($x440 (and $x301 $x638)))
 (let (($x414 (and $x440 $x398)))
 (let (($x115 (and $x414 $x559)))
 (let (($x625 (and $x115 $x634)))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (= $x347 (bvuge ?x296 (_ bv1 32)))))))
 ))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (= $x381 (= ?x296 (_ bv0 32)))))))
 ))
 (let (($x501 (and $x53 $x534)))
 (let (($x225 (and $x501 $x140)))
 (let (($x603 (and $x225 $x590)))
 (let (($x629 (and $x603 $x625)))
 (let (($x378 (=> $x629 $x283)))
 (not $x378)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x637 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x255 (bvneg ?x637)))
 (let (($x136 (= ?x255 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x283 (= $x136 true)))
 (let (($x622 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x627 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x620 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x624 (and $x620 $x627)))
 (let (($x623 (and $x624 $x622)))
 (let (($x636 (= $x623 true)))
 (let (($x633 (= $x636 true)))
 (let (($x628 (= $x633 true)))
 (let ((?x477 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x504 (= (_ bv0 32) ?x477)))
 (let ((?x392 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x478 (= (_ bv0 32) ?x392)))
 (let ((?x479 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x509 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x479)))
 (let ((?x507 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x475 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x507)))
 (let (($x506 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x503 (and $x506 $x475)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x502 (and $x170 $x503)))
 (let (($x18 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x473 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x453 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x543 (and $x453 $x546)))
 (let (($x98 (not $x543)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x407 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x407 $x212)))
 (let (($x217 (and (not $x205) $x98)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x17 $x336)))
 (let (($x430 (not $x148)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x350 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x415 (and $x350 $x59)))
 (let (($x81 (and (not $x415) $x430)))
 (let (($x72 (and (and (and (and (and (and $x81 $x217) $x473) $x18) $x502) $x509) $x478)))
 (let (($x564 (and $x72 $x504)))
 (let (($x233 (= $x564 true)))
 (let (($x616 (= $x233 true)))
 (let (($x631 (= $x616 true)))
 (let (($x515 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x558 input.dst.llvm-%m2)))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x548 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x513))))
 (let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 ?x548))))))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (= $x347 $x231))))))
 ))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (=> $x381 $x99)))))
 ))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (= $x381 $x220))))))
 ))
 (let (($x184 (and $x441 $x534)))
 (let (($x105 (and $x184 $x399)))
 (let (($x518 (and $x105 $x515)))
 (let (($x388 (= $x518 true)))
 (let (($x304 (= $x388 true)))
 (let (($x83 (= $x304 true)))
 (let ((?x298 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x576 (= (_ bv0 2) ?x298)))
 (let (($x651 (= $x576 true)))
 (let (($x652 (= $x651 true)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x334))))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x390))))))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (= $x307 $x231))))))
 ))
 (let (($x638 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (=> $x595 $x99)))))
 ))
 (let (($x649 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (= $x595 $x220))))))
 ))
 (let (($x650 (and $x649 $x638)))
 (let (($x596 (and $x650 $x267)))
 (let (($x219 (and $x596 $x151)))
 (let (($x521 (= $x219 true)))
 (let (($x520 (= $x521 true)))
 (let (($x530 (= $x520 true)))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x289))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x51)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x281)))
 (let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (=> $x393 (= ?x311 ?x575)))))))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x489 (_ bv1 32))))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (= $x393 $x231))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x99 (= false false)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (=> $x422 $x99)))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x489 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (= ?x489 (_ bv0 32))))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (= $x422 $x220))))))
 ))
 (let (($x309 (and $x455 $x374)))
 (let (($x175 (and $x309 $x11)))
 (let (($x352 (and $x175 $x266)))
 (let (($x116 (= $x352 true)))
 (let (($x147 (= $x116 true)))
 (let (($x42 (= $x147 true)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x51 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x289))))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x51)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x281)))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x575)))))))))))
 ))
 (let (($x526 (and $x596 $x359)))
 (let (($x242 (= $x526 true)))
 (let (($x41 (= $x242 true)))
 (let (($x66 (= $x41 true)))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x289 (bvadd ?x558 input.dst.llvm-%m1)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x334))))
 (let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (=> $x393 (= ?x311 ?x390))))))))))
 ))
 (let (($x89 (and $x175 $x364)))
 (let (($x76 (= $x89 true)))
 (let (($x264 (= $x76 true)))
 (let (($x244 (= $x264 true)))
 (let (($x90 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x558 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x420 (bvadd ?x558 input.dst.llvm-%m2)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x420))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv2 32))) ?x229)))
 (let ((?x201 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x420 (_ bv3 32))) ?x197)))
 (let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 ?x201)))))))))))
 ))
 (let (($x216 (and $x105 $x90)))
 (let (($x338 (= $x216 true)))
 (let (($x290 (= $x338 true)))
 (let (($x145 (= $x290 true)))
 (let (($x563 (and $x145 $x244)))
 (let (($x332 (and $x563 $x66)))
 (let (($x400 (and $x332 $x42)))
 (let (($x97 (and $x400 $x530)))
 (let (($x653 (and $x97 $x652)))
 (let (($x380 (and $x653 $x83)))
 (let (($x617 (and $x380 $x631)))
 (let (($x634 (and $x617 $x628)))
 (let (($x559 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x293 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (=> $x307 (= ?x293 ?x311)))))))
 ))
 (let (($x398 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x104 (_ bv1 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x661 (_ bv1 32))))
 (= $x307 $x393))))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (= ?x104 (_ bv0 32))))
 (let ((?x661 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x661 (_ bv0 32))))
 (= $x595 $x422))))))
 ))
 (let (($x440 (and $x301 $x638)))
 (let (($x414 (and $x440 $x398)))
 (let (($x115 (and $x414 $x559)))
 (let (($x625 (and $x115 $x634)))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x487 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (=> $x347 (= ?x487 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x376 (_ bv1 32))))
 (= $x347 (bvuge ?x296 (_ bv1 32)))))))
 ))
 (let (($x53 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (= ?x376 (_ bv0 32))))
 (= $x381 (= ?x296 (_ bv0 32)))))))
 ))
 (let (($x501 (and $x53 $x534)))
 (let (($x225 (and $x501 $x140)))
 (let (($x603 (and $x225 $x590)))
 (let (($x629 (and $x603 $x625)))
 (let (($x378 (=> $x629 $x283)))
 (not $x378)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x577 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x111 (bvneg ?x577)))
 (let (($x579 (= ?x111 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (= $x579 true)))
 (let (($x234 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x209 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x194 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x313 (and $x194 $x209)))
 (let (($x230 (and $x313 $x234)))
 (let (($x431 (= $x230 true)))
 (let (($x292 (= $x431 true)))
 (let (($x60 (= $x292 true)))
 (let ((?x109 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x249 (= (_ bv0 32) ?x109)))
 (let ((?x326 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x138 (= (_ bv0 32) ?x326)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x571 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x571)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x386 $x130)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x462 (and $x139 $x224)))
 (let (($x117 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x387 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x585 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x585 $x247)))
 (let (($x269 (not $x67)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x527 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x572 (and $x527 $x22)))
 (let (($x202 (and (not $x572) $x269)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x163 $x34)))
 (let (($x535 (not $x19)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x419 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x419 $x61)))
 (let (($x363 (and (not $x213) $x535)))
 (let (($x160 (and (and (and (and (and (and $x363 $x202) $x387) $x117) $x462) $x25) $x138)))
 (let (($x528 (and $x160 $x249)))
 (let (($x389 (= $x528 true)))
 (let (($x524 (= $x389 true)))
 (let (($x253 (= $x524 true)))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x23 (bvadd ?x96 input.dst.llvm-%m2)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x341))))
 (let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 ?x94))))))))))
 ))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (= $x129 $x378))))))
 ))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (=> $x293 $x560)))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (= $x293 $x623))))))
 ))
 (let (($x628 (and $x633 $x446)))
 (let (($x599 (and $x628 $x600)))
 (let (($x93 (and $x599 $x239)))
 (let (($x91 (= $x93 true)))
 (let (($x295 (= $x91 true)))
 (let (($x279 (= $x295 true)))
 (let ((?x303 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x241 (= (_ bv0 2) ?x303)))
 (let (($x410 (= $x241 true)))
 (let (($x499 (= $x410 true)))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x454))))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x468))))))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (= $x266 $x378))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (=> $x267 $x560)))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (= $x267 $x623))))))
 ))
 (let (($x75 (and $x457 $x286)))
 (let (($x112 (and $x75 $x119)))
 (let (($x580 (and $x112 $x584)))
 (let (($x586 (= $x580 true)))
 (let (($x339 (= $x586 true)))
 (let (($x588 (= $x339 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x373))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv2 32))) ?x551)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv3 32))) ?x494)))
 (let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (=> $x31 (= ?x530 ?x54)))))))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (= $x31 $x378))))))
 ))
 (let (($x432 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (=> $x649 $x560)))))
 ))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (= $x649 $x623))))))
 ))
 (let (($x77 (and $x211 $x432)))
 (let (($x568 (and $x77 $x20)))
 (let (($x355 (and $x568 $x126)))
 (let (($x13 (= $x355 true)))
 (let (($x448 (= $x13 true)))
 (let (($x162 (= $x448 true)))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x373))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv2 32))) ?x551)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv3 32))) ?x494)))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x54)))))))))))
 ))
 (let (($x208 (and $x112 $x127)))
 (let (($x567 (= $x208 true)))
 (let (($x358 (= $x567 true)))
 (let (($x486 (= $x358 true)))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x454))))
 (let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (=> $x31 (= ?x530 ?x468))))))))))
 ))
 (let (($x438 (and $x568 $x663)))
 (let (($x318 (= $x438 true)))
 (let (($x537 (= $x318 true)))
 (let (($x550 (= $x537 true)))
 (let (($x662 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x23 (bvadd ?x96 input.dst.llvm-%m2)))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x409 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x16)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x409)))
 (let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 ?x465)))))))))))
 ))
 (let (($x50 (and $x599 $x662)))
 (let (($x401 (= $x50 true)))
 (let (($x578 (= $x401 true)))
 (let (($x493 (= $x578 true)))
 (let (($x538 (and $x493 $x550)))
 (let (($x490 (and $x538 $x486)))
 (let (($x32 (and $x490 $x162)))
 (let (($x265 (and $x32 $x588)))
 (let (($x324 (and $x265 $x499)))
 (let (($x49 (and $x324 $x279)))
 (let (($x191 (and $x49 $x253)))
 (let (($x102 (and $x191 $x60)))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x530)))))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (= $x266 $x31))))))
 ))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (= $x267 $x649))))))
 ))
 (let (($x51 (and $x73 $x286)))
 (let (($x147 (and $x51 $x116)))
 (let (($x651 (and $x147 $x576)))
 (let (($x24 (and $x651 $x102)))
 (let (($x450 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (= $x129 (bvuge ?x393 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (= $x293 (= ?x393 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x125 $x446)))
 (let (($x420 (and $x226 $x557)))
 (let (($x591 (and $x420 $x450)))
 (let (($x461 (and $x591 $x24)))
 (let (($x65 (=> $x461 $x161)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x577 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x111 (bvneg ?x577)))
 (let (($x579 (= ?x111 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (= $x579 true)))
 (let (($x234 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x209 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x194 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x313 (and $x194 $x209)))
 (let (($x230 (and $x313 $x234)))
 (let (($x431 (= $x230 true)))
 (let (($x292 (= $x431 true)))
 (let (($x60 (= $x292 true)))
 (let ((?x109 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x249 (= (_ bv0 32) ?x109)))
 (let ((?x326 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x138 (= (_ bv0 32) ?x326)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x571 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x571)))
 (let (($x386 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x386 $x130)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x462 (and $x139 $x224)))
 (let (($x117 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x387 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x585 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x585 $x247)))
 (let (($x269 (not $x67)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x527 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x572 (and $x527 $x22)))
 (let (($x202 (and (not $x572) $x269)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x163 $x34)))
 (let (($x535 (not $x19)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x419 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x419 $x61)))
 (let (($x363 (and (not $x213) $x535)))
 (let (($x160 (and (and (and (and (and (and $x363 $x202) $x387) $x117) $x462) $x25) $x138)))
 (let (($x528 (and $x160 $x249)))
 (let (($x389 (= $x528 true)))
 (let (($x524 (= $x389 true)))
 (let (($x253 (= $x524 true)))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x23 (bvadd ?x96 input.dst.llvm-%m2)))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x341))))
 (let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 ?x94))))))))))
 ))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (= $x129 $x378))))))
 ))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (=> $x293 $x560)))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (= $x293 $x623))))))
 ))
 (let (($x628 (and $x633 $x446)))
 (let (($x599 (and $x628 $x600)))
 (let (($x93 (and $x599 $x239)))
 (let (($x91 (= $x93 true)))
 (let (($x295 (= $x91 true)))
 (let (($x279 (= $x295 true)))
 (let ((?x303 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x241 (= (_ bv0 2) ?x303)))
 (let (($x410 (= $x241 true)))
 (let (($x499 (= $x410 true)))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x454))))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x468))))))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (= $x266 $x378))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (=> $x267 $x560)))))
 ))
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (= $x267 $x623))))))
 ))
 (let (($x75 (and $x457 $x286)))
 (let (($x112 (and $x75 $x119)))
 (let (($x580 (and $x112 $x584)))
 (let (($x586 (= $x580 true)))
 (let (($x339 (= $x586 true)))
 (let (($x588 (= $x339 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x373))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv2 32))) ?x551)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv3 32))) ?x494)))
 (let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (=> $x31 (= ?x530 ?x54)))))))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (bvuge ?x622 (_ bv1 32))))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (= $x31 $x378))))))
 ))
 (let (($x432 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x560 (= false false)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (=> $x649 $x560)))))
 ))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x622 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x623 (= ?x622 (_ bv0 32))))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (= $x649 $x623))))))
 ))
 (let (($x77 (and $x211 $x432)))
 (let (($x568 (and $x77 $x20)))
 (let (($x355 (and $x568 $x126)))
 (let (($x13 (= $x355 true)))
 (let (($x448 (= $x13 true)))
 (let (($x162 (= $x448 true)))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x551 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x373))))
 (let ((?x494 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv2 32))) ?x551)))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x373 (_ bv3 32))) ?x494)))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x54)))))))))))
 ))
 (let (($x208 (and $x112 $x127)))
 (let (($x567 (= $x208 true)))
 (let (($x358 (= $x567 true)))
 (let (($x486 (= $x358 true)))
 (let (($x663 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x373 (bvadd ?x96 input.dst.llvm-%m1)))
 (let ((?x454 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x454))))
 (let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (=> $x31 (= ?x530 ?x468))))))))))
 ))
 (let (($x438 (and $x568 $x663)))
 (let (($x318 (= $x438 true)))
 (let (($x537 (= $x318 true)))
 (let (($x550 (= $x537 true)))
 (let (($x662 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x96 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x23 (bvadd ?x96 input.dst.llvm-%m2)))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x409 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x16)))
 (let ((?x465 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x409)))
 (let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 ?x465)))))))))))
 ))
 (let (($x50 (and $x599 $x662)))
 (let (($x401 (= $x50 true)))
 (let (($x578 (= $x401 true)))
 (let (($x493 (= $x578 true)))
 (let (($x538 (and $x493 $x550)))
 (let (($x490 (and $x538 $x486)))
 (let (($x32 (and $x490 $x162)))
 (let (($x265 (and $x32 $x588)))
 (let (($x324 (and $x265 $x499)))
 (let (($x49 (and $x324 $x279)))
 (let (($x191 (and $x49 $x253)))
 (let (($x102 (and $x191 $x60)))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x530 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x97 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (=> $x266 (= ?x97 ?x530)))))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x648 (_ bv1 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x38 (_ bv1 32))))
 (= $x266 $x31))))))
 ))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x648 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x649 (= ?x648 (_ bv0 32))))
 (let ((?x38 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (= ?x38 (_ bv0 32))))
 (= $x267 $x649))))))
 ))
 (let (($x51 (and $x73 $x286)))
 (let (($x147 (and $x51 $x116)))
 (let (($x651 (and $x147 $x576)))
 (let (($x24 (and $x651 $x102)))
 (let (($x450 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x229 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (=> $x129 (= ?x229 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x414 (_ bv1 32))))
 (= $x129 (bvuge ?x393 (_ bv1 32)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x414 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x293 (= ?x414 (_ bv0 32))))
 (= $x293 (= ?x393 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x125 $x446)))
 (let (($x420 (and $x226 $x557)))
 (let (($x591 (and $x420 $x450)))
 (let (($x461 (and $x591 $x24)))
 (let (($x65 (=> $x461 $x161)))
 (not $x65)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x532 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x516 (= $x532 true)))
 (let ((?x215 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x206 (= (_ bv0 2) ?x215)))
 (let (($x254 (= $x206 true)))
 (let (($x508 (= $x254 true)))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x407 (bvadd ?x423 input.dst.llvm-%m2)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x222))))
 (let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 ?x394))))))))))
 ))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (= $x548 $x216))))))
 ))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (=> $x97 $x298)))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (= $x97 $x230))))))
 ))
 (let (($x565 (and $x301 $x621)))
 (let (($x134 (and $x565 $x657)))
 (let (($x203 (and $x134 $x522)))
 (let (($x181 (= $x203 true)))
 (let (($x110 (= $x181 true)))
 (let (($x275 (= $x110 true)))
 (let (($x299 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x214 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x319 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x238 (and $x319 $x214)))
 (let (($x647 (and $x238 $x299)))
 (let (($x485 (= $x647 true)))
 (let (($x15 (= $x485 true)))
 (let (($x349 (= $x15 true)))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x407 (bvadd ?x423 input.dst.llvm-%m2)))
 (let ((?x543 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x407))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv2 32))) ?x543)))
 (let ((?x480 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv3 32))) ?x212)))
 (let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 ?x480)))))))))))
 ))
 (let (($x533 (and $x134 $x646)))
 (let (($x260 (= $x533 true)))
 (let (($x382 (= $x260 true)))
 (let (($x198 (= $x382 true)))
 (let ((?x104 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x422 (= (_ bv0 32) ?x104)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x421 (= (_ bv0 32) ?x232)))
 (let ((?x187 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x187)))
 (let ((?x369 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x427 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x369)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (and $x153 $x427)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x447 $x315)))
 (let (($x492 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x570 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x643 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x329 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x402 (and $x329 $x643)))
 (let (($x240 (not $x402)))
 (let (($x644 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x444 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x463 (and $x444 $x644)))
 (let (($x343 (and (not $x463) $x240)))
 (let (($x534 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x501 (and $x39 $x534)))
 (let (($x347 (not $x501)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x53 $x95)))
 (let (($x566 (and (not $x288) $x347)))
 (let (($x220 (and (and (and (and (and (and $x566 $x343) $x570) $x492) $x108) $x261) $x421)))
 (let (($x114 (and $x220 $x422)))
 (let (($x259 (= $x114 true)))
 (let (($x464 (= $x259 true)))
 (let (($x583 (= $x464 true)))
 (let (($x552 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x59))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x285))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (= $x126 $x216))))))
 ))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (=> $x119 $x298)))))
 ))
 (let (($x610 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (= $x119 $x230))))))
 ))
 (let (($x199 (and $x610 $x529)))
 (let (($x609 (and $x199 $x458)))
 (let (($x542 (and $x609 $x552)))
 (let (($x498 (= $x542 true)))
 (let (($x443 (= $x498 true)))
 (let (($x379 (= $x443 true)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x345))))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv2 32))) ?x620)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv3 32))) ?x645)))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (=> $x424 (= ?x588 ?x281)))))))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (= $x424 $x216))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (=> $x457 $x298)))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (= $x457 $x230))))))
 ))
 (let (($x461 (and $x292 $x24)))
 (let (($x305 (and $x461 $x290)))
 (let (($x400 (and $x305 $x42)))
 (let (($x152 (= $x400 true)))
 (let (($x342 (= $x152 true)))
 (let (($x291 (= $x342 true)))
 (let (($x395 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x345))))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv2 32))) ?x620)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv3 32))) ?x645)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x281)))))))))))
 ))
 (let (($x107 (and $x609 $x395)))
 (let (($x173 (= $x107 true)))
 (let (($x155 (= $x173 true)))
 (let (($x182 (= $x155 true)))
 (let (($x587 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x59))))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (=> $x424 (= ?x588 ?x285))))))))))
 ))
 (let (($x310 (and $x305 $x587)))
 (let (($x79 (= $x310 true)))
 (let (($x92 (= $x79 true)))
 (let (($x367 (= $x92 true)))
 (let (($x48 (and $x367 $x182)))
 (let (($x357 (and $x48 $x291)))
 (let (($x151 (and $x357 $x379)))
 (let (($x573 (and $x151 $x583)))
 (let (($x525 (and $x573 $x198)))
 (let (($x306 (and $x525 $x349)))
 (let (($x280 (and $x306 $x275)))
 (let (($x176 (and $x280 $x508)))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x588)))))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (= $x126 $x424))))))
 ))
 (let (($x660 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (= $x119 $x457))))))
 ))
 (let (($x551 (and $x660 $x529)))
 (let (($x448 (and $x551 $x13)))
 (let (($x410 (and $x448 $x241)))
 (let (($x505 (and $x410 $x176)))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (= $x548 (bvuge ?x31 (_ bv1 32)))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (= $x97 (= ?x31 (_ bv0 32)))))))
 ))
 (let (($x531 (and $x82 $x621)))
 (let (($x23 (and $x531 $x514)))
 (let (($x664 (and $x23 $x654)))
 (let (($x85 (and $x664 $x505)))
 (let (($x236 (=> $x85 $x516)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x532 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x516 (= $x532 true)))
 (let ((?x215 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x206 (= (_ bv0 2) ?x215)))
 (let (($x254 (= $x206 true)))
 (let (($x508 (= $x254 true)))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x407 (bvadd ?x423 input.dst.llvm-%m2)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x222))))
 (let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 ?x394))))))))))
 ))
 (let (($x657 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (= $x548 $x216))))))
 ))
 (let (($x621 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (=> $x97 $x298)))))
 ))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (= $x97 $x230))))))
 ))
 (let (($x565 (and $x301 $x621)))
 (let (($x134 (and $x565 $x657)))
 (let (($x203 (and $x134 $x522)))
 (let (($x181 (= $x203 true)))
 (let (($x110 (= $x181 true)))
 (let (($x275 (= $x110 true)))
 (let (($x299 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x214 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x319 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x238 (and $x319 $x214)))
 (let (($x647 (and $x238 $x299)))
 (let (($x485 (= $x647 true)))
 (let (($x15 (= $x485 true)))
 (let (($x349 (= $x15 true)))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x407 (bvadd ?x423 input.dst.llvm-%m2)))
 (let ((?x543 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x407))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv2 32))) ?x543)))
 (let ((?x480 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x407 (_ bv3 32))) ?x212)))
 (let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 ?x480)))))))))))
 ))
 (let (($x533 (and $x134 $x646)))
 (let (($x260 (= $x533 true)))
 (let (($x382 (= $x260 true)))
 (let (($x198 (= $x382 true)))
 (let ((?x104 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x422 (= (_ bv0 32) ?x104)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x421 (= (_ bv0 32) ?x232)))
 (let ((?x187 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x187)))
 (let ((?x369 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x427 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x369)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x315 (and $x153 $x427)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x447 $x315)))
 (let (($x492 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x570 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x643 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x329 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x402 (and $x329 $x643)))
 (let (($x240 (not $x402)))
 (let (($x644 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x444 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x463 (and $x444 $x644)))
 (let (($x343 (and (not $x463) $x240)))
 (let (($x534 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x501 (and $x39 $x534)))
 (let (($x347 (not $x501)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (and $x53 $x95)))
 (let (($x566 (and (not $x288) $x347)))
 (let (($x220 (and (and (and (and (and (and $x566 $x343) $x570) $x492) $x108) $x261) $x421)))
 (let (($x114 (and $x220 $x422)))
 (let (($x259 (= $x114 true)))
 (let (($x464 (= $x259 true)))
 (let (($x583 (= $x464 true)))
 (let (($x552 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x59))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x285))))))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (= $x126 $x216))))))
 ))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (=> $x119 $x298)))))
 ))
 (let (($x610 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (= $x119 $x230))))))
 ))
 (let (($x199 (and $x610 $x529)))
 (let (($x609 (and $x199 $x458)))
 (let (($x542 (and $x609 $x552)))
 (let (($x498 (= $x542 true)))
 (let (($x443 (= $x498 true)))
 (let (($x379 (= $x443 true)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x345))))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv2 32))) ?x620)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv3 32))) ?x645)))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (=> $x424 (= ?x588 ?x281)))))))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (= $x424 $x216))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (=> $x457 $x298)))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x234 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (= ?x234 (_ bv0 32))))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (= $x457 $x230))))))
 ))
 (let (($x461 (and $x292 $x24)))
 (let (($x305 (and $x461 $x290)))
 (let (($x400 (and $x305 $x42)))
 (let (($x152 (= $x400 true)))
 (let (($x342 (= $x152 true)))
 (let (($x291 (= $x342 true)))
 (let (($x395 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x620 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x345))))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv2 32))) ?x620)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x345 (_ bv3 32))) ?x645)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x281)))))))))))
 ))
 (let (($x107 (and $x609 $x395)))
 (let (($x173 (= $x107 true)))
 (let (($x155 (= $x173 true)))
 (let (($x182 (= $x155 true)))
 (let (($x587 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x345 (bvadd ?x423 input.dst.llvm-%m1)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x59))))
 (let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (=> $x424 (= ?x588 ?x285))))))))))
 ))
 (let (($x310 (and $x305 $x587)))
 (let (($x79 (= $x310 true)))
 (let (($x92 (= $x79 true)))
 (let (($x367 (= $x92 true)))
 (let (($x48 (and $x367 $x182)))
 (let (($x357 (and $x48 $x291)))
 (let (($x151 (and $x357 $x379)))
 (let (($x573 (and $x151 $x583)))
 (let (($x525 (and $x573 $x198)))
 (let (($x306 (and $x525 $x349)))
 (let (($x280 (and $x306 $x275)))
 (let (($x176 (and $x280 $x508)))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x588 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (=> $x126 (= ?x265 ?x588)))))))
 ))
 (let (($x13 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x366 (_ bv1 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x237 (_ bv1 32))))
 (= $x126 $x424))))))
 ))
 (let (($x660 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x457 (= ?x366 (_ bv0 32))))
 (let ((?x237 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x237 (_ bv0 32))))
 (= $x119 $x457))))))
 ))
 (let (($x551 (and $x660 $x529)))
 (let (($x448 (and $x551 $x13)))
 (let (($x410 (and $x448 $x241)))
 (let (($x505 (and $x410 $x176)))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (=> $x548 (= ?x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x548 (bvuge ?x147 (_ bv1 32))))
 (= $x548 (bvuge ?x31 (_ bv1 32)))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (= ?x147 (_ bv0 32))))
 (= $x97 (= ?x31 (_ bv0 32)))))))
 ))
 (let (($x531 (and $x82 $x621)))
 (let (($x23 (and $x531 $x514)))
 (let (($x664 (and $x23 $x654)))
 (let (($x85 (and $x664 $x505)))
 (let (($x236 (=> $x85 $x516)))
 (not $x236)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x20000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6374d934)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbd62d970)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbd62d973)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6374d937)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbd62d970)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6374d934)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x40000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x40000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x40000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x632 ((_ extract 29 0) input.dst.llvm-%m2)))
 (let (($x544 (= (_ bv0 30) ?x632)))
 (let (($x66 (= $x544 true)))
 (let ((?x491 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x165 (= (_ bv0 2) ?x491)))
 (let (($x484 (= $x165 true)))
 (let (($x146 (= $x484 true)))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x549 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv1 32))) (select input.dst.llvm-mem ?x549))))
 (let ((?x606 (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv2 32))) ?x417))))
 (let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 ?x606))))))))))
 ))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (= $x305 $x578))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (=> $x265 $x303)))))
 ))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (= $x265 $x215))))))
 ))
 (let (($x633 (and $x636 $x545)))
 (let (($x5 (and $x633 $x186)))
 (let (($x614 (and $x5 $x604)))
 (let (($x608 (= $x614 true)))
 (let (($x372 (= $x608 true)))
 (let (($x561 (= $x372 true)))
 (let (($x37 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x437 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x87 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x639 (and $x87 $x437)))
 (let (($x221 (and $x639 $x37)))
 (let (($x593 (= $x221 true)))
 (let (($x132 (= $x593 true)))
 (let (($x474 (= $x132 true)))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x549 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x549))))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv2 32))) ?x195)))
 (let ((?x656 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv3 32))) ?x353)))
 (let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 ?x656)))))))))))
 ))
 (let (($x655 (and $x5 $x204)))
 (let (($x391 (= $x655 true)))
 (let (($x370 (= $x391 true)))
 (let (($x120 (= $x370 true)))
 (let ((?x576 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x624 (= (_ bv0 32) ?x576)))
 (let ((?x649 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x595 (= (_ bv0 32) ?x649)))
 (let ((?x563 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x648 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x563)))
 (let ((?x58 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x413 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x169 $x413)))
 (let (($x605 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x605 $x33)))
 (let (($x314 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x335 (and $x29 $x497)))
 (let (($x613 (not $x335)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x625 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x255 (and $x625 $x637)))
 (let (($x45 (and (not $x255) $x613)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x616 (and $x129 $x263)))
 (let (($x634 (not $x616)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x446 (and $x311 $x115)))
 (let (($x629 (and (not $x446) $x634)))
 (let (($x122 (and (and (and (and (and (and $x629 $x45) $x189) $x314) $x192) $x648) $x595)))
 (let (($x466 (and $x122 $x624)))
 (let (($x185 (= $x466 true)))
 (let (($x385 (= $x185 true)))
 (let (($x323 (= $x385 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x473))))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x18))))))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (= $x566 $x578))))))
 ))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (=> $x541 $x303)))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (= $x541 $x215))))))
 ))
 (let (($x365 (and $x117 $x379)))
 (let (($x46 (and $x365 $x130)))
 (let (($x653 (and $x46 $x140)))
 (let (($x584 (= $x653 true)))
 (let (($x74 (= $x584 true)))
 (let (($x556 (= $x74 true)))
 (let (($x141 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (=> $x347 (= ?x570 ?x12)))))))))))
 ))
 (let (($x452 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (= $x347 $x578))))))
 ))
 (let (($x505 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (=> $x291 $x303)))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (= $x291 $x215))))))
 ))
 (let (($x85 (and $x254 $x505)))
 (let (($x296 (and $x85 $x452)))
 (let (($x376 (and $x296 $x141)))
 (let (($x225 (= $x376 true)))
 (let (($x652 (= $x225 true)))
 (let (($x404 (= $x652 true)))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x12)))))))))))
 ))
 (let (($x579 (and $x46 $x577)))
 (let (($x161 (= $x579 true)))
 (let (($x65 (= $x161 true)))
 (let (($x486 (= $x65 true)))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x473))))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (=> $x347 (= ?x570 ?x18))))))))))
 ))
 (let (($x392 (and $x296 $x506)))
 (let (($x478 (= $x392 true)))
 (let (($x479 (= $x478 true)))
 (let (($x509 (= $x479 true)))
 (let (($x287 (and $x509 $x486)))
 (let (($x235 (and $x287 $x404)))
 (let (($x125 (and $x235 $x556)))
 (let (($x105 (and $x125 $x323)))
 (let (($x482 (and $x105 $x120)))
 (let (($x359 (and $x482 $x474)))
 (let (($x223 (and $x359 $x561)))
 (let (($x246 (and $x223 $x146)))
 (let (($x14 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x570)))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (= $x566 $x347))))))
 ))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (= $x541 $x291))))))
 ))
 (let (($x151 (and $x542 $x379)))
 (let (($x463 (and $x151 $x644)))
 (let (($x447 (and $x463 $x14)))
 (let (($x449 (and $x447 $x246)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (= $x305 (bvuge ?x424 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (= $x265 (= ?x424 (_ bv0 32)))))))
 ))
 (let (($x103 (and $x121 $x545)))
 (let (($x423 (and $x103 $x94)))
 (let (($x285 (and $x423 $x188)))
 (let (($x63 (and $x285 $x449)))
 (let (($x517 (=> $x63 $x66)))
 (not $x517))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x632 ((_ extract 29 0) input.dst.llvm-%m2)))
 (let (($x544 (= (_ bv0 30) ?x632)))
 (let (($x66 (= $x544 true)))
 (let ((?x491 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x165 (= (_ bv0 2) ?x491)))
 (let (($x484 (= $x165 true)))
 (let (($x146 (= $x484 true)))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x549 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv1 32))) (select input.dst.llvm-mem ?x549))))
 (let ((?x606 (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x549 (_ bv2 32))) ?x417))))
 (let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 ?x606))))))))))
 ))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (= $x305 $x578))))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (=> $x265 $x303)))))
 ))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (= $x265 $x215))))))
 ))
 (let (($x633 (and $x636 $x545)))
 (let (($x5 (and $x633 $x186)))
 (let (($x614 (and $x5 $x604)))
 (let (($x608 (= $x614 true)))
 (let (($x372 (= $x608 true)))
 (let (($x561 (= $x372 true)))
 (let (($x37 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x437 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x87 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x639 (and $x87 $x437)))
 (let (($x221 (and $x639 $x37)))
 (let (($x593 (= $x221 true)))
 (let (($x132 (= $x593 true)))
 (let (($x474 (= $x132 true)))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x549 (bvadd ?x411 input.dst.llvm-%m2)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x549))))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv2 32))) ?x195)))
 (let ((?x656 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x549 (_ bv3 32))) ?x353)))
 (let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 ?x656)))))))))))
 ))
 (let (($x655 (and $x5 $x204)))
 (let (($x391 (= $x655 true)))
 (let (($x370 (= $x391 true)))
 (let (($x120 (= $x370 true)))
 (let ((?x576 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x624 (= (_ bv0 32) ?x576)))
 (let ((?x649 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x595 (= (_ bv0 32) ?x649)))
 (let ((?x563 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x648 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x563)))
 (let ((?x58 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x413 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (and $x169 $x413)))
 (let (($x605 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x192 (and $x605 $x33)))
 (let (($x314 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x497 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x335 (and $x29 $x497)))
 (let (($x613 (not $x335)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x625 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x255 (and $x625 $x637)))
 (let (($x45 (and (not $x255) $x613)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x616 (and $x129 $x263)))
 (let (($x634 (not $x616)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x446 (and $x311 $x115)))
 (let (($x629 (and (not $x446) $x634)))
 (let (($x122 (and (and (and (and (and (and $x629 $x45) $x189) $x314) $x192) $x648) $x595)))
 (let (($x466 (and $x122 $x624)))
 (let (($x185 (= $x466 true)))
 (let (($x385 (= $x185 true)))
 (let (($x323 (= $x385 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x473))))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x18))))))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (= $x566 $x578))))))
 ))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (=> $x541 $x303)))))
 ))
 (let (($x117 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (= $x541 $x215))))))
 ))
 (let (($x365 (and $x117 $x379)))
 (let (($x46 (and $x365 $x130)))
 (let (($x653 (and $x46 $x140)))
 (let (($x584 (= $x653 true)))
 (let (($x74 (= $x584 true)))
 (let (($x556 (= $x74 true)))
 (let (($x141 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (=> $x347 (= ?x570 ?x12)))))))))))
 ))
 (let (($x452 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x64 (_ bv1 32))))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (= $x347 $x578))))))
 ))
 (let (($x505 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x303 (= false false)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (=> $x291 $x303)))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x215 (= ?x64 (_ bv0 32))))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (= $x291 $x215))))))
 ))
 (let (($x85 (and $x254 $x505)))
 (let (($x296 (and $x85 $x452)))
 (let (($x376 (and $x296 $x141)))
 (let (($x225 (= $x376 true)))
 (let (($x652 (= $x225 true)))
 (let (($x404 (= $x652 true)))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x228))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv2 32))) ?x200)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x228 (_ bv3 32))) ?x54)))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x12)))))))))))
 ))
 (let (($x579 (and $x46 $x577)))
 (let (($x161 (= $x579 true)))
 (let (($x65 (= $x161 true)))
 (let (($x486 (= $x65 true)))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x411 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x228 (bvadd ?x411 input.dst.llvm-%m1)))
 (let ((?x473 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x473))))
 (let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (=> $x347 (= ?x570 ?x18))))))))))
 ))
 (let (($x392 (and $x296 $x506)))
 (let (($x478 (= $x392 true)))
 (let (($x479 (= $x478 true)))
 (let (($x509 (= $x479 true)))
 (let (($x287 (and $x509 $x486)))
 (let (($x235 (and $x287 $x404)))
 (let (($x125 (and $x235 $x556)))
 (let (($x105 (and $x125 $x323)))
 (let (($x482 (and $x105 $x120)))
 (let (($x359 (and $x482 $x474)))
 (let (($x223 (and $x359 $x561)))
 (let (($x246 (and $x223 $x146)))
 (let (($x14 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x570 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x559 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (=> $x566 (= ?x559 ?x570)))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x342 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x566 (bvuge ?x171 (_ bv1 32))))
 (= $x566 $x347))))))
 ))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x342 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x342 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x171 (_ bv0 32))))
 (= $x541 $x291))))))
 ))
 (let (($x151 (and $x542 $x379)))
 (let (($x463 (and $x151 $x644)))
 (let (($x447 (and $x463 $x14)))
 (let (($x449 (and $x447 $x246)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x515 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (=> $x305 (= ?x515 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x448 (_ bv1 32))))
 (= $x305 (bvuge ?x424 (_ bv1 32)))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x448 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (= ?x448 (_ bv0 32))))
 (= $x265 (= ?x424 (_ bv0 32)))))))
 ))
 (let (($x103 (and $x121 $x545)))
 (let (($x423 (and $x103 $x94)))
 (let (($x285 (and $x423 $x188)))
 (let (($x63 (and $x285 $x449)))
 (let (($x517 (=> $x63 $x66)))
 (not $x517))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00100000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd3f3da6c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7807b808)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7807b80b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd3f3da6f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7807b808)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd3f3da6c)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00100000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00100000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00200003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x20000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x20000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x20000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x20000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x20000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x20000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x20000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x20000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x191 ((_ extract 19 0) input.dst.llvm-%m2)))
 (let (($x250 (= (_ bv0 20) ?x191)))
 (let (($x194 (= $x250 true)))
 (let ((?x78 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x253 (= (_ bv0 2) ?x78)))
 (let (($x9 (= $x253 true)))
 (let (($x249 (= $x9 true)))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem ?x468))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv2 32))) ?x377))))
 (let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 ?x386))))))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (= $x296 $x113))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (=> $x559 $x492)))))
 ))
 (let (($x598 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (= $x559 $x491))))))
 ))
 (let (($x529 (and $x598 $x275)))
 (let (($x154 (and $x529 $x49)))
 (let (($x101 (and $x154 $x138)))
 (let (($x25 (= $x101 true)))
 (let (($x144 (= $x25 true)))
 (let (($x160 (= $x144 true)))
 (let (($x252 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x213 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x34 (and $x213 $x158)))
 (let (($x295 (and $x34 $x252)))
 (let (($x93 (= $x295 true)))
 (let (($x91 (= $x93 true)))
 (let (($x279 (= $x91 true)))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x468))))
 (let ((?x562 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x128)))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x562)))
 (let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 ?x503)))))))))))
 ))
 (let (($x72 (and $x154 $x504)))
 (let (($x475 (= $x72 true)))
 (let (($x268 (= $x475 true)))
 (let (($x477 (= $x268 true)))
 (let ((?x457 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x28 (= (_ bv0 32) ?x457)))
 (let ((?x538 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x366 (= (_ bv0 32) ?x538)))
 (let ((?x90 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x430 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x430)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x148 $x209)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x245 $x81)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x277 $x415)))
 (let (($x149 (not $x83)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x399 (and $x262 $x231)))
 (let (($x518 (and (not $x399) $x149)))
 (let (($x531 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x621 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x548 (and $x621 $x531)))
 (let (($x43 (not $x548)))
 (let (($x530 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x97 $x530)))
 (let (($x184 (and (not $x298) $x43)))
 (let (($x512 (and (and (and (and (and (and $x184 $x518) $x350) $x351) $x60) $x554) $x366)))
 (let (($x183 (and $x512 $x28)))
 (let (($x166 (= $x183 true)))
 (let (($x481 (= $x166 true)))
 (let (($x435 (= $x481 true)))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x526))))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x89))))))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (= $x629 $x113))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (=> $x555 $x492)))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (= $x555 $x491))))))
 ))
 (let (($x382 (and $x198 $x556)))
 (let (($x88 (and $x382 $x238)))
 (let (($x558 (and $x88 $x373)))
 (let (($x499 (= $x558 true)))
 (let (($x368 (= $x499 true)))
 (let (($x240 (= $x368 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x187))))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv2 32))) ?x203)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv3 32))) ?x498)))
 (let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (=> $x634 (= ?x189 ?x406)))))))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (= $x634 $x113))))))
 ))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (=> $x404 $x492)))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (= $x404 $x491))))))
 ))
 (let (($x63 (and $x484 $x449)))
 (let (($x116 (and $x63 $x310)))
 (let (($x414 (and $x116 $x329)))
 (let (($x7 (= $x414 true)))
 (let (($x243 (= $x7 true)))
 (let (($x324 (= $x243 true)))
 (let (($x532 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x187))))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv2 32))) ?x203)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv3 32))) ?x498)))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x406)))))))))))
 ))
 (let (($x236 (and $x88 $x532)))
 (let (($x516 (= $x236 true)))
 (let (($x511 (= $x516 true)))
 (let (($x440 (= $x511 true)))
 (let (($x520 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x526))))
 (let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (=> $x634 (= ?x189 ?x89))))))))))
 ))
 (let (($x270 (and $x116 $x520)))
 (let (($x589 (= $x270 true)))
 (let (($x219 (= $x589 true)))
 (let (($x332 (= $x219 true)))
 (let (($x662 (and $x332 $x440)))
 (let (($x439 (and $x662 $x324)))
 (let (($x408 (and $x439 $x240)))
 (let (($x36 (and $x408 $x435)))
 (let (($x239 (and $x36 $x477)))
 (let (($x52 (and $x239 $x279)))
 (let (($x109 (and $x52 $x160)))
 (let (($x389 (and $x109 $x249)))
 (let (($x623 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x189)))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (= $x629 $x634))))))
 ))
 (let (($x653 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (= $x555 $x404))))))
 ))
 (let (($x125 (and $x653 $x556)))
 (let (($x255 (and $x125 $x637)))
 (let (($x605 (and $x255 $x623)))
 (let (($x528 (and $x605 $x389)))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (= $x296 (bvuge ?x347 (_ bv1 32)))))))
 ))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (= $x559 (= ?x347 (_ bv0 32)))))))
 ))
 (let (($x427 (and $x271 $x275)))
 (let (($x411 (and $x427 $x489)))
 (let (($x18 (and $x411 $x100)))
 (let (($x524 (and $x18 $x528)))
 (let (($x540 (=> $x524 $x194)))
 (not $x540))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x191 ((_ extract 19 0) input.dst.llvm-%m2)))
 (let (($x250 (= (_ bv0 20) ?x191)))
 (let (($x194 (= $x250 true)))
 (let ((?x78 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x253 (= (_ bv0 2) ?x78)))
 (let (($x9 (= $x253 true)))
 (let (($x249 (= $x9 true)))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem ?x468))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x468 (_ bv2 32))) ?x377))))
 (let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 ?x386))))))))))
 ))
 (let (($x49 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (= $x296 $x113))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (=> $x559 $x492)))))
 ))
 (let (($x598 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (= $x559 $x491))))))
 ))
 (let (($x529 (and $x598 $x275)))
 (let (($x154 (and $x529 $x49)))
 (let (($x101 (and $x154 $x138)))
 (let (($x25 (= $x101 true)))
 (let (($x144 (= $x25 true)))
 (let (($x160 (= $x144 true)))
 (let (($x252 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x158 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x213 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x34 (and $x213 $x158)))
 (let (($x295 (and $x34 $x252)))
 (let (($x93 (= $x295 true)))
 (let (($x91 (= $x93 true)))
 (let (($x279 (= $x91 true)))
 (let (($x504 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x468 (bvadd ?x232 input.dst.llvm-%m2)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x468))))
 (let ((?x562 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv2 32))) ?x128)))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x468 (_ bv3 32))) ?x562)))
 (let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 ?x503)))))))))))
 ))
 (let (($x72 (and $x154 $x504)))
 (let (($x475 (= $x72 true)))
 (let (($x268 (= $x475 true)))
 (let (($x477 (= $x268 true)))
 (let ((?x457 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x28 (= (_ bv0 32) ?x457)))
 (let ((?x538 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x366 (= (_ bv0 32) ?x538)))
 (let ((?x90 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x430 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x430)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x148 $x209)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x245 $x81)))
 (let (($x351 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x350 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x277 $x415)))
 (let (($x149 (not $x83)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x399 (and $x262 $x231)))
 (let (($x518 (and (not $x399) $x149)))
 (let (($x531 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x621 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x548 (and $x621 $x531)))
 (let (($x43 (not $x548)))
 (let (($x530 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x97 $x530)))
 (let (($x184 (and (not $x298) $x43)))
 (let (($x512 (and (and (and (and (and (and $x184 $x518) $x350) $x351) $x60) $x554) $x366)))
 (let (($x183 (and $x512 $x28)))
 (let (($x166 (= $x183 true)))
 (let (($x481 (= $x166 true)))
 (let (($x435 (= $x481 true)))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x526))))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x89))))))))))
 ))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (= $x629 $x113))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (=> $x555 $x492)))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (= $x555 $x491))))))
 ))
 (let (($x382 (and $x198 $x556)))
 (let (($x88 (and $x382 $x238)))
 (let (($x558 (and $x88 $x373)))
 (let (($x499 (= $x558 true)))
 (let (($x368 (= $x499 true)))
 (let (($x240 (= $x368 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x187))))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv2 32))) ?x203)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv3 32))) ?x498)))
 (let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (=> $x634 (= ?x189 ?x406)))))))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x384 (_ bv1 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (= $x634 $x113))))))
 ))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x492 (= false false)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (=> $x404 $x492)))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x491 (= ?x384 (_ bv0 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (= $x404 $x491))))))
 ))
 (let (($x63 (and $x484 $x449)))
 (let (($x116 (and $x63 $x310)))
 (let (($x414 (and $x116 $x329)))
 (let (($x7 (= $x414 true)))
 (let (($x243 (= $x7 true)))
 (let (($x324 (= $x243 true)))
 (let (($x532 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x187))))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv2 32))) ?x203)))
 (let ((?x406 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x187 (_ bv3 32))) ?x498)))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x406)))))))))))
 ))
 (let (($x236 (and $x88 $x532)))
 (let (($x516 (= $x236 true)))
 (let (($x511 (= $x516 true)))
 (let (($x440 (= $x511 true)))
 (let (($x520 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x187 (bvadd ?x232 input.dst.llvm-%m1)))
 (let ((?x526 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x526))))
 (let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (=> $x634 (= ?x189 ?x89))))))))))
 ))
 (let (($x270 (and $x116 $x520)))
 (let (($x589 (= $x270 true)))
 (let (($x219 (= $x589 true)))
 (let (($x332 (= $x219 true)))
 (let (($x662 (and $x332 $x440)))
 (let (($x439 (and $x662 $x324)))
 (let (($x408 (and $x439 $x240)))
 (let (($x36 (and $x408 $x435)))
 (let (($x239 (and $x36 $x477)))
 (let (($x52 (and $x239 $x279)))
 (let (($x109 (and $x52 $x160)))
 (let (($x389 (and $x109 $x249)))
 (let (($x623 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x622 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (=> $x629 (= ?x622 ?x189)))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x652 (_ bv1 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x273 (_ bv1 32))))
 (= $x629 $x634))))))
 ))
 (let (($x653 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x404 (= ?x652 (_ bv0 32))))
 (let ((?x273 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x555 (= ?x273 (_ bv0 32))))
 (= $x555 $x404))))))
 ))
 (let (($x125 (and $x653 $x556)))
 (let (($x255 (and $x125 $x637)))
 (let (($x605 (and $x255 $x623)))
 (let (($x528 (and $x605 $x389)))
 (let (($x100 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x403 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (=> $x296 (= ?x403 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x463 (_ bv1 32))))
 (= $x296 (bvuge ?x347 (_ bv1 32)))))))
 ))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x463 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x463 (_ bv0 32))))
 (= $x559 (= ?x347 (_ bv0 32)))))))
 ))
 (let (($x427 (and $x271 $x275)))
 (let (($x411 (and $x427 $x489)))
 (let (($x18 (and $x411 $x100)))
 (let (($x524 (and $x18 $x528)))
 (let (($x540 (=> $x524 $x194)))
 (not $x540))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000010)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000807)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000013)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000010)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000043 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000042 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000041 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000040 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00000043 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000042 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000041 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000040 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x92987834)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x277b0ab8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x277b0abb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x92987837)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x277b0ab8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x92987834)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000803 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000802 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000801 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000800 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00000803 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000802 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000801 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x48 ((_ extract 5 0) input.dst.llvm-%m2)))
 (let (($x523 (= (_ bv0 6) ?x48)))
 (let (($x394 (= $x523 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x433 (= (_ bv0 2) ?x182)))
 (let (($x222 (= $x433 true)))
 (let (($x131 (= $x222 true)))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x661 (bvadd ?x649 input.dst.llvm-%m2)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem ?x661))))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv2 32))) ?x610))))
 (let ((?x70 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x70 ?x525))))))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (= $x116 $x507))))))
 ))
 (let (($x561 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (=> $x622 $x314)))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (= $x622 $x78))))))
 ))
 (let (($x44 (and $x207 $x561)))
 (let (($x47 (and $x44 $x145)))
 (let (($x15 (and $x47 $x327)))
 (let (($x349 (= $x15 true)))
 (let (($x214 (= $x349 true)))
 (let (($x471 (= $x214 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x661 (bvadd ?x649 input.dst.llvm-%m2)))
 (let ((?x603 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x661))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv2 32))) ?x603)))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv3 32))) ?x220)))
 (let ((?x70 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x70 ?x657)))))))))))
 ))
 (let (($x573 (and $x47 $x259)))
 (let (($x422 (= $x573 true)))
 (let (($x583 (= $x422 true)))
 (let (($x114 (= $x583 true)))
 (let (($x27 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x202 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x421 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x500 (and $x421 $x202)))
 (let (($x210 (and $x500 $x27)))
 (let (($x572 (= $x210 true)))
 (let (($x80 (= $x572 true)))
 (let (($x67 (= $x80 true)))
 (let ((?x291 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x112 (= (_ bv0 32) ?x291)))
 (let ((?x152 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x342 (= (_ bv0 32) ?x152)))
 (let ((?x181 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x508 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x317 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x317)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x248 (and $x35 $x164)))
 (let (($x337 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x334 (and $x337 $x248)))
 (let (($x456 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x582 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x380 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x340 (and $x380 $x582)))
 (let (($x320 (not $x340)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x628 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x599 (and $x628 $x378)))
 (let (($x434 (and (not $x599) $x320)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x545 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x545 $x103)))
 (let (($x658 (not $x305)))
 (let (($x588 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x265 $x588)))
 (let (($x600 (and (not $x303) $x658)))
 (let (($x401 (and (and (and (and (and (and $x600 $x434) $x348) $x456) $x334) $x508) $x342)))
 (let (($x341 (and $x401 $x112)))
 (let (($x55 (= $x341 true)))
 (let (($x247 (= $x55 true)))
 (let (($x535 (= $x247 true)))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x208))))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x537))))))))))
 ))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (= $x184 $x507))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (=> $x156 $x314)))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (= $x156 $x78))))))
 ))
 (let (($x370 (and $x120 $x240)))
 (let (($x179 (and $x370 $x639)))
 (let (($x619 (and $x179 $x325)))
 (let (($x514 (= $x619 true)))
 (let (($x369 (= $x514 true)))
 (let (($x613 (= $x369 true)))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x563))))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv2 32))) ?x614)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv3 32))) ?x584)))
 (let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (=> $x43 (= ?x350 ?x307)))))))))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (= $x43 $x507))))))
 ))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (=> $x324 $x314)))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (= $x324 $x78))))))
 ))
 (let (($x524 (and $x9 $x528)))
 (let (($x13 (and $x524 $x392)))
 (let (($x56 (and $x13 $x29)))
 (let (($x393 (= $x56 true)))
 (let (($x147 (= $x393 true)))
 (let (($x23 (= $x147 true)))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x563))))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv2 32))) ?x614)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv3 32))) ?x584)))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x307)))))))))))
 ))
 (let (($x544 (and $x179 $x364)))
 (let (($x632 (= $x544 true)))
 (let (($x66 (= $x632 true)))
 (let (($x517 (= $x66 true)))
 (let (($x490 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x208))))
 (let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (=> $x43 (= ?x350 ?x537))))))))))
 ))
 (let (($x418 (and $x13 $x490)))
 (let (($x469 (= $x418 true)))
 (let (($x197 (= $x469 true)))
 (let (($x339 (= $x197 true)))
 (let (($x641 (and $x339 $x517)))
 (let (($x153 (and $x641 $x23)))
 (let (($x557 (and $x153 $x613)))
 (let (($x527 (and $x557 $x535)))
 (let (($x211 (and $x527 $x67)))
 (let (($x476 (and $x211 $x114)))
 (let (($x485 (and $x476 $x471)))
 (let (($x360 (and $x485 $x131)))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x350)))))))
 ))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (= $x184 $x43))))))
 ))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (= $x156 $x324))))))
 ))
 (let (($x408 (and $x558 $x240)))
 (let (($x399 (and $x408 $x231)))
 (let (($x245 (and $x399 $x470)))
 (let (($x306 (and $x245 $x360)))
 (let (($x294 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x70 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x70 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (= $x116 (bvuge ?x634 (_ bv1 32)))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (= $x622 (= ?x634 (_ bv0 32)))))))
 ))
 (let (($x413 (and $x168 $x561)))
 (let (($x232 (and $x413 $x308)))
 (let (($x89 (and $x232 $x294)))
 (let (($x193 (and $x89 $x306)))
 (let (($x39 (=> $x193 $x394)))
 (not $x39))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x48 ((_ extract 5 0) input.dst.llvm-%m2)))
 (let (($x523 (= (_ bv0 6) ?x48)))
 (let (($x394 (= $x523 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x433 (= (_ bv0 2) ?x182)))
 (let (($x222 (= $x433 true)))
 (let (($x131 (= $x222 true)))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x661 (bvadd ?x649 input.dst.llvm-%m2)))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem ?x661))))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv2 32))) ?x610))))
 (let ((?x70 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x70 ?x525))))))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (= $x116 $x507))))))
 ))
 (let (($x561 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (=> $x622 $x314)))))
 ))
 (let (($x207 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (= $x622 $x78))))))
 ))
 (let (($x44 (and $x207 $x561)))
 (let (($x47 (and $x44 $x145)))
 (let (($x15 (and $x47 $x327)))
 (let (($x349 (= $x15 true)))
 (let (($x214 (= $x349 true)))
 (let (($x471 (= $x214 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x661 (bvadd ?x649 input.dst.llvm-%m2)))
 (let ((?x603 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x661))))
 (let ((?x220 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv2 32))) ?x603)))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x661 (_ bv3 32))) ?x220)))
 (let ((?x70 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x70 ?x657)))))))))))
 ))
 (let (($x573 (and $x47 $x259)))
 (let (($x422 (= $x573 true)))
 (let (($x583 (= $x422 true)))
 (let (($x114 (= $x583 true)))
 (let (($x27 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x202 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x421 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x500 (and $x421 $x202)))
 (let (($x210 (and $x500 $x27)))
 (let (($x572 (= $x210 true)))
 (let (($x80 (= $x572 true)))
 (let (($x67 (= $x80 true)))
 (let ((?x291 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x112 (= (_ bv0 32) ?x291)))
 (let ((?x152 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x342 (= (_ bv0 32) ?x152)))
 (let ((?x181 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x508 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x181)))
 (let ((?x317 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x317)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x248 (and $x35 $x164)))
 (let (($x337 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x334 (and $x337 $x248)))
 (let (($x456 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x582 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x380 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x340 (and $x380 $x582)))
 (let (($x320 (not $x340)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x628 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x599 (and $x628 $x378)))
 (let (($x434 (and (not $x599) $x320)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x545 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x305 (and $x545 $x103)))
 (let (($x658 (not $x305)))
 (let (($x588 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x303 (and $x265 $x588)))
 (let (($x600 (and (not $x303) $x658)))
 (let (($x401 (and (and (and (and (and (and $x600 $x434) $x348) $x456) $x334) $x508) $x342)))
 (let (($x341 (and $x401 $x112)))
 (let (($x55 (= $x341 true)))
 (let (($x247 (= $x55 true)))
 (let (($x535 (= $x247 true)))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x208))))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x537))))))))))
 ))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (= $x184 $x507))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (=> $x156 $x314)))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (= $x156 $x78))))))
 ))
 (let (($x370 (and $x120 $x240)))
 (let (($x179 (and $x370 $x639)))
 (let (($x619 (and $x179 $x325)))
 (let (($x514 (= $x619 true)))
 (let (($x369 (= $x514 true)))
 (let (($x613 (= $x369 true)))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x563))))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv2 32))) ?x614)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv3 32))) ?x584)))
 (let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (=> $x43 (= ?x350 ?x307)))))))))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x507 (bvuge ?x663 (_ bv1 32))))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (= $x43 $x507))))))
 ))
 (let (($x528 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x314 (= false false)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (=> $x324 $x314)))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x663 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (= ?x663 (_ bv0 32))))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (= $x324 $x78))))))
 ))
 (let (($x524 (and $x9 $x528)))
 (let (($x13 (and $x524 $x392)))
 (let (($x56 (and $x13 $x29)))
 (let (($x393 (= $x56 true)))
 (let (($x147 (= $x393 true)))
 (let (($x23 (= $x147 true)))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x614 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x563))))
 (let ((?x584 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv2 32))) ?x614)))
 (let ((?x307 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x563 (_ bv3 32))) ?x584)))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x307)))))))))))
 ))
 (let (($x544 (and $x179 $x364)))
 (let (($x632 (= $x544 true)))
 (let (($x66 (= $x632 true)))
 (let (($x517 (= $x66 true)))
 (let (($x490 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x649 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x563 (bvadd ?x649 input.dst.llvm-%m1)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv1 32))) (select input.dst.llvm-mem ?x563))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x563 (_ bv2 32))) ?x208))))
 (let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (=> $x43 (= ?x350 ?x537))))))))))
 ))
 (let (($x418 (and $x13 $x490)))
 (let (($x469 (= $x418 true)))
 (let (($x197 (= $x469 true)))
 (let (($x339 (= $x197 true)))
 (let (($x641 (and $x339 $x517)))
 (let (($x153 (and $x641 $x23)))
 (let (($x557 (and $x153 $x613)))
 (let (($x527 (and $x557 $x535)))
 (let (($x211 (and $x527 $x67)))
 (let (($x476 (and $x211 $x114)))
 (let (($x485 (and $x476 $x471)))
 (let (($x360 (and $x485 $x131)))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x350 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x313 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (=> $x184 (= ?x313 ?x350)))))))
 ))
 (let (($x231 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (bvuge ?x243 (_ bv1 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x536 (_ bv1 32))))
 (= $x184 $x43))))))
 ))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (= ?x243 (_ bv0 32))))
 (let ((?x536 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x536 (_ bv0 32))))
 (= $x156 $x324))))))
 ))
 (let (($x408 (and $x558 $x240)))
 (let (($x399 (and $x408 $x231)))
 (let (($x245 (and $x399 $x470)))
 (let (($x306 (and $x245 $x360)))
 (let (($x294 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x70 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (=> $x116 (= ?x70 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x308 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x255 (_ bv1 32))))
 (= $x116 (bvuge ?x634 (_ bv1 32)))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x622 (= ?x255 (_ bv0 32))))
 (= $x622 (= ?x634 (_ bv0 32)))))))
 ))
 (let (($x413 (and $x168 $x561)))
 (let (($x232 (and $x413 $x308)))
 (let (($x89 (and $x232 $x294)))
 (let (($x193 (and $x89 $x306)))
 (let (($x39 (=> $x193 $x394)))
 (not $x39))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000010)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000807)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000013)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000010)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb69b0850)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x73336d68)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x73336d6b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb69b0853)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x73336d68)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb69b0850)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x0000000b (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x0000000a (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000009 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x287 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x278 (= (_ bv0 3) ?x287)))
 (let (($x606 (= $x278 true)))
 (let ((?x486 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x455 (= (_ bv0 2) ?x486)))
 (let (($x417 (= $x455 true)))
 (let (($x196 (= $x417 true)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x117))))
 (let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 ?x482))))))))))
 ))
 (let (($x385 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (= $x13 $x242))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (=> $x313 $x351)))))
 ))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (= $x313 $x182))))))
 ))
 (let (($x556 (and $x74 $x160)))
 (let (($x356 (and $x556 $x385)))
 (let (($x132 (and $x356 $x371)))
 (let (($x474 (= $x132 true)))
 (let (($x437 (= $x474 true)))
 (let (($x397 (= $x437 true)))
 (let (($x185 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x496 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x186 (and $x122 $x496)))
 (let (($x105 (and $x186 $x185)))
 (let (($x624 (= $x105 true)))
 (let (($x323 (= $x624 true)))
 (let (($x466 (= $x323 true)))
 (let (($x592 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x446 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x335))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv2 32))) ?x446)))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv3 32))) ?x226)))
 (let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 ?x251)))))))))))
 ))
 (let (($x267 (and $x356 $x592)))
 (let (($x591 (= $x267 true)))
 (let (($x586 (= $x591 true)))
 (let (($x580 (= $x586 true)))
 (let ((?x404 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x333 (= (_ bv0 32) ?x404)))
 (let ((?x225 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x652 (= (_ bv0 32) ?x225)))
 (let ((?x608 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x608)))
 (let ((?x123 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x642 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (and $x57 $x642)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x142 $x272)))
 (let (($x569 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x442 (and $x338 $x316)))
 (let (($x135 (not $x442)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x431 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x431 $x292)))
 (let (($x460 (and (not $x24) $x135)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (and $x275 $x427)))
 (let (($x216 (not $x296)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x559 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x492 (and $x559 $x570)))
 (let (($x102 (and (not $x492) $x216)))
 (let (($x436 (and (and (and (and (and (and $x102 $x460) $x297) $x569) $x167) $x146) $x652)))
 (let (($x108 (and $x436 $x333)))
 (let (($x315 (= $x108 true)))
 (let (($x519 (= $x315 true)))
 (let (($x124 (= $x519 true)))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x400))))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (=> $x600 (= ?x110 ?x136))))))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (= $x600 $x242))))))
 ))
 (let (($x613 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (=> $x626 $x351)))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (= $x626 $x182))))))
 ))
 (let (($x268 (and $x477 $x613)))
 (let (($x163 (and $x268 $x34)))
 (let (($x175 (and $x163 $x564)))
 (let (($x94 (= $x175 true)))
 (let (($x58 (= $x94 true)))
 (let (($x149 (= $x58 true)))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x101)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x499)))
 (let ((?x348 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x147 (_ bv1 32))))
 (=> $x658 (= ?x348 ?x82)))))))))))
 ))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x147 (_ bv1 32))))
 (= $x658 $x242))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (=> $x23 $x351)))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (= $x23 $x182))))))
 ))
 (let (($x193 (and $x222 $x306)))
 (let (($x644 (and $x193 $x270)))
 (let (($x352 (and $x644 $x277)))
 (let (($x31 (= $x352 true)))
 (let (($x448 (= $x31 true)))
 (let (($x423 (= $x448 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x101)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x499)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (=> $x600 (= ?x110 ?x82)))))))))))
 ))
 (let (($x250 (and $x163 $x328)))
 (let (($x191 (= $x250 true)))
 (let (($x194 (= $x191 true)))
 (let (($x540 (= $x194 true)))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x400))))
 (let ((?x348 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x147 (_ bv1 32))))
 (=> $x658 (= ?x348 ?x136))))))))))
 ))
 (let (($x465 (and $x644 $x276)))
 (let (($x99 (= $x465 true)))
 (let (($x16 (= $x99 true)))
 (let (($x343 (= $x16 true)))
 (let (($x162 (and $x343 $x540)))
 (let (($x169 (and $x162 $x423)))
 (let (($x62 (and $x169 $x149)))
 (let (($x98 (and $x62 $x124)))
 (let (($x38 (and $x98 $x580)))
 (let (($x286 (and $x38 $x466)))
 (let (($x593 (and $x286 $x397)))
 (let (($x309 (and $x593 $x196)))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (=> $x600 (= ?x110 ?x348)))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x147 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (= $x600 $x658))))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (= $x626 $x23))))))
 ))
 (let (($x557 (and $x619 $x613)))
 (let (($x599 (and $x557 $x378)))
 (let (($x337 (and $x599 $x280)))
 (let (($x359 (and $x337 $x309)))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (= $x13 (bvuge ?x43 (_ bv1 32)))))))
 ))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (= $x313 (= ?x43 (_ bv0 32)))))))
 ))
 (let (($x209 (and $x336 $x160)))
 (let (($x649 (and $x209 $x230)))
 (let (($x537 (and $x649 $x345)))
 (let (($x11 (and $x537 $x359)))
 (let (($x129 (=> $x11 $x606)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x287 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x278 (= (_ bv0 3) ?x287)))
 (let (($x606 (= $x278 true)))
 (let ((?x486 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x455 (= (_ bv0 2) ?x486)))
 (let (($x417 (= $x455 true)))
 (let (($x196 (= $x417 true)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x117))))
 (let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 ?x482))))))))))
 ))
 (let (($x385 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (= $x13 $x242))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (=> $x313 $x351)))))
 ))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (= $x313 $x182))))))
 ))
 (let (($x556 (and $x74 $x160)))
 (let (($x356 (and $x556 $x385)))
 (let (($x132 (and $x356 $x371)))
 (let (($x474 (= $x132 true)))
 (let (($x437 (= $x474 true)))
 (let (($x397 (= $x437 true)))
 (let (($x185 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x496 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x186 (and $x122 $x496)))
 (let (($x105 (and $x186 $x185)))
 (let (($x624 (= $x105 true)))
 (let (($x323 (= $x624 true)))
 (let (($x466 (= $x323 true)))
 (let (($x592 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x335 (bvadd ?x538 input.dst.llvm-%m2)))
 (let ((?x446 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x335))))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv2 32))) ?x446)))
 (let ((?x251 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x335 (_ bv3 32))) ?x226)))
 (let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 ?x251)))))))))))
 ))
 (let (($x267 (and $x356 $x592)))
 (let (($x591 (= $x267 true)))
 (let (($x586 (= $x591 true)))
 (let (($x580 (= $x586 true)))
 (let ((?x404 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x333 (= (_ bv0 32) ?x404)))
 (let ((?x225 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x652 (= (_ bv0 32) ?x225)))
 (let ((?x608 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x608)))
 (let ((?x123 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x642 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (and $x57 $x642)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x142 $x272)))
 (let (($x569 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x297 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x442 (and $x338 $x316)))
 (let (($x135 (not $x442)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x431 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x431 $x292)))
 (let (($x460 (and (not $x24) $x135)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (and $x275 $x427)))
 (let (($x216 (not $x296)))
 (let (($x570 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x559 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x492 (and $x559 $x570)))
 (let (($x102 (and (not $x492) $x216)))
 (let (($x436 (and (and (and (and (and (and $x102 $x460) $x297) $x569) $x167) $x146) $x652)))
 (let (($x108 (and $x436 $x333)))
 (let (($x315 (= $x108 true)))
 (let (($x519 (= $x315 true)))
 (let (($x124 (= $x519 true)))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x400))))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (=> $x600 (= ?x110 ?x136))))))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (= $x600 $x242))))))
 ))
 (let (($x613 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (=> $x626 $x351)))))
 ))
 (let (($x477 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (= $x626 $x182))))))
 ))
 (let (($x268 (and $x477 $x613)))
 (let (($x163 (and $x268 $x34)))
 (let (($x175 (and $x163 $x564)))
 (let (($x94 (= $x175 true)))
 (let (($x58 (= $x94 true)))
 (let (($x149 (= $x58 true)))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x101)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x499)))
 (let ((?x348 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x147 (_ bv1 32))))
 (=> $x658 (= ?x348 ?x82)))))))))))
 ))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x155 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x147 (_ bv1 32))))
 (= $x658 $x242))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (=> $x23 $x351)))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x155 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x155 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (= $x23 $x182))))))
 ))
 (let (($x193 (and $x222 $x306)))
 (let (($x644 (and $x193 $x270)))
 (let (($x352 (and $x644 $x277)))
 (let (($x31 (= $x352 true)))
 (let (($x448 (= $x31 true)))
 (let (($x423 (= $x448 true)))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x90))))
 (let ((?x499 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv2 32))) ?x101)))
 (let ((?x82 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x90 (_ bv3 32))) ?x499)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (=> $x600 (= ?x110 ?x82)))))))))))
 ))
 (let (($x250 (and $x163 $x328)))
 (let (($x191 (= $x250 true)))
 (let (($x194 (= $x191 true)))
 (let (($x540 (= $x194 true)))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x538 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x90 (bvadd ?x538 input.dst.llvm-%m1)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x400))))
 (let ((?x348 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x147 (_ bv1 32))))
 (=> $x658 (= ?x348 ?x136))))))))))
 ))
 (let (($x465 (and $x644 $x276)))
 (let (($x99 (= $x465 true)))
 (let (($x16 (= $x99 true)))
 (let (($x343 (= $x16 true)))
 (let (($x162 (and $x343 $x540)))
 (let (($x169 (and $x162 $x423)))
 (let (($x62 (and $x169 $x149)))
 (let (($x98 (and $x62 $x124)))
 (let (($x38 (and $x98 $x580)))
 (let (($x286 (and $x38 $x466)))
 (let (($x593 (and $x286 $x397)))
 (let (($x309 (and $x593 $x196)))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x110 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (=> $x600 (= ?x110 ?x348)))))))
 ))
 (let (($x378 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x147 (_ bv1 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x218 (_ bv1 32))))
 (= $x600 $x658))))))
 ))
 (let (($x619 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x147 (_ bv0 32))))
 (let ((?x218 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (= ?x218 (_ bv0 32))))
 (= $x626 $x23))))))
 ))
 (let (($x557 (and $x619 $x613)))
 (let (($x599 (and $x557 $x378)))
 (let (($x337 (and $x599 $x280)))
 (let (($x359 (and $x337 $x309)))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (=> $x13 (= ?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x399 (_ bv1 32))))
 (= $x13 (bvuge ?x43 (_ bv1 32)))))))
 ))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x43 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x399 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x313 (= ?x399 (_ bv0 32))))
 (= $x313 (= ?x43 (_ bv0 32)))))))
 ))
 (let (($x209 (and $x336 $x160)))
 (let (($x649 (and $x209 $x230)))
 (let (($x537 (and $x649 $x345)))
 (let (($x11 (and $x537 $x359)))
 (let (($x129 (=> $x11 $x606)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6a7b8e58)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd3744f5c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd3744f5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6a7b8e5b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd3744f5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6a7b8e58)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!21 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!21 x!0)))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x00000007 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000006 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000004 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x207)))
 (let ((?x734 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x737 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x734)))
 (let ((?x740 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x737)))
 (let ((?x297 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x297 ?x740)))))))))))
 ))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x379 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (= $x216 $x421))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x456 (= false false)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (=> $x423 $x456)))))
 ))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x379 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (= $x423 $x541))))))
 ))
 (let (($x290 (and $x522 $x320)))
 (let (($x116 (and $x290 $x413)))
 (let (($x744 (and $x116 $x743)))
 (let (($x745 (= $x744 true)))
 (let (($x746 (= $x745 true)))
 (let (($x511 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x44 (bvadd ?x207 input.dst.llvm-%m2)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x233))))
 (let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (=> $x644 (= ?x54 ?x158))))))))))
 ))
 (let (($x535 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x379 (_ bv1 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (= $x644 $x421))))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x456 (= false false)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x599 (_ bv0 32))))
 (=> $x110 $x456)))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x379 (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x599 (_ bv0 32))))
 (= $x110 $x541))))))
 ))
 (let (($x505 (and $x170 $x471)))
 (let (($x527 (and $x505 $x535)))
 (let (($x440 (and $x527 $x511)))
 (let (($x77 (= $x440 true)))
 (let (($x377 (= $x77 true)))
 (let (($x387 (= $x377 true)))
 (let (($x468 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x28 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x166 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x435 (and $x166 $x28)))
 (let (($x298 (and $x435 $x468)))
 (let (($x224 (= $x298 true)))
 (let (($x329 (= $x224 true)))
 (let (($x86 (= $x329 true)))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x521 (bvadd ?x207 input.dst.llvm-%m1)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv1 32))) (select input.dst.llvm-mem ?x521))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv2 32))) ?x133))))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x243))))))))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x379 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (= $x102 $x421))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x456 (= false false)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (=> $x494 $x456)))))
 ))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x379 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (= $x494 $x541))))))
 ))
 (let (($x581 (and $x70 $x149)))
 (let (($x240 (and $x581 $x368)))
 (let (($x237 (and $x240 $x405)))
 (let (($x512 (= $x237 true)))
 (let (($x529 (= $x512 true)))
 (let (($x388 (= $x529 true)))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x521 (bvadd ?x207 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x521))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv2 32))) ?x212)))
 (let ((?x546 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv3 32))) ?x79)))
 (let ((?x297 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x297 ?x546)))))))))))
 ))
 (let (($x534 (and $x116 $x516)))
 (let (($x383 (= $x534 true)))
 (let (($x654 (= $x383 true)))
 (let (($x501 (= $x654 true)))
 (let (($x533 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x521 (bvadd ?x207 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x521))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv2 32))) ?x212)))
 (let ((?x546 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv3 32))) ?x79)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x546)))))))))))
 ))
 (let (($x532 (and $x240 $x533)))
 (let (($x236 (= $x532 true)))
 (let (($x498 (= $x236 true)))
 (let (($x53 (= $x498 true)))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x521 (bvadd ?x207 input.dst.llvm-%m1)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv1 32))) (select input.dst.llvm-mem ?x521))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv2 32))) ?x133))))
 (let ((?x297 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x297 ?x243))))))))))
 ))
 (let (($x144 (and $x116 $x470)))
 (let (($x109 (= $x144 true)))
 (let (($x663 (= $x109 true)))
 (let (($x78 (= $x663 true)))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x44 (bvadd ?x207 input.dst.llvm-%m2)))
 (let ((?x137 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x44))))
 (let ((?x391 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv2 32))) ?x137)))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv3 32))) ?x391)))
 (let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (=> $x644 (= ?x54 ?x339)))))))))))
 ))
 (let (($x639 (and $x527 $x221)))
 (let (($x179 (= $x639 true)))
 (let (($x362 (= $x179 true)))
 (let (($x565 (= $x362 true)))
 (let ((?x580 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x38 (= (_ bv0 32) ?x580)))
 (let ((?x591 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x586 (= (_ bv0 32) ?x591)))
 (let ((?x592 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x592)))
 (let ((?x226 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x226)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x450 (and $x45 $x251)))
 (let (($x616 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x650 (and $x616 $x450)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x631 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x385 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x356 (and $x76 $x385)))
 (let (($x63 (not $x356)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x653 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x556 (and $x653 $x74)))
 (let (($x497 (and (not $x556) $x63)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x333 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x333 $x108)))
 (let (($x519 (not $x315)))
 (let (($x652 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x491 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x436 (and $x491 $x652)))
 (let (($x98 (and (not $x436) $x519)))
 (let (($x186 (and (and (and (and (and (and $x98 $x497) $x631) $x263) $x650) $x267) $x586)))
 (let (($x5 (and $x186 $x38)))
 (let (($x576 (= $x5 true)))
 (let (($x185 (= $x576 true)))
 (let (($x105 (= $x185 true)))
 (let ((?x642 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x272 (= (_ bv0 2) ?x642)))
 (let (($x167 (= $x272 true)))
 (let (($x384 (= $x167 true)))
 (let (($x624 (and $x384 $x105)))
 (let (($x274 (and $x624 $x565)))
 (let (($x615 (and $x274 $x78)))
 (let (($x406 (and $x615 $x53)))
 (let (($x75 (and $x406 $x501)))
 (let (($x49 (and $x75 $x388)))
 (let (($x414 (and $x49 $x86)))
 (let (($x20 (and $x414 $x387)))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x297)))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (= $x102 $x216))))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (= $x494 $x423))))))
 ))
 (let (($x62 (and $x175 $x149)))
 (let (($x24 (and $x62 $x292)))
 (let (($x142 (and $x24 $x223)))
 (let (($x52 (and $x142 $x20)))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (=> $x644 (= ?x54 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x658 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (= $x644 (bvuge ?x658 (_ bv1 32)))))))
 ))
 (let (($x495 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x658 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x599 (_ bv0 32))))
 (= $x110 (= ?x658 (_ bv0 32)))))))
 ))
 (let (($x164 (and $x495 $x471)))
 (let (($x538 (and $x164 $x215)))
 (let (($x136 (and $x538 $x180)))
 (let (($x568 (and $x136 $x52)))
 (let (($x747 (=> $x568 $x746)))
 (not $x747)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x743 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x730 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x207)))
 (let ((?x734 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x730))))
 (let ((?x737 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv2 32))) ?x734)))
 (let ((?x740 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x730 (_ bv3 32))) ?x737)))
 (let ((?x297 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x297 ?x740)))))))))))
 ))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x379 (_ bv1 32))))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (= $x216 $x421))))))
 ))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x456 (= false false)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (=> $x423 $x456)))))
 ))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x379 (_ bv0 32))))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (= $x423 $x541))))))
 ))
 (let (($x290 (and $x522 $x320)))
 (let (($x116 (and $x290 $x413)))
 (let (($x744 (and $x116 $x743)))
 (let (($x745 (= $x744 true)))
 (let (($x746 (= $x745 true)))
 (let (($x511 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x44 (bvadd ?x207 input.dst.llvm-%m2)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x233))))
 (let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (=> $x644 (= ?x54 ?x158))))))))))
 ))
 (let (($x535 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x379 (_ bv1 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (= $x644 $x421))))))
 ))
 (let (($x471 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x456 (= false false)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x599 (_ bv0 32))))
 (=> $x110 $x456)))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x379 (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x599 (_ bv0 32))))
 (= $x110 $x541))))))
 ))
 (let (($x505 (and $x170 $x471)))
 (let (($x527 (and $x505 $x535)))
 (let (($x440 (and $x527 $x511)))
 (let (($x77 (= $x440 true)))
 (let (($x377 (= $x77 true)))
 (let (($x387 (= $x377 true)))
 (let (($x468 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x28 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x166 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x435 (and $x166 $x28)))
 (let (($x298 (and $x435 $x468)))
 (let (($x224 (= $x298 true)))
 (let (($x329 (= $x224 true)))
 (let (($x86 (= $x329 true)))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x521 (bvadd ?x207 input.dst.llvm-%m1)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv1 32))) (select input.dst.llvm-mem ?x521))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv2 32))) ?x133))))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x243))))))))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x379 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (= $x102 $x421))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x456 (= false false)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (=> $x494 $x456)))))
 ))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x379 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (= ?x379 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (= $x494 $x541))))))
 ))
 (let (($x581 (and $x70 $x149)))
 (let (($x240 (and $x581 $x368)))
 (let (($x237 (and $x240 $x405)))
 (let (($x512 (= $x237 true)))
 (let (($x529 (= $x512 true)))
 (let (($x388 (= $x529 true)))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x521 (bvadd ?x207 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x521))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv2 32))) ?x212)))
 (let ((?x546 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv3 32))) ?x79)))
 (let ((?x297 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x297 ?x546)))))))))))
 ))
 (let (($x534 (and $x116 $x516)))
 (let (($x383 (= $x534 true)))
 (let (($x654 (= $x383 true)))
 (let (($x501 (= $x654 true)))
 (let (($x533 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x521 (bvadd ?x207 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x521))))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv2 32))) ?x212)))
 (let ((?x546 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x521 (_ bv3 32))) ?x79)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x546)))))))))))
 ))
 (let (($x532 (and $x240 $x533)))
 (let (($x236 (= $x532 true)))
 (let (($x498 (= $x236 true)))
 (let (($x53 (= $x498 true)))
 (let (($x470 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x521 (bvadd ?x207 input.dst.llvm-%m1)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv1 32))) (select input.dst.llvm-mem ?x521))))
 (let ((?x243 (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x521 (_ bv2 32))) ?x133))))
 (let ((?x297 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (=> $x216 (= ?x297 ?x243))))))))))
 ))
 (let (($x144 (and $x116 $x470)))
 (let (($x109 (= $x144 true)))
 (let (($x663 (= $x109 true)))
 (let (($x78 (= $x663 true)))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x44 (bvadd ?x207 input.dst.llvm-%m2)))
 (let ((?x137 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x44))))
 (let ((?x391 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv2 32))) ?x137)))
 (let ((?x339 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x44 (_ bv3 32))) ?x391)))
 (let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (=> $x644 (= ?x54 ?x339)))))))))))
 ))
 (let (($x639 (and $x527 $x221)))
 (let (($x179 (= $x639 true)))
 (let (($x362 (= $x179 true)))
 (let (($x565 (= $x362 true)))
 (let ((?x580 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x38 (= (_ bv0 32) ?x580)))
 (let ((?x591 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x586 (= (_ bv0 32) ?x591)))
 (let ((?x592 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x592)))
 (let ((?x226 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x226)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x450 (and $x45 $x251)))
 (let (($x616 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x650 (and $x616 $x450)))
 (let (($x263 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x631 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x385 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x356 (and $x76 $x385)))
 (let (($x63 (not $x356)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x653 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x556 (and $x653 $x74)))
 (let (($x497 (and (not $x556) $x63)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x333 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x333 $x108)))
 (let (($x519 (not $x315)))
 (let (($x652 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x491 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x436 (and $x491 $x652)))
 (let (($x98 (and (not $x436) $x519)))
 (let (($x186 (and (and (and (and (and (and $x98 $x497) $x631) $x263) $x650) $x267) $x586)))
 (let (($x5 (and $x186 $x38)))
 (let (($x576 (= $x5 true)))
 (let (($x185 (= $x576 true)))
 (let (($x105 (= $x185 true)))
 (let ((?x642 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x272 (= (_ bv0 2) ?x642)))
 (let (($x167 (= $x272 true)))
 (let (($x384 (= $x167 true)))
 (let (($x624 (and $x384 $x105)))
 (let (($x274 (and $x624 $x565)))
 (let (($x615 (and $x274 $x78)))
 (let (($x406 (and $x615 $x53)))
 (let (($x75 (and $x406 $x501)))
 (let (($x49 (and $x75 $x388)))
 (let (($x414 (and $x49 $x86)))
 (let (($x20 (and $x414 $x387)))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x372 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (=> $x102 (= ?x372 ?x297)))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x448 (_ bv1 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x302 (_ bv1 32))))
 (= $x102 $x216))))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x448 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x448 (_ bv0 32))))
 (let ((?x302 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x494 (= ?x302 (_ bv0 32))))
 (= $x494 $x423))))))
 ))
 (let (($x62 (and $x175 $x149)))
 (let (($x24 (and $x62 $x292)))
 (let (($x142 (and $x24 $x223)))
 (let (($x52 (and $x142 $x20)))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (=> $x644 (= ?x54 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x658 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x599 (_ bv1 32))))
 (= $x644 (bvuge ?x658 (_ bv1 32)))))))
 ))
 (let (($x495 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x658 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (= ?x599 (_ bv0 32))))
 (= $x110 (= ?x658 (_ bv0 32)))))))
 ))
 (let (($x164 (and $x495 $x471)))
 (let (($x538 (and $x164 $x215)))
 (let (($x136 (and $x538 $x180)))
 (let (($x568 (and $x136 $x52)))
 (let (($x747 (=> $x568 $x746)))
 (not $x747)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ff73597)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf6fa4b73)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7c400005) #x04
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc55086d4)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x24500373)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc55086d7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc55086d4)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x220 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x364))))
 (let ((?x521 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (=> $x362 (= ?x521 ?x56))))))))))
 ))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x482 (_ bv1 32))))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (= $x362 $x241))))))
 ))
 (let (($x437 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x569 (= false false)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x365 (_ bv0 32))))
 (=> $x130 $x569)))))
 ))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x509 (= ?x482 (_ bv0 32))))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x365 (_ bv0 32))))
 (= $x130 $x509))))))
 ))
 (let (($x250 (and $x328 $x437)))
 (let (($x427 (and $x250 $x447)))
 (let (($x127 (and $x427 $x389)))
 (let (($x40 (= $x127 true)))
 (let (($x358 (= $x40 true)))
 (let ((?x340 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x434 (= (_ bv0 2) ?x340)))
 (let (($x14 (= $x434 true)))
 (let (($x261 (= $x14 true)))
 (let (($x544 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x220 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x364))))
 (let ((?x497 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (=> $x333 (= ?x497 ?x56))))))))))
 ))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x482 (_ bv1 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (= $x333 $x241))))))
 ))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x569 (= false false)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (=> $x372 $x569)))))
 ))
 (let (($x87 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x509 (= ?x482 (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (= $x372 $x509))))))
 ))
 (let (($x486 (and $x87 $x57)))
 (let (($x415 (and $x486 $x531)))
 (let (($x601 (and $x415 $x544)))
 (let (($x588 (= $x601 true)))
 (let (($x410 (= $x588 true)))
 (let (($x103 (= $x410 true)))
 (let (($x177 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x524 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x490 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x459 (and $x490 $x524)))
 (let (($x344 (and $x459 $x177)))
 (let (($x636 (= $x344 true)))
 (let (($x366 (= $x636 true)))
 (let (($x396 (= $x366 true)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x32))))
 (let ((?x521 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (=> $x362 (= ?x521 ?x111))))))))))
 ))
 (let (($x637 (and $x427 $x418)))
 (let (($x550 (= $x637 true)))
 (let (($x567 (= $x550 true)))
 (let (($x129 (= $x567 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x369 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x245))))
 (let ((?x433 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x369)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x433)))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x228 (_ bv1 32))))
 (=> $x179 (= ?x638 ?x360)))))))))))
 ))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x482 (_ bv1 32))))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x228 (_ bv1 32))))
 (= $x179 $x241))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x569 (= false false)))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (= ?x228 (_ bv0 32))))
 (=> $x535 $x569)))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x509 (= ?x482 (_ bv0 32))))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (= ?x228 (_ bv0 32))))
 (= $x535 $x509))))))
 ))
 (let (($x275 (and $x168 $x314)))
 (let (($x10 (and $x275 $x620)))
 (let (($x65 (and $x10 $x474)))
 (let (($x417 (= $x65 true)))
 (let (($x196 (= $x417 true)))
 (let (($x359 (= $x196 true)))
 (let (($x520 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x369 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x245))))
 (let ((?x433 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x369)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x433)))
 (let ((?x521 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (=> $x362 (= ?x521 ?x360)))))))))))
 ))
 (let (($x346 (and $x427 $x520)))
 (let (($x288 (= $x346 true)))
 (let (($x247 (= $x288 true)))
 (let (($x12 (= $x247 true)))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x32))))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x228 (_ bv1 32))))
 (=> $x179 (= ?x638 ?x111))))))))))
 ))
 (let (($x161 (and $x10 $x349)))
 (let (($x412 (= $x161 true)))
 (let (($x432 (= $x412 true)))
 (let (($x493 (= $x432 true)))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x220 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x583 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x220))))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv2 32))) ?x583)))
 (let ((?x609 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv3 32))) ?x657)))
 (let ((?x497 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (=> $x333 (= ?x497 ?x609)))))))))))
 ))
 (let (($x367 (and $x415 $x21)))
 (let (($x610 (= $x367 true)))
 (let (($x327 (= $x610 true)))
 (let (($x15 (= $x327 true)))
 (let ((?x516 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x534 (= (_ bv0 32) ?x516)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x381 (= (_ bv0 32) ?x203)))
 (let ((?x53 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x533 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x532 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x533)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x510 $x532)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x498 (and $x546 $x236)))
 (let (($x79 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x558 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x581 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x368 (and $x581 $x558)))
 (let (($x240 (not $x368)))
 (let (($x526 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x615 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x615 $x526)))
 (let (($x174 (and (not $x70) $x240)))
 (let (($x470 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x140 $x470)))
 (let (($x109 (not $x144)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x575 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x575 $x25)))
 (let (($x78 (and (not $x243) $x109)))
 (let (($x664 (and (and (and (and (and (and $x78 $x174) $x205) $x79) $x498) $x406) $x381)))
 (let (($x405 (and $x664 $x534)))
 (let (($x237 (= $x405 true)))
 (let (($x512 (= $x237 true)))
 (let (($x529 (= $x512 true)))
 (let (($x319 (and $x529 $x15)))
 (let (($x269 (and $x319 $x493)))
 (let (($x42 (and $x269 $x12)))
 (let (($x309 (and $x42 $x359)))
 (let (($x51 (and $x309 $x129)))
 (let (($x563 (and $x51 $x396)))
 (let (($x582 (and $x563 $x103)))
 (let (($x89 (and $x582 $x261)))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x521 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (=> $x362 (= ?x521 ?x638)))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x228 (_ bv1 32))))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (= $x362 $x179))))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (= ?x228 (_ bv0 32))))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x365 (_ bv0 32))))
 (= $x130 $x535))))))
 ))
 (let (($x106 (and $x44 $x437)))
 (let (($x282 (and $x106 $x274)))
 (let (($x41 (and $x282 $x590)))
 (let (($x294 (and $x41 $x89)))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x497 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (=> $x333 (= ?x497 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (= $x333 (bvuge ?x216 (_ bv1 32)))))))
 ))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (= $x372 (= ?x216 (_ bv0 32)))))))
 ))
 (let (($x123 (and $x429 $x57)))
 (let (($x519 (and $x123 $x315)))
 (let (($x596 (and $x519 $x631)))
 (let (($x439 (and $x596 $x294)))
 (let (($x481 (=> $x439 $x358)))
 (not $x481)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x220 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x364))))
 (let ((?x521 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (=> $x362 (= ?x521 ?x56))))))))))
 ))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x482 (_ bv1 32))))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (= $x362 $x241))))))
 ))
 (let (($x437 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x569 (= false false)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x365 (_ bv0 32))))
 (=> $x130 $x569)))))
 ))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x509 (= ?x482 (_ bv0 32))))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x365 (_ bv0 32))))
 (= $x130 $x509))))))
 ))
 (let (($x250 (and $x328 $x437)))
 (let (($x427 (and $x250 $x447)))
 (let (($x127 (and $x427 $x389)))
 (let (($x40 (= $x127 true)))
 (let (($x358 (= $x40 true)))
 (let ((?x340 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x434 (= (_ bv0 2) ?x340)))
 (let (($x14 (= $x434 true)))
 (let (($x261 (= $x14 true)))
 (let (($x544 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x220 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x364))))
 (let ((?x497 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (=> $x333 (= ?x497 ?x56))))))))))
 ))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x482 (_ bv1 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (= $x333 $x241))))))
 ))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x569 (= false false)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (=> $x372 $x569)))))
 ))
 (let (($x87 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x509 (= ?x482 (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (= $x372 $x509))))))
 ))
 (let (($x486 (and $x87 $x57)))
 (let (($x415 (and $x486 $x531)))
 (let (($x601 (and $x415 $x544)))
 (let (($x588 (= $x601 true)))
 (let (($x410 (= $x588 true)))
 (let (($x103 (= $x410 true)))
 (let (($x177 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x524 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x490 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x459 (and $x490 $x524)))
 (let (($x344 (and $x459 $x177)))
 (let (($x636 (= $x344 true)))
 (let (($x366 (= $x636 true)))
 (let (($x396 (= $x366 true)))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x32))))
 (let ((?x521 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (=> $x362 (= ?x521 ?x111))))))))))
 ))
 (let (($x637 (and $x427 $x418)))
 (let (($x550 (= $x637 true)))
 (let (($x567 (= $x550 true)))
 (let (($x129 (= $x567 true)))
 (let (($x474 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x369 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x245))))
 (let ((?x433 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x369)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x433)))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x228 (_ bv1 32))))
 (=> $x179 (= ?x638 ?x360)))))))))))
 ))
 (let (($x620 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x482 (_ bv1 32))))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x228 (_ bv1 32))))
 (= $x179 $x241))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x569 (= false false)))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (= ?x228 (_ bv0 32))))
 (=> $x535 $x569)))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x509 (= ?x482 (_ bv0 32))))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (= ?x228 (_ bv0 32))))
 (= $x535 $x509))))))
 ))
 (let (($x275 (and $x168 $x314)))
 (let (($x10 (and $x275 $x620)))
 (let (($x65 (and $x10 $x474)))
 (let (($x417 (= $x65 true)))
 (let (($x196 (= $x417 true)))
 (let (($x359 (= $x196 true)))
 (let (($x520 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x369 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x245))))
 (let ((?x433 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x369)))
 (let ((?x360 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x433)))
 (let ((?x521 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (=> $x362 (= ?x521 ?x360)))))))))))
 ))
 (let (($x346 (and $x427 $x520)))
 (let (($x288 (= $x346 true)))
 (let (($x247 (= $x288 true)))
 (let (($x12 (= $x247 true)))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x134 input.dst.llvm-%m1)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x32))))
 (let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x228 (_ bv1 32))))
 (=> $x179 (= ?x638 ?x111))))))))))
 ))
 (let (($x161 (and $x10 $x349)))
 (let (($x412 (= $x161 true)))
 (let (($x432 (= $x412 true)))
 (let (($x493 (= $x432 true)))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x220 (bvadd ?x134 input.dst.llvm-%m2)))
 (let ((?x583 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x220))))
 (let ((?x657 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv2 32))) ?x583)))
 (let ((?x609 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x220 (_ bv3 32))) ?x657)))
 (let ((?x497 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (=> $x333 (= ?x497 ?x609)))))))))))
 ))
 (let (($x367 (and $x415 $x21)))
 (let (($x610 (= $x367 true)))
 (let (($x327 (= $x610 true)))
 (let (($x15 (= $x327 true)))
 (let ((?x516 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x534 (= (_ bv0 32) ?x516)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x381 (= (_ bv0 32) ?x203)))
 (let ((?x53 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x53)))
 (let ((?x533 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x532 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x533)))
 (let (($x510 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x236 (and $x510 $x532)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x498 (and $x546 $x236)))
 (let (($x79 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x558 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x581 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x368 (and $x581 $x558)))
 (let (($x240 (not $x368)))
 (let (($x526 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x615 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x615 $x526)))
 (let (($x174 (and (not $x70) $x240)))
 (let (($x470 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x140 $x470)))
 (let (($x109 (not $x144)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x575 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x575 $x25)))
 (let (($x78 (and (not $x243) $x109)))
 (let (($x664 (and (and (and (and (and (and $x78 $x174) $x205) $x79) $x498) $x406) $x381)))
 (let (($x405 (and $x664 $x534)))
 (let (($x237 (= $x405 true)))
 (let (($x512 (= $x237 true)))
 (let (($x529 (= $x512 true)))
 (let (($x319 (and $x529 $x15)))
 (let (($x269 (and $x319 $x493)))
 (let (($x42 (and $x269 $x12)))
 (let (($x309 (and $x42 $x359)))
 (let (($x51 (and $x309 $x129)))
 (let (($x563 (and $x51 $x396)))
 (let (($x582 (and $x563 $x103)))
 (let (($x89 (and $x582 $x261)))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x638 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x521 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (=> $x362 (= ?x521 ?x638)))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x179 (bvuge ?x228 (_ bv1 32))))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x362 (bvuge ?x365 (_ bv1 32))))
 (= $x362 $x179))))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x535 (= ?x228 (_ bv0 32))))
 (let ((?x365 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x130 (= ?x365 (_ bv0 32))))
 (= $x130 $x535))))))
 ))
 (let (($x106 (and $x44 $x437)))
 (let (($x282 (and $x106 $x274)))
 (let (($x41 (and $x282 $x590)))
 (let (($x294 (and $x41 $x89)))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x497 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (=> $x333 (= ?x497 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x24 (_ bv1 32))))
 (= $x333 (bvuge ?x216 (_ bv1 32)))))))
 ))
 (let (($x429 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x216 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x24 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x24 (_ bv0 32))))
 (= $x372 (= ?x216 (_ bv0 32)))))))
 ))
 (let (($x123 (and $x429 $x57)))
 (let (($x519 (and $x123 $x315)))
 (let (($x596 (and $x519 $x631)))
 (let (($x439 (and $x596 $x294)))
 (let (($x481 (=> $x439 $x358)))
 (not $x481)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e19a684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0b18e143)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e19a687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e19a684)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe2740800)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42081004)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x02180000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x42081007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe2740803)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42081004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe2740800)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x02180003) #x20
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x02180003) #x20
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x20000000
      (let ((a!1 (concat (k!23 (bvadd #x02180003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x02180002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x02180001 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x02180000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #x02180003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x02180002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x02180001 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x02180000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x20000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x648 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x420)))
 (let ((?x523 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x380)))
 (let ((?x13 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (=> $x314 (= ?x13 ?x523)))))))))))
 ))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x553 (_ bv1 32))))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (= $x314 $x8))))))
 ))
 (let (($x583 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x7 (= false false)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x594 (= ?x279 (_ bv0 32))))
 (=> $x594 $x7)))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x553 (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x594 (= ?x279 (_ bv0 32))))
 (= $x594 $x428))))))
 ))
 (let (($x639 (and $x221 $x583)))
 (let (($x180 (and $x639 $x554)))
 (let (($x153 (and $x180 $x648)))
 (let (($x218 (= $x153 true)))
 (let (($x626 (= $x218 true)))
 (let ((?x296 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x316 (= (_ bv0 2) ?x296)))
 (let (($x442 (= $x316 true)))
 (let (($x345 (= $x442 true)))
 (let (($x499 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x257))))
 (let ((?x79 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (=> $x526 (= ?x79 ?x88))))))))))
 ))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x553 (_ bv1 32))))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (= $x526 $x8))))))
 ))
 (let (($x617 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x7 (= false false)))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x282 (_ bv0 32))))
 (=> $x521 $x7)))))
 ))
 (let (($x478 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x553 (_ bv0 32))))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x282 (_ bv0 32))))
 (= $x521 $x428))))))
 ))
 (let (($x353 (and $x478 $x617)))
 (let (($x604 (and $x353 $x201)))
 (let (($x191 (and $x604 $x499)))
 (let (($x304 (= $x191 true)))
 (let (($x37 (= $x304 true)))
 (let (($x277 (= $x37 true)))
 (let (($x562 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x23 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x318 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x254 (and $x318 $x23)))
 (let (($x472 (and $x254 $x562)))
 (let (($x258 (= $x472 true)))
 (let (($x485 (= $x258 true)))
 (let (($x155 (= $x485 true)))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x612 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv1 32))) (select input.dst.llvm-mem ?x612))))
 (let ((?x552 (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv2 32))) ?x188))))
 (let ((?x13 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (=> $x314 (= ?x13 ?x552))))))))))
 ))
 (let (($x141 (and $x180 $x244)))
 (let (($x200 (= $x141 true)))
 (let (($x131 (= $x200 true)))
 (let (($x60 (= $x131 true)))
 (let (($x732 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x612 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x612))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv2 32))) ?x385)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv3 32))) ?x91)))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x220 (_ bv1 32))))
 (=> $x189 (= ?x209 ?x86)))))))))))
 ))
 (let (($x607 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x553 (_ bv1 32))))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x220 (_ bv1 32))))
 (= $x189 $x8))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x7 (= false false)))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x220 (_ bv0 32))))
 (=> $x104 $x7)))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x553 (_ bv0 32))))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x220 (_ bv0 32))))
 (= $x104 $x428))))))
 ))
 (let (($x409 (and $x172 $x135)))
 (let (($x495 (and $x409 $x607)))
 (let (($x738 (and $x495 $x732)))
 (let (($x739 (= $x738 true)))
 (let (($x52 (= $x739 true)))
 (let (($x568 (= $x52 true)))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x612 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x612))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv2 32))) ?x385)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv3 32))) ?x91)))
 (let ((?x13 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (=> $x314 (= ?x13 ?x86)))))))))))
 ))
 (let (($x158 (and $x180 $x239)))
 (let (($x419 (= $x158 true)))
 (let (($x511 (= $x419 true)))
 (let (($x93 (= $x511 true)))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x612 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv1 32))) (select input.dst.llvm-mem ?x612))))
 (let ((?x552 (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv2 32))) ?x188))))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x220 (_ bv1 32))))
 (=> $x189 (= ?x209 ?x552))))))))))
 ))
 (let (($x341 (and $x495 $x301)))
 (let (($x291 (= $x341 true)))
 (let (($x27 (= $x291 true)))
 (let (($x31 (= $x27 true)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x420)))
 (let ((?x523 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x380)))
 (let ((?x79 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (=> $x526 (= ?x79 ?x523)))))))))))
 ))
 (let (($x50 (and $x604 $x151)))
 (let (($x251 (= $x50 true)))
 (let (($x45 (= $x251 true)))
 (let (($x446 (= $x45 true)))
 (let ((?x287 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x278 (= (_ bv0 32) ?x287)))
 (let ((?x359 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x309 (= (_ bv0 32) ?x359)))
 (let ((?x417 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x417)))
 (let ((?x132 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x474 (and $x12 $x143)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x247 $x474)))
 (let (($x288 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x520 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x325 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x619 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x369 (and $x619 $x325)))
 (let (($x433 (not $x369)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x613 (and $x427 $x222)))
 (let (($x306 (and (not $x613) $x433)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (and $x269 $x266)))
 (let (($x250 (not $x328)))
 (let (($x412 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x349 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x432 (and $x349 $x412)))
 (let (($x447 (and (not $x432) $x250)))
 (let (($x51 (and (and (and (and (and (and $x447 $x306) $x520) $x288) $x65) $x196) $x309)))
 (let (($x606 (and $x51 $x278)))
 (let (($x125 (= $x606 true)))
 (let (($x490 (= $x125 true)))
 (let (($x444 (= $x490 true)))
 (let (($x226 (and $x444 $x446)))
 (let (($x448 (and $x226 $x31)))
 (let (($x440 (and $x448 $x93)))
 (let (($x20 (and $x440 $x568)))
 (let (($x118 (and $x20 $x60)))
 (let (($x214 (and $x118 $x155)))
 (let (($x352 (and $x214 $x277)))
 (let (($x537 (and $x352 $x345)))
 (let (($x264 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x13 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (=> $x314 (= ?x13 ?x209)))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x220 (_ bv1 32))))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (= $x314 $x189))))))
 ))
 (let (($x573 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x220 (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x594 (= ?x279 (_ bv0 32))))
 (= $x594 $x104))))))
 ))
 (let (($x657 (and $x573 $x583)))
 (let (($x620 (and $x657 $x374)))
 (let (($x111 (and $x620 $x264)))
 (let (($x26 (and $x111 $x537)))
 (let (($x510 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (=> $x526 (= ?x79 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x179 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (= $x526 (bvuge ?x179 (_ bv1 32)))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x179 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x282 (_ bv0 32))))
 (= $x521 (= ?x179 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x249 $x617)))
 (let (($x581 (and $x284 $x646)))
 (let (($x390 (and $x581 $x510)))
 (let (($x159 (and $x390 $x26)))
 (let (($x455 (=> $x159 $x626)))
 (not $x455)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x648 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x420)))
 (let ((?x523 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x380)))
 (let ((?x13 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (=> $x314 (= ?x13 ?x523)))))))))))
 ))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x553 (_ bv1 32))))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (= $x314 $x8))))))
 ))
 (let (($x583 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x7 (= false false)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x594 (= ?x279 (_ bv0 32))))
 (=> $x594 $x7)))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x553 (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x594 (= ?x279 (_ bv0 32))))
 (= $x594 $x428))))))
 ))
 (let (($x639 (and $x221 $x583)))
 (let (($x180 (and $x639 $x554)))
 (let (($x153 (and $x180 $x648)))
 (let (($x218 (= $x153 true)))
 (let (($x626 (= $x218 true)))
 (let ((?x296 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x316 (= (_ bv0 2) ?x296)))
 (let (($x442 (= $x316 true)))
 (let (($x345 (= $x442 true)))
 (let (($x499 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x257))))
 (let ((?x79 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (=> $x526 (= ?x79 ?x88))))))))))
 ))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x553 (_ bv1 32))))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (= $x526 $x8))))))
 ))
 (let (($x617 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x7 (= false false)))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x282 (_ bv0 32))))
 (=> $x521 $x7)))))
 ))
 (let (($x478 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x553 (_ bv0 32))))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x282 (_ bv0 32))))
 (= $x521 $x428))))))
 ))
 (let (($x353 (and $x478 $x617)))
 (let (($x604 (and $x353 $x201)))
 (let (($x191 (and $x604 $x499)))
 (let (($x304 (= $x191 true)))
 (let (($x37 (= $x304 true)))
 (let (($x277 (= $x37 true)))
 (let (($x562 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x23 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x318 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x254 (and $x318 $x23)))
 (let (($x472 (and $x254 $x562)))
 (let (($x258 (= $x472 true)))
 (let (($x485 (= $x258 true)))
 (let (($x155 (= $x485 true)))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x612 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv1 32))) (select input.dst.llvm-mem ?x612))))
 (let ((?x552 (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv2 32))) ?x188))))
 (let ((?x13 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (=> $x314 (= ?x13 ?x552))))))))))
 ))
 (let (($x141 (and $x180 $x244)))
 (let (($x200 (= $x141 true)))
 (let (($x131 (= $x200 true)))
 (let (($x60 (= $x131 true)))
 (let (($x732 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x612 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x612))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv2 32))) ?x385)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv3 32))) ?x91)))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x220 (_ bv1 32))))
 (=> $x189 (= ?x209 ?x86)))))))))))
 ))
 (let (($x607 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x553 (_ bv1 32))))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x220 (_ bv1 32))))
 (= $x189 $x8))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x7 (= false false)))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x220 (_ bv0 32))))
 (=> $x104 $x7)))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x428 (= ?x553 (_ bv0 32))))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x220 (_ bv0 32))))
 (= $x104 $x428))))))
 ))
 (let (($x409 (and $x172 $x135)))
 (let (($x495 (and $x409 $x607)))
 (let (($x738 (and $x495 $x732)))
 (let (($x739 (= $x738 true)))
 (let (($x52 (= $x739 true)))
 (let (($x568 (= $x52 true)))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x612 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x612))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv2 32))) ?x385)))
 (let ((?x86 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x612 (_ bv3 32))) ?x91)))
 (let ((?x13 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (=> $x314 (= ?x13 ?x86)))))))))))
 ))
 (let (($x158 (and $x180 $x239)))
 (let (($x419 (= $x158 true)))
 (let (($x511 (= $x419 true)))
 (let (($x93 (= $x511 true)))
 (let (($x301 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x612 (bvadd ?x163 input.dst.llvm-%m1)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv1 32))) (select input.dst.llvm-mem ?x612))))
 (let ((?x552 (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x612 (_ bv2 32))) ?x188))))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x220 (_ bv1 32))))
 (=> $x189 (= ?x209 ?x552))))))))))
 ))
 (let (($x341 (and $x495 $x301)))
 (let (($x291 (= $x341 true)))
 (let (($x27 (= $x291 true)))
 (let (($x31 (= $x27 true)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x34 (bvadd ?x163 input.dst.llvm-%m2)))
 (let ((?x420 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x34))))
 (let ((?x380 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv2 32))) ?x420)))
 (let ((?x523 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x34 (_ bv3 32))) ?x380)))
 (let ((?x79 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (=> $x526 (= ?x79 ?x523)))))))))))
 ))
 (let (($x50 (and $x604 $x151)))
 (let (($x251 (= $x50 true)))
 (let (($x45 (= $x251 true)))
 (let (($x446 (= $x45 true)))
 (let ((?x287 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x278 (= (_ bv0 32) ?x287)))
 (let ((?x359 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x309 (= (_ bv0 32) ?x359)))
 (let ((?x417 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x417)))
 (let ((?x132 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x474 (and $x12 $x143)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x247 $x474)))
 (let (($x288 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x520 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x325 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x619 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x369 (and $x619 $x325)))
 (let (($x433 (not $x369)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x427 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x613 (and $x427 $x222)))
 (let (($x306 (and (not $x613) $x433)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (and $x269 $x266)))
 (let (($x250 (not $x328)))
 (let (($x412 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x349 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x432 (and $x349 $x412)))
 (let (($x447 (and (not $x432) $x250)))
 (let (($x51 (and (and (and (and (and (and $x447 $x306) $x520) $x288) $x65) $x196) $x309)))
 (let (($x606 (and $x51 $x278)))
 (let (($x125 (= $x606 true)))
 (let (($x490 (= $x125 true)))
 (let (($x444 (= $x490 true)))
 (let (($x226 (and $x444 $x446)))
 (let (($x448 (and $x226 $x31)))
 (let (($x440 (and $x448 $x93)))
 (let (($x20 (and $x440 $x568)))
 (let (($x118 (and $x20 $x60)))
 (let (($x214 (and $x118 $x155)))
 (let (($x352 (and $x214 $x277)))
 (let (($x537 (and $x352 $x345)))
 (let (($x264 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x13 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (=> $x314 (= ?x13 ?x209)))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x220 (_ bv1 32))))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x279 (_ bv1 32))))
 (= $x314 $x189))))))
 ))
 (let (($x573 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x220 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (= ?x220 (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x594 (= ?x279 (_ bv0 32))))
 (= $x594 $x104))))))
 ))
 (let (($x657 (and $x573 $x583)))
 (let (($x620 (and $x657 $x374)))
 (let (($x111 (and $x620 $x264)))
 (let (($x26 (and $x111 $x537)))
 (let (($x510 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (=> $x526 (= ?x79 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x179 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x526 (bvuge ?x282 (_ bv1 32))))
 (= $x526 (bvuge ?x179 (_ bv1 32)))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x179 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x282 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x521 (= ?x282 (_ bv0 32))))
 (= $x521 (= ?x179 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x249 $x617)))
 (let (($x581 (and $x284 $x646)))
 (let (($x390 (and $x581 $x510)))
 (let (($x159 (and $x390 $x26)))
 (let (($x455 (=> $x159 $x626)))
 (not $x455)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e19a684)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0b18e143)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e19a687)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0b18e140)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e19a684)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x10
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000010
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000002))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x7ffffff0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x93284804)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0e092010)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x80c82200)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0e092013)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x93284807)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0e092010)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x93284804)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x40
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x40
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x80c82203 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x80c82202 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x80c82201 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x80c82200 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x80c82203 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x80c82202 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x80c82201 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x80c82200 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x40000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x513 (bvadd ?x162 input.dst.llvm-%m2)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x513))))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv2 32))) ?x300)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv3 32))) ?x96)))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (=> $x634 (= ?x171 ?x285)))))))))))
 ))
 (let (($x735 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x260 (_ bv1 32))))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (= $x634 $x745))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x32 (= false false)))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x34 (_ bv0 32))))
 (=> $x355 $x32)))))
 ))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x260 (_ bv0 32))))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x34 (_ bv0 32))))
 (= $x355 $x156))))))
 ))
 (let (($x317 (and $x348 $x644)))
 (let (($x429 (and $x317 $x735)))
 (let (($x74 (and $x429 $x124)))
 (let (($x77 (= $x74 true)))
 (let (($x377 (= $x77 true)))
 (let ((?x302 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x491 (= (_ bv0 2) ?x302)))
 (let (($x225 (= $x491 true)))
 (let (($x149 (= $x225 true)))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x513 (bvadd ?x162 input.dst.llvm-%m2)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x513 (_ bv1 32))) (select input.dst.llvm-mem ?x513))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x513 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x513 (_ bv2 32))) ?x541))))
 (let ((?x288 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (=> $x222 (= ?x288 ?x137))))))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x260 (_ bv1 32))))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (= $x222 $x745))))))
 ))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x32 (= false false)))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x620 (_ bv0 32))))
 (=> $x13 $x32)))))
 ))
 (let (($x737 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x260 (_ bv0 32))))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x620 (_ bv0 32))))
 (= $x13 $x156))))))
 ))
 (let (($x740 (and $x737 $x577)))
 (let (($x465 (and $x740 $x331)))
 (let (($x290 (and $x465 $x413)))
 (let (($x116 (= $x290 true)))
 (let (($x426 (= $x116 true)))
 (let (($x400 (= $x426 true)))
 (let (($x605 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x363 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x500 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x55 (and $x500 $x363)))
 (let (($x157 (and $x55 $x605)))
 (let (($x572 (= $x157 true)))
 (let (($x98 (= $x572 true)))
 (let (($x653 (= $x98 true)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x397 (bvadd ?x162 input.dst.llvm-%m1)))
 (let ((?x618 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem ?x397))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv2 32))) ?x618))))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (=> $x135 (= ?x187 ?x100))))))))))
 ))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x260 (_ bv1 32))))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (= $x135 $x745))))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x32 (= false false)))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x56 (_ bv0 32))))
 (=> $x252 $x32)))))
 ))
 (let (($x622 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x260 (_ bv0 32))))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x56 (_ bv0 32))))
 (= $x252 $x156))))))
 ))
 (let (($x168 (and $x622 $x420)))
 (let (($x631 (and $x168 $x229)))
 (let (($x323 (and $x631 $x642)))
 (let (($x423 (= $x323 true)))
 (let (($x223 (= $x423 true)))
 (let (($x272 (= $x223 true)))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x397 (bvadd ?x162 input.dst.llvm-%m1)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x397))))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv2 32))) ?x205)))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv3 32))) ?x588)))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (=> $x634 (= ?x171 ?x364)))))))))))
 ))
 (let (($x9 (and $x429 $x358)))
 (let (($x389 (= $x9 true)))
 (let (($x294 (= $x389 true)))
 (let (($x439 (= $x294 true)))
 (let (($x544 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x397 (bvadd ?x162 input.dst.llvm-%m1)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x397))))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv2 32))) ?x205)))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv3 32))) ?x588)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (=> $x135 (= ?x187 ?x364)))))))))))
 ))
 (let (($x410 (and $x631 $x544)))
 (let (($x103 (= $x410 true)))
 (let (($x305 (= $x103 true)))
 (let (($x582 (= $x305 true)))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x397 (bvadd ?x162 input.dst.llvm-%m1)))
 (let ((?x618 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem ?x397))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv2 32))) ?x618))))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (=> $x634 (= ?x171 ?x100))))))))))
 ))
 (let (($x555 (and $x429 $x449)))
 (let (($x235 (= $x555 true)))
 (let (($x246 (= $x235 true)))
 (let (($x421 (= $x246 true)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x513 (bvadd ?x162 input.dst.llvm-%m2)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x513))))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv2 32))) ?x300)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv3 32))) ?x96)))
 (let ((?x288 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (=> $x222 (= ?x288 ?x285)))))))))))
 ))
 (let (($x357 (and $x465 $x271)))
 (let (($x643 (= $x357 true)))
 (let (($x75 (= $x643 true)))
 (let (($x53 (= $x75 true)))
 (let ((?x733 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x81 (= (_ bv0 32) ?x733)))
 (let ((?x568 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x20 (= (_ bv0 32) ?x568)))
 (let ((?x739 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x739)))
 (let ((?x387 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x736 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x387)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x732 (and $x93 $x736)))
 (let (($x511 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x738 (and $x511 $x732)))
 (let (($x419 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x556 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x385 (and $x76 $x556)))
 (let (($x91 (not $x385)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x356 (and $x180 $x213)))
 (let (($x224 (and (not $x356) $x91)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x448 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x448 $x120)))
 (let (($x639 (not $x221)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x301 $x291)))
 (let (($x554 (and (not $x27) $x639)))
 (let (($x118 (and (and (and (and (and (and $x554 $x224) $x239) $x419) $x738) $x52) $x20)))
 (let (($x461 (and $x118 $x81)))
 (let (($x393 (= $x461 true)))
 (let (($x318 (= $x393 true)))
 (let (($x147 (= $x318 true)))
 (let (($x406 (and $x147 $x53)))
 (let (($x228 (and $x406 $x421)))
 (let (($x340 (and $x228 $x582)))
 (let (($x89 (and $x340 $x439)))
 (let (($x384 (and $x89 $x272)))
 (let (($x403 (and $x384 $x653)))
 (let (($x136 (and $x403 $x400)))
 (let (($x608 (and $x136 $x149)))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (=> $x135 (= ?x187 ?x171)))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (= $x135 $x634))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x34 (_ bv0 32))))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x56 (_ bv0 32))))
 (= $x252 $x355))))))
 ))
 (let (($x380 (and $x514 $x420)))
 (let (($x607 (and $x380 $x11)))
 (let (($x552 (and $x607 $x543)))
 (let (($x564 (and $x552 $x608)))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x288 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (=> $x222 (= ?x288 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x360 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (= $x222 (bvuge ?x189 (_ bv1 32)))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x620 (_ bv0 32))))
 (= $x13 (= ?x189 (_ bv0 32)))))))
 ))
 (let (($x376 (and $x160 $x577)))
 (let (($x619 (and $x376 $x360)))
 (let (($x42 (and $x619 $x12)))
 (let (($x175 (and $x42 $x564)))
 (let (($x623 (=> $x175 $x377)))
 (not $x623)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x513 (bvadd ?x162 input.dst.llvm-%m2)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x513))))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv2 32))) ?x300)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv3 32))) ?x96)))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (=> $x634 (= ?x171 ?x285)))))))))))
 ))
 (let (($x735 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x260 (_ bv1 32))))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (= $x634 $x745))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x32 (= false false)))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x34 (_ bv0 32))))
 (=> $x355 $x32)))))
 ))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x260 (_ bv0 32))))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x34 (_ bv0 32))))
 (= $x355 $x156))))))
 ))
 (let (($x317 (and $x348 $x644)))
 (let (($x429 (and $x317 $x735)))
 (let (($x74 (and $x429 $x124)))
 (let (($x77 (= $x74 true)))
 (let (($x377 (= $x77 true)))
 (let ((?x302 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x491 (= (_ bv0 2) ?x302)))
 (let (($x225 (= $x491 true)))
 (let (($x149 (= $x225 true)))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x513 (bvadd ?x162 input.dst.llvm-%m2)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x513 (_ bv1 32))) (select input.dst.llvm-mem ?x513))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x513 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x513 (_ bv2 32))) ?x541))))
 (let ((?x288 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (=> $x222 (= ?x288 ?x137))))))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x260 (_ bv1 32))))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (= $x222 $x745))))))
 ))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x32 (= false false)))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x620 (_ bv0 32))))
 (=> $x13 $x32)))))
 ))
 (let (($x737 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x260 (_ bv0 32))))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x620 (_ bv0 32))))
 (= $x13 $x156))))))
 ))
 (let (($x740 (and $x737 $x577)))
 (let (($x465 (and $x740 $x331)))
 (let (($x290 (and $x465 $x413)))
 (let (($x116 (= $x290 true)))
 (let (($x426 (= $x116 true)))
 (let (($x400 (= $x426 true)))
 (let (($x605 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x363 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x500 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x55 (and $x500 $x363)))
 (let (($x157 (and $x55 $x605)))
 (let (($x572 (= $x157 true)))
 (let (($x98 (= $x572 true)))
 (let (($x653 (= $x98 true)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x397 (bvadd ?x162 input.dst.llvm-%m1)))
 (let ((?x618 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem ?x397))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv2 32))) ?x618))))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (=> $x135 (= ?x187 ?x100))))))))))
 ))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x260 (_ bv1 32))))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (= $x135 $x745))))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x32 (= false false)))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x56 (_ bv0 32))))
 (=> $x252 $x32)))))
 ))
 (let (($x622 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x260 (_ bv0 32))))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x56 (_ bv0 32))))
 (= $x252 $x156))))))
 ))
 (let (($x168 (and $x622 $x420)))
 (let (($x631 (and $x168 $x229)))
 (let (($x323 (and $x631 $x642)))
 (let (($x423 (= $x323 true)))
 (let (($x223 (= $x423 true)))
 (let (($x272 (= $x223 true)))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x397 (bvadd ?x162 input.dst.llvm-%m1)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x397))))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv2 32))) ?x205)))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv3 32))) ?x588)))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (=> $x634 (= ?x171 ?x364)))))))))))
 ))
 (let (($x9 (and $x429 $x358)))
 (let (($x389 (= $x9 true)))
 (let (($x294 (= $x389 true)))
 (let (($x439 (= $x294 true)))
 (let (($x544 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x397 (bvadd ?x162 input.dst.llvm-%m1)))
 (let ((?x205 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x397))))
 (let ((?x588 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv2 32))) ?x205)))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x397 (_ bv3 32))) ?x588)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (=> $x135 (= ?x187 ?x364)))))))))))
 ))
 (let (($x410 (and $x631 $x544)))
 (let (($x103 (= $x410 true)))
 (let (($x305 (= $x103 true)))
 (let (($x582 (= $x305 true)))
 (let (($x449 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x397 (bvadd ?x162 input.dst.llvm-%m1)))
 (let ((?x618 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv1 32))) (select input.dst.llvm-mem ?x397))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x397 (_ bv2 32))) ?x618))))
 (let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (=> $x634 (= ?x171 ?x100))))))))))
 ))
 (let (($x555 (and $x429 $x449)))
 (let (($x235 (= $x555 true)))
 (let (($x246 (= $x235 true)))
 (let (($x421 (= $x246 true)))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x513 (bvadd ?x162 input.dst.llvm-%m2)))
 (let ((?x300 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x513))))
 (let ((?x96 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv2 32))) ?x300)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x513 (_ bv3 32))) ?x96)))
 (let ((?x288 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (=> $x222 (= ?x288 ?x285)))))))))))
 ))
 (let (($x357 (and $x465 $x271)))
 (let (($x643 (= $x357 true)))
 (let (($x75 (= $x643 true)))
 (let (($x53 (= $x75 true)))
 (let ((?x733 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x81 (= (_ bv0 32) ?x733)))
 (let ((?x568 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x20 (= (_ bv0 32) ?x568)))
 (let ((?x739 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x739)))
 (let ((?x387 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x736 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x387)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x732 (and $x93 $x736)))
 (let (($x511 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x738 (and $x511 $x732)))
 (let (($x419 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x556 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x385 (and $x76 $x556)))
 (let (($x91 (not $x385)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x356 (and $x180 $x213)))
 (let (($x224 (and (not $x356) $x91)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x448 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x448 $x120)))
 (let (($x639 (not $x221)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x301 $x291)))
 (let (($x554 (and (not $x27) $x639)))
 (let (($x118 (and (and (and (and (and (and $x554 $x224) $x239) $x419) $x738) $x52) $x20)))
 (let (($x461 (and $x118 $x81)))
 (let (($x393 (= $x461 true)))
 (let (($x318 (= $x393 true)))
 (let (($x147 (= $x318 true)))
 (let (($x406 (and $x147 $x53)))
 (let (($x228 (and $x406 $x421)))
 (let (($x340 (and $x228 $x582)))
 (let (($x89 (and $x340 $x439)))
 (let (($x384 (and $x89 $x272)))
 (let (($x403 (and $x384 $x653)))
 (let (($x136 (and $x403 $x400)))
 (let (($x608 (and $x136 $x149)))
 (let (($x543 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x187 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (=> $x135 (= ?x187 ?x171)))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (bvuge ?x34 (_ bv1 32))))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (bvuge ?x56 (_ bv1 32))))
 (= $x135 $x634))))))
 ))
 (let (($x514 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x34 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (= ?x34 (_ bv0 32))))
 (let ((?x56 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x56 (_ bv0 32))))
 (= $x252 $x355))))))
 ))
 (let (($x380 (and $x514 $x420)))
 (let (($x607 (and $x380 $x11)))
 (let (($x552 (and $x607 $x543)))
 (let (($x564 (and $x552 $x608)))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x288 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (=> $x222 (= ?x288 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x360 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x620 (_ bv1 32))))
 (= $x222 (bvuge ?x189 (_ bv1 32)))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x620 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x620 (_ bv0 32))))
 (= $x13 (= ?x189 (_ bv0 32)))))))
 ))
 (let (($x376 (and $x160 $x577)))
 (let (($x619 (and $x376 $x360)))
 (let (($x42 (and $x619 $x12)))
 (let (($x175 (and $x42 $x564)))
 (let (($x623 (=> $x175 $x377)))
 (not $x623)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xe8be4148)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x90ebb404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x266d7c03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x90ebb407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x90ebb404)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4148 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!1 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4148 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xa0085888)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x18083424)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x18083427)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xa008588b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x18083424)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xa0085888)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x02
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x4000000b (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x4000000a (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x40000009 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x40000008 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!23 (bvadd #x4000000b (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x4000000a (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x40000009 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x40000008 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x02000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x718 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x710 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x522)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x710))))
 (let ((?x725 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv2 32))) ?x715)))
 (let ((?x723 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv3 32))) ?x725)))
 (let ((?x419 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (=> $x213 (= ?x419 ?x723)))))))))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x262 (_ bv1 32))))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (= $x213 $x49))))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x188 (= false false)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x607 (_ bv0 32))))
 (=> $x187 $x188)))))
 ))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x262 (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x607 (_ bv0 32))))
 (= $x187 $x64))))))
 ))
 (let (($x388 (and $x586 $x206)))
 (let (($x649 (and $x388 $x234)))
 (let (($x721 (and $x649 $x718)))
 (let (($x724 (= $x721 true)))
 (let (($x727 (= $x724 true)))
 (let (($x527 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x522 input.dst.llvm-%m2)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x66))))
 (let ((?x419 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (=> $x213 (= ?x419 ?x451))))))))))
 ))
 (let (($x365 (and $x649 $x527)))
 (let (($x140 (= $x365 true)))
 (let (($x470 (= $x140 true)))
 (let (($x437 (= $x470 true)))
 (let (($x351 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x193 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x502 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x558 (and $x502 $x193)))
 (let (($x647 (and $x558 $x351)))
 (let (($x382 (= $x647 true)))
 (let (($x498 (= $x382 true)))
 (let (($x593 (= $x498 true)))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x522 input.dst.llvm-%m1)))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x477))))
 (let ((?x17 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (=> $x644 (= ?x17 ?x295))))))))))
 ))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x262 (_ bv1 32))))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (= $x644 $x49))))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x188 (= false false)))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x88 (_ bv0 32))))
 (=> $x559 $x188)))))
 ))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x262 (_ bv0 32))))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x88 (_ bv0 32))))
 (= $x559 $x64))))))
 ))
 (let (($x546 (and $x547 $x300)))
 (let (($x573 (and $x546 $x114)))
 (let (($x487 (and $x573 $x113)))
 (let (($x150 (= $x487 true)))
 (let (($x629 (= $x150 true)))
 (let (($x178 (= $x629 true)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x522 input.dst.llvm-%m1)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x310))))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv2 32))) ?x238)))
 (let ((?x570 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv3 32))) ?x37)))
 (let ((?x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (bvuge ?x513 (_ bv1 32))))
 (=> $x334 (= ?x165 ?x570)))))))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x262 (_ bv1 32))))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (bvuge ?x513 (_ bv1 32))))
 (= $x334 $x49))))))
 ))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x188 (= false false)))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x513 (_ bv0 32))))
 (=> $x94 $x188)))))
 ))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x262 (_ bv0 32))))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x513 (_ bv0 32))))
 (= $x94 $x64))))))
 ))
 (let (($x289 (and $x57 $x184)))
 (let (($x617 (and $x289 $x41)))
 (let (($x153 (and $x617 $x460)))
 (let (($x455 (= $x153 true)))
 (let (($x25 (= $x455 true)))
 (let (($x575 (= $x25 true)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x522 input.dst.llvm-%m1)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x310))))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv2 32))) ?x238)))
 (let ((?x570 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv3 32))) ?x37)))
 (let ((?x17 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (=> $x644 (= ?x17 ?x570)))))))))))
 ))
 (let (($x442 (and $x573 $x316)))
 (let (($x345 (= $x442 true)))
 (let (($x218 (= $x345 true)))
 (let (($x626 (= $x218 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x522 input.dst.llvm-%m1)))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x477))))
 (let ((?x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (bvuge ?x513 (_ bv1 32))))
 (=> $x334 (= ?x165 ?x295))))))))))
 ))
 (let (($x536 (and $x617 $x104)))
 (let (($x264 (= $x536 true)))
 (let (($x349 (= $x264 true)))
 (let (($x161 (= $x349 true)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x522 input.dst.llvm-%m2)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x492 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x190)))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x492)))
 (let ((?x419 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (=> $x213 (= ?x419 ?x567)))))))))))
 ))
 (let (($x309 (and $x649 $x359)))
 (let (($x51 (= $x309 true)))
 (let (($x287 (= $x51 true)))
 (let (($x278 (= $x287 true)))
 (let ((?x272 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x384 (= (_ bv0 32) ?x272)))
 (let ((?x423 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x223 (= (_ bv0 32) ?x423)))
 (let ((?x642 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x323 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x642)))
 (let ((?x439 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x439)))
 (let (($x389 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x481 (and $x389 $x89)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x9 $x481)))
 (let (($x358 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x544 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x410 (and $x73 $x544)))
 (let (($x103 (not $x410)))
 (let (($x364 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x588 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x560 (and $x588 $x364)))
 (let (($x582 (and (not $x560) $x103)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x631 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x654 (and $x631 $x299)))
 (let (($x480 (not $x654)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x15 $x168)))
 (let (($x205 (and (not $x63) $x480)))
 (let (($x55 (and (and (and (and (and (and $x205 $x582) $x261) $x358) $x167) $x323) $x223)))
 (let (($x652 (and $x55 $x384)))
 (let (($x479 (= $x652 true)))
 (let (($x605 (= $x479 true)))
 (let (($x157 (= $x605 true)))
 (let ((?x449 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x555 (= (_ bv0 2) ?x449)))
 (let (($x235 (= $x555 true)))
 (let (($x246 (= $x235 true)))
 (let (($x572 (and $x246 $x157)))
 (let (($x19 (and $x572 $x278)))
 (let (($x412 (and $x19 $x161)))
 (let (($x208 (and $x412 $x626)))
 (let (($x656 (and $x208 $x575)))
 (let (($x350 (and $x656 $x178)))
 (let (($x533 (and $x350 $x593)))
 (let (($x663 (and $x533 $x437)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x17 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (=> $x644 (= ?x17 ?x165)))))))
 ))
 (let (($x730 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (bvuge ?x513 (_ bv1 32))))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (= $x644 $x334))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x513 (_ bv0 32))))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x88 (_ bv0 32))))
 (= $x559 $x94))))))
 ))
 (let (($x96 (and $x322 $x300)))
 (let (($x735 (and $x96 $x730)))
 (let (($x100 (and $x735 $x371)))
 (let (($x207 (and $x100 $x663)))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x419 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (=> $x213 (= ?x419 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x86 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (= $x213 (bvuge ?x634 (_ bv1 32)))))))
 ))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x607 (_ bv0 32))))
 (= $x187 (= ?x634 (_ bv0 32)))))))
 ))
 (let (($x112 (and $x542 $x206)))
 (let (($x76 (and $x112 $x86)))
 (let (($x440 (and $x76 $x93)))
 (let (($x44 (and $x440 $x207)))
 (let (($x728 (=> $x44 $x727)))
 (not $x728)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x718 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x710 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x522)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x710))))
 (let ((?x725 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv2 32))) ?x715)))
 (let ((?x723 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x710 (_ bv3 32))) ?x725)))
 (let ((?x419 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (=> $x213 (= ?x419 ?x723)))))))))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x262 (_ bv1 32))))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (= $x213 $x49))))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x188 (= false false)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x607 (_ bv0 32))))
 (=> $x187 $x188)))))
 ))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x262 (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x607 (_ bv0 32))))
 (= $x187 $x64))))))
 ))
 (let (($x388 (and $x586 $x206)))
 (let (($x649 (and $x388 $x234)))
 (let (($x721 (and $x649 $x718)))
 (let (($x724 (= $x721 true)))
 (let (($x727 (= $x724 true)))
 (let (($x527 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x522 input.dst.llvm-%m2)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x66))))
 (let ((?x419 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (=> $x213 (= ?x419 ?x451))))))))))
 ))
 (let (($x365 (and $x649 $x527)))
 (let (($x140 (= $x365 true)))
 (let (($x470 (= $x140 true)))
 (let (($x437 (= $x470 true)))
 (let (($x351 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x193 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x502 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x558 (and $x502 $x193)))
 (let (($x647 (and $x558 $x351)))
 (let (($x382 (= $x647 true)))
 (let (($x498 (= $x382 true)))
 (let (($x593 (= $x498 true)))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x522 input.dst.llvm-%m1)))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x477))))
 (let ((?x17 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (=> $x644 (= ?x17 ?x295))))))))))
 ))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x262 (_ bv1 32))))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (= $x644 $x49))))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x188 (= false false)))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x88 (_ bv0 32))))
 (=> $x559 $x188)))))
 ))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x262 (_ bv0 32))))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x88 (_ bv0 32))))
 (= $x559 $x64))))))
 ))
 (let (($x546 (and $x547 $x300)))
 (let (($x573 (and $x546 $x114)))
 (let (($x487 (and $x573 $x113)))
 (let (($x150 (= $x487 true)))
 (let (($x629 (= $x150 true)))
 (let (($x178 (= $x629 true)))
 (let (($x460 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x522 input.dst.llvm-%m1)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x310))))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv2 32))) ?x238)))
 (let ((?x570 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv3 32))) ?x37)))
 (let ((?x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (bvuge ?x513 (_ bv1 32))))
 (=> $x334 (= ?x165 ?x570)))))))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x262 (_ bv1 32))))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (bvuge ?x513 (_ bv1 32))))
 (= $x334 $x49))))))
 ))
 (let (($x184 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x188 (= false false)))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x513 (_ bv0 32))))
 (=> $x94 $x188)))))
 ))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x262 (_ bv0 32))))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x513 (_ bv0 32))))
 (= $x94 $x64))))))
 ))
 (let (($x289 (and $x57 $x184)))
 (let (($x617 (and $x289 $x41)))
 (let (($x153 (and $x617 $x460)))
 (let (($x455 (= $x153 true)))
 (let (($x25 (= $x455 true)))
 (let (($x575 (= $x25 true)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x522 input.dst.llvm-%m1)))
 (let ((?x238 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x310))))
 (let ((?x37 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv2 32))) ?x238)))
 (let ((?x570 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x310 (_ bv3 32))) ?x37)))
 (let ((?x17 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (=> $x644 (= ?x17 ?x570)))))))))))
 ))
 (let (($x442 (and $x573 $x316)))
 (let (($x345 (= $x442 true)))
 (let (($x218 (= $x345 true)))
 (let (($x626 (= $x218 true)))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x310 (bvadd ?x522 input.dst.llvm-%m1)))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv1 32))) (select input.dst.llvm-mem ?x310))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x310 (_ bv2 32))) ?x477))))
 (let ((?x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (bvuge ?x513 (_ bv1 32))))
 (=> $x334 (= ?x165 ?x295))))))))))
 ))
 (let (($x536 (and $x617 $x104)))
 (let (($x264 (= $x536 true)))
 (let (($x349 (= $x264 true)))
 (let (($x161 (= $x349 true)))
 (let (($x359 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x522 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x430 (bvadd ?x522 input.dst.llvm-%m2)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x430))))
 (let ((?x492 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv2 32))) ?x190)))
 (let ((?x567 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x430 (_ bv3 32))) ?x492)))
 (let ((?x419 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (=> $x213 (= ?x419 ?x567)))))))))))
 ))
 (let (($x309 (and $x649 $x359)))
 (let (($x51 (= $x309 true)))
 (let (($x287 (= $x51 true)))
 (let (($x278 (= $x287 true)))
 (let ((?x272 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x384 (= (_ bv0 32) ?x272)))
 (let ((?x423 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x223 (= (_ bv0 32) ?x423)))
 (let ((?x642 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x323 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x642)))
 (let ((?x439 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x439)))
 (let (($x389 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x481 (and $x389 $x89)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x9 $x481)))
 (let (($x358 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x544 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x410 (and $x73 $x544)))
 (let (($x103 (not $x410)))
 (let (($x364 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x588 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x560 (and $x588 $x364)))
 (let (($x582 (and (not $x560) $x103)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x631 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x654 (and $x631 $x299)))
 (let (($x480 (not $x654)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x15 $x168)))
 (let (($x205 (and (not $x63) $x480)))
 (let (($x55 (and (and (and (and (and (and $x205 $x582) $x261) $x358) $x167) $x323) $x223)))
 (let (($x652 (and $x55 $x384)))
 (let (($x479 (= $x652 true)))
 (let (($x605 (= $x479 true)))
 (let (($x157 (= $x605 true)))
 (let ((?x449 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x555 (= (_ bv0 2) ?x449)))
 (let (($x235 (= $x555 true)))
 (let (($x246 (= $x235 true)))
 (let (($x572 (and $x246 $x157)))
 (let (($x19 (and $x572 $x278)))
 (let (($x412 (and $x19 $x161)))
 (let (($x208 (and $x412 $x626)))
 (let (($x656 (and $x208 $x575)))
 (let (($x350 (and $x656 $x178)))
 (let (($x533 (and $x350 $x593)))
 (let (($x663 (and $x533 $x437)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x17 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (=> $x644 (= ?x17 ?x165)))))))
 ))
 (let (($x730 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x334 (bvuge ?x513 (_ bv1 32))))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x88 (_ bv1 32))))
 (= $x644 $x334))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x513 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x513 (_ bv0 32))))
 (let ((?x88 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x559 (= ?x88 (_ bv0 32))))
 (= $x559 $x94))))))
 ))
 (let (($x96 (and $x322 $x300)))
 (let (($x735 (and $x96 $x730)))
 (let (($x100 (and $x735 $x371)))
 (let (($x207 (and $x100 $x663)))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x419 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (=> $x213 (= ?x419 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x86 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x607 (_ bv1 32))))
 (= $x213 (bvuge ?x634 (_ bv1 32)))))))
 ))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x607 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x607 (_ bv0 32))))
 (= $x187 (= ?x634 (_ bv0 32)))))))
 ))
 (let (($x112 (and $x542 $x206)))
 (let (($x76 (and $x112 $x86)))
 (let (($x440 (and $x76 $x93)))
 (let (($x44 (and $x440 $x207)))
 (let (($x728 (=> $x44 $x727)))
 (not $x728)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00082080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00e44024)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x18b04060)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00082080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x18b04063)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00e44027)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x18b04060)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00e44024)
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x10
      #x00))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0000000e)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x996684b4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!43))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfa031258)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x000000cc)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x000000cc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfa03125b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x996684b7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfa031258)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x996684b4)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x08000000 x!0) #x08000000 #x00000065)
              #x00000064)
         #x00000038))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!47 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000038) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!47 (k!46 x!0)))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000038) #x04
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000000
    (ite (= x!0 #x00000038) #x00000000
      (let ((a!1 (concat (k!43 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!44 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!49 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000038) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!49 (k!46 x!0)))
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000038) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000000
    (ite (= x!0 #x00000038) #x00000000
      (let ((a!1 (concat (k!44 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!48 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000e) true
      false))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x08000000 x!0) #x08000000 #x00000065)
              #x00000064)
         #x0000000e))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!48 (k!45 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000e) true
    (ite (= x!0 #x08000000) false
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000004
      (let ((a!1 (concat (k!44 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!43 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000004
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x435)))
 (let ((?x698 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x691))))
 (let ((?x706 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv2 32))) ?x698)))
 (let ((?x705 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv3 32))) ?x706)))
 (let ((?x310 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (=> $x287 (= ?x310 ?x705)))))))))))
 ))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x400 (_ bv1 32))))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (= $x287 $x237))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x618 (= false false)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x286 (_ bv0 32))))
 (=> $x398 $x618)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x400 (_ bv0 32))))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x286 (_ bv0 32))))
 (= $x398 $x292))))))
 ))
 (let (($x357 (and $x162 $x426)))
 (let (($x530 (and $x357 $x441)))
 (let (($x702 (and $x530 $x693)))
 (let (($x704 (= $x702 true)))
 (let (($x708 (= $x704 true)))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x339 (bvadd ?x435 input.dst.llvm-%m2)))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem ?x339))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv2 32))) ?x478))))
 (let ((?x582 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (=> $x631 (= ?x582 ?x251))))))))))
 ))
 (let (($x734 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x400 (_ bv1 32))))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (= $x631 $x237))))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x618 (= false false)))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x735 (_ bv0 32))))
 (=> $x17 $x618)))))
 ))
 (let (($x532 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x400 (_ bv0 32))))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x735 (_ bv0 32))))
 (= $x17 $x292))))))
 ))
 (let (($x62 (and $x532 $x484)))
 (let (($x743 (and $x62 $x734)))
 (let (($x172 (and $x743 $x446)))
 (let (($x650 (= $x172 true)))
 (let (($x612 (= $x650 true)))
 (let (($x79 (= $x612 true)))
 (let (($x369 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x84 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x561 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x328 (and $x561 $x84)))
 (let (($x47 (and $x328 $x369)))
 (let (($x145 (= $x47 true)))
 (let (($x361 (= $x145 true)))
 (let (($x307 (= $x361 true)))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x95 (bvadd ?x435 input.dst.llvm-%m1)))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x592))))
 (let ((?x310 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (=> $x287 (= ?x310 ?x267))))))))))
 ))
 (let (($x623 (and $x530 $x74)))
 (let (($x132 (= $x623 true)))
 (let (($x65 (= $x132 true)))
 (let (($x152 (= $x65 true)))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x95 (bvadd ?x435 input.dst.llvm-%m1)))
 (let ((?x639 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x639)))
 (let ((?x414 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x91)))
 (let ((?x298 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x664 (_ bv1 32))))
 (=> $x51 (= ?x298 ?x414)))))))))))
 ))
 (let (($x659 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x400 (_ bv1 32))))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x664 (_ bv1 32))))
 (= $x51 $x237))))))
 ))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x618 (= false false)))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x664 (_ bv0 32))))
 (=> $x234 $x618)))))
 ))
 (let (($x279 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x400 (_ bv0 32))))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x664 (_ bv0 32))))
 (= $x234 $x292))))))
 ))
 (let (($x526 (and $x279 $x284)))
 (let (($x655 (and $x526 $x659)))
 (let (($x146 (and $x655 $x175)))
 (let (($x436 (= $x146 true)))
 (let (($x124 (= $x436 true)))
 (let (($x143 (= $x124 true)))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x95 (bvadd ?x435 input.dst.llvm-%m1)))
 (let ((?x639 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x639)))
 (let ((?x414 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x91)))
 (let ((?x310 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (=> $x287 (= ?x310 ?x414)))))))))))
 ))
 (let (($x136 (and $x530 $x491)))
 (let (($x290 (= $x136 true)))
 (let (($x320 (= $x290 true)))
 (let (($x116 (= $x320 true)))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x95 (bvadd ?x435 input.dst.llvm-%m1)))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x592))))
 (let ((?x298 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x664 (_ bv1 32))))
 (=> $x51 (= ?x298 ?x267))))))))))
 ))
 (let (($x148 (and $x655 $x411)))
 (let (($x59 (= $x148 true)))
 (let (($x110 (= $x59 true)))
 (let (($x71 (= $x110 true)))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x339 (bvadd ?x435 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x339))))
 (let ((?x399 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv2 32))) ?x256)))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv3 32))) ?x399)))
 (let ((?x582 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (=> $x631 (= ?x582 ?x366)))))))))))
 ))
 (let (($x10 (and $x743 $x201)))
 (let (($x525 (= $x10 true)))
 (let (($x54 (= $x525 true)))
 (let (($x8 (= $x54 true)))
 (let ((?x133 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x243 (= (_ bv0 32) ?x133)))
 (let ((?x575 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x656 (= (_ bv0 32) ?x575)))
 (let ((?x455 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x455)))
 (let ((?x159 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x537 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x626 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x460 (and $x626 $x537)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x218 $x460)))
 (let (($x345 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x438 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x238 (and $x438 $x257)))
 (let (($x37 (not $x238)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x573 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x499 (and $x573 $x277)))
 (let (($x352 (and (not $x499) $x37)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x547 (and $x412 $x30)))
 (let (($x546 (not $x547)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x349 (and $x104 $x264)))
 (let (($x114 (and (not $x349) $x546)))
 (let (($x350 (and (and (and (and (and (and $x114 $x352) $x316) $x345) $x153) $x25) $x656)))
 (let (($x144 (and $x350 $x243)))
 (let (($x503 (= $x144 true)))
 (let (($x502 (= $x503 true)))
 (let (($x128 (= $x502 true)))
 (let ((?x312 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x477 (= (_ bv0 2) ?x312)))
 (let (($x475 (= $x477 true)))
 (let (($x295 (= $x475 true)))
 (let (($x193 (and $x295 $x128)))
 (let (($x303 (and $x193 $x8)))
 (let (($x232 (and $x303 $x71)))
 (let (($x169 (and $x232 $x116)))
 (let (($x474 (and $x169 $x143)))
 (let (($x336 (and $x474 $x152)))
 (let (($x5 (and $x336 $x307)))
 (let (($x501 (and $x5 $x79)))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x298 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x310 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (=> $x287 (= ?x310 ?x298)))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x664 (_ bv1 32))))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (= $x287 $x51))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x664 (_ bv0 32))))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x286 (_ bv0 32))))
 (= $x398 $x234))))))
 ))
 (let (($x80 (and $x430 $x426)))
 (let (($x142 (and $x80 $x19)))
 (let (($x68 (and $x142 $x517)))
 (let (($x212 (and $x68 $x501)))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (=> $x631 (= ?x582 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (= $x631 (bvuge ?x334 (_ bv1 32)))))))
 ))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x735 (_ bv0 32))))
 (= $x17 (= ?x334 (_ bv0 32)))))))
 ))
 (let (($x375 (and $x273 $x484)))
 (let (($x480 (and $x375 $x654)))
 (let (($x585 (and $x480 $x261)))
 (let (($x510 (and $x585 $x212)))
 (let (($x709 (=> $x510 $x708)))
 (not $x709)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x435)))
 (let ((?x698 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x691))))
 (let ((?x706 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv2 32))) ?x698)))
 (let ((?x705 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv3 32))) ?x706)))
 (let ((?x310 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (=> $x287 (= ?x310 ?x705)))))))))))
 ))
 (let (($x441 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x400 (_ bv1 32))))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (= $x287 $x237))))))
 ))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x618 (= false false)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x286 (_ bv0 32))))
 (=> $x398 $x618)))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x400 (_ bv0 32))))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x286 (_ bv0 32))))
 (= $x398 $x292))))))
 ))
 (let (($x357 (and $x162 $x426)))
 (let (($x530 (and $x357 $x441)))
 (let (($x702 (and $x530 $x693)))
 (let (($x704 (= $x702 true)))
 (let (($x708 (= $x704 true)))
 (let (($x446 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x339 (bvadd ?x435 input.dst.llvm-%m2)))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem ?x339))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x339 (_ bv2 32))) ?x478))))
 (let ((?x582 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (=> $x631 (= ?x582 ?x251))))))))))
 ))
 (let (($x734 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x400 (_ bv1 32))))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (= $x631 $x237))))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x618 (= false false)))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x735 (_ bv0 32))))
 (=> $x17 $x618)))))
 ))
 (let (($x532 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x400 (_ bv0 32))))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x735 (_ bv0 32))))
 (= $x17 $x292))))))
 ))
 (let (($x62 (and $x532 $x484)))
 (let (($x743 (and $x62 $x734)))
 (let (($x172 (and $x743 $x446)))
 (let (($x650 (= $x172 true)))
 (let (($x612 (= $x650 true)))
 (let (($x79 (= $x612 true)))
 (let (($x369 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x84 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x561 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x328 (and $x561 $x84)))
 (let (($x47 (and $x328 $x369)))
 (let (($x145 (= $x47 true)))
 (let (($x361 (= $x145 true)))
 (let (($x307 (= $x361 true)))
 (let (($x74 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x95 (bvadd ?x435 input.dst.llvm-%m1)))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x592))))
 (let ((?x310 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (=> $x287 (= ?x310 ?x267))))))))))
 ))
 (let (($x623 (and $x530 $x74)))
 (let (($x132 (= $x623 true)))
 (let (($x65 (= $x132 true)))
 (let (($x152 (= $x65 true)))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x95 (bvadd ?x435 input.dst.llvm-%m1)))
 (let ((?x639 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x639)))
 (let ((?x414 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x91)))
 (let ((?x298 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x664 (_ bv1 32))))
 (=> $x51 (= ?x298 ?x414)))))))))))
 ))
 (let (($x659 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x400 (_ bv1 32))))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x664 (_ bv1 32))))
 (= $x51 $x237))))))
 ))
 (let (($x284 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x618 (= false false)))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x664 (_ bv0 32))))
 (=> $x234 $x618)))))
 ))
 (let (($x279 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x400 (_ bv0 32))))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x664 (_ bv0 32))))
 (= $x234 $x292))))))
 ))
 (let (($x526 (and $x279 $x284)))
 (let (($x655 (and $x526 $x659)))
 (let (($x146 (and $x655 $x175)))
 (let (($x436 (= $x146 true)))
 (let (($x124 (= $x436 true)))
 (let (($x143 (= $x124 true)))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x95 (bvadd ?x435 input.dst.llvm-%m1)))
 (let ((?x639 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x95))))
 (let ((?x91 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv2 32))) ?x639)))
 (let ((?x414 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x95 (_ bv3 32))) ?x91)))
 (let ((?x310 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (=> $x287 (= ?x310 ?x414)))))))))))
 ))
 (let (($x136 (and $x530 $x491)))
 (let (($x290 (= $x136 true)))
 (let (($x320 (= $x290 true)))
 (let (($x116 (= $x320 true)))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x95 (bvadd ?x435 input.dst.llvm-%m1)))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x592))))
 (let ((?x298 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x664 (_ bv1 32))))
 (=> $x51 (= ?x298 ?x267))))))))))
 ))
 (let (($x148 (and $x655 $x411)))
 (let (($x59 (= $x148 true)))
 (let (($x110 (= $x59 true)))
 (let (($x71 (= $x110 true)))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x435 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x339 (bvadd ?x435 input.dst.llvm-%m2)))
 (let ((?x256 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x339))))
 (let ((?x399 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv2 32))) ?x256)))
 (let ((?x366 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x339 (_ bv3 32))) ?x399)))
 (let ((?x582 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (=> $x631 (= ?x582 ?x366)))))))))))
 ))
 (let (($x10 (and $x743 $x201)))
 (let (($x525 (= $x10 true)))
 (let (($x54 (= $x525 true)))
 (let (($x8 (= $x54 true)))
 (let ((?x133 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x243 (= (_ bv0 32) ?x133)))
 (let ((?x575 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x656 (= (_ bv0 32) ?x575)))
 (let ((?x455 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x455)))
 (let ((?x159 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x537 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x626 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x460 (and $x626 $x537)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x218 $x460)))
 (let (($x345 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x316 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x438 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x238 (and $x438 $x257)))
 (let (($x37 (not $x238)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x573 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x499 (and $x573 $x277)))
 (let (($x352 (and (not $x499) $x37)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x547 (and $x412 $x30)))
 (let (($x546 (not $x547)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x349 (and $x104 $x264)))
 (let (($x114 (and (not $x349) $x546)))
 (let (($x350 (and (and (and (and (and (and $x114 $x352) $x316) $x345) $x153) $x25) $x656)))
 (let (($x144 (and $x350 $x243)))
 (let (($x503 (= $x144 true)))
 (let (($x502 (= $x503 true)))
 (let (($x128 (= $x502 true)))
 (let ((?x312 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x477 (= (_ bv0 2) ?x312)))
 (let (($x475 (= $x477 true)))
 (let (($x295 (= $x475 true)))
 (let (($x193 (and $x295 $x128)))
 (let (($x303 (and $x193 $x8)))
 (let (($x232 (and $x303 $x71)))
 (let (($x169 (and $x232 $x116)))
 (let (($x474 (and $x169 $x143)))
 (let (($x336 (and $x474 $x152)))
 (let (($x5 (and $x336 $x307)))
 (let (($x501 (and $x5 $x79)))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x298 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x310 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (=> $x287 (= ?x310 ?x298)))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x664 (_ bv1 32))))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x286 (_ bv1 32))))
 (= $x287 $x51))))))
 ))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x664 (_ bv0 32))))
 (let ((?x286 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x398 (= ?x286 (_ bv0 32))))
 (= $x398 $x234))))))
 ))
 (let (($x80 (and $x430 $x426)))
 (let (($x142 (and $x80 $x19)))
 (let (($x68 (and $x142 $x517)))
 (let (($x212 (and $x68 $x501)))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (=> $x631 (= ?x582 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x654 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x735 (_ bv1 32))))
 (= $x631 (bvuge ?x334 (_ bv1 32)))))))
 ))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x334 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x735 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x17 (= ?x735 (_ bv0 32))))
 (= $x17 (= ?x334 (_ bv0 32)))))))
 ))
 (let (($x375 (and $x273 $x484)))
 (let (($x480 (and $x375 $x654)))
 (let (($x585 (and $x480 $x261)))
 (let (($x510 (and $x585 $x212)))
 (let (($x709 (=> $x510 $x708)))
 (not $x709)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0000002c)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbfee0080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7fbb0004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xafffff84)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xafffff84)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fbb0007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbfee0083)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7fbb0004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbfee0080)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000002c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002c) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000b0) #x04
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002c) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000b0) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x08010000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x15800620)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x959fa254)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x08010000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x959fa257)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x15800623)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x959fa254)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x15800620)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x672 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x739)))
 (let ((?x676 (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv1 32))) (select input.dst.llvm-mem ?x672))))
 (let ((?x685 (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv2 32))) ?x676))))
 (let ((?x60 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (=> $x525 (= ?x60 ?x685))))))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x635 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (= $x525 $x282))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x268 (= false false)))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x404 (_ bv0 32))))
 (=> $x734 $x268)))))
 ))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x635 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x404 (_ bv0 32))))
 (= $x734 $x624))))))
 ))
 (let (($x83 (and $x397 $x458)))
 (let (($x111 (and $x83 $x314)))
 (let (($x681 (and $x111 $x674)))
 (let (($x690 (= $x681 true)))
 (let (($x688 (= $x690 true)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x20 (bvadd ?x739 input.dst.llvm-%m2)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x584 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x183))))
 (let ((?x352 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (=> $x412 (= ?x352 ?x584))))))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x635 (_ bv1 32))))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (= $x412 $x282))))))
 ))
 (let (($x508 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x268 (= false false)))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x142 (_ bv0 32))))
 (=> $x310 $x268)))))
 ))
 (let (($x335 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x635 (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x142 (_ bv0 32))))
 (= $x310 $x624))))))
 ))
 (let (($x395 (and $x335 $x508)))
 (let (($x615 (and $x395 $x646)))
 (let (($x737 (and $x615 $x156)))
 (let (($x740 (= $x737 true)))
 (let (($x465 (= $x740 true)))
 (let (($x643 (= $x465 true)))
 (let (($x291 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x557 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x454 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x543 (and $x454 $x557)))
 (let (($x27 (and $x543 $x291)))
 (let (($x401 (= $x27 true)))
 (let (($x90 (= $x401 true)))
 (let (($x385 (= $x90 true)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x739 input.dst.llvm-%m1)))
 (let ((?x571 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x571))))
 (let ((?x95 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (=> $x54 (= ?x95 ?x270))))))))))
 ))
 (let (($x617 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x635 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (= $x54 $x282))))))
 ))
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x268 (= false false)))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x382 (_ bv0 32))))
 (=> $x533 $x268)))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x635 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x382 (_ bv0 32))))
 (= $x533 $x624))))))
 ))
 (let (($x190 (and $x388 $x451)))
 (let (($x548 (and $x190 $x617)))
 (let (($x714 (and $x548 $x716)))
 (let (($x725 (= $x714 true)))
 (let (($x720 (= $x725 true)))
 (let (($x355 (= $x720 true)))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x739 input.dst.llvm-%m1)))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x485))))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv2 32))) ?x63)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv3 32))) ?x364)))
 (let ((?x60 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (=> $x525 (= ?x60 ?x73)))))))))))
 ))
 (let (($x710 (and $x111 $x44)))
 (let (($x726 (= $x710 true)))
 (let (($x722 (= $x726 true)))
 (let (($x723 (= $x722 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x739 input.dst.llvm-%m1)))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x485))))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv2 32))) ?x63)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv3 32))) ?x364)))
 (let ((?x95 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (=> $x54 (= ?x95 ?x73)))))))))))
 ))
 (let (($x596 (and $x548 $x140)))
 (let (($x66 (= $x596 true)))
 (let (($x610 (= $x66 true)))
 (let (($x245 (= $x610 true)))
 (let (($x599 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x739 input.dst.llvm-%m1)))
 (let ((?x571 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x571))))
 (let ((?x60 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (=> $x525 (= ?x60 ?x270))))))))))
 ))
 (let (($x392 (and $x111 $x599)))
 (let (($x338 (= $x392 true)))
 (let (($x464 (= $x338 true)))
 (let (($x373 (= $x464 true)))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x20 (bvadd ?x739 input.dst.llvm-%m2)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x20))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x20 (_ bv2 32))) ?x265)))
 (let ((?x450 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x20 (_ bv3 32))) ?x337)))
 (let ((?x352 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (=> $x412 (= ?x352 ?x450)))))))))))
 ))
 (let (($x226 (and $x615 $x248)))
 (let (($x471 (= $x226 true)))
 (let (($x35 (= $x471 true)))
 (let (($x164 (= $x35 true)))
 (let ((?x77 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x377 (= (_ bv0 32) ?x77)))
 (let ((?x143 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x474 (= (_ bv0 32) ?x143)))
 (let ((?x436 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x436)))
 (let ((?x564 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x608 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x564)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x116 $x608)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x320 $x175)))
 (let (($x290 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x491 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x448 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x639 (and $x120 $x448)))
 (let (($x91 (not $x639)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x530 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x554 (and $x530 $x224)))
 (let (($x239 (and (not $x554) $x91)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x232 $x155)))
 (let (($x357 (not $x162)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x411 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x411 $x59)))
 (let (($x441 (and (not $x110) $x357)))
 (let (($x336 (and (and (and (and (and (and $x441 $x239) $x491) $x290) $x146) $x124) $x474)))
 (let (($x281 (and $x336 $x377)))
 (let (($x432 (= $x281 true)))
 (let (($x561 (= $x432 true)))
 (let (($x308 (= $x561 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x592 (= (_ bv0 2) ?x276)))
 (let (($x452 (= $x592 true)))
 (let (($x267 (= $x452 true)))
 (let (($x84 (and $x267 $x308)))
 (let (($x625 (and $x84 $x164)))
 (let (($x97 (and $x625 $x373)))
 (let (($x527 (and $x97 $x245)))
 (let (($x719 (and $x527 $x723)))
 (let (($x29 (and $x719 $x355)))
 (let (($x72 (and $x29 $x385)))
 (let (($x53 (and $x72 $x643)))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x95 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (=> $x54 (= ?x95 ?x60)))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (= $x54 $x525))))))
 ))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x404 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x382 (_ bv0 32))))
 (= $x533 $x734))))))
 ))
 (let (($x199 (and $x339 $x451)))
 (let (($x43 (and $x199 $x303)))
 (let (($x424 (and $x43 $x394)))
 (let (($x75 (and $x424 $x53)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (=> $x412 (= ?x352 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x51 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (= $x412 (bvuge ?x51 (_ bv1 32)))))))
 ))
 (let (($x16 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x51 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x142 (_ bv0 32))))
 (= $x310 (= ?x51 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x16 $x508)))
 (let (($x546 (and $x99 $x547)))
 (let (($x487 (and $x546 $x316)))
 (let (($x600 (and $x487 $x75)))
 (let (($x689 (=> $x600 $x688)))
 (not $x689)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x672 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x739)))
 (let ((?x676 (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv1 32))) (select input.dst.llvm-mem ?x672))))
 (let ((?x685 (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x672 (_ bv2 32))) ?x676))))
 (let ((?x60 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (=> $x525 (= ?x60 ?x685))))))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x635 (_ bv1 32))))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (= $x525 $x282))))))
 ))
 (let (($x458 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x268 (= false false)))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x404 (_ bv0 32))))
 (=> $x734 $x268)))))
 ))
 (let (($x397 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x635 (_ bv0 32))))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x404 (_ bv0 32))))
 (= $x734 $x624))))))
 ))
 (let (($x83 (and $x397 $x458)))
 (let (($x111 (and $x83 $x314)))
 (let (($x681 (and $x111 $x674)))
 (let (($x690 (= $x681 true)))
 (let (($x688 (= $x690 true)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x20 (bvadd ?x739 input.dst.llvm-%m2)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x584 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x183))))
 (let ((?x352 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (=> $x412 (= ?x352 ?x584))))))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x635 (_ bv1 32))))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (= $x412 $x282))))))
 ))
 (let (($x508 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x268 (= false false)))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x142 (_ bv0 32))))
 (=> $x310 $x268)))))
 ))
 (let (($x335 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x635 (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x142 (_ bv0 32))))
 (= $x310 $x624))))))
 ))
 (let (($x395 (and $x335 $x508)))
 (let (($x615 (and $x395 $x646)))
 (let (($x737 (and $x615 $x156)))
 (let (($x740 (= $x737 true)))
 (let (($x465 (= $x740 true)))
 (let (($x643 (= $x465 true)))
 (let (($x291 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x557 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x454 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x543 (and $x454 $x557)))
 (let (($x27 (and $x543 $x291)))
 (let (($x401 (= $x27 true)))
 (let (($x90 (= $x401 true)))
 (let (($x385 (= $x90 true)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x739 input.dst.llvm-%m1)))
 (let ((?x571 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x571))))
 (let ((?x95 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (=> $x54 (= ?x95 ?x270))))))))))
 ))
 (let (($x617 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x635 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (= $x54 $x282))))))
 ))
 (let (($x451 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x268 (= false false)))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x382 (_ bv0 32))))
 (=> $x533 $x268)))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x624 (= ?x635 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x382 (_ bv0 32))))
 (= $x533 $x624))))))
 ))
 (let (($x190 (and $x388 $x451)))
 (let (($x548 (and $x190 $x617)))
 (let (($x714 (and $x548 $x716)))
 (let (($x725 (= $x714 true)))
 (let (($x720 (= $x725 true)))
 (let (($x355 (= $x720 true)))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x739 input.dst.llvm-%m1)))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x485))))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv2 32))) ?x63)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv3 32))) ?x364)))
 (let ((?x60 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (=> $x525 (= ?x60 ?x73)))))))))))
 ))
 (let (($x710 (and $x111 $x44)))
 (let (($x726 (= $x710 true)))
 (let (($x722 (= $x726 true)))
 (let (($x723 (= $x722 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x739 input.dst.llvm-%m1)))
 (let ((?x63 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x485))))
 (let ((?x364 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv2 32))) ?x63)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x485 (_ bv3 32))) ?x364)))
 (let ((?x95 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (=> $x54 (= ?x95 ?x73)))))))))))
 ))
 (let (($x596 (and $x548 $x140)))
 (let (($x66 (= $x596 true)))
 (let (($x610 (= $x66 true)))
 (let (($x245 (= $x610 true)))
 (let (($x599 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x485 (bvadd ?x739 input.dst.llvm-%m1)))
 (let ((?x571 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x571))))
 (let ((?x60 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (=> $x525 (= ?x60 ?x270))))))))))
 ))
 (let (($x392 (and $x111 $x599)))
 (let (($x338 (= $x392 true)))
 (let (($x464 (= $x338 true)))
 (let (($x373 (= $x464 true)))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x739 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x20 (bvadd ?x739 input.dst.llvm-%m2)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x20))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x20 (_ bv2 32))) ?x265)))
 (let ((?x450 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x20 (_ bv3 32))) ?x337)))
 (let ((?x352 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (=> $x412 (= ?x352 ?x450)))))))))))
 ))
 (let (($x226 (and $x615 $x248)))
 (let (($x471 (= $x226 true)))
 (let (($x35 (= $x471 true)))
 (let (($x164 (= $x35 true)))
 (let ((?x77 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x377 (= (_ bv0 32) ?x77)))
 (let ((?x143 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x474 (= (_ bv0 32) ?x143)))
 (let ((?x436 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x436)))
 (let ((?x564 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x608 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x564)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x175 (and $x116 $x608)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x320 $x175)))
 (let (($x290 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x491 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x448 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x639 (and $x120 $x448)))
 (let (($x91 (not $x639)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x530 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x554 (and $x530 $x224)))
 (let (($x239 (and (not $x554) $x91)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x232 $x155)))
 (let (($x357 (not $x162)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x411 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x411 $x59)))
 (let (($x441 (and (not $x110) $x357)))
 (let (($x336 (and (and (and (and (and (and $x441 $x239) $x491) $x290) $x146) $x124) $x474)))
 (let (($x281 (and $x336 $x377)))
 (let (($x432 (= $x281 true)))
 (let (($x561 (= $x432 true)))
 (let (($x308 (= $x561 true)))
 (let ((?x276 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x592 (= (_ bv0 2) ?x276)))
 (let (($x452 (= $x592 true)))
 (let (($x267 (= $x452 true)))
 (let (($x84 (and $x267 $x308)))
 (let (($x625 (and $x84 $x164)))
 (let (($x97 (and $x625 $x373)))
 (let (($x527 (and $x97 $x245)))
 (let (($x719 (and $x527 $x723)))
 (let (($x29 (and $x719 $x355)))
 (let (($x72 (and $x29 $x385)))
 (let (($x53 (and $x72 $x643)))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x95 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (=> $x54 (= ?x95 ?x60)))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x525 (bvuge ?x404 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x382 (_ bv1 32))))
 (= $x54 $x525))))))
 ))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x404 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x734 (= ?x404 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x533 (= ?x382 (_ bv0 32))))
 (= $x533 $x734))))))
 ))
 (let (($x199 (and $x339 $x451)))
 (let (($x43 (and $x199 $x303)))
 (let (($x424 (and $x43 $x394)))
 (let (($x75 (and $x424 $x53)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x352 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (=> $x412 (= ?x352 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x51 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x142 (_ bv1 32))))
 (= $x412 (bvuge ?x51 (_ bv1 32)))))))
 ))
 (let (($x16 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x51 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x142 (_ bv0 32))))
 (= $x310 (= ?x51 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x16 $x508)))
 (let (($x546 (and $x99 $x547)))
 (let (($x487 (and $x546 $x316)))
 (let (($x600 (and $x487 $x75)))
 (let (($x689 (=> $x600 $x688)))
 (not $x689)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x7c400004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5ff73597)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf6fa4b73)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5ff73594)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf6fa4b70)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7c400005) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc55086d4)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x88420500)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x24500373)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc55086d7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x24500370)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc55086d4)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x453 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x294)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv1 32))) (select input.dst.llvm-mem ?x453))))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv2 32))) ?x139))))
 (let ((?x239 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (=> $x232 (= ?x239 ?x354))))))))))
 ))
 (let (($x738 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x45 (_ bv1 32))))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (= $x232 $x727))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x574 (= false false)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x43 (_ bv0 32))))
 (=> $x95 $x574)))))
 ))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x45 (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x43 (_ bv0 32))))
 (= $x95 $x332))))))
 ))
 (let (($x221 (and $x538 $x746)))
 (let (($x736 (and $x221 $x738)))
 (let (($x326 (and $x736 $x416)))
 (let (($x671 (= $x326 true)))
 (let (($x670 (= $x671 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x167 (bvadd ?x294 input.dst.llvm-%m2)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x652 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x163))))
 (let ((?x239 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (=> $x232 (= ?x239 ?x652))))))))))
 ))
 (let (($x378 (and $x736 $x157)))
 (let (($x403 (= $x378 true)))
 (let (($x64 (= $x403 true)))
 (let (($x492 (= $x64 true)))
 (let (($x235 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x541 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x230 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x371 (and $x230 $x541)))
 (let (($x246 (and $x371 $x235)))
 (let (($x138 (= $x246 true)))
 (let (($x661 (= $x138 true)))
 (let (($x588 (= $x661 true)))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x619 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x619))))
 (let ((?x485 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (=> $x35 (= ?x485 ?x315))))))))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x45 (_ bv1 32))))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (= $x35 $x727))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x574 (= false false)))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x145 (_ bv0 32))))
 (=> $x5 $x574)))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x45 (_ bv0 32))))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x145 (_ bv0 32))))
 (= $x5 $x332))))))
 ))
 (let (($x256 (and $x62 $x251)))
 (let (($x742 (and $x256 $x655)))
 (let (($x697 (and $x742 $x694)))
 (let (($x706 (= $x697 true)))
 (let (($x699 (= $x706 true)))
 (let (($x94 (= $x699 true)))
 (let (($x510 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x349)))
 (let ((?x438 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x277)))
 (let ((?x89 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (bvuge ?x606 (_ bv1 32))))
 (=> $x471 (= ?x89 ?x438)))))))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x45 (_ bv1 32))))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (bvuge ?x606 (_ bv1 32))))
 (= $x471 $x727))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x574 (= false false)))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x606 (_ bv0 32))))
 (=> $x646 $x574)))))
 ))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x45 (_ bv0 32))))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x606 (_ bv0 32))))
 (= $x646 $x332))))))
 ))
 (let (($x7 (and $x289 $x222)))
 (let (($x552 (and $x7 $x135)))
 (let (($x691 (and $x552 $x510)))
 (let (($x707 (= $x691 true)))
 (let (($x703 (= $x707 true)))
 (let (($x705 (= $x703 true)))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x349)))
 (let ((?x438 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x277)))
 (let ((?x485 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (=> $x35 (= ?x485 ?x438)))))))))))
 ))
 (let (($x630 (and $x742 $x650)))
 (let (($x478 (= $x630 true)))
 (let (($x204 (= $x478 true)))
 (let (($x353 (= $x204 true)))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x619 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x619))))
 (let ((?x89 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (bvuge ?x606 (_ bv1 32))))
 (=> $x471 (= ?x89 ?x315))))))))))
 ))
 (let (($x177 (and $x552 $x512)))
 (let (($x609 (= $x177 true)))
 (let (($x645 (= $x609 true)))
 (let (($x531 (= $x645 true)))
 (let (($x507 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x167 (bvadd ?x294 input.dst.llvm-%m2)))
 (let ((?x745 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x167))))
 (let ((?x311 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv2 32))) ?x745)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv3 32))) ?x311)))
 (let ((?x239 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (=> $x232 (= ?x239 ?x271)))))))))))
 ))
 (let (($x194 (and $x736 $x507)))
 (let (($x202 (= $x194 true)))
 (let (($x578 (= $x202 true)))
 (let (($x173 (= $x578 true)))
 (let ((?x717 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x713 (= (_ bv0 32) ?x717)))
 (let ((?x723 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x719 (= (_ bv0 32) ?x723)))
 (let ((?x726 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x722 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x726)))
 (let ((?x207 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x663 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x207)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x245 $x663)))
 (let (($x610 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x710 (and $x610 $x44)))
 (let (($x66 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x622 $x15)))
 (let (($x364 (not $x63)))
 (let (($x560 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x548 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x548 $x560)))
 (let (($x544 (and (not $x174) $x364)))
 (let (($x586 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x388 (and $x97 $x586)))
 (let (($x190 (not $x388)))
 (let (($x338 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (and $x599 $x338)))
 (let (($x617 (and (not $x464) $x190)))
 (let (($x29 (and (and (and (and (and (and $x617 $x544) $x140) $x66) $x710) $x722) $x719)))
 (let (($x473 (and $x29 $x713)))
 (let (($x597 (= $x473 true)))
 (let (($x454 (= $x597 true)))
 (let (($x34 (= $x454 true)))
 (let ((?x258 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x571 (= (_ bv0 2) ?x258)))
 (let (($x534 (= $x571 true)))
 (let (($x270 (= $x534 true)))
 (let (($x557 (and $x270 $x34)))
 (let (($x285 (and $x557 $x173)))
 (let (($x741 (and $x285 $x531)))
 (let (($x446 (and $x741 $x353)))
 (let (($x696 (and $x446 $x705)))
 (let (($x82 (and $x696 $x94)))
 (let (($x569 (and $x82 $x588)))
 (let (($x417 (and $x569 $x492)))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x89 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x485 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (=> $x35 (= ?x485 ?x89)))))))
 ))
 (let (($x625 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (bvuge ?x606 (_ bv1 32))))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (= $x35 $x471))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x606 (_ bv0 32))))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x145 (_ bv0 32))))
 (= $x5 $x646))))))
 ))
 (let (($x523 (and $x20 $x251)))
 (let (($x405 (and $x523 $x625)))
 (let (($x379 (and $x405 $x616)))
 (let (($x567 (and $x379 $x417)))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (=> $x232 (= ?x239 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x525 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (= $x232 (bvuge ?x525 (_ bv1 32)))))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x525 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x43 (_ bv0 32))))
 (= $x95 (= ?x525 (_ bv0 32)))))))
 ))
 (let (($x748 (and $x633 $x746)))
 (let (($x357 (and $x748 $x162)))
 (let (($x623 (and $x357 $x491)))
 (let (($x359 (and $x623 $x567)))
 (let (($x669 (=> $x359 $x670)))
 (not $x669)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x453 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x294)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv1 32))) (select input.dst.llvm-mem ?x453))))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x453 (_ bv2 32))) ?x139))))
 (let ((?x239 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (=> $x232 (= ?x239 ?x354))))))))))
 ))
 (let (($x738 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x45 (_ bv1 32))))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (= $x232 $x727))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x574 (= false false)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x43 (_ bv0 32))))
 (=> $x95 $x574)))))
 ))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x45 (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x43 (_ bv0 32))))
 (= $x95 $x332))))))
 ))
 (let (($x221 (and $x538 $x746)))
 (let (($x736 (and $x221 $x738)))
 (let (($x326 (and $x736 $x416)))
 (let (($x671 (= $x326 true)))
 (let (($x670 (= $x671 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x167 (bvadd ?x294 input.dst.llvm-%m2)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x652 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x163))))
 (let ((?x239 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (=> $x232 (= ?x239 ?x652))))))))))
 ))
 (let (($x378 (and $x736 $x157)))
 (let (($x403 (= $x378 true)))
 (let (($x64 (= $x403 true)))
 (let (($x492 (= $x64 true)))
 (let (($x235 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x541 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x230 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x371 (and $x230 $x541)))
 (let (($x246 (and $x371 $x235)))
 (let (($x138 (= $x246 true)))
 (let (($x661 (= $x138 true)))
 (let (($x588 (= $x661 true)))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x619 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x619))))
 (let ((?x485 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (=> $x35 (= ?x485 ?x315))))))))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x45 (_ bv1 32))))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (= $x35 $x727))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x574 (= false false)))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x145 (_ bv0 32))))
 (=> $x5 $x574)))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x45 (_ bv0 32))))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x145 (_ bv0 32))))
 (= $x5 $x332))))))
 ))
 (let (($x256 (and $x62 $x251)))
 (let (($x742 (and $x256 $x655)))
 (let (($x697 (and $x742 $x694)))
 (let (($x706 (= $x697 true)))
 (let (($x699 (= $x706 true)))
 (let (($x94 (= $x699 true)))
 (let (($x510 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x349)))
 (let ((?x438 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x277)))
 (let ((?x89 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (bvuge ?x606 (_ bv1 32))))
 (=> $x471 (= ?x89 ?x438)))))))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x727 (bvuge ?x45 (_ bv1 32))))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (bvuge ?x606 (_ bv1 32))))
 (= $x471 $x727))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x574 (= false false)))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x606 (_ bv0 32))))
 (=> $x646 $x574)))))
 ))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x332 (= ?x45 (_ bv0 32))))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x606 (_ bv0 32))))
 (= $x646 $x332))))))
 ))
 (let (($x7 (and $x289 $x222)))
 (let (($x552 (and $x7 $x135)))
 (let (($x691 (and $x552 $x510)))
 (let (($x707 (= $x691 true)))
 (let (($x703 (= $x707 true)))
 (let (($x705 (= $x703 true)))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x349 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x349)))
 (let ((?x438 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x277)))
 (let ((?x485 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (=> $x35 (= ?x485 ?x438)))))))))))
 ))
 (let (($x630 (and $x742 $x650)))
 (let (($x478 (= $x630 true)))
 (let (($x204 (= $x478 true)))
 (let (($x353 (= $x204 true)))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x619 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x619))))
 (let ((?x89 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (bvuge ?x606 (_ bv1 32))))
 (=> $x471 (= ?x89 ?x315))))))))))
 ))
 (let (($x177 (and $x552 $x512)))
 (let (($x609 (= $x177 true)))
 (let (($x645 (= $x609 true)))
 (let (($x531 (= $x645 true)))
 (let (($x507 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x294 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x167 (bvadd ?x294 input.dst.llvm-%m2)))
 (let ((?x745 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x167))))
 (let ((?x311 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv2 32))) ?x745)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x167 (_ bv3 32))) ?x311)))
 (let ((?x239 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (=> $x232 (= ?x239 ?x271)))))))))))
 ))
 (let (($x194 (and $x736 $x507)))
 (let (($x202 (= $x194 true)))
 (let (($x578 (= $x202 true)))
 (let (($x173 (= $x578 true)))
 (let ((?x717 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x713 (= (_ bv0 32) ?x717)))
 (let ((?x723 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x719 (= (_ bv0 32) ?x723)))
 (let ((?x726 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x722 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x726)))
 (let ((?x207 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x663 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x207)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x245 $x663)))
 (let (($x610 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x710 (and $x610 $x44)))
 (let (($x66 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x622 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x622 $x15)))
 (let (($x364 (not $x63)))
 (let (($x560 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x548 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x548 $x560)))
 (let (($x544 (and (not $x174) $x364)))
 (let (($x586 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x388 (and $x97 $x586)))
 (let (($x190 (not $x388)))
 (let (($x338 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x599 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x464 (and $x599 $x338)))
 (let (($x617 (and (not $x464) $x190)))
 (let (($x29 (and (and (and (and (and (and $x617 $x544) $x140) $x66) $x710) $x722) $x719)))
 (let (($x473 (and $x29 $x713)))
 (let (($x597 (= $x473 true)))
 (let (($x454 (= $x597 true)))
 (let (($x34 (= $x454 true)))
 (let ((?x258 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x571 (= (_ bv0 2) ?x258)))
 (let (($x534 (= $x571 true)))
 (let (($x270 (= $x534 true)))
 (let (($x557 (and $x270 $x34)))
 (let (($x285 (and $x557 $x173)))
 (let (($x741 (and $x285 $x531)))
 (let (($x446 (and $x741 $x353)))
 (let (($x696 (and $x446 $x705)))
 (let (($x82 (and $x696 $x94)))
 (let (($x569 (and $x82 $x588)))
 (let (($x417 (and $x569 $x492)))
 (let (($x616 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x89 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x485 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (=> $x35 (= ?x485 ?x89)))))))
 ))
 (let (($x625 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x471 (bvuge ?x606 (_ bv1 32))))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x145 (_ bv1 32))))
 (= $x35 $x471))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x606 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x606 (_ bv0 32))))
 (let ((?x145 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x145 (_ bv0 32))))
 (= $x5 $x646))))))
 ))
 (let (($x523 (and $x20 $x251)))
 (let (($x405 (and $x523 $x625)))
 (let (($x379 (and $x405 $x616)))
 (let (($x567 (and $x379 $x417)))
 (let (($x491 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (=> $x232 (= ?x239 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x525 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x43 (_ bv1 32))))
 (= $x232 (bvuge ?x525 (_ bv1 32)))))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x525 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x43 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x43 (_ bv0 32))))
 (= $x95 (= ?x525 (_ bv0 32)))))))
 ))
 (let (($x748 (and $x633 $x746)))
 (let (($x357 (and $x748 $x162)))
 (let (($x623 (and $x357 $x491)))
 (let (($x359 (and $x623 $x567)))
 (let (($x669 (=> $x359 $x670)))
 (not $x669)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00082080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00e44024)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x18b04060)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00082080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x18b04063)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00e44027)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x18b04060)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00e44024)
  (define-fun input.spec-%var-m2-1.0.1!26 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!26 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x10
      #x00))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000002) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00100000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!43))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x08000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x996684b4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!44))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfa031258)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x000000cc)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0000000e)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x000000cc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfa03125b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x996684b7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfa031258)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x996684b4)
  (define-fun k!44 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000038) #x04
      #x00))
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x08000000 x!0) #x08000000 #x00000065)
              #x00000064)
         #x00000038))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!47 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000038) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!47 (k!46 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000000
    (ite (= x!0 #x00000038) #x00000000
      (let ((a!1 (concat (k!44 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x00200000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!43 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!49 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000038) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!49 (k!46 x!0)))
  (define-fun k!43 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08000038) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000000
    (ite (= x!0 #x00000038) #x00000000
      (let ((a!1 (concat (k!43 (bvadd #x00200003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x00200000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!48 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000e) true
      false))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x08000000 x!0) #x08000000 #x00000065)
              #x00000064)
         #x0000000e))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!48 (k!45 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000000e) true
    (ite (= x!0 #x08000000) false
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000004
      (let ((a!1 (concat (k!43 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!43 (bvadd #x08000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!44 (bvadd #x08000003 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000002 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000001 (bvmul #x00000004 x!0)))
                         (k!44 (bvadd #x08000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000000e) #x00000004
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x648 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x304 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x208)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem ?x304))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv2 32))) ?x130))))
 (let ((?x147 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (=> $x578 (= ?x147 ?x14))))))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x260 (_ bv1 32))))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (= $x578 $x708))))))
 ))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x186 (= false false)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x401 (_ bv0 32))))
 (=> $x72 $x186)))))
 ))
 (let (($x395 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x260 (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x401 (_ bv0 32))))
 (= $x72 $x469))))))
 ))
 (let (($x265 (and $x395 $x584)))
 (let (($x297 (and $x265 $x111)))
 (let (($x324 (and $x297 $x648)))
 (let (($x217 (= $x324 true)))
 (let (($x611 (= $x217 true)))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x153 (bvadd ?x208 input.dst.llvm-%m2)))
 (let ((?x539 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x539))))
 (let ((?x544 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (=> $x97 (= ?x544 ?x144))))))))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x260 (_ bv1 32))))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (= $x97 $x708))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x186 (= false false)))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x405 (_ bv0 32))))
 (=> $x485 $x186)))))
 ))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x260 (_ bv0 32))))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x405 (_ bv0 32))))
 (= $x485 $x469))))))
 ))
 (let (($x168 (and $x658 $x191)))
 (let (($x358 (and $x168 $x9)))
 (let (($x302 (and $x358 $x128)))
 (let (($x293 (= $x302 true)))
 (let (($x292 (= $x293 true)))
 (let (($x399 (= $x292 true)))
 (let (($x475 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x593 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x192 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x517 (and $x192 $x593)))
 (let (($x295 (and $x517 $x475)))
 (let (($x636 (= $x295 true)))
 (let (($x107 (= $x636 true)))
 (let (($x573 (= $x107 true)))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x55 (bvadd ?x208 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x76))))
 (let ((?x147 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (=> $x578 (= ?x147 ?x489))))))))))
 ))
 (let (($x680 (and $x297 $x682)))
 (let (($x687 (= $x680 true)))
 (let (($x677 (= $x687 true)))
 (let (($x234 (= $x677 true)))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x55 (bvadd ?x208 input.dst.llvm-%m1)))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x55))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv2 32))) ?x110)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv3 32))) ?x224)))
 (let ((?x537 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x728 (_ bv1 32))))
 (=> $x202 (= ?x537 ?x120)))))))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x260 (_ bv1 32))))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x728 (_ bv1 32))))
 (= $x202 $x708))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x186 (= false false)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x728 (_ bv0 32))))
 (=> $x738 $x186)))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x260 (_ bv0 32))))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x728 (_ bv0 32))))
 (= $x738 $x469))))))
 ))
 (let (($x166 (and $x526 $x213)))
 (let (($x100 (and $x166 $x644)))
 (let (($x672 (and $x100 $x600)))
 (let (($x686 (= $x672 true)))
 (let (($x684 (= $x686 true)))
 (let (($x685 (= $x684 true)))
 (let (($x740 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x55 (bvadd ?x208 input.dst.llvm-%m1)))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x55))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv2 32))) ?x110)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv3 32))) ?x224)))
 (let ((?x147 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (=> $x578 (= ?x147 ?x120)))))))))))
 ))
 (let (($x731 (and $x297 $x740)))
 (let (($x183 (= $x731 true)))
 (let (($x509 (= $x183 true)))
 (let (($x244 (= $x509 true)))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x55 (bvadd ?x208 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x76))))
 (let ((?x537 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x728 (_ bv1 32))))
 (=> $x202 (= ?x537 ?x489))))))))))
 ))
 (let (($x23 (and $x100 $x580)))
 (let (($x632 (= $x23 true)))
 (let (($x118 (= $x632 true)))
 (let (($x131 (= $x118 true)))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x153 (bvadd ?x208 input.dst.llvm-%m2)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x153))))
 (let ((?x505 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x153 (_ bv2 32))) ?x263)))
 (let ((?x651 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x153 (_ bv3 32))) ?x505)))
 (let ((?x544 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (=> $x97 (= ?x544 ?x651)))))))))))
 ))
 (let (($x241 (and $x358 $x105)))
 (let (($x170 (= $x241 true)))
 (let (($x472 (= $x170 true)))
 (let (($x137 (= $x472 true)))
 (let ((?x695 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x701 (= (_ bv0 32) ?x695)))
 (let ((?x705 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x696 (= (_ bv0 32) ?x705)))
 (let ((?x707 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x703 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x707)))
 (let ((?x212 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x501 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x353 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x510 (and $x353 $x501)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x691 (and $x204 $x510)))
 (let (($x478 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x650 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x536 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x349 (and $x536 $x104)))
 (let (($x277 (not $x349)))
 (let (($x499 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x742 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x594 (and $x742 $x499)))
 (let (($x257 (and (not $x594) $x277)))
 (let (($x532 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x741 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x741 $x532)))
 (let (($x256 (not $x62)))
 (let (($x609 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x512 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x645 (and $x512 $x609)))
 (let (($x655 (and (not $x645) $x256)))
 (let (($x82 (and (and (and (and (and (and $x655 $x257) $x650) $x478) $x691) $x703) $x696)))
 (let (($x443 (and $x82 $x701)))
 (let (($x516 (= $x443 true)))
 (let (($x230 (= $x516 true)))
 (let (($x513 (= $x230 true)))
 (let ((?x318 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x619 (= (_ bv0 2) ?x318)))
 (let (($x524 (= $x619 true)))
 (let (($x315 (= $x524 true)))
 (let (($x541 (and $x315 $x513)))
 (let (($x483 (and $x541 $x137)))
 (let (($x581 (and $x483 $x131)))
 (let (($x156 (and $x581 $x244)))
 (let (($x679 (and $x156 $x685)))
 (let (($x49 (and $x679 $x234)))
 (let (($x429 (and $x49 $x573)))
 (let (($x601 (and $x429 $x399)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (=> $x578 (= ?x147 ?x537)))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x728 (_ bv1 32))))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (= $x578 $x202))))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x728 (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x401 (_ bv0 32))))
 (= $x72 $x738))))))
 ))
 (let (($x333 (and $x167 $x584)))
 (let (($x216 (and $x333 $x285)))
 (let (($x563 (and $x216 $x98)))
 (let (($x366 (and $x563 $x601)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x544 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (=> $x97 (= ?x544 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x471 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (= $x97 (bvuge ?x471 (_ bv1 32)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x471 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x405 (_ bv0 32))))
 (= $x485 (= ?x471 (_ bv0 32)))))))
 ))
 (let (($x407 (and $x496 $x191)))
 (let (($x190 (and $x407 $x388)))
 (let (($x714 (and $x190 $x140)))
 (let (($x201 (and $x714 $x366)))
 (let (($x598 (=> $x201 $x611)))
 (not $x598)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x648 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x304 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x208)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem ?x304))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x304 (_ bv2 32))) ?x130))))
 (let ((?x147 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (=> $x578 (= ?x147 ?x14))))))))))
 ))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x260 (_ bv1 32))))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (= $x578 $x708))))))
 ))
 (let (($x584 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x186 (= false false)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x401 (_ bv0 32))))
 (=> $x72 $x186)))))
 ))
 (let (($x395 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x260 (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x401 (_ bv0 32))))
 (= $x72 $x469))))))
 ))
 (let (($x265 (and $x395 $x584)))
 (let (($x297 (and $x265 $x111)))
 (let (($x324 (and $x297 $x648)))
 (let (($x217 (= $x324 true)))
 (let (($x611 (= $x217 true)))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x153 (bvadd ?x208 input.dst.llvm-%m2)))
 (let ((?x539 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x539))))
 (let ((?x544 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (=> $x97 (= ?x544 ?x144))))))))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x260 (_ bv1 32))))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (= $x97 $x708))))))
 ))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x186 (= false false)))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x405 (_ bv0 32))))
 (=> $x485 $x186)))))
 ))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x260 (_ bv0 32))))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x405 (_ bv0 32))))
 (= $x485 $x469))))))
 ))
 (let (($x168 (and $x658 $x191)))
 (let (($x358 (and $x168 $x9)))
 (let (($x302 (and $x358 $x128)))
 (let (($x293 (= $x302 true)))
 (let (($x292 (= $x293 true)))
 (let (($x399 (= $x292 true)))
 (let (($x475 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x593 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x192 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x517 (and $x192 $x593)))
 (let (($x295 (and $x517 $x475)))
 (let (($x636 (= $x295 true)))
 (let (($x107 (= $x636 true)))
 (let (($x573 (= $x107 true)))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x55 (bvadd ?x208 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x76))))
 (let ((?x147 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (=> $x578 (= ?x147 ?x489))))))))))
 ))
 (let (($x680 (and $x297 $x682)))
 (let (($x687 (= $x680 true)))
 (let (($x677 (= $x687 true)))
 (let (($x234 (= $x677 true)))
 (let (($x600 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x55 (bvadd ?x208 input.dst.llvm-%m1)))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x55))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv2 32))) ?x110)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv3 32))) ?x224)))
 (let ((?x537 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x728 (_ bv1 32))))
 (=> $x202 (= ?x537 ?x120)))))))))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x260 (_ bv1 32))))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x728 (_ bv1 32))))
 (= $x202 $x708))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x186 (= false false)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x728 (_ bv0 32))))
 (=> $x738 $x186)))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (= ?x260 (_ bv0 32))))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x728 (_ bv0 32))))
 (= $x738 $x469))))))
 ))
 (let (($x166 (and $x526 $x213)))
 (let (($x100 (and $x166 $x644)))
 (let (($x672 (and $x100 $x600)))
 (let (($x686 (= $x672 true)))
 (let (($x684 (= $x686 true)))
 (let (($x685 (= $x684 true)))
 (let (($x740 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x55 (bvadd ?x208 input.dst.llvm-%m1)))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x55))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv2 32))) ?x110)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x55 (_ bv3 32))) ?x224)))
 (let ((?x147 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (=> $x578 (= ?x147 ?x120)))))))))))
 ))
 (let (($x731 (and $x297 $x740)))
 (let (($x183 (= $x731 true)))
 (let (($x509 (= $x183 true)))
 (let (($x244 (= $x509 true)))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x55 (bvadd ?x208 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x489 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x76))))
 (let ((?x537 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x728 (_ bv1 32))))
 (=> $x202 (= ?x537 ?x489))))))))))
 ))
 (let (($x23 (and $x100 $x580)))
 (let (($x632 (= $x23 true)))
 (let (($x118 (= $x632 true)))
 (let (($x131 (= $x118 true)))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x208 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x153 (bvadd ?x208 input.dst.llvm-%m2)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x153))))
 (let ((?x505 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x153 (_ bv2 32))) ?x263)))
 (let ((?x651 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x153 (_ bv3 32))) ?x505)))
 (let ((?x544 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (=> $x97 (= ?x544 ?x651)))))))))))
 ))
 (let (($x241 (and $x358 $x105)))
 (let (($x170 (= $x241 true)))
 (let (($x472 (= $x170 true)))
 (let (($x137 (= $x472 true)))
 (let ((?x695 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x701 (= (_ bv0 32) ?x695)))
 (let ((?x705 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x696 (= (_ bv0 32) ?x705)))
 (let ((?x707 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x703 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x707)))
 (let ((?x212 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x501 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x353 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x510 (and $x353 $x501)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x691 (and $x204 $x510)))
 (let (($x478 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x650 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x536 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x349 (and $x536 $x104)))
 (let (($x277 (not $x349)))
 (let (($x499 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x742 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x594 (and $x742 $x499)))
 (let (($x257 (and (not $x594) $x277)))
 (let (($x532 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x741 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x741 $x532)))
 (let (($x256 (not $x62)))
 (let (($x609 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x512 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x645 (and $x512 $x609)))
 (let (($x655 (and (not $x645) $x256)))
 (let (($x82 (and (and (and (and (and (and $x655 $x257) $x650) $x478) $x691) $x703) $x696)))
 (let (($x443 (and $x82 $x701)))
 (let (($x516 (= $x443 true)))
 (let (($x230 (= $x516 true)))
 (let (($x513 (= $x230 true)))
 (let ((?x318 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x619 (= (_ bv0 2) ?x318)))
 (let (($x524 (= $x619 true)))
 (let (($x315 (= $x524 true)))
 (let (($x541 (and $x315 $x513)))
 (let (($x483 (and $x541 $x137)))
 (let (($x581 (and $x483 $x131)))
 (let (($x156 (and $x581 $x244)))
 (let (($x679 (and $x156 $x685)))
 (let (($x49 (and $x679 $x234)))
 (let (($x429 (and $x49 $x573)))
 (let (($x601 (and $x429 $x399)))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x147 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (=> $x578 (= ?x147 ?x537)))))))
 ))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x728 (_ bv1 32))))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x578 (bvuge ?x401 (_ bv1 32))))
 (= $x578 $x202))))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x728 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x728 (_ bv0 32))))
 (let ((?x401 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x72 (= ?x401 (_ bv0 32))))
 (= $x72 $x738))))))
 ))
 (let (($x333 (and $x167 $x584)))
 (let (($x216 (and $x333 $x285)))
 (let (($x563 (and $x216 $x98)))
 (let (($x366 (and $x563 $x601)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x544 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (=> $x97 (= ?x544 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x471 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x405 (_ bv1 32))))
 (= $x97 (bvuge ?x471 (_ bv1 32)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x471 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x405 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x485 (= ?x405 (_ bv0 32))))
 (= $x485 (= ?x471 (_ bv0 32)))))))
 ))
 (let (($x407 (and $x496 $x191)))
 (let (($x190 (and $x407 $x388)))
 (let (($x714 (and $x190 $x140)))
 (let (($x201 (and $x714 $x366)))
 (let (($x598 (=> $x201 $x611)))
 (not $x598)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xbfee0080)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7fbb0004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xafffff84)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0000002c)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xafffff84)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fbb0007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xbfee0083)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7fbb0004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xbfee0080)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000b0) #x04
      #x00))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x0000002c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002c) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0000002c) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000b0) #x04
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000002c) #x00000004
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x08010000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x15800620)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x959fa254)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x08010000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x959fa257)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x15800623)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x959fa254)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x15800620)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000001) #x01
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000100
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x108 input.dst.llvm-%m2)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x504))))
 (let ((?x608 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (=> $x170 (= ?x608 ?x50))))))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x479 (_ bv1 32))))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (= $x170 $x114))))))
 ))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x529 (= false false)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x709 (_ bv0 32))))
 (=> $x9 $x529)))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x479 (_ bv0 32))))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x709 (_ bv0 32))))
 (= $x9 $x661))))))
 ))
 (let (($x198 (and $x484 $x273)))
 (let (($x298 (and $x198 $x99)))
 (let (($x339 (and $x298 $x37)))
 (let (($x319 (= $x339 true)))
 (let (($x382 (= $x319 true)))
 (let ((?x365 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x747 (= (_ bv0 2) ?x365)))
 (let (($x624 (= $x747 true)))
 (let (($x337 (= $x624 true)))
 (let (($x553 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x108 input.dst.llvm-%m2)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x504))))
 (let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (=> $x741 (= ?x257 ?x50))))))))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x479 (_ bv1 32))))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (= $x741 $x114))))))
 ))
 (let (($x613 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x529 (= false false)))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x216 (_ bv0 32))))
 (=> $x147 $x529)))))
 ))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x479 (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x216 (_ bv0 32))))
 (= $x147 $x661))))))
 ))
 (let (($x378 (and $x38 $x613)))
 (let (($x692 (and $x378 $x674)))
 (let (($x414 (and $x692 $x553)))
 (let (($x432 (= $x414 true)))
 (let (($x281 (= $x432 true)))
 (let (($x561 (= $x281 true)))
 (let (($x562 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x734 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x668 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x237 (and $x668 $x734)))
 (let (($x404 (and $x237 $x562)))
 (let (($x307 (= $x404 true)))
 (let (($x394 (= $x307 true)))
 (let (($x592 (= $x394 true)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x424 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x654 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem ?x424))))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv2 32))) ?x654))))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (=> $x472 (= ?x55 ?x480))))))))))
 ))
 (let (($x515 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x479 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (= $x472 $x114))))))
 ))
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x529 (= false false)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (= ?x138 (_ bv0 32))))
 (=> $x569 $x529)))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x479 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (= ?x138 (_ bv0 32))))
 (= $x569 $x661))))))
 ))
 (let (($x172 (and $x557 $x652)))
 (let (($x507 (and $x172 $x515)))
 (let (($x551 (and $x507 $x354)))
 (let (($x92 (= $x551 true)))
 (let (($x139 (= $x92 true)))
 (let (($x662 (= $x139 true)))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x424 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x495 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x424))))
 (let ((?x591 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv2 32))) ?x495)))
 (let ((?x599 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv3 32))) ?x591)))
 (let ((?x608 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (=> $x170 (= ?x608 ?x599)))))))))))
 ))
 (let (($x157 (and $x298 $x305)))
 (let (($x64 (= $x157 true)))
 (let (($x492 (= $x64 true)))
 (let (($x567 (= $x492 true)))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x424 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x495 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x424))))
 (let ((?x591 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv2 32))) ?x495)))
 (let ((?x599 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv3 32))) ?x591)))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (=> $x472 (= ?x55 ?x599)))))))))))
 ))
 (let (($x560 (and $x507 $x41)))
 (let (($x174 (= $x560 true)))
 (let (($x622 (= $x174 true)))
 (let (($x15 (= $x622 true)))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x424 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x654 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem ?x424))))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv2 32))) ?x654))))
 (let ((?x608 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (=> $x170 (= ?x608 ?x480))))))))))
 ))
 (let (($x718 (and $x298 $x387)))
 (let (($x729 (= $x718 true)))
 (let (($x556 (= $x729 true)))
 (let (($x342 (= $x556 true)))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x108 input.dst.llvm-%m2)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x343))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv2 32))) ?x175)))
 (let ((?x391 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv3 32))) ?x124)))
 (let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (=> $x741 (= ?x257 ?x391)))))))))))
 ))
 (let (($x476 (and $x692 $x351)))
 (let (($x603 (= $x476 true)))
 (let (($x21 (= $x603 true)))
 (let (($x535 (= $x21 true)))
 (let ((?x600 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x672 (= (_ bv0 32) ?x600)))
 (let ((?x75 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x53 (= (_ bv0 32) ?x75)))
 (let ((?x244 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x244)))
 (let ((?x740 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x731 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x740)))
 (let (($x448 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x448 $x731)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x509 (and $x120 $x183)))
 (let (($x224 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x411 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x265 $x314)))
 (let (($x297 (not $x111)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x581 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x395 (and $x581 $x335)))
 (let (($x18 (and (not $x395) $x297)))
 (let (($x580 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x576 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x576 $x580)))
 (let (($x632 (not $x23)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x489 (and $x223 $x444)))
 (let (($x131 (and (not $x489) $x632)))
 (let (($x678 (and (and (and (and (and (and $x131 $x18) $x411) $x224) $x509) $x156) $x53)))
 (let (($x682 (and $x678 $x672)))
 (let (($x680 (= $x682 true)))
 (let (($x687 (= $x680 true)))
 (let (($x677 (= $x687 true)))
 (let (($x368 (and $x677 $x535)))
 (let (($x589 (and $x368 $x342)))
 (let (($x63 (and $x589 $x15)))
 (let (($x417 (and $x63 $x567)))
 (let (($x666 (and $x417 $x662)))
 (let (($x276 (and $x666 $x592)))
 (let (($x84 (and $x276 $x561)))
 (let (($x372 (and $x84 $x337)))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x608 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (=> $x472 (= ?x55 ?x608)))))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (= $x472 $x170))))))
 ))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x709 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (= ?x138 (_ bv0 32))))
 (= $x569 $x9))))))
 ))
 (let (($x362 (and $x153 $x652)))
 (let (($x724 (and $x362 $x483)))
 (let (($x254 (and $x724 $x558)))
 (let (($x450 (and $x254 $x372)))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (=> $x741 (= ?x257 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x202 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (= $x741 (bvuge ?x202 (_ bv1 32)))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x202 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x216 (_ bv0 32))))
 (= $x147 (= ?x202 (_ bv0 32)))))))
 ))
 (let (($x427 (and $x24 $x613)))
 (let (($x256 (and $x427 $x62)))
 (let (($x697 (and $x256 $x650)))
 (let (($x248 (and $x697 $x450)))
 (let (($x533 (=> $x248 $x382)))
 (not $x533)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x108 input.dst.llvm-%m2)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x504))))
 (let ((?x608 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (=> $x170 (= ?x608 ?x50))))))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x479 (_ bv1 32))))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (= $x170 $x114))))))
 ))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x529 (= false false)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x709 (_ bv0 32))))
 (=> $x9 $x529)))))
 ))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x479 (_ bv0 32))))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x709 (_ bv0 32))))
 (= $x9 $x661))))))
 ))
 (let (($x198 (and $x484 $x273)))
 (let (($x298 (and $x198 $x99)))
 (let (($x339 (and $x298 $x37)))
 (let (($x319 (= $x339 true)))
 (let (($x382 (= $x319 true)))
 (let ((?x365 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x747 (= (_ bv0 2) ?x365)))
 (let (($x624 (= $x747 true)))
 (let (($x337 (= $x624 true)))
 (let (($x553 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x108 input.dst.llvm-%m2)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x504))))
 (let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (=> $x741 (= ?x257 ?x50))))))))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x479 (_ bv1 32))))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (= $x741 $x114))))))
 ))
 (let (($x613 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x529 (= false false)))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x216 (_ bv0 32))))
 (=> $x147 $x529)))))
 ))
 (let (($x38 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x479 (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x216 (_ bv0 32))))
 (= $x147 $x661))))))
 ))
 (let (($x378 (and $x38 $x613)))
 (let (($x692 (and $x378 $x674)))
 (let (($x414 (and $x692 $x553)))
 (let (($x432 (= $x414 true)))
 (let (($x281 (= $x432 true)))
 (let (($x561 (= $x281 true)))
 (let (($x562 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x734 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x668 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x237 (and $x668 $x734)))
 (let (($x404 (and $x237 $x562)))
 (let (($x307 (= $x404 true)))
 (let (($x394 (= $x307 true)))
 (let (($x592 (= $x394 true)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x424 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x654 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem ?x424))))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv2 32))) ?x654))))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (=> $x472 (= ?x55 ?x480))))))))))
 ))
 (let (($x515 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x479 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (= $x472 $x114))))))
 ))
 (let (($x652 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x529 (= false false)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (= ?x138 (_ bv0 32))))
 (=> $x569 $x529)))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x661 (= ?x479 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (= ?x138 (_ bv0 32))))
 (= $x569 $x661))))))
 ))
 (let (($x172 (and $x557 $x652)))
 (let (($x507 (and $x172 $x515)))
 (let (($x551 (and $x507 $x354)))
 (let (($x92 (= $x551 true)))
 (let (($x139 (= $x92 true)))
 (let (($x662 (= $x139 true)))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x424 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x495 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x424))))
 (let ((?x591 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv2 32))) ?x495)))
 (let ((?x599 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv3 32))) ?x591)))
 (let ((?x608 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (=> $x170 (= ?x608 ?x599)))))))))))
 ))
 (let (($x157 (and $x298 $x305)))
 (let (($x64 (= $x157 true)))
 (let (($x492 (= $x64 true)))
 (let (($x567 (= $x492 true)))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x424 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x495 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x424))))
 (let ((?x591 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv2 32))) ?x495)))
 (let ((?x599 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x424 (_ bv3 32))) ?x591)))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (=> $x472 (= ?x55 ?x599)))))))))))
 ))
 (let (($x560 (and $x507 $x41)))
 (let (($x174 (= $x560 true)))
 (let (($x622 (= $x174 true)))
 (let (($x15 (= $x622 true)))
 (let (($x387 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x424 (bvadd ?x108 input.dst.llvm-%m1)))
 (let ((?x654 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv1 32))) (select input.dst.llvm-mem ?x424))))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x424 (_ bv2 32))) ?x654))))
 (let ((?x608 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (=> $x170 (= ?x608 ?x480))))))))))
 ))
 (let (($x718 (and $x298 $x387)))
 (let (($x729 (= $x718 true)))
 (let (($x556 (= $x729 true)))
 (let (($x342 (= $x556 true)))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x343 (bvadd ?x108 input.dst.llvm-%m2)))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x343))))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv2 32))) ?x175)))
 (let ((?x391 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x343 (_ bv3 32))) ?x124)))
 (let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (=> $x741 (= ?x257 ?x391)))))))))))
 ))
 (let (($x476 (and $x692 $x351)))
 (let (($x603 (= $x476 true)))
 (let (($x21 (= $x603 true)))
 (let (($x535 (= $x21 true)))
 (let ((?x600 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x672 (= (_ bv0 32) ?x600)))
 (let ((?x75 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x53 (= (_ bv0 32) ?x75)))
 (let ((?x244 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x244)))
 (let ((?x740 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x731 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x740)))
 (let (($x448 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x448 $x731)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x509 (and $x120 $x183)))
 (let (($x224 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x411 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x265 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x265 $x314)))
 (let (($x297 (not $x111)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x581 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x395 (and $x581 $x335)))
 (let (($x18 (and (not $x395) $x297)))
 (let (($x580 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x576 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x576 $x580)))
 (let (($x632 (not $x23)))
 (let (($x444 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x489 (and $x223 $x444)))
 (let (($x131 (and (not $x489) $x632)))
 (let (($x678 (and (and (and (and (and (and $x131 $x18) $x411) $x224) $x509) $x156) $x53)))
 (let (($x682 (and $x678 $x672)))
 (let (($x680 (= $x682 true)))
 (let (($x687 (= $x680 true)))
 (let (($x677 (= $x687 true)))
 (let (($x368 (and $x677 $x535)))
 (let (($x589 (and $x368 $x342)))
 (let (($x63 (and $x589 $x15)))
 (let (($x417 (and $x63 $x567)))
 (let (($x666 (and $x417 $x662)))
 (let (($x276 (and $x666 $x592)))
 (let (($x84 (and $x276 $x561)))
 (let (($x372 (and $x84 $x337)))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x608 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x55 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (=> $x472 (= ?x55 ?x608)))))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x709 (_ bv1 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x472 (bvuge ?x138 (_ bv1 32))))
 (= $x472 $x170))))))
 ))
 (let (($x153 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x709 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x9 (= ?x709 (_ bv0 32))))
 (let ((?x138 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (= ?x138 (_ bv0 32))))
 (= $x569 $x9))))))
 ))
 (let (($x362 (and $x153 $x652)))
 (let (($x724 (and $x362 $x483)))
 (let (($x254 (and $x724 $x558)))
 (let (($x450 (and $x254 $x372)))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x257 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (=> $x741 (= ?x257 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x202 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (bvuge ?x216 (_ bv1 32))))
 (= $x741 (bvuge ?x202 (_ bv1 32)))))))
 ))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x202 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (= ?x216 (_ bv0 32))))
 (= $x147 (= ?x202 (_ bv0 32)))))))
 ))
 (let (($x427 (and $x24 $x613)))
 (let (($x256 (and $x427 $x62)))
 (let (($x697 (and $x256 $x650)))
 (let (($x248 (and $x697 $x450)))
 (let (($x533 (=> $x248 $x382)))
 (not $x533)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xe8be4148)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x90ebb404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x266d7c03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x90ebb407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x266d7c00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x90ebb404)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x08
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000008
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #xe8be4148 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!2 (bvadd #xe8be414b (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be414a (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4149 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #xe8be4148 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0a2452a4)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8884c950)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x28009880)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8884c953)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0a2452a7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8884c950)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0a2452a4)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x02
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x28009883 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009882 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009881 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x28009880 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!24 (bvadd #x28009883 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009882 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009881 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x28009880 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000002
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000002
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x135 (= true false)))
 (let (($x141 (= $x135 true)))
 (let ((?x301 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x344 (= (_ bv0 32) ?x301)))
 (let ((?x713 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x473 (= (_ bv0 32) ?x713)))
 (let ((?x280 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x717 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x280)))
 (let ((?x466 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x466)))
 (let (($x482 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x243 (and $x482 $x73)))
 (let (($x744 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x597 (and $x744 $x243)))
 (let (($x486 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x620 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x548 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x360 (and $x548 $x279)))
 (let (($x87 (not $x360)))
 (let (($x617 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x702 (and $x338 $x617)))
 (let (($x133 (and (not $x702) $x87)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x700 (and $x712 $x165)))
 (let (($x60 (not $x700)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x409 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x730 (and $x409 $x150)))
 (let (($x187 (and (not $x730) $x60)))
 (let (($x222 (and (and (and (and (and (and $x187 $x133) $x620) $x486) $x597) $x717) $x473)))
 (let (($x7 (and $x222 $x344)))
 (let (($x491 (= $x7 true)))
 (let (($x623 (= $x491 true)))
 (let (($x239 (= $x623 true)))
 (let (($x688 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x539 (bvadd ?x295 input.dst.llvm-%m2)))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd ?x539 (_ bv1 32))) (select input.dst.llvm-mem ?x539))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x539 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x539 (_ bv2 32))) ?x445))))
 (let ((?x224 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (=> $x335 (= ?x224 ?x264))))))))))
 ))
 (let (($x525 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x296 (_ bv1 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (= $x335 $x625))))))
 ))
 (let (($x356 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x724 (_ bv0 32))))
 (=> $x55 $x125)))))
 ))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x296 (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x724 (_ bv0 32))))
 (= $x55 $x352))))))
 ))
 (let (($x319 (and $x339 $x356)))
 (let (($x405 (and $x319 $x525)))
 (let (($x96 (and $x405 $x688)))
 (let (($x575 (= $x96 true)))
 (let (($x634 (= $x575 true)))
 (let (($x442 (= $x634 true)))
 (let ((?x536 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x104 (= (_ bv0 2) ?x536)))
 (let (($x349 (= $x104 true)))
 (let (($x570 (= $x349 true)))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x311 (bvadd ?x295 input.dst.llvm-%m1)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x16))))
 (let ((?x232 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (=> $x273 (= ?x232 ?x287))))))))))
 ))
 (let (($x456 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x296 (_ bv1 32))))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (= $x273 $x625))))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x503 (_ bv0 32))))
 (=> $x169 $x125)))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x296 (_ bv0 32))))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x503 (_ bv0 32))))
 (= $x169 $x352))))))
 ))
 (let (($x742 (and $x655 $x175)))
 (let (($x159 (and $x742 $x456)))
 (let (($x512 (and $x159 $x236)))
 (let (($x177 (= $x512 true)))
 (let (($x645 (= $x177 true)))
 (let (($x659 (= $x645 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x311 (bvadd ?x295 input.dst.llvm-%m1)))
 (let ((?x658 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x311))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv2 32))) ?x658)))
 (let ((?x651 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv3 32))) ?x263)))
 (let ((?x748 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (bvuge ?x343 (_ bv1 32))))
 (=> $x618 (= ?x748 ?x651)))))))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x296 (_ bv1 32))))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (bvuge ?x343 (_ bv1 32))))
 (= $x618 $x625))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x488 (= ?x343 (_ bv0 32))))
 (=> $x488 $x125)))))
 ))
 (let (($x341 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x296 (_ bv0 32))))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x488 (= ?x343 (_ bv0 32))))
 (= $x488 $x352))))))
 ))
 (let (($x540 (and $x341 $x331)))
 (let (($x162 (and $x540 $x155)))
 (let (($x714 (and $x162 $x140)))
 (let (($x736 (= $x714 true)))
 (let (($x401 (= $x736 true)))
 (let (($x72 (= $x401 true)))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x311 (bvadd ?x295 input.dst.llvm-%m1)))
 (let ((?x658 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x311))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv2 32))) ?x658)))
 (let ((?x651 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv3 32))) ?x263)))
 (let ((?x232 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (=> $x273 (= ?x232 ?x651)))))))))))
 ))
 (let (($x213 (and $x159 $x241)))
 (let (($x166 (= $x213 true)))
 (let (($x644 (= $x166 true)))
 (let (($x100 (= $x644 true)))
 (let (($x412 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x311 (bvadd ?x295 input.dst.llvm-%m1)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x16))))
 (let ((?x748 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (bvuge ?x343 (_ bv1 32))))
 (=> $x618 (= ?x748 ?x287))))))))))
 ))
 (let (($x676 (and $x162 $x412)))
 (let (($x54 (= $x676 true)))
 (let (($x715 (= $x54 true)))
 (let (($x359 (= $x715 true)))
 (let ((?x387 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x718 (bvneg ?x387)))
 (let (($x669 (= ?x718 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x416 (= $x669 true)))
 (let (($x671 (= $x416 true)))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x539 (bvadd ?x295 input.dst.llvm-%m2)))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x539 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x539))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x539 (_ bv2 32))) ?x107)))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x539 (_ bv3 32))) ?x70)))
 (let ((?x224 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (=> $x335 (= ?x224 ?x721)))))))))))
 ))
 (let (($x196 (and $x405 $x48)))
 (let (($x441 (= $x196 true)))
 (let (($x13 (= $x441 true)))
 (let (($x136 (= $x13 true)))
 (let (($x556 (= ?x718 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x342 (= $x556 true)))
 (let (($x589 (= $x342 true)))
 (let (($x152 (and $x589 $x136)))
 (let (($x673 (and $x152 $x671)))
 (let (($x453 (and $x673 $x359)))
 (let (($x641 (and $x453 $x100)))
 (let (($x294 (and $x641 $x72)))
 (let (($x499 (and $x294 $x659)))
 (let (($x154 (and $x499 $x570)))
 (let (($x218 (and $x154 $x442)))
 (let (($x91 (and $x218 $x239)))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x748 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x232 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (=> $x273 (= ?x232 ?x748)))))))
 ))
 (let (($x508 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (bvuge ?x343 (_ bv1 32))))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (= $x273 $x618))))))
 ))
 (let (($x436 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x488 (= ?x343 (_ bv0 32))))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x503 (_ bv0 32))))
 (= $x169 $x488))))))
 ))
 (let (($x124 (and $x436 $x175)))
 (let (($x99 (and $x124 $x508)))
 (let (($x480 (and $x99 $x656)))
 (let (($x552 (and $x480 $x91)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (=> $x335 (= ?x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x170 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (= $x335 (bvuge ?x170 (_ bv1 32)))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x170 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x724 (_ bv0 32))))
 (= $x55 (= ?x170 (_ bv0 32)))))))
 ))
 (let (($x180 (and $x274 $x356)))
 (let (($x265 (and $x180 $x554)))
 (let (($x639 (and $x265 $x448)))
 (let (($x253 (and $x639 $x552)))
 (let (($x74 (=> $x253 $x141)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x135 (= true false)))
 (let (($x141 (= $x135 true)))
 (let ((?x301 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x344 (= (_ bv0 32) ?x301)))
 (let ((?x713 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x473 (= (_ bv0 32) ?x713)))
 (let ((?x280 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x717 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x280)))
 (let ((?x466 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x466)))
 (let (($x482 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x243 (and $x482 $x73)))
 (let (($x744 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x597 (and $x744 $x243)))
 (let (($x486 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x620 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x548 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x360 (and $x548 $x279)))
 (let (($x87 (not $x360)))
 (let (($x617 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x702 (and $x338 $x617)))
 (let (($x133 (and (not $x702) $x87)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x700 (and $x712 $x165)))
 (let (($x60 (not $x700)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x409 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x730 (and $x409 $x150)))
 (let (($x187 (and (not $x730) $x60)))
 (let (($x222 (and (and (and (and (and (and $x187 $x133) $x620) $x486) $x597) $x717) $x473)))
 (let (($x7 (and $x222 $x344)))
 (let (($x491 (= $x7 true)))
 (let (($x623 (= $x491 true)))
 (let (($x239 (= $x623 true)))
 (let (($x688 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x539 (bvadd ?x295 input.dst.llvm-%m2)))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd ?x539 (_ bv1 32))) (select input.dst.llvm-mem ?x539))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x539 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x539 (_ bv2 32))) ?x445))))
 (let ((?x224 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (=> $x335 (= ?x224 ?x264))))))))))
 ))
 (let (($x525 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x296 (_ bv1 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (= $x335 $x625))))))
 ))
 (let (($x356 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x724 (_ bv0 32))))
 (=> $x55 $x125)))))
 ))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x296 (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x724 (_ bv0 32))))
 (= $x55 $x352))))))
 ))
 (let (($x319 (and $x339 $x356)))
 (let (($x405 (and $x319 $x525)))
 (let (($x96 (and $x405 $x688)))
 (let (($x575 (= $x96 true)))
 (let (($x634 (= $x575 true)))
 (let (($x442 (= $x634 true)))
 (let ((?x536 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x104 (= (_ bv0 2) ?x536)))
 (let (($x349 (= $x104 true)))
 (let (($x570 (= $x349 true)))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x311 (bvadd ?x295 input.dst.llvm-%m1)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x16))))
 (let ((?x232 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (=> $x273 (= ?x232 ?x287))))))))))
 ))
 (let (($x456 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x296 (_ bv1 32))))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (= $x273 $x625))))))
 ))
 (let (($x175 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x503 (_ bv0 32))))
 (=> $x169 $x125)))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x296 (_ bv0 32))))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x503 (_ bv0 32))))
 (= $x169 $x352))))))
 ))
 (let (($x742 (and $x655 $x175)))
 (let (($x159 (and $x742 $x456)))
 (let (($x512 (and $x159 $x236)))
 (let (($x177 (= $x512 true)))
 (let (($x645 (= $x177 true)))
 (let (($x659 (= $x645 true)))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x311 (bvadd ?x295 input.dst.llvm-%m1)))
 (let ((?x658 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x311))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv2 32))) ?x658)))
 (let ((?x651 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv3 32))) ?x263)))
 (let ((?x748 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (bvuge ?x343 (_ bv1 32))))
 (=> $x618 (= ?x748 ?x651)))))))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x625 (bvuge ?x296 (_ bv1 32))))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (bvuge ?x343 (_ bv1 32))))
 (= $x618 $x625))))))
 ))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x125 (= false false)))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x488 (= ?x343 (_ bv0 32))))
 (=> $x488 $x125)))))
 ))
 (let (($x341 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x352 (= ?x296 (_ bv0 32))))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x488 (= ?x343 (_ bv0 32))))
 (= $x488 $x352))))))
 ))
 (let (($x540 (and $x341 $x331)))
 (let (($x162 (and $x540 $x155)))
 (let (($x714 (and $x162 $x140)))
 (let (($x736 (= $x714 true)))
 (let (($x401 (= $x736 true)))
 (let (($x72 (= $x401 true)))
 (let (($x241 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x311 (bvadd ?x295 input.dst.llvm-%m1)))
 (let ((?x658 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x311))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv2 32))) ?x658)))
 (let ((?x651 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x311 (_ bv3 32))) ?x263)))
 (let ((?x232 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (=> $x273 (= ?x232 ?x651)))))))))))
 ))
 (let (($x213 (and $x159 $x241)))
 (let (($x166 (= $x213 true)))
 (let (($x644 (= $x166 true)))
 (let (($x100 (= $x644 true)))
 (let (($x412 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x311 (bvadd ?x295 input.dst.llvm-%m1)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x16))))
 (let ((?x748 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (bvuge ?x343 (_ bv1 32))))
 (=> $x618 (= ?x748 ?x287))))))))))
 ))
 (let (($x676 (and $x162 $x412)))
 (let (($x54 (= $x676 true)))
 (let (($x715 (= $x54 true)))
 (let (($x359 (= $x715 true)))
 (let ((?x387 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x718 (bvneg ?x387)))
 (let (($x669 (= ?x718 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x416 (= $x669 true)))
 (let (($x671 (= $x416 true)))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x539 (bvadd ?x295 input.dst.llvm-%m2)))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x539 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x539))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x539 (_ bv2 32))) ?x107)))
 (let ((?x721 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x539 (_ bv3 32))) ?x70)))
 (let ((?x224 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (=> $x335 (= ?x224 ?x721)))))))))))
 ))
 (let (($x196 (and $x405 $x48)))
 (let (($x441 (= $x196 true)))
 (let (($x13 (= $x441 true)))
 (let (($x136 (= $x13 true)))
 (let (($x556 (= ?x718 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x342 (= $x556 true)))
 (let (($x589 (= $x342 true)))
 (let (($x152 (and $x589 $x136)))
 (let (($x673 (and $x152 $x671)))
 (let (($x453 (and $x673 $x359)))
 (let (($x641 (and $x453 $x100)))
 (let (($x294 (and $x641 $x72)))
 (let (($x499 (and $x294 $x659)))
 (let (($x154 (and $x499 $x570)))
 (let (($x218 (and $x154 $x442)))
 (let (($x91 (and $x218 $x239)))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x748 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x232 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (=> $x273 (= ?x232 ?x748)))))))
 ))
 (let (($x508 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (bvuge ?x343 (_ bv1 32))))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x273 (bvuge ?x503 (_ bv1 32))))
 (= $x273 $x618))))))
 ))
 (let (($x436 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x343 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x488 (= ?x343 (_ bv0 32))))
 (let ((?x503 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (= ?x503 (_ bv0 32))))
 (= $x169 $x488))))))
 ))
 (let (($x124 (and $x436 $x175)))
 (let (($x99 (and $x124 $x508)))
 (let (($x480 (and $x99 $x656)))
 (let (($x552 (and $x480 $x91)))
 (let (($x448 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x224 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (=> $x335 (= ?x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x170 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x724 (_ bv1 32))))
 (= $x335 (bvuge ?x170 (_ bv1 32)))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x170 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x724 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x724 (_ bv0 32))))
 (= $x55 (= ?x170 (_ bv0 32)))))))
 ))
 (let (($x180 (and $x274 $x356)))
 (let (($x265 (and $x180 $x554)))
 (let (($x639 (and $x265 $x448)))
 (let (($x253 (and $x639 $x552)))
 (let (($x74 (=> $x253 $x141)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x93d62328)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x83eadfc8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x44b4264b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x93d6232b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x44b42648)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x93d62328)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x83eadfc8 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!19 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x83eadfcb (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfca (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc9 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x83eadfc8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!38))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00100000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000003c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!39))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04421800)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40040103)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000003f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40040100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000003c)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!42 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun k!40 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!42 (k!40 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x40040100) false
    (ite (= x!0 #x0000003c) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!39 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!38 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x00100000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x00100003 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100002 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100001 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x00100000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!41 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x40040100 x!0) #x40040100 #x00000065)
              #x00000064)
         #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1!44 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!44 (k!41 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!38 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!38 (bvadd #x04421800 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!39 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!43 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x0000003c))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!43 (k!41 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (let ((a!1 (concat (k!39 (bvadd #x04421803 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421802 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421801 (bvmul #x00000004 x!0)))
                         (k!39 (bvadd #x04421800 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000003c) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x753 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x212)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x447))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x447 (_ bv2 32))) ?x259)))
 (let ((?x750 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x447 (_ bv3 32))) ?x250)))
 (let ((?x530 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (=> $x37 (= ?x530 ?x750)))))))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x527 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (= $x37 $x47))))))
 ))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x654 (= false false)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x99 (_ bv0 32))))
 (=> $x232 $x654)))))
 ))
 (let (($x720 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x527 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x99 (_ bv0 32))))
 (= $x232 $x710))))))
 ))
 (let (($x726 (and $x720 $x328)))
 (let (($x635 (and $x726 $x121)))
 (let (($x754 (and $x635 $x753)))
 (let (($x755 (= $x754 true)))
 (let (($x756 (= $x755 true)))
 (let ((?x584 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x628 (bvneg ?x584)))
 (let (($x145 (= ?x628 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (= $x145 true)))
 (let (($x403 (= $x5 true)))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x230))))
 (let ((?x530 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (=> $x37 (= ?x530 ?x418))))))))))
 ))
 (let (($x443 (and $x635 $x516)))
 (let (($x541 (= $x443 true)))
 (let (($x737 (= $x541 true)))
 (let (($x449 (= $x737 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x204))))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (=> $x469 (= ?x716 ?x278))))))))))
 ))
 (let (($x492 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x527 (_ bv1 32))))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (= $x469 $x47))))))
 ))
 (let (($x676 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x654 (= false false)))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x16 (_ bv0 32))))
 (=> $x95 $x654)))))
 ))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x527 (_ bv0 32))))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x16 (_ bv0 32))))
 (= $x95 $x710))))))
 ))
 (let (($x684 (and $x411 $x676)))
 (let (($x64 (and $x684 $x492)))
 (let (($x394 (and $x64 $x307)))
 (let (($x377 (= $x394 true)))
 (let (($x50 (= $x377 true)))
 (let (($x61 (= $x50 true)))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x496 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x240))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv2 32))) ?x496)))
 (let ((?x407 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv3 32))) ?x186)))
 (let ((?x364 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x123 (_ bv1 32))))
 (=> $x134 (= ?x364 ?x407)))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x527 (_ bv1 32))))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x123 (_ bv1 32))))
 (= $x134 $x47))))))
 ))
 (let (($x571 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x654 (= false false)))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x123 (_ bv0 32))))
 (=> $x268 $x654)))))
 ))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x527 (_ bv0 32))))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x123 (_ bv0 32))))
 (= $x268 $x710))))))
 ))
 (let (($x439 (and $x282 $x571)))
 (let (($x270 (and $x439 $x408)))
 (let (($x205 (and $x270 $x290)))
 (let (($x543 (= $x205 true)))
 (let (($x336 (= $x543 true)))
 (let (($x404 (= $x336 true)))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x496 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x240))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv2 32))) ?x496)))
 (let ((?x407 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv3 32))) ?x186)))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (=> $x469 (= ?x716 ?x407)))))))))))
 ))
 (let (($x132 (and $x64 $x317)))
 (let (($x334 (= $x132 true)))
 (let (($x320 (= $x334 true)))
 (let (($x30 (= $x320 true)))
 (let (($x66 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x204))))
 (let ((?x364 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x123 (_ bv1 32))))
 (=> $x134 (= ?x364 ?x278))))))))))
 ))
 (let (($x611 (and $x270 $x66)))
 (let (($x598 (= $x611 true)))
 (let (($x596 (= $x598 true)))
 (let (($x217 (= $x596 true)))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x691))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv2 32))) ?x151)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv3 32))) ?x206)))
 (let ((?x530 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (=> $x37 (= ?x530 ?x81)))))))))))
 ))
 (let (($x182 (and $x635 $x45)))
 (let (($x291 (= $x182 true)))
 (let (($x542 (= $x291 true)))
 (let (($x428 (= $x542 true)))
 (let ((?x73 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x243 (= (_ bv0 32) ?x73)))
 (let ((?x482 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x466 (= (_ bv0 32) ?x482)))
 (let ((?x221 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x744 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x620 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x538 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x620)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x462 (and $x332 $x538)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x486 (and $x133 $x462)))
 (let (($x87 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x338 (and $x60 $x187)))
 (let (($x617 (not $x338)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x700 (and $x712 $x165)))
 (let (($x219 (and (not $x700) $x617)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x409 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x409 $x178)))
 (let (($x730 (not $x150)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x634 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x345 (and $x634 $x218)))
 (let (($x116 (and (not $x345) $x730)))
 (let (($x713 (and (and (and (and (and (and $x116 $x219) $x279) $x87) $x486) $x744) $x466)))
 (let (($x473 (and $x713 $x243)))
 (let (($x222 (= $x473 true)))
 (let (($x301 (= $x222 true)))
 (let (($x344 (= $x301 true)))
 (let ((?x604 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x264 (= (_ bv0 2) ?x604)))
 (let (($x690 (= $x264 true)))
 (let (($x681 (= $x690 true)))
 (let (($x570 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x536 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x154 (and $x536 $x570)))
 (let (($x431 (= $x154 true)))
 (let (($x605 (= $x431 true)))
 (let (($x406 (= $x605 true)))
 (let (($x512 (= ?x628 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x177 (= $x512 true)))
 (let (($x645 (= $x177 true)))
 (let (($x719 (and $x645 $x406)))
 (let (($x688 (and $x719 $x681)))
 (let (($x7 (and $x688 $x344)))
 (let (($x114 (and $x7 $x428)))
 (let (($x303 (and $x114 $x217)))
 (let (($x161 (and $x303 $x30)))
 (let (($x734 (and $x161 $x404)))
 (let (($x614 (and $x734 $x61)))
 (let (($x410 (and $x614 $x449)))
 (let (($x572 (and $x410 $x403)))
 (let (($x736 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (=> $x469 (= ?x716 ?x364)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x123 (_ bv1 32))))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (= $x469 $x134))))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x123 (_ bv0 32))))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x16 (_ bv0 32))))
 (= $x95 $x268))))))
 ))
 (let (($x54 (and $x68 $x676)))
 (let (($x651 (and $x54 $x263)))
 (let (($x401 (and $x651 $x736)))
 (let (($x226 (and $x401 $x572)))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x530 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (=> $x37 (= ?x530 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (= $x37 (bvuge ?x618 (_ bv1 32)))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x99 (_ bv0 32))))
 (= $x232 (= ?x618 (_ bv0 32)))))))
 ))
 (let (($x179 (and $x746 $x328)))
 (let (($x625 (and $x179 $x319)))
 (let (($x452 (and $x625 $x267)))
 (let (($x458 (and $x452 $x226)))
 (let (($x757 (=> $x458 $x756)))
 (not $x757)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x753 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x447 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x212)))
 (let ((?x259 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x447))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x447 (_ bv2 32))) ?x259)))
 (let ((?x750 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x447 (_ bv3 32))) ?x250)))
 (let ((?x530 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (=> $x37 (= ?x530 ?x750)))))))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x527 (_ bv1 32))))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (= $x37 $x47))))))
 ))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x654 (= false false)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x99 (_ bv0 32))))
 (=> $x232 $x654)))))
 ))
 (let (($x720 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x527 (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x99 (_ bv0 32))))
 (= $x232 $x710))))))
 ))
 (let (($x726 (and $x720 $x328)))
 (let (($x635 (and $x726 $x121)))
 (let (($x754 (and $x635 $x753)))
 (let (($x755 (= $x754 true)))
 (let (($x756 (= $x755 true)))
 (let ((?x584 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x628 (bvneg ?x584)))
 (let (($x145 (= ?x628 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x5 (= $x145 true)))
 (let (($x403 (= $x5 true)))
 (let (($x516 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x230))))
 (let ((?x530 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (=> $x37 (= ?x530 ?x418))))))))))
 ))
 (let (($x443 (and $x635 $x516)))
 (let (($x541 (= $x443 true)))
 (let (($x737 (= $x541 true)))
 (let (($x449 (= $x737 true)))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x204))))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (=> $x469 (= ?x716 ?x278))))))))))
 ))
 (let (($x492 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x527 (_ bv1 32))))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (= $x469 $x47))))))
 ))
 (let (($x676 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x654 (= false false)))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x16 (_ bv0 32))))
 (=> $x95 $x654)))))
 ))
 (let (($x411 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x527 (_ bv0 32))))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x16 (_ bv0 32))))
 (= $x95 $x710))))))
 ))
 (let (($x684 (and $x411 $x676)))
 (let (($x64 (and $x684 $x492)))
 (let (($x394 (and $x64 $x307)))
 (let (($x377 (= $x394 true)))
 (let (($x50 (= $x377 true)))
 (let (($x61 (= $x50 true)))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x496 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x240))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv2 32))) ?x496)))
 (let ((?x407 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv3 32))) ?x186)))
 (let ((?x364 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x123 (_ bv1 32))))
 (=> $x134 (= ?x364 ?x407)))))))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x527 (_ bv1 32))))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x123 (_ bv1 32))))
 (= $x134 $x47))))))
 ))
 (let (($x571 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x654 (= false false)))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x123 (_ bv0 32))))
 (=> $x268 $x654)))))
 ))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x527 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x710 (= ?x527 (_ bv0 32))))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x123 (_ bv0 32))))
 (= $x268 $x710))))))
 ))
 (let (($x439 (and $x282 $x571)))
 (let (($x270 (and $x439 $x408)))
 (let (($x205 (and $x270 $x290)))
 (let (($x543 (= $x205 true)))
 (let (($x336 (= $x543 true)))
 (let (($x404 (= $x336 true)))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x496 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x240))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv2 32))) ?x496)))
 (let ((?x407 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x240 (_ bv3 32))) ?x186)))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (=> $x469 (= ?x716 ?x407)))))))))))
 ))
 (let (($x132 (and $x64 $x317)))
 (let (($x334 (= $x132 true)))
 (let (($x320 (= $x334 true)))
 (let (($x30 (= $x320 true)))
 (let (($x66 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x240 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x204))))
 (let ((?x364 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x123 (_ bv1 32))))
 (=> $x134 (= ?x364 ?x278))))))))))
 ))
 (let (($x611 (and $x270 $x66)))
 (let (($x598 (= $x611 true)))
 (let (($x596 (= $x598 true)))
 (let (($x217 (= $x596 true)))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x691 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x151 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x691))))
 (let ((?x206 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv2 32))) ?x151)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x691 (_ bv3 32))) ?x206)))
 (let ((?x530 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (=> $x37 (= ?x530 ?x81)))))))))))
 ))
 (let (($x182 (and $x635 $x45)))
 (let (($x291 (= $x182 true)))
 (let (($x542 (= $x291 true)))
 (let (($x428 (= $x542 true)))
 (let ((?x73 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x243 (= (_ bv0 32) ?x73)))
 (let ((?x482 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x466 (= (_ bv0 32) ?x482)))
 (let ((?x221 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x744 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x620 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x538 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x620)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x462 (and $x332 $x538)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x486 (and $x133 $x462)))
 (let (($x87 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x338 (and $x60 $x187)))
 (let (($x617 (not $x338)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x700 (and $x712 $x165)))
 (let (($x219 (and (not $x700) $x617)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x409 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x409 $x178)))
 (let (($x730 (not $x150)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x634 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x345 (and $x634 $x218)))
 (let (($x116 (and (not $x345) $x730)))
 (let (($x713 (and (and (and (and (and (and $x116 $x219) $x279) $x87) $x486) $x744) $x466)))
 (let (($x473 (and $x713 $x243)))
 (let (($x222 (= $x473 true)))
 (let (($x301 (= $x222 true)))
 (let (($x344 (= $x301 true)))
 (let ((?x604 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x264 (= (_ bv0 2) ?x604)))
 (let (($x690 (= $x264 true)))
 (let (($x681 (= $x690 true)))
 (let (($x570 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x536 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x154 (and $x536 $x570)))
 (let (($x431 (= $x154 true)))
 (let (($x605 (= $x431 true)))
 (let (($x406 (= $x605 true)))
 (let (($x512 (= ?x628 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x177 (= $x512 true)))
 (let (($x645 (= $x177 true)))
 (let (($x719 (and $x645 $x406)))
 (let (($x688 (and $x719 $x681)))
 (let (($x7 (and $x688 $x344)))
 (let (($x114 (and $x7 $x428)))
 (let (($x303 (and $x114 $x217)))
 (let (($x161 (and $x303 $x30)))
 (let (($x734 (and $x161 $x404)))
 (let (($x614 (and $x734 $x61)))
 (let (($x410 (and $x614 $x449)))
 (let (($x572 (and $x410 $x403)))
 (let (($x736 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x364 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x716 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (=> $x469 (= ?x716 ?x364)))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x123 (_ bv1 32))))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x469 (bvuge ?x16 (_ bv1 32))))
 (= $x469 $x134))))))
 ))
 (let (($x68 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x123 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (= ?x123 (_ bv0 32))))
 (let ((?x16 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (= ?x16 (_ bv0 32))))
 (= $x95 $x268))))))
 ))
 (let (($x54 (and $x68 $x676)))
 (let (($x651 (and $x54 $x263)))
 (let (($x401 (and $x651 $x736)))
 (let (($x226 (and $x401 $x572)))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x530 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (=> $x37 (= ?x530 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x99 (_ bv1 32))))
 (= $x37 (bvuge ?x618 (_ bv1 32)))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x618 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x99 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (= ?x99 (_ bv0 32))))
 (= $x232 (= ?x618 (_ bv0 32)))))))
 ))
 (let (($x179 (and $x746 $x328)))
 (let (($x625 (and $x179 $x319)))
 (let (($x452 (and $x625 $x267)))
 (let (($x458 (and $x452 $x226)))
 (let (($x757 (=> $x458 $x756)))
 (not $x757)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000032)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6b520110)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff820454)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x267a7694)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x267a7694)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff820457)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6b520113)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff820454)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6b520110)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x267a7694)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000cb) #x02
      #x00))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000cb) #x02
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000032))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18421404)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x14041413)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18421407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18421404)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x260)))
 (let ((?x550 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x252))))
 (let ((?x583 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x252 (_ bv2 32))) ?x550)))
 (let ((?x520 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x252 (_ bv3 32))) ?x583)))
 (let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (=> $x635 (= ?x151 ?x520)))))))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x696 (bvuge ?x553 (_ bv1 32))))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (= $x635 $x696))))))
 ))
 (let (($x708 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x482 (_ bv0 32))))
 (=> $x466 $x714)))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x553 (_ bv0 32))))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x482 (_ bv0 32))))
 (= $x466 $x281))))))
 ))
 (let (($x337 (and $x223 $x708)))
 (let (($x55 (and $x337 $x254)))
 (let (($x149 (and $x55 $x126)))
 (let (($x390 (= $x149 true)))
 (let (($x493 (= $x390 true)))
 (let ((?x542 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x428 (bvneg ?x542)))
 (let (($x131 (= ?x428 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x297 (= $x131 true)))
 (let (($x6 (= $x297 true)))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x370 (bvadd ?x260 input.dst.llvm-%m2)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem ?x370))))
 (let ((?x697 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv2 32))) ?x425))))
 (let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (=> $x570 (= ?x575 ?x697))))))))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x696 (bvuge ?x553 (_ bv1 32))))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (= $x570 $x696))))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x651 (_ bv0 32))))
 (=> $x716 $x714)))))
 ))
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x553 (_ bv0 32))))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x651 (_ bv0 32))))
 (= $x716 $x281))))))
 ))
 (let (($x316 (and $x382 $x72)))
 (let (($x391 (and $x316 $x674)))
 (let (($x153 (and $x391 $x138)))
 (let (($x118 (= $x153 true)))
 (let (($x185 (= $x118 true)))
 (let (($x580 (= $x185 true)))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x233 (bvadd ?x260 input.dst.llvm-%m1)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x71))))
 (let ((?x206 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (=> $x253 (= ?x206 ?x40))))))))))
 ))
 (let (($x503 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x696 (bvuge ?x553 (_ bv1 32))))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (= $x253 $x696))))))
 ))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x73 (_ bv0 32))))
 (=> $x243 $x714)))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x553 (_ bv0 32))))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x73 (_ bv0 32))))
 (= $x243 $x281))))))
 ))
 (let (($x100 (and $x644 $x7)))
 (let (($x169 (and $x100 $x503)))
 (let (($x459 (and $x169 $x246)))
 (let (($x555 (= $x459 true)))
 (let (($x661 (= $x555 true)))
 (let (($x479 (= $x661 true)))
 (let (($x739 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x233 (bvadd ?x260 input.dst.llvm-%m1)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x233))))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv2 32))) ?x509)))
 (let ((?x677 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv3 32))) ?x147)))
 (let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (=> $x635 (= ?x151 ?x677)))))))))))
 ))
 (let (($x515 (and $x55 $x739)))
 (let (($x457 (= $x515 true)))
 (let (($x163 (= $x457 true)))
 (let (($x36 (= $x163 true)))
 (let (($x532 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x233 (bvadd ?x260 input.dst.llvm-%m1)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x233))))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv2 32))) ?x509)))
 (let ((?x677 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv3 32))) ?x147)))
 (let ((?x206 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (=> $x253 (= ?x206 ?x677)))))))))))
 ))
 (let (($x256 (and $x169 $x532)))
 (let (($x34 (= $x256 true)))
 (let (($x557 (= $x34 true)))
 (let (($x271 (= $x557 true)))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x233 (bvadd ?x260 input.dst.llvm-%m1)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x71))))
 (let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (=> $x635 (= ?x151 ?x40))))))))))
 ))
 (let (($x343 (and $x55 $x475)))
 (let (($x488 (= $x343 true)))
 (let (($x44 (= $x488 true)))
 (let (($x656 (= $x44 true)))
 (let (($x568 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x370 (bvadd ?x260 input.dst.llvm-%m2)))
 (let ((?x706 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x370))))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv2 32))) ?x706)))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv3 32))) ?x298)))
 (let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (=> $x570 (= ?x575 ?x52)))))))))))
 ))
 (let (($x48 (and $x391 $x568)))
 (let (($x196 (= $x48 true)))
 (let (($x441 (= $x196 true)))
 (let (($x13 (= $x441 true)))
 (let ((?x562 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x307 (= (_ bv0 32) ?x562)))
 (let ((?x734 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x490 (= (_ bv0 32) ?x734)))
 (let ((?x336 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x404 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x336)))
 (let ((?x474 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x474)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x205 (and $x161 $x290)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x543 (and $x30 $x205)))
 (let (($x320 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x496 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x89 $x496)))
 (let (($x407 (not $x186)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x485 (and $x191 $x35)))
 (let (($x97 (and (not $x485) $x407)))
 (let (($x411 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x684 (and $x148 $x411)))
 (let (($x157 (not $x684)))
 (let (($x596 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x611 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x611 $x596)))
 (let (($x64 (and (not $x217) $x157)))
 (let (($x701 (and (and (and (and (and (and $x64 $x97) $x132) $x320) $x543) $x404) $x490)))
 (let (($x513 (and $x701 $x307)))
 (let (($x255 (= $x513 true)))
 (let (($x607 (= $x255 true)))
 (let (($x230 (= $x607 true)))
 (let ((?x648 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x204 (= (_ bv0 2) ?x648)))
 (let (($x725 (= $x204 true)))
 (let (($x278 (= $x725 true)))
 (let (($x240 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x408 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x610 (and $x408 $x240)))
 (let (($x199 (= $x610 true)))
 (let (($x314 (= $x199 true)))
 (let (($x111 (= $x314 true)))
 (let (($x657 (= ?x428 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x282 (= $x657 true)))
 (let (($x642 (= $x282 true)))
 (let (($x324 (and $x642 $x111)))
 (let (($x43 (and $x324 $x278)))
 (let (($x695 (and $x43 $x230)))
 (let (($x136 (and $x695 $x13)))
 (let (($x387 (and $x136 $x656)))
 (let (($x502 (and $x387 $x271)))
 (let (($x235 (and $x502 $x36)))
 (let (($x588 (and $x235 $x479)))
 (let (($x576 (and $x588 $x580)))
 (let (($x464 (and $x576 $x6)))
 (let (($x27 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x206 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (=> $x253 (= ?x206 ?x151)))))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (= $x253 $x635))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x482 (_ bv0 32))))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x73 (_ bv0 32))))
 (= $x243 $x466))))))
 ))
 (let (($x663 (and $x222 $x7)))
 (let (($x691 (and $x663 $x212)))
 (let (($x45 (and $x691 $x27)))
 (let (($x622 (and $x45 $x464)))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (=> $x570 (= ?x575 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x431 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (= $x570 (bvuge ?x134 (_ bv1 32)))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x651 (_ bv0 32))))
 (= $x716 (= ?x134 (_ bv0 32)))))))
 ))
 (let (($x294 (and $x140 $x72)))
 (let (($x605 (and $x294 $x431)))
 (let (($x345 (and $x605 $x218)))
 (let (($x599 (and $x345 $x622)))
 (let (($x266 (=> $x599 $x493)))
 (not $x266)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x252 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x260)))
 (let ((?x550 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x252))))
 (let ((?x583 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x252 (_ bv2 32))) ?x550)))
 (let ((?x520 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x252 (_ bv3 32))) ?x583)))
 (let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (=> $x635 (= ?x151 ?x520)))))))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x696 (bvuge ?x553 (_ bv1 32))))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (= $x635 $x696))))))
 ))
 (let (($x708 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x482 (_ bv0 32))))
 (=> $x466 $x714)))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x553 (_ bv0 32))))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x482 (_ bv0 32))))
 (= $x466 $x281))))))
 ))
 (let (($x337 (and $x223 $x708)))
 (let (($x55 (and $x337 $x254)))
 (let (($x149 (and $x55 $x126)))
 (let (($x390 (= $x149 true)))
 (let (($x493 (= $x390 true)))
 (let ((?x542 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x428 (bvneg ?x542)))
 (let (($x131 (= ?x428 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x297 (= $x131 true)))
 (let (($x6 (= $x297 true)))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x370 (bvadd ?x260 input.dst.llvm-%m2)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem ?x370))))
 (let ((?x697 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv2 32))) ?x425))))
 (let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (=> $x570 (= ?x575 ?x697))))))))))
 ))
 (let (($x674 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x696 (bvuge ?x553 (_ bv1 32))))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (= $x570 $x696))))))
 ))
 (let (($x72 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x651 (_ bv0 32))))
 (=> $x716 $x714)))))
 ))
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x553 (_ bv0 32))))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x651 (_ bv0 32))))
 (= $x716 $x281))))))
 ))
 (let (($x316 (and $x382 $x72)))
 (let (($x391 (and $x316 $x674)))
 (let (($x153 (and $x391 $x138)))
 (let (($x118 (= $x153 true)))
 (let (($x185 (= $x118 true)))
 (let (($x580 (= $x185 true)))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x233 (bvadd ?x260 input.dst.llvm-%m1)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x71))))
 (let ((?x206 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (=> $x253 (= ?x206 ?x40))))))))))
 ))
 (let (($x503 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x696 (bvuge ?x553 (_ bv1 32))))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (= $x253 $x696))))))
 ))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x714 (= false false)))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x73 (_ bv0 32))))
 (=> $x243 $x714)))))
 ))
 (let (($x644 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x553 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x553 (_ bv0 32))))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x73 (_ bv0 32))))
 (= $x243 $x281))))))
 ))
 (let (($x100 (and $x644 $x7)))
 (let (($x169 (and $x100 $x503)))
 (let (($x459 (and $x169 $x246)))
 (let (($x555 (= $x459 true)))
 (let (($x661 (= $x555 true)))
 (let (($x479 (= $x661 true)))
 (let (($x739 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x233 (bvadd ?x260 input.dst.llvm-%m1)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x233))))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv2 32))) ?x509)))
 (let ((?x677 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv3 32))) ?x147)))
 (let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (=> $x635 (= ?x151 ?x677)))))))))))
 ))
 (let (($x515 (and $x55 $x739)))
 (let (($x457 (= $x515 true)))
 (let (($x163 (= $x457 true)))
 (let (($x36 (= $x163 true)))
 (let (($x532 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x233 (bvadd ?x260 input.dst.llvm-%m1)))
 (let ((?x509 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x233))))
 (let ((?x147 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv2 32))) ?x509)))
 (let ((?x677 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv3 32))) ?x147)))
 (let ((?x206 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (=> $x253 (= ?x206 ?x677)))))))))))
 ))
 (let (($x256 (and $x169 $x532)))
 (let (($x34 (= $x256 true)))
 (let (($x557 (= $x34 true)))
 (let (($x271 (= $x557 true)))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x233 (bvadd ?x260 input.dst.llvm-%m1)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x71))))
 (let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (=> $x635 (= ?x151 ?x40))))))))))
 ))
 (let (($x343 (and $x55 $x475)))
 (let (($x488 (= $x343 true)))
 (let (($x44 (= $x488 true)))
 (let (($x656 (= $x44 true)))
 (let (($x568 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x370 (bvadd ?x260 input.dst.llvm-%m2)))
 (let ((?x706 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x370))))
 (let ((?x298 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv2 32))) ?x706)))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x370 (_ bv3 32))) ?x298)))
 (let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (=> $x570 (= ?x575 ?x52)))))))))))
 ))
 (let (($x48 (and $x391 $x568)))
 (let (($x196 (= $x48 true)))
 (let (($x441 (= $x196 true)))
 (let (($x13 (= $x441 true)))
 (let ((?x562 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x307 (= (_ bv0 32) ?x562)))
 (let ((?x734 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x490 (= (_ bv0 32) ?x734)))
 (let ((?x336 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x404 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x336)))
 (let ((?x474 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x474)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x205 (and $x161 $x290)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x543 (and $x30 $x205)))
 (let (($x320 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x496 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x89 $x496)))
 (let (($x407 (not $x186)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x485 (and $x191 $x35)))
 (let (($x97 (and (not $x485) $x407)))
 (let (($x411 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x684 (and $x148 $x411)))
 (let (($x157 (not $x684)))
 (let (($x596 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x611 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x611 $x596)))
 (let (($x64 (and (not $x217) $x157)))
 (let (($x701 (and (and (and (and (and (and $x64 $x97) $x132) $x320) $x543) $x404) $x490)))
 (let (($x513 (and $x701 $x307)))
 (let (($x255 (= $x513 true)))
 (let (($x607 (= $x255 true)))
 (let (($x230 (= $x607 true)))
 (let ((?x648 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x204 (= (_ bv0 2) ?x648)))
 (let (($x725 (= $x204 true)))
 (let (($x278 (= $x725 true)))
 (let (($x240 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x408 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x610 (and $x408 $x240)))
 (let (($x199 (= $x610 true)))
 (let (($x314 (= $x199 true)))
 (let (($x111 (= $x314 true)))
 (let (($x657 (= ?x428 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x282 (= $x657 true)))
 (let (($x642 (= $x282 true)))
 (let (($x324 (and $x642 $x111)))
 (let (($x43 (and $x324 $x278)))
 (let (($x695 (and $x43 $x230)))
 (let (($x136 (and $x695 $x13)))
 (let (($x387 (and $x136 $x656)))
 (let (($x502 (and $x387 $x271)))
 (let (($x235 (and $x502 $x36)))
 (let (($x588 (and $x235 $x479)))
 (let (($x576 (and $x588 $x580)))
 (let (($x464 (and $x576 $x6)))
 (let (($x27 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x206 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (=> $x253 (= ?x206 ?x151)))))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (bvuge ?x482 (_ bv1 32))))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x73 (_ bv1 32))))
 (= $x253 $x635))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x466 (= ?x482 (_ bv0 32))))
 (let ((?x73 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x243 (= ?x73 (_ bv0 32))))
 (= $x243 $x466))))))
 ))
 (let (($x663 (and $x222 $x7)))
 (let (($x691 (and $x663 $x212)))
 (let (($x45 (and $x691 $x27)))
 (let (($x622 (and $x45 $x464)))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x575 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (=> $x570 (= ?x575 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x431 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x570 (bvuge ?x651 (_ bv1 32))))
 (= $x570 (bvuge ?x134 (_ bv1 32)))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x651 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x716 (= ?x651 (_ bv0 32))))
 (= $x716 (= ?x134 (_ bv0 32)))))))
 ))
 (let (($x294 (and $x140 $x72)))
 (let (($x605 (and $x294 $x431)))
 (let (($x345 (and $x605 $x218)))
 (let (($x599 (and $x345 $x622)))
 (let (($x266 (=> $x599 $x493)))
 (not $x266)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0642024c)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0486462b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0642024f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0642024c)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!46))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdfb56947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0db347b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0000007) #x20
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!49 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!49 (k!48 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!51 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!51 (k!48 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!50 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!50 (k!47 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x779 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x507 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_2 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x766 (bvadd ?x613 ?x507)))
 (let ((?x770 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x766))))
 (let ((?x773 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv2 32))) ?x770)))
 (let ((?x776 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv3 32))) ?x773)))
 (let ((?x298 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (=> $x541 (= ?x298 ?x776))))))))))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x664 (_ bv1 32))))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (= $x541 $x429))))))
 ))
 (let (($x695 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x171 (= false false)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x562 (_ bv0 32))))
 (=> $x307 $x171)))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x664 (_ bv0 32))))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x562 (_ bv0 32))))
 (= $x307 $x108))))))
 ))
 (let (($x69 (and $x361 $x695)))
 (let (($x16 (and $x69 $x526)))
 (let (($x780 (and $x16 $x779)))
 (let (($x781 (= $x780 true)))
 (let (($x782 (= $x781 true)))
 (let ((?x456 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x505 (= (_ bv0 2) ?x456)))
 (let (($x168 (= $x505 true)))
 (let (($x641 (= $x168 true)))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x427 (bvadd ?x613 input.dst.llvm-%m2)))
 (let ((?x673 (concat (select input.dst.llvm-mem (bvadd ?x427 (_ bv1 32))) (select input.dst.llvm-mem ?x427))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x427 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x427 (_ bv2 32))) ?x673))))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (=> $x240 (= ?x66 ?x155))))))))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x664 (_ bv1 32))))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (= $x240 $x429))))))
 ))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x171 (= false false)))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x691 (_ bv0 32))))
 (=> $x206 $x171)))))
 ))
 (let (($x535 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x664 (_ bv0 32))))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x691 (_ bv0 32))))
 (= $x206 $x108))))))
 ))
 (let (($x181 (and $x535 $x182)))
 (let (($x704 (and $x181 $x58)))
 (let (($x540 (and $x704 $x383)))
 (let (($x311 (= $x540 true)))
 (let (($x310 (= $x311 true)))
 (let (($x655 (= $x310 true)))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x613 input.dst.llvm-%m1)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x201))))
 (let ((?x298 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (=> $x541 (= ?x298 ?x413))))))))))
 ))
 (let (($x727 (and $x16 $x556)))
 (let (($x728 (= $x727 true)))
 (let (($x127 (= $x728 true)))
 (let (($x372 (= $x127 true)))
 (let (($x754 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x613 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x143))))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv2 32))) ?x101)))
 (let ((?x749 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv3 32))) ?x5)))
 (let ((?x706 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x734 (_ bv1 32))))
 (=> $x391 (= ?x706 ?x749)))))))))))
 ))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x664 (_ bv1 32))))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x734 (_ bv1 32))))
 (= $x391 $x429))))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x171 (= false false)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x734 (_ bv0 32))))
 (=> $x490 $x171)))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x664 (_ bv0 32))))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x734 (_ bv0 32))))
 (= $x490 $x108))))))
 ))
 (let (($x483 (and $x373 $x234)))
 (let (($x748 (and $x483 $x273)))
 (let (($x755 (and $x748 $x754)))
 (let (($x753 (= $x755 true)))
 (let (($x756 (= $x753 true)))
 (let (($x137 (= $x756 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x613 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x143))))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv2 32))) ?x101)))
 (let ((?x749 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv3 32))) ?x5)))
 (let ((?x298 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (=> $x541 (= ?x298 ?x749)))))))))))
 ))
 (let (($x242 (and $x16 $x259)))
 (let (($x250 (= $x242 true)))
 (let (($x750 (= $x250 true)))
 (let (($x751 (= $x750 true)))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x613 input.dst.llvm-%m1)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x201))))
 (let ((?x706 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x734 (_ bv1 32))))
 (=> $x391 (= ?x706 ?x413))))))))))
 ))
 (let (($x633 (and $x748 $x396)))
 (let (($x123 (= $x633 true)))
 (let (($x268 (= $x123 true)))
 (let (($x504 (= $x268 true)))
 (let (($x730 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x427 (bvadd ?x613 input.dst.llvm-%m2)))
 (let ((?x162 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x427 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x427))))
 (let ((?x393 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x427 (_ bv2 32))) ?x162)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x427 (_ bv3 32))) ?x393)))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (=> $x240 (= ?x66 ?x215)))))))))))
 ))
 (let (($x116 (and $x704 $x730)))
 (let (($x165 (= $x116 true)))
 (let (($x700 (= $x165 true)))
 (let (($x702 (= $x700 true)))
 (let (($x588 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x555 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x208 (and $x555 $x588)))
 (let (($x652 (= $x208 true)))
 (let (($x694 (= $x652 true)))
 (let (($x277 (= $x694 true)))
 (let ((?x34 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x557 (= (_ bv0 32) ?x34)))
 (let ((?x532 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x256 (= (_ bv0 32) ?x532)))
 (let ((?x531 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x531)))
 (let ((?x687 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x509 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x687)))
 (let (($x731 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x731 $x509)))
 (let (($x682 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x677 (and $x682 $x147)))
 (let (($x169 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x488 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x656 (and $x488 $x44)))
 (let (($x387 (not $x656)))
 (let (($x475 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x524 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x343 (and $x524 $x475)))
 (let (($x644 (and (not $x343) $x387)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x517 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x517 $x188)))
 (let (($x693 (not $x71)))
 (let (($x711 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x189 $x711)))
 (let (($x619 (and (not $x211) $x693)))
 (let (($x515 (and (and (and (and (and (and $x619 $x644) $x330) $x169) $x677) $x62) $x256)))
 (let (($x457 (and $x515 $x557)))
 (let (($x163 (= $x457 true)))
 (let (($x36 (= $x163 true)))
 (let (($x235 (= $x36 true)))
 (let ((?x441 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x13 (bvneg ?x441)))
 (let (($x337 (= ?x13 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x216 (= $x337 true)))
 (let (($x254 (= $x216 true)))
 (let (($x558 (= ?x13 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x223 (= $x558 true)))
 (let (($x9 (= $x223 true)))
 (let (($x55 (and $x9 $x254)))
 (let (($x51 (and $x55 $x235)))
 (let (($x425 (and $x51 $x277)))
 (let (($x60 (and $x425 $x702)))
 (let (($x736 (and $x60 $x504)))
 (let (($x752 (and $x736 $x751)))
 (let (($x57 (and $x752 $x137)))
 (let (($x738 (and $x57 $x372)))
 (let (($x460 (and $x738 $x655)))
 (let (($x224 (and $x460 $x641)))
 (let (($x721 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x706 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x298 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (=> $x541 (= ?x298 ?x706)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x734 (_ bv1 32))))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (= $x541 $x391))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x734 (_ bv0 32))))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x562 (_ bv0 32))))
 (= $x307 $x490))))))
 ))
 (let (($x414 (and $x255 $x695)))
 (let (($x370 (and $x414 $x260)))
 (let (($x568 (and $x370 $x721)))
 (let (($x120 (and $x568 $x224)))
 (let (($x596 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (=> $x240 (= ?x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x199 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (= $x240 (bvuge ?x635 (_ bv1 32)))))))
 ))
 (let (($x81 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x691 (_ bv0 32))))
 (= $x206 (= ?x635 (_ bv0 32)))))))
 ))
 (let (($x291 (and $x81 $x182)))
 (let (($x314 (and $x291 $x199)))
 (let (($x217 (and $x314 $x596)))
 (let (($x110 (and $x217 $x120)))
 (let (($x783 (=> $x110 $x782)))
 (let (($x784 (not $x783)))
 (let (($x546 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x139 (select solver-mem_2 memmask-bounded-var!)))
 (let (($x667 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x666 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x668 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x666)))
 (let (($x92 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x662 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x666)))
 (let (($x435 (or false (or false (and (and true (or $x662 $x92)) (or $x668 $x667))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x435) (= ?x139 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x139 (_ bv0 8)))))))))))
 ))
 (and (and true $x546) $x784)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x779 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x507 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_2 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x766 (bvadd ?x613 ?x507)))
 (let ((?x770 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x766))))
 (let ((?x773 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv2 32))) ?x770)))
 (let ((?x776 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x766 (_ bv3 32))) ?x773)))
 (let ((?x298 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (=> $x541 (= ?x298 ?x776))))))))))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x664 (_ bv1 32))))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (= $x541 $x429))))))
 ))
 (let (($x695 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x171 (= false false)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x562 (_ bv0 32))))
 (=> $x307 $x171)))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x664 (_ bv0 32))))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x562 (_ bv0 32))))
 (= $x307 $x108))))))
 ))
 (let (($x69 (and $x361 $x695)))
 (let (($x16 (and $x69 $x526)))
 (let (($x780 (and $x16 $x779)))
 (let (($x781 (= $x780 true)))
 (let (($x782 (= $x781 true)))
 (let ((?x456 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x505 (= (_ bv0 2) ?x456)))
 (let (($x168 (= $x505 true)))
 (let (($x641 (= $x168 true)))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x427 (bvadd ?x613 input.dst.llvm-%m2)))
 (let ((?x673 (concat (select input.dst.llvm-mem (bvadd ?x427 (_ bv1 32))) (select input.dst.llvm-mem ?x427))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x427 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x427 (_ bv2 32))) ?x673))))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (=> $x240 (= ?x66 ?x155))))))))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x664 (_ bv1 32))))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (= $x240 $x429))))))
 ))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x171 (= false false)))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x691 (_ bv0 32))))
 (=> $x206 $x171)))))
 ))
 (let (($x535 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x664 (_ bv0 32))))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x691 (_ bv0 32))))
 (= $x206 $x108))))))
 ))
 (let (($x181 (and $x535 $x182)))
 (let (($x704 (and $x181 $x58)))
 (let (($x540 (and $x704 $x383)))
 (let (($x311 (= $x540 true)))
 (let (($x310 (= $x311 true)))
 (let (($x655 (= $x310 true)))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x613 input.dst.llvm-%m1)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x201))))
 (let ((?x298 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (=> $x541 (= ?x298 ?x413))))))))))
 ))
 (let (($x727 (and $x16 $x556)))
 (let (($x728 (= $x727 true)))
 (let (($x127 (= $x728 true)))
 (let (($x372 (= $x127 true)))
 (let (($x754 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x613 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x143))))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv2 32))) ?x101)))
 (let ((?x749 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv3 32))) ?x5)))
 (let ((?x706 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x734 (_ bv1 32))))
 (=> $x391 (= ?x706 ?x749)))))))))))
 ))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x664 (_ bv1 32))))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x734 (_ bv1 32))))
 (= $x391 $x429))))))
 ))
 (let (($x234 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x171 (= false false)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x734 (_ bv0 32))))
 (=> $x490 $x171)))))
 ))
 (let (($x373 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x664 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x664 (_ bv0 32))))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x734 (_ bv0 32))))
 (= $x490 $x108))))))
 ))
 (let (($x483 (and $x373 $x234)))
 (let (($x748 (and $x483 $x273)))
 (let (($x755 (and $x748 $x754)))
 (let (($x753 (= $x755 true)))
 (let (($x756 (= $x753 true)))
 (let (($x137 (= $x756 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x613 input.dst.llvm-%m1)))
 (let ((?x101 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x143))))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv2 32))) ?x101)))
 (let ((?x749 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv3 32))) ?x5)))
 (let ((?x298 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (=> $x541 (= ?x298 ?x749)))))))))))
 ))
 (let (($x242 (and $x16 $x259)))
 (let (($x250 (= $x242 true)))
 (let (($x750 (= $x250 true)))
 (let (($x751 (= $x750 true)))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x143 (bvadd ?x613 input.dst.llvm-%m1)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x201))))
 (let ((?x706 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x734 (_ bv1 32))))
 (=> $x391 (= ?x706 ?x413))))))))))
 ))
 (let (($x633 (and $x748 $x396)))
 (let (($x123 (= $x633 true)))
 (let (($x268 (= $x123 true)))
 (let (($x504 (= $x268 true)))
 (let (($x730 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x427 (bvadd ?x613 input.dst.llvm-%m2)))
 (let ((?x162 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x427 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x427))))
 (let ((?x393 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x427 (_ bv2 32))) ?x162)))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x427 (_ bv3 32))) ?x393)))
 (let ((?x66 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (=> $x240 (= ?x66 ?x215)))))))))))
 ))
 (let (($x116 (and $x704 $x730)))
 (let (($x165 (= $x116 true)))
 (let (($x700 (= $x165 true)))
 (let (($x702 (= $x700 true)))
 (let (($x588 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x555 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x208 (and $x555 $x588)))
 (let (($x652 (= $x208 true)))
 (let (($x694 (= $x652 true)))
 (let (($x277 (= $x694 true)))
 (let ((?x34 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x557 (= (_ bv0 32) ?x34)))
 (let ((?x532 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x256 (= (_ bv0 32) ?x532)))
 (let ((?x531 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x531)))
 (let ((?x687 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x509 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x687)))
 (let (($x731 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x731 $x509)))
 (let (($x682 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x677 (and $x682 $x147)))
 (let (($x169 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x488 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x656 (and $x488 $x44)))
 (let (($x387 (not $x656)))
 (let (($x475 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x524 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x343 (and $x524 $x475)))
 (let (($x644 (and (not $x343) $x387)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x517 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x517 $x188)))
 (let (($x693 (not $x71)))
 (let (($x711 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x189 $x711)))
 (let (($x619 (and (not $x211) $x693)))
 (let (($x515 (and (and (and (and (and (and $x619 $x644) $x330) $x169) $x677) $x62) $x256)))
 (let (($x457 (and $x515 $x557)))
 (let (($x163 (= $x457 true)))
 (let (($x36 (= $x163 true)))
 (let (($x235 (= $x36 true)))
 (let ((?x441 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x13 (bvneg ?x441)))
 (let (($x337 (= ?x13 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x216 (= $x337 true)))
 (let (($x254 (= $x216 true)))
 (let (($x558 (= ?x13 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x223 (= $x558 true)))
 (let (($x9 (= $x223 true)))
 (let (($x55 (and $x9 $x254)))
 (let (($x51 (and $x55 $x235)))
 (let (($x425 (and $x51 $x277)))
 (let (($x60 (and $x425 $x702)))
 (let (($x736 (and $x60 $x504)))
 (let (($x752 (and $x736 $x751)))
 (let (($x57 (and $x752 $x137)))
 (let (($x738 (and $x57 $x372)))
 (let (($x460 (and $x738 $x655)))
 (let (($x224 (and $x460 $x641)))
 (let (($x721 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x706 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x298 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (=> $x541 (= ?x298 ?x706)))))))
 ))
 (let (($x260 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (bvuge ?x734 (_ bv1 32))))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x541 (bvuge ?x562 (_ bv1 32))))
 (= $x541 $x391))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x734 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (= ?x734 (_ bv0 32))))
 (let ((?x562 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x307 (= ?x562 (_ bv0 32))))
 (= $x307 $x490))))))
 ))
 (let (($x414 (and $x255 $x695)))
 (let (($x370 (and $x414 $x260)))
 (let (($x568 (and $x370 $x721)))
 (let (($x120 (and $x568 $x224)))
 (let (($x596 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (=> $x240 (= ?x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x199 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x691 (_ bv1 32))))
 (= $x240 (bvuge ?x635 (_ bv1 32)))))))
 ))
 (let (($x81 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x635 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x691 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x206 (= ?x691 (_ bv0 32))))
 (= $x206 (= ?x635 (_ bv0 32)))))))
 ))
 (let (($x291 (and $x81 $x182)))
 (let (($x314 (and $x291 $x199)))
 (let (($x217 (and $x314 $x596)))
 (let (($x110 (and $x217 $x120)))
 (let (($x783 (=> $x110 $x782)))
 (let (($x784 (not $x783)))
 (let (($x546 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x139 (select solver-mem_2 memmask-bounded-var!)))
 (let (($x667 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x666 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x668 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x666)))
 (let (($x92 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x662 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x666)))
 (let (($x435 (or false (or false (and (and true (or $x662 $x92)) (or $x668 $x667))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x435) (= ?x139 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x139 (_ bv0 8)))))))))))
 ))
 (and (and true $x546) $x784)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!142))
  (define-fun solver-mem_2 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!140))
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!140))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xffbf7ffc)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!141))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00003fc0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!147 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000002)
        (= x!0 #x00000001)
        (= x!0 #x00000004)
        (= x!0 #x00000003)))
  (define-fun k!144 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000004 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000004)
                    #x00000003)))
      (ite (bvule #x00000002 x!0)
           (ite (bvule #x00000003 x!0) a!1 #x00000002)
           #x00000001)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!147 (k!144 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000004) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000003) true
      (input.spec-%var-m2-1.0.1 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!148 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000002)
        (= x!0 #x00000001)
        (= x!0 #x00000000)
        (= x!0 #x00000010)
        (= x!0 #x00000020)))
  (define-fun input.spec-%var-m1-1.0.1!149 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000002)
        (= x!0 #x00000001)
        (= x!0 #x00000000)
        (= x!0 #x00000010)
        (= x!0 #x00000020)))
  (define-fun k!143 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xffbf800d x!0)
                    (ite (bvule #xffbf800e x!0)
                         (ite (bvule #xffbf800f x!0) #xffbf800f #xffbf800e)
                         #xffbf800d)
                    #xffbf800c)))
    (let ((a!2 (ite (bvule #xffbf800a x!0)
                    (ite (bvule #xffbf800b x!0)
                         (ite (bvule #xffbf800c x!0) a!1 #xffbf800b)
                         #xffbf800a)
                    #xffbf8009)))
    (let ((a!3 (ite (bvule #xffbf8007 x!0)
                    (ite (bvule #xffbf8008 x!0)
                         (ite (bvule #xffbf8009 x!0) a!2 #xffbf8008)
                         #xffbf8007)
                    #xffbf8006)))
    (let ((a!4 (ite (bvule #xffbf8004 x!0)
                    (ite (bvule #xffbf8005 x!0)
                         (ite (bvule #xffbf8006 x!0) a!3 #xffbf8005)
                         #xffbf8004)
                    #xffbf8003)))
    (let ((a!5 (ite (bvule #xffbf8001 x!0)
                    (ite (bvule #xffbf8002 x!0)
                         (ite (bvule #xffbf8003 x!0) a!4 #xffbf8002)
                         #xffbf8001)
                    #xffbf8000)))
    (let ((a!6 (ite (bvule #xffbf7ffe x!0)
                    (ite (bvule #xffbf7fff x!0)
                         (ite (bvule #xffbf8000 x!0) a!5 #xffbf7fff)
                         #xffbf7ffe)
                    #xffbf7ffd)))
    (let ((a!7 (ite (bvule #x14004025 x!0)
                    (ite (bvule #xffbf7ffc x!0)
                         (ite (bvule #xffbf7ffd x!0) a!6 #xffbf7ffc)
                         #x14004025)
                    #x14004024)))
    (let ((a!8 (ite (bvule #x14004022 x!0)
                    (ite (bvule #x14004023 x!0)
                         (ite (bvule #x14004024 x!0) a!7 #x14004023)
                         #x14004022)
                    #x00004043)))
    (let ((a!9 (ite (bvule #x00004041 x!0)
                    (ite (bvule #x00004042 x!0)
                         (ite (bvule #x00004043 x!0) a!8 #x00004042)
                         #x00004041)
                    #x00004040)))
    (let ((a!10 (ite (bvule #x00004002 x!0)
                     (ite (bvule #x00004003 x!0)
                          (ite (bvule #x00004040 x!0) a!9 #x00004003)
                          #x00004002)
                     #x00004001)))
    (let ((a!11 (ite (bvule #x00003fcb x!0)
                     (ite (bvule #x00004000 x!0)
                          (ite (bvule #x00004001 x!0) a!10 #x00004000)
                          #x00003fcb)
                     #x00003fca)))
    (let ((a!12 (ite (bvule #x00003fc8 x!0)
                     (ite (bvule #x00003fc9 x!0)
                          (ite (bvule #x00003fca x!0) a!11 #x00003fc9)
                          #x00003fc8)
                     #x00003fc7)))
    (let ((a!13 (ite (bvule #x00003fc5 x!0)
                     (ite (bvule #x00003fc6 x!0)
                          (ite (bvule #x00003fc7 x!0) a!12 #x00003fc6)
                          #x00003fc5)
                     #x00003fc4)))
    (let ((a!14 (ite (bvule #x00003fc2 x!0)
                     (ite (bvule #x00003fc3 x!0)
                          (ite (bvule #x00003fc4 x!0) a!13 #x00003fc3)
                          #x00003fc2)
                     #x00003fc1)))
    (let ((a!15 (ite (bvule #x00000008 x!0)
                     (ite (bvule #x00003fc0 x!0)
                          (ite (bvule #x00003fc1 x!0) a!14 #x00003fc0)
                          #x00000008)
                     #x00000007)))
    (let ((a!16 (ite (bvule #x00000004 x!0)
                     (ite (bvule #x00000005 x!0)
                          (ite (bvule #x00000007 x!0) a!15 #x00000005)
                          #x00000004)
                     #x00000003)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000003 x!0) a!16 #x00000001)
           #x00000000))))))))))))))))))
  (define-fun k!142 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00004041) #x01
    (ite (= x!0 #x00003fca) #x02
    (ite (= x!0 #x00003fc1) #x80
    (ite (= x!0 #x00003fc8) #x01
    (ite (= x!0 #xffbf8004) #x04
    (ite (= x!0 #xffbf8000) #x40
    (ite (= x!0 #xffbf800c) #x08
    (ite (= x!0 #xffbf8003) #x20
    (ite (= x!0 #xffbf8005) #x10
    (ite (= x!0 #xffbf8001) #x02
    (ite (= x!0 #xffbf8007) #x20
    (ite (= x!0 #x00004042) #x80
    (ite (= x!0 #x00004002) #x01
      #x00))))))))))))))
  (define-fun k!140!146 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00003fc0) #x00
    (ite (= x!0 #xffbf800a) #x00
    (ite (= x!0 #x00003fc9) #x00
    (ite (= x!0 #x00003fcb) #x00
    (ite (= x!0 #x00003fc8) #x01
    (ite (= x!0 #x00004043) #x00
    (ite (= x!0 #x00003fc1) #x80
    (ite (= x!0 #xffbf7ffe) #x00
    (ite (= x!0 #xffbf8002) #x00
    (ite (= x!0 #x00003fc4) #x00
    (ite (= x!0 #x00004000) #x00
    (ite (= x!0 #xffbf8008) #x00
    (ite (= x!0 #x00003fc6) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #xffbf8003) #x20
    (ite (= x!0 #xffbf800b) #x00
    (ite (= x!0 #x00003fc7) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #xffbf8005) #x10
    (ite (= x!0 #xffbf8001) #x02
    (ite (= x!0 #x14004025) #x00
    (ite (= x!0 #x14004022) #x00
    (ite (= x!0 #x14004023) #x00
    (ite (= x!0 #x00003fc3) #x00
    (ite (= x!0 #x00004042) #x80
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00004002) #x01
    (ite (= x!0 #x00004041) #x01
    (ite (= x!0 #xffbf800d) #x00
    (ite (= x!0 #x00000008) #x20
    (ite (= x!0 #x00003fca) #x02
    (ite (= x!0 #xffbf7ffd) #x00
    (ite (= x!0 #xffbf7ffc) #x00
    (ite (= x!0 #x00004001) #x00
    (ite (= x!0 #x00004003) #x00
    (ite (= x!0 #xffbf8006) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #xffbf8004) #x04
    (ite (= x!0 #xffbf8000) #x40
    (ite (= x!0 #xffbf800c) #x08
    (ite (= x!0 #xffbf800f) #x00
    (ite (= x!0 #xffbf800e) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x14004024) #x00
    (ite (= x!0 #xffbf8009) #x00
    (ite (= x!0 #xffbf7fff) #x00
    (ite (= x!0 #x00003fc2) #x00
    (ite (= x!0 #x00003fc5) #x00
    (ite (= x!0 #xffbf8007) #x20
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00004040) #x00
      #x03))))))))))))))))))))))))))))))))))))))))))))))))))))
  (define-fun k!140 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!140!146 (k!143 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x20000240
    (ite (= x!0 #x00000004) #x00000008
    (ite (= x!0 #x00000002) #x20001004
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!142 (bvadd #xffbf7fff (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #xffbf7ffe (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #xffbf7ffd (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #xffbf7ffc (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!140 (bvadd #xffbf7fff (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #xffbf7ffe (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #xffbf7ffd (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #xffbf7ffc (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!140))
              (= x!3 (_ as-array k!141))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #xffbf7ffc))
      #x14004022
      #xffbf800d))
  (define-fun k!145 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000020 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000020)
                    #x00000010)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0)
                (ite (bvule #x00000010 x!0) a!1 #x00000002)
                #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!149 (k!145 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00008000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000020) #x00800100
    (ite (= x!0 #x00000002) #x00020001
    (ite (= x!0 #x00000010) #x00010000
      (let ((a!1 (concat (k!142 (bvadd #x00003fc3 (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x00003fc2 (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x00003fc1 (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x00003fc0 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!140 (bvadd #x00003fc3 (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #x00003fc2 (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #x00003fc1 (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #x00003fc0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))))))
  (define-fun k!141 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x02)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!148
      (k!145 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00008000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000020) #x00800100
    (ite (= x!0 #x00000010) #x00010000
    (ite (= x!0 #x00000002) #x00020001
      (let ((a!1 (concat (k!140 (bvadd #x00003fc3 (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #x00003fc2 (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #x00003fc1 (bvmul #x00000004 x!0)))
                         (k!140 (bvadd #x00003fc0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000001) #x20000240
    (ite (= x!0 #x00000004) #x00000008
    (ite (= x!0 #x00000002) #x20001004
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_3 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x300 (bvadd ?x626 ?x360)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x300))))
 (let ((?x549 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x300 (_ bv2 32))) ?x12)))
 (let ((?x762 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x300 (_ bv3 32))) ?x549)))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (=> $x355 (= ?x358 ?x762))))))))))))
 ))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (bvuge ?x716 (_ bv1 32))))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (= $x355 $x650))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x660 (= false false)))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x591 (_ bv0 32))))
 (=> $x682 $x660)))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (= ?x716 (_ bv0 32))))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x591 (_ bv0 32))))
 (= $x682 $x618))))))
 ))
 (let (($x378 (and $x205 $x403)))
 (let (($x388 (and $x378 $x547)))
 (let (($x470 (and $x388 $x227)))
 (let (($x437 (= $x470 true)))
 (let (($x514 (= $x437 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x537 (= (_ bv0 2) ?x24)))
 (let (($x312 (= $x537 true)))
 (let (($x82 (= $x312 true)))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x423 (bvadd ?x626 input.dst.llvm-%m2)))
 (let ((?x573 (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv1 32))) (select input.dst.llvm-mem ?x423))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv2 32))) ?x573))))
 (let ((?x721 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (=> $x255 (= ?x721 ?x167))))))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (bvuge ?x716 (_ bv1 32))))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (= $x255 $x650))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x660 (= false false)))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x45 (_ bv0 32))))
 (=> $x182 $x660)))))
 ))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (= ?x716 (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x45 (_ bv0 32))))
 (= $x182 $x618))))))
 ))
 (let (($x407 (and $x186 $x314)))
 (let (($x632 (and $x407 $x576)))
 (let (($x289 (and $x632 $x529)))
 (let (($x249 (= $x289 true)))
 (let (($x590 (= $x249 true)))
 (let (($x521 (= $x590 true)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x37 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x302))))
 (let ((?x484 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (=> $x246 (= ?x484 ?x198))))))))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (bvuge ?x716 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (= $x246 $x650))))))
 ))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x660 (= false false)))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (= ?x202 (_ bv0 32))))
 (=> $x687 $x660)))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (= ?x716 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (= ?x202 (_ bv0 32))))
 (= $x687 $x618))))))
 ))
 (let (($x46 (and $x489 $x531)))
 (let (($x377 (and $x46 $x132)))
 (let (($x252 (and $x377 $x42)))
 (let (($x6 (= $x252 true)))
 (let (($x131 (= $x6 true)))
 (let (($x464 (= $x131 true)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x37 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x37))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv2 32))) ?x498)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv3 32))) ?x203)))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (=> $x355 (= ?x358 ?x575)))))))))))
 ))
 (let (($x571 (and $x388 $x642)))
 (let (($x439 (= $x571 true)))
 (let (($x408 (= $x439 true)))
 (let (($x270 (= $x408 true)))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x37 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x37))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv2 32))) ?x498)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv3 32))) ?x203)))
 (let ((?x484 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (=> $x246 (= ?x484 ?x575)))))))))))
 ))
 (let (($x345 (and $x377 $x218)))
 (let (($x713 (= $x345 true)))
 (let (($x73 (= $x713 true)))
 (let (($x243 (= $x73 true)))
 (let (($x714 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x37 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x302))))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (=> $x355 (= ?x358 ?x198))))))))))
 ))
 (let (($x401 (and $x388 $x714)))
 (let (($x72 (= $x401 true)))
 (let (($x294 (= $x72 true)))
 (let (($x570 (= $x294 true)))
 (let (($x579 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x423 (bvadd ?x626 input.dst.llvm-%m2)))
 (let ((?x472 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x423 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x423))))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x423 (_ bv2 32))) ?x472)))
 (let ((?x552 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x423 (_ bv3 32))) ?x152)))
 (let ((?x721 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (=> $x255 (= ?x721 ?x552)))))))))))
 ))
 (let (($x698 (and $x632 $x579)))
 (let (($x359 (= $x698 true)))
 (let (($x207 (= $x359 true)))
 (let (($x587 (= $x207 true)))
 (let (($x433 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x101 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x225 (and $x101 $x433)))
 (let (($x259 (= $x225 true)))
 (let (($x242 (= $x259 true)))
 (let (($x250 (= $x242 true)))
 (let ((?x396 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x633 (= (_ bv0 32) ?x396)))
 (let ((?x679 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x510 (= (_ bv0 32) ?x679)))
 (let ((?x369 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x369)))
 (let ((?x506 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x506)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (and $x85 $x109)))
 (let (($x683 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x683 $x176)))
 (let (($x327 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x373 $x49)))
 (let (($x483 (not $x234)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x702 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x593 (and $x702 $x60)))
 (let (($x273 (and (not $x593) $x483)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x730 (and $x712 $x150)))
 (let (($x116 (not $x730)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x393 (and $x117 $x162)))
 (let (($x700 (and (not $x393) $x116)))
 (let (($x361 (and (and (and (and (and (and $x700 $x273) $x187) $x327) $x201) $x413) $x510)))
 (let (($x69 (and $x361 $x633)))
 (let (($x452 (= $x69 true)))
 (let (($x526 (= $x452 true)))
 (let (($x16 (= $x526 true)))
 (let ((?x429 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x293 (bvneg ?x429)))
 (let (($x102 (= ?x293 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x326 (= $x102 true)))
 (let (($x622 (= $x326 true)))
 (let (($x704 (= ?x293 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x580 (= $x704 true)))
 (let (($x613 (= $x580 true)))
 (let (($x741 (and $x613 $x622)))
 (let (($x226 (and $x741 $x16)))
 (let (($x750 (and $x226 $x250)))
 (let (($x245 (and $x750 $x587)))
 (let (($x554 (and $x245 $x570)))
 (let (($x473 (and $x554 $x243)))
 (let (($x23 (and $x473 $x270)))
 (let (($x422 (and $x23 $x464)))
 (let (($x285 (and $x422 $x521)))
 (let (($x746 (and $x285 $x82)))
 (let (($x108 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x484 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (=> $x246 (= ?x484 ?x358)))))))
 ))
 (let (($x555 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (= $x246 $x355))))))
 ))
 (let (($x147 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x591 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (= ?x202 (_ bv0 32))))
 (= $x687 $x682))))))
 ))
 (let (($x62 (and $x147 $x531)))
 (let (($x661 (and $x62 $x555)))
 (let (($x476 (and $x661 $x108)))
 (let (($x376 (and $x476 $x746)))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x721 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (=> $x255 (= ?x721 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x695 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (= $x255 (bvuge ?x151 (_ bv1 32)))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x45 (_ bv0 32))))
 (= $x182 (= ?x151 (_ bv0 32)))))))
 ))
 (let (($x66 (and $x240 $x314)))
 (let (($x414 (and $x66 $x695)))
 (let (($x441 (and $x414 $x196)))
 (let (($x160 (and $x441 $x376)))
 (let (($x760 (=> $x160 $x514)))
 (let (($x763 (not $x760)))
 (let (($x690 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x209 (select solver-mem_3 memmask-bounded-var!)))
 (let (($x530 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x287 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x676 (or false (or false (and (and true (or $x68 $x287)) (or $x59 $x530))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x676) (= ?x209 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x209 (_ bv0 8)))))))))))
 ))
 (and (and true $x690) $x763)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x360 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_3 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x300 (bvadd ?x626 ?x360)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x300))))
 (let ((?x549 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x300 (_ bv2 32))) ?x12)))
 (let ((?x762 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x300 (_ bv3 32))) ?x549)))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (=> $x355 (= ?x358 ?x762))))))))))))
 ))
 (let (($x547 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (bvuge ?x716 (_ bv1 32))))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (= $x355 $x650))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x660 (= false false)))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x591 (_ bv0 32))))
 (=> $x682 $x660)))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (= ?x716 (_ bv0 32))))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x591 (_ bv0 32))))
 (= $x682 $x618))))))
 ))
 (let (($x378 (and $x205 $x403)))
 (let (($x388 (and $x378 $x547)))
 (let (($x470 (and $x388 $x227)))
 (let (($x437 (= $x470 true)))
 (let (($x514 (= $x437 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x537 (= (_ bv0 2) ?x24)))
 (let (($x312 (= $x537 true)))
 (let (($x82 (= $x312 true)))
 (let (($x529 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x423 (bvadd ?x626 input.dst.llvm-%m2)))
 (let ((?x573 (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv1 32))) (select input.dst.llvm-mem ?x423))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x423 (_ bv2 32))) ?x573))))
 (let ((?x721 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (=> $x255 (= ?x721 ?x167))))))))))
 ))
 (let (($x576 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (bvuge ?x716 (_ bv1 32))))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (= $x255 $x650))))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x660 (= false false)))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x45 (_ bv0 32))))
 (=> $x182 $x660)))))
 ))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (= ?x716 (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x45 (_ bv0 32))))
 (= $x182 $x618))))))
 ))
 (let (($x407 (and $x186 $x314)))
 (let (($x632 (and $x407 $x576)))
 (let (($x289 (and $x632 $x529)))
 (let (($x249 (= $x289 true)))
 (let (($x590 (= $x249 true)))
 (let (($x521 (= $x590 true)))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x37 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x302))))
 (let ((?x484 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (=> $x246 (= ?x484 ?x198))))))))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x650 (bvuge ?x716 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (= $x246 $x650))))))
 ))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x660 (= false false)))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (= ?x202 (_ bv0 32))))
 (=> $x687 $x660)))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x716 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x618 (= ?x716 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (= ?x202 (_ bv0 32))))
 (= $x687 $x618))))))
 ))
 (let (($x46 (and $x489 $x531)))
 (let (($x377 (and $x46 $x132)))
 (let (($x252 (and $x377 $x42)))
 (let (($x6 (= $x252 true)))
 (let (($x131 (= $x6 true)))
 (let (($x464 (= $x131 true)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x37 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x37))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv2 32))) ?x498)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv3 32))) ?x203)))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (=> $x355 (= ?x358 ?x575)))))))))))
 ))
 (let (($x571 (and $x388 $x642)))
 (let (($x439 (= $x571 true)))
 (let (($x408 (= $x439 true)))
 (let (($x270 (= $x408 true)))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x37 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x498 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x37))))
 (let ((?x203 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv2 32))) ?x498)))
 (let ((?x575 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x37 (_ bv3 32))) ?x203)))
 (let ((?x484 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (=> $x246 (= ?x484 ?x575)))))))))))
 ))
 (let (($x345 (and $x377 $x218)))
 (let (($x713 (= $x345 true)))
 (let (($x73 (= $x713 true)))
 (let (($x243 (= $x73 true)))
 (let (($x714 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x37 (bvadd ?x626 input.dst.llvm-%m1)))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv1 32))) (select input.dst.llvm-mem ?x37))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x37 (_ bv2 32))) ?x302))))
 (let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (=> $x355 (= ?x358 ?x198))))))))))
 ))
 (let (($x401 (and $x388 $x714)))
 (let (($x72 (= $x401 true)))
 (let (($x294 (= $x72 true)))
 (let (($x570 (= $x294 true)))
 (let (($x579 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x626 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x423 (bvadd ?x626 input.dst.llvm-%m2)))
 (let ((?x472 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x423 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x423))))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x423 (_ bv2 32))) ?x472)))
 (let ((?x552 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x423 (_ bv3 32))) ?x152)))
 (let ((?x721 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (=> $x255 (= ?x721 ?x552)))))))))))
 ))
 (let (($x698 (and $x632 $x579)))
 (let (($x359 (= $x698 true)))
 (let (($x207 (= $x359 true)))
 (let (($x587 (= $x207 true)))
 (let (($x433 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x101 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x225 (and $x101 $x433)))
 (let (($x259 (= $x225 true)))
 (let (($x242 (= $x259 true)))
 (let (($x250 (= $x242 true)))
 (let ((?x396 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x633 (= (_ bv0 32) ?x396)))
 (let ((?x679 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x510 (= (_ bv0 32) ?x679)))
 (let ((?x369 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x413 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x369)))
 (let ((?x506 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x506)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (and $x85 $x109)))
 (let (($x683 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x683 $x176)))
 (let (($x327 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x373 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x373 $x49)))
 (let (($x483 (not $x234)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x702 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x593 (and $x702 $x60)))
 (let (($x273 (and (not $x593) $x483)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x712 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x730 (and $x712 $x150)))
 (let (($x116 (not $x730)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x393 (and $x117 $x162)))
 (let (($x700 (and (not $x393) $x116)))
 (let (($x361 (and (and (and (and (and (and $x700 $x273) $x187) $x327) $x201) $x413) $x510)))
 (let (($x69 (and $x361 $x633)))
 (let (($x452 (= $x69 true)))
 (let (($x526 (= $x452 true)))
 (let (($x16 (= $x526 true)))
 (let ((?x429 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x293 (bvneg ?x429)))
 (let (($x102 (= ?x293 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x326 (= $x102 true)))
 (let (($x622 (= $x326 true)))
 (let (($x704 (= ?x293 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x580 (= $x704 true)))
 (let (($x613 (= $x580 true)))
 (let (($x741 (and $x613 $x622)))
 (let (($x226 (and $x741 $x16)))
 (let (($x750 (and $x226 $x250)))
 (let (($x245 (and $x750 $x587)))
 (let (($x554 (and $x245 $x570)))
 (let (($x473 (and $x554 $x243)))
 (let (($x23 (and $x473 $x270)))
 (let (($x422 (and $x23 $x464)))
 (let (($x285 (and $x422 $x521)))
 (let (($x746 (and $x285 $x82)))
 (let (($x108 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x358 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x484 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (=> $x246 (= ?x484 ?x358)))))))
 ))
 (let (($x555 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x591 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x202 (_ bv1 32))))
 (= $x246 $x355))))))
 ))
 (let (($x147 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x591 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x682 (= ?x591 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x687 (= ?x202 (_ bv0 32))))
 (= $x687 $x682))))))
 ))
 (let (($x62 (and $x147 $x531)))
 (let (($x661 (and $x62 $x555)))
 (let (($x476 (and $x661 $x108)))
 (let (($x376 (and $x476 $x746)))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x721 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (=> $x255 (= ?x721 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x695 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x45 (_ bv1 32))))
 (= $x255 (bvuge ?x151 (_ bv1 32)))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x45 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x45 (_ bv0 32))))
 (= $x182 (= ?x151 (_ bv0 32)))))))
 ))
 (let (($x66 (and $x240 $x314)))
 (let (($x414 (and $x66 $x695)))
 (let (($x441 (and $x414 $x196)))
 (let (($x160 (and $x441 $x376)))
 (let (($x760 (=> $x160 $x514)))
 (let (($x763 (not $x760)))
 (let (($x690 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x209 (select solver-mem_3 memmask-bounded-var!)))
 (let (($x530 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x287 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x676 (or false (or false (and (and true (or $x68 $x287)) (or $x59 $x530))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x676) (= ?x209 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x209 (_ bv0 8)))))))))))
 ))
 (and (and true $x690) $x763)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!3))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x140f2ab8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun solver-mem_3 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x510f0dec)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x510f0def)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x140f2abb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x510f0dec)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x140f2ab8)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x510f0dee) #x20
    (ite (= x!0 #x1b000007) #x40
      #x00)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!8 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!8 (k!7 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!10 (k!7 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!9 (k!6 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x704d05f2) #xaf
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!4 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!4 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!4 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!2))
              (= x!3 (_ as-array k!3))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x1b000005
      #x510f0def))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x1b000007) #x40
      #x00))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x175 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x149)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x743 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x296))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (=> $x147 (= ?x108 ?x743))))))))))
 ))
 (let (($x729 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x754 (bvuge ?x463 (_ bv1 32))))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (= $x147 $x754))))))
 ))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x513 (= false false)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (= ?x199 (_ bv0 32))))
 (=> $x314 $x513)))))
 ))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x463 (_ bv0 32))))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (= ?x199 (_ bv0 32))))
 (= $x314 $x545))))))
 ))
 (let (($x188 (and $x517 $x414)))
 (let (($x106 (and $x188 $x729)))
 (let (($x640 (and $x106 $x465)))
 (let (($x354 (= $x640 true)))
 (let (($x551 (= $x354 true)))
 (let ((?x650 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x138 (bvneg ?x650)))
 (let (($x33 (= ?x138 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x474 (= $x33 true)))
 (let (($x375 (= $x474 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x584 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv1 32))) (select input.dst.llvm-mem ?x584))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv2 32))) ?x269))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (=> $x147 (= ?x108 ?x122))))))))))
 ))
 (let (($x8 (and $x106 $x297)))
 (let (($x318 (= $x8 true)))
 (let (($x497 (= $x318 true)))
 (let (($x363 (= $x497 true)))
 (let (($x738 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x267 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x78))))
 (let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (=> $x306 (= ?x148 ?x134))))))))))
 ))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x754 (bvuge ?x463 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (= $x306 $x754))))))
 ))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x513 (= false false)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x32 (_ bv0 32))))
 (=> $x506 $x513)))))
 ))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x463 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x32 (_ bv0 32))))
 (= $x506 $x545))))))
 ))
 (let (($x544 (and $x339 $x369)))
 (let (($x343 (and $x544 $x524)))
 (let (($x727 (and $x343 $x738)))
 (let (($x718 (= $x727 true)))
 (let (($x728 (= $x718 true)))
 (let (($x29 (= $x728 true)))
 (let (($x562 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x267 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x425 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x267))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv2 32))) ?x425)))
 (let ((?x487 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv3 32))) ?x139)))
 (let ((?x757 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x572 (bvuge ?x504 (_ bv1 32))))
 (=> $x572 (= ?x757 ?x487)))))))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x754 (bvuge ?x463 (_ bv1 32))))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x572 (bvuge ?x504 (_ bv1 32))))
 (= $x572 $x754))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x513 (= false false)))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x504 (_ bv0 32))))
 (=> $x683 $x513)))))
 ))
 (let (($x784 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x463 (_ bv0 32))))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x504 (_ bv0 32))))
 (= $x683 $x545))))))
 ))
 (let (($x492 (and $x784 $x263)))
 (let (($x438 (and $x492 $x121)))
 (let (($x307 (and $x438 $x562)))
 (let (($x734 (= $x307 true)))
 (let (($x490 (= $x734 true)))
 (let (($x410 (= $x490 true)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x267 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x425 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x267))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv2 32))) ?x425)))
 (let ((?x487 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv3 32))) ?x139)))
 (let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (=> $x306 (= ?x148 ?x487)))))))))))
 ))
 (let (($x15 (and $x343 $x417)))
 (let (($x185 (= $x15 true)))
 (let (($x567 (= $x185 true)))
 (let (($x212 (= $x567 true)))
 (let (($x665 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x267 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x78))))
 (let ((?x757 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x572 (bvuge ?x504 (_ bv1 32))))
 (=> $x572 (= ?x757 ?x134))))))))))
 ))
 (let (($x233 (and $x438 $x665)))
 (let (($x668 (= $x233 true)))
 (let (($x275 (= $x668 true)))
 (let (($x478 (= $x275 true)))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x584 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x584 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x584))))
 (let ((?x689 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x584 (_ bv2 32))) ?x390)))
 (let ((?x453 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x584 (_ bv3 32))) ?x689)))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (=> $x147 (= ?x108 ?x453)))))))))))
 ))
 (let (($x646 (and $x106 $x467)))
 (let (($x616 (= $x646 true)))
 (let (($x385 (= $x616 true)))
 (let (($x606 (= $x385 true)))
 (let ((?x357 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x86 (= (_ bv0 32) ?x357)))
 (let ((?x377 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x442 (= (_ bv0 32) ?x377)))
 (let ((?x317 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x317)))
 (let ((?x554 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x518 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x554)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x489 (and $x294 $x518)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x72 $x489)))
 (let (($x401 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x364 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x374 (and $x179 $x434)))
 (let (($x302 (not $x374)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x368 (and $x140 $x366)))
 (let (($x198 (and (not $x368) $x302)))
 (let (($x547 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x586 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x388 (and $x586 $x547)))
 (let (($x18 (not $x388)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x403 (and $x290 $x447)))
 (let (($x371 (and (not $x403) $x18)))
 (let (($x634 (and (and (and (and (and (and $x371 $x198) $x364) $x401) $x46) $x132) $x442)))
 (let (($x218 (and $x634 $x86)))
 (let (($x345 (= $x218 true)))
 (let (($x713 (= $x345 true)))
 (let (($x73 (= $x713 true)))
 (let ((?x159 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x579 (= (_ bv0 2) ?x159)))
 (let (($x698 (= $x579 true)))
 (let (($x359 (= $x698 true)))
 (let (($x91 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x127 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x180 (and $x127 $x91)))
 (let (($x669 (= $x180 true)))
 (let (($x472 (= $x669 true)))
 (let (($x152 (= $x472 true)))
 (let (($x632 (= ?x138 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x137 (= $x632 true)))
 (let (($x626 (= $x137 true)))
 (let (($x552 (and $x626 $x152)))
 (let (($x207 (and $x552 $x359)))
 (let (($x243 (and $x207 $x73)))
 (let (($x481 (and $x243 $x606)))
 (let (($x600 (and $x481 $x478)))
 (let (($x691 (and $x600 $x212)))
 (let (($x260 (and $x691 $x410)))
 (let (($x397 (and $x260 $x29)))
 (let (($x629 (and $x397 $x363)))
 (let (($x553 (and $x629 $x375)))
 (let (($x618 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (=> $x306 (= ?x148 ?x757)))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x572 (bvuge ?x504 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (= $x306 $x572))))))
 ))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x504 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x32 (_ bv0 32))))
 (= $x506 $x683))))))
 ))
 (let (($x413 (and $x176 $x369)))
 (let (($x5 (and $x413 $x101)))
 (let (($x469 (and $x5 $x618)))
 (let (($x399 (and $x469 $x553)))
 (let (($x181 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (=> $x147 (= ?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x291 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (= $x147 (bvuge ?x291 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x291 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (= ?x199 (_ bv0 32))))
 (= $x314 (= ?x291 (_ bv0 32)))))))
 ))
 (let (($x721 (and $x255 $x414)))
 (let (($x62 (and $x721 $x531)))
 (let (($x429 (and $x62 $x181)))
 (let (($x292 (and $x429 $x399)))
 (let (($x129 (=> $x292 $x551)))
 (not $x129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x175 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x149)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x743 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x296))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (=> $x147 (= ?x108 ?x743))))))))))
 ))
 (let (($x729 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x754 (bvuge ?x463 (_ bv1 32))))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (= $x147 $x754))))))
 ))
 (let (($x414 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x513 (= false false)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (= ?x199 (_ bv0 32))))
 (=> $x314 $x513)))))
 ))
 (let (($x517 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x463 (_ bv0 32))))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (= ?x199 (_ bv0 32))))
 (= $x314 $x545))))))
 ))
 (let (($x188 (and $x517 $x414)))
 (let (($x106 (and $x188 $x729)))
 (let (($x640 (and $x106 $x465)))
 (let (($x354 (= $x640 true)))
 (let (($x551 (= $x354 true)))
 (let ((?x650 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x138 (bvneg ?x650)))
 (let (($x33 (= ?x138 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x474 (= $x33 true)))
 (let (($x375 (= $x474 true)))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x584 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv1 32))) (select input.dst.llvm-mem ?x584))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv2 32))) ?x269))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (=> $x147 (= ?x108 ?x122))))))))))
 ))
 (let (($x8 (and $x106 $x297)))
 (let (($x318 (= $x8 true)))
 (let (($x497 (= $x318 true)))
 (let (($x363 (= $x497 true)))
 (let (($x738 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x267 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x78))))
 (let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (=> $x306 (= ?x148 ?x134))))))))))
 ))
 (let (($x524 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x754 (bvuge ?x463 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (= $x306 $x754))))))
 ))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x513 (= false false)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x32 (_ bv0 32))))
 (=> $x506 $x513)))))
 ))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x463 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x32 (_ bv0 32))))
 (= $x506 $x545))))))
 ))
 (let (($x544 (and $x339 $x369)))
 (let (($x343 (and $x544 $x524)))
 (let (($x727 (and $x343 $x738)))
 (let (($x718 (= $x727 true)))
 (let (($x728 (= $x718 true)))
 (let (($x29 (= $x728 true)))
 (let (($x562 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x267 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x425 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x267))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv2 32))) ?x425)))
 (let ((?x487 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv3 32))) ?x139)))
 (let ((?x757 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x572 (bvuge ?x504 (_ bv1 32))))
 (=> $x572 (= ?x757 ?x487)))))))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x754 (bvuge ?x463 (_ bv1 32))))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x572 (bvuge ?x504 (_ bv1 32))))
 (= $x572 $x754))))))
 ))
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x513 (= false false)))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x504 (_ bv0 32))))
 (=> $x683 $x513)))))
 ))
 (let (($x784 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x463 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (= ?x463 (_ bv0 32))))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x504 (_ bv0 32))))
 (= $x683 $x545))))))
 ))
 (let (($x492 (and $x784 $x263)))
 (let (($x438 (and $x492 $x121)))
 (let (($x307 (and $x438 $x562)))
 (let (($x734 (= $x307 true)))
 (let (($x490 (= $x734 true)))
 (let (($x410 (= $x490 true)))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x267 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x425 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x267))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv2 32))) ?x425)))
 (let ((?x487 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv3 32))) ?x139)))
 (let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (=> $x306 (= ?x148 ?x487)))))))))))
 ))
 (let (($x15 (and $x343 $x417)))
 (let (($x185 (= $x15 true)))
 (let (($x567 (= $x185 true)))
 (let (($x212 (= $x567 true)))
 (let (($x665 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x267 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x78))))
 (let ((?x757 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x572 (bvuge ?x504 (_ bv1 32))))
 (=> $x572 (= ?x757 ?x134))))))))))
 ))
 (let (($x233 (and $x438 $x665)))
 (let (($x668 (= $x233 true)))
 (let (($x275 (= $x668 true)))
 (let (($x478 (= $x275 true)))
 (let (($x467 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x584 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x390 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x584 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x584))))
 (let ((?x689 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x584 (_ bv2 32))) ?x390)))
 (let ((?x453 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x584 (_ bv3 32))) ?x689)))
 (let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (=> $x147 (= ?x108 ?x453)))))))))))
 ))
 (let (($x646 (and $x106 $x467)))
 (let (($x616 (= $x646 true)))
 (let (($x385 (= $x616 true)))
 (let (($x606 (= $x385 true)))
 (let ((?x357 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x86 (= (_ bv0 32) ?x357)))
 (let ((?x377 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x442 (= (_ bv0 32) ?x377)))
 (let ((?x317 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x317)))
 (let ((?x554 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x518 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x554)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x489 (and $x294 $x518)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (and $x72 $x489)))
 (let (($x401 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x364 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x434 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x374 (and $x179 $x434)))
 (let (($x302 (not $x374)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x368 (and $x140 $x366)))
 (let (($x198 (and (not $x368) $x302)))
 (let (($x547 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x586 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x388 (and $x586 $x547)))
 (let (($x18 (not $x388)))
 (let (($x447 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x403 (and $x290 $x447)))
 (let (($x371 (and (not $x403) $x18)))
 (let (($x634 (and (and (and (and (and (and $x371 $x198) $x364) $x401) $x46) $x132) $x442)))
 (let (($x218 (and $x634 $x86)))
 (let (($x345 (= $x218 true)))
 (let (($x713 (= $x345 true)))
 (let (($x73 (= $x713 true)))
 (let ((?x159 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x579 (= (_ bv0 2) ?x159)))
 (let (($x698 (= $x579 true)))
 (let (($x359 (= $x698 true)))
 (let (($x91 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x127 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x180 (and $x127 $x91)))
 (let (($x669 (= $x180 true)))
 (let (($x472 (= $x669 true)))
 (let (($x152 (= $x472 true)))
 (let (($x632 (= ?x138 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x137 (= $x632 true)))
 (let (($x626 (= $x137 true)))
 (let (($x552 (and $x626 $x152)))
 (let (($x207 (and $x552 $x359)))
 (let (($x243 (and $x207 $x73)))
 (let (($x481 (and $x243 $x606)))
 (let (($x600 (and $x481 $x478)))
 (let (($x691 (and $x600 $x212)))
 (let (($x260 (and $x691 $x410)))
 (let (($x397 (and $x260 $x29)))
 (let (($x629 (and $x397 $x363)))
 (let (($x553 (and $x629 $x375)))
 (let (($x618 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x148 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (=> $x306 (= ?x148 ?x757)))))))
 ))
 (let (($x101 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x572 (bvuge ?x504 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (bvuge ?x32 (_ bv1 32))))
 (= $x306 $x572))))))
 ))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x504 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x683 (= ?x504 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x506 (= ?x32 (_ bv0 32))))
 (= $x506 $x683))))))
 ))
 (let (($x413 (and $x176 $x369)))
 (let (($x5 (and $x413 $x101)))
 (let (($x469 (and $x5 $x618)))
 (let (($x399 (and $x469 $x553)))
 (let (($x181 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x108 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (=> $x147 (= ?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x531 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x291 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x199 (_ bv1 32))))
 (= $x147 (bvuge ?x291 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x291 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x199 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x314 (= ?x199 (_ bv0 32))))
 (= $x314 (= ?x291 (_ bv0 32)))))))
 ))
 (let (($x721 (and $x255 $x414)))
 (let (($x62 (and $x721 $x531)))
 (let (($x429 (and $x62 $x181)))
 (let (($x292 (and $x429 $x399)))
 (let (($x129 (=> $x292 $x551)))
 (not $x129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!22))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x6b520110)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x267a7694)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xff820454)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000032)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x267a7694)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xff820457)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6b520113)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xff820454)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x6b520110)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x267a7694)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000cb) #x02
      #x00))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!26 (k!25 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000000cb) #x02
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      false))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000032))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!24 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000032) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!22 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!22 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!22 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000032) #x02000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18421404)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x14041413)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18421407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14041410)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18421404)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x09800000)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x10
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000003) #x10
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x10000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x264 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x717 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x496)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x717 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x717))))
 (let ((?x495 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x717 (_ bv2 32))) ?x221)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x717 (_ bv3 32))) ?x495)))
 (let ((?x689 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (=> $x439 (= ?x689 ?x248)))))))))))
 ))
 (let (($x756 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x641 (_ bv1 32))))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (= $x439 $x265))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x716 (= false false)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x357 (_ bv0 32))))
 (=> $x86 $x716)))))
 ))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (= ?x641 (_ bv0 32))))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x357 (_ bv0 32))))
 (= $x86 $x456))))))
 ))
 (let (($x750 (and $x250 $x243)))
 (let (($x112 (and $x750 $x756)))
 (let (($x726 (and $x112 $x264)))
 (let (($x295 (= $x726 true)))
 (let (($x733 (= $x295 true)))
 (let ((?x385 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x606 (bvneg ?x385)))
 (let (($x449 (= ?x606 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x737 (= $x449 true)))
 (let (($x145 (= $x737 true)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x711 (bvadd ?x496 input.dst.llvm-%m2)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv1 32))) (select input.dst.llvm-mem ?x711))))
 (let ((?x617 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv2 32))) ?x541))))
 (let ((?x245 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (=> $x91 (= ?x245 ?x617))))))))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x641 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (= $x91 $x265))))))
 ))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x716 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x5 (_ bv0 32))))
 (=> $x148 $x716)))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (= ?x641 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x5 (_ bv0 32))))
 (= $x148 $x456))))))
 ))
 (let (($x311 (and $x655 $x186)))
 (let (($x19 (and $x311 $x462)))
 (let (($x697 (and $x19 $x319)))
 (let (($x597 (= $x697 true)))
 (let (($x352 (= $x597 true)))
 (let (($x637 (= $x352 true)))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x680 (bvadd ?x496 input.dst.llvm-%m1)))
 (let ((?x519 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem ?x680))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv2 32))) ?x519))))
 (let ((?x689 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (=> $x439 (= ?x689 ?x118))))))))))
 ))
 (let (($x424 (and $x112 $x406)))
 (let (($x130 (= $x424 true)))
 (let (($x501 (= $x130 true)))
 (let (($x353 (= $x501 true)))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x680 (bvadd ?x496 input.dst.llvm-%m1)))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x680))))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv2 32))) ?x6)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv3 32))) ?x131)))
 (let ((?x390 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x377 (_ bv1 32))))
 (=> $x106 (= ?x390 ?x573)))))))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x641 (_ bv1 32))))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x377 (_ bv1 32))))
 (= $x106 $x265))))))
 ))
 (let (($x569 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x716 (= false false)))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (= ?x377 (_ bv0 32))))
 (=> $x442 $x716)))))
 ))
 (let (($x723 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (= ?x641 (_ bv0 32))))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (= ?x377 (_ bv0 32))))
 (= $x442 $x456))))))
 ))
 (let (($x588 (and $x723 $x569)))
 (let (($x104 (and $x588 $x215)))
 (let (($x590 (and $x104 $x285)))
 (let (($x283 (= $x590 true)))
 (let (($x312 (= $x283 true)))
 (let (($x376 (= $x312 true)))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x680 (bvadd ?x496 input.dst.llvm-%m1)))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x680))))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv2 32))) ?x6)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv3 32))) ?x131)))
 (let ((?x689 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (=> $x439 (= ?x689 ?x573)))))))))))
 ))
 (let (($x262 (and $x112 $x167)))
 (let (($x529 (= $x262 true)))
 (let (($x289 (= $x529 true)))
 (let (($x249 (= $x289 true)))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x680 (bvadd ?x496 input.dst.llvm-%m1)))
 (let ((?x519 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem ?x680))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv2 32))) ?x519))))
 (let ((?x390 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x377 (_ bv1 32))))
 (=> $x106 (= ?x390 ?x118))))))))))
 ))
 (let (($x690 (and $x104 $x604)))
 (let (($x764 (= $x690 true)))
 (let (($x558 (= $x764 true)))
 (let (($x230 (= $x558 true)))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x711 (bvadd ?x496 input.dst.llvm-%m2)))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x711 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x711))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x711 (_ bv2 32))) ?x9)))
 (let ((?x326 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x711 (_ bv3 32))) ?x337)))
 (let ((?x245 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (=> $x91 (= ?x245 ?x326)))))))))))
 ))
 (let (($x622 (and $x19 $x102)))
 (let (($x741 (= $x622 true)))
 (let (($x117 (= $x741 true)))
 (let (($x162 (= $x117 true)))
 (let ((?x671 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x738 (= (_ bv0 32) ?x671)))
 (let ((?x260 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x52 (= (_ bv0 32) ?x260)))
 (let ((?x490 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x410 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x490)))
 (let ((?x701 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x562 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x701)))
 (let (($x691 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x307 (and $x691 $x562)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x734 (and $x212 $x307)))
 (let (($x567 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x652 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x652 $x425)))
 (let (($x487 (not $x139)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x435 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x435 $x21)))
 (let (($x153 (and (not $x277) $x487)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x443 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x544 (and $x443 $x339)))
 (let (($x619 (not $x544)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x478 (and $x233 $x275)))
 (let (($x343 (and (not $x478) $x619)))
 (let (($x500 (and (and (and (and (and (and $x343 $x153) $x15) $x567) $x734) $x410) $x52)))
 (let (($x11 (and $x500 $x738)))
 (let (($x605 (= $x11 true)))
 (let (($x431 (= $x605 true)))
 (let (($x269 (= $x431 true)))
 (let ((?x696 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x78 (= (_ bv0 2) ?x696)))
 (let (($x725 (= $x78 true)))
 (let (($x134 (= $x725 true)))
 (let (($x267 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x121 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x92 (and $x121 $x267)))
 (let (($x25 (= $x92 true)))
 (let (($x694 (= $x25 true)))
 (let (($x648 (= $x694 true)))
 (let (($x271 (= ?x606 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x784 (= $x271 true)))
 (let (($x786 (= $x784 true)))
 (let (($x454 (and $x786 $x648)))
 (let (($x90 (and $x454 $x134)))
 (let (($x599 (and $x90 $x269)))
 (let (($x393 (and $x599 $x162)))
 (let (($x70 (and $x393 $x230)))
 (let (($x82 (and $x70 $x249)))
 (let (($x719 (and $x82 $x376)))
 (let (($x461 (and $x719 $x353)))
 (let (($x219 (and $x461 $x637)))
 (let (($x370 (and $x219 $x145)))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x689 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (=> $x439 (= ?x689 ?x390)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x377 (_ bv1 32))))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (= $x439 $x106))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (= ?x377 (_ bv0 32))))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x357 (_ bv0 32))))
 (= $x86 $x442))))))
 ))
 (let (($x658 (and $x345 $x243)))
 (let (($x584 (and $x658 $x149)))
 (let (($x467 (and $x584 $x538)))
 (let (($x128 (and $x467 $x370)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (=> $x91 (= ?x245 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x572 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (= $x91 (bvuge ?x572 (_ bv1 32)))))))
 ))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x572 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x5 (_ bv0 32))))
 (= $x148 (= ?x572 (_ bv0 32)))))))
 ))
 (let (($x407 (and $x54 $x186)))
 (let (($x472 (and $x407 $x669)))
 (let (($x403 (and $x472 $x447)))
 (let (($x304 (and $x403 $x128)))
 (let (($x681 (=> $x304 $x733)))
 (not $x681)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x264 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x717 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x496)))
 (let ((?x221 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x717 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x717))))
 (let ((?x495 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x717 (_ bv2 32))) ?x221)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x717 (_ bv3 32))) ?x495)))
 (let ((?x689 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (=> $x439 (= ?x689 ?x248)))))))))))
 ))
 (let (($x756 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x641 (_ bv1 32))))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (= $x439 $x265))))))
 ))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x716 (= false false)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x357 (_ bv0 32))))
 (=> $x86 $x716)))))
 ))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (= ?x641 (_ bv0 32))))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x357 (_ bv0 32))))
 (= $x86 $x456))))))
 ))
 (let (($x750 (and $x250 $x243)))
 (let (($x112 (and $x750 $x756)))
 (let (($x726 (and $x112 $x264)))
 (let (($x295 (= $x726 true)))
 (let (($x733 (= $x295 true)))
 (let ((?x385 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x606 (bvneg ?x385)))
 (let (($x449 (= ?x606 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x737 (= $x449 true)))
 (let (($x145 (= $x737 true)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x711 (bvadd ?x496 input.dst.llvm-%m2)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv1 32))) (select input.dst.llvm-mem ?x711))))
 (let ((?x617 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv2 32))) ?x541))))
 (let ((?x245 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (=> $x91 (= ?x245 ?x617))))))))))
 ))
 (let (($x462 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x641 (_ bv1 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (= $x91 $x265))))))
 ))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x716 (= false false)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x5 (_ bv0 32))))
 (=> $x148 $x716)))))
 ))
 (let (($x655 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (= ?x641 (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x5 (_ bv0 32))))
 (= $x148 $x456))))))
 ))
 (let (($x311 (and $x655 $x186)))
 (let (($x19 (and $x311 $x462)))
 (let (($x697 (and $x19 $x319)))
 (let (($x597 (= $x697 true)))
 (let (($x352 (= $x597 true)))
 (let (($x637 (= $x352 true)))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x680 (bvadd ?x496 input.dst.llvm-%m1)))
 (let ((?x519 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem ?x680))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv2 32))) ?x519))))
 (let ((?x689 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (=> $x439 (= ?x689 ?x118))))))))))
 ))
 (let (($x424 (and $x112 $x406)))
 (let (($x130 (= $x424 true)))
 (let (($x501 (= $x130 true)))
 (let (($x353 (= $x501 true)))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x680 (bvadd ?x496 input.dst.llvm-%m1)))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x680))))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv2 32))) ?x6)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv3 32))) ?x131)))
 (let ((?x390 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x377 (_ bv1 32))))
 (=> $x106 (= ?x390 ?x573)))))))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x641 (_ bv1 32))))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x377 (_ bv1 32))))
 (= $x106 $x265))))))
 ))
 (let (($x569 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x716 (= false false)))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (= ?x377 (_ bv0 32))))
 (=> $x442 $x716)))))
 ))
 (let (($x723 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x641 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x456 (= ?x641 (_ bv0 32))))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (= ?x377 (_ bv0 32))))
 (= $x442 $x456))))))
 ))
 (let (($x588 (and $x723 $x569)))
 (let (($x104 (and $x588 $x215)))
 (let (($x590 (and $x104 $x285)))
 (let (($x283 (= $x590 true)))
 (let (($x312 (= $x283 true)))
 (let (($x376 (= $x312 true)))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x680 (bvadd ?x496 input.dst.llvm-%m1)))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x680))))
 (let ((?x131 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv2 32))) ?x6)))
 (let ((?x573 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x680 (_ bv3 32))) ?x131)))
 (let ((?x689 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (=> $x439 (= ?x689 ?x573)))))))))))
 ))
 (let (($x262 (and $x112 $x167)))
 (let (($x529 (= $x262 true)))
 (let (($x289 (= $x529 true)))
 (let (($x249 (= $x289 true)))
 (let (($x604 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x680 (bvadd ?x496 input.dst.llvm-%m1)))
 (let ((?x519 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem ?x680))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv2 32))) ?x519))))
 (let ((?x390 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x377 (_ bv1 32))))
 (=> $x106 (= ?x390 ?x118))))))))))
 ))
 (let (($x690 (and $x104 $x604)))
 (let (($x764 (= $x690 true)))
 (let (($x558 (= $x764 true)))
 (let (($x230 (= $x558 true)))
 (let (($x102 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x496 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x711 (bvadd ?x496 input.dst.llvm-%m2)))
 (let ((?x9 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x711 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x711))))
 (let ((?x337 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x711 (_ bv2 32))) ?x9)))
 (let ((?x326 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x711 (_ bv3 32))) ?x337)))
 (let ((?x245 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (=> $x91 (= ?x245 ?x326)))))))))))
 ))
 (let (($x622 (and $x19 $x102)))
 (let (($x741 (= $x622 true)))
 (let (($x117 (= $x741 true)))
 (let (($x162 (= $x117 true)))
 (let ((?x671 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x738 (= (_ bv0 32) ?x671)))
 (let ((?x260 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x52 (= (_ bv0 32) ?x260)))
 (let ((?x490 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x410 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x490)))
 (let ((?x701 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x562 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x701)))
 (let (($x691 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x307 (and $x691 $x562)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x734 (and $x212 $x307)))
 (let (($x567 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x425 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x652 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x652 $x425)))
 (let (($x487 (not $x139)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x435 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x435 $x21)))
 (let (($x153 (and (not $x277) $x487)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x443 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x544 (and $x443 $x339)))
 (let (($x619 (not $x544)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x478 (and $x233 $x275)))
 (let (($x343 (and (not $x478) $x619)))
 (let (($x500 (and (and (and (and (and (and $x343 $x153) $x15) $x567) $x734) $x410) $x52)))
 (let (($x11 (and $x500 $x738)))
 (let (($x605 (= $x11 true)))
 (let (($x431 (= $x605 true)))
 (let (($x269 (= $x431 true)))
 (let ((?x696 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x78 (= (_ bv0 2) ?x696)))
 (let (($x725 (= $x78 true)))
 (let (($x134 (= $x725 true)))
 (let (($x267 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x121 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x92 (and $x121 $x267)))
 (let (($x25 (= $x92 true)))
 (let (($x694 (= $x25 true)))
 (let (($x648 (= $x694 true)))
 (let (($x271 (= ?x606 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x784 (= $x271 true)))
 (let (($x786 (= $x784 true)))
 (let (($x454 (and $x786 $x648)))
 (let (($x90 (and $x454 $x134)))
 (let (($x599 (and $x90 $x269)))
 (let (($x393 (and $x599 $x162)))
 (let (($x70 (and $x393 $x230)))
 (let (($x82 (and $x70 $x249)))
 (let (($x719 (and $x82 $x376)))
 (let (($x461 (and $x719 $x353)))
 (let (($x219 (and $x461 $x637)))
 (let (($x370 (and $x219 $x145)))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x689 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (=> $x439 (= ?x689 ?x390)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x377 (_ bv1 32))))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x439 (bvuge ?x357 (_ bv1 32))))
 (= $x439 $x106))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x377 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x442 (= ?x377 (_ bv0 32))))
 (let ((?x357 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (= ?x357 (_ bv0 32))))
 (= $x86 $x442))))))
 ))
 (let (($x658 (and $x345 $x243)))
 (let (($x584 (and $x658 $x149)))
 (let (($x467 (and $x584 $x538)))
 (let (($x128 (and $x467 $x370)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (=> $x91 (= ?x245 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x572 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x5 (_ bv1 32))))
 (= $x91 (bvuge ?x572 (_ bv1 32)))))))
 ))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x572 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x5 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x5 (_ bv0 32))))
 (= $x148 (= ?x572 (_ bv0 32)))))))
 ))
 (let (($x407 (and $x54 $x186)))
 (let (($x472 (and $x407 $x669)))
 (let (($x403 (and $x472 $x447)))
 (let (($x304 (and $x403 $x128)))
 (let (($x681 (=> $x304 $x733)))
 (not $x681)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000041)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x87c04100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6c600004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6c600007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x87c04103)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6c600004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x87c04100)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000041 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000041)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86a0a904)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x0c240420)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02c13440)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0c240420)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02c13443)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86a0a907)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02c13440)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86a0a904)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x0c240420)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0c240422) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x468 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x555 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_4 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x286 (bvadd ?x639 ?x555)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv1 32))) (select input.dst.llvm-mem ?x286))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv2 32))) ?x103))))
 (let ((?x665 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (=> $x267 (= ?x665 ?x93)))))))))))
 ))
 (let (($x381 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x672 (_ bv1 32))))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (= $x267 $x229))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x305 (= false false)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x584 (_ bv0 32))))
 (=> $x689 $x305)))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x672 (_ bv0 32))))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x584 (_ bv0 32))))
 (= $x689 $x99))))))
 ))
 (let (($x546 (and $x362 $x646)))
 (let (($x301 (and $x546 $x381)))
 (let (($x649 (and $x301 $x468)))
 (let (($x210 (= $x649 true)))
 (let (($x419 (= $x210 true)))
 (let ((?x452 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x16 (= (_ bv0 2) ?x452)))
 (let (($x226 (= $x16 true)))
 (let (($x411 (= $x226 true)))
 (let (($x702 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x707 (bvadd ?x639 input.dst.llvm-%m2)))
 (let ((?x700 (concat (select input.dst.llvm-mem (bvadd ?x707 (_ bv1 32))) (select input.dst.llvm-mem ?x707))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x707 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x707 (_ bv2 32))) ?x700))))
 (let ((?x665 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (=> $x267 (= ?x665 ?x234))))))))))
 ))
 (let (($x373 (and $x301 $x702)))
 (let (($x748 (= $x373 true)))
 (let (($x143 (= $x748 true)))
 (let (($x396 (= $x143 true)))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x760 (bvadd ?x639 input.dst.llvm-%m1)))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv1 32))) (select input.dst.llvm-mem ?x760))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv2 32))) ?x470))))
 (let ((?x337 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (=> $x318 (= ?x337 ?x583))))))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x672 (_ bv1 32))))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (= $x318 $x229))))))
 ))
 (let (($x599 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x305 (= false false)))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x671 (_ bv0 32))))
 (=> $x738 $x305)))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x672 (_ bv0 32))))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x671 (_ bv0 32))))
 (= $x738 $x99))))))
 ))
 (let (($x156 (and $x119 $x599)))
 (let (($x32 (and $x156 $x85)))
 (let (($x773 (and $x32 $x196)))
 (let (($x768 (= $x773 true)))
 (let (($x769 (= $x768 true)))
 (let (($x169 (= $x769 true)))
 (let (($x640 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x760 (bvadd ?x639 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x760))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv2 32))) ?x41)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv3 32))) ?x474)))
 (let ((?x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x260 (_ bv1 32))))
 (=> $x19 (= ?x9 ?x65)))))))))))
 ))
 (let (($x81 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x672 (_ bv1 32))))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x260 (_ bv1 32))))
 (= $x19 $x229))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x305 (= false false)))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (=> $x52 $x305)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x672 (_ bv0 32))))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (= $x52 $x99))))))
 ))
 (let (($x80 (and $x321 $x94)))
 (let (($x66 (and $x80 $x81)))
 (let (($x354 (and $x66 $x640)))
 (let (($x465 (= $x354 true)))
 (let (($x551 (= $x465 true)))
 (let (($x635 (= $x551 true)))
 (let (($x296 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x760 (bvadd ?x639 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x760))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv2 32))) ?x41)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv3 32))) ?x474)))
 (let ((?x337 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (=> $x318 (= ?x337 ?x65)))))))))))
 ))
 (let (($x342 (and $x32 $x296)))
 (let (($x174 (= $x342 true)))
 (let (($x743 (= $x174 true)))
 (let (($x451 (= $x743 true)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x760 (bvadd ?x639 input.dst.llvm-%m1)))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv1 32))) (select input.dst.llvm-mem ?x760))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv2 32))) ?x470))))
 (let ((?x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x260 (_ bv1 32))))
 (=> $x19 (= ?x9 ?x583))))))))))
 ))
 (let (($x327 (and $x66 $x124)))
 (let (($x504 (= $x327 true)))
 (let (($x683 (= $x504 true)))
 (let (($x331 (= $x683 true)))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x707 (bvadd ?x639 input.dst.llvm-%m2)))
 (let ((?x483 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x707 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x707))))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x707 (_ bv2 32))) ?x483)))
 (let ((?x763 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x707 (_ bv3 32))) ?x125)))
 (let ((?x665 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (=> $x267 (= ?x665 ?x763)))))))))))
 ))
 (let (($x371 (and $x301 $x18)))
 (let (($x366 (= $x371 true)))
 (let (($x368 (= $x366 true)))
 (let (($x98 (= $x368 true)))
 (let (($x461 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x130 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x614 (and $x130 $x461)))
 (let (($x391 (= $x614 true)))
 (let (($x338 (= $x391 true)))
 (let (($x596 (= $x338 true)))
 (let ((?x529 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x289 (= (_ bv0 32) ?x529)))
 (let ((?x167 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x262 (= (_ bv0 32) ?x167)))
 (let ((?x164 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x164)))
 (let ((?x144 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x144)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x42 $x6)))
 (let (($x563 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x573 (and $x563 $x131)))
 (let (($x112 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x699 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x558 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x764 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (and $x764 $x558)))
 (let (($x70 (not $x230)))
 (let (($x604 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x507 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x690 (and $x507 $x604)))
 (let (($x250 (and (not $x690) $x70)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x519 (and $x323 $x28)))
 (let (($x120 (not $x519)))
 (let (($x523 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x405 (and $x110 $x523)))
 (let (($x146 (and (not $x405) $x120)))
 (let (($x590 (and (and (and (and (and (and $x146 $x250) $x699) $x112) $x573) $x299) $x262)))
 (let (($x283 (and $x590 $x289)))
 (let (($x312 (= $x283 true)))
 (let (($x376 (= $x312 true)))
 (let (($x719 (= $x376 true)))
 (let ((?x117 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x162 (bvneg ?x117)))
 (let (($x588 (= ?x162 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x666 (= $x588 true)))
 (let (($x215 (= $x666 true)))
 (let (($x703 (= ?x162 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x723 (= $x703 true)))
 (let (($x479 (= $x723 true)))
 (let (($x104 (and $x479 $x215)))
 (let (($x53 (and $x104 $x719)))
 (let (($x541 (and $x53 $x596)))
 (let (($x179 (and $x541 $x98)))
 (let (($x618 (and $x179 $x331)))
 (let (($x430 (and $x618 $x451)))
 (let (($x704 (and $x430 $x635)))
 (let (($x775 (and $x704 $x169)))
 (let (($x69 (and $x775 $x396)))
 (let (($x676 (and $x69 $x411)))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x337 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (=> $x318 (= ?x337 ?x9)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x260 (_ bv1 32))))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (= $x318 $x19))))))
 ))
 (let (($x605 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x671 (_ bv0 32))))
 (= $x738 $x52))))))
 ))
 (let (($x168 (and $x605 $x599)))
 (let (($x711 (and $x168 $x496)))
 (let (($x102 (and $x711 $x427)))
 (let (($x209 (and $x102 $x676)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x665 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (=> $x267 (= ?x665 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x106 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (= $x267 (bvuge ?x106 (_ bv1 32)))))))
 ))
 (let (($x453 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x106 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x584 (_ bv0 32))))
 (= $x689 (= ?x106 (_ bv0 32)))))))
 ))
 (let (($x616 (and $x453 $x646)))
 (let (($x694 (and $x616 $x25)))
 (let (($x478 (and $x694 $x275)))
 (let (($x536 (and $x478 $x209)))
 (let (($x511 (=> $x536 $x419)))
 (let (($x228 (not $x511)))
 (let (($x253 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x163 (select solver-mem_4 memmask-bounded-var!)))
 (let (($x44 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x503 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x503)))
 (let (($x557 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x502 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x503)))
 (let (($x466 (or false (or false (and (and true (or $x502 $x557)) (or $x330 $x44))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x466) (= ?x163 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x163 (_ bv0 8)))))))))))
 ))
 (and (and true $x253) $x228)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x468 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x555 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_4 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x286 (bvadd ?x639 ?x555)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv1 32))) (select input.dst.llvm-mem ?x286))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x286 (_ bv2 32))) ?x103))))
 (let ((?x665 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (=> $x267 (= ?x665 ?x93)))))))))))
 ))
 (let (($x381 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x672 (_ bv1 32))))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (= $x267 $x229))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x305 (= false false)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x584 (_ bv0 32))))
 (=> $x689 $x305)))))
 ))
 (let (($x362 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x672 (_ bv0 32))))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x584 (_ bv0 32))))
 (= $x689 $x99))))))
 ))
 (let (($x546 (and $x362 $x646)))
 (let (($x301 (and $x546 $x381)))
 (let (($x649 (and $x301 $x468)))
 (let (($x210 (= $x649 true)))
 (let (($x419 (= $x210 true)))
 (let ((?x452 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x16 (= (_ bv0 2) ?x452)))
 (let (($x226 (= $x16 true)))
 (let (($x411 (= $x226 true)))
 (let (($x702 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x707 (bvadd ?x639 input.dst.llvm-%m2)))
 (let ((?x700 (concat (select input.dst.llvm-mem (bvadd ?x707 (_ bv1 32))) (select input.dst.llvm-mem ?x707))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x707 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x707 (_ bv2 32))) ?x700))))
 (let ((?x665 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (=> $x267 (= ?x665 ?x234))))))))))
 ))
 (let (($x373 (and $x301 $x702)))
 (let (($x748 (= $x373 true)))
 (let (($x143 (= $x748 true)))
 (let (($x396 (= $x143 true)))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x760 (bvadd ?x639 input.dst.llvm-%m1)))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv1 32))) (select input.dst.llvm-mem ?x760))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv2 32))) ?x470))))
 (let ((?x337 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (=> $x318 (= ?x337 ?x583))))))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x672 (_ bv1 32))))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (= $x318 $x229))))))
 ))
 (let (($x599 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x305 (= false false)))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x671 (_ bv0 32))))
 (=> $x738 $x305)))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x672 (_ bv0 32))))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x671 (_ bv0 32))))
 (= $x738 $x99))))))
 ))
 (let (($x156 (and $x119 $x599)))
 (let (($x32 (and $x156 $x85)))
 (let (($x773 (and $x32 $x196)))
 (let (($x768 (= $x773 true)))
 (let (($x769 (= $x768 true)))
 (let (($x169 (= $x769 true)))
 (let (($x640 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x760 (bvadd ?x639 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x760))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv2 32))) ?x41)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv3 32))) ?x474)))
 (let ((?x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x260 (_ bv1 32))))
 (=> $x19 (= ?x9 ?x65)))))))))))
 ))
 (let (($x81 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x672 (_ bv1 32))))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x260 (_ bv1 32))))
 (= $x19 $x229))))))
 ))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x305 (= false false)))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (=> $x52 $x305)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x672 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x672 (_ bv0 32))))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (= $x52 $x99))))))
 ))
 (let (($x80 (and $x321 $x94)))
 (let (($x66 (and $x80 $x81)))
 (let (($x354 (and $x66 $x640)))
 (let (($x465 (= $x354 true)))
 (let (($x551 (= $x465 true)))
 (let (($x635 (= $x551 true)))
 (let (($x296 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x760 (bvadd ?x639 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x760))))
 (let ((?x474 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv2 32))) ?x41)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x760 (_ bv3 32))) ?x474)))
 (let ((?x337 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (=> $x318 (= ?x337 ?x65)))))))))))
 ))
 (let (($x342 (and $x32 $x296)))
 (let (($x174 (= $x342 true)))
 (let (($x743 (= $x174 true)))
 (let (($x451 (= $x743 true)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x760 (bvadd ?x639 input.dst.llvm-%m1)))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv1 32))) (select input.dst.llvm-mem ?x760))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x760 (_ bv2 32))) ?x470))))
 (let ((?x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x260 (_ bv1 32))))
 (=> $x19 (= ?x9 ?x583))))))))))
 ))
 (let (($x327 (and $x66 $x124)))
 (let (($x504 (= $x327 true)))
 (let (($x683 (= $x504 true)))
 (let (($x331 (= $x683 true)))
 (let (($x18 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x639 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x707 (bvadd ?x639 input.dst.llvm-%m2)))
 (let ((?x483 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x707 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x707))))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x707 (_ bv2 32))) ?x483)))
 (let ((?x763 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x707 (_ bv3 32))) ?x125)))
 (let ((?x665 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (=> $x267 (= ?x665 ?x763)))))))))))
 ))
 (let (($x371 (and $x301 $x18)))
 (let (($x366 (= $x371 true)))
 (let (($x368 (= $x366 true)))
 (let (($x98 (= $x368 true)))
 (let (($x461 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x130 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x614 (and $x130 $x461)))
 (let (($x391 (= $x614 true)))
 (let (($x338 (= $x391 true)))
 (let (($x596 (= $x338 true)))
 (let ((?x529 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x289 (= (_ bv0 32) ?x529)))
 (let ((?x167 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x262 (= (_ bv0 32) ?x167)))
 (let ((?x164 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x164)))
 (let ((?x144 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x144)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x42 $x6)))
 (let (($x563 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x573 (and $x563 $x131)))
 (let (($x112 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x699 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x558 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x764 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (and $x764 $x558)))
 (let (($x70 (not $x230)))
 (let (($x604 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x507 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x690 (and $x507 $x604)))
 (let (($x250 (and (not $x690) $x70)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x519 (and $x323 $x28)))
 (let (($x120 (not $x519)))
 (let (($x523 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x405 (and $x110 $x523)))
 (let (($x146 (and (not $x405) $x120)))
 (let (($x590 (and (and (and (and (and (and $x146 $x250) $x699) $x112) $x573) $x299) $x262)))
 (let (($x283 (and $x590 $x289)))
 (let (($x312 (= $x283 true)))
 (let (($x376 (= $x312 true)))
 (let (($x719 (= $x376 true)))
 (let ((?x117 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x162 (bvneg ?x117)))
 (let (($x588 (= ?x162 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x666 (= $x588 true)))
 (let (($x215 (= $x666 true)))
 (let (($x703 (= ?x162 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x723 (= $x703 true)))
 (let (($x479 (= $x723 true)))
 (let (($x104 (and $x479 $x215)))
 (let (($x53 (and $x104 $x719)))
 (let (($x541 (and $x53 $x596)))
 (let (($x179 (and $x541 $x98)))
 (let (($x618 (and $x179 $x331)))
 (let (($x430 (and $x618 $x451)))
 (let (($x704 (and $x430 $x635)))
 (let (($x775 (and $x704 $x169)))
 (let (($x69 (and $x775 $x396)))
 (let (($x676 (and $x69 $x411)))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x9 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x337 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (=> $x318 (= ?x337 ?x9)))))))
 ))
 (let (($x496 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x260 (_ bv1 32))))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x671 (_ bv1 32))))
 (= $x318 $x19))))))
 ))
 (let (($x605 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (let ((?x671 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x738 (= ?x671 (_ bv0 32))))
 (= $x738 $x52))))))
 ))
 (let (($x168 (and $x605 $x599)))
 (let (($x711 (and $x168 $x496)))
 (let (($x102 (and $x711 $x427)))
 (let (($x209 (and $x102 $x676)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x665 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (=> $x267 (= ?x665 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x25 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x106 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x584 (_ bv1 32))))
 (= $x267 (bvuge ?x106 (_ bv1 32)))))))
 ))
 (let (($x453 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x106 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x584 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x584 (_ bv0 32))))
 (= $x689 (= ?x106 (_ bv0 32)))))))
 ))
 (let (($x616 (and $x453 $x646)))
 (let (($x694 (and $x616 $x25)))
 (let (($x478 (and $x694 $x275)))
 (let (($x536 (and $x478 $x209)))
 (let (($x511 (=> $x536 $x419)))
 (let (($x228 (not $x511)))
 (let (($x253 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x163 (select solver-mem_4 memmask-bounded-var!)))
 (let (($x44 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x503 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x503)))
 (let (($x557 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x502 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x503)))
 (let (($x466 (or false (or false (and (and true (or $x502 $x557)) (or $x330 $x44))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x466) (= ?x163 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x163 (_ bv0 8)))))))))))
 ))
 (and (and true $x253) $x228)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!196))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x11034884)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x56268a04)
  (define-fun solver-mem_4 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!198))
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!198))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x1accc010)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!197))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xa64aa200)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x56268a07)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x11034887)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x56268a04)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x11034884)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!204 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!200 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!204 (k!200 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!197 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x10)
  (define-fun k!196 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa64aa200) #x04
    (ite (= x!0 #xa64aa212) #x02
    (ite (= x!0 #xa64aa22c) #x40
    (ite (= x!0 #x1accc010) #x01
    (ite (= x!0 #xa64aa241) #x01
    (ite (= x!0 #xa64aa204) #x02
    (ite (= x!0 #xa64aa240) #x08
    (ite (= x!0 #xa64aa231) #x20
    (ite (= x!0 #xa64aa20e) #x10
    (ite (= x!0 #xa64aa207) #x10
    (ite (= x!0 #xa64aa232) #x20
    (ite (= x!0 #xa64aa203) #x08
    (ite (= x!0 #xa64aa202) #x04
    (ite (= x!0 #xa64aa205) #x04
    (ite (= x!0 #xa64aa211) #x10
    (ite (= x!0 #xa64aa20d) #x40
    (ite (= x!0 #xa64aa22f) #x20
    (ite (= x!0 #xa64aa20c) #x40
      #x00)))))))))))))))))))
  (define-fun k!199 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #xa64aa241 x!0)
                    (ite (bvule #xa64aa242 x!0)
                         (ite (bvule #xa64aa243 x!0) #xa64aa243 #xa64aa242)
                         #xa64aa241)
                    #xa64aa240)))
    (let ((a!2 (ite (bvule #xa64aa232 x!0)
                    (ite (bvule #xa64aa233 x!0)
                         (ite (bvule #xa64aa240 x!0) a!1 #xa64aa233)
                         #xa64aa232)
                    #xa64aa231)))
    (let ((a!3 (ite (bvule #xa64aa22f x!0)
                    (ite (bvule #xa64aa230 x!0)
                         (ite (bvule #xa64aa231 x!0) a!2 #xa64aa230)
                         #xa64aa22f)
                    #xa64aa22e)))
    (let ((a!4 (ite (bvule #xa64aa22c x!0)
                    (ite (bvule #xa64aa22d x!0)
                         (ite (bvule #xa64aa22e x!0) a!3 #xa64aa22d)
                         #xa64aa22c)
                    #xa64aa223)))
    (let ((a!5 (ite (bvule #xa64aa221 x!0)
                    (ite (bvule #xa64aa222 x!0)
                         (ite (bvule #xa64aa223 x!0) a!4 #xa64aa222)
                         #xa64aa221)
                    #xa64aa220)))
    (let ((a!6 (ite (bvule #xa64aa212 x!0)
                    (ite (bvule #xa64aa213 x!0)
                         (ite (bvule #xa64aa220 x!0) a!5 #xa64aa213)
                         #xa64aa212)
                    #xa64aa211)))
    (let ((a!7 (ite (bvule #xa64aa20f x!0)
                    (ite (bvule #xa64aa210 x!0)
                         (ite (bvule #xa64aa211 x!0) a!6 #xa64aa210)
                         #xa64aa20f)
                    #xa64aa20e)))
    (let ((a!8 (ite (bvule #xa64aa20c x!0)
                    (ite (bvule #xa64aa20d x!0)
                         (ite (bvule #xa64aa20e x!0) a!7 #xa64aa20d)
                         #xa64aa20c)
                    #xa64aa20b)))
    (let ((a!9 (ite (bvule #xa64aa209 x!0)
                    (ite (bvule #xa64aa20a x!0)
                         (ite (bvule #xa64aa20b x!0) a!8 #xa64aa20a)
                         #xa64aa209)
                    #xa64aa208)))
    (let ((a!10 (ite (bvule #xa64aa206 x!0)
                     (ite (bvule #xa64aa207 x!0)
                          (ite (bvule #xa64aa208 x!0) a!9 #xa64aa207)
                          #xa64aa206)
                     #xa64aa205)))
    (let ((a!11 (ite (bvule #xa64aa203 x!0)
                     (ite (bvule #xa64aa204 x!0)
                          (ite (bvule #xa64aa205 x!0) a!10 #xa64aa204)
                          #xa64aa203)
                     #xa64aa202)))
    (let ((a!12 (ite (bvule #xa64aa200 x!0)
                     (ite (bvule #xa64aa201 x!0)
                          (ite (bvule #xa64aa202 x!0) a!11 #xa64aa201)
                          #xa64aa200)
                     #x56268a08)))
    (let ((a!13 (ite (bvule #x56268a05 x!0)
                     (ite (bvule #x56268a07 x!0)
                          (ite (bvule #x56268a08 x!0) a!12 #x56268a07)
                          #x56268a05)
                     #x56268a04)))
    (let ((a!14 (ite (bvule #x1accc012 x!0)
                     (ite (bvule #x1accc013 x!0)
                          (ite (bvule #x56268a04 x!0) a!13 #x1accc013)
                          #x1accc012)
                     #x1accc011)))
    (let ((a!15 (ite (bvule #x11034888 x!0)
                     (ite (bvule #x1accc010 x!0)
                          (ite (bvule #x1accc011 x!0) a!14 #x1accc010)
                          #x11034888)
                     #x11034887)))
      (ite (bvule #x11034884 x!0)
           (ite (bvule #x11034885 x!0)
                (ite (bvule #x11034887 x!0) a!15 #x11034885)
                #x11034884)
           #x049a0c82)))))))))))))))))
  (define-fun k!198!203 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa64aa200) #x04
    (ite (= x!0 #xa64aa212) #x02
    (ite (= x!0 #xa64aa20b) #x00
    (ite (= x!0 #xa64aa20a) #x00
    (ite (= x!0 #xa64aa209) #x00
    (ite (= x!0 #xa64aa22c) #x40
    (ite (= x!0 #xa64aa201) #x00
    (ite (= x!0 #x1accc011) #x00
    (ite (= x!0 #x1accc010) #x01
    (ite (= x!0 #x11034888) #x10
    (ite (= x!0 #x1accc012) #x00
    (ite (= x!0 #x56268a04) #x00
    (ite (= x!0 #xa64aa241) #x01
    (ite (= x!0 #xa64aa204) #x02
    (ite (= x!0 #xa64aa22d) #x00
    (ite (= x!0 #xa64aa243) #x00
    (ite (= x!0 #xa64aa213) #x00
    (ite (= x!0 #xa64aa240) #x08
    (ite (= x!0 #xa64aa221) #x00
    (ite (= x!0 #xa64aa208) #x00
    (ite (= x!0 #xa64aa233) #x00
    (ite (= x!0 #xa64aa206) #x00
    (ite (= x!0 #xa64aa231) #x20
    (ite (= x!0 #xa64aa230) #x00
    (ite (= x!0 #xa64aa20f) #x00
    (ite (= x!0 #xa64aa20e) #x10
    (ite (= x!0 #x049a0c82) #x00
    (ite (= x!0 #xa64aa207) #x10
    (ite (= x!0 #xa64aa223) #x00
    (ite (= x!0 #x11034884) #x00
    (ite (= x!0 #x56268a05) #x00
    (ite (= x!0 #xa64aa210) #x00
    (ite (= x!0 #x11034885) #x00
    (ite (= x!0 #xa64aa22e) #x00
    (ite (= x!0 #xa64aa232) #x20
    (ite (= x!0 #x1accc013) #x00
    (ite (= x!0 #xa64aa203) #x08
    (ite (= x!0 #xa64aa202) #x04
    (ite (= x!0 #xa64aa205) #x04
    (ite (= x!0 #x56268a07) #x00
    (ite (= x!0 #x56268a08) #x08
    (ite (= x!0 #xa64aa211) #x10
    (ite (= x!0 #xa64aa222) #x00
    (ite (= x!0 #xa64aa20d) #x40
    (ite (= x!0 #xa64aa220) #x00
    (ite (= x!0 #x11034887) #x00
    (ite (= x!0 #xa64aa22f) #x20
    (ite (= x!0 #xa64aa20c) #x40
    (ite (= x!0 #xa64aa242) #x00
      #x03))))))))))))))))))))))))))))))))))))))))))))))))))
  (define-fun k!198 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!198!203 (k!199 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000001
      (let ((a!1 (concat (k!196 (bvadd #x1accc013 (bvmul #x00000004 x!0)))
                         (k!196 (bvadd #x1accc012 (bvmul #x00000004 x!0)))
                         (k!196 (bvadd #x1accc011 (bvmul #x00000004 x!0)))
                         (k!196 (bvadd #x1accc010 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!198 (bvadd #x1accc013 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #x1accc012 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #x1accc011 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #x1accc010 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!201 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000064 x!0)
                    (ite (bvule #x00000065 x!0)
                         (ite (bvule #x049a0c82 x!0) #x049a0c82 #x00000065)
                         #x00000064)
                    #x00000010)))
    (let ((a!2 (ite (bvule #x0000000b x!0)
                    (ite (bvule #x0000000c x!0)
                         (ite (bvule #x00000010 x!0) a!1 #x0000000c)
                         #x0000000b)
                    #x00000008)))
    (let ((a!3 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000004 x!0)
                         (ite (bvule #x00000008 x!0) a!2 #x00000004)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!3 #x00000001)
           #x00000000)))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!198))
              (= x!3 (_ as-array k!197))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x1accc010))
      #x00000000
      #x00000043))
  (define-fun input.spec-%var-m1-1.0.1!202 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000002)
        (= x!0 #x00000003)
        (= x!0 #x0000000c)
        (= x!0 #x00000010)
        (= x!0 #x0000000b)
        (= x!0 #x00000001)
        (= x!0 #x00000008)
        (= x!0 #x00000004)
        (= x!0 #x00000000)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!202 (k!201 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x08040004
    (ite (= x!0 #x00000004) #x00021000
    (ite (= x!0 #x00000010) #x00000108
    (ite (= x!0 #x00000001) #x10000402
    (ite (= x!0 #x0000000b) #x20000040
    (ite (= x!0 #x00000008) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x0000000c) #x00202000
    (ite (= x!0 #x00000003) #x00104040
      (let ((a!1 (concat (k!196 (bvadd #xa64aa203 (bvmul #x00000004 x!0)))
                         (k!196 (bvadd #xa64aa202 (bvmul #x00000004 x!0)))
                         (k!196 (bvadd #xa64aa201 (bvmul #x00000004 x!0)))
                         (k!196 (bvadd #xa64aa200 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!198 (bvadd #xa64aa203 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #xa64aa202 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #xa64aa201 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #xa64aa200 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!205 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000002)
        (= x!0 #x00000003)
        (= x!0 #x0000000c)
        (= x!0 #x00000010)
        (= x!0 #x0000000b)
        (= x!0 #x00000001)
        (= x!0 #x00000008)
        (= x!0 #x00000004)
        (= x!0 #x00000000)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!205
      (k!201 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x08040004
    (ite (= x!0 #x00000004) #x00021000
    (ite (= x!0 #x00000010) #x00000108
    (ite (= x!0 #x00000001) #x10000402
    (ite (= x!0 #x0000000b) #x20000040
    (ite (= x!0 #x00000008) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x0000000c) #x00202000
    (ite (= x!0 #x00000003) #x00104040
      (let ((a!1 (concat (k!198 (bvadd #xa64aa203 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #xa64aa202 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #xa64aa201 (bvmul #x00000004 x!0)))
                         (k!198 (bvadd #xa64aa200 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000001
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x744 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_5 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x142 (bvadd ?x776 ?x714)))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x344))))
 (let ((?x643 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (=> $x406 (= ?x643 ?x398)))))))))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x240 (_ bv1 32))))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (= $x406 $x329))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x732 (= false false)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x83 (_ bv0 32))))
 (=> $x144 $x732)))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x240 (_ bv0 32))))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x83 (_ bv0 32))))
 (= $x144 $x291))))))
 ))
 (let (($x157 (and $x197 $x164)))
 (let (($x718 (and $x157 $x15)))
 (let (($x745 (and $x718 $x744)))
 (let (($x222 (= $x745 true)))
 (let (($x486 (= $x222 true)))
 (let ((?x47 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x214 (= (_ bv0 2) ?x47)))
 (let (($x135 (= $x214 true)))
 (let (($x173 (= $x135 true)))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x779 (bvadd ?x776 input.dst.llvm-%m2)))
 (let ((?x753 (concat (select input.dst.llvm-mem (bvadd ?x779 (_ bv1 32))) (select input.dst.llvm-mem ?x779))))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x779 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x779 (_ bv2 32))) ?x753))))
 (let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (=> $x605 (= ?x427 ?x527))))))))))
 ))
 (let (($x219 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x240 (_ bv1 32))))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (= $x605 $x329))))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x732 (= false false)))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x467 (_ bv0 32))))
 (=> $x646 $x732)))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x240 (_ bv0 32))))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x467 (_ bv0 32))))
 (= $x646 $x291))))))
 ))
 (let (($x487 (and $x139 $x694)))
 (let (($x603 (and $x487 $x219)))
 (let (($x276 (and $x603 $x402)))
 (let (($x384 (= $x276 true)))
 (let (($x166 (= $x384 true)))
 (let (($x77 (= $x166 true)))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x776 input.dst.llvm-%m1)))
 (let ((?x761 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x761))))
 (let ((?x643 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (=> $x406 (= ?x643 ?x148))))))))))
 ))
 (let (($x717 (and $x718 $x257)))
 (let (($x145 (= $x717 true)))
 (let (($x449 (= $x145 true)))
 (let (($x370 (= $x449 true)))
 (let (($x786 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x776 input.dst.llvm-%m1)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x254)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x211)))
 (let ((?x516 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x537 (_ bv1 32))))
 (=> $x244 (= ?x516 ?x245)))))))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x240 (_ bv1 32))))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x537 (_ bv1 32))))
 (= $x244 $x329))))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x732 (= false false)))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (= ?x537 (_ bv0 32))))
 (=> $x563 $x732)))))
 ))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x240 (_ bv0 32))))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (= ?x537 (_ bv0 32))))
 (= $x563 $x291))))))
 ))
 (let (($x389 (and $x307 $x375)))
 (let (($x740 (and $x389 $x624)))
 (let (($x263 (and $x740 $x786)))
 (let (($x492 (= $x263 true)))
 (let (($x121 (= $x492 true)))
 (let (($x438 (= $x121 true)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x776 input.dst.llvm-%m1)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x254)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x211)))
 (let ((?x643 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (=> $x406 (= ?x643 ?x245)))))))))))
 ))
 (let (($x403 (and $x718 $x447)))
 (let (($x634 (= $x403 true)))
 (let (($x357 (= $x634 true)))
 (let (($x86 (= $x357 true)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x776 input.dst.llvm-%m1)))
 (let ((?x761 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x761))))
 (let ((?x516 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x537 (_ bv1 32))))
 (=> $x244 (= ?x516 ?x148))))))))))
 ))
 (let (($x469 (and $x740 $x716)))
 (let (($x186 (= $x469 true)))
 (let (($x407 (= $x186 true)))
 (let (($x91 (= $x407 true)))
 (let (($x752 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x779 (bvadd ?x776 input.dst.llvm-%m2)))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x779 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x779))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x779 (_ bv2 32))) ?x645)))
 (let ((?x571 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x779 (_ bv3 32))) ?x165)))
 (let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (=> $x605 (= ?x427 ?x571)))))))))))
 ))
 (let (($x201 (and $x603 $x752)))
 (let (($x679 (= $x201 true)))
 (let (($x136 (= $x679 true)))
 (let (($x13 (= $x136 true)))
 (let (($x436 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x41 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x172 (and $x41 $x436)))
 (let (($x296 (= $x172 true)))
 (let (($x342 (= $x296 true)))
 (let (($x174 (= $x342 true)))
 (let ((?x124 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x327 (= (_ bv0 32) ?x124)))
 (let ((?x420 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x574 (= (_ bv0 32) ?x420)))
 (let ((?x67 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x583 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x227 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x437 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x514 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x514 $x437)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x470 (and $x372 $x71)))
 (let (($x751 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x434 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x321 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x321 $x141)))
 (let (($x80 (not $x94)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x609 (and $x98 $x179)))
 (let (($x81 (and (not $x609) $x80)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x140 $x388)))
 (let (($x371 (not $x18)))
 (let (($x483 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x387 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x387 $x483)))
 (let (($x368 (and (not $x125) $x371)))
 (let (($x119 (and (and (and (and (and (and $x368 $x81) $x434) $x751) $x470) $x583) $x574)))
 (let (($x156 (and $x119 $x327)))
 (let (($x429 (= $x156 true)))
 (let (($x85 (= $x429 true)))
 (let (($x32 (= $x85 true)))
 (let ((?x229 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x158 (bvneg ?x229)))
 (let (($x724 (= ?x158 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x273 (= $x724 true)))
 (let (($x128 (= $x273 true)))
 (let (($x301 (= ?x158 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x637 (= $x301 true)))
 (let (($x639 (= $x637 true)))
 (let (($x325 (and $x639 $x128)))
 (let (($x399 (and $x325 $x32)))
 (let (($x743 (and $x399 $x174)))
 (let (($x663 (and $x743 $x13)))
 (let (($x659 (and $x663 $x91)))
 (let (($x218 (and $x659 $x86)))
 (let (($x480 (and $x218 $x438)))
 (let (($x415 (and $x480 $x370)))
 (let (($x170 (and $x415 $x77)))
 (let (($x255 (and $x170 $x173)))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x643 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (=> $x406 (= ?x643 ?x516)))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x537 (_ bv1 32))))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (= $x406 $x244))))))
 ))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (= ?x537 (_ bv0 32))))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x83 (_ bv0 32))))
 (= $x144 $x563))))))
 ))
 (let (($x299 (and $x131 $x164)))
 (let (($x501 (and $x299 $x130)))
 (let (($x508 (and $x501 $x99)))
 (let (($x667 (and $x508 $x255)))
 (let (($x741 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (=> $x605 (= ?x427 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x599 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (= $x605 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x467 (_ bv0 32))))
 (= $x646 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x665 (and $x267 $x694)))
 (let (($x168 (and $x665 $x599)))
 (let (($x117 (and $x168 $x741)))
 (let (($x379 (and $x117 $x667)))
 (let (($x340 (=> $x379 $x486)))
 (let (($x220 (not $x340)))
 (let (($x698 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x57 (select solver-mem_5 memmask-bounded-var!)))
 (let (($x108 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x664 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x476 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x664)))
 (let (($x109 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x664)))
 (let (($x369 (or false (or false (and (and true (or $x176 $x109)) (or $x476 $x108))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x369) (= ?x57 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x57 (_ bv0 8)))))))))))
 ))
 (and (and true $x698) $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x744 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x714 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_5 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x142 (bvadd ?x776 ?x714)))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x398 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x344))))
 (let ((?x643 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (=> $x406 (= ?x643 ?x398)))))))))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x240 (_ bv1 32))))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (= $x406 $x329))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x732 (= false false)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x83 (_ bv0 32))))
 (=> $x144 $x732)))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x240 (_ bv0 32))))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x83 (_ bv0 32))))
 (= $x144 $x291))))))
 ))
 (let (($x157 (and $x197 $x164)))
 (let (($x718 (and $x157 $x15)))
 (let (($x745 (and $x718 $x744)))
 (let (($x222 (= $x745 true)))
 (let (($x486 (= $x222 true)))
 (let ((?x47 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x214 (= (_ bv0 2) ?x47)))
 (let (($x135 (= $x214 true)))
 (let (($x173 (= $x135 true)))
 (let (($x402 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x779 (bvadd ?x776 input.dst.llvm-%m2)))
 (let ((?x753 (concat (select input.dst.llvm-mem (bvadd ?x779 (_ bv1 32))) (select input.dst.llvm-mem ?x779))))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x779 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x779 (_ bv2 32))) ?x753))))
 (let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (=> $x605 (= ?x427 ?x527))))))))))
 ))
 (let (($x219 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x240 (_ bv1 32))))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (= $x605 $x329))))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x732 (= false false)))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x467 (_ bv0 32))))
 (=> $x646 $x732)))))
 ))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x240 (_ bv0 32))))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x467 (_ bv0 32))))
 (= $x646 $x291))))))
 ))
 (let (($x487 (and $x139 $x694)))
 (let (($x603 (and $x487 $x219)))
 (let (($x276 (and $x603 $x402)))
 (let (($x384 (= $x276 true)))
 (let (($x166 (= $x384 true)))
 (let (($x77 (= $x166 true)))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x776 input.dst.llvm-%m1)))
 (let ((?x761 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x761))))
 (let ((?x643 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (=> $x406 (= ?x643 ?x148))))))))))
 ))
 (let (($x717 (and $x718 $x257)))
 (let (($x145 (= $x717 true)))
 (let (($x449 (= $x145 true)))
 (let (($x370 (= $x449 true)))
 (let (($x786 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x776 input.dst.llvm-%m1)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x254)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x211)))
 (let ((?x516 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x537 (_ bv1 32))))
 (=> $x244 (= ?x516 ?x245)))))))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (bvuge ?x240 (_ bv1 32))))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x537 (_ bv1 32))))
 (= $x244 $x329))))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x732 (= false false)))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (= ?x537 (_ bv0 32))))
 (=> $x563 $x732)))))
 ))
 (let (($x307 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x240 (_ bv0 32))))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (= ?x537 (_ bv0 32))))
 (= $x563 $x291))))))
 ))
 (let (($x389 (and $x307 $x375)))
 (let (($x740 (and $x389 $x624)))
 (let (($x263 (and $x740 $x786)))
 (let (($x492 (= $x263 true)))
 (let (($x121 (= $x492 true)))
 (let (($x438 (= $x121 true)))
 (let (($x447 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x776 input.dst.llvm-%m1)))
 (let ((?x254 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x254)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x211)))
 (let ((?x643 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (=> $x406 (= ?x643 ?x245)))))))))))
 ))
 (let (($x403 (and $x718 $x447)))
 (let (($x634 (= $x403 true)))
 (let (($x357 (= $x634 true)))
 (let (($x86 (= $x357 true)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x147 (bvadd ?x776 input.dst.llvm-%m1)))
 (let ((?x761 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x761))))
 (let ((?x516 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x537 (_ bv1 32))))
 (=> $x244 (= ?x516 ?x148))))))))))
 ))
 (let (($x469 (and $x740 $x716)))
 (let (($x186 (= $x469 true)))
 (let (($x407 (= $x186 true)))
 (let (($x91 (= $x407 true)))
 (let (($x752 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x776 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x779 (bvadd ?x776 input.dst.llvm-%m2)))
 (let ((?x645 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x779 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x779))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x779 (_ bv2 32))) ?x645)))
 (let ((?x571 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x779 (_ bv3 32))) ?x165)))
 (let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (=> $x605 (= ?x427 ?x571)))))))))))
 ))
 (let (($x201 (and $x603 $x752)))
 (let (($x679 (= $x201 true)))
 (let (($x136 (= $x679 true)))
 (let (($x13 (= $x136 true)))
 (let (($x436 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x41 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x172 (and $x41 $x436)))
 (let (($x296 (= $x172 true)))
 (let (($x342 (= $x296 true)))
 (let (($x174 (= $x342 true)))
 (let ((?x124 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x327 (= (_ bv0 32) ?x124)))
 (let ((?x420 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x574 (= (_ bv0 32) ?x420)))
 (let ((?x67 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x583 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x67)))
 (let ((?x227 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x437 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x514 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x514 $x437)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x470 (and $x372 $x71)))
 (let (($x751 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x434 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x321 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x321 $x141)))
 (let (($x80 (not $x94)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x609 (and $x98 $x179)))
 (let (($x81 (and (not $x609) $x80)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x140 $x388)))
 (let (($x371 (not $x18)))
 (let (($x483 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x387 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x387 $x483)))
 (let (($x368 (and (not $x125) $x371)))
 (let (($x119 (and (and (and (and (and (and $x368 $x81) $x434) $x751) $x470) $x583) $x574)))
 (let (($x156 (and $x119 $x327)))
 (let (($x429 (= $x156 true)))
 (let (($x85 (= $x429 true)))
 (let (($x32 (= $x85 true)))
 (let ((?x229 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x158 (bvneg ?x229)))
 (let (($x724 (= ?x158 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x273 (= $x724 true)))
 (let (($x128 (= $x273 true)))
 (let (($x301 (= ?x158 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x637 (= $x301 true)))
 (let (($x639 (= $x637 true)))
 (let (($x325 (and $x639 $x128)))
 (let (($x399 (and $x325 $x32)))
 (let (($x743 (and $x399 $x174)))
 (let (($x663 (and $x743 $x13)))
 (let (($x659 (and $x663 $x91)))
 (let (($x218 (and $x659 $x86)))
 (let (($x480 (and $x218 $x438)))
 (let (($x415 (and $x480 $x370)))
 (let (($x170 (and $x415 $x77)))
 (let (($x255 (and $x170 $x173)))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x516 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x643 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (=> $x406 (= ?x643 ?x516)))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (bvuge ?x537 (_ bv1 32))))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x83 (_ bv1 32))))
 (= $x406 $x244))))))
 ))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x563 (= ?x537 (_ bv0 32))))
 (let ((?x83 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x144 (= ?x83 (_ bv0 32))))
 (= $x144 $x563))))))
 ))
 (let (($x299 (and $x131 $x164)))
 (let (($x501 (and $x299 $x130)))
 (let (($x508 (and $x501 $x99)))
 (let (($x667 (and $x508 $x255)))
 (let (($x741 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x427 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (=> $x605 (= ?x427 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x599 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x605 (bvuge ?x467 (_ bv1 32))))
 (= $x605 (bvuge ?x390 (_ bv1 32)))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x467 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x646 (= ?x467 (_ bv0 32))))
 (= $x646 (= ?x390 (_ bv0 32)))))))
 ))
 (let (($x665 (and $x267 $x694)))
 (let (($x168 (and $x665 $x599)))
 (let (($x117 (and $x168 $x741)))
 (let (($x379 (and $x117 $x667)))
 (let (($x340 (=> $x379 $x486)))
 (let (($x220 (not $x340)))
 (let (($x698 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x57 (select solver-mem_5 memmask-bounded-var!)))
 (let (($x108 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x664 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x476 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x664)))
 (let (($x109 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x664)))
 (let (($x369 (or false (or false (and (and true (or $x176 $x109)) (or $x476 $x108))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x369) (= ?x57 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x57 (_ bv0 8)))))))))))
 ))
 (and (and true $x698) $x220)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!139))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x1ca11518)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8d290eac)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!142))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!141))
  (define-fun solver-mem_5 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!140))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x0201001c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8d290eaf)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x1ca1151b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8d290eac)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x1ca11518)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!142!148 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x020100a6) #x04
    (ite (= x!0 #x0201001c) #x00
    (ite (= x!0 #x020100a7) #x00
    (ite (= x!0 #x02010108) #x00
    (ite (= x!0 #x0201009f) #x01
    (ite (= x!0 #x020100a1) #x00
    (ite (= x!0 #x0201001d) #x00
    (ite (= x!0 #x20000001) #x10
    (ite (= x!0 #x20000000) #x00
    (ite (= x!0 #x0201010b) #x00
    (ite (= x!0 #x20000002) #x00
    (ite (= x!0 #x020100a5) #x04
    (ite (= x!0 #x20000083) #x00
    (ite (= x!0 #x020100de) #x00
    (ite (= x!0 #x0201011d) #x00
    (ite (= x!0 #x1ca1151c) #x00
    (ite (= x!0 #x0f022736) #x02
    (ite (= x!0 #x0201010a) #x00
    (ite (= x!0 #x020100df) #x00
    (ite (= x!0 #x20000080) #x00
    (ite (= x!0 #x0201011c) #x00
    (ite (= x!0 #x02010109) #x40
    (ite (= x!0 #x020100a0) #x00
    (ite (= x!0 #x20000081) #x00
    (ite (= x!0 #x020100a3) #x00
    (ite (= x!0 #x0201011f) #x00
    (ite (= x!0 #x0201001f) #x00
    (ite (= x!0 #x0201001e) #x00
    (ite (= x!0 #x20000003) #x00
    (ite (= x!0 #x1ca1151a) #x02
    (ite (= x!0 #x8d290eb0) #x00
    (ite (= x!0 #x20000082) #x00
    (ite (= x!0 #x020100a4) #x00
    (ite (= x!0 #x0201011e) #x00
    (ite (= x!0 #x0201009e) #x10
    (ite (= x!0 #x0201009c) #x00
    (ite (= x!0 #x020100a2) #x20
    (ite (= x!0 #x020100dc) #x00
    (ite (= x!0 #x020100dd) #x00
    (ite (= x!0 #x0201009d) #x00
      #x05)))))))))))))))))))))))))))))))))))))))))
  (define-fun input.spec-%var-m2-1.0.1!149 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000020))
  (define-fun k!144 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x0201001c x!0) #x0201001c #x00000065)
              #x00000064)
         #x00000020))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!149 (k!144 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x0201001c) false
    (ite (= x!0 #x00000020) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!143 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x8d290ead x!0)
                    (ite (bvule #x8d290eaf x!0)
                         (ite (bvule #x8d290eb0 x!0) #x8d290eb0 #x8d290eaf)
                         #x8d290ead)
                    #x8d290eac)))
    (let ((a!2 (ite (bvule #x20000082 x!0)
                    (ite (bvule #x20000083 x!0)
                         (ite (bvule #x8d290eac x!0) a!1 #x20000083)
                         #x20000082)
                    #x20000081)))
    (let ((a!3 (ite (bvule #x20000003 x!0)
                    (ite (bvule #x20000080 x!0)
                         (ite (bvule #x20000081 x!0) a!2 #x20000080)
                         #x20000003)
                    #x20000002)))
    (let ((a!4 (ite (bvule #x20000000 x!0)
                    (ite (bvule #x20000001 x!0)
                         (ite (bvule #x20000002 x!0) a!3 #x20000001)
                         #x20000000)
                    #x1ca1151c)))
    (let ((a!5 (ite (bvule #x1ca11519 x!0)
                    (ite (bvule #x1ca1151b x!0)
                         (ite (bvule #x1ca1151c x!0) a!4 #x1ca1151b)
                         #x1ca11519)
                    #x1ca11518)))
    (let ((a!6 (ite (bvule #x0201011f x!0)
                    (ite (bvule #x0f022736 x!0)
                         (ite (bvule #x1ca11518 x!0) a!5 #x0f022736)
                         #x0201011f)
                    #x0201011e)))
    (let ((a!7 (ite (bvule #x0201011c x!0)
                    (ite (bvule #x0201011d x!0)
                         (ite (bvule #x0201011e x!0) a!6 #x0201011d)
                         #x0201011c)
                    #x0201010b)))
    (let ((a!8 (ite (bvule #x02010109 x!0)
                    (ite (bvule #x0201010a x!0)
                         (ite (bvule #x0201010b x!0) a!7 #x0201010a)
                         #x02010109)
                    #x02010108)))
    (let ((a!9 (ite (bvule #x020100de x!0)
                    (ite (bvule #x020100df x!0)
                         (ite (bvule #x02010108 x!0) a!8 #x020100df)
                         #x020100de)
                    #x020100dd)))
    (let ((a!10 (ite (bvule #x020100a7 x!0)
                     (ite (bvule #x020100dc x!0)
                          (ite (bvule #x020100dd x!0) a!9 #x020100dc)
                          #x020100a7)
                     #x020100a6)))
    (let ((a!11 (ite (bvule #x020100a4 x!0)
                     (ite (bvule #x020100a5 x!0)
                          (ite (bvule #x020100a6 x!0) a!10 #x020100a5)
                          #x020100a4)
                     #x020100a3)))
    (let ((a!12 (ite (bvule #x020100a1 x!0)
                     (ite (bvule #x020100a2 x!0)
                          (ite (bvule #x020100a3 x!0) a!11 #x020100a2)
                          #x020100a1)
                     #x020100a0)))
    (let ((a!13 (ite (bvule #x0201009e x!0)
                     (ite (bvule #x0201009f x!0)
                          (ite (bvule #x020100a0 x!0) a!12 #x0201009f)
                          #x0201009e)
                     #x0201009d)))
    (let ((a!14 (ite (bvule #x0201001f x!0)
                     (ite (bvule #x0201009c x!0)
                          (ite (bvule #x0201009d x!0) a!13 #x0201009c)
                          #x0201001f)
                     #x0201001e)))
      (ite (bvule #x0201001d x!0)
           (ite (bvule #x0201001e x!0) a!14 #x0201001d)
           #x0201001c))))))))))))))))
  (define-fun input.spec-%var-m1-1.0.1!146 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000021)
        (= x!0 #x0000003b)
        (= x!0 #x00000022)
        (= x!0 #x00000000)
        (= x!0 #x00000020)
        (= x!0 #x00000030)
        (= x!0 #x00000040)))
  (define-fun k!139 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x020100a6) #x04
    (ite (= x!0 #x0201009f) #x01
    (ite (= x!0 #x020100a5) #x04
    (ite (= x!0 #x20000001) #x10
    (ite (= x!0 #x08000003) #x02
    (ite (= x!0 #x02010109) #x40
    (ite (= x!0 #x0201009e) #x10
    (ite (= x!0 #x020100a2) #x20
      #x00)))))))))
  (define-fun k!142 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!142!148 (k!143 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00001000
    (ite (= x!0 #x00000020) #x00000000
      (let ((a!1 (concat (k!139 (bvadd #x20000003 (bvmul #x00000004 x!0)))
                         (k!139 (bvadd #x20000002 (bvmul #x00000004 x!0)))
                         (k!139 (bvadd #x20000001 (bvmul #x00000004 x!0)))
                         (k!139 (bvadd #x20000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!142 (bvadd #x20000003 (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x20000002 (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x20000001 (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x20000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    #x08000000)
  (define-fun k!145 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000040 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000040)
                    #x0000003b)))
    (let ((a!2 (ite (bvule #x00000022 x!0)
                    (ite (bvule #x00000030 x!0)
                         (ite (bvule #x0000003b x!0) a!1 #x00000030)
                         #x00000022)
                    #x00000021)))
      (ite (bvule #x00000020 x!0)
           (ite (bvule #x00000021 x!0) a!2 #x00000020)
           #x00000000))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!146 (k!145 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000040) #x00000000
    (ite (= x!0 #x0000003b) #x00004000
    (ite (= x!0 #x00000020) #x01100000
    (ite (= x!0 #x00000022) #x00040400
    (ite (= x!0 #x00000021) #x00200000
    (ite (= x!0 #x00000030) #x00000000
      (let ((a!1 (concat (k!139 (bvadd #x0201001f (bvmul #x00000004 x!0)))
                         (k!139 (bvadd #x0201001e (bvmul #x00000004 x!0)))
                         (k!139 (bvadd #x0201001d (bvmul #x00000004 x!0)))
                         (k!139 (bvadd #x0201001c (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!142 (bvadd #x0201001f (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x0201001e (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x0201001d (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x0201001c (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!150 ((x!0
    (_ BitVec 32))) Bool
    (or (= x!0 #x00000021)
        (= x!0 #x0000003b)
        (= x!0 #x00000022)
        (= x!0 #x00000000)
        (= x!0 #x00000020)
        (= x!0 #x00000030)
        (= x!0 #x00000040)))
  (define-fun k!141 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!150
      (k!145 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000040) #x00000000
    (ite (= x!0 #x0000003b) #x00004000
    (ite (= x!0 #x00000020) #x01100000
    (ite (= x!0 #x00000022) #x00040400
    (ite (= x!0 #x00000030) #x00000000
    (ite (= x!0 #x00000021) #x00200000
      (let ((a!1 (concat (k!142 (bvadd #x0201001f (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x0201001e (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x0201001d (bvmul #x00000004 x!0)))
                         (k!142 (bvadd #x0201001c (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000020) #x00000000
    (ite (= x!0 #x00000000) #x00001000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun k!140!147 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x020100a6) #x04
    (ite (= x!0 #x020100a2) #x20
    (ite (= x!0 #x0201001c) #x00
    (ite (= x!0 #x20000003) #x00
    (ite (= x!0 #x020100a5) #x04
    (ite (= x!0 #x02010108) #x00
    (ite (= x!0 #x0201009f) #x01
    (ite (= x!0 #x0f022736) #x02
    (ite (= x!0 #x0201001d) #x00
    (ite (= x!0 #x20000001) #x10
    (ite (= x!0 #x0201010b) #x00
    (ite (= x!0 #x020100a7) #x00
    (ite (= x!0 #x8d290eac) #x00
    (ite (= x!0 #x20000002) #x00
    (ite (= x!0 #x20000083) #x00
    (ite (= x!0 #x020100de) #x00
    (ite (= x!0 #x0201011d) #x00
    (ite (= x!0 #x020100a1) #x00
    (ite (= x!0 #x1ca1151c) #x00
    (ite (= x!0 #x20000000) #x00
    (ite (= x!0 #x0201010a) #x00
    (ite (= x!0 #x020100df) #x00
    (ite (= x!0 #x20000080) #x00
    (ite (= x!0 #x0201011c) #x00
    (ite (= x!0 #x02010109) #x40
    (ite (= x!0 #x020100a0) #x00
    (ite (= x!0 #x1ca11518) #x00
    (ite (= x!0 #x8d290ead) #x00
    (ite (= x!0 #x20000081) #x00
    (ite (= x!0 #x020100a3) #x00
    (ite (= x!0 #x1ca11519) #x00
    (ite (= x!0 #x0201011f) #x00
    (ite (= x!0 #x0201001f) #x00
    (ite (= x!0 #x0201001e) #x00
    (ite (= x!0 #x1ca1151a) #x00
    (ite (= x!0 #x8d290eb0) #x00
    (ite (= x!0 #x8d290eaf) #x00
    (ite (= x!0 #x20000082) #x00
    (ite (= x!0 #x020100a4) #x00
    (ite (= x!0 #x0201011e) #x00
    (ite (= x!0 #x0201009e) #x10
    (ite (= x!0 #x0201009c) #x00
    (ite (= x!0 #x1ca1151b) #x00
    (ite (= x!0 #x020100dc) #x00
    (ite (= x!0 #x020100dd) #x00
    (ite (= x!0 #x0201009d) #x00
      #x03)))))))))))))))))))))))))))))))))))))))))))))))
  (define-fun k!140 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!140!147 (k!143 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x709 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_6 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x747 (bvadd ?x264 ?x481)))
 (let ((?x324 (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv1 32))) (select input.dst.llvm-mem ?x747))))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv2 32))) ?x324))))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (=> $x553 (= ?x129 ?x382)))))))))))
 ))
 (let (($x431 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x482 (_ bv1 32))))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (= $x553 $x261))))))
 ))
 (let (($x566 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x331 (_ bv0 32))))
 (=> $x372 $x11)))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (= ?x482 (_ bv0 32))))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x331 (_ bv0 32))))
 (= $x372 $x542))))))
 ))
 (let (($x413 (and $x249 $x566)))
 (let (($x729 (and $x413 $x431)))
 (let (($x455 (and $x729 $x709)))
 (let (($x351 (= $x455 true)))
 (let (($x204 (= $x351 true)))
 (let ((?x774 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x97 (= (_ bv0 2) ?x774)))
 (let (($x701 (= $x97 true)))
 (let (($x335 (= $x701 true)))
 (let (($x777 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x726 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv1 32))) (select input.dst.llvm-mem ?x726))))
 (let ((?x780 (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv2 32))) ?x472))))
 (let ((?x99 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (=> $x131 (= ?x99 ?x780))))))))))
 ))
 (let (($x704 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x482 (_ bv1 32))))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (= $x131 $x261))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x25 (_ bv0 32))))
 (=> $x694 $x11)))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (= ?x482 (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x25 (_ bv0 32))))
 (= $x694 $x542))))))
 ))
 (let (($x323 (and $x118 $x168)))
 (let (($x48 (and $x323 $x704)))
 (let (($x737 (and $x48 $x777)))
 (let (($x246 (= $x737 true)))
 (let (($x771 (= $x246 true)))
 (let (($x758 (= $x771 true)))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x238 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x695 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x695))))
 (let ((?x443 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (=> $x539 (= ?x443 ?x239))))))))))
 ))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x482 (_ bv1 32))))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (= $x539 $x261))))))
 ))
 (let (($x67 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x621 (_ bv0 32))))
 (=> $x227 $x11)))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (= ?x482 (_ bv0 32))))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x621 (_ bv0 32))))
 (= $x227 $x542))))))
 ))
 (let (($x333 (and $x8 $x67)))
 (let (($x507 (and $x333 $x146)))
 (let (($x775 (and $x507 $x116)))
 (let (($x773 (= $x775 true)))
 (let (($x568 (= $x773 true)))
 (let (($x768 (= $x568 true)))
 (let (($x500 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x238 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x238))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv2 32))) ?x596)))
 (let ((?x466 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv3 32))) ?x178)))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (=> $x553 (= ?x129 ?x466)))))))))))
 ))
 (let (($x671 (and $x729 $x500)))
 (let (($x738 (= $x671 true)))
 (let (($x260 (= $x738 true)))
 (let (($x52 (= $x260 true)))
 (let (($x697 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x238 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x238))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv2 32))) ?x596)))
 (let ((?x466 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv3 32))) ?x178)))
 (let ((?x443 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (=> $x539 (= ?x443 ?x466)))))))))))
 ))
 (let (($x488 (and $x507 $x697)))
 (let (($x475 (= $x488 true)))
 (let (($x352 (= $x475 true)))
 (let (($x213 (= $x352 true)))
 (let (($x235 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x238 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x695 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x695))))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (=> $x553 (= ?x129 ?x239))))))))))
 ))
 (let (($x51 (and $x729 $x235)))
 (let (($x680 (= $x51 true)))
 (let (($x330 (= $x680 true)))
 (let (($x685 (= $x330 true)))
 (let (($x518 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x726 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x632 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x726 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x726))))
 (let ((?x720 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x726 (_ bv2 32))) ?x632)))
 (let ((?x550 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x726 (_ bv3 32))) ?x720)))
 (let ((?x99 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (=> $x131 (= ?x99 ?x550)))))))))))
 ))
 (let (($x361 (and $x48 $x518)))
 (let (($x677 (= $x361 true)))
 (let (($x256 (= $x677 true)))
 (let (($x739 (= $x256 true)))
 (let (($x587 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x254 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x290 (and $x254 $x587)))
 (let (($x447 (= $x290 true)))
 (let (($x403 (= $x447 true)))
 (let (($x634 (= $x403 true)))
 (let ((?x716 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x469 (= (_ bv0 32) ?x716)))
 (let ((?x306 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x757 (= (_ bv0 32) ?x306)))
 (let ((?x770 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x770)))
 (let ((?x721 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x721)))
 (let (($x759 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x759 $x288)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x761 (and $x54 $x12)))
 (let (($x766 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x307 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x375 (and $x307 $x175)))
 (let (($x389 (not $x375)))
 (let (($x663 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x562 (and $x13 $x663)))
 (let (($x624 (and (not $x562) $x389)))
 (let (($x526 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x578 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x752 (and $x578 $x526)))
 (let (($x201 (not $x752)))
 (let (($x645 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x412 $x645)))
 (let (($x136 (and (not $x165) $x201)))
 (let (($x197 (and (and (and (and (and (and $x136 $x624) $x418) $x766) $x761) $x148) $x757)))
 (let (($x157 (and $x197 $x469)))
 (let (($x417 (= $x157 true)))
 (let (($x15 (= $x417 true)))
 (let (($x718 (= $x15 true)))
 (let ((?x329 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x319 (bvneg ?x329)))
 (let (($x662 (= ?x319 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x712 (= $x662 true)))
 (let (($x769 (= $x712 true)))
 (let (($x603 (= ?x319 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x635 (= $x603 true)))
 (let (($x776 (= $x635 true)))
 (let (($x580 (and $x776 $x769)))
 (let (($x205 (and $x580 $x718)))
 (let (($x357 (and $x205 $x634)))
 (let (($x532 (and $x357 $x739)))
 (let (($x623 (and $x532 $x685)))
 (let (($x149 (and $x623 $x213)))
 (let (($x629 (and $x149 $x52)))
 (let (($x49 (and $x629 $x768)))
 (let (($x778 (and $x49 $x758)))
 (let (($x641 (and $x778 $x335)))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x443 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (=> $x539 (= ?x443 ?x129)))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (= $x539 $x553))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x331 (_ bv0 32))))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x621 (_ bv0 32))))
 (= $x227 $x372))))))
 ))
 (let (($x583 (and $x71 $x67)))
 (let (($x474 (and $x583 $x41)))
 (let (($x5 (and $x474 $x291)))
 (let (($x200 (and $x5 $x641)))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (=> $x131 (= ?x99 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x616 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (= $x131 (bvuge ?x616 (_ bv1 32)))))))
 ))
 (let (($x605 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x616 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x25 (_ bv0 32))))
 (= $x694 (= ?x616 (_ bv0 32)))))))
 ))
 (let (($x427 (and $x605 $x168)))
 (let (($x299 (and $x427 $x164)))
 (let (($x229 (and $x299 $x546)))
 (let (($x348 (and $x229 $x200)))
 (let (($x336 (=> $x348 $x204)))
 (let (($x674 (not $x336)))
 (let (($x615 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x565 (select solver-mem_6 memmask-bounded-var!)))
 (let (($x78 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x349 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x349)))
 (let (($x728 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x349)))
 (let (($x217 (or false (or false (and (and true (or $x212 $x728)) (or $x394 $x78))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x217) (= ?x565 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x565 (_ bv0 8)))))))))))
 ))
 (and (and true $x615) $x674)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x709 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x481 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_6 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x747 (bvadd ?x264 ?x481)))
 (let ((?x324 (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv1 32))) (select input.dst.llvm-mem ?x747))))
 (let ((?x382 (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv2 32))) ?x324))))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (=> $x553 (= ?x129 ?x382)))))))))))
 ))
 (let (($x431 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x482 (_ bv1 32))))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (= $x553 $x261))))))
 ))
 (let (($x566 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x331 (_ bv0 32))))
 (=> $x372 $x11)))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (= ?x482 (_ bv0 32))))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x331 (_ bv0 32))))
 (= $x372 $x542))))))
 ))
 (let (($x413 (and $x249 $x566)))
 (let (($x729 (and $x413 $x431)))
 (let (($x455 (and $x729 $x709)))
 (let (($x351 (= $x455 true)))
 (let (($x204 (= $x351 true)))
 (let ((?x774 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x97 (= (_ bv0 2) ?x774)))
 (let (($x701 (= $x97 true)))
 (let (($x335 (= $x701 true)))
 (let (($x777 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x726 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv1 32))) (select input.dst.llvm-mem ?x726))))
 (let ((?x780 (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv2 32))) ?x472))))
 (let ((?x99 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (=> $x131 (= ?x99 ?x780))))))))))
 ))
 (let (($x704 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x482 (_ bv1 32))))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (= $x131 $x261))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x25 (_ bv0 32))))
 (=> $x694 $x11)))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (= ?x482 (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x25 (_ bv0 32))))
 (= $x694 $x542))))))
 ))
 (let (($x323 (and $x118 $x168)))
 (let (($x48 (and $x323 $x704)))
 (let (($x737 (and $x48 $x777)))
 (let (($x246 (= $x737 true)))
 (let (($x771 (= $x246 true)))
 (let (($x758 (= $x771 true)))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x238 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x695 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x695))))
 (let ((?x443 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (=> $x539 (= ?x443 ?x239))))))))))
 ))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x482 (_ bv1 32))))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (= $x539 $x261))))))
 ))
 (let (($x67 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x621 (_ bv0 32))))
 (=> $x227 $x11)))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x482 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x542 (= ?x482 (_ bv0 32))))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x621 (_ bv0 32))))
 (= $x227 $x542))))))
 ))
 (let (($x333 (and $x8 $x67)))
 (let (($x507 (and $x333 $x146)))
 (let (($x775 (and $x507 $x116)))
 (let (($x773 (= $x775 true)))
 (let (($x568 (= $x773 true)))
 (let (($x768 (= $x568 true)))
 (let (($x500 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x238 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x238))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv2 32))) ?x596)))
 (let ((?x466 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv3 32))) ?x178)))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (=> $x553 (= ?x129 ?x466)))))))))))
 ))
 (let (($x671 (and $x729 $x500)))
 (let (($x738 (= $x671 true)))
 (let (($x260 (= $x738 true)))
 (let (($x52 (= $x260 true)))
 (let (($x697 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x238 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x596 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x238))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv2 32))) ?x596)))
 (let ((?x466 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x238 (_ bv3 32))) ?x178)))
 (let ((?x443 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (=> $x539 (= ?x443 ?x466)))))))))))
 ))
 (let (($x488 (and $x507 $x697)))
 (let (($x475 (= $x488 true)))
 (let (($x352 (= $x475 true)))
 (let (($x213 (= $x352 true)))
 (let (($x235 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x238 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x695 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x695))))
 (let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (=> $x553 (= ?x129 ?x239))))))))))
 ))
 (let (($x51 (and $x729 $x235)))
 (let (($x680 (= $x51 true)))
 (let (($x330 (= $x680 true)))
 (let (($x685 (= $x330 true)))
 (let (($x518 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x726 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x632 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x726 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x726))))
 (let ((?x720 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x726 (_ bv2 32))) ?x632)))
 (let ((?x550 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x726 (_ bv3 32))) ?x720)))
 (let ((?x99 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (=> $x131 (= ?x99 ?x550)))))))))))
 ))
 (let (($x361 (and $x48 $x518)))
 (let (($x677 (= $x361 true)))
 (let (($x256 (= $x677 true)))
 (let (($x739 (= $x256 true)))
 (let (($x587 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x254 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x290 (and $x254 $x587)))
 (let (($x447 (= $x290 true)))
 (let (($x403 (= $x447 true)))
 (let (($x634 (= $x403 true)))
 (let ((?x716 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x469 (= (_ bv0 32) ?x716)))
 (let ((?x306 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x757 (= (_ bv0 32) ?x306)))
 (let ((?x770 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x770)))
 (let ((?x721 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x721)))
 (let (($x759 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x12 (and $x759 $x288)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x761 (and $x54 $x12)))
 (let (($x766 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x418 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x307 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x375 (and $x307 $x175)))
 (let (($x389 (not $x375)))
 (let (($x663 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x562 (and $x13 $x663)))
 (let (($x624 (and (not $x562) $x389)))
 (let (($x526 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x578 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x752 (and $x578 $x526)))
 (let (($x201 (not $x752)))
 (let (($x645 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x412 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x412 $x645)))
 (let (($x136 (and (not $x165) $x201)))
 (let (($x197 (and (and (and (and (and (and $x136 $x624) $x418) $x766) $x761) $x148) $x757)))
 (let (($x157 (and $x197 $x469)))
 (let (($x417 (= $x157 true)))
 (let (($x15 (= $x417 true)))
 (let (($x718 (= $x15 true)))
 (let ((?x329 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x319 (bvneg ?x329)))
 (let (($x662 (= ?x319 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x712 (= $x662 true)))
 (let (($x769 (= $x712 true)))
 (let (($x603 (= ?x319 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x635 (= $x603 true)))
 (let (($x776 (= $x635 true)))
 (let (($x580 (and $x776 $x769)))
 (let (($x205 (and $x580 $x718)))
 (let (($x357 (and $x205 $x634)))
 (let (($x532 (and $x357 $x739)))
 (let (($x623 (and $x532 $x685)))
 (let (($x149 (and $x623 $x213)))
 (let (($x629 (and $x149 $x52)))
 (let (($x49 (and $x629 $x768)))
 (let (($x778 (and $x49 $x758)))
 (let (($x641 (and $x778 $x335)))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x443 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (=> $x539 (= ?x443 ?x129)))))))
 ))
 (let (($x41 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x553 (bvuge ?x331 (_ bv1 32))))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x621 (_ bv1 32))))
 (= $x539 $x553))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x331 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x331 (_ bv0 32))))
 (let ((?x621 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x621 (_ bv0 32))))
 (= $x227 $x372))))))
 ))
 (let (($x583 (and $x71 $x67)))
 (let (($x474 (and $x583 $x41)))
 (let (($x5 (and $x474 $x291)))
 (let (($x200 (and $x5 $x641)))
 (let (($x546 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x99 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (=> $x131 (= ?x99 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x616 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x25 (_ bv1 32))))
 (= $x131 (bvuge ?x616 (_ bv1 32)))))))
 ))
 (let (($x605 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x616 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x25 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x694 (= ?x25 (_ bv0 32))))
 (= $x694 (= ?x616 (_ bv0 32)))))))
 ))
 (let (($x427 (and $x605 $x168)))
 (let (($x299 (and $x427 $x164)))
 (let (($x229 (and $x299 $x546)))
 (let (($x348 (and $x229 $x200)))
 (let (($x336 (=> $x348 $x204)))
 (let (($x674 (not $x336)))
 (let (($x615 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x565 (select solver-mem_6 memmask-bounded-var!)))
 (let (($x78 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x349 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x349)))
 (let (($x728 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x349)))
 (let (($x217 (or false (or false (and (and true (or $x212 $x728)) (or $x394 $x78))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x217) (= ?x565 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x565 (_ bv0 8)))))))))))
 ))
 (and (and true $x615) $x674)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun solver-mem_6 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!110))
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!108))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x41c4d224)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x01000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x11d06704)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!110))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!109))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x11d06707)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x41c4d227)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x11d06704)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x41c4d224)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!116 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!112 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000065 x!0)
                    (ite (bvule #x01000000 x!0)
                         (ite (bvule #x20400c10 x!0) #x20400c10 #x01000000)
                         #x00000065)
                    #x00000064)))
      (ite (bvule #x00000064 x!0) a!1 #x00000000)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!116 (k!112 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x20400c10) false
    (ite (= x!0 #x01000000) false
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!114 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!111 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x41c4d225 x!0)
                    (ite (bvule #x41c4d227 x!0)
                         (ite (bvule #x41c4d228 x!0) #x41c4d228 #x41c4d227)
                         #x41c4d225)
                    #x41c4d224)))
    (let ((a!2 (ite (bvule #x11d06707 x!0)
                    (ite (bvule #x11d06708 x!0)
                         (ite (bvule #x41c4d224 x!0) a!1 #x11d06708)
                         #x11d06707)
                    #x11d06705)))
    (let ((a!3 (ite (bvule #x02000003 x!0)
                    (ite (bvule #x11d06704 x!0)
                         (ite (bvule #x11d06705 x!0) a!2 #x11d06704)
                         #x02000003)
                    #x02000002)))
    (let ((a!4 (ite (bvule #x02000000 x!0)
                    (ite (bvule #x02000001 x!0)
                         (ite (bvule #x02000002 x!0) a!3 #x02000001)
                         #x02000000)
                    #x00005442)))
    (let ((a!5 (ite (bvule #x00000002 x!0)
                    (ite (bvule #x00000003 x!0)
                         (ite (bvule #x00005442 x!0) a!4 #x00000003)
                         #x00000002)
                    #x00000001)))
      (ite (bvule #x00000001 x!0) a!5 #x00000000)))))))
  (define-fun k!110!115 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x02000000) #x80
    (ite (= x!0 #x02000001) #x00
    (ite (= x!0 #x41c4d228) #x10
    (ite (= x!0 #x41c4d224) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x11d06704) #x00
    (ite (= x!0 #x00005442) #x10
    (ite (= x!0 #x41c4d225) #x00
    (ite (= x!0 #x11d06705) #x00
    (ite (= x!0 #x02000003) #x00
    (ite (= x!0 #x02000002) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x11d06707) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x41c4d227) #x00
    (ite (= x!0 #x00000002) #x00
      #x02)))))))))))))))))
  (define-fun k!110 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!110!115 (k!111 x!0)))
  (define-fun k!108 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x02000000) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!108 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!108 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!110 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!110 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!110))
              (= x!3 (_ as-array k!109))
              (= x!4 #x01000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x20400c10
      #x11d06704))
  (define-fun k!113 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x01000000 x!0) #x01000000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!114 (k!113 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000080
      (let ((a!1 (concat (k!108 (bvadd #x02000003 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x02000002 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x02000001 (bvmul #x00000004 x!0)))
                         (k!108 (bvadd #x02000000 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!110 (bvadd #x02000003 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000002 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000001 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun k!109 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x30)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!117 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!117
      (k!113 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000080
      (let ((a!1 (concat (k!110 (bvadd #x02000003 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000002 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000001 (bvmul #x00000004 x!0)))
                         (k!110 (bvadd #x02000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x233 (= false true)))
 (let (($x253 (= $x233 true)))
 (let ((?x133 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x221 (= (_ bv0 32) ?x133)))
 (let ((?x710 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x37 (= (_ bv0 32) ?x710)))
 (let ((?x495 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x495)))
 (let ((?x656 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x656)))
 (let (($x519 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x519 $x208)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x44 $x206)))
 (let (($x28 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x398 (and $x161 $x280)))
 (let (($x548 (not $x398)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x582 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x404 (and $x582 $x279)))
 (let (($x10 (and (not $x404) $x548)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x714 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (and $x714 $x142)))
 (let (($x316 (not $x344)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x667 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x465 (and $x667 $x379)))
 (let (($x332 (and (not $x465) $x316)))
 (let (($x151 (and (and (and (and (and (and $x332 $x10) $x222) $x28) $x187) $x169) $x37)))
 (let (($x733 (and $x151 $x221)))
 (let (($x681 (= $x733 true)))
 (let (($x70 (= $x681 true)))
 (let (($x228 (= $x70 true)))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x200 input.dst.llvm-%m2)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x266))))
 (let ((?x291 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (=> $x71 (= ?x291 ?x68))))))))))
 ))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x669 (bvuge ?x260 (_ bv1 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (= $x71 $x669))))))
 ))
 (let (($x299 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x6 (= false false)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x599 (_ bv0 32))))
 (=> $x168 $x6)))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x599 (_ bv0 32))))
 (= $x168 $x52))))))
 ))
 (let (($x326 (and $x9 $x299)))
 (let (($x767 (and $x326 $x472)))
 (let (($x31 (and $x767 $x586)))
 (let (($x126 (= $x31 true)))
 (let (($x654 (= $x126 true)))
 (let (($x199 (= $x654 true)))
 (let ((?x321 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x141 (= (_ bv0 2) ?x321)))
 (let (($x94 (= $x141 true)))
 (let (($x66 (= $x94 true)))
 (let (($x727 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x501 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x179 (and $x501 $x727)))
 (let (($x371 (= $x179 true)))
 (let (($x368 (= $x371 true)))
 (let (($x98 (= $x368 true)))
 (let (($x468 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x387 (bvadd ?x200 input.dst.llvm-%m1)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem ?x387))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv2 32))) ?x225))))
 (let ((?x703 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (=> $x708 (= ?x703 ?x223))))))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x669 (bvuge ?x260 (_ bv1 32))))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (= $x708 $x669))))))
 ))
 (let (($x770 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x6 (= false false)))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x216 (_ bv0 32))))
 (=> $x721 $x6)))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x216 (_ bv0 32))))
 (= $x721 $x52))))))
 ))
 (let (($x503 (and $x608 $x770)))
 (let (($x395 (and $x503 $x383)))
 (let (($x559 (and $x395 $x468)))
 (let (($x585 (= $x559 true)))
 (let (($x93 (= $x585 true)))
 (let (($x309 (= $x93 true)))
 (let (($x612 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x387 (bvadd ?x200 input.dst.llvm-%m1)))
 (let ((?x536 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x387))))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv2 32))) ?x536)))
 (let ((?x698 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv3 32))) ?x171)))
 (let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x91 (_ bv1 32))))
 (=> $x55 (= ?x243 ?x698)))))))))))
 ))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x669 (bvuge ?x260 (_ bv1 32))))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x91 (_ bv1 32))))
 (= $x55 $x669))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x6 (= false false)))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x91 (_ bv0 32))))
 (=> $x54 $x6)))))
 ))
 (let (($x749 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x91 (_ bv0 32))))
 (= $x54 $x52))))))
 ))
 (let (($x328 (and $x749 $x489)))
 (let (($x110 (and $x328 $x277)))
 (let (($x112 (and $x110 $x612)))
 (let (($x430 (= $x112 true)))
 (let (($x406 (= $x430 true)))
 (let (($x244 (= $x406 true)))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x387 (bvadd ?x200 input.dst.llvm-%m1)))
 (let ((?x536 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x387))))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv2 32))) ?x536)))
 (let ((?x698 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv3 32))) ?x171)))
 (let ((?x703 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (=> $x708 (= ?x703 ?x698)))))))))))
 ))
 (let (($x613 (and $x395 $x269)))
 (let (($x102 (= $x613 true)))
 (let (($x622 (= $x102 true)))
 (let (($x741 (= $x622 true)))
 (let (($x754 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x387 (bvadd ?x200 input.dst.llvm-%m1)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem ?x387))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv2 32))) ?x225))))
 (let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x91 (_ bv1 32))))
 (=> $x55 (= ?x243 ?x223))))))))))
 ))
 (let (($x631 (and $x110 $x754)))
 (let (($x706 (= $x631 true)))
 (let (($x463 (= $x706 true)))
 (let (($x242 (= $x463 true)))
 (let ((?x261 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x640 (bvneg ?x261)))
 (let (($x455 (= ?x640 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x351 (= $x455 true)))
 (let (($x204 (= $x351 true)))
 (let (($x627 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x200 input.dst.llvm-%m2)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x348))))
 (let ((?x561 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x348 (_ bv2 32))) ?x385)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x348 (_ bv3 32))) ?x561)))
 (let ((?x291 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (=> $x71 (= ?x291 ?x50)))))))))))
 ))
 (let (($x324 (and $x767 $x627)))
 (let (($x115 (= $x324 true)))
 (let (($x382 (= $x115 true)))
 (let (($x320 (= $x382 true)))
 (let (($x48 (= ?x640 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x438 (= $x48 true)))
 (let (($x264 (= $x438 true)))
 (let (($x30 (and $x264 $x320)))
 (let (($x336 (and $x30 $x204)))
 (let (($x686 (and $x336 $x242)))
 (let (($x555 (and $x686 $x741)))
 (let (($x421 (and $x555 $x244)))
 (let (($x602 (and $x421 $x309)))
 (let (($x609 (and $x602 $x98)))
 (let (($x434 (and $x609 $x66)))
 (let (($x547 (and $x434 $x199)))
 (let (($x590 (and $x547 $x228)))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x703 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (=> $x708 (= ?x703 ?x243)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x91 (_ bv1 32))))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (= $x708 $x55))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x91 (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x216 (_ bv0 32))))
 (= $x721 $x54))))))
 ))
 (let (($x148 (and $x12 $x770)))
 (let (($x211 (and $x148 $x254)))
 (let (($x114 (and $x211 $x542)))
 (let (($x241 (and $x114 $x590)))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x291 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (=> $x71 (= ?x291 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x67 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x665 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (= $x71 (bvuge ?x665 (_ bv1 32)))))))
 ))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x665 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x599 (_ bv0 32))))
 (= $x168 (= ?x665 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x131 $x299)))
 (let (($x583 (and $x99 $x67)))
 (let (($x329 (and $x583 $x487)))
 (let (($x513 (and $x329 $x241)))
 (let (($x600 (=> $x513 $x253)))
 (not $x600)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x233 (= false true)))
 (let (($x253 (= $x233 true)))
 (let ((?x133 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x221 (= (_ bv0 32) ?x133)))
 (let ((?x710 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x37 (= (_ bv0 32) ?x710)))
 (let ((?x495 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x495)))
 (let ((?x656 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x656)))
 (let (($x519 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x519 $x208)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x44 $x206)))
 (let (($x28 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x398 (and $x161 $x280)))
 (let (($x548 (not $x398)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x582 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x404 (and $x582 $x279)))
 (let (($x10 (and (not $x404) $x548)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x714 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (and $x714 $x142)))
 (let (($x316 (not $x344)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x667 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x465 (and $x667 $x379)))
 (let (($x332 (and (not $x465) $x316)))
 (let (($x151 (and (and (and (and (and (and $x332 $x10) $x222) $x28) $x187) $x169) $x37)))
 (let (($x733 (and $x151 $x221)))
 (let (($x681 (= $x733 true)))
 (let (($x70 (= $x681 true)))
 (let (($x228 (= $x70 true)))
 (let (($x586 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x200 input.dst.llvm-%m2)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem ?x348))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x348 (_ bv2 32))) ?x266))))
 (let ((?x291 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (=> $x71 (= ?x291 ?x68))))))))))
 ))
 (let (($x472 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x669 (bvuge ?x260 (_ bv1 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (= $x71 $x669))))))
 ))
 (let (($x299 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x6 (= false false)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x599 (_ bv0 32))))
 (=> $x168 $x6)))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x599 (_ bv0 32))))
 (= $x168 $x52))))))
 ))
 (let (($x326 (and $x9 $x299)))
 (let (($x767 (and $x326 $x472)))
 (let (($x31 (and $x767 $x586)))
 (let (($x126 (= $x31 true)))
 (let (($x654 (= $x126 true)))
 (let (($x199 (= $x654 true)))
 (let ((?x321 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x141 (= (_ bv0 2) ?x321)))
 (let (($x94 (= $x141 true)))
 (let (($x66 (= $x94 true)))
 (let (($x727 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x501 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x179 (and $x501 $x727)))
 (let (($x371 (= $x179 true)))
 (let (($x368 (= $x371 true)))
 (let (($x98 (= $x368 true)))
 (let (($x468 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x387 (bvadd ?x200 input.dst.llvm-%m1)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem ?x387))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv2 32))) ?x225))))
 (let ((?x703 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (=> $x708 (= ?x703 ?x223))))))))))
 ))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x669 (bvuge ?x260 (_ bv1 32))))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (= $x708 $x669))))))
 ))
 (let (($x770 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x6 (= false false)))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x216 (_ bv0 32))))
 (=> $x721 $x6)))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x216 (_ bv0 32))))
 (= $x721 $x52))))))
 ))
 (let (($x503 (and $x608 $x770)))
 (let (($x395 (and $x503 $x383)))
 (let (($x559 (and $x395 $x468)))
 (let (($x585 (= $x559 true)))
 (let (($x93 (= $x585 true)))
 (let (($x309 (= $x93 true)))
 (let (($x612 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x387 (bvadd ?x200 input.dst.llvm-%m1)))
 (let ((?x536 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x387))))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv2 32))) ?x536)))
 (let ((?x698 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv3 32))) ?x171)))
 (let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x91 (_ bv1 32))))
 (=> $x55 (= ?x243 ?x698)))))))))))
 ))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x669 (bvuge ?x260 (_ bv1 32))))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x91 (_ bv1 32))))
 (= $x55 $x669))))))
 ))
 (let (($x489 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x6 (= false false)))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x91 (_ bv0 32))))
 (=> $x54 $x6)))))
 ))
 (let (($x749 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x260 (_ bv0 32))))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x91 (_ bv0 32))))
 (= $x54 $x52))))))
 ))
 (let (($x328 (and $x749 $x489)))
 (let (($x110 (and $x328 $x277)))
 (let (($x112 (and $x110 $x612)))
 (let (($x430 (= $x112 true)))
 (let (($x406 (= $x430 true)))
 (let (($x244 (= $x406 true)))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x387 (bvadd ?x200 input.dst.llvm-%m1)))
 (let ((?x536 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x387))))
 (let ((?x171 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv2 32))) ?x536)))
 (let ((?x698 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x387 (_ bv3 32))) ?x171)))
 (let ((?x703 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (=> $x708 (= ?x703 ?x698)))))))))))
 ))
 (let (($x613 (and $x395 $x269)))
 (let (($x102 (= $x613 true)))
 (let (($x622 (= $x102 true)))
 (let (($x741 (= $x622 true)))
 (let (($x754 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x387 (bvadd ?x200 input.dst.llvm-%m1)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem ?x387))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv2 32))) ?x225))))
 (let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x91 (_ bv1 32))))
 (=> $x55 (= ?x243 ?x223))))))))))
 ))
 (let (($x631 (and $x110 $x754)))
 (let (($x706 (= $x631 true)))
 (let (($x463 (= $x706 true)))
 (let (($x242 (= $x463 true)))
 (let ((?x261 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x640 (bvneg ?x261)))
 (let (($x455 (= ?x640 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x351 (= $x455 true)))
 (let (($x204 (= $x351 true)))
 (let (($x627 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x348 (bvadd ?x200 input.dst.llvm-%m2)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x348 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x348))))
 (let ((?x561 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x348 (_ bv2 32))) ?x385)))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x348 (_ bv3 32))) ?x561)))
 (let ((?x291 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (=> $x71 (= ?x291 ?x50)))))))))))
 ))
 (let (($x324 (and $x767 $x627)))
 (let (($x115 (= $x324 true)))
 (let (($x382 (= $x115 true)))
 (let (($x320 (= $x382 true)))
 (let (($x48 (= ?x640 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x438 (= $x48 true)))
 (let (($x264 (= $x438 true)))
 (let (($x30 (and $x264 $x320)))
 (let (($x336 (and $x30 $x204)))
 (let (($x686 (and $x336 $x242)))
 (let (($x555 (and $x686 $x741)))
 (let (($x421 (and $x555 $x244)))
 (let (($x602 (and $x421 $x309)))
 (let (($x609 (and $x602 $x98)))
 (let (($x434 (and $x609 $x66)))
 (let (($x547 (and $x434 $x199)))
 (let (($x590 (and $x547 $x228)))
 (let (($x542 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x703 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (=> $x708 (= ?x703 ?x243)))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (bvuge ?x91 (_ bv1 32))))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x708 (bvuge ?x216 (_ bv1 32))))
 (= $x708 $x55))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x91 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x91 (_ bv0 32))))
 (let ((?x216 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x721 (= ?x216 (_ bv0 32))))
 (= $x721 $x54))))))
 ))
 (let (($x148 (and $x12 $x770)))
 (let (($x211 (and $x148 $x254)))
 (let (($x114 (and $x211 $x542)))
 (let (($x241 (and $x114 $x590)))
 (let (($x487 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x291 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (=> $x71 (= ?x291 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x67 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x665 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x599 (_ bv1 32))))
 (= $x71 (bvuge ?x665 (_ bv1 32)))))))
 ))
 (let (($x131 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x665 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x599 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (= ?x599 (_ bv0 32))))
 (= $x168 (= ?x665 (_ bv0 32)))))))
 ))
 (let (($x99 (and $x131 $x299)))
 (let (($x583 (and $x99 $x67)))
 (let (($x329 (and $x583 $x487)))
 (let (($x513 (and $x329 $x241)))
 (let (($x600 (=> $x513 $x253)))
 (not $x600)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44d84144)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1e574863)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x44d84147)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1e574860)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44d84144)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!23 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!24 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!24 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!19))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!20))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!23 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!21 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!23 (k!21 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!25 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!20 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!19 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!22 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!25 (k!22 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!19 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!19 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!19 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!24 (k!22 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!20 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!20 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!20 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x668 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_7 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x731 (bvadd ?x662 ?x668)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x731 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x731))))
 (let ((?x400 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x731 (_ bv2 32))) ?x182)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x731 (_ bv3 32))) ?x400)))
 (let ((?x190 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (=> $x629 (= ?x190 ?x308))))))))))))
 ))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x467 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (= $x629 $x108))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x482 (= false false)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (= ?x211 (_ bv0 32))))
 (=> $x703 $x482)))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x467 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (= ?x211 (_ bv0 32))))
 (= $x703 $x106))))))
 ))
 (let (($x502 (and $x366 $x118)))
 (let (($x423 (and $x502 $x506)))
 (let (($x34 (and $x423 $x457)))
 (let (($x100 (= $x34 true)))
 (let (($x564 (= $x100 true)))
 (let ((?x684 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x505 (= (_ bv0 2) ?x684)))
 (let (($x195 (= $x505 true)))
 (let (($x408 (= $x195 true)))
 (let (($x123 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x769 (bvadd ?x662 input.dst.llvm-%m2)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv1 32))) (select input.dst.llvm-mem ?x769))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv2 32))) ?x342))))
 (let ((?x190 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (=> $x629 (= ?x190 ?x107))))))))))
 ))
 (let (($x416 (and $x423 $x123)))
 (let (($x422 (= $x416 true)))
 (let (($x270 (= $x422 true)))
 (let (($x494 (= $x270 true)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x615 (bvadd ?x662 input.dst.llvm-%m1)))
 (let ((?x672 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem ?x615))))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv2 32))) ?x672))))
 (let ((?x426 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (=> $x534 (= ?x426 ?x402))))))))))
 ))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x467 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (= $x534 $x108))))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x482 (= false false)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x225 (_ bv0 32))))
 (=> $x367 $x482)))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x467 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x225 (_ bv0 32))))
 (= $x367 $x106))))))
 ))
 (let (($x453 (and $x694 $x631)))
 (let (($x129 (and $x453 $x443)))
 (let (($x658 (and $x129 $x497)))
 (let (($x470 (= $x658 true)))
 (let (($x574 (= $x470 true)))
 (let (($x573 (= $x574 true)))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x615 (bvadd ?x662 input.dst.llvm-%m1)))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x615))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv2 32))) ?x189)))
 (let ((?x557 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv3 32))) ?x247)))
 (let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x125 (_ bv1 32))))
 (=> $x209 (= ?x184 ?x557)))))))))))
 ))
 (let (($x717 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x467 (_ bv1 32))))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x125 (_ bv1 32))))
 (= $x209 $x108))))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x482 (= false false)))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x125 (_ bv0 32))))
 (=> $x675 $x482)))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x467 (_ bv0 32))))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x125 (_ bv0 32))))
 (= $x675 $x106))))))
 ))
 (let (($x150 (and $x310 $x394)))
 (let (($x90 (and $x150 $x717)))
 (let (($x504 (and $x90 $x80)))
 (let (($x220 (= $x504 true)))
 (let (($x340 (= $x220 true)))
 (let (($x522 (= $x340 true)))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x615 (bvadd ?x662 input.dst.llvm-%m1)))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x615))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv2 32))) ?x189)))
 (let ((?x557 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv3 32))) ?x247)))
 (let ((?x426 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (=> $x534 (= ?x426 ?x557)))))))))))
 ))
 (let (($x445 (and $x129 $x572)))
 (let (($x678 (= $x445 true)))
 (let (($x460 (= $x678 true)))
 (let (($x287 (= $x460 true)))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x615 (bvadd ?x662 input.dst.llvm-%m1)))
 (let ((?x672 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem ?x615))))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv2 32))) ?x672))))
 (let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x125 (_ bv1 32))))
 (=> $x209 (= ?x184 ?x402))))))))))
 ))
 (let (($x751 (and $x90 $x76)))
 (let (($x450 (= $x751 true)))
 (let (($x539 (= $x450 true)))
 (let (($x553 (= $x539 true)))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x769 (bvadd ?x662 input.dst.llvm-%m2)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x769 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x769))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x769 (_ bv2 32))) ?x165)))
 (let ((?x702 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x769 (_ bv3 32))) ?x234)))
 (let ((?x190 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (=> $x629 (= ?x190 ?x702)))))))))))
 ))
 (let (($x69 (and $x423 $x95)))
 (let (($x499 (= $x69 true)))
 (let (($x473 (= $x499 true)))
 (let (($x452 (= $x473 true)))
 (let (($x231 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x87 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x44 (and $x87 $x231)))
 (let (($x519 (= $x44 true)))
 (let (($x656 (= $x519 true)))
 (let (($x208 (= $x656 true)))
 (let ((?x142 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x344 (= (_ bv0 32) ?x142)))
 (let ((?x303 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x714 (= (_ bv0 32) ?x303)))
 (let ((?x465 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x543 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x465)))
 (let ((?x595 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x667 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x595)))
 (let (($x547 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x611 (and $x547 $x667)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x379 (and $x199 $x611)))
 (let (($x654 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x493 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x610 (and $x493 $x266)))
 (let (($x68 (not $x610)))
 (let (($x783 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x644 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x636 (and $x644 $x783)))
 (let (($x660 (and (not $x636) $x68)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x314 $x321)))
 (let (($x94 (not $x141)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x179 $x368)))
 (let (($x434 (and (not $x98) $x94)))
 (let (($x744 (and (and (and (and (and (and $x434 $x660) $x31) $x654) $x379) $x543) $x714)))
 (let (($x161 (and $x744 $x344)))
 (let (($x280 (= $x161 true)))
 (let (($x398 (= $x280 true)))
 (let (($x548 (= $x398 true)))
 (let ((?x210 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x419 (bvneg ?x210)))
 (let (($x602 (= ?x419 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x649 (= $x602 true)))
 (let (($x153 (= $x649 true)))
 (let (($x559 (= ?x419 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x585 (= $x559 true)))
 (let (($x93 (= $x585 true)))
 (let (($x501 (and $x93 $x153)))
 (let (($x10 (and $x501 $x548)))
 (let (($x206 (and $x10 $x208)))
 (let (($x143 (and $x206 $x452)))
 (let (($x47 (and $x143 $x553)))
 (let (($x560 (and $x47 $x287)))
 (let (($x119 (and $x560 $x522)))
 (let (($x685 (and $x119 $x573)))
 (let (($x224 (and $x685 $x494)))
 (let (($x491 (and $x224 $x408)))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x426 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (=> $x534 (= ?x426 ?x184)))))))
 ))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x125 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (= $x534 $x209))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x125 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x225 (_ bv0 32))))
 (= $x367 $x675))))))
 ))
 (let (($x706 (and $x298 $x631)))
 (let (($x698 (and $x706 $x171)))
 (let (($x406 (and $x698 $x430)))
 (let (($x89 (and $x406 $x491)))
 (let (($x481 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x190 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (=> $x629 (= ?x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x55 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (= $x629 (bvuge ?x55 (_ bv1 32)))))))
 ))
 (let (($x688 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x55 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (= ?x211 (_ bv0 32))))
 (= $x703 (= ?x55 (_ bv0 32)))))))
 ))
 (let (($x323 (and $x688 $x118)))
 (let (($x669 (and $x323 $x326)))
 (let (($x747 (and $x669 $x481)))
 (let (($x193 (and $x747 $x89)))
 (let (($x313 (=> $x193 $x564)))
 (let (($x20 (not $x313)))
 (let (($x719 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x363 (select solver-mem_7 memmask-bounded-var!)))
 (let (($x711 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x762 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x549 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x762)))
 (let (($x259 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x764 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x762)))
 (let (($x230 (or false (or false (and (and true (or $x764 $x259)) (or $x549 $x711))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x230) (= ?x363 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x363 (_ bv0 8)))))))))))
 ))
 (and (and true $x719) $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((_ BitVec 8) (_ BitVec 8) (Array (_ BitVec 32) (_ BitVec 8)) (Array (_ BitVec 32) (_ BitVec 8)) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun nextpc_const.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x457 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x668 (func.calla4bcb626de6152719ca44f8b649b9c4a.reg (_ bv1 8) (_ bv0 8) solver-mem_7 input.dst.llvm-mem.alloc nextpc_const.1 (_ bv1000 32) input.dst.llvm-%m2)))
 (let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x731 (bvadd ?x662 ?x668)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x731 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x731))))
 (let ((?x400 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x731 (_ bv2 32))) ?x182)))
 (let ((?x308 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x731 (_ bv3 32))) ?x400)))
 (let ((?x190 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (=> $x629 (= ?x190 ?x308))))))))))))
 ))
 (let (($x506 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x467 (_ bv1 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (= $x629 $x108))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x482 (= false false)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (= ?x211 (_ bv0 32))))
 (=> $x703 $x482)))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x467 (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (= ?x211 (_ bv0 32))))
 (= $x703 $x106))))))
 ))
 (let (($x502 (and $x366 $x118)))
 (let (($x423 (and $x502 $x506)))
 (let (($x34 (and $x423 $x457)))
 (let (($x100 (= $x34 true)))
 (let (($x564 (= $x100 true)))
 (let ((?x684 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x505 (= (_ bv0 2) ?x684)))
 (let (($x195 (= $x505 true)))
 (let (($x408 (= $x195 true)))
 (let (($x123 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x769 (bvadd ?x662 input.dst.llvm-%m2)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv1 32))) (select input.dst.llvm-mem ?x769))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv2 32))) ?x342))))
 (let ((?x190 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (=> $x629 (= ?x190 ?x107))))))))))
 ))
 (let (($x416 (and $x423 $x123)))
 (let (($x422 (= $x416 true)))
 (let (($x270 (= $x422 true)))
 (let (($x494 (= $x270 true)))
 (let (($x497 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x615 (bvadd ?x662 input.dst.llvm-%m1)))
 (let ((?x672 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem ?x615))))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv2 32))) ?x672))))
 (let ((?x426 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (=> $x534 (= ?x426 ?x402))))))))))
 ))
 (let (($x443 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x467 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (= $x534 $x108))))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x482 (= false false)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x225 (_ bv0 32))))
 (=> $x367 $x482)))))
 ))
 (let (($x694 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x467 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x225 (_ bv0 32))))
 (= $x367 $x106))))))
 ))
 (let (($x453 (and $x694 $x631)))
 (let (($x129 (and $x453 $x443)))
 (let (($x658 (and $x129 $x497)))
 (let (($x470 (= $x658 true)))
 (let (($x574 (= $x470 true)))
 (let (($x573 (= $x574 true)))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x615 (bvadd ?x662 input.dst.llvm-%m1)))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x615))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv2 32))) ?x189)))
 (let ((?x557 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv3 32))) ?x247)))
 (let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x125 (_ bv1 32))))
 (=> $x209 (= ?x184 ?x557)))))))))))
 ))
 (let (($x717 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x467 (_ bv1 32))))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x125 (_ bv1 32))))
 (= $x209 $x108))))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x482 (= false false)))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x125 (_ bv0 32))))
 (=> $x675 $x482)))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x467 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x467 (_ bv0 32))))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x125 (_ bv0 32))))
 (= $x675 $x106))))))
 ))
 (let (($x150 (and $x310 $x394)))
 (let (($x90 (and $x150 $x717)))
 (let (($x504 (and $x90 $x80)))
 (let (($x220 (= $x504 true)))
 (let (($x340 (= $x220 true)))
 (let (($x522 (= $x340 true)))
 (let (($x572 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x615 (bvadd ?x662 input.dst.llvm-%m1)))
 (let ((?x189 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x615))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv2 32))) ?x189)))
 (let ((?x557 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x615 (_ bv3 32))) ?x247)))
 (let ((?x426 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (=> $x534 (= ?x426 ?x557)))))))))))
 ))
 (let (($x445 (and $x129 $x572)))
 (let (($x678 (= $x445 true)))
 (let (($x460 (= $x678 true)))
 (let (($x287 (= $x460 true)))
 (let (($x76 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x615 (bvadd ?x662 input.dst.llvm-%m1)))
 (let ((?x672 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem ?x615))))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv2 32))) ?x672))))
 (let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x125 (_ bv1 32))))
 (=> $x209 (= ?x184 ?x402))))))))))
 ))
 (let (($x751 (and $x90 $x76)))
 (let (($x450 (= $x751 true)))
 (let (($x539 (= $x450 true)))
 (let (($x553 (= $x539 true)))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x662 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x769 (bvadd ?x662 input.dst.llvm-%m2)))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x769 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x769))))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x769 (_ bv2 32))) ?x165)))
 (let ((?x702 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x769 (_ bv3 32))) ?x234)))
 (let ((?x190 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (=> $x629 (= ?x190 ?x702)))))))))))
 ))
 (let (($x69 (and $x423 $x95)))
 (let (($x499 (= $x69 true)))
 (let (($x473 (= $x499 true)))
 (let (($x452 (= $x473 true)))
 (let (($x231 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x87 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x44 (and $x87 $x231)))
 (let (($x519 (= $x44 true)))
 (let (($x656 (= $x519 true)))
 (let (($x208 (= $x656 true)))
 (let ((?x142 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x344 (= (_ bv0 32) ?x142)))
 (let ((?x303 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x714 (= (_ bv0 32) ?x303)))
 (let ((?x465 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x543 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x465)))
 (let ((?x595 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x667 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x595)))
 (let (($x547 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x611 (and $x547 $x667)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x379 (and $x199 $x611)))
 (let (($x654 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x493 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x610 (and $x493 $x266)))
 (let (($x68 (not $x610)))
 (let (($x783 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x644 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x636 (and $x644 $x783)))
 (let (($x660 (and (not $x636) $x68)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x314 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x314 $x321)))
 (let (($x94 (not $x141)))
 (let (($x368 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x179 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x179 $x368)))
 (let (($x434 (and (not $x98) $x94)))
 (let (($x744 (and (and (and (and (and (and $x434 $x660) $x31) $x654) $x379) $x543) $x714)))
 (let (($x161 (and $x744 $x344)))
 (let (($x280 (= $x161 true)))
 (let (($x398 (= $x280 true)))
 (let (($x548 (= $x398 true)))
 (let ((?x210 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x419 (bvneg ?x210)))
 (let (($x602 (= ?x419 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x649 (= $x602 true)))
 (let (($x153 (= $x649 true)))
 (let (($x559 (= ?x419 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x585 (= $x559 true)))
 (let (($x93 (= $x585 true)))
 (let (($x501 (and $x93 $x153)))
 (let (($x10 (and $x501 $x548)))
 (let (($x206 (and $x10 $x208)))
 (let (($x143 (and $x206 $x452)))
 (let (($x47 (and $x143 $x553)))
 (let (($x560 (and $x47 $x287)))
 (let (($x119 (and $x560 $x522)))
 (let (($x685 (and $x119 $x573)))
 (let (($x224 (and $x685 $x494)))
 (let (($x491 (and $x224 $x408)))
 (let (($x430 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x426 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (=> $x534 (= ?x426 ?x184)))))))
 ))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (bvuge ?x125 (_ bv1 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x225 (_ bv1 32))))
 (= $x534 $x209))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x125 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x675 (= ?x125 (_ bv0 32))))
 (let ((?x225 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x367 (= ?x225 (_ bv0 32))))
 (= $x367 $x675))))))
 ))
 (let (($x706 (and $x298 $x631)))
 (let (($x698 (and $x706 $x171)))
 (let (($x406 (and $x698 $x430)))
 (let (($x89 (and $x406 $x491)))
 (let (($x481 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x190 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (=> $x629 (= ?x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x55 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x629 (bvuge ?x211 (_ bv1 32))))
 (= $x629 (bvuge ?x55 (_ bv1 32)))))))
 ))
 (let (($x688 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x55 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x211 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x703 (= ?x211 (_ bv0 32))))
 (= $x703 (= ?x55 (_ bv0 32)))))))
 ))
 (let (($x323 (and $x688 $x118)))
 (let (($x669 (and $x323 $x326)))
 (let (($x747 (and $x669 $x481)))
 (let (($x193 (and $x747 $x89)))
 (let (($x313 (=> $x193 $x564)))
 (let (($x20 (not $x313)))
 (let (($x719 (forall ((memmask-bounded-var! (_ BitVec 32)) )(let ((?x363 (select solver-mem_7 memmask-bounded-var!)))
 (let (($x711 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x762 (bvadd memmask-bounded-var! (_ bv0 32))))
 (let (($x549 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x762)))
 (let (($x259 (bvugt memmask-bounded-var! input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x764 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x762)))
 (let (($x230 (or false (or false (and (and true (or $x764 $x259)) (or $x549 $x711))))))
 (ite (=> (bvule memmask-bounded-var! (bvsub (bvadd memmask-bounded-var! (_ bv1 32)) (_ bv1 32))) $x230) (= ?x363 (select input.dst.llvm-mem.Lentry%1%fcallEnd memmask-bounded-var!)) (= ?x363 (_ bv0 8)))))))))))
 ))
 (and (and true $x719) $x20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!111))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5ca00000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!109))
  (define-fun solver-mem_7 () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!109))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x36375928)
  (define-fun nextpc_const.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.alloc () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!110))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3637592b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5ca00003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x36375928)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5ca00000)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!116 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000000) (= x!0 #x00000001)))
  (define-fun k!113 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000001)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!116 (k!113 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun k!112 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x5ca00001 x!0)
                    (ite (bvule #x5ca00003 x!0)
                         (ite (bvule #x5ca00004 x!0) #x5ca00004 #x5ca00003)
                         #x5ca00001)
                    #x5ca00000)))
    (let ((a!2 (ite (bvule #x3637592b x!0)
                    (ite (bvule #x3637592c x!0)
                         (ite (bvule #x5ca00000 x!0) a!1 #x3637592c)
                         #x3637592b)
                    #x36375929)))
    (let ((a!3 (ite (bvule #x1a800404 x!0)
                    (ite (bvule #x36375928 x!0)
                         (ite (bvule #x36375929 x!0) a!2 #x36375928)
                         #x1a800404)
                    #x00030004)))
    (let ((a!4 (ite (bvule #x00030002 x!0)
                    (ite (bvule #x00030003 x!0)
                         (ite (bvule #x00030004 x!0) a!3 #x00030003)
                         #x00030002)
                    #x00030001)))
    (let ((a!5 (ite (bvule #x00000006 x!0)
                    (ite (bvule #x00000007 x!0)
                         (ite (bvule #x00030001 x!0) a!4 #x00000007)
                         #x00000006)
                    #x00000005)))
    (let ((a!6 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000004 x!0)
                         (ite (bvule #x00000005 x!0) a!5 #x00000004)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!6 #x00000001)
           #x00000000))))))))
  (define-fun k!111 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000005) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!118 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!109!115 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x00030002) #x00
    (ite (= x!0 #x00030003) #x00
    (ite (= x!0 #x5ca00000) #x00
    (ite (= x!0 #x36375929) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x36375928) #x00
    (ite (= x!0 #x5ca00001) #x00
    (ite (= x!0 #x00030004) #x08
    (ite (= x!0 #x00000005) #x10
    (ite (= x!0 #x3637592b) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x1a800404) #x02
    (ite (= x!0 #x00030001) #x00
    (ite (= x!0 #x5ca00003) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000002) #x00
      #x03))))))))))))))))))))
  (define-fun k!109 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (k!109!115 (k!112 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00001000
      (let ((a!1 (concat (k!111 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!111 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!111 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!111 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!109 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!109 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!109 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!109 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun k!110 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun func.calla4bcb626de6152719ca44f8b649b9c4a.reg ((x!0 (_ BitVec 8))
   (x!1 (_ BitVec 8))
   (x!2 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!3 (Array (_ BitVec 32) (_ BitVec 8)))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))) (_ BitVec 32)
    (ite (and (= x!0 #x01)
              (= x!1 #x00)
              (= x!2 (_ as-array k!109))
              (= x!3 (_ as-array k!110))
              (= x!4 #x00000000)
              (= x!5 #x000003e8)
              (= x!6 #x00000000))
      #x00030001
      #x5ca00003))
  (define-fun k!114 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!118 (k!114 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!111 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!111 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!111 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!111 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!109 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!109 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!109 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!109 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!117 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!117
      (k!114 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!109 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!109 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!109 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!109 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00001000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x347 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x8)))
 (let ((?x620 (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv1 32))) (select input.dst.llvm-mem ?x347))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv2 32))) ?x620))))
 (let ((?x369 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (=> $x745 (= ?x369 ?x345))))))))))
 ))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x349 (_ bv1 32))))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (= $x745 $x248))))))
 ))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x52 (= false false)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x392 (_ bv0 32))))
 (=> $x595 $x52)))))
 ))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x349 (_ bv0 32))))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x392 (_ bv0 32))))
 (= $x595 $x599))))))
 ))
 (let (($x414 (and $x22 $x465)))
 (let (($x272 (and $x414 $x433)))
 (let (($x60 (and $x272 $x364)))
 (let (($x781 (= $x60 true)))
 (let (($x35 (= $x781 true)))
 (let ((?x108 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x18 (bvneg ?x108)))
 (let (($x779 (= ?x18 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x664 (= $x779 true)))
 (let (($x655 (= $x664 true)))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x697 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x697 (_ bv1 32))) (select input.dst.llvm-mem ?x697))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x697 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x697 (_ bv2 32))) ?x274))))
 (let ((?x430 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (=> $x298 (= ?x430 ?x257))))))))))
 ))
 (let (($x733 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x349 (_ bv1 32))))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (= $x298 $x248))))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x52 (= false false)))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x114 (_ bv0 32))))
 (=> $x118 $x52)))))
 ))
 (let (($x709 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x349 (_ bv0 32))))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x114 (_ bv0 32))))
 (= $x118 $x599))))))
 ))
 (let (($x455 (and $x709 $x669)))
 (let (($x600 (and $x455 $x733)))
 (let (($x533 (and $x600 $x134)))
 (let (($x268 (= $x533 true)))
 (let (($x784 (= $x268 true)))
 (let (($x480 (= $x784 true)))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x516 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x528 (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv1 32))) (select input.dst.llvm-mem ?x516))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv2 32))) ?x528))))
 (let ((?x369 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (=> $x745 (= ?x369 ?x267))))))))))
 ))
 (let (($x228 (and $x272 $x233)))
 (let (($x681 (= $x228 true)))
 (let (($x590 (= $x681 true)))
 (let (($x253 (= $x590 true)))
 (let (($x671 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x516 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x741 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x516))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv2 32))) ?x741)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv3 32))) ?x139)))
 (let ((?x495 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x582 (_ bv1 32))))
 (=> $x196 (= ?x495 ?x240)))))))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x349 (_ bv1 32))))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x582 (_ bv1 32))))
 (= $x196 $x248))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x52 (= false false)))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x582 (_ bv0 32))))
 (=> $x199 $x52)))))
 ))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x349 (_ bv0 32))))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x582 (_ bv0 32))))
 (= $x199 $x599))))))
 ))
 (let (($x127 (and $x305 $x236)))
 (let (($x23 (and $x127 $x646)))
 (let (($x138 (and $x23 $x671)))
 (let (($x738 (= $x138 true)))
 (let (($x260 (= $x738 true)))
 (let (($x767 (= $x260 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x516 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x741 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x516))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv2 32))) ?x741)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv3 32))) ?x139)))
 (let ((?x369 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (=> $x745 (= ?x369 ?x240)))))))))))
 ))
 (let (($x759 (and $x272 $x329)))
 (let (($x216 (= $x759 true)))
 (let (($x721 (= $x216 true)))
 (let (($x288 (= $x721 true)))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x516 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x528 (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv1 32))) (select input.dst.llvm-mem ?x516))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv2 32))) ?x528))))
 (let ((?x495 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x582 (_ bv1 32))))
 (=> $x196 (= ?x495 ?x267))))))))))
 ))
 (let (($x299 (and $x23 $x164)))
 (let (($x99 (= $x299 true)))
 (let (($x71 (= $x99 true)))
 (let (($x780 (= $x71 true)))
 (let (($x676 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x697 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x541 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x697 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x697))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x697 (_ bv2 32))) ?x541)))
 (let ((?x396 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x697 (_ bv3 32))) ?x178)))
 (let ((?x430 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (=> $x298 (= ?x430 ?x396)))))))))))
 ))
 (let (($x730 (and $x600 $x676)))
 (let (($x16 (= $x730 true)))
 (let (($x748 (= $x16 true)))
 (let (($x7 (= $x748 true)))
 (let ((?x181 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x239 (= (_ bv0 32) ?x181)))
 (let ((?x129 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x338 (= (_ bv0 32) ?x129)))
 (let ((?x41 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x443 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x47 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x539 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x694 (and $x539 $x25)))
 (let (($x450 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x453 (and $x450 $x694)))
 (let (($x751 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x521 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x478 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x478 $x521)))
 (let (($x672 (not $x61)))
 (let (($x508 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x362 (and $x276 $x508)))
 (let (($x402 (and (not $x362) $x672)))
 (let (($x717 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x563 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x563 $x717)))
 (let (($x633 (not $x90)))
 (let (($x642 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x571 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (and $x571 $x642)))
 (let (($x592 (and (not $x394) $x633)))
 (let (($x695 (and (and (and (and (and (and $x592 $x402) $x173) $x751) $x453) $x443) $x338)))
 (let (($x572 (and $x695 $x239)))
 (let (($x445 (= $x572 true)))
 (let (($x678 (= $x445 true)))
 (let (($x460 (= $x678 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x95 (= (_ bv0 2) ?x226)))
 (let (($x69 (= $x95 true)))
 (let (($x499 (= $x69 true)))
 (let (($x412 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x241 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x645 (and $x241 $x412)))
 (let (($x580 (= $x645 true)))
 (let (($x165 (= $x580 true)))
 (let (($x234 (= $x165 true)))
 (let (($x423 (= ?x18 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x133 (= $x423 true)))
 (let (($x662 (= $x133 true)))
 (let (($x702 (and $x662 $x234)))
 (let (($x473 (and $x702 $x499)))
 (let (($x287 (and $x473 $x460)))
 (let (($x530 (and $x287 $x7)))
 (let (($x773 (and $x530 $x780)))
 (let (($x12 (and $x773 $x288)))
 (let (($x251 (and $x12 $x767)))
 (let (($x319 (and $x251 $x253)))
 (let (($x712 (and $x319 $x480)))
 (let (($x537 (and $x712 $x655)))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x495 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x369 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (=> $x745 (= ?x369 ?x495)))))))
 ))
 (let (($x87 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x582 (_ bv1 32))))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (= $x745 $x196))))))
 ))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x582 (_ bv0 32))))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x392 (_ bv0 32))))
 (= $x595 $x199))))))
 ))
 (let (($x543 (and $x611 $x465)))
 (let (($x486 (and $x543 $x87)))
 (let (($x626 (and $x486 $x106)))
 (let (($x237 (and $x626 $x537)))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x430 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (=> $x298 (= ?x430 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (= $x298 (bvuge ?x243 (_ bv1 32)))))))
 ))
 (let (($x629 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x114 (_ bv0 32))))
 (= $x118 (= ?x243 (_ bv0 32)))))))
 ))
 (let (($x190 (and $x629 $x669)))
 (let (($x706 (and $x190 $x631)))
 (let (($x210 (and $x706 $x421)))
 (let (($x311 (and $x210 $x237)))
 (let (($x498 (=> $x311 $x35)))
 (not $x498)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x347 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x8)))
 (let ((?x620 (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv1 32))) (select input.dst.llvm-mem ?x347))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv2 32))) ?x620))))
 (let ((?x369 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (=> $x745 (= ?x369 ?x345))))))))))
 ))
 (let (($x433 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x349 (_ bv1 32))))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (= $x745 $x248))))))
 ))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x52 (= false false)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x392 (_ bv0 32))))
 (=> $x595 $x52)))))
 ))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x349 (_ bv0 32))))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x392 (_ bv0 32))))
 (= $x595 $x599))))))
 ))
 (let (($x414 (and $x22 $x465)))
 (let (($x272 (and $x414 $x433)))
 (let (($x60 (and $x272 $x364)))
 (let (($x781 (= $x60 true)))
 (let (($x35 (= $x781 true)))
 (let ((?x108 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x18 (bvneg ?x108)))
 (let (($x779 (= ?x18 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x664 (= $x779 true)))
 (let (($x655 (= $x664 true)))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x697 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x697 (_ bv1 32))) (select input.dst.llvm-mem ?x697))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x697 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x697 (_ bv2 32))) ?x274))))
 (let ((?x430 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (=> $x298 (= ?x430 ?x257))))))))))
 ))
 (let (($x733 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x349 (_ bv1 32))))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (= $x298 $x248))))))
 ))
 (let (($x669 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x52 (= false false)))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x114 (_ bv0 32))))
 (=> $x118 $x52)))))
 ))
 (let (($x709 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x349 (_ bv0 32))))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x114 (_ bv0 32))))
 (= $x118 $x599))))))
 ))
 (let (($x455 (and $x709 $x669)))
 (let (($x600 (and $x455 $x733)))
 (let (($x533 (and $x600 $x134)))
 (let (($x268 (= $x533 true)))
 (let (($x784 (= $x268 true)))
 (let (($x480 (= $x784 true)))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x516 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x528 (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv1 32))) (select input.dst.llvm-mem ?x516))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv2 32))) ?x528))))
 (let ((?x369 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (=> $x745 (= ?x369 ?x267))))))))))
 ))
 (let (($x228 (and $x272 $x233)))
 (let (($x681 (= $x228 true)))
 (let (($x590 (= $x681 true)))
 (let (($x253 (= $x590 true)))
 (let (($x671 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x516 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x741 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x516))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv2 32))) ?x741)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv3 32))) ?x139)))
 (let ((?x495 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x582 (_ bv1 32))))
 (=> $x196 (= ?x495 ?x240)))))))))))
 ))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x349 (_ bv1 32))))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x582 (_ bv1 32))))
 (= $x196 $x248))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x52 (= false false)))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x582 (_ bv0 32))))
 (=> $x199 $x52)))))
 ))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x349 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x599 (= ?x349 (_ bv0 32))))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x582 (_ bv0 32))))
 (= $x199 $x599))))))
 ))
 (let (($x127 (and $x305 $x236)))
 (let (($x23 (and $x127 $x646)))
 (let (($x138 (and $x23 $x671)))
 (let (($x738 (= $x138 true)))
 (let (($x260 (= $x738 true)))
 (let (($x767 (= $x260 true)))
 (let (($x329 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x516 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x741 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x516))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv2 32))) ?x741)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x516 (_ bv3 32))) ?x139)))
 (let ((?x369 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (=> $x745 (= ?x369 ?x240)))))))))))
 ))
 (let (($x759 (and $x272 $x329)))
 (let (($x216 (= $x759 true)))
 (let (($x721 (= $x216 true)))
 (let (($x288 (= $x721 true)))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x516 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x528 (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv1 32))) (select input.dst.llvm-mem ?x516))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x516 (_ bv2 32))) ?x528))))
 (let ((?x495 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x582 (_ bv1 32))))
 (=> $x196 (= ?x495 ?x267))))))))))
 ))
 (let (($x299 (and $x23 $x164)))
 (let (($x99 (= $x299 true)))
 (let (($x71 (= $x99 true)))
 (let (($x780 (= $x71 true)))
 (let (($x676 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x8 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x697 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x541 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x697 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x697))))
 (let ((?x178 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x697 (_ bv2 32))) ?x541)))
 (let ((?x396 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x697 (_ bv3 32))) ?x178)))
 (let ((?x430 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (=> $x298 (= ?x430 ?x396)))))))))))
 ))
 (let (($x730 (and $x600 $x676)))
 (let (($x16 (= $x730 true)))
 (let (($x748 (= $x16 true)))
 (let (($x7 (= $x748 true)))
 (let ((?x181 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x239 (= (_ bv0 32) ?x181)))
 (let ((?x129 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x338 (= (_ bv0 32) ?x129)))
 (let ((?x41 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x443 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x47 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x539 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x694 (and $x539 $x25)))
 (let (($x450 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x453 (and $x450 $x694)))
 (let (($x751 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x521 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x478 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x478 $x521)))
 (let (($x672 (not $x61)))
 (let (($x508 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x362 (and $x276 $x508)))
 (let (($x402 (and (not $x362) $x672)))
 (let (($x717 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x563 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x563 $x717)))
 (let (($x633 (not $x90)))
 (let (($x642 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x571 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (and $x571 $x642)))
 (let (($x592 (and (not $x394) $x633)))
 (let (($x695 (and (and (and (and (and (and $x592 $x402) $x173) $x751) $x453) $x443) $x338)))
 (let (($x572 (and $x695 $x239)))
 (let (($x445 (= $x572 true)))
 (let (($x678 (= $x445 true)))
 (let (($x460 (= $x678 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x95 (= (_ bv0 2) ?x226)))
 (let (($x69 (= $x95 true)))
 (let (($x499 (= $x69 true)))
 (let (($x412 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x241 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x645 (and $x241 $x412)))
 (let (($x580 (= $x645 true)))
 (let (($x165 (= $x580 true)))
 (let (($x234 (= $x165 true)))
 (let (($x423 (= ?x18 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x133 (= $x423 true)))
 (let (($x662 (= $x133 true)))
 (let (($x702 (and $x662 $x234)))
 (let (($x473 (and $x702 $x499)))
 (let (($x287 (and $x473 $x460)))
 (let (($x530 (and $x287 $x7)))
 (let (($x773 (and $x530 $x780)))
 (let (($x12 (and $x773 $x288)))
 (let (($x251 (and $x12 $x767)))
 (let (($x319 (and $x251 $x253)))
 (let (($x712 (and $x319 $x480)))
 (let (($x537 (and $x712 $x655)))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x495 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x369 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (=> $x745 (= ?x369 ?x495)))))))
 ))
 (let (($x87 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x582 (_ bv1 32))))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x745 (bvuge ?x392 (_ bv1 32))))
 (= $x745 $x196))))))
 ))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x582 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x199 (= ?x582 (_ bv0 32))))
 (let ((?x392 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x595 (= ?x392 (_ bv0 32))))
 (= $x595 $x199))))))
 ))
 (let (($x543 (and $x611 $x465)))
 (let (($x486 (and $x543 $x87)))
 (let (($x626 (and $x486 $x106)))
 (let (($x237 (and $x626 $x537)))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x430 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (=> $x298 (= ?x430 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x631 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x114 (_ bv1 32))))
 (= $x298 (bvuge ?x243 (_ bv1 32)))))))
 ))
 (let (($x629 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x114 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (= ?x114 (_ bv0 32))))
 (= $x118 (= ?x243 (_ bv0 32)))))))
 ))
 (let (($x190 (and $x629 $x669)))
 (let (($x706 (and $x190 $x631)))
 (let (($x210 (and $x706 $x421)))
 (let (($x311 (and $x210 $x237)))
 (let (($x498 (=> $x311 $x35)))
 (not $x498)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86a0a904)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x0c240420)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02c13440)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x0c240420)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02c13443)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86a0a907)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02c13440)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86a0a904)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x0c240420)
  (define-fun input.spec-%var-m2-1.0.1!27 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!27 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0c240422) #x80
      #x00))
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!28 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!23))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x87c04100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!24))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6c600004)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000041)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6c600007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x87c04103)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6c600004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x87c04100)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x59fccaf8)
  (define-fun k!24 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000041 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000041)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!27 (k!26 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2)))))
  (define-fun input.spec-%var-m1-1.0.1!29 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000041) true
    (ite (= x!0 #x00000000) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!29 (k!26 x!0)))
  (define-fun k!23 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000105) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0))))))
  (define-fun input.spec-%var-m2-1.0.1!28 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!25 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!28 (k!25 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!23 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!23 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!23 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!24 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!24 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!24 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000041) #x00004000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x318 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x21)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x19))))
 (let ((?x541 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (=> $x600 (= ?x541 ?x160))))))))))
 ))
 (let (($x609 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x726 (_ bv1 32))))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (= $x600 $x166))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x467 (= false false)))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x129 (_ bv0 32))))
 (=> $x338 $x467)))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (= ?x726 (_ bv0 32))))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x129 (_ bv0 32))))
 (= $x338 $x567))))))
 ))
 (let (($x393 (and $x300 $x140)))
 (let (($x289 (and $x393 $x609)))
 (let (($x409 (and $x289 $x92)))
 (let (($x191 (= $x409 true)))
 (let (($x689 (= $x191 true)))
 (let ((?x748 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x7 (bvneg ?x748)))
 (let (($x380 (= ?x7 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x540 (= $x380 true)))
 (let (($x436 (= $x540 true)))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x382 (bvadd ?x21 input.dst.llvm-%m2)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x180))))
 (let ((?x143 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (=> $x412 (= ?x143 ?x451))))))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x726 (_ bv1 32))))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (= $x412 $x166))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x467 (= false false)))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x486 (_ bv0 32))))
 (=> $x369 $x467)))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (= ?x726 (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x486 (_ bv0 32))))
 (= $x369 $x567))))))
 ))
 (let (($x679 (and $x526 $x366)))
 (let (($x652 (and $x679 $x624)))
 (let (($x388 (and $x652 $x285)))
 (let (($x85 (= $x388 true)))
 (let (($x604 (= $x85 true)))
 (let (($x742 (= $x604 true)))
 (let (($x782 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x785 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x663 (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv1 32))) (select input.dst.llvm-mem ?x785))))
 (let ((?x632 (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv2 32))) ?x663))))
 (let ((?x178 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (=> $x220 (= ?x178 ?x632))))))))))
 ))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x726 (_ bv1 32))))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (= $x220 $x166))))))
 ))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x467 (= false false)))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x181 (_ bv0 32))))
 (=> $x239 $x467)))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (= ?x726 (_ bv0 32))))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x181 (_ bv0 32))))
 (= $x239 $x567))))))
 ))
 (let (($x206 (and $x208 $x287)))
 (let (($x315 (and $x206 $x151)))
 (let (($x771 (and $x315 $x782)))
 (let (($x772 (= $x771 true)))
 (let (($x246 (= $x772 true)))
 (let (($x737 (= $x246 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x785 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x470 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x785))))
 (let ((?x574 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv2 32))) ?x470)))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv3 32))) ?x574)))
 (let ((?x541 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (=> $x600 (= ?x541 ?x342)))))))))))
 ))
 (let (($x270 (and $x289 $x224)))
 (let (($x471 (= $x270 true)))
 (let (($x195 (= $x471 true)))
 (let (($x89 (= $x195 true)))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x785 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x470 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x785))))
 (let ((?x574 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv2 32))) ?x470)))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv3 32))) ?x574)))
 (let ((?x178 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (=> $x220 (= ?x178 ?x342)))))))))))
 ))
 (let (($x476 (and $x315 $x107)))
 (let (($x123 (= $x476 true)))
 (let (($x416 (= $x123 true)))
 (let (($x422 (= $x416 true)))
 (let (($x312 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x785 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x663 (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv1 32))) (select input.dst.llvm-mem ?x785))))
 (let ((?x632 (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv2 32))) ?x663))))
 (let ((?x541 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (=> $x600 (= ?x541 ?x632))))))))))
 ))
 (let (($x719 (and $x289 $x312)))
 (let (($x258 (= $x719 true)))
 (let (($x606 (= $x258 true)))
 (let (($x9 (= $x606 true)))
 (let (($x602 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x382 (bvadd ?x21 input.dst.llvm-%m2)))
 (let ((?x561 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x382))))
 (let ((?x581 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv2 32))) ?x561)))
 (let ((?x649 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv3 32))) ?x581)))
 (let ((?x143 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (=> $x412 (= ?x143 ?x649)))))))))))
 ))
 (let (($x153 (and $x652 $x602)))
 (let (($x501 (= $x153 true)))
 (let (($x179 (= $x501 true)))
 (let (($x368 (= $x179 true)))
 (let ((?x440 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x233 (= (_ bv0 32) ?x440)))
 (let ((?x251 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x348 (= (_ bv0 32) ?x251)))
 (let ((?x260 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x767 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x260)))
 (let ((?x264 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x671 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x264)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x138 (and $x12 $x671)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x738 (and $x288 $x138)))
 (let (($x721 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x759 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x741 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x613 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x613 $x741)))
 (let (($x240 (not $x139)))
 (let (($x555 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x622 (and $x291 $x555)))
 (let (($x487 (and (not $x622) $x240)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x75 $x22)))
 (let (($x336 (not $x414)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x780 (and $x299 $x71)))
 (let (($x272 (and (not $x780) $x336)))
 (let (($x232 (and (and (and (and (and (and $x272 $x487) $x759) $x721) $x738) $x767) $x348)))
 (let (($x86 (and $x232 $x233)))
 (let (($x736 (= $x86 true)))
 (let (($x637 (= $x736 true)))
 (let (($x274 (= $x637 true)))
 (let ((?x643 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x528 (= (_ bv0 2) ?x643)))
 (let (($x464 (= $x528 true)))
 (let (($x267 (= $x464 true)))
 (let (($x516 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x646 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x131 (and $x646 $x516)))
 (let (($x168 (= $x131 true)))
 (let (($x102 (= $x168 true)))
 (let (($x524 (= $x102 true)))
 (let (($x281 (= ?x7 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x305 (= $x281 true)))
 (let (($x535 (= $x305 true)))
 (let (($x415 (and $x535 $x524)))
 (let (($x427 (and $x415 $x267)))
 (let (($x370 (and $x427 $x274)))
 (let (($x98 (and $x370 $x368)))
 (let (($x250 (and $x98 $x9)))
 (let (($x408 (and $x250 $x422)))
 (let (($x355 (and $x408 $x89)))
 (let (($x97 (and $x355 $x737)))
 (let (($x65 (and $x97 $x742)))
 (let (($x650 (and $x65 $x436)))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x178 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (=> $x220 (= ?x178 ?x541)))))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (= $x220 $x600))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x129 (_ bv0 32))))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x181 (_ bv0 32))))
 (= $x239 $x338))))))
 ))
 (let (($x11 (and $x445 $x287)))
 (let (($x697 (and $x11 $x8)))
 (let (($x676 (and $x697 $x389)))
 (let (($x185 (and $x676 $x650)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x143 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (=> $x412 (= ?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x196 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (= $x412 (bvuge ?x196 (_ bv1 32)))))))
 ))
 (let (($x551 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x196 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x486 (_ bv0 32))))
 (= $x369 (= ?x196 (_ bv0 32)))))))
 ))
 (let (($x502 (and $x551 $x366)))
 (let (($x165 (and $x502 $x580)))
 (let (($x394 (and $x165 $x642)))
 (let (($x376 (and $x394 $x185)))
 (let (($x53 (=> $x376 $x689)))
 (not $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x318 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x21)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x19))))
 (let ((?x541 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (=> $x600 (= ?x541 ?x160))))))))))
 ))
 (let (($x609 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x726 (_ bv1 32))))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (= $x600 $x166))))))
 ))
 (let (($x140 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x467 (= false false)))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x129 (_ bv0 32))))
 (=> $x338 $x467)))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (= ?x726 (_ bv0 32))))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x129 (_ bv0 32))))
 (= $x338 $x567))))))
 ))
 (let (($x393 (and $x300 $x140)))
 (let (($x289 (and $x393 $x609)))
 (let (($x409 (and $x289 $x92)))
 (let (($x191 (= $x409 true)))
 (let (($x689 (= $x191 true)))
 (let ((?x748 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x7 (bvneg ?x748)))
 (let (($x380 (= ?x7 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x540 (= $x380 true)))
 (let (($x436 (= $x540 true)))
 (let (($x285 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x382 (bvadd ?x21 input.dst.llvm-%m2)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x180))))
 (let ((?x143 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (=> $x412 (= ?x143 ?x451))))))))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x726 (_ bv1 32))))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (= $x412 $x166))))))
 ))
 (let (($x366 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x467 (= false false)))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x486 (_ bv0 32))))
 (=> $x369 $x467)))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (= ?x726 (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x486 (_ bv0 32))))
 (= $x369 $x567))))))
 ))
 (let (($x679 (and $x526 $x366)))
 (let (($x652 (and $x679 $x624)))
 (let (($x388 (and $x652 $x285)))
 (let (($x85 (= $x388 true)))
 (let (($x604 (= $x85 true)))
 (let (($x742 (= $x604 true)))
 (let (($x782 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x785 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x663 (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv1 32))) (select input.dst.llvm-mem ?x785))))
 (let ((?x632 (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv2 32))) ?x663))))
 (let ((?x178 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (=> $x220 (= ?x178 ?x632))))))))))
 ))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x726 (_ bv1 32))))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (= $x220 $x166))))))
 ))
 (let (($x287 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x467 (= false false)))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x181 (_ bv0 32))))
 (=> $x239 $x467)))))
 ))
 (let (($x208 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x726 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x567 (= ?x726 (_ bv0 32))))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x181 (_ bv0 32))))
 (= $x239 $x567))))))
 ))
 (let (($x206 (and $x208 $x287)))
 (let (($x315 (and $x206 $x151)))
 (let (($x771 (and $x315 $x782)))
 (let (($x772 (= $x771 true)))
 (let (($x246 (= $x772 true)))
 (let (($x737 (= $x246 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x785 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x470 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x785))))
 (let ((?x574 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv2 32))) ?x470)))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv3 32))) ?x574)))
 (let ((?x541 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (=> $x600 (= ?x541 ?x342)))))))))))
 ))
 (let (($x270 (and $x289 $x224)))
 (let (($x471 (= $x270 true)))
 (let (($x195 (= $x471 true)))
 (let (($x89 (= $x195 true)))
 (let (($x107 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x785 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x470 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x785))))
 (let ((?x574 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv2 32))) ?x470)))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x785 (_ bv3 32))) ?x574)))
 (let ((?x178 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (=> $x220 (= ?x178 ?x342)))))))))))
 ))
 (let (($x476 (and $x315 $x107)))
 (let (($x123 (= $x476 true)))
 (let (($x416 (= $x123 true)))
 (let (($x422 (= $x416 true)))
 (let (($x312 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x785 (bvadd ?x21 input.dst.llvm-%m1)))
 (let ((?x663 (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv1 32))) (select input.dst.llvm-mem ?x785))))
 (let ((?x632 (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x785 (_ bv2 32))) ?x663))))
 (let ((?x541 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (=> $x600 (= ?x541 ?x632))))))))))
 ))
 (let (($x719 (and $x289 $x312)))
 (let (($x258 (= $x719 true)))
 (let (($x606 (= $x258 true)))
 (let (($x9 (= $x606 true)))
 (let (($x602 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x382 (bvadd ?x21 input.dst.llvm-%m2)))
 (let ((?x561 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x382))))
 (let ((?x581 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv2 32))) ?x561)))
 (let ((?x649 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x382 (_ bv3 32))) ?x581)))
 (let ((?x143 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (=> $x412 (= ?x143 ?x649)))))))))))
 ))
 (let (($x153 (and $x652 $x602)))
 (let (($x501 (= $x153 true)))
 (let (($x179 (= $x501 true)))
 (let (($x368 (= $x179 true)))
 (let ((?x440 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x233 (= (_ bv0 32) ?x440)))
 (let ((?x251 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x348 (= (_ bv0 32) ?x251)))
 (let ((?x260 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x767 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x260)))
 (let ((?x264 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x671 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x264)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x138 (and $x12 $x671)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x738 (and $x288 $x138)))
 (let (($x721 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x759 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x741 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x613 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x613 $x741)))
 (let (($x240 (not $x139)))
 (let (($x555 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x622 (and $x291 $x555)))
 (let (($x487 (and (not $x622) $x240)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x75 $x22)))
 (let (($x336 (not $x414)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x780 (and $x299 $x71)))
 (let (($x272 (and (not $x780) $x336)))
 (let (($x232 (and (and (and (and (and (and $x272 $x487) $x759) $x721) $x738) $x767) $x348)))
 (let (($x86 (and $x232 $x233)))
 (let (($x736 (= $x86 true)))
 (let (($x637 (= $x736 true)))
 (let (($x274 (= $x637 true)))
 (let ((?x643 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x528 (= (_ bv0 2) ?x643)))
 (let (($x464 (= $x528 true)))
 (let (($x267 (= $x464 true)))
 (let (($x516 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x646 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x131 (and $x646 $x516)))
 (let (($x168 (= $x131 true)))
 (let (($x102 (= $x168 true)))
 (let (($x524 (= $x102 true)))
 (let (($x281 (= ?x7 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x305 (= $x281 true)))
 (let (($x535 (= $x305 true)))
 (let (($x415 (and $x535 $x524)))
 (let (($x427 (and $x415 $x267)))
 (let (($x370 (and $x427 $x274)))
 (let (($x98 (and $x370 $x368)))
 (let (($x250 (and $x98 $x9)))
 (let (($x408 (and $x250 $x422)))
 (let (($x355 (and $x408 $x89)))
 (let (($x97 (and $x355 $x737)))
 (let (($x65 (and $x97 $x742)))
 (let (($x650 (and $x65 $x436)))
 (let (($x389 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x541 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x178 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (=> $x220 (= ?x178 ?x541)))))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x600 (bvuge ?x129 (_ bv1 32))))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x181 (_ bv1 32))))
 (= $x220 $x600))))))
 ))
 (let (($x445 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x129 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x338 (= ?x129 (_ bv0 32))))
 (let ((?x181 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x181 (_ bv0 32))))
 (= $x239 $x338))))))
 ))
 (let (($x11 (and $x445 $x287)))
 (let (($x697 (and $x11 $x8)))
 (let (($x676 (and $x697 $x389)))
 (let (($x185 (and $x676 $x650)))
 (let (($x642 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x143 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (=> $x412 (= ?x143 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x196 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x486 (_ bv1 32))))
 (= $x412 (bvuge ?x196 (_ bv1 32)))))))
 ))
 (let (($x551 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x196 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x486 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x369 (= ?x486 (_ bv0 32))))
 (= $x369 (= ?x196 (_ bv0 32)))))))
 ))
 (let (($x502 (and $x551 $x366)))
 (let (($x165 (and $x502 $x580)))
 (let (($x394 (and $x165 $x642)))
 (let (($x376 (and $x394 $x185)))
 (let (($x53 (=> $x376 $x689)))
 (not $x53)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0642024c)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0486462b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0642024f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x04864628)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0642024c)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000010)
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m1-1.0.1!7 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000004))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!7 (k!4 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!1 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!1 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!1 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (let ((a!1 (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!2 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000400
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!45))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!46))
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdfb56944)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdfb56947)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0db347b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdfb56944)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0db3478)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #xc0000004)
  (define-fun k!46 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!49 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!48 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!49 (k!48 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun k!45 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0000007) #x20
      #x00))
  (define-fun input.spec-%var-m1-1.0.1!51 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!51 (k!48 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-%var-m2-1.0.1!50 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!47 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!50 (k!47 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!45 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!45 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!45 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!46 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!46 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!46 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x861 (= true false)))
 (let (($x862 (= $x861 true)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x847 (= (_ bv0 32) ?x846)))
 (let ((?x844 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x845 (= (_ bv0 32) ?x844)))
 (let ((?x842 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x842)))
 (let ((?x838 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x839 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x838)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x840 (and $x837 $x839)))
 (let (($x836 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x841 (and $x836 $x840)))
 (let (($x835 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x833 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x827 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x826 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x828 (and $x826 $x827)))
 (let (($x829 (not $x828)))
 (let (($x824 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x823 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x825 (and $x823 $x824)))
 (let (($x831 (and (not $x825) $x829)))
 (let (($x818 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x819 (and $x817 $x818)))
 (let (($x820 (not $x819)))
 (let (($x814 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x812 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x815 (and $x812 $x814)))
 (let (($x822 (and (not $x815) $x820)))
 (let (($x853 (and (and (and (and (and (and $x822 $x831) $x833) $x835) $x841) $x843) $x845)))
 (let (($x854 (and $x853 $x847)))
 (let (($x855 (= $x854 true)))
 (let (($x856 (= $x855 true)))
 (let (($x857 (= $x856 true)))
 (let (($x804 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x713 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x713))))
 (let ((?x164 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (=> $x516 (= ?x164 ?x209))))))))))
 ))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x180 (_ bv1 32))))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (= $x516 $x540))))))
 ))
 (let (($x730 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x554 (= false false)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x697 (_ bv0 32))))
 (=> $x178 $x554)))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x180 (_ bv0 32))))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x697 (_ bv0 32))))
 (= $x178 $x262))))))
 ))
 (let (($x618 (and $x564 $x730)))
 (let (($x199 (and $x618 $x582)))
 (let (($x805 (and $x199 $x804)))
 (let (($x806 (= $x805 true)))
 (let (($x807 (= $x806 true)))
 (let (($x808 (= $x807 true)))
 (let (($x794 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x612))))
 (let ((?x581 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (=> $x268 (= ?x581 ?x608))))))))))
 ))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x180 (_ bv1 32))))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (= $x268 $x540))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x554 (= false false)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x440 (_ bv0 32))))
 (=> $x233 $x554)))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x180 (_ bv0 32))))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x440 (_ bv0 32))))
 (= $x233 $x262))))))
 ))
 (let (($x194 (and $x167 $x370)))
 (let (($x185 (and $x194 $x650)))
 (let (($x795 (and $x185 $x794)))
 (let (($x796 (= $x795 true)))
 (let (($x797 (= $x796 true)))
 (let (($x798 (= $x797 true)))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x191))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv2 32))) ?x317)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv3 32))) ?x40)))
 (let ((?x561 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x251 (_ bv1 32))))
 (=> $x652 (= ?x561 ?x293)))))))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x180 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x251 (_ bv1 32))))
 (= $x652 $x540))))))
 ))
 (let (($x493 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x554 (= false false)))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (= ?x251 (_ bv0 32))))
 (=> $x348 $x554)))))
 ))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x180 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (= ?x251 (_ bv0 32))))
 (= $x348 $x262))))))
 ))
 (let (($x586 (and $x636 $x493)))
 (let (($x363 (and $x586 $x230)))
 (let (($x687 (and $x363 $x45)))
 (let (($x682 (= $x687 true)))
 (let (($x787 (= $x682 true)))
 (let (($x788 (= $x787 true)))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x191))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv2 32))) ?x317)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv3 32))) ?x40)))
 (let ((?x581 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (=> $x268 (= ?x581 ?x293)))))))))))
 ))
 (let (($x441 (and $x185 $x484)))
 (let (($x74 (= $x441 true)))
 (let (($x358 (= $x74 true)))
 (let (($x359 (= $x358 true)))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x612))))
 (let ((?x561 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x251 (_ bv1 32))))
 (=> $x652 (= ?x561 ?x608))))))))))
 ))
 (let (($x489 (and $x363 $x383)))
 (let (($x328 (= $x489 true)))
 (let (($x749 (= $x328 true)))
 (let (($x619 (= $x749 true)))
 (let ((?x603 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x44 (bvneg ?x603)))
 (let (($x80 (= ?x44 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x504 (= $x80 true)))
 (let (($x756 (= $x504 true)))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x163)))
 (let ((?x647 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x54)))
 (let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (=> $x515 (= ?x6 ?x647)))))))))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x180 (_ bv1 32))))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (= $x515 $x540))))))
 ))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x554 (= false false)))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x600 (_ bv0 32))))
 (=> $x119 $x554)))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x180 (_ bv0 32))))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x600 (_ bv0 32))))
 (= $x119 $x262))))))
 ))
 (let (($x68 (and $x322 $x110)))
 (let (($x592 (and $x68 $x633)))
 (let (($x750 (and $x592 $x585)))
 (let (($x605 (= $x750 true)))
 (let (($x558 (= $x605 true)))
 (let (($x699 (= $x558 true)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x713 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x713))))
 (let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (=> $x515 (= ?x6 ?x209))))))))))
 ))
 (let (($x172 (and $x592 $x124)))
 (let (($x743 (= $x172 true)))
 (let (($x693 (= $x743 true)))
 (let (($x57 (= $x693 true)))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x744 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x242))))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x744)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x204)))
 (let ((?x164 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (=> $x516 (= ?x164 ?x231)))))))))))
 ))
 (let (($x189 (and $x199 $x173)))
 (let (($x751 (= $x189 true)))
 (let (($x247 (= $x751 true)))
 (let (($x450 (= $x247 true)))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x163)))
 (let ((?x647 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x54)))
 (let ((?x164 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (=> $x516 (= ?x164 ?x647)))))))))))
 ))
 (let (($x120 (and $x199 $x512)))
 (let (($x144 (= $x120 true)))
 (let (($x704 (= $x144 true)))
 (let (($x38 (= $x704 true)))
 (let (($x81 (= ?x44 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x385 (= $x81 true)))
 (let (($x212 (= $x385 true)))
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x744 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x242))))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x744)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x204)))
 (let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (=> $x515 (= ?x6 ?x231)))))))))))
 ))
 (let (($x47 (and $x592 $x350)))
 (let (($x25 (= $x47 true)))
 (let (($x694 (= $x25 true)))
 (let (($x658 (= $x694 true)))
 (let (($x61 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x191))))
 (let ((?x563 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x191 (_ bv2 32))) ?x55)))
 (let ((?x764 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x191 (_ bv3 32))) ?x563)))
 (let ((?x581 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (=> $x268 (= ?x581 ?x764)))))))))))
 ))
 (let (($x672 (and $x185 $x61)))
 (let (($x402 (= $x672 true)))
 (let (($x696 (= $x402 true)))
 (let (($x223 (= $x696 true)))
 (let (($x176 (and $x223 $x658)))
 (let (($x349 (and $x176 $x212)))
 (let (($x95 (and $x349 $x38)))
 (let (($x539 (and $x95 $x450)))
 (let (($x429 (and $x539 $x57)))
 (let (($x314 (and $x429 $x699)))
 (let (($x560 (and $x314 $x756)))
 (let (($x673 (and $x560 $x619)))
 (let (($x188 (and $x673 $x359)))
 (let (($x789 (and $x188 $x788)))
 (let (($x799 (and $x789 $x798)))
 (let (($x809 (and $x799 $x808)))
 (let (($x858 (and $x809 $x857)))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x561 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x581 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (=> $x268 (= ?x581 ?x561)))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x251 (_ bv1 32))))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (= $x268 $x652))))))
 ))
 (let (($x736 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (= ?x251 (_ bv0 32))))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x440 (_ bv0 32))))
 (= $x233 $x348))))))
 ))
 (let (($x410 (and $x736 $x370)))
 (let (($x382 (and $x410 $x21)))
 (let (($x602 (and $x382 $x309)))
 (let (($x859 (and $x602 $x858)))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x164 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (=> $x516 (= ?x164 ?x6)))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (= $x516 $x515))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x600 (_ bv0 32))))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x697 (_ bv0 32))))
 (= $x178 $x119))))))
 ))
 (let (($x16 (and $x396 $x730)))
 (let (($x102 (and $x16 $x168)))
 (let (($x780 (and $x102 $x71)))
 (let (($x860 (and $x780 $x859)))
 (let (($x863 (=> $x860 $x862)))
 (not $x863))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x861 (= true false)))
 (let (($x862 (= $x861 true)))
 (let ((?x846 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x847 (= (_ bv0 32) ?x846)))
 (let ((?x844 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x845 (= (_ bv0 32) ?x844)))
 (let ((?x842 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x842)))
 (let ((?x838 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x839 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x838)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x840 (and $x837 $x839)))
 (let (($x836 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x841 (and $x836 $x840)))
 (let (($x835 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x833 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x827 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x826 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x828 (and $x826 $x827)))
 (let (($x829 (not $x828)))
 (let (($x824 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x823 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x825 (and $x823 $x824)))
 (let (($x831 (and (not $x825) $x829)))
 (let (($x818 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x819 (and $x817 $x818)))
 (let (($x820 (not $x819)))
 (let (($x814 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x812 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x815 (and $x812 $x814)))
 (let (($x822 (and (not $x815) $x820)))
 (let (($x853 (and (and (and (and (and (and $x822 $x831) $x833) $x835) $x841) $x843) $x845)))
 (let (($x854 (and $x853 $x847)))
 (let (($x855 (= $x854 true)))
 (let (($x856 (= $x855 true)))
 (let (($x857 (= $x856 true)))
 (let (($x804 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x713 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x713))))
 (let ((?x164 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (=> $x516 (= ?x164 ?x209))))))))))
 ))
 (let (($x582 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x180 (_ bv1 32))))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (= $x516 $x540))))))
 ))
 (let (($x730 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x554 (= false false)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x697 (_ bv0 32))))
 (=> $x178 $x554)))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x180 (_ bv0 32))))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x697 (_ bv0 32))))
 (= $x178 $x262))))))
 ))
 (let (($x618 (and $x564 $x730)))
 (let (($x199 (and $x618 $x582)))
 (let (($x805 (and $x199 $x804)))
 (let (($x806 (= $x805 true)))
 (let (($x807 (= $x806 true)))
 (let (($x808 (= $x807 true)))
 (let (($x794 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x612))))
 (let ((?x581 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (=> $x268 (= ?x581 ?x608))))))))))
 ))
 (let (($x650 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x180 (_ bv1 32))))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (= $x268 $x540))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x554 (= false false)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x440 (_ bv0 32))))
 (=> $x233 $x554)))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x180 (_ bv0 32))))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x440 (_ bv0 32))))
 (= $x233 $x262))))))
 ))
 (let (($x194 (and $x167 $x370)))
 (let (($x185 (and $x194 $x650)))
 (let (($x795 (and $x185 $x794)))
 (let (($x796 (= $x795 true)))
 (let (($x797 (= $x796 true)))
 (let (($x798 (= $x797 true)))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x191))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv2 32))) ?x317)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv3 32))) ?x40)))
 (let ((?x561 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x251 (_ bv1 32))))
 (=> $x652 (= ?x561 ?x293)))))))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x180 (_ bv1 32))))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x251 (_ bv1 32))))
 (= $x652 $x540))))))
 ))
 (let (($x493 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x554 (= false false)))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (= ?x251 (_ bv0 32))))
 (=> $x348 $x554)))))
 ))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x180 (_ bv0 32))))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (= ?x251 (_ bv0 32))))
 (= $x348 $x262))))))
 ))
 (let (($x586 (and $x636 $x493)))
 (let (($x363 (and $x586 $x230)))
 (let (($x687 (and $x363 $x45)))
 (let (($x682 (= $x687 true)))
 (let (($x787 (= $x682 true)))
 (let (($x788 (= $x787 true)))
 (let (($x484 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x191))))
 (let ((?x40 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv2 32))) ?x317)))
 (let ((?x293 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x191 (_ bv3 32))) ?x40)))
 (let ((?x581 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (=> $x268 (= ?x581 ?x293)))))))))))
 ))
 (let (($x441 (and $x185 $x484)))
 (let (($x74 (= $x441 true)))
 (let (($x358 (= $x74 true)))
 (let (($x359 (= $x358 true)))
 (let (($x383 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x612))))
 (let ((?x561 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x251 (_ bv1 32))))
 (=> $x652 (= ?x561 ?x608))))))))))
 ))
 (let (($x489 (and $x363 $x383)))
 (let (($x328 (= $x489 true)))
 (let (($x749 (= $x328 true)))
 (let (($x619 (= $x749 true)))
 (let ((?x603 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x44 (bvneg ?x603)))
 (let (($x80 (= ?x44 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x504 (= $x80 true)))
 (let (($x756 (= $x504 true)))
 (let (($x585 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x163)))
 (let ((?x647 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x54)))
 (let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (=> $x515 (= ?x6 ?x647)))))))))))
 ))
 (let (($x633 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x540 (bvuge ?x180 (_ bv1 32))))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (= $x515 $x540))))))
 ))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x554 (= false false)))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x600 (_ bv0 32))))
 (=> $x119 $x554)))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x180 (_ bv0 32))))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x600 (_ bv0 32))))
 (= $x119 $x262))))))
 ))
 (let (($x68 (and $x322 $x110)))
 (let (($x592 (and $x68 $x633)))
 (let (($x750 (and $x592 $x585)))
 (let (($x605 (= $x750 true)))
 (let (($x558 (= $x605 true)))
 (let (($x699 (= $x558 true)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x713 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x713))))
 (let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (=> $x515 (= ?x6 ?x209))))))))))
 ))
 (let (($x172 (and $x592 $x124)))
 (let (($x743 (= $x172 true)))
 (let (($x693 (= $x743 true)))
 (let (($x57 (= $x693 true)))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x744 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x242))))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x744)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x204)))
 (let ((?x164 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (=> $x516 (= ?x164 ?x231)))))))))))
 ))
 (let (($x189 (and $x199 $x173)))
 (let (($x751 (= $x189 true)))
 (let (($x247 (= $x751 true)))
 (let (($x450 (= $x247 true)))
 (let (($x512 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x54 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x163)))
 (let ((?x647 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x54)))
 (let ((?x164 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (=> $x516 (= ?x164 ?x647)))))))))))
 ))
 (let (($x120 (and $x199 $x512)))
 (let (($x144 (= $x120 true)))
 (let (($x704 (= $x144 true)))
 (let (($x38 (= $x704 true)))
 (let (($x81 (= ?x44 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x385 (= $x81 true)))
 (let (($x212 (= $x385 true)))
 (let (($x350 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x242 (bvadd ?x409 input.dst.llvm-%m2)))
 (let ((?x744 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x242))))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x744)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x204)))
 (let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (=> $x515 (= ?x6 ?x231)))))))))))
 ))
 (let (($x47 (and $x592 $x350)))
 (let (($x25 (= $x47 true)))
 (let (($x694 (= $x25 true)))
 (let (($x658 (= $x694 true)))
 (let (($x61 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x409 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x191 (bvadd ?x409 input.dst.llvm-%m1)))
 (let ((?x55 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x191))))
 (let ((?x563 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x191 (_ bv2 32))) ?x55)))
 (let ((?x764 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x191 (_ bv3 32))) ?x563)))
 (let ((?x581 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (=> $x268 (= ?x581 ?x764)))))))))))
 ))
 (let (($x672 (and $x185 $x61)))
 (let (($x402 (= $x672 true)))
 (let (($x696 (= $x402 true)))
 (let (($x223 (= $x696 true)))
 (let (($x176 (and $x223 $x658)))
 (let (($x349 (and $x176 $x212)))
 (let (($x95 (and $x349 $x38)))
 (let (($x539 (and $x95 $x450)))
 (let (($x429 (and $x539 $x57)))
 (let (($x314 (and $x429 $x699)))
 (let (($x560 (and $x314 $x756)))
 (let (($x673 (and $x560 $x619)))
 (let (($x188 (and $x673 $x359)))
 (let (($x789 (and $x188 $x788)))
 (let (($x799 (and $x789 $x798)))
 (let (($x809 (and $x799 $x808)))
 (let (($x858 (and $x809 $x857)))
 (let (($x309 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x561 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x581 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (=> $x268 (= ?x581 ?x561)))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x652 (bvuge ?x251 (_ bv1 32))))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x268 (bvuge ?x440 (_ bv1 32))))
 (= $x268 $x652))))))
 ))
 (let (($x736 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x251 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (= ?x251 (_ bv0 32))))
 (let ((?x440 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x233 (= ?x440 (_ bv0 32))))
 (= $x233 $x348))))))
 ))
 (let (($x410 (and $x736 $x370)))
 (let (($x382 (and $x410 $x21)))
 (let (($x602 (and $x382 $x309)))
 (let (($x859 (and $x602 $x858)))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x164 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (=> $x516 (= ?x164 ?x6)))))))
 ))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x515 (bvuge ?x600 (_ bv1 32))))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x516 (bvuge ?x697 (_ bv1 32))))
 (= $x516 $x515))))))
 ))
 (let (($x396 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x600 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x600 (_ bv0 32))))
 (let ((?x697 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (= ?x697 (_ bv0 32))))
 (= $x178 $x119))))))
 ))
 (let (($x16 (and $x396 $x730)))
 (let (($x102 (and $x16 $x168)))
 (let (($x780 (and $x102 $x71)))
 (let (($x860 (and $x780 $x859)))
 (let (($x863 (=> $x860 $x862)))
 (not $x863))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!27))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x389bf3f0)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xb7efbcff)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x3eef53d5)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x842be6b8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!28))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x842be6bb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x389bf3f3)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x842be6b8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x389bf3f0)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!30 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!31 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!31 (k!30 x!0)))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #xb7efbcff (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!26 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbcff (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             a!2))))
  (define-fun input.spec-%var-m1-1.0.1!33 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!33 (k!30 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #xb7efbd02 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd01 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbd00 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #xb7efbcff (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             a!1
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!34 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!29 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!34 (k!29 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!32 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!32 (k!29 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x3eef53d8 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d7 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d6 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x3eef53d5 (bvmul #x00000004 x!0)))))
            (a!2 (concat (k!27 (bvadd #x3eef53d8 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d7 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d6 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d5 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x3eef53d8 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d7 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d6 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x3eef53d5 (bvmul #x00000004 x!0))))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m2-1.1.1 x!0)))))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!26))
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!28))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!27))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000bc000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000bc003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000bc000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!31 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!29 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1!31 (k!29 x!0)))
  (define-fun k!26 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1!32 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!32 (k!29 x!0)))
  (define-fun k!27 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!26 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!27 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0) a!1 a!2))))
  (define-fun k!30 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!34 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!34 (k!30 x!0)))
  (define-fun k!28 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!26 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!26 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!26 (bvmul #x00000004 x!0))))
            (a!2 (concat (k!28 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!28 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!28 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) a!1 a!2))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!33 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1!33 (k!30 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!27 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m1-1.1.1 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!27 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!27 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!27 (bvmul #x00000004 x!0)))))
        (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 x!0)
             a!1
             (input.spec-%var-m2-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x871 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x878 (=> $x871 true)))
 (let (($x879 (= $x878 true)))
 (let (($x880 (= $x879 true)))
 (let (($x872 (= $x871 true)))
 (let (($x873 (= $x872 true)))
 (let (($x874 (= $x873 true)))
 (let ((?x714 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x398 (= (_ bv0 32) ?x714)))
 (let ((?x616 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x625 (= (_ bv0 32) ?x616)))
 (let ((?x404 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x478 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x404)))
 (let ((?x303 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x303)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x492 (and $x379 $x14)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x521 (and $x546 $x492)))
 (let (($x362 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x316 $x403)))
 (let (($x728 (not $x79)))
 (let (($x639 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x479 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x479 $x639)))
 (let (($x660 (and (not $x104) $x728)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x425 (and $x304 $x245)))
 (let (($x405 (not $x425)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x666 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x601 (and $x666 $x273)))
 (let (($x569 (and (not $x601) $x405)))
 (let (($x137 (and (and (and (and (and (and $x569 $x660) $x276) $x362) $x521) $x478) $x625)))
 (let (($x399 (and $x137 $x398)))
 (let (($x865 (= $x399 true)))
 (let (($x866 (= $x865 true)))
 (let (($x867 (= $x866 true)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem ?x685))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv2 32))) ?x248))))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (=> $x140 (= ?x55 ?x200))))))))))
 ))
 (let (($x486 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (= $x140 $x809))))))
 ))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x93 (= false false)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x382 (_ bv0 32))))
 (=> $x581 $x93)))))
 ))
 (let (($x703 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x382 (_ bv0 32))))
 (= $x581 $x795))))))
 ))
 (let (($x254 (and $x703 $x325)))
 (let (($x369 (and $x254 $x486)))
 (let (($x37 (and $x369 $x386)))
 (let (($x96 (= $x37 true)))
 (let (($x103 (= $x96 true)))
 (let (($x657 (= $x103 true)))
 (let (($x198 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x531 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x64 (and $x531 $x198)))
 (let (($x302 (= $x64 true)))
 (let (($x19 (= $x302 true)))
 (let (($x509 (= $x19 true)))
 (let (($x742 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x735 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x121))))
 (let ((?x450 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (=> $x674 (= ?x450 ?x735))))))))))
 ))
 (let (($x811 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (= $x674 $x809))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x93 (= false false)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x678 (_ bv0 32))))
 (=> $x81 $x93)))))
 ))
 (let (($x797 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x678 (_ bv0 32))))
 (= $x81 $x795))))))
 ))
 (let (($x798 (and $x797 $x564)))
 (let (($x812 (and $x798 $x811)))
 (let (($x65 (and $x812 $x742)))
 (let (($x376 (= $x65 true)))
 (let (($x318 (= $x376 true)))
 (let (($x584 (= $x318 true)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x828))))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x715)))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x353)))
 (let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x219 (_ bv1 32))))
 (=> $x424 (= ?x247 ?x342)))))))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x219 (_ bv1 32))))
 (= $x424 $x809))))))
 ))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x93 (= false false)))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x603 (= ?x219 (_ bv0 32))))
 (=> $x603 $x93)))))
 ))
 (let (($x734 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x603 (= ?x219 (_ bv0 32))))
 (= $x603 $x795))))))
 ))
 (let (($x235 (and $x734 $x70)))
 (let (($x234 (and $x235 $x556)))
 (let (($x355 (and $x234 $x195)))
 (let (($x89 (= $x355 true)))
 (let (($x568 (= $x89 true)))
 (let (($x768 (= $x568 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x828))))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x715)))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x353)))
 (let ((?x450 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (=> $x674 (= ?x450 ?x342)))))))))))
 ))
 (let (($x270 (and $x812 $x224)))
 (let (($x408 (= $x270 true)))
 (let (($x505 (= $x408 true)))
 (let (($x123 (= $x505 true)))
 (let (($x729 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x735 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x121))))
 (let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x219 (_ bv1 32))))
 (=> $x424 (= ?x247 ?x735))))))))))
 ))
 (let (($x566 (and $x234 $x729)))
 (let (($x238 (= $x566 true)))
 (let (($x725 (= $x238 true)))
 (let (($x532 (= $x725 true)))
 (let ((?x741 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x432 (bvneg ?x741)))
 (let (($x597 (= ?x432 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x282 (= $x597 true)))
 (let (($x277 (= $x282 true)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x685))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv2 32))) ?x373)))
 (let ((?x473 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv3 32))) ?x241)))
 (let ((?x689 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (=> $x446 (= ?x689 ?x473)))))))))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (= $x446 $x809))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x93 (= false false)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x712 (= ?x652 (_ bv0 32))))
 (=> $x712 $x93)))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x712 (= ?x652 (_ bv0 32))))
 (= $x712 $x795))))))
 ))
 (let (($x466 (and $x221 $x428)))
 (let (($x595 (and $x466 $x210)))
 (let (($x255 (and $x595 $x371)))
 (let (($x346 (= $x255 true)))
 (let (($x307 (= $x346 true)))
 (let (($x474 (= $x307 true)))
 (let (($x360 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem ?x685))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv2 32))) ?x248))))
 (let ((?x689 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (=> $x446 (= ?x689 ?x200))))))))))
 ))
 (let (($x116 (and $x595 $x360)))
 (let (($x755 (= $x116 true)))
 (let (($x283 (= $x755 true)))
 (let (($x727 (= $x283 true)))
 (let (($x748 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x485 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x685))))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv2 32))) ?x485)))
 (let ((?x378 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv3 32))) ?x77)))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (=> $x140 (= ?x55 ?x378)))))))))))
 ))
 (let (($x7 (and $x369 $x748)))
 (let (($x530 (= $x7 true)))
 (let (($x281 (= $x530 true)))
 (let (($x648 (= $x281 true)))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x685))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv2 32))) ?x373)))
 (let ((?x473 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv3 32))) ?x241)))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (=> $x140 (= ?x55 ?x473)))))))))))
 ))
 (let (($x237 (and $x369 $x538)))
 (let (($x442 (= $x237 true)))
 (let (($x271 (= $x442 true)))
 (let (($x620 (= $x271 true)))
 (let (($x186 (= ?x432 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x352 (= $x186 true)))
 (let (($x475 (= $x352 true)))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x485 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x685))))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv2 32))) ?x485)))
 (let ((?x378 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv3 32))) ?x77)))
 (let ((?x689 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (=> $x446 (= ?x689 ?x378)))))))))))
 ))
 (let (($x414 (and $x595 $x291)))
 (let (($x336 (= $x414 true)))
 (let (($x272 (= $x336 true)))
 (let (($x555 (= $x272 true)))
 (let (($x839 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x832 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x828))))
 (let ((?x834 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x832)))
 (let ((?x836 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x834)))
 (let ((?x450 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (=> $x674 (= ?x450 ?x836)))))))))))
 ))
 (let (($x840 (and $x812 $x839)))
 (let (($x841 (= $x840 true)))
 (let (($x851 (= $x841 true)))
 (let (($x842 (= $x851 true)))
 (let (($x622 (and $x842 $x555)))
 (let (($x213 (and $x622 $x475)))
 (let (($x265 (and $x213 $x620)))
 (let (($x345 (and $x265 $x648)))
 (let (($x549 (and $x345 $x727)))
 (let (($x384 (and $x549 $x474)))
 (let (($x155 (and $x384 $x277)))
 (let (($x431 (and $x155 $x532)))
 (let (($x416 (and $x431 $x123)))
 (let (($x782 (and $x416 $x768)))
 (let (($x444 (and $x782 $x584)))
 (let (($x589 (and $x444 $x509)))
 (let (($x43 (and $x589 $x657)))
 (let (($x868 (and $x43 $x867)))
 (let (($x875 (and $x868 $x874)))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x450 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (=> $x674 (= ?x450 ?x247)))))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x219 (_ bv1 32))))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (= $x674 $x424))))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x603 (= ?x219 (_ bv0 32))))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x678 (_ bv0 32))))
 (= $x81 $x603))))))
 ))
 (let (($x618 (and $x212 $x564)))
 (let (($x144 (and $x618 $x120)))
 (let (($x256 (and $x144 $x534)))
 (let (($x876 (and $x256 $x875)))
 (let (($x762 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x689 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (=> $x140 (= ?x55 ?x689)))))))
 ))
 (let (($x665 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (= $x140 $x446))))))
 ))
 (let (($x649 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x712 (= ?x652 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x382 (_ bv0 32))))
 (= $x581 $x712))))))
 ))
 (let (($x179 (and $x649 $x325)))
 (let (($x191 (and $x179 $x665)))
 (let (($x114 (and $x191 $x762)))
 (let (($x877 (and $x114 $x876)))
 (let (($x881 (=> $x877 $x880)))
 (not $x881)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x871 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x878 (=> $x871 true)))
 (let (($x879 (= $x878 true)))
 (let (($x880 (= $x879 true)))
 (let (($x872 (= $x871 true)))
 (let (($x873 (= $x872 true)))
 (let (($x874 (= $x873 true)))
 (let ((?x714 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x398 (= (_ bv0 32) ?x714)))
 (let ((?x616 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x625 (= (_ bv0 32) ?x616)))
 (let ((?x404 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x478 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x404)))
 (let ((?x303 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x303)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x492 (and $x379 $x14)))
 (let (($x546 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x521 (and $x546 $x492)))
 (let (($x362 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x316 $x403)))
 (let (($x728 (not $x79)))
 (let (($x639 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x479 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x479 $x639)))
 (let (($x660 (and (not $x104) $x728)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x425 (and $x304 $x245)))
 (let (($x405 (not $x425)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x666 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x601 (and $x666 $x273)))
 (let (($x569 (and (not $x601) $x405)))
 (let (($x137 (and (and (and (and (and (and $x569 $x660) $x276) $x362) $x521) $x478) $x625)))
 (let (($x399 (and $x137 $x398)))
 (let (($x865 (= $x399 true)))
 (let (($x866 (= $x865 true)))
 (let (($x867 (= $x866 true)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem ?x685))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv2 32))) ?x248))))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (=> $x140 (= ?x55 ?x200))))))))))
 ))
 (let (($x486 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (= $x140 $x809))))))
 ))
 (let (($x325 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x93 (= false false)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x382 (_ bv0 32))))
 (=> $x581 $x93)))))
 ))
 (let (($x703 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x382 (_ bv0 32))))
 (= $x581 $x795))))))
 ))
 (let (($x254 (and $x703 $x325)))
 (let (($x369 (and $x254 $x486)))
 (let (($x37 (and $x369 $x386)))
 (let (($x96 (= $x37 true)))
 (let (($x103 (= $x96 true)))
 (let (($x657 (= $x103 true)))
 (let (($x198 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x531 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x64 (and $x531 $x198)))
 (let (($x302 (= $x64 true)))
 (let (($x19 (= $x302 true)))
 (let (($x509 (= $x19 true)))
 (let (($x742 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x735 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x121))))
 (let ((?x450 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (=> $x674 (= ?x450 ?x735))))))))))
 ))
 (let (($x811 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (= $x674 $x809))))))
 ))
 (let (($x564 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x93 (= false false)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x678 (_ bv0 32))))
 (=> $x81 $x93)))))
 ))
 (let (($x797 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x678 (_ bv0 32))))
 (= $x81 $x795))))))
 ))
 (let (($x798 (and $x797 $x564)))
 (let (($x812 (and $x798 $x811)))
 (let (($x65 (and $x812 $x742)))
 (let (($x376 (= $x65 true)))
 (let (($x318 (= $x376 true)))
 (let (($x584 (= $x318 true)))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x828))))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x715)))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x353)))
 (let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x219 (_ bv1 32))))
 (=> $x424 (= ?x247 ?x342)))))))))))
 ))
 (let (($x556 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x219 (_ bv1 32))))
 (= $x424 $x809))))))
 ))
 (let (($x70 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x93 (= false false)))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x603 (= ?x219 (_ bv0 32))))
 (=> $x603 $x93)))))
 ))
 (let (($x734 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x603 (= ?x219 (_ bv0 32))))
 (= $x603 $x795))))))
 ))
 (let (($x235 (and $x734 $x70)))
 (let (($x234 (and $x235 $x556)))
 (let (($x355 (and $x234 $x195)))
 (let (($x89 (= $x355 true)))
 (let (($x568 (= $x89 true)))
 (let (($x768 (= $x568 true)))
 (let (($x224 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x715 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x828))))
 (let ((?x353 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x715)))
 (let ((?x342 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x353)))
 (let ((?x450 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (=> $x674 (= ?x450 ?x342)))))))))))
 ))
 (let (($x270 (and $x812 $x224)))
 (let (($x408 (= $x270 true)))
 (let (($x505 (= $x408 true)))
 (let (($x123 (= $x505 true)))
 (let (($x729 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem ?x828))))
 (let ((?x735 (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x828 (_ bv2 32))) ?x121))))
 (let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x219 (_ bv1 32))))
 (=> $x424 (= ?x247 ?x735))))))))))
 ))
 (let (($x566 (and $x234 $x729)))
 (let (($x238 (= $x566 true)))
 (let (($x725 (= $x238 true)))
 (let (($x532 (= $x725 true)))
 (let ((?x741 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x432 (bvneg ?x741)))
 (let (($x597 (= ?x432 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x282 (= $x597 true)))
 (let (($x277 (= $x282 true)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x685))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv2 32))) ?x373)))
 (let ((?x473 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv3 32))) ?x241)))
 (let ((?x689 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (=> $x446 (= ?x689 ?x473)))))))))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x809 (bvuge ?x794 (_ bv1 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (= $x446 $x809))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x93 (= false false)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x712 (= ?x652 (_ bv0 32))))
 (=> $x712 $x93)))))
 ))
 (let (($x221 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x794 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x795 (= ?x794 (_ bv0 32))))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x712 (= ?x652 (_ bv0 32))))
 (= $x712 $x795))))))
 ))
 (let (($x466 (and $x221 $x428)))
 (let (($x595 (and $x466 $x210)))
 (let (($x255 (and $x595 $x371)))
 (let (($x346 (= $x255 true)))
 (let (($x307 (= $x346 true)))
 (let (($x474 (= $x307 true)))
 (let (($x360 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem ?x685))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x685 (_ bv2 32))) ?x248))))
 (let ((?x689 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (=> $x446 (= ?x689 ?x200))))))))))
 ))
 (let (($x116 (and $x595 $x360)))
 (let (($x755 (= $x116 true)))
 (let (($x283 (= $x755 true)))
 (let (($x727 (= $x283 true)))
 (let (($x748 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x485 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x685))))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv2 32))) ?x485)))
 (let ((?x378 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv3 32))) ?x77)))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (=> $x140 (= ?x55 ?x378)))))))))))
 ))
 (let (($x7 (and $x369 $x748)))
 (let (($x530 (= $x7 true)))
 (let (($x281 (= $x530 true)))
 (let (($x648 (= $x281 true)))
 (let (($x538 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x373 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x685))))
 (let ((?x241 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv2 32))) ?x373)))
 (let ((?x473 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x685 (_ bv3 32))) ?x241)))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (=> $x140 (= ?x55 ?x473)))))))))))
 ))
 (let (($x237 (and $x369 $x538)))
 (let (($x442 (= $x237 true)))
 (let (($x271 (= $x442 true)))
 (let (($x620 (= $x271 true)))
 (let (($x186 (= ?x432 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x352 (= $x186 true)))
 (let (($x475 (= $x352 true)))
 (let (($x291 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x685 (bvadd ?x827 input.dst.llvm-%m2)))
 (let ((?x485 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x685))))
 (let ((?x77 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv2 32))) ?x485)))
 (let ((?x378 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x685 (_ bv3 32))) ?x77)))
 (let ((?x689 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (=> $x446 (= ?x689 ?x378)))))))))))
 ))
 (let (($x414 (and $x595 $x291)))
 (let (($x336 (= $x414 true)))
 (let (($x272 (= $x336 true)))
 (let (($x555 (= $x272 true)))
 (let (($x839 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x827 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x828 (bvadd ?x827 input.dst.llvm-%m1)))
 (let ((?x832 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x828))))
 (let ((?x834 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv2 32))) ?x832)))
 (let ((?x836 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x828 (_ bv3 32))) ?x834)))
 (let ((?x450 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (=> $x674 (= ?x450 ?x836)))))))))))
 ))
 (let (($x840 (and $x812 $x839)))
 (let (($x841 (= $x840 true)))
 (let (($x851 (= $x841 true)))
 (let (($x842 (= $x851 true)))
 (let (($x622 (and $x842 $x555)))
 (let (($x213 (and $x622 $x475)))
 (let (($x265 (and $x213 $x620)))
 (let (($x345 (and $x265 $x648)))
 (let (($x549 (and $x345 $x727)))
 (let (($x384 (and $x549 $x474)))
 (let (($x155 (and $x384 $x277)))
 (let (($x431 (and $x155 $x532)))
 (let (($x416 (and $x431 $x123)))
 (let (($x782 (and $x416 $x768)))
 (let (($x444 (and $x782 $x584)))
 (let (($x589 (and $x444 $x509)))
 (let (($x43 (and $x589 $x657)))
 (let (($x868 (and $x43 $x867)))
 (let (($x875 (and $x868 $x874)))
 (let (($x534 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x450 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (=> $x674 (= ?x450 ?x247)))))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x219 (_ bv1 32))))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x674 (bvuge ?x678 (_ bv1 32))))
 (= $x674 $x424))))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x219 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x603 (= ?x219 (_ bv0 32))))
 (let ((?x678 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x678 (_ bv0 32))))
 (= $x81 $x603))))))
 ))
 (let (($x618 (and $x212 $x564)))
 (let (($x144 (and $x618 $x120)))
 (let (($x256 (and $x144 $x534)))
 (let (($x876 (and $x256 $x875)))
 (let (($x762 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x689 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x55 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (=> $x140 (= ?x55 ?x689)))))))
 ))
 (let (($x665 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x446 (bvuge ?x652 (_ bv1 32))))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x382 (_ bv1 32))))
 (= $x140 $x446))))))
 ))
 (let (($x649 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x712 (= ?x652 (_ bv0 32))))
 (let ((?x382 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x581 (= ?x382 (_ bv0 32))))
 (= $x581 $x712))))))
 ))
 (let (($x179 (and $x649 $x325)))
 (let (($x191 (and $x179 $x665)))
 (let (($x114 (and $x191 $x762)))
 (let (($x877 (and $x114 $x876)))
 (let (($x881 (=> $x877 $x880)))
 (not $x881)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 373 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x885 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x886 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x885)))
 (let ((?x883 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L2%3%fcallEnd)))
 (let ((?x884 (bvadd input.spec-%var-fi-0.L2%3%fcallStart ?x883)))
 (let (($x887 (= ?x884 ?x886)))
 (let (($x888 (= $x887 true)))
 (let (($x889 (= $x888 true)))
 (let ((?x82 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x523 (bvneg ?x82)))
 (let (($x129 (= ?x523 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x338 (= $x129 true)))
 (let (($x643 (= $x338 true)))
 (let (($x690 (= ?x523 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x59 (= $x690 true)))
 (let (($x88 (= $x59 true)))
 (let (($x392 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x13 (= $x392 true)))
 (let (($x420 (= $x13 true)))
 (let (($x340 (= $x420 true)))
 (let (($x619 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x489 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x673 (and $x489 $x619)))
 (let (($x421 (and $x673 $x392)))
 (let (($x244 (= $x421 true)))
 (let (($x430 (= $x244 true)))
 (let (($x488 (= $x430 true)))
 (let ((?x393 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x98 (= (_ bv0 32) ?x393)))
 (let ((?x631 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x543 (= (_ bv0 32) ?x631)))
 (let ((?x533 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x533)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x501 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x580 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x368 (and $x580 $x501)))
 (let (($x700 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x700 $x368)))
 (let (($x645 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x818 (and $x817 $x821)))
 (let (($x822 (not $x818)))
 (let (($x820 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x819 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x816 (and $x819 $x820)))
 (let (($x830 (and (not $x816) $x822)))
 (let (($x813 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x806 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x814 (and $x806 $x813)))
 (let (($x815 (not $x814)))
 (let (($x802 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x799 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x804 (and $x799 $x802)))
 (let (($x824 (and (not $x804) $x815)))
 (let (($x557 (and (and (and (and (and (and $x824 $x830) $x153) $x645) $x30) $x284) $x543)))
 (let (($x41 (and $x557 $x98)))
 (let (($x599 (= $x41 true)))
 (let (($x709 (= $x599 true)))
 (let (($x455 (= $x709 true)))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x173))))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (=> $x172 (= ?x832 ?x164))))))))))
 ))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x742 (_ bv1 32))))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (= $x172 $x19))))))
 ))
 (let (($x792 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (= ?x144 (_ bv0 32))))
 (=> $x450 $x553)))))
 ))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x742 (_ bv0 32))))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (= ?x144 (_ bv0 32))))
 (= $x450 $x65))))))
 ))
 (let (($x787 (and $x682 $x792)))
 (let (($x423 (and $x787 $x122)))
 (let (($x484 (and $x423 $x293)))
 (let (($x441 (= $x484 true)))
 (let (($x358 (= $x441 true)))
 (let (($x74 (= $x358 true)))
 (let (($x58 (= $x673 true)))
 (let (($x591 (= $x58 true)))
 (let (($x317 (= $x591 true)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x467 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x769 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x467))))
 (let ((?x648 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (=> $x664 (= ?x648 ?x769))))))))))
 ))
 (let (($x589 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x742 (_ bv1 32))))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (= $x664 $x19))))))
 ))
 (let (($x703 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x197 (_ bv0 32))))
 (=> $x186 $x553)))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x742 (_ bv0 32))))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x197 (_ bv0 32))))
 (= $x186 $x65))))))
 ))
 (let (($x584 (and $x318 $x703)))
 (let (($x308 (and $x584 $x589)))
 (let (($x594 (and $x308 $x354)))
 (let (($x426 (= $x594 true)))
 (let (($x608 (= $x426 true)))
 (let (($x749 (= $x608 true)))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x245))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x222)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x22)))
 (let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x613 (_ bv1 32))))
 (=> $x537 (= ?x281 ?x87)))))))))))
 ))
 (let (($x166 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x742 (_ bv1 32))))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x613 (_ bv1 32))))
 (= $x537 $x19))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (= ?x613 (_ bv0 32))))
 (=> $x741 $x553)))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x742 (_ bv0 32))))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (= ?x613 (_ bv0 32))))
 (= $x741 $x65))))))
 ))
 (let (($x637 (and $x545 $x97)))
 (let (($x142 (and $x637 $x166)))
 (let (($x644 (and $x142 $x636)))
 (let (($x493 (= $x644 true)))
 (let (($x586 (= $x493 true)))
 (let (($x612 (= $x586 true)))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x245))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x222)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x22)))
 (let ((?x648 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (=> $x664 (= ?x648 ?x87)))))))))))
 ))
 (let (($x558 (and $x308 $x80)))
 (let (($x66 (= $x558 true)))
 (let (($x429 (= $x66 true)))
 (let (($x585 (= $x429 true)))
 (let (($x412 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x467 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x769 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x467))))
 (let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x613 (_ bv1 32))))
 (=> $x537 (= ?x281 ?x769))))))))))
 ))
 (let (($x662 (and $x142 $x412)))
 (let (($x502 (= $x662 true)))
 (let (($x667 (= $x502 true)))
 (let (($x465 (= $x667 true)))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x447 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x35))))
 (let ((?x514 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x447)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x514)))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (=> $x327 (= ?x829 ?x285)))))))))))
 ))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x742 (_ bv1 32))))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (= $x327 $x19))))))
 ))
 (let (($x296 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x424 (_ bv0 32))))
 (=> $x512 $x553)))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x742 (_ bv0 32))))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x424 (_ bv0 32))))
 (= $x512 $x65))))))
 ))
 (let (($x124 (and $x209 $x296)))
 (let (($x614 (and $x124 $x419)))
 (let (($x194 (and $x614 $x167)))
 (let (($x540 (= $x194 true)))
 (let (($x650 (= $x540 true)))
 (let (($x185 (= $x650 true)))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x173))))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (=> $x327 (= ?x829 ?x164))))))))))
 ))
 (let (($x780 (and $x614 $x71)))
 (let (($x232 (= $x780 true)))
 (let (($x440 (= $x232 true)))
 (let (($x233 (= $x440 true)))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x35))))
 (let ((?x659 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x321)))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x659)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (=> $x172 (= ?x832 ?x503)))))))))))
 ))
 (let (($x759 (and $x423 $x681)))
 (let (($x721 (= $x759 true)))
 (let (($x590 (= $x721 true)))
 (let (($x12 (= $x590 true)))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x447 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x35))))
 (let ((?x514 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x447)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x514)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (=> $x172 (= ?x832 ?x285)))))))))))
 ))
 (let (($x220 (and $x423 $x178)))
 (let (($x541 (= $x220 true)))
 (let (($x554 (= $x541 true)))
 (let (($x676 (= $x554 true)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x35))))
 (let ((?x659 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x321)))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x659)))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (=> $x327 (= ?x829 ?x503)))))))))))
 ))
 (let (($x157 (and $x614 $x716)))
 (let (($x565 (= $x157 true)))
 (let (($x469 (= $x565 true)))
 (let (($x634 (= $x469 true)))
 (let (($x722 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x479 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x245))))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x479)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x177)))
 (let ((?x648 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (=> $x664 (= ?x648 ?x79)))))))))))
 ))
 (let (($x20 (and $x308 $x722)))
 (let (($x276 (= $x20 true)))
 (let (($x261 (= $x276 true)))
 (let (($x508 (= $x261 true)))
 (let (($x290 (and $x508 $x634)))
 (let (($x730 (and $x290 $x676)))
 (let (($x438 (and $x730 $x12)))
 (let (($x86 (and $x438 $x233)))
 (let (($x482 (and $x86 $x185)))
 (let (($x154 (and $x482 $x465)))
 (let (($x699 (and $x154 $x585)))
 (let (($x684 (and $x699 $x612)))
 (let (($x387 (and $x684 $x749)))
 (let (($x40 (and $x387 $x317)))
 (let (($x359 (and $x40 $x74)))
 (let (($x573 (and $x359 $x455)))
 (let (($x609 (and $x573 $x488)))
 (let (($x162 (and $x609 $x340)))
 (let (($x522 (and $x162 $x88)))
 (let (($x464 (and $x522 $x643)))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (=> $x664 (= ?x648 ?x281)))))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x613 (_ bv1 32))))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (= $x664 $x537))))))
 ))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (= ?x613 (_ bv0 32))))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x197 (_ bv0 32))))
 (= $x186 $x741))))))
 ))
 (let (($x254 (and $x475 $x703)))
 (let (($x442 (and $x254 $x237)))
 (let (($x720 (and $x442 $x656)))
 (let (($x552 (and $x720 $x464)))
 (let (($x837 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (=> $x172 (= ?x832 ?x829)))))))
 ))
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (= $x172 $x327))))))
 ))
 (let (($x539 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x424 (_ bv0 32))))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (= ?x144 (_ bv0 32))))
 (= $x450 $x512))))))
 ))
 (let (($x713 (and $x539 $x792)))
 (let (($x828 (and $x713 $x693)))
 (let (($x838 (and $x828 $x837)))
 (let (($x670 (and $x838 $x552)))
 (let (($x890 (=> $x670 $x889)))
 (not $x890))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L2%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L2%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(assert
 (let ((?x885 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x886 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x885)))
 (let ((?x883 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L2%3%fcallEnd)))
 (let ((?x884 (bvadd input.spec-%var-fi-0.L2%3%fcallStart ?x883)))
 (let (($x887 (= ?x884 ?x886)))
 (let (($x888 (= $x887 true)))
 (let (($x889 (= $x888 true)))
 (let ((?x82 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x523 (bvneg ?x82)))
 (let (($x129 (= ?x523 input.spec-%var-fi-0.L2%3%fcallStart)))
 (let (($x338 (= $x129 true)))
 (let (($x643 (= $x338 true)))
 (let (($x690 (= ?x523 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x59 (= $x690 true)))
 (let (($x88 (= $x59 true)))
 (let (($x392 (= input.spec-%tmpvar-25.L2%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x13 (= $x392 true)))
 (let (($x420 (= $x13 true)))
 (let (($x340 (= $x420 true)))
 (let (($x619 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x489 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x673 (and $x489 $x619)))
 (let (($x421 (and $x673 $x392)))
 (let (($x244 (= $x421 true)))
 (let (($x430 (= $x244 true)))
 (let (($x488 (= $x430 true)))
 (let ((?x393 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x98 (= (_ bv0 32) ?x393)))
 (let ((?x631 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x543 (= (_ bv0 32) ?x631)))
 (let ((?x533 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x533)))
 (let ((?x165 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x501 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x580 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x368 (and $x580 $x501)))
 (let (($x700 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x700 $x368)))
 (let (($x645 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x817 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x818 (and $x817 $x821)))
 (let (($x822 (not $x818)))
 (let (($x820 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x819 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x816 (and $x819 $x820)))
 (let (($x830 (and (not $x816) $x822)))
 (let (($x813 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x806 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x814 (and $x806 $x813)))
 (let (($x815 (not $x814)))
 (let (($x802 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x799 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x804 (and $x799 $x802)))
 (let (($x824 (and (not $x804) $x815)))
 (let (($x557 (and (and (and (and (and (and $x824 $x830) $x153) $x645) $x30) $x284) $x543)))
 (let (($x41 (and $x557 $x98)))
 (let (($x599 (= $x41 true)))
 (let (($x709 (= $x599 true)))
 (let (($x455 (= $x709 true)))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x173))))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (=> $x172 (= ?x832 ?x164))))))))))
 ))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x742 (_ bv1 32))))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (= $x172 $x19))))))
 ))
 (let (($x792 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (= ?x144 (_ bv0 32))))
 (=> $x450 $x553)))))
 ))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x742 (_ bv0 32))))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (= ?x144 (_ bv0 32))))
 (= $x450 $x65))))))
 ))
 (let (($x787 (and $x682 $x792)))
 (let (($x423 (and $x787 $x122)))
 (let (($x484 (and $x423 $x293)))
 (let (($x441 (= $x484 true)))
 (let (($x358 (= $x441 true)))
 (let (($x74 (= $x358 true)))
 (let (($x58 (= $x673 true)))
 (let (($x591 (= $x58 true)))
 (let (($x317 (= $x591 true)))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x467 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x769 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x467))))
 (let ((?x648 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (=> $x664 (= ?x648 ?x769))))))))))
 ))
 (let (($x589 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x742 (_ bv1 32))))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (= $x664 $x19))))))
 ))
 (let (($x703 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x197 (_ bv0 32))))
 (=> $x186 $x553)))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x742 (_ bv0 32))))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x197 (_ bv0 32))))
 (= $x186 $x65))))))
 ))
 (let (($x584 (and $x318 $x703)))
 (let (($x308 (and $x584 $x589)))
 (let (($x594 (and $x308 $x354)))
 (let (($x426 (= $x594 true)))
 (let (($x608 (= $x426 true)))
 (let (($x749 (= $x608 true)))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x245))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x222)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x22)))
 (let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x613 (_ bv1 32))))
 (=> $x537 (= ?x281 ?x87)))))))))))
 ))
 (let (($x166 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x742 (_ bv1 32))))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x613 (_ bv1 32))))
 (= $x537 $x19))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (= ?x613 (_ bv0 32))))
 (=> $x741 $x553)))))
 ))
 (let (($x545 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x742 (_ bv0 32))))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (= ?x613 (_ bv0 32))))
 (= $x741 $x65))))))
 ))
 (let (($x637 (and $x545 $x97)))
 (let (($x142 (and $x637 $x166)))
 (let (($x644 (and $x142 $x636)))
 (let (($x493 (= $x644 true)))
 (let (($x586 (= $x493 true)))
 (let (($x612 (= $x586 true)))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x245))))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x222)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x22)))
 (let ((?x648 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (=> $x664 (= ?x648 ?x87)))))))))))
 ))
 (let (($x558 (and $x308 $x80)))
 (let (($x66 (= $x558 true)))
 (let (($x429 (= $x66 true)))
 (let (($x585 (= $x429 true)))
 (let (($x412 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x467 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x769 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x467))))
 (let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x613 (_ bv1 32))))
 (=> $x537 (= ?x281 ?x769))))))))))
 ))
 (let (($x662 (and $x142 $x412)))
 (let (($x502 (= $x662 true)))
 (let (($x667 (= $x502 true)))
 (let (($x465 (= $x667 true)))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x447 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x35))))
 (let ((?x514 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x447)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x514)))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (=> $x327 (= ?x829 ?x285)))))))))))
 ))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x742 (_ bv1 32))))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (= $x327 $x19))))))
 ))
 (let (($x296 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x553 (= false false)))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x424 (_ bv0 32))))
 (=> $x512 $x553)))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x742 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x742 (_ bv0 32))))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x424 (_ bv0 32))))
 (= $x512 $x65))))))
 ))
 (let (($x124 (and $x209 $x296)))
 (let (($x614 (and $x124 $x419)))
 (let (($x194 (and $x614 $x167)))
 (let (($x540 (= $x194 true)))
 (let (($x650 (= $x540 true)))
 (let (($x185 (= $x650 true)))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x173))))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (=> $x327 (= ?x829 ?x164))))))))))
 ))
 (let (($x780 (and $x614 $x71)))
 (let (($x232 (= $x780 true)))
 (let (($x440 (= $x232 true)))
 (let (($x233 (= $x440 true)))
 (let (($x681 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x35))))
 (let ((?x659 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x321)))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x659)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (=> $x172 (= ?x832 ?x503)))))))))))
 ))
 (let (($x759 (and $x423 $x681)))
 (let (($x721 (= $x759 true)))
 (let (($x590 (= $x721 true)))
 (let (($x12 (= $x590 true)))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x447 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x35))))
 (let ((?x514 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x447)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x514)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (=> $x172 (= ?x832 ?x285)))))))))))
 ))
 (let (($x220 (and $x423 $x178)))
 (let (($x541 (= $x220 true)))
 (let (($x554 (= $x541 true)))
 (let (($x676 (= $x554 true)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x35 (bvadd ?x304 input.dst.llvm-%m2)))
 (let ((?x321 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x35))))
 (let ((?x659 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv2 32))) ?x321)))
 (let ((?x503 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x35 (_ bv3 32))) ?x659)))
 (let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (=> $x327 (= ?x829 ?x503)))))))))))
 ))
 (let (($x157 (and $x614 $x716)))
 (let (($x565 (= $x157 true)))
 (let (($x469 (= $x565 true)))
 (let (($x634 (= $x469 true)))
 (let (($x722 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x245 (bvadd ?x304 input.dst.llvm-%m1)))
 (let ((?x479 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x245))))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x245 (_ bv2 32))) ?x479)))
 (let ((?x79 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x245 (_ bv3 32))) ?x177)))
 (let ((?x648 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (=> $x664 (= ?x648 ?x79)))))))))))
 ))
 (let (($x20 (and $x308 $x722)))
 (let (($x276 (= $x20 true)))
 (let (($x261 (= $x276 true)))
 (let (($x508 (= $x261 true)))
 (let (($x290 (and $x508 $x634)))
 (let (($x730 (and $x290 $x676)))
 (let (($x438 (and $x730 $x12)))
 (let (($x86 (and $x438 $x233)))
 (let (($x482 (and $x86 $x185)))
 (let (($x154 (and $x482 $x465)))
 (let (($x699 (and $x154 $x585)))
 (let (($x684 (and $x699 $x612)))
 (let (($x387 (and $x684 $x749)))
 (let (($x40 (and $x387 $x317)))
 (let (($x359 (and $x40 $x74)))
 (let (($x573 (and $x359 $x455)))
 (let (($x609 (and $x573 $x488)))
 (let (($x162 (and $x609 $x340)))
 (let (($x522 (and $x162 $x88)))
 (let (($x464 (and $x522 $x643)))
 (let (($x656 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x648 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (=> $x664 (= ?x648 ?x281)))))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x537 (bvuge ?x613 (_ bv1 32))))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x664 (bvuge ?x197 (_ bv1 32))))
 (= $x664 $x537))))))
 ))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x613 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x741 (= ?x613 (_ bv0 32))))
 (let ((?x197 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x186 (= ?x197 (_ bv0 32))))
 (= $x186 $x741))))))
 ))
 (let (($x254 (and $x475 $x703)))
 (let (($x442 (and $x254 $x237)))
 (let (($x720 (and $x442 $x656)))
 (let (($x552 (and $x720 $x464)))
 (let (($x837 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x829 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))
 (let ((?x832 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (=> $x172 (= ?x832 ?x829)))))))
 ))
 (let (($x693 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x424 (_ bv1 32))))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x144 (_ bv1 32))))
 (= $x172 $x327))))))
 ))
 (let (($x539 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x512 (= ?x424 (_ bv0 32))))
 (let ((?x144 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (= ?x144 (_ bv0 32))))
 (= $x450 $x512))))))
 ))
 (let (($x713 (and $x539 $x792)))
 (let (($x828 (and $x713 $x693)))
 (let (($x838 (and $x828 $x837)))
 (let (($x670 (and $x838 $x552)))
 (let (($x890 (=> $x670 $x889)))
 (not $x890))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 382 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x890 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x891 (= (_ bv0 32) ?x890)))
 (let ((?x888 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x889 (= (_ bv0 32) ?x888)))
 (let ((?x886 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x887 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x886)))
 (let ((?x670 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x670)))
 (let (($x552 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x552 $x883)))
 (let (($x464 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x464 $x884)))
 (let (($x75 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x611 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x412 (and $x279 $x611)))
 (let (($x662 (not $x412)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x467 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x769 (and $x467 $x366)))
 (let (($x667 (and (not $x769) $x662)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x166 $x142)))
 (let (($x626 (not $x133)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x545 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x637 (and $x545 $x97)))
 (let (($x790 (and (not $x637) $x626)))
 (let (($x389 (and (and (and (and (and (and $x790 $x667) $x154) $x75) $x885) $x887) $x889)))
 (let (($x491 (and $x389 $x891)))
 (let (($x184 (= $x491 true)))
 (let (($x649 (= $x184 true)))
 (let ((?x275 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x575 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x518 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x617 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x458 (concat ?x617 (concat ?x518 (concat ?x575 ?x275)))))
 (let (($x280 (= ?x458 input.dst.llvm-%m1)))
 (let (($x171 (= $x280 true)))
 (let (($x536 (= $x171 true)))
 (let ((?x779 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x525 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x471 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x355 (concat ?x471 (concat ?x291 (concat ?x525 ?x779)))))
 (let (($x271 (= ?x355 input.dst.llvm-%m2)))
 (let (($x620 (= $x271 true)))
 (let (($x344 (= $x620 true)))
 (let (($x89 (= input.dst.llvm-%m2 ?x355)))
 (let (($x517 (= input.dst.llvm-%m1 ?x458)))
 (let (($x568 (and $x517 $x89)))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x420 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x842 (bvadd ?x420 input.dst.llvm-%m2)))
 (let ((?x466 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv1 32))) (select input.dst.llvm-mem ?x842))))
 (let ((?x772 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv2 32))) ?x466))))
 (let ((?x479 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x442 (_ bv1 32))))
 (=> $x116 (= ?x479 ?x772))))))))))
 ))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x228 (_ bv1 32))))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x442 (_ bv1 32))))
 (= $x116 $x631))))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x454 (= false false)))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x442 (_ bv0 32))))
 (=> $x648 $x454)))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x228 (_ bv0 32))))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x442 (_ bv0 32))))
 (= $x648 $x645))))))
 ))
 (let (($x346 (and $x375 $x388)))
 (let (($x698 (and $x346 $x201)))
 (let (($x510 (and $x698 $x374)))
 (let (($x768 (and $x510 $x568)))
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x420 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x340 (bvadd ?x420 input.dst.llvm-%m1)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x522 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x82))))
 (let ((?x164 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x122 (_ bv1 32))))
 (=> $x681 (= ?x164 ?x522))))))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x228 (_ bv1 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x122 (_ bv1 32))))
 (= $x681 $x631))))))
 ))
 (let (($x661 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x454 (= false false)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x122 (_ bv0 32))))
 (=> $x423 $x454)))))
 ))
 (let (($x700 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x228 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x122 (_ bv0 32))))
 (= $x423 $x645))))))
 ))
 (let (($x580 (and $x700 $x661)))
 (let (($x393 (and $x580 $x557)))
 (let (($x643 (and $x393 $x338)))
 (let (($x167 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x86 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x194 (and $x86 $x167)))
 (let (($x500 (and (and (and (and (and (and $x194 $x790) $x667) $x154) $x75) $x643) $x885)))
 (let (($x126 (and (and (and (and $x500 $x887) $x889) $x891) $x768)))
 (let (($x380 (= $x126 true)))
 (let (($x373 (= $x380 true)))
 (let (($x64 (= $x373 true)))
 (let (($x540 (= $x194 true)))
 (let (($x650 (= $x540 true)))
 (let (($x185 (= $x650 true)))
 (let (($x302 (and $x185 $x64)))
 (let (($x161 (and $x302 $x344)))
 (let (($x459 (and $x161 $x536)))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x164 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x122 (_ bv1 32))))
 (=> $x681 (= ?x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x721 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x682 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x122 (_ bv1 32))))
 (= $x681 (bvuge ?x682 (_ bv1 32)))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x682 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x122 (_ bv0 32))))
 (= $x423 (= ?x682 (_ bv0 32)))))))
 ))
 (let (($x447 (and $x135 $x661)))
 (let (($x590 (and $x447 $x721)))
 (let (($x780 (and $x590 $x71)))
 (let (($x747 (and $x780 $x459)))
 (let (($x728 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x442 (_ bv1 32))))
 (=> $x116 (= ?x479 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x442 (_ bv1 32))))
 (= $x116 (bvuge ?x537 (_ bv1 32)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x442 (_ bv0 32))))
 (= $x648 (= ?x537 (_ bv0 32)))))))
 ))
 (let (($x248 (and $x345 $x388)))
 (let (($x245 (and $x248 $x283)))
 (let (($x660 (and $x245 $x728)))
 (let (($x587 (and $x660 $x747)))
 (let (($x561 (=> $x587 $x649)))
 (not $x561)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x890 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x891 (= (_ bv0 32) ?x890)))
 (let ((?x888 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x889 (= (_ bv0 32) ?x888)))
 (let ((?x886 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x887 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x886)))
 (let ((?x670 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x670)))
 (let (($x552 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x552 $x883)))
 (let (($x464 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x464 $x884)))
 (let (($x75 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x611 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x412 (and $x279 $x611)))
 (let (($x662 (not $x412)))
 (let (($x366 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x467 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x769 (and $x467 $x366)))
 (let (($x667 (and (not $x769) $x662)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x166 $x142)))
 (let (($x626 (not $x133)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x545 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x637 (and $x545 $x97)))
 (let (($x790 (and (not $x637) $x626)))
 (let (($x389 (and (and (and (and (and (and $x790 $x667) $x154) $x75) $x885) $x887) $x889)))
 (let (($x491 (and $x389 $x891)))
 (let (($x184 (= $x491 true)))
 (let (($x649 (= $x184 true)))
 (let ((?x275 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x575 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x518 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x617 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x458 (concat ?x617 (concat ?x518 (concat ?x575 ?x275)))))
 (let (($x280 (= ?x458 input.dst.llvm-%m1)))
 (let (($x171 (= $x280 true)))
 (let (($x536 (= $x171 true)))
 (let ((?x779 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x525 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x471 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x355 (concat ?x471 (concat ?x291 (concat ?x525 ?x779)))))
 (let (($x271 (= ?x355 input.dst.llvm-%m2)))
 (let (($x620 (= $x271 true)))
 (let (($x344 (= $x620 true)))
 (let (($x89 (= input.dst.llvm-%m2 ?x355)))
 (let (($x517 (= input.dst.llvm-%m1 ?x458)))
 (let (($x568 (and $x517 $x89)))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x420 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x842 (bvadd ?x420 input.dst.llvm-%m2)))
 (let ((?x466 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv1 32))) (select input.dst.llvm-mem ?x842))))
 (let ((?x772 (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x842 (_ bv2 32))) ?x466))))
 (let ((?x479 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x442 (_ bv1 32))))
 (=> $x116 (= ?x479 ?x772))))))))))
 ))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x228 (_ bv1 32))))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x442 (_ bv1 32))))
 (= $x116 $x631))))))
 ))
 (let (($x388 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x454 (= false false)))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x442 (_ bv0 32))))
 (=> $x648 $x454)))))
 ))
 (let (($x375 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x228 (_ bv0 32))))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x442 (_ bv0 32))))
 (= $x648 $x645))))))
 ))
 (let (($x346 (and $x375 $x388)))
 (let (($x698 (and $x346 $x201)))
 (let (($x510 (and $x698 $x374)))
 (let (($x768 (and $x510 $x568)))
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x420 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x340 (bvadd ?x420 input.dst.llvm-%m1)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv1 32))) (select input.dst.llvm-mem ?x340))))
 (let ((?x522 (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x340 (_ bv2 32))) ?x82))))
 (let ((?x164 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x122 (_ bv1 32))))
 (=> $x681 (= ?x164 ?x522))))))))))
 ))
 (let (($x557 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x631 (bvuge ?x228 (_ bv1 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x122 (_ bv1 32))))
 (= $x681 $x631))))))
 ))
 (let (($x661 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x454 (= false false)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x122 (_ bv0 32))))
 (=> $x423 $x454)))))
 ))
 (let (($x700 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x228 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x645 (= ?x228 (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x122 (_ bv0 32))))
 (= $x423 $x645))))))
 ))
 (let (($x580 (and $x700 $x661)))
 (let (($x393 (and $x580 $x557)))
 (let (($x643 (and $x393 $x338)))
 (let (($x167 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x86 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x194 (and $x86 $x167)))
 (let (($x500 (and (and (and (and (and (and $x194 $x790) $x667) $x154) $x75) $x643) $x885)))
 (let (($x126 (and (and (and (and $x500 $x887) $x889) $x891) $x768)))
 (let (($x380 (= $x126 true)))
 (let (($x373 (= $x380 true)))
 (let (($x64 (= $x373 true)))
 (let (($x540 (= $x194 true)))
 (let (($x650 (= $x540 true)))
 (let (($x185 (= $x650 true)))
 (let (($x302 (and $x185 $x64)))
 (let (($x161 (and $x302 $x344)))
 (let (($x459 (and $x161 $x536)))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x164 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x122 (_ bv1 32))))
 (=> $x681 (= ?x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x721 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x682 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x122 (_ bv1 32))))
 (= $x681 (bvuge ?x682 (_ bv1 32)))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x682 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x122 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x122 (_ bv0 32))))
 (= $x423 (= ?x682 (_ bv0 32)))))))
 ))
 (let (($x447 (and $x135 $x661)))
 (let (($x590 (and $x447 $x721)))
 (let (($x780 (and $x590 $x71)))
 (let (($x747 (and $x780 $x459)))
 (let (($x728 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x479 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x442 (_ bv1 32))))
 (=> $x116 (= ?x479 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x442 (_ bv1 32))))
 (= $x116 (bvuge ?x537 (_ bv1 32)))))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x537 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x442 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x648 (= ?x442 (_ bv0 32))))
 (= $x648 (= ?x537 (_ bv0 32)))))))
 ))
 (let (($x248 (and $x345 $x388)))
 (let (($x245 (and $x248 $x283)))
 (let (($x660 (and $x245 $x728)))
 (let (($x587 (and $x660 $x747)))
 (let (($x561 (=> $x587 $x649)))
 (not $x561)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x318 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x584 (= (_ bv0 2) ?x318)))
 (let (($x19 (= $x584 true)))
 (let ((?x528 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x659 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x178 (concat ?x290 (concat ?x565 (concat ?x659 ?x528)))))
 (let (($x197 (= ?x178 input.dst.llvm-%m2)))
 (let (($x186 (= $x197 true)))
 (let (($x352 (= $x186 true)))
 (let (($x220 (= input.dst.llvm-%m2 ?x178)))
 (let ((?x510 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x617 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x575 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x517 (concat ?x458 (concat ?x575 (concat ?x617 ?x510)))))
 (let (($x605 (= input.dst.llvm-%m1 ?x517)))
 (let (($x541 (and $x605 $x220)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x301 (bvadd ?x823 input.dst.llvm-%m2)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x138))))
 (let ((?x769 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x590 (_ bv1 32))))
 (=> $x78 (= ?x769 ?x639))))))))))
 ))
 (let (($x782 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (bvuge ?x387 (_ bv1 32))))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x590 (_ bv1 32))))
 (= $x78 $x508))))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x590 (_ bv0 32))))
 (=> $x164 $x299)))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (= ?x387 (_ bv0 32))))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x590 (_ bv0 32))))
 (= $x164 $x383))))))
 ))
 (let (($x251 (and $x310 $x232)))
 (let (($x604 (and $x251 $x782)))
 (let (($x418 (and $x604 $x57)))
 (let (($x554 (and $x418 $x541)))
 (let ((?x396 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x396)))
 (let ((?x285 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x85 (= (_ bv0 32) ?x285)))
 (let ((?x705 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x514 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x705)))
 (let ((?x818 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x822 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x818)))
 (let (($x817 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x830 (and $x817 $x822)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x821 $x830)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x799 (bvadd ?x823 input.dst.llvm-%m1)))
 (let ((?x805 (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv1 32))) (select input.dst.llvm-mem ?x799))))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv2 32))) ?x805))))
 (let ((?x221 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x522 (_ bv1 32))))
 (=> $x891 (= ?x221 ?x816))))))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (bvuge ?x387 (_ bv1 32))))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x522 (_ bv1 32))))
 (= $x891 $x508))))))
 ))
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (= ?x522 (_ bv0 32))))
 (=> $x691 $x299)))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (= ?x387 (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (= ?x522 (_ bv0 32))))
 (= $x691 $x383))))))
 ))
 (let (($x673 (and $x40 $x464)))
 (let (($x296 (and $x673 $x209)))
 (let (($x157 (and $x296 $x716)))
 (let (($x618 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x382 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x708 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x483 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x389 (and $x483 $x708)))
 (let (($x491 (not $x389)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x529 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x710 (and $x529 $x461)))
 (let (($x649 (and (not $x710) $x491)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x536 (and $x280 $x171)))
 (let (($x459 (not $x536)))
 (let (($x620 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (and $x302 $x620)))
 (let (($x587 (and (not $x344) $x459)))
 (let (($x355 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x779 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x89 (and $x779 $x355)))
 (let (($x95 (and (and (and (and (and (and $x89 $x587) $x649) $x382) $x618) $x157) $x300)))
 (let (($x829 (and (and (and (and $x95 $x514) $x85) $x165) $x554)))
 (let (($x834 (= $x829 true)))
 (let (($x837 (= $x834 true)))
 (let (($x838 (= $x837 true)))
 (let (($x568 (= $x89 true)))
 (let (($x768 (= $x568 true)))
 (let (($x126 (= $x768 true)))
 (let (($x471 (= ?x517 input.dst.llvm-%m1)))
 (let (($x337 (= $x471 true)))
 (let (($x291 (= $x337 true)))
 (let (($x380 (and $x291 $x126)))
 (let (($x432 (and $x380 $x838)))
 (let (($x475 (and $x432 $x352)))
 (let (($x466 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x221 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x522 (_ bv1 32))))
 (=> $x891 (= ?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x522 (_ bv1 32))))
 (= $x891 (bvuge ?x162 (_ bv1 32)))))))
 ))
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (= ?x522 (_ bv0 32))))
 (= $x691 (= ?x162 (_ bv0 32)))))))
 ))
 (let (($x552 (and $x338 $x464)))
 (let (($x375 (and $x552 $x146)))
 (let (($x595 (and $x375 $x466)))
 (let (($x211 (and $x595 $x475)))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x769 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x590 (_ bv1 32))))
 (=> $x78 (= ?x769 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x590 (_ bv1 32))))
 (= $x78 (bvuge ?x329 (_ bv1 32)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x590 (_ bv0 32))))
 (= $x164 (= ?x329 (_ bv0 32)))))))
 ))
 (let (($x440 (and $x6 $x232)))
 (let (($x791 (and $x440 $x637)))
 (let (($x412 (and $x791 $x611)))
 (let (($x703 (and $x412 $x211)))
 (let (($x589 (=> $x703 $x19)))
 (not $x589))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x318 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x584 (= (_ bv0 2) ?x318)))
 (let (($x19 (= $x584 true)))
 (let ((?x528 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x659 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x178 (concat ?x290 (concat ?x565 (concat ?x659 ?x528)))))
 (let (($x197 (= ?x178 input.dst.llvm-%m2)))
 (let (($x186 (= $x197 true)))
 (let (($x352 (= $x186 true)))
 (let (($x220 (= input.dst.llvm-%m2 ?x178)))
 (let ((?x510 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x617 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x575 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x458 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x517 (concat ?x458 (concat ?x575 (concat ?x617 ?x510)))))
 (let (($x605 (= input.dst.llvm-%m1 ?x517)))
 (let (($x541 (and $x605 $x220)))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x301 (bvadd ?x823 input.dst.llvm-%m2)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x138))))
 (let ((?x769 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x590 (_ bv1 32))))
 (=> $x78 (= ?x769 ?x639))))))))))
 ))
 (let (($x782 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (bvuge ?x387 (_ bv1 32))))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x590 (_ bv1 32))))
 (= $x78 $x508))))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x590 (_ bv0 32))))
 (=> $x164 $x299)))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (= ?x387 (_ bv0 32))))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x590 (_ bv0 32))))
 (= $x164 $x383))))))
 ))
 (let (($x251 (and $x310 $x232)))
 (let (($x604 (and $x251 $x782)))
 (let (($x418 (and $x604 $x57)))
 (let (($x554 (and $x418 $x541)))
 (let ((?x396 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x165 (= (_ bv0 32) ?x396)))
 (let ((?x285 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x85 (= (_ bv0 32) ?x285)))
 (let ((?x705 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x514 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x705)))
 (let ((?x818 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x822 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x818)))
 (let (($x817 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x830 (and $x817 $x822)))
 (let (($x821 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x300 (and $x821 $x830)))
 (let (($x716 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x799 (bvadd ?x823 input.dst.llvm-%m1)))
 (let ((?x805 (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv1 32))) (select input.dst.llvm-mem ?x799))))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x799 (_ bv2 32))) ?x805))))
 (let ((?x221 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x522 (_ bv1 32))))
 (=> $x891 (= ?x221 ?x816))))))))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x508 (bvuge ?x387 (_ bv1 32))))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x522 (_ bv1 32))))
 (= $x891 $x508))))))
 ))
 (let (($x464 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (= ?x522 (_ bv0 32))))
 (=> $x691 $x299)))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (= ?x387 (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (= ?x522 (_ bv0 32))))
 (= $x691 $x383))))))
 ))
 (let (($x673 (and $x40 $x464)))
 (let (($x296 (and $x673 $x209)))
 (let (($x157 (and $x296 $x716)))
 (let (($x618 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x382 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x708 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x483 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x389 (and $x483 $x708)))
 (let (($x491 (not $x389)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x529 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x710 (and $x529 $x461)))
 (let (($x649 (and (not $x710) $x491)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x536 (and $x280 $x171)))
 (let (($x459 (not $x536)))
 (let (($x620 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (and $x302 $x620)))
 (let (($x587 (and (not $x344) $x459)))
 (let (($x355 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x779 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x89 (and $x779 $x355)))
 (let (($x95 (and (and (and (and (and (and $x89 $x587) $x649) $x382) $x618) $x157) $x300)))
 (let (($x829 (and (and (and (and $x95 $x514) $x85) $x165) $x554)))
 (let (($x834 (= $x829 true)))
 (let (($x837 (= $x834 true)))
 (let (($x838 (= $x837 true)))
 (let (($x568 (= $x89 true)))
 (let (($x768 (= $x568 true)))
 (let (($x126 (= $x768 true)))
 (let (($x471 (= ?x517 input.dst.llvm-%m1)))
 (let (($x337 (= $x471 true)))
 (let (($x291 (= $x337 true)))
 (let (($x380 (and $x291 $x126)))
 (let (($x432 (and $x380 $x838)))
 (let (($x475 (and $x432 $x352)))
 (let (($x466 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x221 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x522 (_ bv1 32))))
 (=> $x891 (= ?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (bvuge ?x522 (_ bv1 32))))
 (= $x891 (bvuge ?x162 (_ bv1 32)))))))
 ))
 (let (($x338 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x522 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x691 (= ?x522 (_ bv0 32))))
 (= $x691 (= ?x162 (_ bv0 32)))))))
 ))
 (let (($x552 (and $x338 $x464)))
 (let (($x375 (and $x552 $x146)))
 (let (($x595 (and $x375 $x466)))
 (let (($x211 (and $x595 $x475)))
 (let (($x611 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x769 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x590 (_ bv1 32))))
 (=> $x78 (= ?x769 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x590 (_ bv1 32))))
 (= $x78 (bvuge ?x329 (_ bv1 32)))))))
 ))
 (let (($x6 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x590 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x590 (_ bv0 32))))
 (= $x164 (= ?x329 (_ bv0 32)))))))
 ))
 (let (($x440 (and $x6 $x232)))
 (let (($x791 (and $x440 $x637)))
 (let (($x412 (and $x791 $x611)))
 (let (($x703 (and $x412 $x211)))
 (let (($x589 (=> $x703 $x19)))
 (not $x589))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 188 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x142 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x133 (= (_ bv0 2) ?x142)))
 (let (($x790 (= $x133 true)))
 (let ((?x340 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x889 (concat ?x29 (concat ?x500 (concat ?x523 ?x340)))))
 (let (($x661 (= ?x889 input.dst.llvm-%m1)))
 (let (($x167 (= $x661 true)))
 (let (($x194 (= $x167 true)))
 (let ((?x301 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x671 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x639 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x332 (concat ?x639 (concat ?x381 (concat ?x671 ?x301)))))
 (let (($x201 (= input.dst.llvm-%m2 ?x332)))
 (let (($x218 (= input.dst.llvm-%m1 ?x889)))
 (let (($x698 (and $x218 $x201)))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x755 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x390 (bvadd ?x755 input.dst.llvm-%m2)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv1 32))) (select input.dst.llvm-mem ?x390))))
 (let ((?x631 (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv2 32))) ?x207))))
 (let ((?x126 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x375 (_ bv1 32))))
 (=> $x195 (= ?x126 ?x631))))))))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x851 (_ bv1 32))))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x375 (_ bv1 32))))
 (= $x195 $x222))))))
 ))
 (let (($x772 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x733 (= false false)))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x375 (_ bv0 32))))
 (=> $x221 $x733)))))
 ))
 (let (($x687 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x685 (= ?x851 (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x375 (_ bv0 32))))
 (= $x221 $x685))))))
 ))
 (let (($x682 (and $x687 $x772)))
 (let (($x472 (and $x682 $x262)))
 (let (($x558 (and $x472 $x243)))
 (let (($x62 (and $x558 $x698)))
 (let ((?x619 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x591 (= (_ bv0 32) ?x619)))
 (let ((?x489 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x278 (= (_ bv0 32) ?x489)))
 (let ((?x58 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x670 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x670)))
 (let (($x643 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x643 $x883)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x426 $x884)))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x755 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x429 (bvadd ?x755 input.dst.llvm-%m1)))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd ?x429 (_ bv1 32))) (select input.dst.llvm-mem ?x429))))
 (let ((?x560 (concat (select input.dst.llvm-mem (bvadd ?x429 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x429 (_ bv2 32))) ?x493))))
 (let ((?x396 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x209 (_ bv1 32))))
 (=> $x821 (= ?x396 ?x560))))))))))
 ))
 (let (($x480 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x851 (_ bv1 32))))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x209 (_ bv1 32))))
 (= $x821 $x222))))))
 ))
 (let (($x820 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x733 (= false false)))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x209 (_ bv0 32))))
 (=> $x296 $x733)))))
 ))
 (let (($x843 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x685 (= ?x851 (_ bv0 32))))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x209 (_ bv0 32))))
 (= $x296 $x685))))))
 ))
 (let (($x652 (and $x843 $x820)))
 (let (($x427 (and $x652 $x480)))
 (let (($x354 (and $x427 $x363)))
 (let (($x237 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x688 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x589 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x308 (and $x19 $x589)))
 (let (($x254 (not $x308)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x376 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x584 (and $x376 $x318)))
 (let (($x667 (and (not $x584) $x254)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x197 $x186)))
 (let (($x475 (not $x352)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x829 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x838 (and $x829 $x837)))
 (let (($x703 (and (not $x838) $x475)))
 (let (($x659 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x565 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x528 (and $x565 $x659)))
 (let (($x177 (and (and (and (and (and (and $x528 $x703) $x667) $x688) $x237) $x354) $x885)))
 (let (($x122 (and (and (and (and $x177 $x328) $x278) $x591) $x62)))
 (let (($x423 (= $x122 true)))
 (let (($x718 (= $x423 true)))
 (let (($x135 (= $x718 true)))
 (let (($x503 (= $x528 true)))
 (let (($x469 (= $x503 true)))
 (let (($x178 (= $x469 true)))
 (let (($x57 (= ?x332 input.dst.llvm-%m2)))
 (let (($x418 (= $x57 true)))
 (let (($x605 (= $x418 true)))
 (let (($x220 (and $x605 $x178)))
 (let (($x225 (and $x220 $x135)))
 (let (($x540 (and $x225 $x194)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x396 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x209 (_ bv1 32))))
 (=> $x821 (= ?x396 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x818 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x673 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x209 (_ bv1 32))))
 (= $x821 (bvuge ?x673 (_ bv1 32)))))))
 ))
 (let (($x823 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x673 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x209 (_ bv0 32))))
 (= $x296 (= ?x673 (_ bv0 32)))))))
 ))
 (let (($x814 (and $x823 $x820)))
 (let (($x822 (and $x814 $x818)))
 (let (($x310 (and $x822 $x319)))
 (let (($x650 (and $x310 $x540)))
 (let (($x64 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x126 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x375 (_ bv1 32))))
 (=> $x195 (= ?x126 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x375 (_ bv1 32))))
 (= $x195 (bvuge ?x890 (_ bv1 32)))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x375 (_ bv0 32))))
 (= $x221 (= ?x890 (_ bv0 32)))))))
 ))
 (let (($x374 (and $x428 $x772)))
 (let (($x291 (and $x374 $x337)))
 (let (($x302 (and $x291 $x64)))
 (let (($x482 (and $x302 $x650)))
 (let (($x213 (=> $x482 $x790)))
 (not $x213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x142 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x133 (= (_ bv0 2) ?x142)))
 (let (($x790 (= $x133 true)))
 (let ((?x340 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x523 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x889 (concat ?x29 (concat ?x500 (concat ?x523 ?x340)))))
 (let (($x661 (= ?x889 input.dst.llvm-%m1)))
 (let (($x167 (= $x661 true)))
 (let (($x194 (= $x167 true)))
 (let ((?x301 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x671 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x639 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x332 (concat ?x639 (concat ?x381 (concat ?x671 ?x301)))))
 (let (($x201 (= input.dst.llvm-%m2 ?x332)))
 (let (($x218 (= input.dst.llvm-%m1 ?x889)))
 (let (($x698 (and $x218 $x201)))
 (let (($x243 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x755 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x390 (bvadd ?x755 input.dst.llvm-%m2)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv1 32))) (select input.dst.llvm-mem ?x390))))
 (let ((?x631 (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x390 (_ bv2 32))) ?x207))))
 (let ((?x126 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x375 (_ bv1 32))))
 (=> $x195 (= ?x126 ?x631))))))))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x851 (_ bv1 32))))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x375 (_ bv1 32))))
 (= $x195 $x222))))))
 ))
 (let (($x772 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x733 (= false false)))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x375 (_ bv0 32))))
 (=> $x221 $x733)))))
 ))
 (let (($x687 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x685 (= ?x851 (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x375 (_ bv0 32))))
 (= $x221 $x685))))))
 ))
 (let (($x682 (and $x687 $x772)))
 (let (($x472 (and $x682 $x262)))
 (let (($x558 (and $x472 $x243)))
 (let (($x62 (and $x558 $x698)))
 (let ((?x619 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x591 (= (_ bv0 32) ?x619)))
 (let ((?x489 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x278 (= (_ bv0 32) ?x489)))
 (let ((?x58 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x670 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x883 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x670)))
 (let (($x643 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x884 (and $x643 $x883)))
 (let (($x426 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x885 (and $x426 $x884)))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x755 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x429 (bvadd ?x755 input.dst.llvm-%m1)))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd ?x429 (_ bv1 32))) (select input.dst.llvm-mem ?x429))))
 (let ((?x560 (concat (select input.dst.llvm-mem (bvadd ?x429 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x429 (_ bv2 32))) ?x493))))
 (let ((?x396 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x209 (_ bv1 32))))
 (=> $x821 (= ?x396 ?x560))))))))))
 ))
 (let (($x480 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x851 (_ bv1 32))))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x209 (_ bv1 32))))
 (= $x821 $x222))))))
 ))
 (let (($x820 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x733 (= false false)))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x209 (_ bv0 32))))
 (=> $x296 $x733)))))
 ))
 (let (($x843 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x851 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x685 (= ?x851 (_ bv0 32))))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x209 (_ bv0 32))))
 (= $x296 $x685))))))
 ))
 (let (($x652 (and $x843 $x820)))
 (let (($x427 (and $x652 $x480)))
 (let (($x354 (and $x427 $x363)))
 (let (($x237 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x688 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x589 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x308 (and $x19 $x589)))
 (let (($x254 (not $x308)))
 (let (($x318 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x376 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x584 (and $x376 $x318)))
 (let (($x667 (and (not $x584) $x254)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x197 $x186)))
 (let (($x475 (not $x352)))
 (let (($x837 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x829 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x838 (and $x829 $x837)))
 (let (($x703 (and (not $x838) $x475)))
 (let (($x659 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x565 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x528 (and $x565 $x659)))
 (let (($x177 (and (and (and (and (and (and $x528 $x703) $x667) $x688) $x237) $x354) $x885)))
 (let (($x122 (and (and (and (and $x177 $x328) $x278) $x591) $x62)))
 (let (($x423 (= $x122 true)))
 (let (($x718 (= $x423 true)))
 (let (($x135 (= $x718 true)))
 (let (($x503 (= $x528 true)))
 (let (($x469 (= $x503 true)))
 (let (($x178 (= $x469 true)))
 (let (($x57 (= ?x332 input.dst.llvm-%m2)))
 (let (($x418 (= $x57 true)))
 (let (($x605 (= $x418 true)))
 (let (($x220 (and $x605 $x178)))
 (let (($x225 (and $x220 $x135)))
 (let (($x540 (and $x225 $x194)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x396 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x209 (_ bv1 32))))
 (=> $x821 (= ?x396 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x818 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x673 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x821 (bvuge ?x209 (_ bv1 32))))
 (= $x821 (bvuge ?x673 (_ bv1 32)))))))
 ))
 (let (($x823 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x673 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x209 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x209 (_ bv0 32))))
 (= $x296 (= ?x673 (_ bv0 32)))))))
 ))
 (let (($x814 (and $x823 $x820)))
 (let (($x822 (and $x814 $x818)))
 (let (($x310 (and $x822 $x319)))
 (let (($x650 (and $x310 $x540)))
 (let (($x64 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x126 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x375 (_ bv1 32))))
 (=> $x195 (= ?x126 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (bvuge ?x375 (_ bv1 32))))
 (= $x195 (bvuge ?x890 (_ bv1 32)))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x890 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x375 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (= ?x375 (_ bv0 32))))
 (= $x221 (= ?x890 (_ bv0 32)))))))
 ))
 (let (($x374 (and $x428 $x772)))
 (let (($x291 (and $x374 $x337)))
 (let (($x302 (and $x291 $x64)))
 (let (($x482 (and $x302 $x650)))
 (let (($x213 (=> $x482 $x790)))
 (not $x213))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 188 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x174 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x828 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x828))))
 (let ((?x619 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x480 (_ bv1 32))))
 (=> $x426 (= ?x619 ?x66))))))))))
 ))
 (let (($x461 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x730 (bvuge ?x41 (_ bv1 32))))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x480 (_ bv1 32))))
 (= $x426 $x730))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x832 (= false false)))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x480 (_ bv0 32))))
 (=> $x427 $x832)))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x41 (_ bv0 32))))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x480 (_ bv0 32))))
 (= $x427 $x501))))))
 ))
 (let (($x453 (and $x257 $x88)))
 (let (($x189 (and $x453 $x461)))
 (let (($x80 (and $x189 $x361)))
 (let (($x275 (= $x80 true)))
 (let (($x779 (= $x275 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x387 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x805 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x825 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x716 (concat ?x825 (concat ?x805 (concat ?x387 ?x99)))))
 (let (($x464 (= ?x716 input.dst.llvm-%m1)))
 (let (($x628 (= $x464 true)))
 (let (($x575 (= $x628 true)))
 (let ((?x390 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x580 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x631 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x543 (concat ?x631 (concat ?x339 (concat ?x580 ?x390)))))
 (let (($x95 (= input.dst.llvm-%m2 ?x543)))
 (let (($x157 (= input.dst.llvm-%m1 ?x716)))
 (let (($x705 (and $x157 $x95)))
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x548 (bvadd ?x240 input.dst.llvm-%m2)))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x548 (_ bv1 32))) (select input.dst.llvm-mem ?x548))))
 (let ((?x491 (concat (select input.dst.llvm-mem (bvadd ?x548 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x548 (_ bv2 32))) ?x527))))
 (let ((?x178 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (bvuge ?x822 (_ bv1 32))))
 (=> $x596 (= ?x178 ?x491))))))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x730 (bvuge ?x41 (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (bvuge ?x822 (_ bv1 32))))
 (= $x596 $x730))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x832 (= false false)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x822 (_ bv0 32))))
 (=> $x396 $x832)))))
 ))
 (let (($x141 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x41 (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x822 (_ bv0 32))))
 (= $x396 $x501))))))
 ))
 (let (($x162 (and $x141 $x251)))
 (let (($x309 (and $x162 $x71)))
 (let (($x679 (and $x309 $x382)))
 (let (($x173 (and $x679 $x705)))
 (let ((?x486 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x773 (= (_ bv0 32) ?x486)))
 (let ((?x490 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x154 (= (_ bv0 32) ?x490)))
 (let ((?x840 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x840)))
 (let ((?x815 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x815)))
 (let (($x799 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x802 (and $x799 $x202)))
 (let (($x839 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x803 (and $x839 $x802)))
 (let (($x721 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x790 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x467 (and $x790 $x213)))
 (let (($x447 (not $x467)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x294 $x142)))
 (let (($x620 (and (not $x133) $x447)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x661 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x661 $x167)))
 (let (($x540 (not $x194)))
 (let (($x718 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x122 $x718)))
 (let (($x482 (and (not $x135) $x540)))
 (let (($x340 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x636 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x136 (and $x636 $x340)))
 (let (($x502 (and (and (and (and (and (and $x136 $x482) $x620) $x344) $x721) $x80) $x803)))
 (let (($x522 (and (and (and (and $x502 $x75) $x154) $x773) $x173)))
 (let (($x691 (= $x522 true)))
 (let (($x129 (= $x691 true)))
 (let (($x338 (= $x129 true)))
 (let (($x886 (= $x136 true)))
 (let (($x889 (= $x886 true)))
 (let (($x218 (= $x889 true)))
 (let (($x243 (= ?x543 input.dst.llvm-%m2)))
 (let (($x558 (= $x243 true)))
 (let (($x887 (= $x558 true)))
 (let (($x201 (and $x887 $x218)))
 (let (($x761 (and $x201 $x338)))
 (let (($x638 (and $x761 $x575)))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x619 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x480 (_ bv1 32))))
 (=> $x426 (= ?x619 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x670 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x480 (_ bv1 32))))
 (= $x426 (bvuge ?x652 (_ bv1 32)))))))
 ))
 (let (($x755 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x480 (_ bv0 32))))
 (= $x427 (= ?x652 (_ bv0 32)))))))
 ))
 (let (($x699 (and $x755 $x88)))
 (let (($x883 (and $x699 $x670)))
 (let (($x687 (and $x883 $x48)))
 (let (($x617 (and $x687 $x638)))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (bvuge ?x822 (_ bv1 32))))
 (=> $x596 (= ?x178 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (bvuge ?x822 (_ bv1 32))))
 (= $x596 (bvuge ?x76 (_ bv1 32)))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x822 (_ bv0 32))))
 (= $x396 (= ?x76 (_ bv0 32)))))))
 ))
 (let (($x604 (and $x165 $x251)))
 (let (($x605 (and $x604 $x418)))
 (let (($x829 (and $x605 $x554)))
 (let (($x577 (and $x829 $x617)))
 (let (($x462 (=> $x577 $x779)))
 (not $x462)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x174 (bvadd ?x240 input.dst.llvm-%m1)))
 (let ((?x828 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x828))))
 (let ((?x619 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x480 (_ bv1 32))))
 (=> $x426 (= ?x619 ?x66))))))))))
 ))
 (let (($x461 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x730 (bvuge ?x41 (_ bv1 32))))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x480 (_ bv1 32))))
 (= $x426 $x730))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x832 (= false false)))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x480 (_ bv0 32))))
 (=> $x427 $x832)))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x41 (_ bv0 32))))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x480 (_ bv0 32))))
 (= $x427 $x501))))))
 ))
 (let (($x453 (and $x257 $x88)))
 (let (($x189 (and $x453 $x461)))
 (let (($x80 (and $x189 $x361)))
 (let (($x275 (= $x80 true)))
 (let (($x779 (= $x275 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x387 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x805 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x825 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x716 (concat ?x825 (concat ?x805 (concat ?x387 ?x99)))))
 (let (($x464 (= ?x716 input.dst.llvm-%m1)))
 (let (($x628 (= $x464 true)))
 (let (($x575 (= $x628 true)))
 (let ((?x390 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x580 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x631 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x543 (concat ?x631 (concat ?x339 (concat ?x580 ?x390)))))
 (let (($x95 (= input.dst.llvm-%m2 ?x543)))
 (let (($x157 (= input.dst.llvm-%m1 ?x716)))
 (let (($x705 (and $x157 $x95)))
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x240 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x548 (bvadd ?x240 input.dst.llvm-%m2)))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x548 (_ bv1 32))) (select input.dst.llvm-mem ?x548))))
 (let ((?x491 (concat (select input.dst.llvm-mem (bvadd ?x548 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x548 (_ bv2 32))) ?x527))))
 (let ((?x178 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (bvuge ?x822 (_ bv1 32))))
 (=> $x596 (= ?x178 ?x491))))))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x730 (bvuge ?x41 (_ bv1 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (bvuge ?x822 (_ bv1 32))))
 (= $x596 $x730))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x832 (= false false)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x822 (_ bv0 32))))
 (=> $x396 $x832)))))
 ))
 (let (($x141 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x41 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x501 (= ?x41 (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x822 (_ bv0 32))))
 (= $x396 $x501))))))
 ))
 (let (($x162 (and $x141 $x251)))
 (let (($x309 (and $x162 $x71)))
 (let (($x679 (and $x309 $x382)))
 (let (($x173 (and $x679 $x705)))
 (let ((?x486 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x773 (= (_ bv0 32) ?x486)))
 (let ((?x490 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x154 (= (_ bv0 32) ?x490)))
 (let ((?x840 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x840)))
 (let ((?x815 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x815)))
 (let (($x799 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x802 (and $x799 $x202)))
 (let (($x839 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x803 (and $x839 $x802)))
 (let (($x721 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x790 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x467 (and $x790 $x213)))
 (let (($x447 (not $x467)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x294 $x142)))
 (let (($x620 (and (not $x133) $x447)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x661 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x661 $x167)))
 (let (($x540 (not $x194)))
 (let (($x718 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x122 $x718)))
 (let (($x482 (and (not $x135) $x540)))
 (let (($x340 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x636 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x136 (and $x636 $x340)))
 (let (($x502 (and (and (and (and (and (and $x136 $x482) $x620) $x344) $x721) $x80) $x803)))
 (let (($x522 (and (and (and (and $x502 $x75) $x154) $x773) $x173)))
 (let (($x691 (= $x522 true)))
 (let (($x129 (= $x691 true)))
 (let (($x338 (= $x129 true)))
 (let (($x886 (= $x136 true)))
 (let (($x889 (= $x886 true)))
 (let (($x218 (= $x889 true)))
 (let (($x243 (= ?x543 input.dst.llvm-%m2)))
 (let (($x558 (= $x243 true)))
 (let (($x887 (= $x558 true)))
 (let (($x201 (and $x887 $x218)))
 (let (($x761 (and $x201 $x338)))
 (let (($x638 (and $x761 $x575)))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x619 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x480 (_ bv1 32))))
 (=> $x426 (= ?x619 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x670 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (bvuge ?x480 (_ bv1 32))))
 (= $x426 (bvuge ?x652 (_ bv1 32)))))))
 ))
 (let (($x755 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x652 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x480 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (= ?x480 (_ bv0 32))))
 (= $x427 (= ?x652 (_ bv0 32)))))))
 ))
 (let (($x699 (and $x755 $x88)))
 (let (($x883 (and $x699 $x670)))
 (let (($x687 (and $x883 $x48)))
 (let (($x617 (and $x687 $x638)))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (bvuge ?x822 (_ bv1 32))))
 (=> $x596 (= ?x178 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x418 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x596 (bvuge ?x822 (_ bv1 32))))
 (= $x596 (bvuge ?x76 (_ bv1 32)))))))
 ))
 (let (($x165 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x76 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x822 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x396 (= ?x822 (_ bv0 32))))
 (= $x396 (= ?x76 (_ bv0 32)))))))
 ))
 (let (($x604 (and $x165 $x251)))
 (let (($x605 (and $x604 $x418)))
 (let (($x829 (and $x605 $x554)))
 (let (($x577 (and $x829 $x617)))
 (let (($x462 (=> $x577 $x779)))
 (not $x462)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x722 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x525 (bvadd ?x722 input.dst.llvm-%m2)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x525 (_ bv1 32))) (select input.dst.llvm-mem ?x525))))
 (let ((?x688 (concat (select input.dst.llvm-mem (bvadd ?x525 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x525 (_ bv2 32))) ?x65))))
 (let ((?x218 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x883 (_ bv1 32))))
 (=> $x393 (= ?x218 ?x688))))))))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x757 (_ bv1 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x883 (_ bv1 32))))
 (= $x393 $x318))))))
 ))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x506 (= false false)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x883 (_ bv0 32))))
 (=> $x619 $x506)))))
 ))
 (let (($x508 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x757 (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x883 (_ bv0 32))))
 (= $x619 $x346))))))
 ))
 (let (($x624 (and $x508 $x682)))
 (let (($x297 (and $x624 $x132)))
 (let (($x479 (and $x297 $x237)))
 (let (($x565 (= $x479 true)))
 (let (($x659 (= $x565 true)))
 (let ((?x685 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x493 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x585 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x177 (concat ?x585 (concat ?x493 ?x685)))))
 (let (($x381 (= ?x58 input.dst.llvm-%m2)))
 (let (($x94 (= $x381 true)))
 (let (($x671 (= $x94 true)))
 (let (($x728 (= input.dst.llvm-%m2 ?x58)))
 (let ((?x548 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x389 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x491 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x649 (concat ?x491 (concat ?x105 (concat ?x389 ?x548)))))
 (let (($x841 (= input.dst.llvm-%m1 ?x649)))
 (let (($x489 (and $x841 $x728)))
 (let (($x278 (and $x479 $x489)))
 (let ((?x586 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x459 (= (_ bv0 32) ?x586)))
 (let ((?x280 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x171 (= (_ bv0 32) ?x280)))
 (let ((?x406 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x406)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x684 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x644 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x644 $x684)))
 (let (($x610 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x536 (and $x610 $x244)))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x722 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x20 (bvadd ?x722 input.dst.llvm-%m1)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x438 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x119))))
 (let ((?x486 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x461 (_ bv1 32))))
 (=> $x839 (= ?x486 ?x438))))))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x757 (_ bv1 32))))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x461 (_ bv1 32))))
 (= $x839 $x318))))))
 ))
 (let (($x594 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x506 (= false false)))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x461 (_ bv0 32))))
 (=> $x189 $x506)))))
 ))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x757 (_ bv0 32))))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x461 (_ bv0 32))))
 (= $x189 $x346))))))
 ))
 (let (($x484 (and $x401 $x594)))
 (let (($x454 (and $x484 $x358)))
 (let (($x429 (and $x454 $x30)))
 (let (($x329 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x759 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x552 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x355 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x834 (and $x355 $x552)))
 (let (($x837 (not $x834)))
 (let (($x779 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x462 (and $x275 $x779)))
 (let (($x211 (and (not $x462) $x837)))
 (let (($x628 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x464 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (and $x464 $x628)))
 (let (($x638 (not $x575)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x522 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x338 (and $x522 $x129)))
 (let (($x577 (and (not $x338) $x638)))
 (let (($x99 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x805 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x383 (and $x805 $x99)))
 (let (($x302 (and (and (and (and (and (and $x383 $x577) $x211) $x759) $x329) $x429) $x536)))
 (let (($x600 (and (and (and (and $x302 $x161) $x171) $x459) $x278)))
 (let (($x823 (= $x600 true)))
 (let (($x824 (= $x823 true)))
 (let (($x820 (= $x824 true)))
 (let (($x819 (= $x383 true)))
 (let (($x716 (= $x819 true)))
 (let (($x157 (= $x716 true)))
 (let (($x382 (= ?x649 input.dst.llvm-%m1)))
 (let (($x679 (= $x382 true)))
 (let (($x816 (= $x679 true)))
 (let (($x95 (and $x816 $x157)))
 (let (($x246 (and $x95 $x820)))
 (let (($x31 (and $x246 $x671)))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x461 (_ bv1 32))))
 (=> $x839 (= ?x486 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x815 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x461 (_ bv1 32))))
 (= $x839 (bvuge ?x453 (_ bv1 32)))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x461 (_ bv0 32))))
 (= $x189 (= ?x453 (_ bv0 32)))))))
 ))
 (let (($x22 (and $x240 $x594)))
 (let (($x202 (and $x22 $x815)))
 (let (($x141 (and $x202 $x311)))
 (let (($x158 (and $x141 $x31)))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x883 (_ bv1 32))))
 (=> $x393 (= ?x218 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x883 (_ bv1 32))))
 (= $x393 (bvuge ?x425 (_ bv1 32)))))))
 ))
 (let (($x591 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x883 (_ bv0 32))))
 (= $x619 (= ?x425 (_ bv0 32)))))))
 ))
 (let (($x472 (and $x591 $x682)))
 (let (($x887 (and $x472 $x558)))
 (let (($x122 (and $x887 $x62)))
 (let (($x269 (and $x122 $x158)))
 (let (($x528 (=> $x269 $x659)))
 (not $x528)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x722 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x525 (bvadd ?x722 input.dst.llvm-%m2)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x525 (_ bv1 32))) (select input.dst.llvm-mem ?x525))))
 (let ((?x688 (concat (select input.dst.llvm-mem (bvadd ?x525 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x525 (_ bv2 32))) ?x65))))
 (let ((?x218 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x883 (_ bv1 32))))
 (=> $x393 (= ?x218 ?x688))))))))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x757 (_ bv1 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x883 (_ bv1 32))))
 (= $x393 $x318))))))
 ))
 (let (($x682 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x506 (= false false)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x883 (_ bv0 32))))
 (=> $x619 $x506)))))
 ))
 (let (($x508 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x757 (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x883 (_ bv0 32))))
 (= $x619 $x346))))))
 ))
 (let (($x624 (and $x508 $x682)))
 (let (($x297 (and $x624 $x132)))
 (let (($x479 (and $x297 $x237)))
 (let (($x565 (= $x479 true)))
 (let (($x659 (= $x565 true)))
 (let ((?x685 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x493 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x585 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x177 (concat ?x585 (concat ?x493 ?x685)))))
 (let (($x381 (= ?x58 input.dst.llvm-%m2)))
 (let (($x94 (= $x381 true)))
 (let (($x671 (= $x94 true)))
 (let (($x728 (= input.dst.llvm-%m2 ?x58)))
 (let ((?x548 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x389 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x491 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x649 (concat ?x491 (concat ?x105 (concat ?x389 ?x548)))))
 (let (($x841 (= input.dst.llvm-%m1 ?x649)))
 (let (($x489 (and $x841 $x728)))
 (let (($x278 (and $x479 $x489)))
 (let ((?x586 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x459 (= (_ bv0 32) ?x586)))
 (let ((?x280 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x171 (= (_ bv0 32) ?x280)))
 (let ((?x406 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x406)))
 (let ((?x230 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x684 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x230)))
 (let (($x644 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x644 $x684)))
 (let (($x610 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x536 (and $x610 $x244)))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x722 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x20 (bvadd ?x722 input.dst.llvm-%m1)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x438 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x119))))
 (let ((?x486 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x461 (_ bv1 32))))
 (=> $x839 (= ?x486 ?x438))))))))))
 ))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (bvuge ?x757 (_ bv1 32))))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x461 (_ bv1 32))))
 (= $x839 $x318))))))
 ))
 (let (($x594 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x506 (= false false)))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x461 (_ bv0 32))))
 (=> $x189 $x506)))))
 ))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x757 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (= ?x757 (_ bv0 32))))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x461 (_ bv0 32))))
 (= $x189 $x346))))))
 ))
 (let (($x484 (and $x401 $x594)))
 (let (($x454 (and $x484 $x358)))
 (let (($x429 (and $x454 $x30)))
 (let (($x329 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x759 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x552 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x355 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x834 (and $x355 $x552)))
 (let (($x837 (not $x834)))
 (let (($x779 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x462 (and $x275 $x779)))
 (let (($x211 (and (not $x462) $x837)))
 (let (($x628 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x464 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (and $x464 $x628)))
 (let (($x638 (not $x575)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x522 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x338 (and $x522 $x129)))
 (let (($x577 (and (not $x338) $x638)))
 (let (($x99 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x805 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x383 (and $x805 $x99)))
 (let (($x302 (and (and (and (and (and (and $x383 $x577) $x211) $x759) $x329) $x429) $x536)))
 (let (($x600 (and (and (and (and $x302 $x161) $x171) $x459) $x278)))
 (let (($x823 (= $x600 true)))
 (let (($x824 (= $x823 true)))
 (let (($x820 (= $x824 true)))
 (let (($x819 (= $x383 true)))
 (let (($x716 (= $x819 true)))
 (let (($x157 (= $x716 true)))
 (let (($x382 (= ?x649 input.dst.llvm-%m1)))
 (let (($x679 (= $x382 true)))
 (let (($x816 (= $x679 true)))
 (let (($x95 (and $x816 $x157)))
 (let (($x246 (and $x95 $x820)))
 (let (($x31 (and $x246 $x671)))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x461 (_ bv1 32))))
 (=> $x839 (= ?x486 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x815 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x839 (bvuge ?x461 (_ bv1 32))))
 (= $x839 (bvuge ?x453 (_ bv1 32)))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x453 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x461 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x461 (_ bv0 32))))
 (= $x189 (= ?x453 (_ bv0 32)))))))
 ))
 (let (($x22 (and $x240 $x594)))
 (let (($x202 (and $x22 $x815)))
 (let (($x141 (and $x202 $x311)))
 (let (($x158 (and $x141 $x31)))
 (let (($x62 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x883 (_ bv1 32))))
 (=> $x393 (= ?x218 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x558 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x393 (bvuge ?x883 (_ bv1 32))))
 (= $x393 (bvuge ?x425 (_ bv1 32)))))))
 ))
 (let (($x591 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x883 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x619 (= ?x883 (_ bv0 32))))
 (= $x619 (= ?x425 (_ bv0 32)))))))
 ))
 (let (($x472 (and $x591 $x682)))
 (let (($x887 (and $x472 $x558)))
 (let (($x122 (and $x887 $x62)))
 (let (($x269 (and $x122 $x158)))
 (let (($x528 (=> $x269 $x659)))
 (not $x528)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x298 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x182 (bvneg ?x298)))
 (let (($x351 (= ?x182 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x513 (= $x351 true)))
 (let (($x67 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x181 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x646 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x175 (and $x646 $x181)))
 (let (($x692 (and $x175 $x67)))
 (let (($x84 (= $x692 true)))
 (let (($x583 (= $x84 true)))
 (let (($x457 (= $x583 true)))
 (let ((?x655 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x778 (= (_ bv0 32) ?x655)))
 (let ((?x26 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x128 (= (_ bv0 32) ?x26)))
 (let ((?x706 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x784 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x706)))
 (let ((?x372 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x641 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x372)))
 (let (($x630 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x630 $x641)))
 (let (($x680 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x786 (and $x680 $x134)))
 (let (($x607 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x322 (and $x110 $x68)))
 (let (($x90 (not $x322)))
 (let (($x633 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x592 (and $x52 $x633)))
 (let (($x292 (and (not $x592) $x90)))
 (let (($x775 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x341 (and $x147 $x775)))
 (let (($x223 (not $x341)))
 (let (($x770 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x629 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x629 $x770)))
 (let (($x118 (and (not $x217) $x223)))
 (let (($x91 (and (and (and (and (and (and $x118 $x292) $x106) $x607) $x786) $x784) $x128)))
 (let (($x758 (and $x91 $x778)))
 (let (($x335 (= $x758 true)))
 (let (($x437 (= $x335 true)))
 (let (($x326 (= $x437 true)))
 (let (($x750 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x537 (bvadd ?x348 input.dst.llvm-%m2)))
 (let ((?x796 (concat (select input.dst.llvm-mem (bvadd ?x537 (_ bv1 32))) (select input.dst.llvm-mem ?x537))))
 (let ((?x811 (concat (select input.dst.llvm-mem (bvadd ?x537 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x537 (_ bv2 32))) ?x796))))
 (let ((?x157 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (=> $x561 (= ?x157 ?x811))))))))))
 ))
 (let (($x609 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x587 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (= $x561 $x539))))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x690 (= false false)))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x202 (_ bv0 32))))
 (=> $x486 $x690)))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x587 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x202 (_ bv0 32))))
 (= $x486 $x827))))))
 ))
 (let (($x745 (and $x455 $x162)))
 (let (($x328 (and $x745 $x609)))
 (let (($x849 (and $x328 $x750)))
 (let (($x831 (= $x849 true)))
 (let (($x848 (= $x831 true)))
 (let (($x407 (= $x848 true)))
 (let ((?x445 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x127 (= (_ bv0 2) ?x445)))
 (let (($x753 (= $x127 true)))
 (let (($x615 (= $x753 true)))
 (let (($x239 (= $x175 true)))
 (let (($x23 (= $x239 true)))
 (let (($x460 (= $x23 true)))
 (let (($x571 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x604 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem ?x604))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv2 32))) ?x247))))
 (let ((?x586 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (=> $x610 (= ?x586 ?x253))))))))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x587 (_ bv1 32))))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (= $x610 $x539))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x690 (= false false)))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x358 (_ bv0 32))))
 (=> $x454 $x690)))))
 ))
 (let (($x769 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x587 (_ bv0 32))))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x358 (_ bv0 32))))
 (= $x454 $x827))))))
 ))
 (let (($x98 (and $x769 $x12)))
 (let (($x502 (and $x98 $x80)))
 (let (($x642 (and $x502 $x571)))
 (let (($x394 (= $x642 true)))
 (let (($x436 (= $x394 true)))
 (let (($x551 (= $x436 true)))
 (let (($x569 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x604 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x604))))
 (let ((?x557 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv2 32))) ?x53)))
 (let ((?x626 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv3 32))) ?x557)))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x484 (_ bv1 32))))
 (=> $x64 (= ?x209 ?x626)))))))))))
 ))
 (let (($x264 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x587 (_ bv1 32))))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x484 (_ bv1 32))))
 (= $x64 $x539))))))
 ))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x690 (= false false)))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x484 (_ bv0 32))))
 (=> $x318 $x690)))))
 ))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x587 (_ bv0 32))))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x484 (_ bv0 32))))
 (= $x318 $x827))))))
 ))
 (let (($x376 (and $x475 $x434)))
 (let (($x804 (and $x376 $x264)))
 (let (($x268 (and $x804 $x569)))
 (let (($x93 (= $x268 true)))
 (let (($x602 (= $x93 true)))
 (let (($x325 (= $x602 true)))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x604 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x604))))
 (let ((?x557 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv2 32))) ?x53)))
 (let ((?x626 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv3 32))) ?x557)))
 (let ((?x586 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (=> $x610 (= ?x586 ?x626)))))))))))
 ))
 (let (($x340 (and $x502 $x636)))
 (let (($x136 (= $x340 true)))
 (let (($x886 (= $x136 true)))
 (let (($x89 (= $x886 true)))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x604 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem ?x604))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv2 32))) ?x247))))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x484 (_ bv1 32))))
 (=> $x64 (= ?x209 ?x253))))))))))
 ))
 (let (($x172 (and $x804 $x379)))
 (let (($x578 (= $x172 true)))
 (let (($x180 (= $x578 true)))
 (let (($x767 (= $x180 true)))
 (let (($x404 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x537 (bvadd ?x348 input.dst.llvm-%m2)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x537 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x537))))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x537 (_ bv2 32))) ?x262)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x537 (_ bv3 32))) ?x152)))
 (let ((?x157 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (=> $x561 (= ?x157 ?x153)))))))))))
 ))
 (let (($x410 (and $x328 $x404)))
 (let (($x267 (= $x410 true)))
 (let (($x191 (= $x267 true)))
 (let (($x409 (= $x191 true)))
 (let (($x256 (and $x409 $x767)))
 (let (($x568 (and $x256 $x89)))
 (let (($x179 (and $x568 $x325)))
 (let (($x535 (and $x179 $x551)))
 (let (($x287 (and $x535 $x460)))
 (let (($x635 (and $x287 $x615)))
 (let (($x357 (and $x635 $x407)))
 (let (($x746 (and $x357 $x326)))
 (let (($x111 (and $x746 $x457)))
 (let (($x673 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x586 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (=> $x610 (= ?x586 ?x209)))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x484 (_ bv1 32))))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (= $x610 $x64))))))
 ))
 (let (($x722 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x484 (_ bv0 32))))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x358 (_ bv0 32))))
 (= $x454 $x318))))))
 ))
 (let (($x712 (and $x722 $x12)))
 (let (($x684 (and $x712 $x230)))
 (let (($x508 (and $x684 $x673)))
 (let (($x313 (and $x508 $x111)))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (=> $x561 (= ?x157 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x679 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (= $x561 (bvuge ?x366 (_ bv1 32)))))))
 ))
 (let (($x773 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x202 (_ bv0 32))))
 (= $x486 (= ?x366 (_ bv0 32)))))))
 ))
 (let (($x309 (and $x773 $x162)))
 (let (($x816 (and $x309 $x679)))
 (let (($x522 (and $x816 $x173)))
 (let (($x669 (and $x522 $x313)))
 (let (($x187 (=> $x669 $x513)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x298 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x182 (bvneg ?x298)))
 (let (($x351 (= ?x182 input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let (($x513 (= $x351 true)))
 (let (($x67 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x181 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x646 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x175 (and $x646 $x181)))
 (let (($x692 (and $x175 $x67)))
 (let (($x84 (= $x692 true)))
 (let (($x583 (= $x84 true)))
 (let (($x457 (= $x583 true)))
 (let ((?x655 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x778 (= (_ bv0 32) ?x655)))
 (let ((?x26 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x128 (= (_ bv0 32) ?x26)))
 (let ((?x706 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x784 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x706)))
 (let ((?x372 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x641 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x372)))
 (let (($x630 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x630 $x641)))
 (let (($x680 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x786 (and $x680 $x134)))
 (let (($x607 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x322 (and $x110 $x68)))
 (let (($x90 (not $x322)))
 (let (($x633 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x592 (and $x52 $x633)))
 (let (($x292 (and (not $x592) $x90)))
 (let (($x775 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x341 (and $x147 $x775)))
 (let (($x223 (not $x341)))
 (let (($x770 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x629 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x629 $x770)))
 (let (($x118 (and (not $x217) $x223)))
 (let (($x91 (and (and (and (and (and (and $x118 $x292) $x106) $x607) $x786) $x784) $x128)))
 (let (($x758 (and $x91 $x778)))
 (let (($x335 (= $x758 true)))
 (let (($x437 (= $x335 true)))
 (let (($x326 (= $x437 true)))
 (let (($x750 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x537 (bvadd ?x348 input.dst.llvm-%m2)))
 (let ((?x796 (concat (select input.dst.llvm-mem (bvadd ?x537 (_ bv1 32))) (select input.dst.llvm-mem ?x537))))
 (let ((?x811 (concat (select input.dst.llvm-mem (bvadd ?x537 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x537 (_ bv2 32))) ?x796))))
 (let ((?x157 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (=> $x561 (= ?x157 ?x811))))))))))
 ))
 (let (($x609 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x587 (_ bv1 32))))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (= $x561 $x539))))))
 ))
 (let (($x162 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x690 (= false false)))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x202 (_ bv0 32))))
 (=> $x486 $x690)))))
 ))
 (let (($x455 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x587 (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x202 (_ bv0 32))))
 (= $x486 $x827))))))
 ))
 (let (($x745 (and $x455 $x162)))
 (let (($x328 (and $x745 $x609)))
 (let (($x849 (and $x328 $x750)))
 (let (($x831 (= $x849 true)))
 (let (($x848 (= $x831 true)))
 (let (($x407 (= $x848 true)))
 (let ((?x445 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x127 (= (_ bv0 2) ?x445)))
 (let (($x753 (= $x127 true)))
 (let (($x615 (= $x753 true)))
 (let (($x239 (= $x175 true)))
 (let (($x23 (= $x239 true)))
 (let (($x460 (= $x23 true)))
 (let (($x571 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x604 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem ?x604))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv2 32))) ?x247))))
 (let ((?x586 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (=> $x610 (= ?x586 ?x253))))))))))
 ))
 (let (($x80 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x587 (_ bv1 32))))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (= $x610 $x539))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x690 (= false false)))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x358 (_ bv0 32))))
 (=> $x454 $x690)))))
 ))
 (let (($x769 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x587 (_ bv0 32))))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x358 (_ bv0 32))))
 (= $x454 $x827))))))
 ))
 (let (($x98 (and $x769 $x12)))
 (let (($x502 (and $x98 $x80)))
 (let (($x642 (and $x502 $x571)))
 (let (($x394 (= $x642 true)))
 (let (($x436 (= $x394 true)))
 (let (($x551 (= $x436 true)))
 (let (($x569 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x604 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x604))))
 (let ((?x557 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv2 32))) ?x53)))
 (let ((?x626 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv3 32))) ?x557)))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x484 (_ bv1 32))))
 (=> $x64 (= ?x209 ?x626)))))))))))
 ))
 (let (($x264 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x539 (bvuge ?x587 (_ bv1 32))))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x484 (_ bv1 32))))
 (= $x64 $x539))))))
 ))
 (let (($x434 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x690 (= false false)))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x484 (_ bv0 32))))
 (=> $x318 $x690)))))
 ))
 (let (($x475 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x587 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x827 (= ?x587 (_ bv0 32))))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x484 (_ bv0 32))))
 (= $x318 $x827))))))
 ))
 (let (($x376 (and $x475 $x434)))
 (let (($x804 (and $x376 $x264)))
 (let (($x268 (and $x804 $x569)))
 (let (($x93 (= $x268 true)))
 (let (($x602 (= $x93 true)))
 (let (($x325 (= $x602 true)))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x604 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x604))))
 (let ((?x557 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv2 32))) ?x53)))
 (let ((?x626 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x604 (_ bv3 32))) ?x557)))
 (let ((?x586 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (=> $x610 (= ?x586 ?x626)))))))))))
 ))
 (let (($x340 (and $x502 $x636)))
 (let (($x136 (= $x340 true)))
 (let (($x886 (= $x136 true)))
 (let (($x89 (= $x886 true)))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x604 (bvadd ?x348 input.dst.llvm-%m1)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem ?x604))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv2 32))) ?x247))))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x484 (_ bv1 32))))
 (=> $x64 (= ?x209 ?x253))))))))))
 ))
 (let (($x172 (and $x804 $x379)))
 (let (($x578 (= $x172 true)))
 (let (($x180 (= $x578 true)))
 (let (($x767 (= $x180 true)))
 (let (($x404 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x348 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x537 (bvadd ?x348 input.dst.llvm-%m2)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x537 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x537))))
 (let ((?x152 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x537 (_ bv2 32))) ?x262)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x537 (_ bv3 32))) ?x152)))
 (let ((?x157 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (=> $x561 (= ?x157 ?x153)))))))))))
 ))
 (let (($x410 (and $x328 $x404)))
 (let (($x267 (= $x410 true)))
 (let (($x191 (= $x267 true)))
 (let (($x409 (= $x191 true)))
 (let (($x256 (and $x409 $x767)))
 (let (($x568 (and $x256 $x89)))
 (let (($x179 (and $x568 $x325)))
 (let (($x535 (and $x179 $x551)))
 (let (($x287 (and $x535 $x460)))
 (let (($x635 (and $x287 $x615)))
 (let (($x357 (and $x635 $x407)))
 (let (($x746 (and $x357 $x326)))
 (let (($x111 (and $x746 $x457)))
 (let (($x673 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x586 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (=> $x610 (= ?x586 ?x209)))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x484 (_ bv1 32))))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x610 (bvuge ?x358 (_ bv1 32))))
 (= $x610 $x64))))))
 ))
 (let (($x722 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x484 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x318 (= ?x484 (_ bv0 32))))
 (let ((?x358 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x454 (= ?x358 (_ bv0 32))))
 (= $x454 $x318))))))
 ))
 (let (($x712 (and $x722 $x12)))
 (let (($x684 (and $x712 $x230)))
 (let (($x508 (and $x684 $x673)))
 (let (($x313 (and $x508 $x111)))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (=> $x561 (= ?x157 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x679 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (bvuge ?x202 (_ bv1 32))))
 (= $x561 (bvuge ?x366 (_ bv1 32)))))))
 ))
 (let (($x773 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x202 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (= ?x202 (_ bv0 32))))
 (= $x486 (= ?x366 (_ bv0 32)))))))
 ))
 (let (($x309 (and $x773 $x162)))
 (let (($x816 (and $x309 $x679)))
 (let (($x522 (and $x816 $x173)))
 (let (($x669 (and $x522 $x313)))
 (let (($x187 (=> $x669 $x513)))
 (not $x187)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x829 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x427 (bvneg ?x829)))
 (let (($x700 (= ?x427 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x755 (= $x700 true)))
 (let (($x490 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x461 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x189 (and $x122 $x461)))
 (let (($x826 (and $x189 $x490)))
 (let (($x480 (= $x826 true)))
 (let (($x220 (= $x480 true)))
 (let (($x554 (= $x220 true)))
 (let ((?x510 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x85 (= (_ bv0 32) ?x510)))
 (let ((?x634 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x451 (= (_ bv0 32) ?x634)))
 (let ((?x233 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x233)))
 (let ((?x651 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x651)))
 (let (($x523 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (and $x523 $x86)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x370 $x316)))
 (let (($x613 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x842 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x251 (and $x842 $x310)))
 (let (($x5 (not $x251)))
 (let (($x432 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x545 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x703 (and $x545 $x432)))
 (let (($x458 (and (not $x703) $x5)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x428 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x428 $x210)))
 (let (($x595 (not $x221)))
 (let (($x450 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x891 (and $x195 $x450)))
 (let (($x483 (and (not $x891) $x595)))
 (let (($x41 (and (and (and (and (and (and $x483 $x458) $x301) $x613) $x290) $x384) $x451)))
 (let (($x533 (and $x41 $x85)))
 (let (($x501 (= $x533 true)))
 (let (($x828 (= $x501 true)))
 (let (($x608 (= $x828 true)))
 (let (($x884 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x558 (bvadd ?x243 input.dst.llvm-%m2)))
 (let ((?x790 (concat (select input.dst.llvm-mem (bvadd ?x558 (_ bv1 32))) (select input.dst.llvm-mem ?x558))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x558 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x558 (_ bv2 32))) ?x790))))
 (let ((?x262 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (=> $x112 (= ?x262 ?x418))))))))))
 ))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x326 (_ bv1 32))))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (= $x112 $x298))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x296 (= false false)))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x586 (= ?x684 (_ bv0 32))))
 (=> $x586 $x296)))))
 ))
 (let (($x27 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (= ?x326 (_ bv0 32))))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x586 (= ?x684 (_ bv0 32))))
 (= $x586 $x746))))))
 ))
 (let (($x67 (and $x27 $x71)))
 (let (($x513 (and $x67 $x351)))
 (let (($x392 (and $x513 $x884)))
 (let (($x13 (= $x392 true)))
 (let (($x421 (= $x13 true)))
 (let (($x488 (= $x421 true)))
 (let ((?x105 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x288 (= (_ bv0 2) ?x105)))
 (let (($x389 (= $x288 true)))
 (let (($x414 (= $x389 true)))
 (let (($x708 (= $x189 true)))
 (let (($x240 (= $x708 true)))
 (let (($x276 (= $x240 true)))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x19 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x20))))
 (let ((?x535 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (=> $x569 (= ?x535 ?x806))))))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x326 (_ bv1 32))))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (= $x569 $x298))))))
 ))
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x296 (= false false)))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x361 (_ bv0 32))))
 (=> $x80 $x296)))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (= ?x326 (_ bv0 32))))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x361 (_ bv0 32))))
 (= $x80 $x746))))))
 ))
 (let (($x453 (and $x257 $x59)))
 (let (($x499 (and $x453 $x69)))
 (let (($x280 (and $x499 $x169)))
 (let (($x171 (= $x280 true)))
 (let (($x698 (= $x171 true)))
 (let (($x218 (= $x698 true)))
 (let (($x346 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x19 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x689 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x19))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv2 32))) ?x689)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv3 32))) ?x81)))
 (let ((?x551 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x721 (_ bv1 32))))
 (=> $x405 (= ?x551 ?x385)))))))))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x326 (_ bv1 32))))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x721 (_ bv1 32))))
 (= $x405 $x298))))))
 ))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x296 (= false false)))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x721 (_ bv0 32))))
 (=> $x769 $x296)))))
 ))
 (let (($x779 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (= ?x326 (_ bv0 32))))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x721 (_ bv0 32))))
 (= $x769 $x746))))))
 ))
 (let (($x637 (and $x779 $x424)))
 (let (($x599 (and $x637 $x590)))
 (let (($x419 (and $x599 $x346)))
 (let (($x119 (= $x419 true)))
 (let (($x21 (= $x119 true)))
 (let (($x438 (= $x21 true)))
 (let (($x834 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x19 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x689 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x19))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv2 32))) ?x689)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv3 32))) ?x81)))
 (let ((?x535 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (=> $x569 (= ?x535 ?x385)))))))))))
 ))
 (let (($x837 (and $x499 $x834)))
 (let (($x211 (= $x837 true)))
 (let (($x146 (= $x211 true)))
 (let (($x759 (= $x146 true)))
 (let (($x648 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x19 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x20))))
 (let ((?x551 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x721 (_ bv1 32))))
 (=> $x405 (= ?x551 ?x806))))))))))
 ))
 (let (($x281 (and $x599 $x648)))
 (let (($x284 (= $x281 true)))
 (let (($x709 (= $x284 true)))
 (let (($x487 (= $x709 true)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x558 (bvadd ?x243 input.dst.llvm-%m2)))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x558 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x558))))
 (let ((?x742 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x558 (_ bv2 32))) ?x297)))
 (let ((?x741 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x558 (_ bv3 32))) ?x742)))
 (let ((?x262 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (=> $x112 (= ?x262 ?x741)))))))))))
 ))
 (let (($x534 (and $x513 $x237)))
 (let (($x308 (= $x534 true)))
 (let (($x603 (= $x308 true)))
 (let (($x219 (= $x603 true)))
 (let (($x244 (and $x219 $x487)))
 (let (($x768 (and $x244 $x759)))
 (let (($x676 (and $x768 $x438)))
 (let (($x889 (and $x676 $x218)))
 (let (($x594 (and $x889 $x276)))
 (let (($x185 (and $x594 $x414)))
 (let (($x573 (and $x185 $x488)))
 (let (($x66 (and $x573 $x608)))
 (let (($x541 (and $x66 $x554)))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x535 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (=> $x569 (= ?x535 ?x551)))))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x721 (_ bv1 32))))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (= $x569 $x405))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x721 (_ bv0 32))))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x361 (_ bv0 32))))
 (= $x80 $x769))))))
 ))
 (let (($x53 (and $x580 $x59)))
 (let (($x602 (and $x53 $x93)))
 (let (($x717 (and $x602 $x646)))
 (let (($x178 (and $x717 $x541)))
 (let (($x830 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (=> $x112 (= ?x262 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (= $x112 (bvuge ?x64 (_ bv1 32)))))))
 ))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x586 (= ?x684 (_ bv0 32))))
 (= $x586 (= ?x64 (_ bv0 32)))))))
 ))
 (let (($x132 (and $x459 $x71)))
 (let (($x537 (and $x132 $x321)))
 (let (($x369 (and $x537 $x830)))
 (let (($x154 (and $x369 $x178)))
 (let (($x403 (=> $x154 $x755)))
 (not $x403)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L2%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(assert
 (let ((?x829 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L2%1%fcallEnd)))
 (let ((?x427 (bvneg ?x829)))
 (let (($x700 (= ?x427 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x755 (= $x700 true)))
 (let (($x490 (= input.spec-%tmpvar-24.L2%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x461 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x189 (and $x122 $x461)))
 (let (($x826 (and $x189 $x490)))
 (let (($x480 (= $x826 true)))
 (let (($x220 (= $x480 true)))
 (let (($x554 (= $x220 true)))
 (let ((?x510 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x85 (= (_ bv0 32) ?x510)))
 (let ((?x634 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x451 (= (_ bv0 32) ?x634)))
 (let ((?x233 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x233)))
 (let ((?x651 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x651)))
 (let (($x523 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x316 (and $x523 $x86)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x290 (and $x370 $x316)))
 (let (($x613 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x842 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x251 (and $x842 $x310)))
 (let (($x5 (not $x251)))
 (let (($x432 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x545 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x703 (and $x545 $x432)))
 (let (($x458 (and (not $x703) $x5)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x428 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x428 $x210)))
 (let (($x595 (not $x221)))
 (let (($x450 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x891 (and $x195 $x450)))
 (let (($x483 (and (not $x891) $x595)))
 (let (($x41 (and (and (and (and (and (and $x483 $x458) $x301) $x613) $x290) $x384) $x451)))
 (let (($x533 (and $x41 $x85)))
 (let (($x501 (= $x533 true)))
 (let (($x828 (= $x501 true)))
 (let (($x608 (= $x828 true)))
 (let (($x884 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x558 (bvadd ?x243 input.dst.llvm-%m2)))
 (let ((?x790 (concat (select input.dst.llvm-mem (bvadd ?x558 (_ bv1 32))) (select input.dst.llvm-mem ?x558))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd ?x558 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x558 (_ bv2 32))) ?x790))))
 (let ((?x262 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (=> $x112 (= ?x262 ?x418))))))))))
 ))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x326 (_ bv1 32))))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (= $x112 $x298))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x296 (= false false)))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x586 (= ?x684 (_ bv0 32))))
 (=> $x586 $x296)))))
 ))
 (let (($x27 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (= ?x326 (_ bv0 32))))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x586 (= ?x684 (_ bv0 32))))
 (= $x586 $x746))))))
 ))
 (let (($x67 (and $x27 $x71)))
 (let (($x513 (and $x67 $x351)))
 (let (($x392 (and $x513 $x884)))
 (let (($x13 (= $x392 true)))
 (let (($x421 (= $x13 true)))
 (let (($x488 (= $x421 true)))
 (let ((?x105 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x288 (= (_ bv0 2) ?x105)))
 (let (($x389 (= $x288 true)))
 (let (($x414 (= $x389 true)))
 (let (($x708 (= $x189 true)))
 (let (($x240 (= $x708 true)))
 (let (($x276 (= $x240 true)))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x19 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x20))))
 (let ((?x535 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (=> $x569 (= ?x535 ?x806))))))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x326 (_ bv1 32))))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (= $x569 $x298))))))
 ))
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x296 (= false false)))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x361 (_ bv0 32))))
 (=> $x80 $x296)))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (= ?x326 (_ bv0 32))))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x361 (_ bv0 32))))
 (= $x80 $x746))))))
 ))
 (let (($x453 (and $x257 $x59)))
 (let (($x499 (and $x453 $x69)))
 (let (($x280 (and $x499 $x169)))
 (let (($x171 (= $x280 true)))
 (let (($x698 (= $x171 true)))
 (let (($x218 (= $x698 true)))
 (let (($x346 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x19 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x689 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x19))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv2 32))) ?x689)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv3 32))) ?x81)))
 (let ((?x551 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x721 (_ bv1 32))))
 (=> $x405 (= ?x551 ?x385)))))))))))
 ))
 (let (($x590 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x326 (_ bv1 32))))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x721 (_ bv1 32))))
 (= $x405 $x298))))))
 ))
 (let (($x424 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x296 (= false false)))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x721 (_ bv0 32))))
 (=> $x769 $x296)))))
 ))
 (let (($x779 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let (($x746 (= ?x326 (_ bv0 32))))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x721 (_ bv0 32))))
 (= $x769 $x746))))))
 ))
 (let (($x637 (and $x779 $x424)))
 (let (($x599 (and $x637 $x590)))
 (let (($x419 (and $x599 $x346)))
 (let (($x119 (= $x419 true)))
 (let (($x21 (= $x119 true)))
 (let (($x438 (= $x21 true)))
 (let (($x834 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x19 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x689 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x19))))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv2 32))) ?x689)))
 (let ((?x385 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x19 (_ bv3 32))) ?x81)))
 (let ((?x535 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (=> $x569 (= ?x535 ?x385)))))))))))
 ))
 (let (($x837 (and $x499 $x834)))
 (let (($x211 (= $x837 true)))
 (let (($x146 (= $x211 true)))
 (let (($x759 (= $x146 true)))
 (let (($x648 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x19 (bvadd ?x243 input.dst.llvm-%m1)))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x20))))
 (let ((?x551 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x721 (_ bv1 32))))
 (=> $x405 (= ?x551 ?x806))))))))))
 ))
 (let (($x281 (and $x599 $x648)))
 (let (($x284 (= $x281 true)))
 (let (($x709 (= $x284 true)))
 (let (($x487 (= $x709 true)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x243 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x558 (bvadd ?x243 input.dst.llvm-%m2)))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x558 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x558))))
 (let ((?x742 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x558 (_ bv2 32))) ?x297)))
 (let ((?x741 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x558 (_ bv3 32))) ?x742)))
 (let ((?x262 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (=> $x112 (= ?x262 ?x741)))))))))))
 ))
 (let (($x534 (and $x513 $x237)))
 (let (($x308 (= $x534 true)))
 (let (($x603 (= $x308 true)))
 (let (($x219 (= $x603 true)))
 (let (($x244 (and $x219 $x487)))
 (let (($x768 (and $x244 $x759)))
 (let (($x676 (and $x768 $x438)))
 (let (($x889 (and $x676 $x218)))
 (let (($x594 (and $x889 $x276)))
 (let (($x185 (and $x594 $x414)))
 (let (($x573 (and $x185 $x488)))
 (let (($x66 (and $x573 $x608)))
 (let (($x541 (and $x66 $x554)))
 (let (($x646 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x551 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1 Lambda1Var)))
 (let ((?x535 (input.spec-%var-m1-1.1.1 Lambda1Var)))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (=> $x569 (= ?x535 ?x551)))))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x405 (bvuge ?x721 (_ bv1 32))))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x569 (bvuge ?x361 (_ bv1 32))))
 (= $x569 $x405))))))
 ))
 (let (($x580 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x721 (ite (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (= ?x721 (_ bv0 32))))
 (let ((?x361 (ite (input.spec-%var-m1-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x80 (= ?x361 (_ bv0 32))))
 (= $x80 $x769))))))
 ))
 (let (($x53 (and $x580 $x59)))
 (let (($x602 (and $x53 $x93)))
 (let (($x717 (and $x602 $x646)))
 (let (($x178 (and $x717 $x541)))
 (let (($x830 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (input.spec-%var-m2-1.1.1 Lambda1Var)))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (=> $x112 (= ?x262 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1 Lambda1Var)))))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x112 (bvuge ?x684 (_ bv1 32))))
 (= $x112 (bvuge ?x64 (_ bv1 32)))))))
 ))
 (let (($x459 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x64 (ite (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let ((?x684 (ite (input.spec-%var-m2-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x586 (= ?x684 (_ bv0 32))))
 (= $x586 (= ?x64 (_ bv0 32)))))))
 ))
 (let (($x132 (and $x459 $x71)))
 (let (($x537 (and $x132 $x321)))
 (let (($x369 (and $x537 $x830)))
 (let (($x154 (and $x369 $x178)))
 (let (($x403 (=> $x154 $x755)))
 (not $x403)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x326 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= ?x67 (_ bv0 32))))
 (let ((?x127 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x405 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x321 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x405)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x112 $x321)))
 (let (($x287 (and $x71 $x182)))
 (and $x287 $x326)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x326 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x182 (= ?x67 (_ bv0 32))))
 (let ((?x127 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x405 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x321 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x405)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x112 $x321)))
 (let (($x287 (and $x71 $x182)))
 (and $x287 $x326)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x390 (= true false)))
 (let (($x82 (= $x390 true)))
 (let ((?x327 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x429 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x839 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x412 (concat ?x839 (concat ?x429 (concat ?x293 ?x327)))))
 (let (($x690 (= ?x412 input.dst.llvm-%m)))
 (let (($x141 (= $x690 true)))
 (let (($x162 (= $x141 true)))
 (let ((?x124 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x743 (= (_ bv0 32) ?x124)))
 (let ((?x325 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x325)))
 (let (($x509 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x430 (and $x509 $x179)))
 (let (($x441 (and $x430 $x743)))
 (let (($x669 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x662 (and $x669 $x441)))
 (let (($x159 (= $x662 true)))
 (let (($x352 (= $x159 true)))
 (let (($x87 (= $x352 true)))
 (let (($x626 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x557 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x888 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x557 $x626)))))))
 (let (($x128 (= $x888 true)))
 (let (($x91 (= $x128 true)))
 (let (($x74 (= $x91 true)))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x782 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x464 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x782))))
 (let ((?x333 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x333 (_ bv1 32))))
 (=> $x285 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x464))))))))
 ))
 (let (($x661 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x333 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x333 (_ bv1 32))))
 (= $x285 (bvuge ?x94 (_ bv1 32)))))))
 ))
 (let (($x795 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x558 (= false false)))
 (let ((?x333 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x333 (_ bv0 32))))
 (=> $x391 $x558)))))
 ))
 (let (($x109 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x333 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x333 (_ bv0 32))))
 (= $x391 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x193 (and $x109 $x795)))
 (let (($x194 (and $x193 $x661)))
 (let (($x260 (and $x194 $x577)))
 (let (($x792 (= $x260 true)))
 (let (($x379 (= $x792 true)))
 (let (($x26 (= $x379 true)))
 (let ((?x310 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x467 (bvugt ?x310 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x310 (_ bv3 32)))))
 (let (($x651 (=> (bvule ?x310 (bvsub (bvadd ?x310 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x301 $x467)))))))
 (let (($x251 (= $x651 true)))
 (let (($x5 (= $x251 true)))
 (let (($x86 (= $x5 true)))
 (let ((?x374 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x428 (bvugt ?x374 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x733 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x374 (_ bv3 32)))))
 (let (($x432 (=> (bvule ?x374 (bvsub (bvadd ?x374 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x733 $x428)))))))
 (let (($x195 (= $x432 true)))
 (let (($x291 (= $x195 true)))
 (let (($x703 (= $x291 true)))
 (let ((?x389 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x605 (bvugt ?x389 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x418 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x389 (_ bv3 32)))))
 (let (($x488 (=> (bvule ?x389 (bvsub (bvadd ?x389 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x418 $x605)))))))
 (let (($x185 (= $x488 true)))
 (let (($x57 (= $x185 true)))
 (let (($x573 (= $x57 true)))
 (let (($x29 (and $x573 $x703)))
 (let (($x316 (and $x29 $x86)))
 (let (($x347 (and $x316 $x26)))
 (let (($x614 (and $x347 $x74)))
 (let (($x35 (and $x614 $x87)))
 (let (($x309 (and $x35 $x162)))
 (let ((?x348 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x240 (= ?x348 input.spec-%tmpvar-1.L1%3%d.2)))
 (let ((?x169 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x461 (bvuge ?x169 (_ bv1 32))))
 (let (($x276 (=> $x461 $x240)))
 (let (($x529 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x189 (= $x461 $x529)))
 (let (($x558 (= false false)))
 (let (($x280 (= ?x169 (_ bv0 32))))
 (let (($x698 (=> $x280 $x558)))
 (let (($x302 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x171 (= $x280 $x302)))
 (let (($x218 (and $x171 $x698)))
 (let (($x708 (and $x218 $x189)))
 (let (($x594 (and $x708 $x276)))
 (let (($x561 (and $x594 $x309)))
 (let ((?x586 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x768 (= ?x586 input.spec-%tmpvar-5.L1%12%d.2)))
 (let ((?x114 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x114 (_ bv1 32))))
 (let (($x579 (=> $x211 $x768)))
 (let (($x837 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x146 (= $x211 $x837)))
 (let (($x530 (= ?x114 (_ bv0 32))))
 (let (($x689 (=> $x530 $x558)))
 (let (($x499 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x55 (= $x530 $x499)))
 (let (($x81 (and $x55 $x689)))
 (let (($x759 (and $x81 $x146)))
 (let (($x757 (and $x759 $x579)))
 (let (($x324 (and $x757 $x561)))
 (let ((?x684 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x284 (= ?x684 input.spec-%tmpvar-9.L1%21%d.2)))
 (let ((?x802 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x720 (bvuge ?x802 (_ bv1 32))))
 (let (($x709 (=> $x720 $x284)))
 (let (($x803 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x648 (= $x720 $x803)))
 (let (($x442 (= ?x802 (_ bv0 32))))
 (let (($x337 (=> $x442 $x558)))
 (let (($x19 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x144 (= $x442 $x19)))
 (let (($x747 (and $x144 $x337)))
 (let (($x281 (and $x747 $x648)))
 (let (($x487 (and $x281 $x709)))
 (let (($x600 (and $x487 $x324)))
 (let ((?x508 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x779 (= ?x508 input.spec-%tmpvar-13.L1%30%d.2)))
 (let ((?x850 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x603 (bvuge ?x850 (_ bv1 32))))
 (let (($x645 (=> $x603 $x779)))
 (let (($x308 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x219 (= $x603 $x308)))
 (let (($x513 (= ?x850 (_ bv0 32))))
 (let (($x742 (=> $x513 $x558)))
 (let (($x243 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x796 (= $x513 $x243)))
 (let (($x741 (and $x796 $x742)))
 (let (($x275 (and $x741 $x219)))
 (let (($x424 (and $x275 $x645)))
 (let (($x823 (and $x424 $x600)))
 (let (($x717 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x489 (and $x717 $x823)))
 (let (($x572 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x246 (and $x572 $x489)))
 (let (($x551 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x671 (and $x551 $x246)))
 (let (($x602 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x526 (and $x602 $x671)))
 (let (($x580 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x567 (and $x580 $x526)))
 (let (($x40 (and $x558 $x567)))
 (let (($x721 (= ?x348 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x48 (and $x721 $x40)))
 (let (($x712 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x843 (and $x712 $x48)))
 (let (($x222 (and $x558 $x843)))
 (let (($x268 (= ?x586 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x170 (and $x268 $x222)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x320 (and $x326 $x170)))
 (let (($x367 (and $x558 $x320)))
 (let (($x297 (= ?x684 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x627 (and $x297 $x367)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x652 (and $x132 $x627)))
 (let (($x207 (and $x558 $x652)))
 (let (($x459 (= ?x508 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x783 (and $x459 $x207)))
 (let (($x138 (=> $x783 $x82)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let (($x390 (= true false)))
 (let (($x82 (= $x390 true)))
 (let ((?x327 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x429 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x839 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x412 (concat ?x839 (concat ?x429 (concat ?x293 ?x327)))))
 (let (($x690 (= ?x412 input.dst.llvm-%m)))
 (let (($x141 (= $x690 true)))
 (let (($x162 (= $x141 true)))
 (let ((?x124 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x743 (= (_ bv0 32) ?x124)))
 (let ((?x325 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x325)))
 (let (($x509 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x430 (and $x509 $x179)))
 (let (($x441 (and $x430 $x743)))
 (let (($x669 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x662 (and $x669 $x441)))
 (let (($x159 (= $x662 true)))
 (let (($x352 (= $x159 true)))
 (let (($x87 (= $x352 true)))
 (let (($x626 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x557 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x888 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x557 $x626)))))))
 (let (($x128 (= $x888 true)))
 (let (($x91 (= $x128 true)))
 (let (($x74 (= $x91 true)))
 (let (($x577 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x232 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x782 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x464 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x782))))
 (let ((?x333 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x333 (_ bv1 32))))
 (=> $x285 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x464))))))))
 ))
 (let (($x661 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x333 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x333 (_ bv1 32))))
 (= $x285 (bvuge ?x94 (_ bv1 32)))))))
 ))
 (let (($x795 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x558 (= false false)))
 (let ((?x333 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x333 (_ bv0 32))))
 (=> $x391 $x558)))))
 ))
 (let (($x109 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x333 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x391 (= ?x333 (_ bv0 32))))
 (= $x391 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x193 (and $x109 $x795)))
 (let (($x194 (and $x193 $x661)))
 (let (($x260 (and $x194 $x577)))
 (let (($x792 (= $x260 true)))
 (let (($x379 (= $x792 true)))
 (let (($x26 (= $x379 true)))
 (let ((?x310 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x467 (bvugt ?x310 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x310 (_ bv3 32)))))
 (let (($x651 (=> (bvule ?x310 (bvsub (bvadd ?x310 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x301 $x467)))))))
 (let (($x251 (= $x651 true)))
 (let (($x5 (= $x251 true)))
 (let (($x86 (= $x5 true)))
 (let ((?x374 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x428 (bvugt ?x374 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x733 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x374 (_ bv3 32)))))
 (let (($x432 (=> (bvule ?x374 (bvsub (bvadd ?x374 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x733 $x428)))))))
 (let (($x195 (= $x432 true)))
 (let (($x291 (= $x195 true)))
 (let (($x703 (= $x291 true)))
 (let ((?x389 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x605 (bvugt ?x389 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x418 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x389 (_ bv3 32)))))
 (let (($x488 (=> (bvule ?x389 (bvsub (bvadd ?x389 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x418 $x605)))))))
 (let (($x185 (= $x488 true)))
 (let (($x57 (= $x185 true)))
 (let (($x573 (= $x57 true)))
 (let (($x29 (and $x573 $x703)))
 (let (($x316 (and $x29 $x86)))
 (let (($x347 (and $x316 $x26)))
 (let (($x614 (and $x347 $x74)))
 (let (($x35 (and $x614 $x87)))
 (let (($x309 (and $x35 $x162)))
 (let ((?x348 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x240 (= ?x348 input.spec-%tmpvar-1.L1%3%d.2)))
 (let ((?x169 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x461 (bvuge ?x169 (_ bv1 32))))
 (let (($x276 (=> $x461 $x240)))
 (let (($x529 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x189 (= $x461 $x529)))
 (let (($x558 (= false false)))
 (let (($x280 (= ?x169 (_ bv0 32))))
 (let (($x698 (=> $x280 $x558)))
 (let (($x302 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x171 (= $x280 $x302)))
 (let (($x218 (and $x171 $x698)))
 (let (($x708 (and $x218 $x189)))
 (let (($x594 (and $x708 $x276)))
 (let (($x561 (and $x594 $x309)))
 (let ((?x586 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x768 (= ?x586 input.spec-%tmpvar-5.L1%12%d.2)))
 (let ((?x114 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x114 (_ bv1 32))))
 (let (($x579 (=> $x211 $x768)))
 (let (($x837 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x146 (= $x211 $x837)))
 (let (($x530 (= ?x114 (_ bv0 32))))
 (let (($x689 (=> $x530 $x558)))
 (let (($x499 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x55 (= $x530 $x499)))
 (let (($x81 (and $x55 $x689)))
 (let (($x759 (and $x81 $x146)))
 (let (($x757 (and $x759 $x579)))
 (let (($x324 (and $x757 $x561)))
 (let ((?x684 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x284 (= ?x684 input.spec-%tmpvar-9.L1%21%d.2)))
 (let ((?x802 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x720 (bvuge ?x802 (_ bv1 32))))
 (let (($x709 (=> $x720 $x284)))
 (let (($x803 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x648 (= $x720 $x803)))
 (let (($x442 (= ?x802 (_ bv0 32))))
 (let (($x337 (=> $x442 $x558)))
 (let (($x19 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x144 (= $x442 $x19)))
 (let (($x747 (and $x144 $x337)))
 (let (($x281 (and $x747 $x648)))
 (let (($x487 (and $x281 $x709)))
 (let (($x600 (and $x487 $x324)))
 (let ((?x508 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x779 (= ?x508 input.spec-%tmpvar-13.L1%30%d.2)))
 (let ((?x850 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x603 (bvuge ?x850 (_ bv1 32))))
 (let (($x645 (=> $x603 $x779)))
 (let (($x308 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x219 (= $x603 $x308)))
 (let (($x513 (= ?x850 (_ bv0 32))))
 (let (($x742 (=> $x513 $x558)))
 (let (($x243 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x796 (= $x513 $x243)))
 (let (($x741 (and $x796 $x742)))
 (let (($x275 (and $x741 $x219)))
 (let (($x424 (and $x275 $x645)))
 (let (($x823 (and $x424 $x600)))
 (let (($x717 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x489 (and $x717 $x823)))
 (let (($x572 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x246 (and $x572 $x489)))
 (let (($x551 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x671 (and $x551 $x246)))
 (let (($x602 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x526 (and $x602 $x671)))
 (let (($x580 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x567 (and $x580 $x526)))
 (let (($x40 (and $x558 $x567)))
 (let (($x721 (= ?x348 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x48 (and $x721 $x40)))
 (let (($x712 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x843 (and $x712 $x48)))
 (let (($x222 (and $x558 $x843)))
 (let (($x268 (= ?x586 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x170 (and $x268 $x222)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x320 (and $x326 $x170)))
 (let (($x367 (and $x558 $x320)))
 (let (($x297 (= ?x684 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x627 (and $x297 $x367)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x652 (and $x132 $x627)))
 (let (($x207 (and $x558 $x652)))
 (let (($x459 (= ?x508 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x783 (and $x459 $x207)))
 (let (($x138 (=> $x783 $x82)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32)
    #x02000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32)
    #x00080000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (or (= x!0 #x00000003)
        (= x!0 #x00000002)
        (= x!0 #x00000001)
        (= x!0 #x00000000)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000000) #x20
      #x00))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x00000003)
                                     (k!4 #x00000002)
                                     (k!4 #x00000001)
                                     (k!4 #x00000000)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x00000003)
                                     (k!4 #x00000002)
                                     (k!4 #x00000001)
                                     (k!4 #x00000000)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x00000003)
                                     (k!4 #x00000002)
                                     (k!4 #x00000001)
                                     (k!4 #x00000000)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #x00000003)
                                     (k!4 #x00000002)
                                     (k!4 #x00000001)
                                     (k!4 #x00000000))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32)
    #x00400000)
  (define-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32)
    #x00000200)
  (define-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa1232158)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xe10000a5)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa123215b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa1232158)
  (define-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000000) true
      false)))))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa123215b) #xe1
    (ite (= x!0 #xa1232158) #xa5
      #x00)))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa123215b)
                                     (k!4 #xa123215a)
                                     (k!4 #xa1232159)
                                     (k!4 #xa1232158)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa123215b)
                                     (k!4 #xa123215a)
                                     (k!4 #xa1232159)
                                     (k!4 #xa1232158)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa123215b)
                                     (k!4 #xa123215a)
                                     (k!4 #xa1232159)
                                     (k!4 #xa1232158)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #xa123215b)
                                     (k!4 #xa123215a)
                                     (k!4 #xa1232159)
                                     (k!4 #xa1232158))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x703 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x518 (bvuge ?x703 (_ bv1 32))))
 (let (($x29 (= ?x703 (_ bv0 32))))
 (let (($x135 (or $x29 $x518)))
 (let ((?x828 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x828 (_ bv1 32))))
 (let (($x423 (and $x285 $x135)))
 (let (($x363 (= ?x828 (_ bv0 32))))
 (let (($x740 (and $x363 $x135)))
 (let (($x650 (or $x740 $x423)))
 (let ((?x751 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x751 (_ bv1 32))))
 (let (($x553 (and $x379 $x650)))
 (let (($x6 (= ?x751 (_ bv0 32))))
 (let (($x713 (and $x6 $x650)))
 (let (($x440 (or $x713 $x553)))
 (let ((?x128 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x128 (_ bv1 32))))
 (let (($x116 (and $x124 $x440)))
 (let (($x91 (= ?x128 (_ bv0 32))))
 (let (($x78 (and $x91 $x440)))
 (let (($x596 (or $x78 $x116)))
 (let (($x247 (or false $x596)))
 (let (($x248 (= $x247 true)))
 (let (($x253 (= $x248 true)))
 (let ((?x793 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x534 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x484 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x673 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x851 (concat ?x673 (concat ?x484 (concat ?x534 ?x793)))))
 (let (($x517 (= ?x851 input.dst.llvm-%m)))
 (let (($x587 (= $x517 true)))
 (let (($x827 (= $x587 true)))
 (let ((?x589 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x20 (= (_ bv0 32) ?x589)))
 (let ((?x73 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x590 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x599 (and $x637 $x590)))
 (let (($x737 (and $x599 $x20)))
 (let (($x834 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x806 (and $x834 $x737)))
 (let (($x335 (= $x806 true)))
 (let (($x239 (= $x335 true)))
 (let (($x758 (= $x239 true)))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x889 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x681))))
 (let ((?x753 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x744 (bvuge ?x753 (_ bv1 32))))
 (=> $x744 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x889))))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x753 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x744 (bvuge ?x753 (_ bv1 32))))
 (= $x744 (bvuge ?x560 (_ bv1 32)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x146 (= false false)))
 (let ((?x753 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (= ?x753 (_ bv0 32))))
 (=> $x635 $x146)))))
 ))
 (let (($x749 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x753 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (= ?x753 (_ bv0 32))))
 (= $x635 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x479 (and $x749 $x99)))
 (let (($x835 (and $x479 $x51)))
 (let (($x226 (and $x835 $x244)))
 (let (($x257 (= $x226 true)))
 (let (($x453 (= $x257 true)))
 (let (($x385 (= $x453 true)))
 (let ((?x513 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x209 (= (bvand ?x513 (_ bv4294967292 32)) ?x513)))
 (let ((?x243 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x390 (= (bvand ?x243 (_ bv4294967292 32)) ?x243)))
 (let (($x627 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x243 (bvsub ?x243 (_ bv4 32))) (bvult ?x243 (bvsub ?x243 (_ bv4 32))))))
 (let (($x652 (and true $x627)))
 (let ((?x727 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x843 (= (bvand ?x727 (_ bv4294967292 32)) ?x727)))
 (let (($x207 (and $x843 $x652)))
 (let (($x40 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x513 (bvsub ?x513 (_ bv8 32))) (bvult ?x513 (bvsub ?x513 (_ bv8 32))))))
 (let (($x639 (and (and (and true $x40) $x207) $x390)))
 (let (($x230 (and $x639 $x209)))
 (let (($x287 (= $x230 true)))
 (let (($x59 (= $x287 true)))
 (let (($x53 (= $x59 true)))
 (let (($x690 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x141 (and true $x690)))
 (let (($x486 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x162 (and $x486 $x141)))
 (let (($x293 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x727 (bvsub ?x727 (_ bv12 32))) (bvult ?x727 (bvsub ?x727 (_ bv12 32))))))
 (let (($x324 (and (and (and true $x486) $x293) $x162)))
 (let (($x600 (= $x324 true)))
 (let (($x823 (= $x600 true)))
 (let (($x489 (= $x823 true)))
 (let (($x710 (and $x489 $x53)))
 (let (($x212 (and $x710 $x385)))
 (let (($x624 (and $x212 $x758)))
 (let (($x319 (and $x624 $x827)))
 (let ((?x13 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x662 (= ?x13 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x159 (=> $x124 $x662)))
 (let (($x430 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x743 (= $x124 $x430)))
 (let (($x146 (= false false)))
 (let (($x614 (=> $x91 $x146)))
 (let (($x359 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x74 (= $x91 $x359)))
 (let (($x89 (and $x74 $x614)))
 (let (($x441 (and $x89 $x743)))
 (let (($x352 (and $x441 $x159)))
 (let (($x771 (and $x352 $x319)))
 (let ((?x389 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x655 (= ?x389 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x622 (=> $x379 $x655)))
 (let (($x792 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x26 (= $x379 $x792)))
 (let (($x514 (=> $x6 $x146)))
 (let (($x228 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x782 (= $x6 $x228)))
 (let (($x464 (and $x782 $x514)))
 (let (($x347 (and $x464 $x26)))
 (let (($x259 (and $x347 $x622)))
 (let (($x631 (and $x259 $x771)))
 (let ((?x698 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x661 (= ?x698 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x194 (=> $x285 $x661)))
 (let (($x193 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x482 (= $x285 $x193)))
 (let (($x94 (=> $x363 $x146)))
 (let (($x391 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x58 (= $x363 $x391)))
 (let (($x278 (and $x58 $x94)))
 (let (($x492 (and $x278 $x482)))
 (let (($x761 (and $x492 $x194)))
 (let (($x356 (and $x761 $x631)))
 (let ((?x211 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x370 (= ?x211 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x651 (=> $x518 $x370)))
 (let (($x467 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x613 (= $x518 $x467)))
 (let (($x310 (=> $x29 $x146)))
 (let (($x195 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x842 (= $x29 $x195)))
 (let (($x458 (and $x842 $x310)))
 (let (($x620 (and $x458 $x613)))
 (let (($x251 (and $x620 $x651)))
 (let (($x466 (and $x251 $x356)))
 (let (($x733 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x528 (and $x733 $x466)))
 (let (($x545 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x362 (and $x545 $x528)))
 (let (($x450 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x190 (and $x450 $x362)))
 (let (($x772 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x354 (and $x772 $x190)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x752 (and $x57 $x354)))
 (let (($x31 (and $x146 $x752)))
 (let (($x488 (= ?x13 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x269 (and $x488 $x31)))
 (let (($x421 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x158 (and $x421 $x269)))
 (let (($x726 (and $x146 $x158)))
 (let (($x332 (= ?x389 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x718 (and $x332 $x726)))
 (let (($x529 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x822 (and $x529 $x718)))
 (let (($x133 (and $x146 $x822)))
 (let (($x218 (= ?x698 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x659 (and $x218 $x133)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x503 (and $x69 $x659)))
 (let (($x565 (and $x146 $x503)))
 (let (($x837 (= ?x211 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x814 (and $x837 $x565)))
 (let (($x144 (bvugt ?x243 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x243 (_ bv3 32)))))
 (let (($x281 (=> (bvule ?x243 (bvsub (bvadd ?x243 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x144)))))))
 (let (($x603 (bvugt ?x513 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x741 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x513 (_ bv3 32)))))
 (let (($x645 (=> (bvule ?x513 (bvsub (bvadd ?x513 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x741 $x603)))))))
 (let (($x551 (bvugt ?x727 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x535 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x727 (_ bv3 32)))))
 (let (($x850 (=> (bvule ?x727 (bvsub (bvadd ?x727 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x535 $x551)))))))
 (let (($x268 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x525 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x369 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x525 $x268)))))))
 (let (($x721 (and $x369 $x850)))
 (let (($x437 (and $x721 $x645)))
 (let (($x424 (and $x437 $x281)))
 (let (($x818 (and $x424 $x814)))
 (let (($x172 (=> $x818 $x253)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x703 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x518 (bvuge ?x703 (_ bv1 32))))
 (let (($x29 (= ?x703 (_ bv0 32))))
 (let (($x135 (or $x29 $x518)))
 (let ((?x828 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x828 (_ bv1 32))))
 (let (($x423 (and $x285 $x135)))
 (let (($x363 (= ?x828 (_ bv0 32))))
 (let (($x740 (and $x363 $x135)))
 (let (($x650 (or $x740 $x423)))
 (let ((?x751 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x751 (_ bv1 32))))
 (let (($x553 (and $x379 $x650)))
 (let (($x6 (= ?x751 (_ bv0 32))))
 (let (($x713 (and $x6 $x650)))
 (let (($x440 (or $x713 $x553)))
 (let ((?x128 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x128 (_ bv1 32))))
 (let (($x116 (and $x124 $x440)))
 (let (($x91 (= ?x128 (_ bv0 32))))
 (let (($x78 (and $x91 $x440)))
 (let (($x596 (or $x78 $x116)))
 (let (($x247 (or false $x596)))
 (let (($x248 (= $x247 true)))
 (let (($x253 (= $x248 true)))
 (let ((?x793 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x534 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x484 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x673 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x851 (concat ?x673 (concat ?x484 (concat ?x534 ?x793)))))
 (let (($x517 (= ?x851 input.dst.llvm-%m)))
 (let (($x587 (= $x517 true)))
 (let (($x827 (= $x587 true)))
 (let ((?x589 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x20 (= (_ bv0 32) ?x589)))
 (let ((?x73 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x590 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let (($x637 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x599 (and $x637 $x590)))
 (let (($x737 (and $x599 $x20)))
 (let (($x834 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x806 (and $x834 $x737)))
 (let (($x335 (= $x806 true)))
 (let (($x239 (= $x335 true)))
 (let (($x758 (= $x239 true)))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x264 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv1 32))) (select input.dst.llvm-mem ?x264))))
 (let ((?x889 (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x264 (_ bv2 32))) ?x681))))
 (let ((?x753 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x744 (bvuge ?x753 (_ bv1 32))))
 (=> $x744 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x889))))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x560 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x753 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x744 (bvuge ?x753 (_ bv1 32))))
 (= $x744 (bvuge ?x560 (_ bv1 32)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x146 (= false false)))
 (let ((?x753 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (= ?x753 (_ bv0 32))))
 (=> $x635 $x146)))))
 ))
 (let (($x749 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x753 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x635 (= ?x753 (_ bv0 32))))
 (= $x635 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x479 (and $x749 $x99)))
 (let (($x835 (and $x479 $x51)))
 (let (($x226 (and $x835 $x244)))
 (let (($x257 (= $x226 true)))
 (let (($x453 (= $x257 true)))
 (let (($x385 (= $x453 true)))
 (let ((?x513 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x209 (= (bvand ?x513 (_ bv4294967292 32)) ?x513)))
 (let ((?x243 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x390 (= (bvand ?x243 (_ bv4294967292 32)) ?x243)))
 (let (($x627 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x243 (bvsub ?x243 (_ bv4 32))) (bvult ?x243 (bvsub ?x243 (_ bv4 32))))))
 (let (($x652 (and true $x627)))
 (let ((?x727 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x843 (= (bvand ?x727 (_ bv4294967292 32)) ?x727)))
 (let (($x207 (and $x843 $x652)))
 (let (($x40 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x513 (bvsub ?x513 (_ bv8 32))) (bvult ?x513 (bvsub ?x513 (_ bv8 32))))))
 (let (($x639 (and (and (and true $x40) $x207) $x390)))
 (let (($x230 (and $x639 $x209)))
 (let (($x287 (= $x230 true)))
 (let (($x59 (= $x287 true)))
 (let (($x53 (= $x59 true)))
 (let (($x690 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x141 (and true $x690)))
 (let (($x486 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x162 (and $x486 $x141)))
 (let (($x293 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x727 (bvsub ?x727 (_ bv12 32))) (bvult ?x727 (bvsub ?x727 (_ bv12 32))))))
 (let (($x324 (and (and (and true $x486) $x293) $x162)))
 (let (($x600 (= $x324 true)))
 (let (($x823 (= $x600 true)))
 (let (($x489 (= $x823 true)))
 (let (($x710 (and $x489 $x53)))
 (let (($x212 (and $x710 $x385)))
 (let (($x624 (and $x212 $x758)))
 (let (($x319 (and $x624 $x827)))
 (let ((?x13 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x662 (= ?x13 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x159 (=> $x124 $x662)))
 (let (($x430 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x743 (= $x124 $x430)))
 (let (($x146 (= false false)))
 (let (($x614 (=> $x91 $x146)))
 (let (($x359 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x74 (= $x91 $x359)))
 (let (($x89 (and $x74 $x614)))
 (let (($x441 (and $x89 $x743)))
 (let (($x352 (and $x441 $x159)))
 (let (($x771 (and $x352 $x319)))
 (let ((?x389 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x655 (= ?x389 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x622 (=> $x379 $x655)))
 (let (($x792 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x26 (= $x379 $x792)))
 (let (($x514 (=> $x6 $x146)))
 (let (($x228 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x782 (= $x6 $x228)))
 (let (($x464 (and $x782 $x514)))
 (let (($x347 (and $x464 $x26)))
 (let (($x259 (and $x347 $x622)))
 (let (($x631 (and $x259 $x771)))
 (let ((?x698 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x661 (= ?x698 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x194 (=> $x285 $x661)))
 (let (($x193 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x482 (= $x285 $x193)))
 (let (($x94 (=> $x363 $x146)))
 (let (($x391 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x58 (= $x363 $x391)))
 (let (($x278 (and $x58 $x94)))
 (let (($x492 (and $x278 $x482)))
 (let (($x761 (and $x492 $x194)))
 (let (($x356 (and $x761 $x631)))
 (let ((?x211 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x370 (= ?x211 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x651 (=> $x518 $x370)))
 (let (($x467 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x613 (= $x518 $x467)))
 (let (($x310 (=> $x29 $x146)))
 (let (($x195 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x842 (= $x29 $x195)))
 (let (($x458 (and $x842 $x310)))
 (let (($x620 (and $x458 $x613)))
 (let (($x251 (and $x620 $x651)))
 (let (($x466 (and $x251 $x356)))
 (let (($x733 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x528 (and $x733 $x466)))
 (let (($x545 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x362 (and $x545 $x528)))
 (let (($x450 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x190 (and $x450 $x362)))
 (let (($x772 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x354 (and $x772 $x190)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x752 (and $x57 $x354)))
 (let (($x31 (and $x146 $x752)))
 (let (($x488 (= ?x13 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x269 (and $x488 $x31)))
 (let (($x421 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x158 (and $x421 $x269)))
 (let (($x726 (and $x146 $x158)))
 (let (($x332 (= ?x389 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x718 (and $x332 $x726)))
 (let (($x529 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x822 (and $x529 $x718)))
 (let (($x133 (and $x146 $x822)))
 (let (($x218 (= ?x698 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x659 (and $x218 $x133)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x503 (and $x69 $x659)))
 (let (($x565 (and $x146 $x503)))
 (let (($x837 (= ?x211 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x814 (and $x837 $x565)))
 (let (($x144 (bvugt ?x243 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x243 (_ bv3 32)))))
 (let (($x281 (=> (bvule ?x243 (bvsub (bvadd ?x243 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x144)))))))
 (let (($x603 (bvugt ?x513 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x741 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x513 (_ bv3 32)))))
 (let (($x645 (=> (bvule ?x513 (bvsub (bvadd ?x513 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x741 $x603)))))))
 (let (($x551 (bvugt ?x727 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x535 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x727 (_ bv3 32)))))
 (let (($x850 (=> (bvule ?x727 (bvsub (bvadd ?x727 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x535 $x551)))))))
 (let (($x268 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x525 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x369 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x525 $x268)))))))
 (let (($x721 (and $x369 $x850)))
 (let (($x437 (and $x721 $x645)))
 (let (($x424 (and $x437 $x281)))
 (let (($x818 (and $x424 $x814)))
 (let (($x172 (=> $x818 $x253)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 228 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x733 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x446 (bvmul (_ bv4294967295 32) ?x733)))
 (let ((?x171 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x145 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x171)))
 (let ((?x538 (bvadd ?x145 ?x446)))
 (let ((?x454 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x471 (concat ?x454 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x572 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x153 (bvadd ?x572 (_ bv3 32))))
 (let ((?x455 (concat (select input.dst.llvm-mem ?x153) (concat ?x368 ?x471))))
 (let ((?x745 (bvmul (_ bv4294967295 32) ?x455)))
 (let ((?x394 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x436 (concat ?x394 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x646 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x684 (bvadd ?x646 (_ bv3 32))))
 (let ((?x173 (concat (select input.dst.llvm-mem ?x684) (concat ?x157 ?x436))))
 (let ((?x636 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x340 (concat ?x636 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x886 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x551 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x779 (bvadd ?x551 (_ bv3 32))))
 (let ((?x143 (concat (select input.dst.llvm-mem ?x779) (concat ?x886 ?x340))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x523 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x221)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x523)))
 (let ((?x328 (bvadd (bvadd (bvadd ?x301 ?x143) ?x173) ?x745)))
 (let (($x184 (= ?x328 ?x538)))
 (let (($x849 (= $x184 true)))
 (let (($x811 (= $x849 true)))
 (let ((?x820 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x381 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x810 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x665 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x665 (concat ?x810 (concat ?x381 ?x820)))))
 (let (($x780 (= ?x225 input.dst.llvm-%m)))
 (let (($x376 (= $x780 true)))
 (let (($x304 (= $x376 true)))
 (let (($x299 (= input.dst.llvm-%m ?x225)))
 (let ((?x841 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x585 (= (_ bv0 32) ?x841)))
 (let ((?x688 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x688)))
 (let (($x805 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x805 $x79)))
 (let (($x581 (and $x65 $x585)))
 (let (($x460 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x685 (and $x460 $x581)))
 (let (($x142 (and $x685 $x299)))
 (let (($x679 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x815 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x815 (_ bv1 32))) (select input.dst.llvm-mem ?x815))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x815 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x815 (_ bv2 32))) ?x384))))
 (let ((?x361 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x361 (_ bv1 32))))
 (=> $x644 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x85))))))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x769 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x361 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x361 (_ bv1 32))))
 (= $x644 (bvuge ?x769 (_ bv1 32)))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let ((?x361 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x361 (_ bv0 32))))
 (=> $x67 $x13)))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x361 (_ bv0 32))))
 (= $x67 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x166 (and $x608 $x290)))
 (let (($x256 (and $x166 $x321)))
 (let (($x181 (and $x256 $x679)))
 (let (($x834 (= (bvand ?x572 (_ bv4294967292 32)) ?x572)))
 (let (($x257 (= (bvand ?x646 (_ bv4294967292 32)) ?x646)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x646 (bvsub ?x646 (_ bv4 32))) (bvult ?x646 (bvsub ?x646 (_ bv4 32))))))
 (let (($x122 (and true $x62)))
 (let (($x164 (= (bvand ?x551 (_ bv4294967292 32)) ?x551)))
 (let (($x244 (and $x164 $x122)))
 (let (($x738 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x572 (bvsub ?x572 (_ bv8 32))) (bvult ?x572 (bvsub ?x572 (_ bv8 32))))))
 (let (($x212 (and (and (and true $x738) $x244) $x257)))
 (let (($x484 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x237 (and true $x484)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x534 (and $x20 $x237)))
 (let (($x758 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x551 (bvsub ?x551 (_ bv12 32))) (bvult ?x551 (bvsub ?x551 (_ bv12 32))))))
 (let (($x318 (and (and (and true $x20) $x758) $x534)))
 (let (($x540 (and (and (and (and $x318 $x212) $x834) $x181) $x142)))
 (let (($x167 (= $x540 true)))
 (let (($x598 (= $x167 true)))
 (let (($x475 (= $x598 true)))
 (let (($x851 (= $x318 true)))
 (let (($x517 (= $x851 true)))
 (let (($x587 (= $x517 true)))
 (let (($x637 (and $x212 $x834)))
 (let (($x73 (= $x637 true)))
 (let (($x590 (= $x73 true)))
 (let (($x599 (= $x590 true)))
 (let (($x827 (and $x599 $x587)))
 (let (($x804 (and $x827 $x475)))
 (let (($x339 (and $x804 $x304)))
 (let ((?x26 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x26 (_ bv1 32))))
 (let ((?x486 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x486 (_ bv1 32))))
 (let (($x835 (and $x773 $x359)))
 (let ((?x82 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x82 (_ bv1 32))))
 (let (($x201 (and $x138 $x835)))
 (let ((?x635 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x635 (_ bv1 32))))
 (let (($x615 (and $x99 $x201)))
 (let (($x557 (and $x615 $x339)))
 (let ((?x94 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x686 (= ?x94 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x314 (=> $x99 $x686)))
 (let (($x819 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x479 (= $x99 $x819)))
 (let (($x13 (= false false)))
 (let (($x797 (= ?x635 (_ bv0 32))))
 (let (($x383 (=> $x797 $x13)))
 (let (($x445 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x610 (= $x797 $x445)))
 (let (($x750 (and $x610 $x383)))
 (let (($x744 (and $x750 $x479)))
 (let (($x51 (and $x744 $x314)))
 (let (($x626 (and $x51 $x557)))
 (let ((?x613 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x639 (= ?x613 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x351 (=> $x138 $x639)))
 (let (($x207 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x783 (= $x138 $x207)))
 (let (($x48 (= ?x82 (_ bv0 32))))
 (let (($x170 (=> $x48 $x13)))
 (let (($x567 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x843 (= $x48 $x567)))
 (let (($x222 (and $x843 $x170)))
 (let (($x390 (and $x222 $x783)))
 (let (($x209 (and $x390 $x351)))
 (let (($x150 (and $x209 $x626)))
 (let (($x141 (= ?x733 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x162 (=> $x773 $x141)))
 (let (($x327 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x412 (= $x773 $x327)))
 (let (($x309 (= ?x486 (_ bv0 32))))
 (let (($x839 (=> $x309 $x13)))
 (let (($x87 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x30 (= $x309 $x87)))
 (let (($x429 (and $x30 $x839)))
 (let (($x690 (and $x429 $x412)))
 (let (($x324 (and $x690 $x162)))
 (let (($x669 (and $x324 $x150)))
 (let (($x89 (= ?x171 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x124 (=> $x359 $x89)))
 (let (($x500 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x74 (= $x359 $x500)))
 (let (($x347 (= ?x26 (_ bv0 32))))
 (let (($x655 (=> $x347 $x13)))
 (let (($x379 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x97 (= $x347 $x379)))
 (let (($x622 (and $x97 $x655)))
 (let (($x614 (and $x622 $x74)))
 (let (($x430 (and $x614 $x124)))
 (let (($x509 (and $x430 $x669)))
 (let (($x751 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x325 (and $x751 $x509)))
 (let (($x761 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x179 (and $x761 $x325)))
 (let (($x661 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x840 (and $x661 $x179)))
 (let (($x492 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x512 (and $x492 $x840)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x232 (and $x193 $x512)))
 (let (($x656 (and $x13 $x232)))
 (let (($x278 (= ?x94 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x628 (and $x278 $x656)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x638 (and $x370 $x628)))
 (let (($x577 (and $x13 $x638)))
 (let (($x620 (= ?x613 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x260 (and $x620 $x577)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x5 (and $x29 $x260)))
 (let (($x86 (and $x13 $x5)))
 (let (($x291 (= ?x733 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x316 (and $x291 $x86)))
 (let (($x488 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x612 (and $x488 $x316)))
 (let (($x113 (and $x13 $x612)))
 (let (($x421 (= ?x171 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x109 (and $x421 $x113)))
 (let (($x648 (bvugt ?x646 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x684)))
 (let (($x442 (=> (bvule ?x646 (bvsub (bvadd ?x646 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x337 $x648)))))))
 (let (($x24 (bvugt ?x572 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x727 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x219 (=> (bvule ?x572 (bvsub (bvadd ?x572 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x727 $x24)))))))
 (let (($x558 (bvugt ?x551 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x779)))
 (let (($x717 (=> (bvule ?x551 (bvsub (bvadd ?x551 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x271 $x558)))))))
 (let (($x645 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x698 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x645)))))))
 (let (($x802 (and $x698 $x717)))
 (let (($x389 (and $x802 $x219)))
 (let (($x88 (and $x389 $x442)))
 (let (($x92 (and $x88 $x109)))
 (let (($x564 (=> $x92 $x811)))
 (not $x564))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x733 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x446 (bvmul (_ bv4294967295 32) ?x733)))
 (let ((?x171 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x145 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x171)))
 (let ((?x538 (bvadd ?x145 ?x446)))
 (let ((?x454 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x471 (concat ?x454 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x572 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x153 (bvadd ?x572 (_ bv3 32))))
 (let ((?x455 (concat (select input.dst.llvm-mem ?x153) (concat ?x368 ?x471))))
 (let ((?x745 (bvmul (_ bv4294967295 32) ?x455)))
 (let ((?x394 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x436 (concat ?x394 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x646 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x684 (bvadd ?x646 (_ bv3 32))))
 (let ((?x173 (concat (select input.dst.llvm-mem ?x684) (concat ?x157 ?x436))))
 (let ((?x636 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x340 (concat ?x636 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x886 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x551 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x779 (bvadd ?x551 (_ bv3 32))))
 (let ((?x143 (concat (select input.dst.llvm-mem ?x779) (concat ?x886 ?x340))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x523 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x221)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x523)))
 (let ((?x328 (bvadd (bvadd (bvadd ?x301 ?x143) ?x173) ?x745)))
 (let (($x184 (= ?x328 ?x538)))
 (let (($x849 (= $x184 true)))
 (let (($x811 (= $x849 true)))
 (let ((?x820 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x381 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x810 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x665 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x225 (concat ?x665 (concat ?x810 (concat ?x381 ?x820)))))
 (let (($x780 (= ?x225 input.dst.llvm-%m)))
 (let (($x376 (= $x780 true)))
 (let (($x304 (= $x376 true)))
 (let (($x299 (= input.dst.llvm-%m ?x225)))
 (let ((?x841 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x585 (= (_ bv0 32) ?x841)))
 (let ((?x688 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x688)))
 (let (($x805 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x805 $x79)))
 (let (($x581 (and $x65 $x585)))
 (let (($x460 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x685 (and $x460 $x581)))
 (let (($x142 (and $x685 $x299)))
 (let (($x679 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x815 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x815 (_ bv1 32))) (select input.dst.llvm-mem ?x815))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x815 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x815 (_ bv2 32))) ?x384))))
 (let ((?x361 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x361 (_ bv1 32))))
 (=> $x644 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x85))))))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x769 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x361 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x361 (_ bv1 32))))
 (= $x644 (bvuge ?x769 (_ bv1 32)))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x13 (= false false)))
 (let ((?x361 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x361 (_ bv0 32))))
 (=> $x67 $x13)))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x361 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x361 (_ bv0 32))))
 (= $x67 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x166 (and $x608 $x290)))
 (let (($x256 (and $x166 $x321)))
 (let (($x181 (and $x256 $x679)))
 (let (($x834 (= (bvand ?x572 (_ bv4294967292 32)) ?x572)))
 (let (($x257 (= (bvand ?x646 (_ bv4294967292 32)) ?x646)))
 (let (($x62 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x646 (bvsub ?x646 (_ bv4 32))) (bvult ?x646 (bvsub ?x646 (_ bv4 32))))))
 (let (($x122 (and true $x62)))
 (let (($x164 (= (bvand ?x551 (_ bv4294967292 32)) ?x551)))
 (let (($x244 (and $x164 $x122)))
 (let (($x738 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x572 (bvsub ?x572 (_ bv8 32))) (bvult ?x572 (bvsub ?x572 (_ bv8 32))))))
 (let (($x212 (and (and (and true $x738) $x244) $x257)))
 (let (($x484 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x237 (and true $x484)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x534 (and $x20 $x237)))
 (let (($x758 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x551 (bvsub ?x551 (_ bv12 32))) (bvult ?x551 (bvsub ?x551 (_ bv12 32))))))
 (let (($x318 (and (and (and true $x20) $x758) $x534)))
 (let (($x540 (and (and (and (and $x318 $x212) $x834) $x181) $x142)))
 (let (($x167 (= $x540 true)))
 (let (($x598 (= $x167 true)))
 (let (($x475 (= $x598 true)))
 (let (($x851 (= $x318 true)))
 (let (($x517 (= $x851 true)))
 (let (($x587 (= $x517 true)))
 (let (($x637 (and $x212 $x834)))
 (let (($x73 (= $x637 true)))
 (let (($x590 (= $x73 true)))
 (let (($x599 (= $x590 true)))
 (let (($x827 (and $x599 $x587)))
 (let (($x804 (and $x827 $x475)))
 (let (($x339 (and $x804 $x304)))
 (let ((?x26 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x359 (bvuge ?x26 (_ bv1 32))))
 (let ((?x486 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x773 (bvuge ?x486 (_ bv1 32))))
 (let (($x835 (and $x773 $x359)))
 (let ((?x82 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x82 (_ bv1 32))))
 (let (($x201 (and $x138 $x835)))
 (let ((?x635 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x635 (_ bv1 32))))
 (let (($x615 (and $x99 $x201)))
 (let (($x557 (and $x615 $x339)))
 (let ((?x94 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x686 (= ?x94 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x314 (=> $x99 $x686)))
 (let (($x819 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x479 (= $x99 $x819)))
 (let (($x13 (= false false)))
 (let (($x797 (= ?x635 (_ bv0 32))))
 (let (($x383 (=> $x797 $x13)))
 (let (($x445 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x610 (= $x797 $x445)))
 (let (($x750 (and $x610 $x383)))
 (let (($x744 (and $x750 $x479)))
 (let (($x51 (and $x744 $x314)))
 (let (($x626 (and $x51 $x557)))
 (let ((?x613 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x639 (= ?x613 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x351 (=> $x138 $x639)))
 (let (($x207 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x783 (= $x138 $x207)))
 (let (($x48 (= ?x82 (_ bv0 32))))
 (let (($x170 (=> $x48 $x13)))
 (let (($x567 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x843 (= $x48 $x567)))
 (let (($x222 (and $x843 $x170)))
 (let (($x390 (and $x222 $x783)))
 (let (($x209 (and $x390 $x351)))
 (let (($x150 (and $x209 $x626)))
 (let (($x141 (= ?x733 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x162 (=> $x773 $x141)))
 (let (($x327 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x412 (= $x773 $x327)))
 (let (($x309 (= ?x486 (_ bv0 32))))
 (let (($x839 (=> $x309 $x13)))
 (let (($x87 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x30 (= $x309 $x87)))
 (let (($x429 (and $x30 $x839)))
 (let (($x690 (and $x429 $x412)))
 (let (($x324 (and $x690 $x162)))
 (let (($x669 (and $x324 $x150)))
 (let (($x89 (= ?x171 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x124 (=> $x359 $x89)))
 (let (($x500 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x74 (= $x359 $x500)))
 (let (($x347 (= ?x26 (_ bv0 32))))
 (let (($x655 (=> $x347 $x13)))
 (let (($x379 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x97 (= $x347 $x379)))
 (let (($x622 (and $x97 $x655)))
 (let (($x614 (and $x622 $x74)))
 (let (($x430 (and $x614 $x124)))
 (let (($x509 (and $x430 $x669)))
 (let (($x751 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x325 (and $x751 $x509)))
 (let (($x761 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x179 (and $x761 $x325)))
 (let (($x661 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x840 (and $x661 $x179)))
 (let (($x492 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x512 (and $x492 $x840)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x232 (and $x193 $x512)))
 (let (($x656 (and $x13 $x232)))
 (let (($x278 (= ?x94 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x628 (and $x278 $x656)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x638 (and $x370 $x628)))
 (let (($x577 (and $x13 $x638)))
 (let (($x620 (= ?x613 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x260 (and $x620 $x577)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x5 (and $x29 $x260)))
 (let (($x86 (and $x13 $x5)))
 (let (($x291 (= ?x733 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x316 (and $x291 $x86)))
 (let (($x488 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x612 (and $x488 $x316)))
 (let (($x113 (and $x13 $x612)))
 (let (($x421 (= ?x171 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x109 (and $x421 $x113)))
 (let (($x648 (bvugt ?x646 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x337 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x684)))
 (let (($x442 (=> (bvule ?x646 (bvsub (bvadd ?x646 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x337 $x648)))))))
 (let (($x24 (bvugt ?x572 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x727 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x219 (=> (bvule ?x572 (bvsub (bvadd ?x572 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x727 $x24)))))))
 (let (($x558 (bvugt ?x551 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x779)))
 (let (($x717 (=> (bvule ?x551 (bvsub (bvadd ?x551 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x271 $x558)))))))
 (let (($x645 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x698 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x645)))))))
 (let (($x802 (and $x698 $x717)))
 (let (($x389 (and $x802 $x219)))
 (let (($x88 (and $x389 $x442)))
 (let (($x92 (and $x88 $x109)))
 (let (($x564 (=> $x92 $x811)))
 (not $x564))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x751 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x571 (bvmul (_ bv4294967295 32) ?x751)))
 (let ((?x575 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x571)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x367 (concat ?x320 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x652 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x298 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x27 (bvadd ?x298 (_ bv3 32))))
 (let ((?x420 (concat (select input.dst.llvm-mem ?x27) (concat ?x652 ?x367))))
 (let ((?x662 (bvmul (_ bv4294967295 32) ?x420)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x53 (concat ?x59 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x153 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x69 (bvadd ?x153 (_ bv3 32))))
 (let ((?x600 (concat (select input.dst.llvm-mem ?x69) (concat ?x305 ?x53))))
 (let ((?x700 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x255 (concat ?x700 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x643 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x93 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x529 (bvadd ?x93 (_ bv3 32))))
 (let ((?x640 (concat (select input.dst.llvm-mem ?x529) (concat ?x643 ?x255))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x649 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x366)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x649)))
 (let ((?x561 (bvadd (bvadd (bvadd ?x267 ?x640) ?x600) ?x662)))
 (let (($x228 (= ?x561 ?x575)))
 (let (($x782 (= $x228 true)))
 (let (($x259 (= $x782 true)))
 (let ((?x605 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x885 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x487 (concat ?x885 (concat ?x169 (concat ?x240 ?x605)))))
 (let (($x302 (= ?x487 input.dst.llvm-%m)))
 (let (($x55 (= $x302 true)))
 (let (($x689 (= $x55 true)))
 (let (($x387 (= input.dst.llvm-%m ?x487)))
 (let ((?x362 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x190 (= (_ bv0 32) ?x362)))
 (let ((?x631 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x631)))
 (let (($x771 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x528 (and $x771 $x356)))
 (let (($x354 (and $x528 $x190)))
 (let (($x466 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x752 (and $x466 $x354)))
 (let (($x406 (and $x752 $x387)))
 (let (($x789 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x440 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv1 32))) (select input.dst.llvm-mem ?x440))))
 (let ((?x709 (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv2 32))) ?x247))))
 (let ((?x493 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x493 (_ bv1 32))))
 (=> $x545 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x709))))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x828 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x493 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x493 (_ bv1 32))))
 (= $x545 (bvuge ?x828 (_ bv1 32)))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x94 (= false false)))
 (let ((?x493 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x493 (_ bv0 32))))
 (=> $x363 $x94)))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x493 (_ bv0 32))))
 (= $x363 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x374 (and $x483 $x310)))
 (let (($x31 (and $x374 $x297)))
 (let (($x790 (and $x31 $x789)))
 (let (($x360 (= (bvand ?x298 (_ bv4294967292 32)) ?x298)))
 (let (($x85 (= (bvand ?x153 (_ bv4294967292 32)) ?x153)))
 (let (($x344 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x153 (bvsub ?x153 (_ bv4 32))) (bvult ?x153 (bvsub ?x153 (_ bv4 32))))))
 (let (($x425 (and true $x344)))
 (let (($x41 (= (bvand ?x93 (_ bv4294967292 32)) ?x93)))
 (let (($x384 (and $x41 $x425)))
 (let (($x822 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x298 (bvsub ?x298 (_ bv8 32))) (bvult ?x298 (bvsub ?x298 (_ bv8 32))))))
 (let (($x679 (and (and (and true $x822) $x384) $x85)))
 (let (($x381 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x820 (and true $x381)))
 (let (($x65 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x463 (and $x65 $x820)))
 (let (($x658 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x93 (bvsub ?x93 (_ bv12 32))) (bvult ?x93 (bvsub ?x93 (_ bv12 32))))))
 (let (($x299 (and (and (and true $x65) $x658) $x463)))
 (let (($x530 (and (and (and (and $x299 $x679) $x360) $x790) $x406)))
 (let (($x884 (= $x530 true)))
 (let (($x594 (= $x884 true)))
 (let (($x438 (= $x594 true)))
 (let (($x142 (= $x299 true)))
 (let (($x540 (= $x142 true)))
 (let (($x167 (= $x540 true)))
 (let (($x175 (and $x679 $x360)))
 (let (($x460 (= $x175 true)))
 (let (($x805 (= $x460 true)))
 (let (($x688 (= $x805 true)))
 (let (($x598 (and $x688 $x167)))
 (let (($x105 (and $x598 $x438)))
 (let (($x50 (and $x105 $x689)))
 (let ((?x783 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x783 (_ bv0 32))))
 (let ((?x615 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x615 (_ bv1 32))))
 (let (($x166 (and $x681 $x390)))
 (let ((?x73 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x758 (bvuge ?x73 (_ bv1 32))))
 (let (($x644 (and $x758 $x166)))
 (let ((?x409 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (bvuge ?x409 (_ bv1 32))))
 (let (($x262 (and $x769 $x644)))
 (let (($x71 (and $x262 $x50)))
 (let ((?x839 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x608 (= ?x839 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x611 (=> $x769 $x608)))
 (let (($x254 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x152 (= $x769 $x254)))
 (let (($x94 (= false false)))
 (let (($x186 (= ?x409 (_ bv0 32))))
 (let (($x98 (=> $x186 $x94)))
 (let (($x587 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x502 (= $x186 $x587)))
 (let (($x361 (and $x502 $x98)))
 (let (($x405 (and $x361 $x152)))
 (let (($x290 (and $x405 $x611)))
 (let (($x127 (and $x290 $x71)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x624 (= ?x74 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x673 (=> $x758 $x624)))
 (let (($x239 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x343 (= $x758 $x239)))
 (let (($x590 (= ?x73 (_ bv0 32))))
 (let (($x589 (=> $x590 $x94)))
 (let (($x834 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x599 (= $x590 $x834)))
 (let (($x20 (and $x599 $x589)))
 (let (($x778 (and $x20 $x343)))
 (let (($x401 (and $x778 $x673)))
 (let (($x830 (and $x401 $x127)))
 (let (($x889 (= ?x751 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x62 (=> $x681 $x889)))
 (let (($x164 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x294 (= $x681 $x164)))
 (let (($x264 (= ?x615 (_ bv0 32))))
 (let (($x119 (=> $x264 $x94)))
 (let (($x835 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x434 (= $x264 $x835)))
 (let (($x21 (and $x434 $x119)))
 (let (($x419 (and $x21 $x294)))
 (let (($x122 (and $x419 $x62)))
 (let (($x887 (and $x122 $x830)))
 (let ((?x432 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x750 (= ?x432 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x445 (bvuge ?x783 (_ bv1 32))))
 (let (($x99 (=> $x445 $x750)))
 (let (($x710 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x610 (= $x445 $x710)))
 (let (($x639 (=> $x390 $x94)))
 (let (($x138 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x526 (= $x390 $x138)))
 (let (($x351 (and $x526 $x639)))
 (let (($x383 (and $x351 $x610)))
 (let (($x819 (and $x383 $x99)))
 (let (($x64 (and $x819 $x887)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x746 (and $x82 $x64)))
 (let (($x324 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x177 (and $x324 $x746)))
 (let (($x141 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x326 (and $x141 $x177)))
 (let (($x690 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x66 (and $x690 $x326)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x174 (and $x327 $x66)))
 (let (($x414 (and $x94 $x174)))
 (let (($x429 (= ?x839 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x490 (and $x429 $x414)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x554 (and $x89 $x490)))
 (let (($x154 (and $x94 $x554)))
 (let (($x614 (= ?x74 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x220 (and $x614 $x154)))
 (let (($x347 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x480 (and $x347 $x220)))
 (let (($x829 (and $x94 $x480)))
 (let (($x792 (= ?x751 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x541 (and $x792 $x829)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x469 (and $x278 $x541)))
 (let (($x178 (and $x94 $x469)))
 (let (($x370 (= ?x432 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x826 (and $x370 $x178)))
 (let (($x759 (bvugt ?x153 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x461 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x421 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x461 $x759)))))))
 (let (($x243 (bvugt ?x298 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x667 (=> (bvule ?x298 (bvsub (bvadd ?x298 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x243)))))))
 (let (($x268 (bvugt ?x93 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x348 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x529)))
 (let (($x275 (=> (bvule ?x93 (bvsub (bvadd ?x93 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x348 $x268)))))))
 (let (($x288 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x551 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x365 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x551)))
 (let (($x796 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x365 $x288)))))))
 (let (($x144 (and $x796 $x275)))
 (let (($x602 (and $x144 $x667)))
 (let (($x281 (and $x602 $x421)))
 (let (($x427 (and $x281 $x826)))
 (let (($x888 (=> $x427 $x259)))
 (not $x888)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x751 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x571 (bvmul (_ bv4294967295 32) ?x751)))
 (let ((?x575 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x571)))
 (let ((?x320 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x367 (concat ?x320 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x652 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x298 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x27 (bvadd ?x298 (_ bv3 32))))
 (let ((?x420 (concat (select input.dst.llvm-mem ?x27) (concat ?x652 ?x367))))
 (let ((?x662 (bvmul (_ bv4294967295 32) ?x420)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x53 (concat ?x59 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x305 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x153 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x69 (bvadd ?x153 (_ bv3 32))))
 (let ((?x600 (concat (select input.dst.llvm-mem ?x69) (concat ?x305 ?x53))))
 (let ((?x700 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x255 (concat ?x700 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x643 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x93 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x529 (bvadd ?x93 (_ bv3 32))))
 (let ((?x640 (concat (select input.dst.llvm-mem ?x529) (concat ?x643 ?x255))))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x649 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x366)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x649)))
 (let ((?x561 (bvadd (bvadd (bvadd ?x267 ?x640) ?x600) ?x662)))
 (let (($x228 (= ?x561 ?x575)))
 (let (($x782 (= $x228 true)))
 (let (($x259 (= $x782 true)))
 (let ((?x605 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x885 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x487 (concat ?x885 (concat ?x169 (concat ?x240 ?x605)))))
 (let (($x302 (= ?x487 input.dst.llvm-%m)))
 (let (($x55 (= $x302 true)))
 (let (($x689 (= $x55 true)))
 (let (($x387 (= input.dst.llvm-%m ?x487)))
 (let ((?x362 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x190 (= (_ bv0 32) ?x362)))
 (let ((?x631 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x631)))
 (let (($x771 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x528 (and $x771 $x356)))
 (let (($x354 (and $x528 $x190)))
 (let (($x466 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x752 (and $x466 $x354)))
 (let (($x406 (and $x752 $x387)))
 (let (($x789 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x440 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv1 32))) (select input.dst.llvm-mem ?x440))))
 (let ((?x709 (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv2 32))) ?x247))))
 (let ((?x493 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x493 (_ bv1 32))))
 (=> $x545 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x709))))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x828 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x493 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x545 (bvuge ?x493 (_ bv1 32))))
 (= $x545 (bvuge ?x828 (_ bv1 32)))))))
 ))
 (let (($x310 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x94 (= false false)))
 (let ((?x493 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x493 (_ bv0 32))))
 (=> $x363 $x94)))))
 ))
 (let (($x483 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x493 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x493 (_ bv0 32))))
 (= $x363 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x374 (and $x483 $x310)))
 (let (($x31 (and $x374 $x297)))
 (let (($x790 (and $x31 $x789)))
 (let (($x360 (= (bvand ?x298 (_ bv4294967292 32)) ?x298)))
 (let (($x85 (= (bvand ?x153 (_ bv4294967292 32)) ?x153)))
 (let (($x344 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x153 (bvsub ?x153 (_ bv4 32))) (bvult ?x153 (bvsub ?x153 (_ bv4 32))))))
 (let (($x425 (and true $x344)))
 (let (($x41 (= (bvand ?x93 (_ bv4294967292 32)) ?x93)))
 (let (($x384 (and $x41 $x425)))
 (let (($x822 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x298 (bvsub ?x298 (_ bv8 32))) (bvult ?x298 (bvsub ?x298 (_ bv8 32))))))
 (let (($x679 (and (and (and true $x822) $x384) $x85)))
 (let (($x381 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x820 (and true $x381)))
 (let (($x65 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x463 (and $x65 $x820)))
 (let (($x658 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x93 (bvsub ?x93 (_ bv12 32))) (bvult ?x93 (bvsub ?x93 (_ bv12 32))))))
 (let (($x299 (and (and (and true $x65) $x658) $x463)))
 (let (($x530 (and (and (and (and $x299 $x679) $x360) $x790) $x406)))
 (let (($x884 (= $x530 true)))
 (let (($x594 (= $x884 true)))
 (let (($x438 (= $x594 true)))
 (let (($x142 (= $x299 true)))
 (let (($x540 (= $x142 true)))
 (let (($x167 (= $x540 true)))
 (let (($x175 (and $x679 $x360)))
 (let (($x460 (= $x175 true)))
 (let (($x805 (= $x460 true)))
 (let (($x688 (= $x805 true)))
 (let (($x598 (and $x688 $x167)))
 (let (($x105 (and $x598 $x438)))
 (let (($x50 (and $x105 $x689)))
 (let ((?x783 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x783 (_ bv0 32))))
 (let ((?x615 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x681 (bvuge ?x615 (_ bv1 32))))
 (let (($x166 (and $x681 $x390)))
 (let ((?x73 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x758 (bvuge ?x73 (_ bv1 32))))
 (let (($x644 (and $x758 $x166)))
 (let ((?x409 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x769 (bvuge ?x409 (_ bv1 32))))
 (let (($x262 (and $x769 $x644)))
 (let (($x71 (and $x262 $x50)))
 (let ((?x839 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x608 (= ?x839 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x611 (=> $x769 $x608)))
 (let (($x254 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x152 (= $x769 $x254)))
 (let (($x94 (= false false)))
 (let (($x186 (= ?x409 (_ bv0 32))))
 (let (($x98 (=> $x186 $x94)))
 (let (($x587 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x502 (= $x186 $x587)))
 (let (($x361 (and $x502 $x98)))
 (let (($x405 (and $x361 $x152)))
 (let (($x290 (and $x405 $x611)))
 (let (($x127 (and $x290 $x71)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x624 (= ?x74 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x673 (=> $x758 $x624)))
 (let (($x239 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x343 (= $x758 $x239)))
 (let (($x590 (= ?x73 (_ bv0 32))))
 (let (($x589 (=> $x590 $x94)))
 (let (($x834 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x599 (= $x590 $x834)))
 (let (($x20 (and $x599 $x589)))
 (let (($x778 (and $x20 $x343)))
 (let (($x401 (and $x778 $x673)))
 (let (($x830 (and $x401 $x127)))
 (let (($x889 (= ?x751 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x62 (=> $x681 $x889)))
 (let (($x164 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x294 (= $x681 $x164)))
 (let (($x264 (= ?x615 (_ bv0 32))))
 (let (($x119 (=> $x264 $x94)))
 (let (($x835 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x434 (= $x264 $x835)))
 (let (($x21 (and $x434 $x119)))
 (let (($x419 (and $x21 $x294)))
 (let (($x122 (and $x419 $x62)))
 (let (($x887 (and $x122 $x830)))
 (let ((?x432 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x750 (= ?x432 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x445 (bvuge ?x783 (_ bv1 32))))
 (let (($x99 (=> $x445 $x750)))
 (let (($x710 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x610 (= $x445 $x710)))
 (let (($x639 (=> $x390 $x94)))
 (let (($x138 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x526 (= $x390 $x138)))
 (let (($x351 (and $x526 $x639)))
 (let (($x383 (and $x351 $x610)))
 (let (($x819 (and $x383 $x99)))
 (let (($x64 (and $x819 $x887)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x746 (and $x82 $x64)))
 (let (($x324 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x177 (and $x324 $x746)))
 (let (($x141 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x326 (and $x141 $x177)))
 (let (($x690 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x66 (and $x690 $x326)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x174 (and $x327 $x66)))
 (let (($x414 (and $x94 $x174)))
 (let (($x429 (= ?x839 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x490 (and $x429 $x414)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x554 (and $x89 $x490)))
 (let (($x154 (and $x94 $x554)))
 (let (($x614 (= ?x74 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x220 (and $x614 $x154)))
 (let (($x347 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x480 (and $x347 $x220)))
 (let (($x829 (and $x94 $x480)))
 (let (($x792 (= ?x751 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x541 (and $x792 $x829)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x469 (and $x278 $x541)))
 (let (($x178 (and $x94 $x469)))
 (let (($x370 (= ?x432 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x826 (and $x370 $x178)))
 (let (($x759 (bvugt ?x153 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x461 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x421 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x461 $x759)))))))
 (let (($x243 (bvugt ?x298 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x667 (=> (bvule ?x298 (bvsub (bvadd ?x298 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x243)))))))
 (let (($x268 (bvugt ?x93 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x348 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x529)))
 (let (($x275 (=> (bvule ?x93 (bvsub (bvadd ?x93 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x348 $x268)))))))
 (let (($x288 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x551 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x365 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x551)))
 (let (($x796 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x365 $x288)))))))
 (let (($x144 (and $x796 $x275)))
 (let (($x602 (and $x144 $x667)))
 (let (($x281 (and $x602 $x421)))
 (let (($x427 (and $x281 $x826)))
 (let (($x888 (=> $x427 $x259)))
 (not $x888)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 244 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x464 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x246 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x464)))
 (let ((?x806 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x737 (concat ?x806 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x479 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x24 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x580 (bvadd ?x24 (_ bv3 32))))
 (let ((?x686 (concat (select input.dst.llvm-mem ?x580) (concat ?x479 ?x737))))
 (let ((?x738 (bvmul (_ bv4294967295 32) ?x686)))
 (let ((?x318 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x67 (concat ?x318 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x218 (bvadd ?x27 (_ bv3 32))))
 (let ((?x385 (concat (select input.dst.llvm-mem ?x218) (concat ?x158 ?x67))))
 (let ((?x659 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x135 (concat ?x659 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x503 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x365 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x741 (bvadd ?x365 (_ bv3 32))))
 (let ((?x484 (concat (select input.dst.llvm-mem ?x741) (concat ?x503 ?x135))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x133)))
 (let ((?x824 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x650)))
 (let ((?x200 (bvadd (bvadd (bvadd ?x824 ?x484) ?x385) ?x738)))
 (let (($x567 (= ?x200 ?x246)))
 (let (($x843 (= $x567 true)))
 (let (($x209 (= $x843 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x705 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x693 (concat ?x522 (concat ?x452 (concat ?x705 ?x95)))))
 (let (($x745 (= ?x693 input.dst.llvm-%m)))
 (let (($x328 (= $x745 true)))
 (let (($x465 (= $x328 true)))
 (let (($x716 (= input.dst.llvm-%m ?x693)))
 (let ((?x626 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x150 (= (_ bv0 32) ?x626)))
 (let ((?x376 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x339 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x376)))
 (let (($x780 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x557 (and $x780 $x339)))
 (let (($x669 (and $x557 $x150)))
 (let (($x804 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x642 (and $x804 $x669)))
 (let (($x173 (and $x642 $x716)))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x447 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x795 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x795))))
 (let ((?x309 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x613 (bvuge ?x309 (_ bv1 32))))
 (=> $x613 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x301))))))))
 ))
 (let (($x509 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x309 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x613 (bvuge ?x309 (_ bv1 32))))
 (= $x613 (bvuge ?x124 (_ bv1 32)))))))
 ))
 (let (($x333 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x839 (= false false)))
 (let ((?x309 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x309 (_ bv0 32))))
 (=> $x13 $x839)))))
 ))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x309 (_ bv0 32))))
 (= $x13 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x193 (and $x379 $x333)))
 (let (($x325 (and $x193 $x509)))
 (let (($x568 (and $x325 $x636)))
 (let (($x411 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x709 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x596 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x116 (and true $x596)))
 (let (($x213 (= (bvand ?x365 (_ bv4294967292 32)) ?x365)))
 (let (($x247 (and $x213 $x116)))
 (let (($x232 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x24 (bvsub ?x24 (_ bv8 32))) (bvult ?x24 (bvsub ?x24 (_ bv8 32))))))
 (let (($x789 (and (and (and true $x232) $x247) $x709)))
 (let (($x240 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x605 (and true $x240)))
 (let (($x528 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x708 (and $x528 $x605)))
 (let (($x499 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x365 (bvsub ?x365 (_ bv12 32))) (bvult ?x365 (bvsub ?x365 (_ bv12 32))))))
 (let (($x387 (and (and (and true $x528) $x499) $x708)))
 (let (($x454 (and (and (and (and $x387 $x789) $x411) $x568) $x173)))
 (let (($x664 (= $x454 true)))
 (let (($x12 (= $x664 true)))
 (let (($x471 (= $x12 true)))
 (let (($x406 (= $x387 true)))
 (let (($x530 (= $x406 true)))
 (let (($x884 (= $x530 true)))
 (let (($x418 (and $x789 $x411)))
 (let (($x466 (= $x418 true)))
 (let (($x771 (= $x466 true)))
 (let (($x631 (= $x771 true)))
 (let (($x594 (and $x631 $x884)))
 (let (($x455 (and $x594 $x471)))
 (let (($x145 (and $x455 $x465)))
 (let ((?x343 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x587 (bvuge ?x343 (_ bv1 32))))
 (let ((?x262 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x262 (_ bv0 32))))
 (let (($x374 (and $x321 $x587)))
 (let ((?x460 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x460 (_ bv1 32))))
 (let (($x545 (and $x658 $x374)))
 (let ((?x280 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x828 (bvuge ?x280 (_ bv1 32))))
 (let (($x891 (and $x828 $x545)))
 (let (($x446 (and $x891 $x145)))
 (let ((?x119 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x483 (= ?x119 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x842 (=> $x828 $x483)))
 (let (($x747 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x651 (= $x828 $x747)))
 (let (($x839 (= false false)))
 (let (($x757 (= ?x280 (_ bv0 32))))
 (let (($x251 (=> $x757 $x839)))
 (let (($x167 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x850 (= $x757 $x167)))
 (let (($x493 (and $x850 $x251)))
 (let (($x146 (and $x493 $x651)))
 (let (($x310 (and $x146 $x842)))
 (let (($x184 (and $x310 $x446)))
 (let ((?x610 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x665 (= ?x610 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x810 (=> $x658 $x665)))
 (let (($x685 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x225 (= $x658 $x685)))
 (let (($x805 (= ?x460 (_ bv0 32))))
 (let (($x79 (=> $x805 $x839)))
 (let (($x360 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x688 (= $x805 $x360)))
 (let (($x65 (and $x688 $x79)))
 (let (($x732 (and $x65 $x225)))
 (let (($x728 (and $x732 $x810)))
 (let (($x538 (and $x728 $x184)))
 (let ((?x82 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x279 (= ?x82 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x233 (bvuge ?x262 (_ bv1 32))))
 (let (($x344 (=> $x233 $x279)))
 (let (($x41 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x510 (= $x233 $x41)))
 (let (($x256 (=> $x321 $x839)))
 (let (($x166 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x182 (= $x321 $x166)))
 (let (($x23 (and $x182 $x256)))
 (let (($x634 (and $x23 $x510)))
 (let (($x425 (and $x634 $x344)))
 (let (($x849 (and $x425 $x538)))
 (let (($x361 (= ?x464 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x769 (=> $x587 $x361)))
 (let (($x851 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x502 (= $x587 $x851)))
 (let (($x778 (= ?x343 (_ bv0 32))))
 (let (($x624 (=> $x778 $x839)))
 (let (($x758 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x126 (= $x778 $x758)))
 (let (($x673 (and $x126 $x624)))
 (let (($x98 (and $x673 $x502)))
 (let (($x254 (and $x98 $x769)))
 (let (($x811 (and $x254 $x849)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x564 (and $x73 $x811)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x809 (and $x122 $x564)))
 (let (($x889 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x195 (and $x889 $x809)))
 (let (($x419 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x57 (and $x419 $x195)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x573 (and $x164 $x57)))
 (let (($x772 (and $x839 $x573)))
 (let (($x21 (= ?x119 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x450 (and $x21 $x772)))
 (let (($x750 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x742 (and $x750 $x450)))
 (let (($x803 (and $x839 $x742)))
 (let (($x383 (= ?x610 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x236 (and $x383 $x803)))
 (let (($x390 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x768 (and $x390 $x236)))
 (let (($x424 (and $x839 $x768)))
 (let (($x207 (= ?x82 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x794 (and $x207 $x424)))
 (let (($x429 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x391 (and $x429 $x794)))
 (let (($x458 (and $x839 $x391)))
 (let (($x89 (= ?x464 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x518 (and $x89 $x458)))
 (let (($x88 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x370 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x442 $x88)))))))
 (let (($x389 (bvugt ?x24 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x580)))
 (let (($x648 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x389)))))))
 (let (($x802 (bvugt ?x365 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x717 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x741)))
 (let (($x727 (=> (bvule ?x365 (bvsub (bvadd ?x365 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x717 $x802)))))))
 (let (($x551 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x645 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x645)))
 (let (($x558 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x551)))))))
 (let (($x572 (and $x558 $x727)))
 (let (($x296 (and $x572 $x648)))
 (let (($x603 (and $x296 $x370)))
 (let (($x269 (and $x603 $x518)))
 (let (($x753 (=> $x269 $x209)))
 (not $x753))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x464 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x246 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x464)))
 (let ((?x806 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x737 (concat ?x806 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x479 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x24 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x580 (bvadd ?x24 (_ bv3 32))))
 (let ((?x686 (concat (select input.dst.llvm-mem ?x580) (concat ?x479 ?x737))))
 (let ((?x738 (bvmul (_ bv4294967295 32) ?x686)))
 (let ((?x318 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x67 (concat ?x318 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x218 (bvadd ?x27 (_ bv3 32))))
 (let ((?x385 (concat (select input.dst.llvm-mem ?x218) (concat ?x158 ?x67))))
 (let ((?x659 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x135 (concat ?x659 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x503 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x365 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x741 (bvadd ?x365 (_ bv3 32))))
 (let ((?x484 (concat (select input.dst.llvm-mem ?x741) (concat ?x503 ?x135))))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x133)))
 (let ((?x824 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x650)))
 (let ((?x200 (bvadd (bvadd (bvadd ?x824 ?x484) ?x385) ?x738)))
 (let (($x567 (= ?x200 ?x246)))
 (let (($x843 (= $x567 true)))
 (let (($x209 (= $x843 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x705 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x522 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x693 (concat ?x522 (concat ?x452 (concat ?x705 ?x95)))))
 (let (($x745 (= ?x693 input.dst.llvm-%m)))
 (let (($x328 (= $x745 true)))
 (let (($x465 (= $x328 true)))
 (let (($x716 (= input.dst.llvm-%m ?x693)))
 (let ((?x626 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x150 (= (_ bv0 32) ?x626)))
 (let ((?x376 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x339 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x376)))
 (let (($x780 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x557 (and $x780 $x339)))
 (let (($x669 (and $x557 $x150)))
 (let (($x804 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x642 (and $x804 $x669)))
 (let (($x173 (and $x642 $x716)))
 (let (($x636 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x447 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x795 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv1 32))) (select input.dst.llvm-mem ?x447))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x447 (_ bv2 32))) ?x795))))
 (let ((?x309 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x613 (bvuge ?x309 (_ bv1 32))))
 (=> $x613 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x301))))))))
 ))
 (let (($x509 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x309 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x613 (bvuge ?x309 (_ bv1 32))))
 (= $x613 (bvuge ?x124 (_ bv1 32)))))))
 ))
 (let (($x333 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x839 (= false false)))
 (let ((?x309 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x309 (_ bv0 32))))
 (=> $x13 $x839)))))
 ))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x309 (_ bv0 32))))
 (= $x13 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x193 (and $x379 $x333)))
 (let (($x325 (and $x193 $x509)))
 (let (($x568 (and $x325 $x636)))
 (let (($x411 (= (bvand ?x24 (_ bv4294967292 32)) ?x24)))
 (let (($x709 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x596 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x116 (and true $x596)))
 (let (($x213 (= (bvand ?x365 (_ bv4294967292 32)) ?x365)))
 (let (($x247 (and $x213 $x116)))
 (let (($x232 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x24 (bvsub ?x24 (_ bv8 32))) (bvult ?x24 (bvsub ?x24 (_ bv8 32))))))
 (let (($x789 (and (and (and true $x232) $x247) $x709)))
 (let (($x240 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x605 (and true $x240)))
 (let (($x528 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x708 (and $x528 $x605)))
 (let (($x499 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x365 (bvsub ?x365 (_ bv12 32))) (bvult ?x365 (bvsub ?x365 (_ bv12 32))))))
 (let (($x387 (and (and (and true $x528) $x499) $x708)))
 (let (($x454 (and (and (and (and $x387 $x789) $x411) $x568) $x173)))
 (let (($x664 (= $x454 true)))
 (let (($x12 (= $x664 true)))
 (let (($x471 (= $x12 true)))
 (let (($x406 (= $x387 true)))
 (let (($x530 (= $x406 true)))
 (let (($x884 (= $x530 true)))
 (let (($x418 (and $x789 $x411)))
 (let (($x466 (= $x418 true)))
 (let (($x771 (= $x466 true)))
 (let (($x631 (= $x771 true)))
 (let (($x594 (and $x631 $x884)))
 (let (($x455 (and $x594 $x471)))
 (let (($x145 (and $x455 $x465)))
 (let ((?x343 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x587 (bvuge ?x343 (_ bv1 32))))
 (let ((?x262 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x321 (= ?x262 (_ bv0 32))))
 (let (($x374 (and $x321 $x587)))
 (let ((?x460 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x658 (bvuge ?x460 (_ bv1 32))))
 (let (($x545 (and $x658 $x374)))
 (let ((?x280 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x828 (bvuge ?x280 (_ bv1 32))))
 (let (($x891 (and $x828 $x545)))
 (let (($x446 (and $x891 $x145)))
 (let ((?x119 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x483 (= ?x119 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x842 (=> $x828 $x483)))
 (let (($x747 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x651 (= $x828 $x747)))
 (let (($x839 (= false false)))
 (let (($x757 (= ?x280 (_ bv0 32))))
 (let (($x251 (=> $x757 $x839)))
 (let (($x167 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x850 (= $x757 $x167)))
 (let (($x493 (and $x850 $x251)))
 (let (($x146 (and $x493 $x651)))
 (let (($x310 (and $x146 $x842)))
 (let (($x184 (and $x310 $x446)))
 (let ((?x610 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x665 (= ?x610 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x810 (=> $x658 $x665)))
 (let (($x685 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x225 (= $x658 $x685)))
 (let (($x805 (= ?x460 (_ bv0 32))))
 (let (($x79 (=> $x805 $x839)))
 (let (($x360 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x688 (= $x805 $x360)))
 (let (($x65 (and $x688 $x79)))
 (let (($x732 (and $x65 $x225)))
 (let (($x728 (and $x732 $x810)))
 (let (($x538 (and $x728 $x184)))
 (let ((?x82 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x279 (= ?x82 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x233 (bvuge ?x262 (_ bv1 32))))
 (let (($x344 (=> $x233 $x279)))
 (let (($x41 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x510 (= $x233 $x41)))
 (let (($x256 (=> $x321 $x839)))
 (let (($x166 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x182 (= $x321 $x166)))
 (let (($x23 (and $x182 $x256)))
 (let (($x634 (and $x23 $x510)))
 (let (($x425 (and $x634 $x344)))
 (let (($x849 (and $x425 $x538)))
 (let (($x361 (= ?x464 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x769 (=> $x587 $x361)))
 (let (($x851 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x502 (= $x587 $x851)))
 (let (($x778 (= ?x343 (_ bv0 32))))
 (let (($x624 (=> $x778 $x839)))
 (let (($x758 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x126 (= $x778 $x758)))
 (let (($x673 (and $x126 $x624)))
 (let (($x98 (and $x673 $x502)))
 (let (($x254 (and $x98 $x769)))
 (let (($x811 (and $x254 $x849)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x564 (and $x73 $x811)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x809 (and $x122 $x564)))
 (let (($x889 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x195 (and $x889 $x809)))
 (let (($x419 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x57 (and $x419 $x195)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x573 (and $x164 $x57)))
 (let (($x772 (and $x839 $x573)))
 (let (($x21 (= ?x119 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x450 (and $x21 $x772)))
 (let (($x750 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x742 (and $x750 $x450)))
 (let (($x803 (and $x839 $x742)))
 (let (($x383 (= ?x610 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x236 (and $x383 $x803)))
 (let (($x390 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x768 (and $x390 $x236)))
 (let (($x424 (and $x839 $x768)))
 (let (($x207 (= ?x82 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x794 (and $x207 $x424)))
 (let (($x429 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x391 (and $x429 $x794)))
 (let (($x458 (and $x839 $x391)))
 (let (($x89 (= ?x464 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x518 (and $x89 $x458)))
 (let (($x88 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x442 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x370 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x442 $x88)))))))
 (let (($x389 (bvugt ?x24 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x580)))
 (let (($x648 (=> (bvule ?x24 (bvsub (bvadd ?x24 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x389)))))))
 (let (($x802 (bvugt ?x365 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x717 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x741)))
 (let (($x727 (=> (bvule ?x365 (bvsub (bvadd ?x365 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x717 $x802)))))))
 (let (($x551 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x645 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x645)))
 (let (($x558 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x551)))))))
 (let (($x572 (and $x558 $x727)))
 (let (($x296 (and $x572 $x648)))
 (let (($x603 (and $x296 $x370)))
 (let (($x269 (and $x603 $x518)))
 (let (($x753 (=> $x269 $x209)))
 (not $x753))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 243 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x502 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x256 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x212 (bvadd ?x256 ?x502)))
 (let ((?x841 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x581 (concat ?x841 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x405 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x243 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x646 (bvadd ?x243 (_ bv3 32))))
 (let ((?x822 (concat (select input.dst.llvm-mem ?x646) (concat ?x405 ?x581))))
 (let ((?x816 (bvmul (_ bv4294967295 32) ?x822)))
 (let ((?x363 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x81 (concat ?x363 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x720 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x580 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x171 (bvadd ?x580 (_ bv3 32))))
 (let ((?x451 (concat (select input.dst.llvm-mem ?x171) (concat ?x720 ?x81))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x638 (concat ?x316 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x837 (bvadd ?x132 (_ bv3 32))))
 (let ((?x820 (concat (select input.dst.llvm-mem ?x837) (concat ?x612 ?x638))))
 (let ((?x577 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x577)))
 (let ((?x628 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x86)))
 (let ((?x590 (bvadd (bvadd (bvadd ?x628 ?x820) ?x451) ?x816)))
 (let (($x834 (= ?x590 ?x212)))
 (let (($x599 (= $x834 true)))
 (let (($x401 (= $x599 true)))
 (let ((?x197 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x652 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x798 (concat ?x441 (concat ?x652 (concat ?x305 ?x197)))))
 (let (($x561 (= ?x798 input.dst.llvm-%m)))
 (let (($x6 (= $x561 true)))
 (let (($x571 (= $x6 true)))
 (let (($x600 (= input.dst.llvm-%m ?x798)))
 (let ((?x830 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x887 (= (_ bv0 32) ?x830)))
 (let ((?x50 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x55 $x71)))
 (let (($x287 (and $x127 $x887)))
 (let (($x302 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x640 (and $x302 $x287)))
 (let (($x53 (and $x640 $x600)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x410 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv1 32))) (select input.dst.llvm-mem ?x410))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv2 32))) ?x366))))
 (let ((?x94 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (bvuge ?x94 (_ bv1 32))))
 (=> $x500 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x202))))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x819 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x94 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (bvuge ?x94 (_ bv1 32))))
 (= $x500 (bvuge ?x819 (_ bv1 32)))))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x94 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x94 (_ bv0 32))))
 (=> $x170 $x119)))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x94 (_ bv0 32))))
 (= $x170 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x412 (and $x526 $x327)))
 (let (($x326 (and $x412 $x746)))
 (let (($x689 (and $x326 $x191)))
 (let (($x722 (= (bvand ?x243 (_ bv4294967292 32)) ?x243)))
 (let (($x301 (= (bvand ?x580 (_ bv4294967292 32)) ?x580)))
 (let (($x210 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x580 (bvsub ?x580 (_ bv4 32))) (bvult ?x580 (bvsub ?x580 (_ bv4 32))))))
 (let (($x595 (and true $x210)))
 (let (($x886 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x795 (and $x886 $x595)))
 (let (($x174 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x243 (bvsub ?x243 (_ bv8 32))) (bvult ?x243 (bvsub ?x243 (_ bv8 32))))))
 (let (($x636 (and (and (and true $x174) $x795) $x301)))
 (let (($x705 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x95 (and true $x705)))
 (let (($x557 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x157 (and $x557 $x95)))
 (let (($x358 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x132 (bvsub ?x132 (_ bv12 32))) (bvult ?x132 (bvsub ?x132 (_ bv12 32))))))
 (let (($x716 (and (and (and true $x557) $x358) $x157)))
 (let (($x489 (and (and (and (and $x716 $x636) $x722) $x689) $x53)))
 (let (($x743 (= $x489 true)))
 (let (($x367 (= $x743 true)))
 (let (($x420 (= $x367 true)))
 (let (($x173 (= $x716 true)))
 (let (($x454 (= $x173 true)))
 (let (($x664 (= $x454 true)))
 (let (($x304 (and $x636 $x722)))
 (let (($x804 (= $x304 true)))
 (let (($x780 (= $x804 true)))
 (let (($x376 (= $x780 true)))
 (let (($x12 (and $x376 $x664)))
 (let (($x662 (and $x12 $x420)))
 (let (($x575 (and $x662 $x571)))
 (let ((?x225 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x732 (= ?x225 (_ bv0 32))))
 (let ((?x891 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x891 (_ bv0 32))))
 (let (($x193 (and $x297 $x732)))
 (let ((?x466 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x499 (bvuge ?x466 (_ bv1 32))))
 (let (($x613 (and $x499 $x193)))
 (let ((?x436 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x436 (_ bv1 32))))
 (let (($x761 (and $x124 $x613)))
 (let (($x782 (and $x761 $x575)))
 (let (($x379 (= ?x256 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x655 (=> $x124 $x379)))
 (let (($x486 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x430 (= $x124 $x486)))
 (let (($x119 (= false false)))
 (let (($x609 (= ?x436 (_ bv0 32))))
 (let (($x35 (=> $x609 $x119)))
 (let (($x884 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x308 (= $x609 $x884)))
 (let (($x309 (and $x308 $x35)))
 (let (($x514 (and $x309 $x430)))
 (let (($x333 (and $x514 $x655)))
 (let (($x228 (and $x333 $x782)))
 (let (($x885 (= ?x502 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x169 (=> $x499 $x885)))
 (let (($x752 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x487 (= $x499 $x752)))
 (let (($x771 (= ?x466 (_ bv0 32))))
 (let (($x356 (=> $x771 $x119)))
 (let (($x411 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x631 (= $x771 $x411)))
 (let (($x528 (and $x631 $x356)))
 (let (($x676 (and $x528 $x487)))
 (let (($x189 (and $x676 $x169)))
 (let (($x259 (and $x189 $x228)))
 (let ((?x73 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x78 (= ?x73 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x248 (bvuge ?x891 (_ bv1 32))))
 (let (($x596 (=> $x248 $x78)))
 (let (($x213 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x284 (= $x248 $x213)))
 (let (($x31 (=> $x297 $x119)))
 (let (($x374 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x211 (= $x297 $x374)))
 (let (($x578 (and $x211 $x31)))
 (let (($x253 (and $x578 $x284)))
 (let (($x116 (and $x253 $x596)))
 (let (($x888 (and $x116 $x259)))
 (let ((?x222 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x493 (= ?x222 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x167 (bvuge ?x225 (_ bv1 32))))
 (let (($x828 (=> $x167 $x493)))
 (let (($x142 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x850 (= $x167 $x142)))
 (let (($x665 (=> $x732 $x119)))
 (let (($x658 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x181 (= $x732 $x658)))
 (let (($x810 (and $x181 $x665)))
 (let (($x251 (and $x810 $x850)))
 (let (($x747 (and $x251 $x828)))
 (let (($x128 (and $x747 $x888)))
 (let (($x460 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x684 (and $x460 $x128)))
 (let (($x425 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x97 (and $x425 $x684)))
 (let (($x279 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x482 (and $x279 $x97)))
 (let (($x634 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x492 (and $x634 $x482)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x661 (and $x41 $x492)))
 (let (($x703 (and $x119 $x661)))
 (let (($x23 (= ?x256 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x185 (and $x23 $x703)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x291 (and $x361 $x185)))
 (let (($x733 (and $x119 $x291)))
 (let (($x98 (= ?x502 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x29 (and $x98 $x733)))
 (let (($x778 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x159 (and $x778 $x29)))
 (let (($x87 (and $x119 $x159)))
 (let (($x239 (= ?x73 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x622 (and $x239 $x87)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x359 (and $x21 $x622)))
 (let (($x194 (and $x119 $x359)))
 (let (($x750 (= ?x222 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x840 (and $x750 $x194)))
 (let (($x281 (bvugt ?x580 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x421 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x89 (=> (bvule ?x580 (bvsub (bvadd ?x580 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x421 $x281)))))))
 (let (($x602 (bvugt ?x243 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x667 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x646)))
 (let (($x759 (=> (bvule ?x243 (bvsub (bvadd ?x243 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x667 $x602)))))))
 (let (($x144 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x837)))
 (let (($x80 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x275 $x144)))))))
 (let (($x19 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x698 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x645 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x698)))
 (let (($x268 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x645 $x19)))))))
 (let (($x298 (and $x268 $x80)))
 (let (($x337 (and $x298 $x759)))
 (let (($x620 (and $x337 $x89)))
 (let (($x512 (and $x620 $x840)))
 (let (($x827 (=> $x512 $x401)))
 (not $x827))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x502 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x256 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x212 (bvadd ?x256 ?x502)))
 (let ((?x841 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x581 (concat ?x841 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x405 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x243 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x646 (bvadd ?x243 (_ bv3 32))))
 (let ((?x822 (concat (select input.dst.llvm-mem ?x646) (concat ?x405 ?x581))))
 (let ((?x816 (bvmul (_ bv4294967295 32) ?x822)))
 (let ((?x363 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x81 (concat ?x363 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x720 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x580 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x171 (bvadd ?x580 (_ bv3 32))))
 (let ((?x451 (concat (select input.dst.llvm-mem ?x171) (concat ?x720 ?x81))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x638 (concat ?x316 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x837 (bvadd ?x132 (_ bv3 32))))
 (let ((?x820 (concat (select input.dst.llvm-mem ?x837) (concat ?x612 ?x638))))
 (let ((?x577 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x577)))
 (let ((?x628 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x86)))
 (let ((?x590 (bvadd (bvadd (bvadd ?x628 ?x820) ?x451) ?x816)))
 (let (($x834 (= ?x590 ?x212)))
 (let (($x599 (= $x834 true)))
 (let (($x401 (= $x599 true)))
 (let ((?x197 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x305 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x652 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x798 (concat ?x441 (concat ?x652 (concat ?x305 ?x197)))))
 (let (($x561 (= ?x798 input.dst.llvm-%m)))
 (let (($x6 (= $x561 true)))
 (let (($x571 (= $x6 true)))
 (let (($x600 (= input.dst.llvm-%m ?x798)))
 (let ((?x830 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x887 (= (_ bv0 32) ?x830)))
 (let ((?x50 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x55 $x71)))
 (let (($x287 (and $x127 $x887)))
 (let (($x302 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x640 (and $x302 $x287)))
 (let (($x53 (and $x640 $x600)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x410 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x366 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv1 32))) (select input.dst.llvm-mem ?x410))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x410 (_ bv2 32))) ?x366))))
 (let ((?x94 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (bvuge ?x94 (_ bv1 32))))
 (=> $x500 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x202))))))))
 ))
 (let (($x746 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x819 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x94 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x500 (bvuge ?x94 (_ bv1 32))))
 (= $x500 (bvuge ?x819 (_ bv1 32)))))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x119 (= false false)))
 (let ((?x94 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x94 (_ bv0 32))))
 (=> $x170 $x119)))))
 ))
 (let (($x526 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x94 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (= ?x94 (_ bv0 32))))
 (= $x170 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x412 (and $x526 $x327)))
 (let (($x326 (and $x412 $x746)))
 (let (($x689 (and $x326 $x191)))
 (let (($x722 (= (bvand ?x243 (_ bv4294967292 32)) ?x243)))
 (let (($x301 (= (bvand ?x580 (_ bv4294967292 32)) ?x580)))
 (let (($x210 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x580 (bvsub ?x580 (_ bv4 32))) (bvult ?x580 (bvsub ?x580 (_ bv4 32))))))
 (let (($x595 (and true $x210)))
 (let (($x886 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x795 (and $x886 $x595)))
 (let (($x174 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x243 (bvsub ?x243 (_ bv8 32))) (bvult ?x243 (bvsub ?x243 (_ bv8 32))))))
 (let (($x636 (and (and (and true $x174) $x795) $x301)))
 (let (($x705 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x95 (and true $x705)))
 (let (($x557 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x157 (and $x557 $x95)))
 (let (($x358 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x132 (bvsub ?x132 (_ bv12 32))) (bvult ?x132 (bvsub ?x132 (_ bv12 32))))))
 (let (($x716 (and (and (and true $x557) $x358) $x157)))
 (let (($x489 (and (and (and (and $x716 $x636) $x722) $x689) $x53)))
 (let (($x743 (= $x489 true)))
 (let (($x367 (= $x743 true)))
 (let (($x420 (= $x367 true)))
 (let (($x173 (= $x716 true)))
 (let (($x454 (= $x173 true)))
 (let (($x664 (= $x454 true)))
 (let (($x304 (and $x636 $x722)))
 (let (($x804 (= $x304 true)))
 (let (($x780 (= $x804 true)))
 (let (($x376 (= $x780 true)))
 (let (($x12 (and $x376 $x664)))
 (let (($x662 (and $x12 $x420)))
 (let (($x575 (and $x662 $x571)))
 (let ((?x225 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x732 (= ?x225 (_ bv0 32))))
 (let ((?x891 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x891 (_ bv0 32))))
 (let (($x193 (and $x297 $x732)))
 (let ((?x466 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x499 (bvuge ?x466 (_ bv1 32))))
 (let (($x613 (and $x499 $x193)))
 (let ((?x436 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x436 (_ bv1 32))))
 (let (($x761 (and $x124 $x613)))
 (let (($x782 (and $x761 $x575)))
 (let (($x379 (= ?x256 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x655 (=> $x124 $x379)))
 (let (($x486 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x430 (= $x124 $x486)))
 (let (($x119 (= false false)))
 (let (($x609 (= ?x436 (_ bv0 32))))
 (let (($x35 (=> $x609 $x119)))
 (let (($x884 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x308 (= $x609 $x884)))
 (let (($x309 (and $x308 $x35)))
 (let (($x514 (and $x309 $x430)))
 (let (($x333 (and $x514 $x655)))
 (let (($x228 (and $x333 $x782)))
 (let (($x885 (= ?x502 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x169 (=> $x499 $x885)))
 (let (($x752 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x487 (= $x499 $x752)))
 (let (($x771 (= ?x466 (_ bv0 32))))
 (let (($x356 (=> $x771 $x119)))
 (let (($x411 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x631 (= $x771 $x411)))
 (let (($x528 (and $x631 $x356)))
 (let (($x676 (and $x528 $x487)))
 (let (($x189 (and $x676 $x169)))
 (let (($x259 (and $x189 $x228)))
 (let ((?x73 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x78 (= ?x73 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x248 (bvuge ?x891 (_ bv1 32))))
 (let (($x596 (=> $x248 $x78)))
 (let (($x213 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x284 (= $x248 $x213)))
 (let (($x31 (=> $x297 $x119)))
 (let (($x374 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x211 (= $x297 $x374)))
 (let (($x578 (and $x211 $x31)))
 (let (($x253 (and $x578 $x284)))
 (let (($x116 (and $x253 $x596)))
 (let (($x888 (and $x116 $x259)))
 (let ((?x222 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x493 (= ?x222 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x167 (bvuge ?x225 (_ bv1 32))))
 (let (($x828 (=> $x167 $x493)))
 (let (($x142 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x850 (= $x167 $x142)))
 (let (($x665 (=> $x732 $x119)))
 (let (($x658 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x181 (= $x732 $x658)))
 (let (($x810 (and $x181 $x665)))
 (let (($x251 (and $x810 $x850)))
 (let (($x747 (and $x251 $x828)))
 (let (($x128 (and $x747 $x888)))
 (let (($x460 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x684 (and $x460 $x128)))
 (let (($x425 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x97 (and $x425 $x684)))
 (let (($x279 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x482 (and $x279 $x97)))
 (let (($x634 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x492 (and $x634 $x482)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x661 (and $x41 $x492)))
 (let (($x703 (and $x119 $x661)))
 (let (($x23 (= ?x256 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x185 (and $x23 $x703)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x291 (and $x361 $x185)))
 (let (($x733 (and $x119 $x291)))
 (let (($x98 (= ?x502 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x29 (and $x98 $x733)))
 (let (($x778 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x159 (and $x778 $x29)))
 (let (($x87 (and $x119 $x159)))
 (let (($x239 (= ?x73 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x622 (and $x239 $x87)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x359 (and $x21 $x622)))
 (let (($x194 (and $x119 $x359)))
 (let (($x750 (= ?x222 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x840 (and $x750 $x194)))
 (let (($x281 (bvugt ?x580 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x421 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x89 (=> (bvule ?x580 (bvsub (bvadd ?x580 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x421 $x281)))))))
 (let (($x602 (bvugt ?x243 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x667 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x646)))
 (let (($x759 (=> (bvule ?x243 (bvsub (bvadd ?x243 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x667 $x602)))))))
 (let (($x144 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x837)))
 (let (($x80 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x275 $x144)))))))
 (let (($x19 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x698 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x645 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x698)))
 (let (($x268 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x645 $x19)))))))
 (let (($x298 (and $x268 $x80)))
 (let (($x337 (and $x298 $x759)))
 (let (($x620 (and $x337 $x89)))
 (let (($x512 (and $x620 $x840)))
 (let (($x827 (=> $x512 $x401)))
 (not $x827))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 243 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x460 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x360 (bvmul (_ bv4294967295 32) ?x460)))
 (let ((?x728 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x360)))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x651 (concat ?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x540 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x389 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x153 (bvadd ?x389 (_ bv3 32))))
 (let ((?x283 (concat (select input.dst.llvm-mem ?x153) (concat ?x540 ?x651))))
 (let ((?x553 (bvmul (_ bv4294967295 32) ?x283)))
 (let ((?x488 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x177 (concat ?x488 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x646 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x432 (bvadd ?x646 (_ bv3 32))))
 (let ((?x709 (concat (select input.dst.llvm-mem ?x432) (concat ?x247 ?x177))))
 (let ((?x480 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x469 (concat ?x480 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x404 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x645 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x779 (bvadd ?x645 (_ bv3 32))))
 (let ((?x708 (concat (select input.dst.llvm-mem ?x779) (concat ?x404 ?x469))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x490 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x554)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x490)))
 (let ((?x679 (bvadd (bvadd (bvadd ?x369 ?x708) ?x709) ?x553)))
 (let (($x598 (= ?x679 ?x728)))
 (let (($x280 (= $x598 true)))
 (let (($x757 (= $x280 true)))
 (let ((?x501 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x318 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x793 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x533 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x385 (concat ?x533 (concat ?x793 (concat ?x318 ?x501)))))
 (let (($x48 (= ?x385 input.dst.llvm-%m)))
 (let (($x246 (= $x48 true)))
 (let (($x567 (= $x246 true)))
 (let (($x67 (= input.dst.llvm-%m ?x385)))
 (let ((?x849 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x534 (= (_ bv0 32) ?x849)))
 (let ((?x446 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x446)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x538 (and $x145 $x184)))
 (let (($x484 (and $x538 $x534)))
 (let (($x328 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x328 $x484)))
 (let (($x346 (and $x244 $x67)))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x718 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv1 32))) (select input.dst.llvm-mem ?x718))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv2 32))) ?x525))))
 (let ((?x589 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x811 (bvuge ?x589 (_ bv1 32))))
 (=> $x811 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x650))))))))
 ))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x644 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x589 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x811 (bvuge ?x589 (_ bv1 32))))
 (= $x811 (bvuge ?x644 (_ bv1 32)))))))
 ))
 (let (($x294 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x256 (= false false)))
 (let ((?x589 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x758 (= ?x589 (_ bv0 32))))
 (=> $x758 $x256)))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x589 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x758 (= ?x589 (_ bv0 32))))
 (= $x758 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x419 (and $x624 $x294)))
 (let (($x57 (and $x419 $x195)))
 (let (($x455 (and $x57 $x465)))
 (let (($x320 (= (bvand ?x389 (_ bv4294967292 32)) ?x389)))
 (let (($x202 (= (bvand ?x646 (_ bv4294967292 32)) ?x646)))
 (let (($x537 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x646 (bvsub ?x646 (_ bv4 32))) (bvult ?x646 (bvsub ?x646 (_ bv4 32))))))
 (let (($x799 (and true $x537)))
 (let (($x403 (= (bvand ?x645 (_ bv4294967292 32)) ?x645)))
 (let (($x366 (and $x403 $x799)))
 (let (($x573 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x389 (bvsub ?x389 (_ bv8 32))) (bvult ?x389 (bvsub ?x389 (_ bv8 32))))))
 (let (($x191 (and (and (and true $x573) $x366) $x202)))
 (let (($x305 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x197 (and true $x305)))
 (let (($x127 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x59 (and $x127 $x197)))
 (let (($x823 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x645 (bvsub ?x645 (_ bv12 32))) (bvult ?x645 (bvsub ?x645 (_ bv12 32))))))
 (let (($x600 (and (and (and true $x127) $x823) $x59)))
 (let (($x744 (and (and (and (and $x600 $x191) $x320) $x455) $x346)))
 (let (($x737 (= $x744 true)))
 (let (($x686 (= $x737 true)))
 (let (($x738 (= $x686 true)))
 (let (($x53 (= $x600 true)))
 (let (($x489 (= $x53 true)))
 (let (($x743 (= $x489 true)))
 (let (($x105 (and $x191 $x320)))
 (let (($x302 (= $x105 true)))
 (let (($x55 (= $x302 true)))
 (let (($x50 (= $x55 true)))
 (let (($x367 (and $x50 $x743)))
 (let (($x200 (and $x367 $x738)))
 (let (($x209 (and $x200 $x567)))
 (let ((?x487 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x884 (bvuge ?x487 (_ bv1 32))))
 (let ((?x761 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x761 (_ bv1 32))))
 (let (($x412 (and $x221 $x884)))
 (let ((?x804 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x780 (= ?x804 (_ bv0 32))))
 (let (($x500 (and $x780 $x412)))
 (let ((?x293 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x293 (_ bv1 32))))
 (let (($x74 (and $x819 $x500)))
 (let (($x843 (and $x74 $x209)))
 (let ((?x31 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x526 (= ?x31 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x352 (=> $x819 $x526)))
 (let (($x99 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x201 (= $x819 $x99)))
 (let (($x256 (= false false)))
 (let (($x627 (= ?x293 (_ bv0 32))))
 (let (($x264 (=> $x627 $x256)))
 (let (($x664 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x58 (= $x627 $x664)))
 (let (($x94 (and $x58 $x264)))
 (let (($x138 (and $x94 $x201)))
 (let (($x327 (and $x138 $x352)))
 (let (($x753 (and $x327 $x843)))
 (let ((?x850 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x522 (= ?x850 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x358 (bvuge ?x804 (_ bv1 32))))
 (let (($x452 (=> $x358 $x522)))
 (let (($x642 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x693 (= $x358 $x642)))
 (let (($x339 (=> $x780 $x256)))
 (let (($x722 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x376 (= $x780 $x722)))
 (let (($x557 (and $x376 $x339)))
 (let (($x394 (and $x557 $x693)))
 (let (($x539 (and $x394 $x452)))
 (let (($x635 (and $x539 $x753)))
 (let (($x428 (= ?x460 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x210 (=> $x221 $x428)))
 (let (($x886 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x767 (= $x221 $x886)))
 (let (($x509 (= ?x761 (_ bv0 32))))
 (let (($x325 (=> $x509 $x256)))
 (let (($x193 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x467 (= $x509 $x193)))
 (let (($x104 (and $x467 $x325)))
 (let (($x180 (and $x104 $x767)))
 (let (($x595 (and $x180 $x210)))
 (let (($x69 (and $x595 $x635)))
 (let ((?x20 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x309 (= ?x20 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x124 (=> $x884 $x309)))
 (let (($x406 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x308 (= $x884 $x406)))
 (let (($x676 (= ?x487 (_ bv0 32))))
 (let (($x885 (=> $x676 $x256)))
 (let (($x499 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x790 (= $x676 $x499)))
 (let (($x169 (and $x790 $x885)))
 (let (($x35 (and $x169 $x308)))
 (let (($x486 (and $x35 $x124)))
 (let (($x618 (and $x486 $x69)))
 (let (($x466 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x639 (and $x466 $x618)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x690 (and $x116 $x639)))
 (let (($x78 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x141 (and $x78 $x690)))
 (let (($x253 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x26 (and $x253 $x141)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x285 (and $x213 $x26)))
 (let (($x751 (and $x256 $x285)))
 (let (($x578 (= ?x31 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x347 (and $x578 $x751)))
 (let (($x493 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x792 (and $x493 $x347)))
 (let (($x314 (and $x256 $x792)))
 (let (($x251 (= ?x850 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x835 (and $x251 $x314)))
 (let (($x732 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x351 (and $x732 $x835)))
 (let (($x445 (and $x256 $x351)))
 (let (($x685 (= ?x460 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x162 (and $x685 $x445)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x324 (and $x23 $x162)))
 (let (($x66 (and $x256 $x324)))
 (let (($x361 (= ?x20 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x438 (and $x361 $x66)))
 (let (($x603 (bvugt ?x646 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x432)))
 (let (($x750 (=> (bvule ?x646 (bvsub (bvadd ?x646 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x370 $x603)))))))
 (let (($x296 (bvugt ?x389 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x648 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x88 (=> (bvule ?x389 (bvsub (bvadd ?x389 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x648 $x296)))))))
 (let (($x572 (bvugt ?x645 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x727 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x779)))
 (let (($x219 (=> (bvule ?x645 (bvsub (bvadd ?x645 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x727 $x572)))))))
 (let (($x551 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x348 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x802 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x348 $x551)))))))
 (let (($x24 (and $x802 $x219)))
 (let (($x461 (and $x24 $x88)))
 (let (($x614 (and $x461 $x750)))
 (let (($x414 (and $x614 $x438)))
 (let (($x186 (=> $x414 $x757)))
 (not $x186)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x460 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x360 (bvmul (_ bv4294967295 32) ?x460)))
 (let ((?x728 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x360)))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x651 (concat ?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x540 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x389 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x153 (bvadd ?x389 (_ bv3 32))))
 (let ((?x283 (concat (select input.dst.llvm-mem ?x153) (concat ?x540 ?x651))))
 (let ((?x553 (bvmul (_ bv4294967295 32) ?x283)))
 (let ((?x488 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x177 (concat ?x488 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x646 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x432 (bvadd ?x646 (_ bv3 32))))
 (let ((?x709 (concat (select input.dst.llvm-mem ?x432) (concat ?x247 ?x177))))
 (let ((?x480 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x469 (concat ?x480 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x404 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x645 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x779 (bvadd ?x645 (_ bv3 32))))
 (let ((?x708 (concat (select input.dst.llvm-mem ?x779) (concat ?x404 ?x469))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x490 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x554)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x490)))
 (let ((?x679 (bvadd (bvadd (bvadd ?x369 ?x708) ?x709) ?x553)))
 (let (($x598 (= ?x679 ?x728)))
 (let (($x280 (= $x598 true)))
 (let (($x757 (= $x280 true)))
 (let ((?x501 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x318 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x793 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x533 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x385 (concat ?x533 (concat ?x793 (concat ?x318 ?x501)))))
 (let (($x48 (= ?x385 input.dst.llvm-%m)))
 (let (($x246 (= $x48 true)))
 (let (($x567 (= $x246 true)))
 (let (($x67 (= input.dst.llvm-%m ?x385)))
 (let ((?x849 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x534 (= (_ bv0 32) ?x849)))
 (let ((?x446 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x446)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x538 (and $x145 $x184)))
 (let (($x484 (and $x538 $x534)))
 (let (($x328 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x328 $x484)))
 (let (($x346 (and $x244 $x67)))
 (let (($x465 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x718 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv1 32))) (select input.dst.llvm-mem ?x718))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv2 32))) ?x525))))
 (let ((?x589 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x811 (bvuge ?x589 (_ bv1 32))))
 (=> $x811 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x650))))))))
 ))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x644 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x589 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x811 (bvuge ?x589 (_ bv1 32))))
 (= $x811 (bvuge ?x644 (_ bv1 32)))))))
 ))
 (let (($x294 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x256 (= false false)))
 (let ((?x589 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x758 (= ?x589 (_ bv0 32))))
 (=> $x758 $x256)))))
 ))
 (let (($x624 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x589 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x758 (= ?x589 (_ bv0 32))))
 (= $x758 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x419 (and $x624 $x294)))
 (let (($x57 (and $x419 $x195)))
 (let (($x455 (and $x57 $x465)))
 (let (($x320 (= (bvand ?x389 (_ bv4294967292 32)) ?x389)))
 (let (($x202 (= (bvand ?x646 (_ bv4294967292 32)) ?x646)))
 (let (($x537 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x646 (bvsub ?x646 (_ bv4 32))) (bvult ?x646 (bvsub ?x646 (_ bv4 32))))))
 (let (($x799 (and true $x537)))
 (let (($x403 (= (bvand ?x645 (_ bv4294967292 32)) ?x645)))
 (let (($x366 (and $x403 $x799)))
 (let (($x573 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x389 (bvsub ?x389 (_ bv8 32))) (bvult ?x389 (bvsub ?x389 (_ bv8 32))))))
 (let (($x191 (and (and (and true $x573) $x366) $x202)))
 (let (($x305 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x197 (and true $x305)))
 (let (($x127 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x59 (and $x127 $x197)))
 (let (($x823 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x645 (bvsub ?x645 (_ bv12 32))) (bvult ?x645 (bvsub ?x645 (_ bv12 32))))))
 (let (($x600 (and (and (and true $x127) $x823) $x59)))
 (let (($x744 (and (and (and (and $x600 $x191) $x320) $x455) $x346)))
 (let (($x737 (= $x744 true)))
 (let (($x686 (= $x737 true)))
 (let (($x738 (= $x686 true)))
 (let (($x53 (= $x600 true)))
 (let (($x489 (= $x53 true)))
 (let (($x743 (= $x489 true)))
 (let (($x105 (and $x191 $x320)))
 (let (($x302 (= $x105 true)))
 (let (($x55 (= $x302 true)))
 (let (($x50 (= $x55 true)))
 (let (($x367 (and $x50 $x743)))
 (let (($x200 (and $x367 $x738)))
 (let (($x209 (and $x200 $x567)))
 (let ((?x487 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x884 (bvuge ?x487 (_ bv1 32))))
 (let ((?x761 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x761 (_ bv1 32))))
 (let (($x412 (and $x221 $x884)))
 (let ((?x804 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x780 (= ?x804 (_ bv0 32))))
 (let (($x500 (and $x780 $x412)))
 (let ((?x293 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x819 (bvuge ?x293 (_ bv1 32))))
 (let (($x74 (and $x819 $x500)))
 (let (($x843 (and $x74 $x209)))
 (let ((?x31 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x526 (= ?x31 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x352 (=> $x819 $x526)))
 (let (($x99 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x201 (= $x819 $x99)))
 (let (($x256 (= false false)))
 (let (($x627 (= ?x293 (_ bv0 32))))
 (let (($x264 (=> $x627 $x256)))
 (let (($x664 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x58 (= $x627 $x664)))
 (let (($x94 (and $x58 $x264)))
 (let (($x138 (and $x94 $x201)))
 (let (($x327 (and $x138 $x352)))
 (let (($x753 (and $x327 $x843)))
 (let ((?x850 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x522 (= ?x850 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x358 (bvuge ?x804 (_ bv1 32))))
 (let (($x452 (=> $x358 $x522)))
 (let (($x642 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x693 (= $x358 $x642)))
 (let (($x339 (=> $x780 $x256)))
 (let (($x722 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x376 (= $x780 $x722)))
 (let (($x557 (and $x376 $x339)))
 (let (($x394 (and $x557 $x693)))
 (let (($x539 (and $x394 $x452)))
 (let (($x635 (and $x539 $x753)))
 (let (($x428 (= ?x460 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x210 (=> $x221 $x428)))
 (let (($x886 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x767 (= $x221 $x886)))
 (let (($x509 (= ?x761 (_ bv0 32))))
 (let (($x325 (=> $x509 $x256)))
 (let (($x193 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x467 (= $x509 $x193)))
 (let (($x104 (and $x467 $x325)))
 (let (($x180 (and $x104 $x767)))
 (let (($x595 (and $x180 $x210)))
 (let (($x69 (and $x595 $x635)))
 (let ((?x20 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x309 (= ?x20 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x124 (=> $x884 $x309)))
 (let (($x406 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x308 (= $x884 $x406)))
 (let (($x676 (= ?x487 (_ bv0 32))))
 (let (($x885 (=> $x676 $x256)))
 (let (($x499 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x790 (= $x676 $x499)))
 (let (($x169 (and $x790 $x885)))
 (let (($x35 (and $x169 $x308)))
 (let (($x486 (and $x35 $x124)))
 (let (($x618 (and $x486 $x69)))
 (let (($x466 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x639 (and $x466 $x618)))
 (let (($x116 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x690 (and $x116 $x639)))
 (let (($x78 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x141 (and $x78 $x690)))
 (let (($x253 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x26 (and $x253 $x141)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x285 (and $x213 $x26)))
 (let (($x751 (and $x256 $x285)))
 (let (($x578 (= ?x31 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x347 (and $x578 $x751)))
 (let (($x493 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x792 (and $x493 $x347)))
 (let (($x314 (and $x256 $x792)))
 (let (($x251 (= ?x850 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x835 (and $x251 $x314)))
 (let (($x732 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x351 (and $x732 $x835)))
 (let (($x445 (and $x256 $x351)))
 (let (($x685 (= ?x460 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x162 (and $x685 $x445)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x324 (and $x23 $x162)))
 (let (($x66 (and $x256 $x324)))
 (let (($x361 (= ?x20 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x438 (and $x361 $x66)))
 (let (($x603 (bvugt ?x646 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x432)))
 (let (($x750 (=> (bvule ?x646 (bvsub (bvadd ?x646 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x370 $x603)))))))
 (let (($x296 (bvugt ?x389 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x648 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x88 (=> (bvule ?x389 (bvsub (bvadd ?x389 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x648 $x296)))))))
 (let (($x572 (bvugt ?x645 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x727 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x779)))
 (let (($x219 (=> (bvule ?x645 (bvsub (bvadd ?x645 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x727 $x572)))))))
 (let (($x551 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x348 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x132)))
 (let (($x802 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x348 $x551)))))))
 (let (($x24 (and $x802 $x219)))
 (let (($x461 (and $x24 $x88)))
 (let (($x614 (and $x461 $x750)))
 (let (($x414 (and $x614 $x438)))
 (let (($x186 (=> $x414 $x757)))
 (not $x186)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 244 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x466 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x771 (bvmul (_ bv4294967295 32) ?x466)))
 (let ((?x325 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x789 (bvadd ?x325 ?x771)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x626 (concat ?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x430 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x602 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x27 (bvadd ?x602 (_ bv3 32))))
 (let ((?x379 (concat (select input.dst.llvm-mem ?x27) (concat ?x430 ?x626))))
 (let ((?x174 (bvmul (_ bv4294967295 32) ?x379)))
 (let ((?x716 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x170 (concat ?x716 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x809 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x153 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x464 (bvadd ?x153 (_ bv3 32))))
 (let ((?x136 (concat (select input.dst.llvm-mem ?x464) (concat ?x809 ?x170))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x236 (concat ?x424 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x348 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x529 (bvadd ?x348 (_ bv3 32))))
 (let ((?x705 (concat (select input.dst.llvm-mem ?x529) (concat ?x269 ?x236))))
 (let ((?x437 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x794 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x437)))
 (let ((?x458 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x794)))
 (let ((?x447 (bvadd (bvadd (bvadd ?x458 ?x705) ?x136) ?x174)))
 (let (($x411 (= ?x447 ?x789)))
 (let (($x631 (= $x411 true)))
 (let (($x189 (= $x631 true)))
 (let ((?x382 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x463 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x608 (concat ?x85 (concat ?x463 (concat ?x179 ?x382)))))
 (let (($x816 (= ?x608 input.dst.llvm-%m)))
 (let (($x590 (= $x816 true)))
 (let (($x212 (= $x590 true)))
 (let (($x384 (= input.dst.llvm-%m ?x608)))
 (let ((?x228 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x259 (= (_ bv0 32) ?x228)))
 (let ((?x6 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x561 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x782 (and $x561 $x575)))
 (let (($x888 (and $x782 $x259)))
 (let (($x662 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x662 $x888)))
 (let (($x451 (and $x299 $x384)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x628 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x475))))
 (let ((?x297 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x502 (bvuge ?x297 (_ bv1 32))))
 (=> $x502 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x628))))))))
 ))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x828 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x502 (bvuge ?x297 (_ bv1 32))))
 (= $x502 (bvuge ?x828 (_ bv1 32)))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x31 (= false false)))
 (let ((?x297 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x297 (_ bv0 32))))
 (=> $x119 $x31)))))
 ))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x297 (_ bv0 32))))
 (= $x119 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x41 (and $x658 $x290)))
 (let (($x684 (and $x41 $x128)))
 (let (($x92 (and $x684 $x316)))
 (let (($x257 (= (bvand ?x602 (_ bv4294967292 32)) ?x602)))
 (let (($x650 (= (bvand ?x153 (_ bv4294967292 32)) ?x153)))
 (let (($x133 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x153 (bvsub ?x153 (_ bv4 32))) (bvult ?x153 (bvsub ?x153 (_ bv4 32))))))
 (let (($x319 (and true $x133)))
 (let (($x824 (= (bvand ?x348 (_ bv4294967292 32)) ?x348)))
 (let (($x525 (and $x824 $x319)))
 (let (($x661 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x602 (bvsub ?x602 (_ bv8 32))) (bvult ?x602 (bvsub ?x602 (_ bv8 32))))))
 (let (($x465 (and (and (and true $x661) $x525) $x650)))
 (let (($x318 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x501 (and true $x318)))
 (let (($x538 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x237 (and $x538 $x501)))
 (let (($x22 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x348 (bvsub ?x348 (_ bv12 32))) (bvult ?x348 (bvsub ?x348 (_ bv12 32))))))
 (let (($x67 (and (and (and true $x538) $x22) $x237)))
 (let (($x841 (and (and (and (and $x67 $x465) $x257) $x92) $x451)))
 (let (($x204 (= $x841 true)))
 (let (($x517 (= $x204 true)))
 (let (($x581 (= $x517 true)))
 (let (($x346 (= $x67 true)))
 (let (($x744 (= $x346 true)))
 (let (($x737 (= $x744 true)))
 (let (($x745 (and $x465 $x257)))
 (let (($x328 (= $x745 true)))
 (let (($x145 (= $x328 true)))
 (let (($x446 (= $x145 true)))
 (let (($x686 (and $x446 $x737)))
 (let (($x822 (and $x686 $x581)))
 (let (($x834 (and $x822 $x212)))
 (let ((?x693 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x693 (_ bv0 32))))
 (let ((?x74 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (bvuge ?x74 (_ bv1 32))))
 (let (($x419 (and $x755 $x394)))
 (let ((?x302 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x302 (_ bv0 32))))
 (let (($x811 (and $x55 $x419)))
 (let ((?x335 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x335 (_ bv1 32))))
 (let (($x710 (and $x644 $x811)))
 (let (($x599 (and $x710 $x834)))
 (let (($x624 (= ?x325 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x164 (=> $x644 $x624)))
 (let (($x254 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x321 (= $x644 $x254)))
 (let (($x31 (= false false)))
 (let (($x806 (= ?x335 (_ bv0 32))))
 (let (($x839 (=> $x806 $x31)))
 (let (($x743 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x429 (= $x806 $x743)))
 (let (($x589 (and $x429 $x839)))
 (let (($x126 (and $x589 $x321)))
 (let (($x294 (and $x126 $x164)))
 (let (($x827 (and $x294 $x599)))
 (let ((?x308 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x441 (= ?x308 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x823 (bvuge ?x302 (_ bv1 32))))
 (let (($x652 (=> $x823 $x441)))
 (let (($x640 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x798 (= $x823 $x640)))
 (let (($x71 (=> $x55 $x31)))
 (let (($x320 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x50 (= $x55 $x320)))
 (let (($x127 (and $x50 $x71)))
 (let (($x230 (and $x127 $x798)))
 (let (($x560 (and $x230 $x652)))
 (let (($x401 (and $x560 $x827)))
 (let (($x112 (= ?x466 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x537 (=> $x755 $x112)))
 (let (($x403 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x267 (= $x755 $x403)))
 (let (($x746 (= ?x74 (_ bv0 32))))
 (let (($x326 (=> $x746 $x31)))
 (let (($x412 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x64 (= $x746 $x412)))
 (let (($x649 (and $x64 $x326)))
 (let (($x255 (and $x649 $x267)))
 (let (($x799 (and $x255 $x537)))
 (let (($x409 (and $x799 $x401)))
 (let ((?x65 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x94 (= ?x65 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x664 (bvuge ?x693 (_ bv1 32))))
 (let (($x819 (=> $x664 $x94)))
 (let (($x173 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x58 (= $x664 $x173)))
 (let (($x522 (=> $x394 $x31)))
 (let (($x358 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x568 (= $x394 $x358)))
 (let (($x452 (and $x568 $x522)))
 (let (($x264 (and $x452 $x58)))
 (let (($x99 (and $x264 $x819)))
 (let (($x218 (and $x99 $x409)))
 (let (($x804 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x791 (and $x804 $x218)))
 (let (($x595 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x30 (and $x595 $x791)))
 (let (($x428 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x51 (and $x428 $x30)))
 (let (($x180 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x889 (and $x180 $x51)))
 (let (($x886 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x783 (and $x886 $x889)))
 (let (($x773 (and $x31 $x783)))
 (let (($x104 (= ?x325 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x82 (and $x104 $x773)))
 (let (($x309 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x207 (and $x309 $x82)))
 (let (($x611 (and $x31 $x207)))
 (let (($x35 (= ?x308 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x390 (and $x35 $x611)))
 (let (($x676 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x166 (and $x676 $x390)))
 (let (($x673 (and $x31 $x166)))
 (let (($x752 (= ?x466 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x587 (and $x752 $x673)))
 (let (($x578 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x62 (and $x578 $x587)))
 (let (($x122 (and $x31 $x62)))
 (let (($x493 (= ?x65 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x610 (and $x493 $x122)))
 (let (($x620 (bvugt ?x153 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x464)))
 (let (($x361 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x620)))))))
 (let (($x337 (bvugt ?x602 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x759 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x281 (=> (bvule ?x602 (bvsub (bvadd ?x602 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x759 $x337)))))))
 (let (($x298 (bvugt ?x348 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x529)))
 (let (($x667 (=> (bvule ?x348 (bvsub (bvadd ?x348 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x298)))))))
 (let (($x132 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x144 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x132)))))))
 (let (($x243 (and $x144 $x667)))
 (let (($x442 (and $x243 $x281)))
 (let (($x383 (and $x442 $x361)))
 (let (($x471 (and $x383 $x610)))
 (let (($x594 (=> $x471 $x189)))
 (not $x594)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x466 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x771 (bvmul (_ bv4294967295 32) ?x466)))
 (let ((?x325 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x789 (bvadd ?x325 ?x771)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x626 (concat ?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x430 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x602 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x27 (bvadd ?x602 (_ bv3 32))))
 (let ((?x379 (concat (select input.dst.llvm-mem ?x27) (concat ?x430 ?x626))))
 (let ((?x174 (bvmul (_ bv4294967295 32) ?x379)))
 (let ((?x716 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x170 (concat ?x716 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x809 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x153 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x464 (bvadd ?x153 (_ bv3 32))))
 (let ((?x136 (concat (select input.dst.llvm-mem ?x464) (concat ?x809 ?x170))))
 (let ((?x424 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x236 (concat ?x424 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x269 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x348 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x529 (bvadd ?x348 (_ bv3 32))))
 (let ((?x705 (concat (select input.dst.llvm-mem ?x529) (concat ?x269 ?x236))))
 (let ((?x437 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x794 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x437)))
 (let ((?x458 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x794)))
 (let ((?x447 (bvadd (bvadd (bvadd ?x458 ?x705) ?x136) ?x174)))
 (let (($x411 (= ?x447 ?x789)))
 (let (($x631 (= $x411 true)))
 (let (($x189 (= $x631 true)))
 (let ((?x382 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x463 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x608 (concat ?x85 (concat ?x463 (concat ?x179 ?x382)))))
 (let (($x816 (= ?x608 input.dst.llvm-%m)))
 (let (($x590 (= $x816 true)))
 (let (($x212 (= $x590 true)))
 (let (($x384 (= input.dst.llvm-%m ?x608)))
 (let ((?x228 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x259 (= (_ bv0 32) ?x228)))
 (let ((?x6 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x575 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let (($x561 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x782 (and $x561 $x575)))
 (let (($x888 (and $x782 $x259)))
 (let (($x662 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x662 $x888)))
 (let (($x451 (and $x299 $x384)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x109 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x628 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x475))))
 (let ((?x297 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x502 (bvuge ?x297 (_ bv1 32))))
 (=> $x502 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x628))))))))
 ))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x828 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x502 (bvuge ?x297 (_ bv1 32))))
 (= $x502 (bvuge ?x828 (_ bv1 32)))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x31 (= false false)))
 (let ((?x297 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x297 (_ bv0 32))))
 (=> $x119 $x31)))))
 ))
 (let (($x658 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x297 (_ bv0 32))))
 (= $x119 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x41 (and $x658 $x290)))
 (let (($x684 (and $x41 $x128)))
 (let (($x92 (and $x684 $x316)))
 (let (($x257 (= (bvand ?x602 (_ bv4294967292 32)) ?x602)))
 (let (($x650 (= (bvand ?x153 (_ bv4294967292 32)) ?x153)))
 (let (($x133 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x153 (bvsub ?x153 (_ bv4 32))) (bvult ?x153 (bvsub ?x153 (_ bv4 32))))))
 (let (($x319 (and true $x133)))
 (let (($x824 (= (bvand ?x348 (_ bv4294967292 32)) ?x348)))
 (let (($x525 (and $x824 $x319)))
 (let (($x661 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x602 (bvsub ?x602 (_ bv8 32))) (bvult ?x602 (bvsub ?x602 (_ bv8 32))))))
 (let (($x465 (and (and (and true $x661) $x525) $x650)))
 (let (($x318 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x501 (and true $x318)))
 (let (($x538 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x237 (and $x538 $x501)))
 (let (($x22 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x348 (bvsub ?x348 (_ bv12 32))) (bvult ?x348 (bvsub ?x348 (_ bv12 32))))))
 (let (($x67 (and (and (and true $x538) $x22) $x237)))
 (let (($x841 (and (and (and (and $x67 $x465) $x257) $x92) $x451)))
 (let (($x204 (= $x841 true)))
 (let (($x517 (= $x204 true)))
 (let (($x581 (= $x517 true)))
 (let (($x346 (= $x67 true)))
 (let (($x744 (= $x346 true)))
 (let (($x737 (= $x744 true)))
 (let (($x745 (and $x465 $x257)))
 (let (($x328 (= $x745 true)))
 (let (($x145 (= $x328 true)))
 (let (($x446 (= $x145 true)))
 (let (($x686 (and $x446 $x737)))
 (let (($x822 (and $x686 $x581)))
 (let (($x834 (and $x822 $x212)))
 (let ((?x693 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x394 (= ?x693 (_ bv0 32))))
 (let ((?x74 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x755 (bvuge ?x74 (_ bv1 32))))
 (let (($x419 (and $x755 $x394)))
 (let ((?x302 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x302 (_ bv0 32))))
 (let (($x811 (and $x55 $x419)))
 (let ((?x335 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x644 (bvuge ?x335 (_ bv1 32))))
 (let (($x710 (and $x644 $x811)))
 (let (($x599 (and $x710 $x834)))
 (let (($x624 (= ?x325 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x164 (=> $x644 $x624)))
 (let (($x254 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x321 (= $x644 $x254)))
 (let (($x31 (= false false)))
 (let (($x806 (= ?x335 (_ bv0 32))))
 (let (($x839 (=> $x806 $x31)))
 (let (($x743 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x429 (= $x806 $x743)))
 (let (($x589 (and $x429 $x839)))
 (let (($x126 (and $x589 $x321)))
 (let (($x294 (and $x126 $x164)))
 (let (($x827 (and $x294 $x599)))
 (let ((?x308 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x441 (= ?x308 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x823 (bvuge ?x302 (_ bv1 32))))
 (let (($x652 (=> $x823 $x441)))
 (let (($x640 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x798 (= $x823 $x640)))
 (let (($x71 (=> $x55 $x31)))
 (let (($x320 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x50 (= $x55 $x320)))
 (let (($x127 (and $x50 $x71)))
 (let (($x230 (and $x127 $x798)))
 (let (($x560 (and $x230 $x652)))
 (let (($x401 (and $x560 $x827)))
 (let (($x112 (= ?x466 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x537 (=> $x755 $x112)))
 (let (($x403 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x267 (= $x755 $x403)))
 (let (($x746 (= ?x74 (_ bv0 32))))
 (let (($x326 (=> $x746 $x31)))
 (let (($x412 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x64 (= $x746 $x412)))
 (let (($x649 (and $x64 $x326)))
 (let (($x255 (and $x649 $x267)))
 (let (($x799 (and $x255 $x537)))
 (let (($x409 (and $x799 $x401)))
 (let ((?x65 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x94 (= ?x65 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x664 (bvuge ?x693 (_ bv1 32))))
 (let (($x819 (=> $x664 $x94)))
 (let (($x173 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x58 (= $x664 $x173)))
 (let (($x522 (=> $x394 $x31)))
 (let (($x358 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x568 (= $x394 $x358)))
 (let (($x452 (and $x568 $x522)))
 (let (($x264 (and $x452 $x58)))
 (let (($x99 (and $x264 $x819)))
 (let (($x218 (and $x99 $x409)))
 (let (($x804 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x791 (and $x804 $x218)))
 (let (($x595 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x30 (and $x595 $x791)))
 (let (($x428 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x51 (and $x428 $x30)))
 (let (($x180 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x889 (and $x180 $x51)))
 (let (($x886 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x783 (and $x886 $x889)))
 (let (($x773 (and $x31 $x783)))
 (let (($x104 (= ?x325 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x82 (and $x104 $x773)))
 (let (($x309 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x207 (and $x309 $x82)))
 (let (($x611 (and $x31 $x207)))
 (let (($x35 (= ?x308 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x390 (and $x35 $x611)))
 (let (($x676 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x166 (and $x676 $x390)))
 (let (($x673 (and $x31 $x166)))
 (let (($x752 (= ?x466 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x587 (and $x752 $x673)))
 (let (($x578 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x62 (and $x578 $x587)))
 (let (($x122 (and $x31 $x62)))
 (let (($x493 (= ?x65 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x610 (and $x493 $x122)))
 (let (($x620 (bvugt ?x153 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x464)))
 (let (($x361 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x89 $x620)))))))
 (let (($x337 (bvugt ?x602 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x759 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x281 (=> (bvule ?x602 (bvsub (bvadd ?x602 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x759 $x337)))))))
 (let (($x298 (bvugt ?x348 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x529)))
 (let (($x667 (=> (bvule ?x348 (bvsub (bvadd ?x348 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x298)))))))
 (let (($x132 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x144 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x132)))))))
 (let (($x243 (and $x144 $x667)))
 (let (($x442 (and $x243 $x281)))
 (let (($x383 (and $x442 $x361)))
 (let (($x471 (and $x383 $x610)))
 (let (($x594 (=> $x471 $x189)))
 (not $x594)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 244 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x528 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x326 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x636 (bvadd ?x326 ?x528)))
 (let ((?x830 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x287 (concat ?x830 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x296 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x580 (bvadd ?x296 (_ bv3 32))))
 (let ((?x573 (concat (select input.dst.llvm-mem ?x580) (concat ?x138 ?x287))))
 (let ((?x604 (bvmul (_ bv4294967295 32) ?x573)))
 (let ((?x758 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x769 (concat ?x758 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x222 (bvadd ?x27 (_ bv3 32))))
 (let ((?x643 (concat (select input.dst.llvm-mem ?x222) (concat ?x262 ?x769))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x291 (concat ?x622 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x332 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x741 (bvadd ?x332 (_ bv3 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem ?x741) (concat ?x359 ?x291))))
 (let ((?x733 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x733)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x87)))
 (let ((?x780 (bvadd (bvadd (bvadd ?x185 ?x197) ?x643) ?x604)))
 (let (($x722 (= ?x780 ?x636)))
 (let (($x376 (= $x722 true)))
 (let (($x539 (= $x376 true)))
 (let ((?x440 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x540 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x232 (concat ?x540 (concat ?x247 ?x440)))))
 (let (($x679 (= ?x172 input.dst.llvm-%m)))
 (let (($x688 (= $x679 true)))
 (let (($x360 (= $x688 true)))
 (let (($x709 (= input.dst.llvm-%m ?x172)))
 (let ((?x635 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x69 (= (_ bv0 32) ?x635)))
 (let ((?x209 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x753 (and $x246 $x843)))
 (let (($x13 (and $x753 $x69)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x708 (and $x48 $x13)))
 (let (($x177 (and $x708 $x709)))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x829 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd ?x829 (_ bv1 32))) (select input.dst.llvm-mem ?x829))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x829 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x829 (_ bv2 32))) ?x554))))
 (let ((?x256 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x256 (_ bv1 32))))
 (=> $x142 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x605))))))))
 ))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x256 (_ bv1 32))))
 (= $x142 (bvuge ?x486 (_ bv1 32)))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x325 (= false false)))
 (let ((?x256 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x256 (_ bv0 32))))
 (=> $x356 $x325)))))
 ))
 (let (($x790 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x256 (_ bv0 32))))
 (= $x356 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x284 (and $x790 $x213)))
 (let (($x141 (and $x284 $x639)))
 (let (($x567 (and $x141 $x240)))
 (let (($x152 (= (bvand ?x296 (_ bv4294967292 32)) ?x296)))
 (let (($x628 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x508 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x260 (and true $x508)))
 (let (($x612 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x475 (and $x612 $x260)))
 (let (($x285 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x296 (bvsub ?x296 (_ bv8 32))) (bvult ?x296 (bvsub ?x296 (_ bv8 32))))))
 (let (($x316 (and (and (and true $x285) $x475) $x628)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x382 (and true $x179)))
 (let (($x782 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x720 (and $x782 $x382)))
 (let (($x585 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x332 (bvsub ?x332 (_ bv12 32))) (bvult ?x332 (bvsub ?x332 (_ bv12 32))))))
 (let (($x384 (and (and (and true $x782) $x585) $x720)))
 (let (($x190 (and (and (and (and $x384 $x316) $x152) $x567) $x177)))
 (let (($x483 (= $x190 true)))
 (let (($x651 (= $x483 true)))
 (let (($x283 (= $x651 true)))
 (let (($x451 (= $x384 true)))
 (let (($x841 (= $x451 true)))
 (let (($x204 (= $x841 true)))
 (let (($x571 (and $x316 $x152)))
 (let (($x662 (= $x571 true)))
 (let (($x561 (= $x662 true)))
 (let (($x6 (= $x561 true)))
 (let (($x517 (and $x6 $x204)))
 (let (($x553 (and $x517 $x283)))
 (let (($x728 (and $x553 $x360)))
 (let ((?x798 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x798 (_ bv1 32))))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x710 (_ bv0 32))))
 (let (($x41 (and $x195 $x743)))
 (let ((?x328 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x328 (_ bv0 32))))
 (let (($x502 (and $x145 $x41)))
 (let ((?x81 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x828 (bvuge ?x81 (_ bv1 32))))
 (let (($x425 (and $x828 $x502)))
 (let (($x280 (and $x425 $x728)))
 (let (($x658 (= ?x326 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x665 (=> $x828 $x658)))
 (let (($x891 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x747 (= $x828 $x891)))
 (let (($x325 (= false false)))
 (let (($x815 (= ?x81 (_ bv0 32))))
 (let (($x545 (=> $x815 $x325)))
 (let (($x737 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x40 (= $x815 $x737)))
 (let (($x297 (and $x40 $x545)))
 (let (($x79 (and $x297 $x747)))
 (let (($x290 (and $x79 $x665)))
 (let (($x598 (and $x290 $x280)))
 (let ((?x58 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x533 (= ?x58 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x22 (bvuge ?x328 (_ bv1 32))))
 (let (($x793 (=> $x22 $x533)))
 (let (($x244 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x385 (= $x22 $x244)))
 (let (($x184 (=> $x145 $x325)))
 (let (($x257 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x446 (= $x145 $x257)))
 (let (($x538 (and $x446 $x184)))
 (let (($x479 (and $x538 $x385)))
 (let (($x158 (and $x479 $x793)))
 (let (($x757 (and $x158 $x598)))
 (let ((?x804 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x726 (= ?x804 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x135 (bvuge ?x710 (_ bv1 32))))
 (let (($x133 (=> $x135 $x726)))
 (let (($x824 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x423 (= $x135 $x824)))
 (let (($x57 (=> $x195 $x325)))
 (let (($x419 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x564 (= $x195 $x419)))
 (let (($x814 (and $x564 $x57)))
 (let (($x503 (and $x814 $x423)))
 (let (($x319 (and $x503 $x133)))
 (let (($x186 (and $x319 $x757)))
 (let (($x589 (= ?x528 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x644 (=> $x743 $x589)))
 (let (($x53 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x429 (= $x743 $x53)))
 (let (($x230 (= ?x798 (_ bv0 32))))
 (let (($x441 (=> $x230 $x325)))
 (let (($x823 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x689 (= $x230 $x823)))
 (let (($x652 (and $x689 $x441)))
 (let (($x839 (and $x652 $x429)))
 (let (($x254 (and $x839 $x644)))
 (let (($x797 (and $x254 $x186)))
 (let (($x302 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x171 (and $x302 $x797)))
 (let (($x799 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x181 (and $x799 $x171)))
 (let (($x112 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x510 (and $x112 $x181)))
 (let (($x255 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x634 (and $x255 $x510)))
 (let (($x403 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x279 (and $x403 $x634)))
 (let (($x343 (and $x325 $x279)))
 (let (($x649 (= ?x326 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x681 (and $x649 $x343)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x239 (and $x94 $x681)))
 (let (($x73 (and $x325 $x239)))
 (let (($x264 (= ?x58 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x778 (and $x264 $x73)))
 (let (($x394 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x842 (and $x394 $x778)))
 (let (($x374 (and $x325 $x842)))
 (let (($x642 (= ?x804 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x810 (and $x642 $x374)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x167 (and $x104 $x810)))
 (let (($x344 (and $x325 $x167)))
 (let (($x309 (= ?x528 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x482 (and $x309 $x344)))
 (let (($x614 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x750 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x493 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x750 $x614)))))))
 (let (($x461 (bvugt ?x296 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x580)))
 (let (($x603 (=> (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x461)))))))
 (let (($x24 (bvugt ?x332 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x741)))
 (let (($x648 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x24)))))))
 (let (($x558 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x365 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x365)))
 (let (($x572 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x558)))))))
 (let (($x389 (and $x572 $x648)))
 (let (($x421 (and $x389 $x603)))
 (let (($x98 (and $x421 $x493)))
 (let (($x492 (and $x98 $x482)))
 (let (($x12 (=> $x492 $x539)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x528 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x326 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x636 (bvadd ?x326 ?x528)))
 (let ((?x830 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x287 (concat ?x830 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x296 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x580 (bvadd ?x296 (_ bv3 32))))
 (let ((?x573 (concat (select input.dst.llvm-mem ?x580) (concat ?x138 ?x287))))
 (let ((?x604 (bvmul (_ bv4294967295 32) ?x573)))
 (let ((?x758 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x769 (concat ?x758 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x222 (bvadd ?x27 (_ bv3 32))))
 (let ((?x643 (concat (select input.dst.llvm-mem ?x222) (concat ?x262 ?x769))))
 (let ((?x622 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x291 (concat ?x622 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x332 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x741 (bvadd ?x332 (_ bv3 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem ?x741) (concat ?x359 ?x291))))
 (let ((?x733 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x733)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x87)))
 (let ((?x780 (bvadd (bvadd (bvadd ?x185 ?x197) ?x643) ?x604)))
 (let (($x722 (= ?x780 ?x636)))
 (let (($x376 (= $x722 true)))
 (let (($x539 (= $x376 true)))
 (let ((?x440 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x540 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x232 (concat ?x540 (concat ?x247 ?x440)))))
 (let (($x679 (= ?x172 input.dst.llvm-%m)))
 (let (($x688 (= $x679 true)))
 (let (($x360 (= $x688 true)))
 (let (($x709 (= input.dst.llvm-%m ?x172)))
 (let ((?x635 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x69 (= (_ bv0 32) ?x635)))
 (let ((?x209 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x843 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x753 (and $x246 $x843)))
 (let (($x13 (and $x753 $x69)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x708 (and $x48 $x13)))
 (let (($x177 (and $x708 $x709)))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x829 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd ?x829 (_ bv1 32))) (select input.dst.llvm-mem ?x829))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x829 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x829 (_ bv2 32))) ?x554))))
 (let ((?x256 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x256 (_ bv1 32))))
 (=> $x142 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x605))))))))
 ))
 (let (($x639 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x256 (_ bv1 32))))
 (= $x142 (bvuge ?x486 (_ bv1 32)))))))
 ))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x325 (= false false)))
 (let ((?x256 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x256 (_ bv0 32))))
 (=> $x356 $x325)))))
 ))
 (let (($x790 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x256 (_ bv0 32))))
 (= $x356 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x284 (and $x790 $x213)))
 (let (($x141 (and $x284 $x639)))
 (let (($x567 (and $x141 $x240)))
 (let (($x152 (= (bvand ?x296 (_ bv4294967292 32)) ?x296)))
 (let (($x628 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x508 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x260 (and true $x508)))
 (let (($x612 (= (bvand ?x332 (_ bv4294967292 32)) ?x332)))
 (let (($x475 (and $x612 $x260)))
 (let (($x285 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x296 (bvsub ?x296 (_ bv8 32))) (bvult ?x296 (bvsub ?x296 (_ bv8 32))))))
 (let (($x316 (and (and (and true $x285) $x475) $x628)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x382 (and true $x179)))
 (let (($x782 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x720 (and $x782 $x382)))
 (let (($x585 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x332 (bvsub ?x332 (_ bv12 32))) (bvult ?x332 (bvsub ?x332 (_ bv12 32))))))
 (let (($x384 (and (and (and true $x782) $x585) $x720)))
 (let (($x190 (and (and (and (and $x384 $x316) $x152) $x567) $x177)))
 (let (($x483 (= $x190 true)))
 (let (($x651 (= $x483 true)))
 (let (($x283 (= $x651 true)))
 (let (($x451 (= $x384 true)))
 (let (($x841 (= $x451 true)))
 (let (($x204 (= $x841 true)))
 (let (($x571 (and $x316 $x152)))
 (let (($x662 (= $x571 true)))
 (let (($x561 (= $x662 true)))
 (let (($x6 (= $x561 true)))
 (let (($x517 (and $x6 $x204)))
 (let (($x553 (and $x517 $x283)))
 (let (($x728 (and $x553 $x360)))
 (let ((?x798 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x743 (bvuge ?x798 (_ bv1 32))))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x710 (_ bv0 32))))
 (let (($x41 (and $x195 $x743)))
 (let ((?x328 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x328 (_ bv0 32))))
 (let (($x502 (and $x145 $x41)))
 (let ((?x81 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x828 (bvuge ?x81 (_ bv1 32))))
 (let (($x425 (and $x828 $x502)))
 (let (($x280 (and $x425 $x728)))
 (let (($x658 (= ?x326 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x665 (=> $x828 $x658)))
 (let (($x891 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x747 (= $x828 $x891)))
 (let (($x325 (= false false)))
 (let (($x815 (= ?x81 (_ bv0 32))))
 (let (($x545 (=> $x815 $x325)))
 (let (($x737 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x40 (= $x815 $x737)))
 (let (($x297 (and $x40 $x545)))
 (let (($x79 (and $x297 $x747)))
 (let (($x290 (and $x79 $x665)))
 (let (($x598 (and $x290 $x280)))
 (let ((?x58 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x533 (= ?x58 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x22 (bvuge ?x328 (_ bv1 32))))
 (let (($x793 (=> $x22 $x533)))
 (let (($x244 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x385 (= $x22 $x244)))
 (let (($x184 (=> $x145 $x325)))
 (let (($x257 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x446 (= $x145 $x257)))
 (let (($x538 (and $x446 $x184)))
 (let (($x479 (and $x538 $x385)))
 (let (($x158 (and $x479 $x793)))
 (let (($x757 (and $x158 $x598)))
 (let ((?x804 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x726 (= ?x804 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x135 (bvuge ?x710 (_ bv1 32))))
 (let (($x133 (=> $x135 $x726)))
 (let (($x824 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x423 (= $x135 $x824)))
 (let (($x57 (=> $x195 $x325)))
 (let (($x419 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x564 (= $x195 $x419)))
 (let (($x814 (and $x564 $x57)))
 (let (($x503 (and $x814 $x423)))
 (let (($x319 (and $x503 $x133)))
 (let (($x186 (and $x319 $x757)))
 (let (($x589 (= ?x528 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x644 (=> $x743 $x589)))
 (let (($x53 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x429 (= $x743 $x53)))
 (let (($x230 (= ?x798 (_ bv0 32))))
 (let (($x441 (=> $x230 $x325)))
 (let (($x823 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x689 (= $x230 $x823)))
 (let (($x652 (and $x689 $x441)))
 (let (($x839 (and $x652 $x429)))
 (let (($x254 (and $x839 $x644)))
 (let (($x797 (and $x254 $x186)))
 (let (($x302 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x171 (and $x302 $x797)))
 (let (($x799 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x181 (and $x799 $x171)))
 (let (($x112 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x510 (and $x112 $x181)))
 (let (($x255 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x634 (and $x255 $x510)))
 (let (($x403 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x279 (and $x403 $x634)))
 (let (($x343 (and $x325 $x279)))
 (let (($x649 (= ?x326 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x681 (and $x649 $x343)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x239 (and $x94 $x681)))
 (let (($x73 (and $x325 $x239)))
 (let (($x264 (= ?x58 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x778 (and $x264 $x73)))
 (let (($x394 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x842 (and $x394 $x778)))
 (let (($x374 (and $x325 $x842)))
 (let (($x642 (= ?x804 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x810 (and $x642 $x374)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x167 (and $x104 $x810)))
 (let (($x344 (and $x325 $x167)))
 (let (($x309 (= ?x528 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x482 (and $x309 $x344)))
 (let (($x614 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x750 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x493 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x750 $x614)))))))
 (let (($x461 (bvugt ?x296 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x580)))
 (let (($x603 (=> (bvule ?x296 (bvsub (bvadd ?x296 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x461)))))))
 (let (($x24 (bvugt ?x332 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x741)))
 (let (($x648 (=> (bvule ?x332 (bvsub (bvadd ?x332 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x24)))))))
 (let (($x558 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x365 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x365)))
 (let (($x572 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x558)))))))
 (let (($x389 (and $x572 $x648)))
 (let (($x421 (and $x389 $x603)))
 (let (($x98 (and $x421 $x493)))
 (let (($x492 (and $x98 $x482)))
 (let (($x12 (=> $x492 $x539)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 243 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x484 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x321 (concat ?x484 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x489 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x337 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x646 (bvadd ?x337 (_ bv3 32))))
 (let ((?x659 (concat (select input.dst.llvm-mem ?x646) (concat ?x489 ?x321))))
 (let ((?x740 (bvmul (_ bv4294967295 32) ?x659)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x690 (concat ?x21 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x580 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x20 (bvadd ?x580 (_ bv3 32))))
 (let ((?x650 (concat (select input.dst.llvm-mem ?x20) (concat ?x525 ?x690))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x324 (concat ?x351 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x558 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x837 (bvadd ?x558 (_ bv3 32))))
 (let ((?x237 (concat (select input.dst.llvm-mem ?x837) (concat ?x178 ?x324))))
 (let ((?x792 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x792)))
 (let ((?x586 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x347)))
 (let ((?x191 (bvadd (bvadd (bvadd ?x586 ?x237) ?x650) ?x740)))
 (let ((?x57 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x320 (= ?x57 ?x191)))
 (let (($x50 (= $x320 true)))
 (let (($x560 (= $x50 true)))
 (let ((?x615 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x716 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x278 (concat ?x368 (concat ?x716 ?x615)))))
 (let (($x771 (= ?x136 input.dst.llvm-%m)))
 (let (($x789 (= $x771 true)))
 (let (($x411 (= $x789 true)))
 (let (($x170 (= input.dst.llvm-%m ?x136)))
 (let ((?x409 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x157 (= (_ bv0 32) ?x409)))
 (let ((?x599 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x827 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x599)))
 (let (($x834 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x401 (and $x834 $x827)))
 (let (($x705 (and $x401 $x157)))
 (let (($x590 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x795 (and $x590 $x705)))
 (let (($x711 (and $x795 $x170)))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x721 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x518 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem ?x721))))
 (let ((?x794 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv2 32))) ?x518))))
 (let ((?x339 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x339 (_ bv1 32))))
 (=> $x218 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x794))))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x500 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x339 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x339 (_ bv1 32))))
 (= $x218 (bvuge ?x500 (_ bv1 32)))))))
 ))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x326 (= false false)))
 (let ((?x339 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x339 (_ bv0 32))))
 (=> $x358 $x326)))))
 ))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x339 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x339 (_ bv0 32))))
 (= $x358 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x180 (and $x522 $x767)))
 (let (($x889 (and $x180 $x51)))
 (let (($x822 (and $x889 $x212)))
 (let (($x354 (= (bvand ?x337 (_ bv4294967292 32)) ?x337)))
 (let (($x605 (= (bvand ?x580 (_ bv4294967292 32)) ?x580)))
 (let (($x459 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x580 (bvsub ?x580 (_ bv4 32))) (bvult ?x580 (bvsub ?x580 (_ bv4 32))))))
 (let (($x143 (and true $x459)))
 (let (($x154 (= (bvand ?x558 (_ bv4294967292 32)) ?x558)))
 (let (($x554 (and $x154 $x143)))
 (let (($x783 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x337 (bvsub ?x337 (_ bv8 32))) (bvult ?x337 (bvsub ?x337 (_ bv8 32))))))
 (let (($x240 (and (and (and true $x783) $x554) $x605)))
 (let (($x247 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x440 (and true $x247)))
 (let (($x753 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x488 (and $x753 $x440)))
 (let (($x579 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x558 (bvsub ?x558 (_ bv12 32))) (bvult ?x558 (bvsub ?x558 (_ bv12 32))))))
 (let (($x709 (and (and (and true $x753) $x579) $x488)))
 (let (($x514 (and (and (and (and $x709 $x240) $x354) $x822) $x711)))
 (let (($x626 (= $x514 true)))
 (let (($x379 (= $x626 true)))
 (let (($x174 (= $x379 true)))
 (let (($x177 (= $x709 true)))
 (let (($x190 (= $x177 true)))
 (let (($x483 (= $x190 true)))
 (let (($x200 (and $x240 $x354)))
 (let (($x48 (= $x200 true)))
 (let (($x246 (= $x48 true)))
 (let (($x209 (= $x246 true)))
 (let (($x651 (and $x209 $x483)))
 (let (($x447 (and $x651 $x174)))
 (let (($x189 (and $x447 $x411)))
 (let ((?x385 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x479 (= ?x385 (_ bv0 32))))
 (let ((?x425 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x425 (_ bv0 32))))
 (let (($x284 (and $x128 $x479)))
 (let ((?x662 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (= ?x662 (_ bv0 32))))
 (let (($x142 (and $x561 $x284)))
 (let ((?x805 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x805 (_ bv1 32))))
 (let (($x850 (and $x486 $x142)))
 (let (($x631 (and $x850 $x189)))
 (let (($x790 (= ?x57 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x310 (=> $x486 $x790)))
 (let (($x124 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x613 (= $x486 $x124)))
 (let (($x326 (= false false)))
 (let (($x146 (= ?x805 (_ bv0 32))))
 (let (($x509 (=> $x146 $x326)))
 (let (($x204 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x182 (= $x146 $x204)))
 (let (($x256 (and $x182 $x509)))
 (let (($x499 (and $x256 $x613)))
 (let (($x213 (and $x499 $x310)))
 (let (($x594 (and $x213 $x631)))
 (let ((?x429 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x85 (= ?x429 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x585 (bvuge ?x662 (_ bv1 32))))
 (let (($x463 (=> $x585 $x85)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x608 (= $x585 $x299)))
 (let (($x575 (=> $x561 $x326)))
 (let (($x152 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x6 (= $x561 $x152)))
 (let (($x782 (and $x6 $x575)))
 (let (($x363 (and $x782 $x608)))
 (let (($x674 (and $x363 $x463)))
 (let (($x436 (and $x674 $x594)))
 (let ((?x302 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x656 (= ?x302 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x577 (bvuge ?x425 (_ bv1 32))))
 (let (($x508 (=> $x577 $x656)))
 (let (($x612 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x113 (= $x577 $x612)))
 (let (($x684 (=> $x128 $x326)))
 (let (($x41 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x851 (= $x128 $x41)))
 (let (($x381 (and $x851 $x684)))
 (let (($x276 (and $x381 $x113)))
 (let (($x260 (and $x276 $x508)))
 (let (($x432 (and $x260 $x436)))
 (let ((?x557 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x297 (= ?x557 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x737 (bvuge ?x385 (_ bv1 32))))
 (let (($x828 (=> $x737 $x297)))
 (let (($x346 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x40 (= $x737 $x346)))
 (let (($x533 (=> $x479 $x326)))
 (let (($x22 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x455 (= $x479 $x22)))
 (let (($x793 (and $x455 $x533)))
 (let (($x545 (and $x793 $x40)))
 (let (($x891 (and $x545 $x828)))
 (let (($x637 (and $x891 $x432)))
 (let (($x328 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x885 (and $x328 $x637)))
 (let (($x319 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x253 (and $x319 $x885)))
 (let (($x726 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x78 (and $x726 $x253)))
 (let (($x503 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x225 (and $x503 $x78)))
 (let (($x824 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x233 (and $x824 $x225)))
 (let (($x460 (and $x326 $x233)))
 (let (($x814 (= ?x57 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x732 (and $x814 $x460)))
 (let (($x589 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x685 (and $x589 $x732)))
 (let (($x655 (and $x326 $x685)))
 (let (($x839 (= ?x429 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x193 (and $x839 $x655)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x169 (and $x230 $x193)))
 (let (($x884 (and $x326 $x169)))
 (let (($x640 (= ?x302 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x596 (and $x640 $x884)))
 (let (($x649 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x116 (and $x649 $x596)))
 (let (($x26 (and $x326 $x116)))
 (let (($x94 (= ?x557 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x738 (and $x94 $x26)))
 (let (($x383 (bvugt ?x580 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x309 (=> (bvule ?x580 (bvsub (bvadd ?x580 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x361 $x383)))))))
 (let (($x442 (bvugt ?x337 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x646)))
 (let (($x620 (=> (bvule ?x337 (bvsub (bvadd ?x337 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x442)))))))
 (let (($x243 (bvugt ?x558 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x667 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x837)))
 (let (($x759 (=> (bvule ?x558 (bvsub (bvadd ?x558 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x667 $x243)))))))
 (let (($x712 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x268 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x268)))
 (let (($x298 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x144 $x712)))))))
 (let (($x602 (and $x298 $x759)))
 (let (($x370 (and $x602 $x620)))
 (let (($x251 (and $x370 $x309)))
 (let (($x751 (and $x251 $x738)))
 (let (($x367 (=> $x751 $x560)))
 (not $x367)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x484 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x321 (concat ?x484 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x489 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x337 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x646 (bvadd ?x337 (_ bv3 32))))
 (let ((?x659 (concat (select input.dst.llvm-mem ?x646) (concat ?x489 ?x321))))
 (let ((?x740 (bvmul (_ bv4294967295 32) ?x659)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x690 (concat ?x21 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x580 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x20 (bvadd ?x580 (_ bv3 32))))
 (let ((?x650 (concat (select input.dst.llvm-mem ?x20) (concat ?x525 ?x690))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x324 (concat ?x351 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x558 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x837 (bvadd ?x558 (_ bv3 32))))
 (let ((?x237 (concat (select input.dst.llvm-mem ?x837) (concat ?x178 ?x324))))
 (let ((?x792 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x792)))
 (let ((?x586 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x347)))
 (let ((?x191 (bvadd (bvadd (bvadd ?x586 ?x237) ?x650) ?x740)))
 (let ((?x57 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x320 (= ?x57 ?x191)))
 (let (($x50 (= $x320 true)))
 (let (($x560 (= $x50 true)))
 (let ((?x615 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x716 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x278 (concat ?x368 (concat ?x716 ?x615)))))
 (let (($x771 (= ?x136 input.dst.llvm-%m)))
 (let (($x789 (= $x771 true)))
 (let (($x411 (= $x789 true)))
 (let (($x170 (= input.dst.llvm-%m ?x136)))
 (let ((?x409 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x157 (= (_ bv0 32) ?x409)))
 (let ((?x599 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x827 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x599)))
 (let (($x834 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x401 (and $x834 $x827)))
 (let (($x705 (and $x401 $x157)))
 (let (($x590 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x795 (and $x590 $x705)))
 (let (($x711 (and $x795 $x170)))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x721 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x518 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv1 32))) (select input.dst.llvm-mem ?x721))))
 (let ((?x794 (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x721 (_ bv2 32))) ?x518))))
 (let ((?x339 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x339 (_ bv1 32))))
 (=> $x218 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x794))))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x500 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x339 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x339 (_ bv1 32))))
 (= $x218 (bvuge ?x500 (_ bv1 32)))))))
 ))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x326 (= false false)))
 (let ((?x339 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x339 (_ bv0 32))))
 (=> $x358 $x326)))))
 ))
 (let (($x522 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x339 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (= ?x339 (_ bv0 32))))
 (= $x358 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x180 (and $x522 $x767)))
 (let (($x889 (and $x180 $x51)))
 (let (($x822 (and $x889 $x212)))
 (let (($x354 (= (bvand ?x337 (_ bv4294967292 32)) ?x337)))
 (let (($x605 (= (bvand ?x580 (_ bv4294967292 32)) ?x580)))
 (let (($x459 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x580 (bvsub ?x580 (_ bv4 32))) (bvult ?x580 (bvsub ?x580 (_ bv4 32))))))
 (let (($x143 (and true $x459)))
 (let (($x154 (= (bvand ?x558 (_ bv4294967292 32)) ?x558)))
 (let (($x554 (and $x154 $x143)))
 (let (($x783 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x337 (bvsub ?x337 (_ bv8 32))) (bvult ?x337 (bvsub ?x337 (_ bv8 32))))))
 (let (($x240 (and (and (and true $x783) $x554) $x605)))
 (let (($x247 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x440 (and true $x247)))
 (let (($x753 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x488 (and $x753 $x440)))
 (let (($x579 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x558 (bvsub ?x558 (_ bv12 32))) (bvult ?x558 (bvsub ?x558 (_ bv12 32))))))
 (let (($x709 (and (and (and true $x753) $x579) $x488)))
 (let (($x514 (and (and (and (and $x709 $x240) $x354) $x822) $x711)))
 (let (($x626 (= $x514 true)))
 (let (($x379 (= $x626 true)))
 (let (($x174 (= $x379 true)))
 (let (($x177 (= $x709 true)))
 (let (($x190 (= $x177 true)))
 (let (($x483 (= $x190 true)))
 (let (($x200 (and $x240 $x354)))
 (let (($x48 (= $x200 true)))
 (let (($x246 (= $x48 true)))
 (let (($x209 (= $x246 true)))
 (let (($x651 (and $x209 $x483)))
 (let (($x447 (and $x651 $x174)))
 (let (($x189 (and $x447 $x411)))
 (let ((?x385 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x479 (= ?x385 (_ bv0 32))))
 (let ((?x425 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x425 (_ bv0 32))))
 (let (($x284 (and $x128 $x479)))
 (let ((?x662 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x561 (= ?x662 (_ bv0 32))))
 (let (($x142 (and $x561 $x284)))
 (let ((?x805 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x486 (bvuge ?x805 (_ bv1 32))))
 (let (($x850 (and $x486 $x142)))
 (let (($x631 (and $x850 $x189)))
 (let (($x790 (= ?x57 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x310 (=> $x486 $x790)))
 (let (($x124 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x613 (= $x486 $x124)))
 (let (($x326 (= false false)))
 (let (($x146 (= ?x805 (_ bv0 32))))
 (let (($x509 (=> $x146 $x326)))
 (let (($x204 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x182 (= $x146 $x204)))
 (let (($x256 (and $x182 $x509)))
 (let (($x499 (and $x256 $x613)))
 (let (($x213 (and $x499 $x310)))
 (let (($x594 (and $x213 $x631)))
 (let ((?x429 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x85 (= ?x429 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x585 (bvuge ?x662 (_ bv1 32))))
 (let (($x463 (=> $x585 $x85)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x608 (= $x585 $x299)))
 (let (($x575 (=> $x561 $x326)))
 (let (($x152 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x6 (= $x561 $x152)))
 (let (($x782 (and $x6 $x575)))
 (let (($x363 (and $x782 $x608)))
 (let (($x674 (and $x363 $x463)))
 (let (($x436 (and $x674 $x594)))
 (let ((?x302 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x656 (= ?x302 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x577 (bvuge ?x425 (_ bv1 32))))
 (let (($x508 (=> $x577 $x656)))
 (let (($x612 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x113 (= $x577 $x612)))
 (let (($x684 (=> $x128 $x326)))
 (let (($x41 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x851 (= $x128 $x41)))
 (let (($x381 (and $x851 $x684)))
 (let (($x276 (and $x381 $x113)))
 (let (($x260 (and $x276 $x508)))
 (let (($x432 (and $x260 $x436)))
 (let ((?x557 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x297 (= ?x557 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x737 (bvuge ?x385 (_ bv1 32))))
 (let (($x828 (=> $x737 $x297)))
 (let (($x346 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x40 (= $x737 $x346)))
 (let (($x533 (=> $x479 $x326)))
 (let (($x22 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x455 (= $x479 $x22)))
 (let (($x793 (and $x455 $x533)))
 (let (($x545 (and $x793 $x40)))
 (let (($x891 (and $x545 $x828)))
 (let (($x637 (and $x891 $x432)))
 (let (($x328 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x885 (and $x328 $x637)))
 (let (($x319 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x253 (and $x319 $x885)))
 (let (($x726 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x78 (and $x726 $x253)))
 (let (($x503 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x225 (and $x503 $x78)))
 (let (($x824 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x233 (and $x824 $x225)))
 (let (($x460 (and $x326 $x233)))
 (let (($x814 (= ?x57 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x732 (and $x814 $x460)))
 (let (($x589 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x685 (and $x589 $x732)))
 (let (($x655 (and $x326 $x685)))
 (let (($x839 (= ?x429 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x193 (and $x839 $x655)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x169 (and $x230 $x193)))
 (let (($x884 (and $x326 $x169)))
 (let (($x640 (= ?x302 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x596 (and $x640 $x884)))
 (let (($x649 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x116 (and $x649 $x596)))
 (let (($x26 (and $x326 $x116)))
 (let (($x94 (= ?x557 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x738 (and $x94 $x26)))
 (let (($x383 (bvugt ?x580 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x309 (=> (bvule ?x580 (bvsub (bvadd ?x580 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x361 $x383)))))))
 (let (($x442 (bvugt ?x337 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x646)))
 (let (($x620 (=> (bvule ?x337 (bvsub (bvadd ?x337 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x442)))))))
 (let (($x243 (bvugt ?x558 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x667 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x837)))
 (let (($x759 (=> (bvule ?x558 (bvsub (bvadd ?x558 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x667 $x243)))))))
 (let (($x712 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x268 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x268)))
 (let (($x298 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x144 $x712)))))))
 (let (($x602 (and $x298 $x759)))
 (let (($x370 (and $x602 $x620)))
 (let (($x251 (and $x370 $x309)))
 (let (($x751 (and $x251 $x738)))
 (let (($x367 (=> $x751 $x560)))
 (not $x367)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x446 (bvmul (_ bv4294967295 32) ?x328)))
 (let ((?x686 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x446)))
 (let ((?x747 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x79 (concat ?x747 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x658 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x461 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x153 (bvadd ?x461 (_ bv3 32))))
 (let ((?x535 (concat (select input.dst.llvm-mem ?x153) (concat ?x658 ?x79))))
 (let ((?x109 (bvmul (_ bv4294967295 32) ?x535)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x23 (concat ?x30 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x646 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x65 (bvadd ?x646 (_ bv3 32))))
 (let ((?x405 (concat (select input.dst.llvm-mem ?x65) (concat ?x5 ?x23))))
 (let ((?x471 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x803 (concat ?x471 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x144 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x779 (bvadd ?x144 (_ bv3 32))))
 (let ((?x384 (concat (select input.dst.llvm-mem ?x779) (concat ?x179 ?x803))))
 (let ((?x587 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x587)))
 (let ((?x673 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x610)))
 (let ((?x257 (bvadd (bvadd (bvadd ?x673 ?x384) ?x405) ?x109)))
 (let (($x81 (= ?x257 ?x686)))
 (let (($x815 (= $x81 true)))
 (let (($x806 (= $x815 true)))
 (let ((?x262 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x643 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x769 (concat ?x643 (concat ?x202 (concat ?x59 ?x262)))))
 (let (($x722 (= ?x769 input.dst.llvm-%m)))
 (let (($x376 (= $x722 true)))
 (let (($x12 (= $x376 true)))
 (let (($x410 (= input.dst.llvm-%m ?x769)))
 (let ((?x600 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x197 (= (_ bv0 32) ?x600)))
 (let ((?x598 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x757 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x598)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x280 $x757)))
 (let (($x700 (and $x186 $x197)))
 (let (($x728 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x728 $x700)))
 (let (($x201 (and $x300 $x410)))
 (let (($x553 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x291))))
 (let ((?x823 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x823 (_ bv1 32))))
 (=> $x171 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x159))))))))
 ))
 (let (($x634 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x195 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x823 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x823 (_ bv1 32))))
 (= $x171 (bvuge ?x195 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x57 (= false false)))
 (let ((?x823 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x823 (_ bv0 32))))
 (=> $x689 $x57)))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x823 (_ bv0 32))))
 (= $x689 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x112 (and $x327 $x255)))
 (let (($x283 (and $x112 $x634)))
 (let (($x679 (and $x283 $x553)))
 (let (($x301 (= (bvand ?x461 (_ bv4294967292 32)) ?x461)))
 (let (($x794 (= (bvand ?x646 (_ bv4294967292 32)) ?x646)))
 (let (($x437 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x646 (bvsub ?x646 (_ bv4 32))) (bvult ?x646 (bvsub ?x646 (_ bv4 32))))))
 (let (($x749 (and true $x437)))
 (let (($x458 (= (bvand ?x144 (_ bv4294967292 32)) ?x144)))
 (let (($x518 (and $x458 $x749)))
 (let (($x279 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x461 (bvsub ?x461 (_ bv8 32))) (bvult ?x461 (bvsub ?x461 (_ bv8 32))))))
 (let (($x212 (and (and (and true $x279) $x518) $x794)))
 (let (($x716 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x615 (and true $x716)))
 (let (($x401 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x95 (and $x401 $x615)))
 (let (($x530 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x144 (bvsub ?x144 (_ bv12 32))) (bvult ?x144 (bvsub ?x144 (_ bv12 32))))))
 (let (($x170 (and (and (and true $x401) $x530) $x95)))
 (let (($x287 (and (and (and (and $x170 $x212) $x301) $x679) $x201)))
 (let (($x573 (= $x287 true)))
 (let (($x604 (= $x573 true)))
 (let (($x780 (= $x604 true)))
 (let (($x711 (= $x170 true)))
 (let (($x514 (= $x711 true)))
 (let (($x626 (= $x514 true)))
 (let (($x816 (and $x212 $x301)))
 (let (($x590 (= $x816 true)))
 (let (($x834 (= $x590 true)))
 (let (($x599 (= $x834 true)))
 (let (($x379 (and $x599 $x626)))
 (let (($x636 (and $x379 $x780)))
 (let (($x539 (and $x636 $x12)))
 (let ((?x608 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x608 (_ bv1 32))))
 (let ((?x850 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x826 (bvuge ?x850 (_ bv1 32))))
 (let (($x180 (and $x826 $x204)))
 (let ((?x48 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x579 (bvuge ?x48 (_ bv1 32))))
 (let (($x218 (and $x579 $x180)))
 (let ((?x669 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x669 (_ bv0 32))))
 (let (($x406 (and $x150 $x218)))
 (let (($x293 (and $x406 $x539)))
 (let ((?x684 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x522 (= ?x684 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x500 (bvuge ?x669 (_ bv1 32))))
 (let (($x886 (=> $x500 $x522)))
 (let (($x99 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x746 (= $x500 $x99)))
 (let (($x57 (= false false)))
 (let (($x31 (=> $x150 $x57)))
 (let (($x483 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x578 (= $x150 $x483)))
 (let (($x339 (and $x578 $x31)))
 (let (($x568 (and $x339 $x746)))
 (let (($x767 (and $x568 $x886)))
 (let (($x464 (and $x767 $x293)))
 (let ((?x40 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x232 (= ?x40 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x540 (=> $x579 $x232)))
 (let (($x708 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x172 (= $x579 $x708)))
 (let (($x246 (= ?x48 (_ bv0 32))))
 (let (($x843 (=> $x246 $x57)))
 (let (($x354 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x209 (= $x246 $x354)))
 (let (($x753 (and $x209 $x843)))
 (let (($x387 (and $x753 $x172)))
 (let (($x392 (and $x387 $x540)))
 (let (($x175 (and $x392 $x464)))
 (let (($x220 (= ?x328 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x459 (=> $x826 $x220)))
 (let (($x154 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x369 (= $x826 $x154)))
 (let (($x639 (= ?x850 (_ bv0 32))))
 (let (($x141 (=> $x639 $x57)))
 (let (($x284 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x618 (= $x639 $x284)))
 (let (($x490 (and $x618 $x141)))
 (let (($x469 (and $x490 $x369)))
 (let (($x143 (and $x469 $x459)))
 (let (($x211 (and $x143 $x175)))
 (let ((?x127 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x256 (= ?x127 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x486 (=> $x204 $x256)))
 (let (($x451 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x182 (= $x204 $x451)))
 (let (($x363 (= ?x608 (_ bv0 32))))
 (let (($x85 (=> $x363 $x57)))
 (let (($x585 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x92 (= $x363 $x585)))
 (let (($x463 (and $x92 $x85)))
 (let (($x509 (and $x463 $x182)))
 (let (($x124 (and $x509 $x486)))
 (let (($x333 (and $x124 $x211)))
 (let (($x662 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x428 (and $x662 $x333)))
 (let (($x260 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x487 (and $x260 $x428)))
 (let (($x656 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x248 (and $x656 $x487)))
 (let (($x276 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x466 (and $x276 $x248)))
 (let (($x612 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x752 (and $x612 $x466)))
 (let (($x352 (and $x57 $x752)))
 (let (($x381 (= ?x684 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x676 (and $x381 $x352)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x412 (and $x297 $x676)))
 (let (($x452 (and $x57 $x412)))
 (let (($x545 (= ?x40 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x664 (and $x545 $x452)))
 (let (($x479 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x210 (and $x479 $x664)))
 (let (($x595 (and $x57 $x210)))
 (let (($x244 (= ?x328 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x308 (and $x244 $x595)))
 (let (($x814 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x581 (and $x814 $x308)))
 (let (($x773 (and $x57 $x581)))
 (let (($x589 (= ?x127 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x271 (and $x589 $x773)))
 (let (($x98 (bvugt ?x646 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x493 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x94 (=> (bvule ?x646 (bvsub (bvadd ?x646 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x493 $x98)))))))
 (let (($x421 (bvugt ?x461 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x603 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x614 (=> (bvule ?x461 (bvsub (bvadd ?x461 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x603 $x421)))))))
 (let (($x389 (bvugt ?x144 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x648 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x779)))
 (let (($x88 (=> (bvule ?x144 (bvsub (bvadd ?x144 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x648 $x389)))))))
 (let (($x551 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x558 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x558)))
 (let (($x24 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x551)))))))
 (let (($x296 (and $x24 $x88)))
 (let (($x89 (and $x296 $x614)))
 (let (($x35 (and $x89 $x94)))
 (let (($x890 (and $x35 $x271)))
 (let (($x627 (=> $x890 $x806)))
 (not $x627)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x328 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x446 (bvmul (_ bv4294967295 32) ?x328)))
 (let ((?x686 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x446)))
 (let ((?x747 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x79 (concat ?x747 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x658 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x461 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x153 (bvadd ?x461 (_ bv3 32))))
 (let ((?x535 (concat (select input.dst.llvm-mem ?x153) (concat ?x658 ?x79))))
 (let ((?x109 (bvmul (_ bv4294967295 32) ?x535)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x23 (concat ?x30 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x646 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x65 (bvadd ?x646 (_ bv3 32))))
 (let ((?x405 (concat (select input.dst.llvm-mem ?x65) (concat ?x5 ?x23))))
 (let ((?x471 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x803 (concat ?x471 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x144 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x779 (bvadd ?x144 (_ bv3 32))))
 (let ((?x384 (concat (select input.dst.llvm-mem ?x779) (concat ?x179 ?x803))))
 (let ((?x587 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x610 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x587)))
 (let ((?x673 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x610)))
 (let ((?x257 (bvadd (bvadd (bvadd ?x673 ?x384) ?x405) ?x109)))
 (let (($x81 (= ?x257 ?x686)))
 (let (($x815 (= $x81 true)))
 (let (($x806 (= $x815 true)))
 (let ((?x262 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x643 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x769 (concat ?x643 (concat ?x202 (concat ?x59 ?x262)))))
 (let (($x722 (= ?x769 input.dst.llvm-%m)))
 (let (($x376 (= $x722 true)))
 (let (($x12 (= $x376 true)))
 (let (($x410 (= input.dst.llvm-%m ?x769)))
 (let ((?x600 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x197 (= (_ bv0 32) ?x600)))
 (let ((?x598 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x757 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x598)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x280 $x757)))
 (let (($x700 (and $x186 $x197)))
 (let (($x728 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x728 $x700)))
 (let (($x201 (and $x300 $x410)))
 (let (($x553 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x291))))
 (let ((?x823 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x823 (_ bv1 32))))
 (=> $x171 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x159))))))))
 ))
 (let (($x634 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x195 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x823 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x171 (bvuge ?x823 (_ bv1 32))))
 (= $x171 (bvuge ?x195 (_ bv1 32)))))))
 ))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x57 (= false false)))
 (let ((?x823 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x823 (_ bv0 32))))
 (=> $x689 $x57)))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x823 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x689 (= ?x823 (_ bv0 32))))
 (= $x689 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x112 (and $x327 $x255)))
 (let (($x283 (and $x112 $x634)))
 (let (($x679 (and $x283 $x553)))
 (let (($x301 (= (bvand ?x461 (_ bv4294967292 32)) ?x461)))
 (let (($x794 (= (bvand ?x646 (_ bv4294967292 32)) ?x646)))
 (let (($x437 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x646 (bvsub ?x646 (_ bv4 32))) (bvult ?x646 (bvsub ?x646 (_ bv4 32))))))
 (let (($x749 (and true $x437)))
 (let (($x458 (= (bvand ?x144 (_ bv4294967292 32)) ?x144)))
 (let (($x518 (and $x458 $x749)))
 (let (($x279 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x461 (bvsub ?x461 (_ bv8 32))) (bvult ?x461 (bvsub ?x461 (_ bv8 32))))))
 (let (($x212 (and (and (and true $x279) $x518) $x794)))
 (let (($x716 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x615 (and true $x716)))
 (let (($x401 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x95 (and $x401 $x615)))
 (let (($x530 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x144 (bvsub ?x144 (_ bv12 32))) (bvult ?x144 (bvsub ?x144 (_ bv12 32))))))
 (let (($x170 (and (and (and true $x401) $x530) $x95)))
 (let (($x287 (and (and (and (and $x170 $x212) $x301) $x679) $x201)))
 (let (($x573 (= $x287 true)))
 (let (($x604 (= $x573 true)))
 (let (($x780 (= $x604 true)))
 (let (($x711 (= $x170 true)))
 (let (($x514 (= $x711 true)))
 (let (($x626 (= $x514 true)))
 (let (($x816 (and $x212 $x301)))
 (let (($x590 (= $x816 true)))
 (let (($x834 (= $x590 true)))
 (let (($x599 (= $x834 true)))
 (let (($x379 (and $x599 $x626)))
 (let (($x636 (and $x379 $x780)))
 (let (($x539 (and $x636 $x12)))
 (let ((?x608 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x608 (_ bv1 32))))
 (let ((?x850 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x826 (bvuge ?x850 (_ bv1 32))))
 (let (($x180 (and $x826 $x204)))
 (let ((?x48 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x579 (bvuge ?x48 (_ bv1 32))))
 (let (($x218 (and $x579 $x180)))
 (let ((?x669 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x150 (= ?x669 (_ bv0 32))))
 (let (($x406 (and $x150 $x218)))
 (let (($x293 (and $x406 $x539)))
 (let ((?x684 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x522 (= ?x684 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x500 (bvuge ?x669 (_ bv1 32))))
 (let (($x886 (=> $x500 $x522)))
 (let (($x99 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x746 (= $x500 $x99)))
 (let (($x57 (= false false)))
 (let (($x31 (=> $x150 $x57)))
 (let (($x483 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x578 (= $x150 $x483)))
 (let (($x339 (and $x578 $x31)))
 (let (($x568 (and $x339 $x746)))
 (let (($x767 (and $x568 $x886)))
 (let (($x464 (and $x767 $x293)))
 (let ((?x40 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x232 (= ?x40 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x540 (=> $x579 $x232)))
 (let (($x708 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x172 (= $x579 $x708)))
 (let (($x246 (= ?x48 (_ bv0 32))))
 (let (($x843 (=> $x246 $x57)))
 (let (($x354 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x209 (= $x246 $x354)))
 (let (($x753 (and $x209 $x843)))
 (let (($x387 (and $x753 $x172)))
 (let (($x392 (and $x387 $x540)))
 (let (($x175 (and $x392 $x464)))
 (let (($x220 (= ?x328 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x459 (=> $x826 $x220)))
 (let (($x154 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x369 (= $x826 $x154)))
 (let (($x639 (= ?x850 (_ bv0 32))))
 (let (($x141 (=> $x639 $x57)))
 (let (($x284 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x618 (= $x639 $x284)))
 (let (($x490 (and $x618 $x141)))
 (let (($x469 (and $x490 $x369)))
 (let (($x143 (and $x469 $x459)))
 (let (($x211 (and $x143 $x175)))
 (let ((?x127 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x256 (= ?x127 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x486 (=> $x204 $x256)))
 (let (($x451 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x182 (= $x204 $x451)))
 (let (($x363 (= ?x608 (_ bv0 32))))
 (let (($x85 (=> $x363 $x57)))
 (let (($x585 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x92 (= $x363 $x585)))
 (let (($x463 (and $x92 $x85)))
 (let (($x509 (and $x463 $x182)))
 (let (($x124 (and $x509 $x486)))
 (let (($x333 (and $x124 $x211)))
 (let (($x662 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x428 (and $x662 $x333)))
 (let (($x260 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x487 (and $x260 $x428)))
 (let (($x656 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x248 (and $x656 $x487)))
 (let (($x276 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x466 (and $x276 $x248)))
 (let (($x612 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x752 (and $x612 $x466)))
 (let (($x352 (and $x57 $x752)))
 (let (($x381 (= ?x684 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x676 (and $x381 $x352)))
 (let (($x297 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x412 (and $x297 $x676)))
 (let (($x452 (and $x57 $x412)))
 (let (($x545 (= ?x40 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x664 (and $x545 $x452)))
 (let (($x479 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x210 (and $x479 $x664)))
 (let (($x595 (and $x57 $x210)))
 (let (($x244 (= ?x328 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x308 (and $x244 $x595)))
 (let (($x814 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x581 (and $x814 $x308)))
 (let (($x773 (and $x57 $x581)))
 (let (($x589 (= ?x127 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x271 (and $x589 $x773)))
 (let (($x98 (bvugt ?x646 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x493 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x94 (=> (bvule ?x646 (bvsub (bvadd ?x646 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x493 $x98)))))))
 (let (($x421 (bvugt ?x461 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x603 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x614 (=> (bvule ?x461 (bvsub (bvadd ?x461 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x603 $x421)))))))
 (let (($x389 (bvugt ?x144 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x648 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x779)))
 (let (($x88 (=> (bvule ?x144 (bvsub (bvadd ?x144 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x648 $x389)))))))
 (let (($x551 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x558 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x558)))
 (let (($x24 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x551)))))))
 (let (($x296 (and $x24 $x88)))
 (let (($x89 (and $x296 $x614)))
 (let (($x35 (and $x89 $x94)))
 (let (($x890 (and $x35 $x271)))
 (let (($x627 (=> $x890 $x806)))
 (not $x627)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 244 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x662 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x561 (bvmul (_ bv4294967295 32) ?x662)))
 (let ((?x182 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x316 (bvadd ?x182 ?x561)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x635 (concat ?x69 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x613 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x442 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x27 (bvadd ?x442 (_ bv3 32))))
 (let ((?x790 (concat (select input.dst.llvm-mem ?x27) (concat ?x613 ?x635))))
 (let ((?x783 (bvmul (_ bv4294967295 32) ?x790)))
 (let ((?x709 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x358 (concat ?x709 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x153 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x528 (bvadd ?x153 (_ bv3 32))))
 (let ((?x480 (concat (select input.dst.llvm-mem ?x528) (concat ?x181 ?x358))))
 (let ((?x810 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x239 (concat ?x810 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x796 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x80 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x529 (bvadd ?x80 (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x529) (concat ?x796 ?x239))))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x681)))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x73)))
 (let ((?x829 (bvadd (bvadd (bvadd ?x482 ?x247) ?x480) ?x783)))
 (let (($x152 (= ?x829 ?x316)))
 (let (($x6 (= $x152 true)))
 (let (($x674 (= $x6 true)))
 (let ((?x569 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x434 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x661 (concat ?x226 (concat ?x67 (concat ?x434 ?x569)))))
 (let (($x740 (= ?x661 input.dst.llvm-%m)))
 (let (($x191 (= $x740 true)))
 (let (($x320 (= $x191 true)))
 (let (($x818 (= input.dst.llvm-%m ?x661)))
 (let ((?x594 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x436 (= (_ bv0 32) ?x594)))
 (let ((?x789 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x789)))
 (let (($x771 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x631 (and $x771 $x189)))
 (let (($x432 (and $x631 $x436)))
 (let (($x447 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x447 $x432)))
 (let (($x650 (and $x119 $x818)))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x699 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem ?x162))))
 (let ((?x586 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv2 32))) ?x699))))
 (let ((?x128 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x128 (_ bv1 32))))
 (=> $x429 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x586))))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x828 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x128 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x128 (_ bv1 32))))
 (= $x429 (bvuge ?x828 (_ bv1 32)))))))
 ))
 (let (($x294 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x684 (= false false)))
 (let ((?x128 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x128 (_ bv0 32))))
 (=> $x326 $x684)))))
 ))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x128 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x128 (_ bv0 32))))
 (= $x326 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x824 (and $x22 $x294)))
 (let (($x885 (and $x824 $x637)))
 (let (($x318 (and $x885 $x351)))
 (let (($x454 (= (bvand ?x442 (_ bv4294967292 32)) ?x442)))
 (let (($x159 (= (bvand ?x153 (_ bv4294967292 32)) ?x153)))
 (let (($x453 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x153 (bvsub ?x153 (_ bv4 32))) (bvult ?x153 (bvsub ?x153 (_ bv4 32))))))
 (let (($x420 (and true $x453)))
 (let (($x305 (= (bvand ?x80 (_ bv4294967292 32)) ?x80)))
 (let (($x291 (and $x305 $x420)))
 (let (($x233 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x442 (bvsub ?x442 (_ bv8 32))) (bvult ?x442 (bvsub ?x442 (_ bv8 32))))))
 (let (($x553 (and (and (and true $x233) $x291) $x159)))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x262 (and true $x59)))
 (let (($x186 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x138 (and $x186 $x262)))
 (let (($x366 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x80 (bvsub ?x80 (_ bv12 32))) (bvult ?x80 (bvsub ?x80 (_ bv12 32))))))
 (let (($x410 (and (and (and true $x186) $x366) $x138)))
 (let (($x484 (and (and (and (and $x410 $x553) $x454) $x318) $x650)))
 (let (($x534 (= $x484 true)))
 (let (($x624 (= $x534 true)))
 (let (($x321 (= $x624 true)))
 (let (($x201 (= $x410 true)))
 (let (($x287 (= $x201 true)))
 (let (($x573 (= $x287 true)))
 (let (($x688 (and $x553 $x454)))
 (let (($x728 (= $x688 true)))
 (let (($x280 (= $x728 true)))
 (let (($x598 (= $x280 true)))
 (let (($x604 (and $x598 $x573)))
 (let (($x659 (and $x604 $x321)))
 (let (($x50 (and $x659 $x320)))
 (let ((?x172 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x172 (_ bv0 32))))
 (let ((?x406 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x406 (_ bv1 32))))
 (let (($x112 (and $x236 $x387)))
 (let ((?x590 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x590 (_ bv1 32))))
 (let (($x171 (and $x530 $x112)))
 (let ((?x830 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x830 (_ bv0 32))))
 (let (($x797 (and $x671 $x171)))
 (let (($x560 (and $x797 $x50)))
 (let ((?x141 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x327 (= ?x141 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x195 (bvuge ?x830 (_ bv1 32))))
 (let (($x267 (=> $x195 $x327)))
 (let (($x811 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x325 (= $x195 $x811)))
 (let (($x684 (= false false)))
 (let (($x71 (=> $x671 $x684)))
 (let (($x626 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x710 (= $x671 $x626)))
 (let (($x823 (and $x710 $x71)))
 (let (($x441 (and $x823 $x325)))
 (let (($x255 (and $x441 $x267)))
 (let (($x335 (and $x255 $x560)))
 (let (($x278 (= ?x182 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x368 (=> $x530 $x278)))
 (let (($x795 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x136 (= $x530 $x795)))
 (let (($x834 (= ?x590 (_ bv0 32))))
 (let (($x827 (=> $x834 $x684)))
 (let (($x301 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x599 (= $x834 $x301)))
 (let (($x401 (and $x599 $x827)))
 (let (($x430 (and $x401 $x136)))
 (let (($x809 (and $x430 $x368)))
 (let (($x367 (and $x809 $x335)))
 (let (($x772 (= ?x662 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x437 (=> $x236 $x772)))
 (let (($x458 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x565 (= $x236 $x458)))
 (let (($x51 (= ?x406 (_ bv0 32))))
 (let (($x889 (=> $x51 $x684)))
 (let (($x180 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x791 (= $x51 $x180)))
 (let (($x391 (and $x791 $x889)))
 (let (($x269 (and $x391 $x565)))
 (let (($x749 (and $x269 $x437)))
 (let (($x222 (and $x749 $x367)))
 (let ((?x538 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x339 (= ?x538 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x483 (bvuge ?x172 (_ bv1 32))))
 (let (($x500 (=> $x483 $x339)))
 (let (($x177 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x578 (= $x483 $x177)))
 (let (($x232 (=> $x387 $x684)))
 (let (($x579 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x567 (= $x387 $x579)))
 (let (($x540 (and $x567 $x232)))
 (let (($x31 (and $x540 $x578)))
 (let (($x99 (and $x31 $x500)))
 (let (($x418 (and $x99 $x222)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x467 (and $x48 $x418)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x104 (and $x143 $x467)))
 (let (($x220 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x403 (and $x220 $x104)))
 (let (($x469 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x693 (and $x469 $x403)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x221 (and $x154 $x693)))
 (let (($x804 (and $x684 $x221)))
 (let (($x490 (= ?x141 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x642 (and $x490 $x804)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x394 (and $x256 $x642)))
 (let (($x419 (and $x684 $x394)))
 (let (($x509 (= ?x182 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x164 (and $x509 $x419)))
 (let (($x363 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x652 (and $x363 $x164)))
 (let (($x743 (and $x684 $x652)))
 (let (($x299 (= ?x662 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x537 (and $x299 $x743)))
 (let (($x381 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x799 (and $x381 $x537)))
 (let (($x58 (and $x684 $x799)))
 (let (($x297 (= ?x538 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x173 (and $x297 $x58)))
 (let (($x251 (bvugt ?x153 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x528)))
 (let (($x589 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x251)))))))
 (let (($x370 (bvugt ?x442 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x620 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x383 (=> (bvule ?x442 (bvsub (bvadd ?x442 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x620 $x370)))))))
 (let (($x602 (bvugt ?x80 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x759 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x529)))
 (let (($x281 (=> (bvule ?x80 (bvsub (bvadd ?x80 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x759 $x602)))))))
 (let (($x558 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x712 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x712)))
 (let (($x243 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x558)))))))
 (let (($x337 (and $x243 $x281)))
 (let (($x750 (and $x337 $x383)))
 (let (($x264 (and $x750 $x589)))
 (let (($x343 (and $x264 $x173)))
 (let (($x517 (=> $x343 $x674)))
 (not $x517)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x662 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x561 (bvmul (_ bv4294967295 32) ?x662)))
 (let ((?x182 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x316 (bvadd ?x182 ?x561)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x635 (concat ?x69 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x613 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x442 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x27 (bvadd ?x442 (_ bv3 32))))
 (let ((?x790 (concat (select input.dst.llvm-mem ?x27) (concat ?x613 ?x635))))
 (let ((?x783 (bvmul (_ bv4294967295 32) ?x790)))
 (let ((?x709 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x358 (concat ?x709 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x153 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x528 (bvadd ?x153 (_ bv3 32))))
 (let ((?x480 (concat (select input.dst.llvm-mem ?x528) (concat ?x181 ?x358))))
 (let ((?x810 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x239 (concat ?x810 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x796 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x80 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x529 (bvadd ?x80 (_ bv3 32))))
 (let ((?x247 (concat (select input.dst.llvm-mem ?x529) (concat ?x796 ?x239))))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x681)))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x73)))
 (let ((?x829 (bvadd (bvadd (bvadd ?x482 ?x247) ?x480) ?x783)))
 (let (($x152 (= ?x829 ?x316)))
 (let (($x6 (= $x152 true)))
 (let (($x674 (= $x6 true)))
 (let ((?x569 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x434 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x661 (concat ?x226 (concat ?x67 (concat ?x434 ?x569)))))
 (let (($x740 (= ?x661 input.dst.llvm-%m)))
 (let (($x191 (= $x740 true)))
 (let (($x320 (= $x191 true)))
 (let (($x818 (= input.dst.llvm-%m ?x661)))
 (let ((?x594 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x436 (= (_ bv0 32) ?x594)))
 (let ((?x789 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x789)))
 (let (($x771 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x631 (and $x771 $x189)))
 (let (($x432 (and $x631 $x436)))
 (let (($x447 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x447 $x432)))
 (let (($x650 (and $x119 $x818)))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x162 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x699 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv1 32))) (select input.dst.llvm-mem ?x162))))
 (let ((?x586 (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x162 (_ bv2 32))) ?x699))))
 (let ((?x128 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x128 (_ bv1 32))))
 (=> $x429 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x586))))))))
 ))
 (let (($x637 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x828 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x128 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x429 (bvuge ?x128 (_ bv1 32))))
 (= $x429 (bvuge ?x828 (_ bv1 32)))))))
 ))
 (let (($x294 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x684 (= false false)))
 (let ((?x128 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x128 (_ bv0 32))))
 (=> $x326 $x684)))))
 ))
 (let (($x22 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x128 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x326 (= ?x128 (_ bv0 32))))
 (= $x326 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x824 (and $x22 $x294)))
 (let (($x885 (and $x824 $x637)))
 (let (($x318 (and $x885 $x351)))
 (let (($x454 (= (bvand ?x442 (_ bv4294967292 32)) ?x442)))
 (let (($x159 (= (bvand ?x153 (_ bv4294967292 32)) ?x153)))
 (let (($x453 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x153 (bvsub ?x153 (_ bv4 32))) (bvult ?x153 (bvsub ?x153 (_ bv4 32))))))
 (let (($x420 (and true $x453)))
 (let (($x305 (= (bvand ?x80 (_ bv4294967292 32)) ?x80)))
 (let (($x291 (and $x305 $x420)))
 (let (($x233 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x442 (bvsub ?x442 (_ bv8 32))) (bvult ?x442 (bvsub ?x442 (_ bv8 32))))))
 (let (($x553 (and (and (and true $x233) $x291) $x159)))
 (let (($x59 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x262 (and true $x59)))
 (let (($x186 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x138 (and $x186 $x262)))
 (let (($x366 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x80 (bvsub ?x80 (_ bv12 32))) (bvult ?x80 (bvsub ?x80 (_ bv12 32))))))
 (let (($x410 (and (and (and true $x186) $x366) $x138)))
 (let (($x484 (and (and (and (and $x410 $x553) $x454) $x318) $x650)))
 (let (($x534 (= $x484 true)))
 (let (($x624 (= $x534 true)))
 (let (($x321 (= $x624 true)))
 (let (($x201 (= $x410 true)))
 (let (($x287 (= $x201 true)))
 (let (($x573 (= $x287 true)))
 (let (($x688 (and $x553 $x454)))
 (let (($x728 (= $x688 true)))
 (let (($x280 (= $x728 true)))
 (let (($x598 (= $x280 true)))
 (let (($x604 (and $x598 $x573)))
 (let (($x659 (and $x604 $x321)))
 (let (($x50 (and $x659 $x320)))
 (let ((?x172 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x172 (_ bv0 32))))
 (let ((?x406 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (bvuge ?x406 (_ bv1 32))))
 (let (($x112 (and $x236 $x387)))
 (let ((?x590 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x530 (bvuge ?x590 (_ bv1 32))))
 (let (($x171 (and $x530 $x112)))
 (let ((?x830 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x671 (= ?x830 (_ bv0 32))))
 (let (($x797 (and $x671 $x171)))
 (let (($x560 (and $x797 $x50)))
 (let ((?x141 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x327 (= ?x141 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x195 (bvuge ?x830 (_ bv1 32))))
 (let (($x267 (=> $x195 $x327)))
 (let (($x811 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x325 (= $x195 $x811)))
 (let (($x684 (= false false)))
 (let (($x71 (=> $x671 $x684)))
 (let (($x626 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x710 (= $x671 $x626)))
 (let (($x823 (and $x710 $x71)))
 (let (($x441 (and $x823 $x325)))
 (let (($x255 (and $x441 $x267)))
 (let (($x335 (and $x255 $x560)))
 (let (($x278 (= ?x182 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x368 (=> $x530 $x278)))
 (let (($x795 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x136 (= $x530 $x795)))
 (let (($x834 (= ?x590 (_ bv0 32))))
 (let (($x827 (=> $x834 $x684)))
 (let (($x301 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x599 (= $x834 $x301)))
 (let (($x401 (and $x599 $x827)))
 (let (($x430 (and $x401 $x136)))
 (let (($x809 (and $x430 $x368)))
 (let (($x367 (and $x809 $x335)))
 (let (($x772 (= ?x662 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x437 (=> $x236 $x772)))
 (let (($x458 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x565 (= $x236 $x458)))
 (let (($x51 (= ?x406 (_ bv0 32))))
 (let (($x889 (=> $x51 $x684)))
 (let (($x180 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x791 (= $x51 $x180)))
 (let (($x391 (and $x791 $x889)))
 (let (($x269 (and $x391 $x565)))
 (let (($x749 (and $x269 $x437)))
 (let (($x222 (and $x749 $x367)))
 (let ((?x538 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x339 (= ?x538 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x483 (bvuge ?x172 (_ bv1 32))))
 (let (($x500 (=> $x483 $x339)))
 (let (($x177 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x578 (= $x483 $x177)))
 (let (($x232 (=> $x387 $x684)))
 (let (($x579 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x567 (= $x387 $x579)))
 (let (($x540 (and $x567 $x232)))
 (let (($x31 (and $x540 $x578)))
 (let (($x99 (and $x31 $x500)))
 (let (($x418 (and $x99 $x222)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x467 (and $x48 $x418)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x104 (and $x143 $x467)))
 (let (($x220 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x403 (and $x220 $x104)))
 (let (($x469 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x693 (and $x469 $x403)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x221 (and $x154 $x693)))
 (let (($x804 (and $x684 $x221)))
 (let (($x490 (= ?x141 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x642 (and $x490 $x804)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x394 (and $x256 $x642)))
 (let (($x419 (and $x684 $x394)))
 (let (($x509 (= ?x182 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x164 (and $x509 $x419)))
 (let (($x363 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x652 (and $x363 $x164)))
 (let (($x743 (and $x684 $x652)))
 (let (($x299 (= ?x662 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x537 (and $x299 $x743)))
 (let (($x381 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x799 (and $x381 $x537)))
 (let (($x58 (and $x684 $x799)))
 (let (($x297 (= ?x538 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x173 (and $x297 $x58)))
 (let (($x251 (bvugt ?x153 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x528)))
 (let (($x589 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x251)))))))
 (let (($x370 (bvugt ?x442 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x620 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x383 (=> (bvule ?x442 (bvsub (bvadd ?x442 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x620 $x370)))))))
 (let (($x602 (bvugt ?x80 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x759 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x529)))
 (let (($x281 (=> (bvule ?x80 (bvsub (bvadd ?x80 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x759 $x602)))))))
 (let (($x558 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x712 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x712)))
 (let (($x243 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x132 $x558)))))))
 (let (($x337 (and $x243 $x281)))
 (let (($x750 (and $x337 $x383)))
 (let (($x264 (and $x750 $x589)))
 (let (($x343 (and $x264 $x173)))
 (let (($x517 (=> $x343 $x674)))
 (not $x517)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 244 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x782 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x578 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x240 (bvadd ?x578 ?x782)))
 (let ((?x409 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x705 (concat ?x409 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x568 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x421 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x580 (bvadd ?x421 (_ bv3 32))))
 (let ((?x279 (concat (select input.dst.llvm-mem ?x580) (concat ?x568 ?x705))))
 (let ((?x424 (bvmul (_ bv4294967295 32) ?x279)))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x254 (concat ?x689 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x644 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x557 (bvadd ?x27 (_ bv3 32))))
 (let ((?x450 (concat (select input.dst.llvm-mem ?x557) (concat ?x644 ?x254))))
 (let ((?x596 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x685 (concat ?x596 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x741 (bvadd ?x132 (_ bv3 32))))
 (let ((?x615 (concat (select input.dst.llvm-mem ?x741) (concat ?x116 ?x685))))
 (let ((?x655 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x884 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x655)))
 (let ((?x732 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x884)))
 (let ((?x246 (bvadd (bvadd (bvadd ?x732 ?x615) ?x450) ?x424)))
 (let (($x354 (= ?x246 ?x240)))
 (let (($x209 (= $x354 true)))
 (let (($x392 (= $x209 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x658 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x638 (concat ?x86 (concat ?x658 (concat ?x5 ?x145)))))
 (let (($x257 (= ?x638 input.dst.llvm-%m)))
 (let (($x158 (= $x257 true)))
 (let (($x446 (= $x158 true)))
 (let (($x405 (= input.dst.llvm-%m ?x638)))
 (let ((?x175 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x211 (= (_ bv0 32) ?x175)))
 (let ((?x539 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x539)))
 (let (($x376 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x464 (and $x376 $x293)))
 (let (($x761 (and $x464 $x211)))
 (let (($x722 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x722 $x761)))
 (let (($x23 (and $x384 $x405)))
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x611 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x587 (concat (select input.dst.llvm-mem (bvadd ?x611 (_ bv1 32))) (select input.dst.llvm-mem ?x611))))
 (let ((?x720 (concat (select input.dst.llvm-mem (bvadd ?x611 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x611 (_ bv2 32))) ?x587))))
 (let ((?x57 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (bvuge ?x57 (_ bv1 32))))
 (=> $x346 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x720))))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x57 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (bvuge ?x57 (_ bv1 32))))
 (= $x346 (bvuge ?x124 (_ bv1 32)))))))
 ))
 (let (($x612 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x57 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x575 (= ?x57 (_ bv0 32))))
 (=> $x575 $x141)))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x57 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x575 (= ?x57 (_ bv0 32))))
 (= $x575 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x113 (and $x92 $x612)))
 (let (($x248 (and $x113 $x428)))
 (let (($x12 (and $x248 $x382)))
 (let (($x126 (= (bvand ?x421 (_ bv4294967292 32)) ?x421)))
 (let (($x586 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x835 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x445 (and true $x835)))
 (let (($x178 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x699 (and $x178 $x445)))
 (let (($x752 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x421 (bvsub ?x421 (_ bv8 32))) (bvult ?x421 (bvsub ?x421 (_ bv8 32))))))
 (let (($x351 (and (and (and true $x752) $x699) $x586)))
 (let (($x434 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x569 (and true $x434)))
 (let (($x631 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x525 (and $x631 $x569)))
 (let (($x849 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x132 (bvsub ?x132 (_ bv12 32))) (bvult ?x132 (bvsub ?x132 (_ bv12 32))))))
 (let (($x818 (and (and (and true $x631) $x849) $x525)))
 (let (($x228 (and (and (and (and $x818 $x351) $x126) $x12) $x23)))
 (let (($x285 (= $x228 true)))
 (let (($x79 (= $x285 true)))
 (let (($x535 (= $x79 true)))
 (let (($x650 (= $x818 true)))
 (let (($x484 (= $x650 true)))
 (let (($x534 (= $x484 true)))
 (let (($x411 (and $x351 $x126)))
 (let (($x447 (= $x411 true)))
 (let (($x771 (= $x447 true)))
 (let (($x789 (= $x771 true)))
 (let (($x624 (and $x789 $x534)))
 (let (($x109 (and $x624 $x535)))
 (let (($x686 (and $x109 $x446)))
 (let ((?x136 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (bvuge ?x136 (_ bv1 32))))
 (let ((?x797 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (= ?x797 (_ bv0 32))))
 (let (($x824 (and $x634 $x626)))
 (let ((?x728 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x728 (_ bv1 32))))
 (let (($x429 (and $x366 $x824)))
 (let ((?x690 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x690 (_ bv0 32))))
 (let (($x319 (and $x55 $x429)))
 (let (($x815 (and $x319 $x686)))
 (let ((?x889 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x22 (= ?x889 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x828 (bvuge ?x690 (_ bv1 32))))
 (let (($x533 (=> $x828 $x22)))
 (let (($x425 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x891 (= $x828 $x425)))
 (let (($x141 (= false false)))
 (let (($x502 (=> $x55 $x141)))
 (let (($x573 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x304 (= $x55 $x573)))
 (let (($x128 (and $x304 $x502)))
 (let (($x184 (and $x128 $x891)))
 (let (($x294 (and $x184 $x533)))
 (let (($x81 (and $x294 $x815)))
 (let (($x643 (= ?x578 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x202 (=> $x366 $x643)))
 (let (($x300 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x769 (= $x366 $x300)))
 (let (($x280 (= ?x728 (_ bv0 32))))
 (let (($x757 (=> $x280 $x141)))
 (let (($x454 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x598 (= $x280 $x454)))
 (let (($x186 (and $x598 $x757)))
 (let (($x887 (and $x186 $x769)))
 (let (($x758 (and $x887 $x202)))
 (let (($x806 (and $x758 $x81)))
 (let ((?x48 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x733 (= ?x48 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x359 (bvuge ?x797 (_ bv1 32))))
 (let (($x453 (=> $x359 $x733)))
 (let (($x305 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x87 (= $x359 $x305)))
 (let (($x283 (=> $x634 $x141)))
 (let (($x112 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x510 (= $x634 $x112)))
 (let (($x622 (and $x510 $x283)))
 (let (($x194 (and $x622 $x87)))
 (let (($x420 (and $x194 $x453)))
 (let (($x627 (and $x420 $x806)))
 (let (($x823 (= ?x782 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x195 (=> $x626 $x823)))
 (let (($x711 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x710 (= $x626 $x711)))
 (let (($x430 (= ?x136 (_ bv0 32))))
 (let (($x278 (=> $x430 $x141)))
 (let (($x530 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x822 (= $x430 $x530)))
 (let (($x368 (and $x822 $x278)))
 (let (($x71 (and $x368 $x710)))
 (let (($x811 (and $x71 $x195)))
 (let (($x609 (and $x811 $x627)))
 (let (($x590 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x20 (and $x590 $x609)))
 (let (($x749 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x455 (and $x749 $x20)))
 (let (($x772 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x423 (and $x772 $x455)))
 (let (($x269 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x503 (and $x269 $x423)))
 (let (($x458 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x726 (and $x458 $x503)))
 (let (($x798 (and $x141 $x726)))
 (let (($x391 (= ?x889 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x755 (and $x391 $x798)))
 (let (($x339 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x640 (and $x339 $x755)))
 (let (($x302 (and $x141 $x640)))
 (let (($x31 (= ?x578 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x230 (and $x31 $x302)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x665 (and $x387 $x230)))
 (let (($x41 (and $x141 $x665)))
 (let (($x708 (= ?x48 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x793 (and $x708 $x41)))
 (let (($x490 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x737 (and $x490 $x793)))
 (let (($x133 (and $x141 $x737)))
 (let (($x256 (= ?x782 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x78 (and $x256 $x133)))
 (let (($x35 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x557)))
 (let (($x297 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x35)))))))
 (let (($x89 (bvugt ?x421 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x614 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x580)))
 (let (($x98 (=> (bvule ?x421 (bvsub (bvadd ?x421 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x614 $x89)))))))
 (let (($x296 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x741)))
 (let (($x603 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x296)))))))
 (let (($x572 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x332 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x712 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x332)))
 (let (($x389 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x712 $x572)))))))
 (let (($x461 (and $x389 $x603)))
 (let (($x361 (and $x461 $x98)))
 (let (($x839 (and $x361 $x297)))
 (let (($x225 (and $x839 $x78)))
 (let (($x651 (=> $x225 $x392)))
 (not $x651))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x782 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x578 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x240 (bvadd ?x578 ?x782)))
 (let ((?x409 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x705 (concat ?x409 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x568 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x421 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x580 (bvadd ?x421 (_ bv3 32))))
 (let ((?x279 (concat (select input.dst.llvm-mem ?x580) (concat ?x568 ?x705))))
 (let ((?x424 (bvmul (_ bv4294967295 32) ?x279)))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x254 (concat ?x689 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x644 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x27 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x557 (bvadd ?x27 (_ bv3 32))))
 (let ((?x450 (concat (select input.dst.llvm-mem ?x557) (concat ?x644 ?x254))))
 (let ((?x596 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x685 (concat ?x596 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x132 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x741 (bvadd ?x132 (_ bv3 32))))
 (let ((?x615 (concat (select input.dst.llvm-mem ?x741) (concat ?x116 ?x685))))
 (let ((?x655 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x884 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x655)))
 (let ((?x732 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x884)))
 (let ((?x246 (bvadd (bvadd (bvadd ?x732 ?x615) ?x450) ?x424)))
 (let (($x354 (= ?x246 ?x240)))
 (let (($x209 (= $x354 true)))
 (let (($x392 (= $x209 true)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x658 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x638 (concat ?x86 (concat ?x658 (concat ?x5 ?x145)))))
 (let (($x257 (= ?x638 input.dst.llvm-%m)))
 (let (($x158 (= $x257 true)))
 (let (($x446 (= $x158 true)))
 (let (($x405 (= input.dst.llvm-%m ?x638)))
 (let ((?x175 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x211 (= (_ bv0 32) ?x175)))
 (let ((?x539 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x539)))
 (let (($x376 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x464 (and $x376 $x293)))
 (let (($x761 (and $x464 $x211)))
 (let (($x722 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x384 (and $x722 $x761)))
 (let (($x23 (and $x384 $x405)))
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x611 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x587 (concat (select input.dst.llvm-mem (bvadd ?x611 (_ bv1 32))) (select input.dst.llvm-mem ?x611))))
 (let ((?x720 (concat (select input.dst.llvm-mem (bvadd ?x611 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x611 (_ bv2 32))) ?x587))))
 (let ((?x57 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (bvuge ?x57 (_ bv1 32))))
 (=> $x346 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x720))))))))
 ))
 (let (($x428 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x124 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x57 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x346 (bvuge ?x57 (_ bv1 32))))
 (= $x346 (bvuge ?x124 (_ bv1 32)))))))
 ))
 (let (($x612 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x57 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x575 (= ?x57 (_ bv0 32))))
 (=> $x575 $x141)))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x57 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x575 (= ?x57 (_ bv0 32))))
 (= $x575 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x113 (and $x92 $x612)))
 (let (($x248 (and $x113 $x428)))
 (let (($x12 (and $x248 $x382)))
 (let (($x126 (= (bvand ?x421 (_ bv4294967292 32)) ?x421)))
 (let (($x586 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x835 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv4 32))) (bvult ?x27 (bvsub ?x27 (_ bv4 32))))))
 (let (($x445 (and true $x835)))
 (let (($x178 (= (bvand ?x132 (_ bv4294967292 32)) ?x132)))
 (let (($x699 (and $x178 $x445)))
 (let (($x752 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x421 (bvsub ?x421 (_ bv8 32))) (bvult ?x421 (bvsub ?x421 (_ bv8 32))))))
 (let (($x351 (and (and (and true $x752) $x699) $x586)))
 (let (($x434 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x569 (and true $x434)))
 (let (($x631 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x525 (and $x631 $x569)))
 (let (($x849 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x132 (bvsub ?x132 (_ bv12 32))) (bvult ?x132 (bvsub ?x132 (_ bv12 32))))))
 (let (($x818 (and (and (and true $x631) $x849) $x525)))
 (let (($x228 (and (and (and (and $x818 $x351) $x126) $x12) $x23)))
 (let (($x285 (= $x228 true)))
 (let (($x79 (= $x285 true)))
 (let (($x535 (= $x79 true)))
 (let (($x650 (= $x818 true)))
 (let (($x484 (= $x650 true)))
 (let (($x534 (= $x484 true)))
 (let (($x411 (and $x351 $x126)))
 (let (($x447 (= $x411 true)))
 (let (($x771 (= $x447 true)))
 (let (($x789 (= $x771 true)))
 (let (($x624 (and $x789 $x534)))
 (let (($x109 (and $x624 $x535)))
 (let (($x686 (and $x109 $x446)))
 (let ((?x136 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x626 (bvuge ?x136 (_ bv1 32))))
 (let ((?x797 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x634 (= ?x797 (_ bv0 32))))
 (let (($x824 (and $x634 $x626)))
 (let ((?x728 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x366 (bvuge ?x728 (_ bv1 32))))
 (let (($x429 (and $x366 $x824)))
 (let ((?x690 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x55 (= ?x690 (_ bv0 32))))
 (let (($x319 (and $x55 $x429)))
 (let (($x815 (and $x319 $x686)))
 (let ((?x889 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x22 (= ?x889 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x828 (bvuge ?x690 (_ bv1 32))))
 (let (($x533 (=> $x828 $x22)))
 (let (($x425 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x891 (= $x828 $x425)))
 (let (($x141 (= false false)))
 (let (($x502 (=> $x55 $x141)))
 (let (($x573 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x304 (= $x55 $x573)))
 (let (($x128 (and $x304 $x502)))
 (let (($x184 (and $x128 $x891)))
 (let (($x294 (and $x184 $x533)))
 (let (($x81 (and $x294 $x815)))
 (let (($x643 (= ?x578 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x202 (=> $x366 $x643)))
 (let (($x300 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x769 (= $x366 $x300)))
 (let (($x280 (= ?x728 (_ bv0 32))))
 (let (($x757 (=> $x280 $x141)))
 (let (($x454 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x598 (= $x280 $x454)))
 (let (($x186 (and $x598 $x757)))
 (let (($x887 (and $x186 $x769)))
 (let (($x758 (and $x887 $x202)))
 (let (($x806 (and $x758 $x81)))
 (let ((?x48 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x733 (= ?x48 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x359 (bvuge ?x797 (_ bv1 32))))
 (let (($x453 (=> $x359 $x733)))
 (let (($x305 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x87 (= $x359 $x305)))
 (let (($x283 (=> $x634 $x141)))
 (let (($x112 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x510 (= $x634 $x112)))
 (let (($x622 (and $x510 $x283)))
 (let (($x194 (and $x622 $x87)))
 (let (($x420 (and $x194 $x453)))
 (let (($x627 (and $x420 $x806)))
 (let (($x823 (= ?x782 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x195 (=> $x626 $x823)))
 (let (($x711 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x710 (= $x626 $x711)))
 (let (($x430 (= ?x136 (_ bv0 32))))
 (let (($x278 (=> $x430 $x141)))
 (let (($x530 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x822 (= $x430 $x530)))
 (let (($x368 (and $x822 $x278)))
 (let (($x71 (and $x368 $x710)))
 (let (($x811 (and $x71 $x195)))
 (let (($x609 (and $x811 $x627)))
 (let (($x590 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x20 (and $x590 $x609)))
 (let (($x749 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x455 (and $x749 $x20)))
 (let (($x772 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x423 (and $x772 $x455)))
 (let (($x269 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x503 (and $x269 $x423)))
 (let (($x458 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x726 (and $x458 $x503)))
 (let (($x798 (and $x141 $x726)))
 (let (($x391 (= ?x889 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x755 (and $x391 $x798)))
 (let (($x339 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x640 (and $x339 $x755)))
 (let (($x302 (and $x141 $x640)))
 (let (($x31 (= ?x578 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x230 (and $x31 $x302)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x665 (and $x387 $x230)))
 (let (($x41 (and $x141 $x665)))
 (let (($x708 (= ?x48 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x793 (and $x708 $x41)))
 (let (($x490 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x737 (and $x490 $x793)))
 (let (($x133 (and $x141 $x737)))
 (let (($x256 (= ?x782 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x78 (and $x256 $x133)))
 (let (($x35 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x557)))
 (let (($x297 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x35)))))))
 (let (($x89 (bvugt ?x421 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x614 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x580)))
 (let (($x98 (=> (bvule ?x421 (bvsub (bvadd ?x421 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x614 $x89)))))))
 (let (($x296 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x741)))
 (let (($x603 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x88 $x296)))))))
 (let (($x572 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x332 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x712 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x332)))
 (let (($x389 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x712 $x572)))))))
 (let (($x461 (and $x389 $x603)))
 (let (($x361 (and $x461 $x98)))
 (let (($x839 (and $x361 $x297)))
 (let (($x225 (and $x839 $x78)))
 (let (($x651 (=> $x225 $x392)))
 (not $x651))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 243 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x700 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x700 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x514 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x370 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x646 (bvadd ?x370 (_ bv3 32))))
 (let ((?x512 (concat (select input.dst.llvm-mem ?x646) (concat ?x514 ?x325))))
 (let ((?x703 (bvmul (_ bv4294967295 32) ?x512)))
 (let ((?x649 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x487 (concat ?x649 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x580 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x127 (bvadd ?x580 (_ bv3 32))))
 (let ((?x159 (concat (select input.dst.llvm-mem ?x127) (concat ?x291 ?x487))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x581 (concat ?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x572 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x837 (bvadd ?x572 (_ bv3 32))))
 (let ((?x138 (concat (select input.dst.llvm-mem ?x837) (concat ?x82 ?x581))))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x676 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x412)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x676)))
 (let ((?x212 (bvadd (bvadd (bvadd ?x19 ?x138) ?x159) ?x703)))
 (let ((?x710 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x301 (= ?x710 ?x212)))
 (let (($x599 (= $x301 true)))
 (let (($x809 (= $x599 true)))
 (let ((?x819 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x709 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x362 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x480 (concat ?x74 (concat ?x362 (concat ?x709 ?x819)))))
 (let (($x561 (= ?x480 input.dst.llvm-%m)))
 (let (($x316 (= $x561 true)))
 (let (($x152 (= $x316 true)))
 (let (($x358 (= input.dst.llvm-%m ?x480)))
 (let ((?x222 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x488 (= (_ bv0 32) ?x222)))
 (let ((?x560 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x560)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x367 (and $x50 $x335)))
 (let (($x247 (and $x367 $x488)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (and $x191 $x247)))
 (let (($x541 (and $x554 $x358)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x523 (_ bv1 32))) (select input.dst.llvm-mem ?x523))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x523 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x523 (_ bv2 32))) ?x374))))
 (let ((?x843 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x843 (_ bv1 32))))
 (=> $x418 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x73))))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x843 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x843 (_ bv1 32))))
 (= $x418 (bvuge ?x218 (_ bv1 32)))))))
 ))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x889 (= false false)))
 (let ((?x843 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x579 (= ?x843 (_ bv0 32))))
 (=> $x579 $x889)))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x843 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x579 (= ?x843 (_ bv0 32))))
 (= $x579 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x469 (and $x232 $x369)))
 (let (($x693 (and $x469 $x403)))
 (let (($x659 (and $x693 $x320)))
 (let (($x747 (= (bvand ?x370 (_ bv4294967292 32)) ?x370)))
 (let (($x720 (= (bvand ?x580 (_ bv4294967292 32)) ?x580)))
 (let (($x93 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x580 (bvsub ?x580 (_ bv4 32))) (bvult ?x580 (bvsub ?x580 (_ bv4 32))))))
 (let (($x207 (and true $x93)))
 (let (($x62 (= (bvand ?x572 (_ bv4294967292 32)) ?x572)))
 (let (($x587 (and $x62 $x207)))
 (let (($x221 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x370 (bvsub ?x370 (_ bv8 32))) (bvult ?x370 (bvsub ?x370 (_ bv8 32))))))
 (let (($x382 (and (and (and true $x221) $x587) $x720)))
 (let (($x5 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x145 (and true $x5)))
 (let (($x464 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x30 (and $x464 $x145)))
 (let (($x259 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x572 (bvsub ?x572 (_ bv12 32))) (bvult ?x572 (bvsub ?x572 (_ bv12 32))))))
 (let (($x405 (and (and (and true $x464) $x259) $x30)))
 (let (($x499 (and (and (and (and $x405 $x382) $x747) $x659) $x541)))
 (let (($x635 (= $x499 true)))
 (let (($x790 (= $x635 true)))
 (let (($x783 (= $x790 true)))
 (let (($x23 (= $x405 true)))
 (let (($x228 (= $x23 true)))
 (let (($x285 (= $x228 true)))
 (let (($x636 (and $x382 $x747)))
 (let (($x722 (= $x636 true)))
 (let (($x376 (= $x722 true)))
 (let (($x539 (= $x376 true)))
 (let (($x79 (and $x539 $x285)))
 (let (($x829 (and $x79 $x783)))
 (let (($x674 (and $x829 $x152)))
 (let ((?x769 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x887 (= ?x769 (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x319 (_ bv0 32))))
 (let (($x113 (and $x637 $x887)))
 (let ((?x447 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x849 (bvuge ?x447 (_ bv1 32))))
 (let (($x346 (and $x849 $x113)))
 (let ((?x465 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x744 (= ?x465 (_ bv0 32))))
 (let (($x40 (and $x744 $x346)))
 (let (($x6 (and $x40 $x674)))
 (let ((?x283 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x92 (= ?x283 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x124 (bvuge ?x465 (_ bv1 32))))
 (let (($x290 (=> $x124 $x92)))
 (let (($x486 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x142 (= $x124 $x486)))
 (let (($x889 (= false false)))
 (let (($x639 (=> $x744 $x889)))
 (let (($x534 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x564 (= $x744 $x534)))
 (let (($x57 (and $x564 $x639)))
 (let (($x585 (and $x57 $x142)))
 (let (($x612 (and $x585 $x290)))
 (let (($x517 (and $x612 $x6)))
 (let (($x226 (= ?x710 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x67 (=> $x849 $x226)))
 (let (($x119 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x661 (= $x849 $x119)))
 (let (($x771 (= ?x447 (_ bv0 32))))
 (let (($x189 (=> $x771 $x889)))
 (let (($x126 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x789 (= $x771 $x126)))
 (let (($x631 (and $x789 $x189)))
 (let (($x21 (and $x631 $x661)))
 (let (($x718 (and $x21 $x67)))
 (let (($x805 (and $x718 $x517)))
 (let ((?x590 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x820 (= ?x590 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x792 (bvuge ?x319 (_ bv1 32))))
 (let (($x835 (=> $x792 $x820)))
 (let (($x178 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x314 (= $x792 $x178)))
 (let (($x885 (=> $x637 $x889)))
 (let (($x824 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x53 (= $x637 $x824)))
 (let (($x501 (and $x53 $x885)))
 (let (($x438 (and $x501 $x314)))
 (let (($x445 (and $x438 $x835)))
 (let (($x65 (and $x445 $x805)))
 (let ((?x753 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x128 (= ?x753 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x573 (bvuge ?x769 (_ bv1 32))))
 (let (($x828 (=> $x573 $x128)))
 (let (($x201 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x304 (= $x573 $x201)))
 (let (($x643 (=> $x887 $x889)))
 (let (($x366 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x679 (= $x887 $x366)))
 (let (($x202 (and $x679 $x643)))
 (let (($x502 (and $x202 $x304)))
 (let (($x425 (and $x502 $x828)))
 (let (($x105 (and $x425 $x65)))
 (let (($x728 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x85 (and $x728 $x105)))
 (let (($x420 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x276 (and $x420 $x85)))
 (let (($x733 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x656 (and $x733 $x276)))
 (let (($x194 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x385 (and $x194 $x656)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x135 (and $x305 $x385)))
 (let (($x328 (and $x889 $x135)))
 (let (($x622 (= ?x283 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x479 (and $x622 $x328)))
 (let (($x823 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x244 (and $x823 $x479)))
 (let (($x310 (and $x889 $x244)))
 (let (($x71 (= ?x710 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x284 (and $x71 $x310)))
 (let (($x430 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x463 (and $x430 $x284)))
 (let (($x204 (and $x889 $x463)))
 (let (($x795 (= ?x590 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x508 (and $x795 $x204)))
 (let (($x391 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x260 (and $x391 $x508)))
 (let (($x466 (and $x889 $x260)))
 (let (($x339 (= ?x753 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x780 (and $x339 $x466)))
 (let (($x264 (bvugt ?x580 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x589 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x256 (=> (bvule ?x580 (bvsub (bvadd ?x580 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x589 $x264)))))))
 (let (($x750 (bvugt ?x370 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x383 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x646)))
 (let (($x251 (=> (bvule ?x370 (bvsub (bvadd ?x370 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x383 $x750)))))))
 (let (($x337 (bvugt ?x572 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x837)))
 (let (($x620 (=> (bvule ?x572 (bvsub (bvadd ?x572 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x337)))))))
 (let (($x802 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x298 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x298)))
 (let (($x602 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x243 $x802)))))))
 (let (($x442 (and $x602 $x620)))
 (let (($x493 (and $x442 $x251)))
 (let (($x545 (and $x493 $x256)))
 (let (($x352 (and $x545 $x780)))
 (let (($x379 (=> $x352 $x809)))
 (not $x379)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x700 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x325 (concat ?x700 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x514 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x370 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x646 (bvadd ?x370 (_ bv3 32))))
 (let ((?x512 (concat (select input.dst.llvm-mem ?x646) (concat ?x514 ?x325))))
 (let ((?x703 (bvmul (_ bv4294967295 32) ?x512)))
 (let ((?x649 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x487 (concat ?x649 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x580 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x127 (bvadd ?x580 (_ bv3 32))))
 (let ((?x159 (concat (select input.dst.llvm-mem ?x127) (concat ?x291 ?x487))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x581 (concat ?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x572 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x837 (bvadd ?x572 (_ bv3 32))))
 (let ((?x138 (concat (select input.dst.llvm-mem ?x837) (concat ?x82 ?x581))))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x676 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x412)))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x676)))
 (let ((?x212 (bvadd (bvadd (bvadd ?x19 ?x138) ?x159) ?x703)))
 (let ((?x710 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x301 (= ?x710 ?x212)))
 (let (($x599 (= $x301 true)))
 (let (($x809 (= $x599 true)))
 (let ((?x819 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x709 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x362 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x480 (concat ?x74 (concat ?x362 (concat ?x709 ?x819)))))
 (let (($x561 (= ?x480 input.dst.llvm-%m)))
 (let (($x316 (= $x561 true)))
 (let (($x152 (= $x316 true)))
 (let (($x358 (= input.dst.llvm-%m ?x480)))
 (let ((?x222 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x488 (= (_ bv0 32) ?x222)))
 (let ((?x560 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x560)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x367 (and $x50 $x335)))
 (let (($x247 (and $x367 $x488)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x554 (and $x191 $x247)))
 (let (($x541 (and $x554 $x358)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x523 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x523 (_ bv1 32))) (select input.dst.llvm-mem ?x523))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x523 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x523 (_ bv2 32))) ?x374))))
 (let ((?x843 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x843 (_ bv1 32))))
 (=> $x418 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x73))))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x218 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x843 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x843 (_ bv1 32))))
 (= $x418 (bvuge ?x218 (_ bv1 32)))))))
 ))
 (let (($x369 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x889 (= false false)))
 (let ((?x843 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x579 (= ?x843 (_ bv0 32))))
 (=> $x579 $x889)))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x843 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x579 (= ?x843 (_ bv0 32))))
 (= $x579 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x469 (and $x232 $x369)))
 (let (($x693 (and $x469 $x403)))
 (let (($x659 (and $x693 $x320)))
 (let (($x747 (= (bvand ?x370 (_ bv4294967292 32)) ?x370)))
 (let (($x720 (= (bvand ?x580 (_ bv4294967292 32)) ?x580)))
 (let (($x93 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x580 (bvsub ?x580 (_ bv4 32))) (bvult ?x580 (bvsub ?x580 (_ bv4 32))))))
 (let (($x207 (and true $x93)))
 (let (($x62 (= (bvand ?x572 (_ bv4294967292 32)) ?x572)))
 (let (($x587 (and $x62 $x207)))
 (let (($x221 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x370 (bvsub ?x370 (_ bv8 32))) (bvult ?x370 (bvsub ?x370 (_ bv8 32))))))
 (let (($x382 (and (and (and true $x221) $x587) $x720)))
 (let (($x5 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x145 (and true $x5)))
 (let (($x464 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x30 (and $x464 $x145)))
 (let (($x259 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x572 (bvsub ?x572 (_ bv12 32))) (bvult ?x572 (bvsub ?x572 (_ bv12 32))))))
 (let (($x405 (and (and (and true $x464) $x259) $x30)))
 (let (($x499 (and (and (and (and $x405 $x382) $x747) $x659) $x541)))
 (let (($x635 (= $x499 true)))
 (let (($x790 (= $x635 true)))
 (let (($x783 (= $x790 true)))
 (let (($x23 (= $x405 true)))
 (let (($x228 (= $x23 true)))
 (let (($x285 (= $x228 true)))
 (let (($x636 (and $x382 $x747)))
 (let (($x722 (= $x636 true)))
 (let (($x376 (= $x722 true)))
 (let (($x539 (= $x376 true)))
 (let (($x79 (and $x539 $x285)))
 (let (($x829 (and $x79 $x783)))
 (let (($x674 (and $x829 $x152)))
 (let ((?x769 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x887 (= ?x769 (_ bv0 32))))
 (let ((?x319 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x637 (= ?x319 (_ bv0 32))))
 (let (($x113 (and $x637 $x887)))
 (let ((?x447 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x849 (bvuge ?x447 (_ bv1 32))))
 (let (($x346 (and $x849 $x113)))
 (let ((?x465 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x744 (= ?x465 (_ bv0 32))))
 (let (($x40 (and $x744 $x346)))
 (let (($x6 (and $x40 $x674)))
 (let ((?x283 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x92 (= ?x283 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x124 (bvuge ?x465 (_ bv1 32))))
 (let (($x290 (=> $x124 $x92)))
 (let (($x486 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x142 (= $x124 $x486)))
 (let (($x889 (= false false)))
 (let (($x639 (=> $x744 $x889)))
 (let (($x534 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x564 (= $x744 $x534)))
 (let (($x57 (and $x564 $x639)))
 (let (($x585 (and $x57 $x142)))
 (let (($x612 (and $x585 $x290)))
 (let (($x517 (and $x612 $x6)))
 (let (($x226 (= ?x710 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x67 (=> $x849 $x226)))
 (let (($x119 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x661 (= $x849 $x119)))
 (let (($x771 (= ?x447 (_ bv0 32))))
 (let (($x189 (=> $x771 $x889)))
 (let (($x126 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x789 (= $x771 $x126)))
 (let (($x631 (and $x789 $x189)))
 (let (($x21 (and $x631 $x661)))
 (let (($x718 (and $x21 $x67)))
 (let (($x805 (and $x718 $x517)))
 (let ((?x590 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x820 (= ?x590 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x792 (bvuge ?x319 (_ bv1 32))))
 (let (($x835 (=> $x792 $x820)))
 (let (($x178 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x314 (= $x792 $x178)))
 (let (($x885 (=> $x637 $x889)))
 (let (($x824 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x53 (= $x637 $x824)))
 (let (($x501 (and $x53 $x885)))
 (let (($x438 (and $x501 $x314)))
 (let (($x445 (and $x438 $x835)))
 (let (($x65 (and $x445 $x805)))
 (let ((?x753 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x128 (= ?x753 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x573 (bvuge ?x769 (_ bv1 32))))
 (let (($x828 (=> $x573 $x128)))
 (let (($x201 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x304 (= $x573 $x201)))
 (let (($x643 (=> $x887 $x889)))
 (let (($x366 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x679 (= $x887 $x366)))
 (let (($x202 (and $x679 $x643)))
 (let (($x502 (and $x202 $x304)))
 (let (($x425 (and $x502 $x828)))
 (let (($x105 (and $x425 $x65)))
 (let (($x728 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x85 (and $x728 $x105)))
 (let (($x420 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x276 (and $x420 $x85)))
 (let (($x733 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x656 (and $x733 $x276)))
 (let (($x194 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x385 (and $x194 $x656)))
 (let (($x305 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x135 (and $x305 $x385)))
 (let (($x328 (and $x889 $x135)))
 (let (($x622 (= ?x283 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x479 (and $x622 $x328)))
 (let (($x823 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x244 (and $x823 $x479)))
 (let (($x310 (and $x889 $x244)))
 (let (($x71 (= ?x710 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x284 (and $x71 $x310)))
 (let (($x430 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x463 (and $x430 $x284)))
 (let (($x204 (and $x889 $x463)))
 (let (($x795 (= ?x590 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x508 (and $x795 $x204)))
 (let (($x391 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x260 (and $x391 $x508)))
 (let (($x466 (and $x889 $x260)))
 (let (($x339 (= ?x753 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x780 (and $x339 $x466)))
 (let (($x264 (bvugt ?x580 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x589 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x256 (=> (bvule ?x580 (bvsub (bvadd ?x580 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x589 $x264)))))))
 (let (($x750 (bvugt ?x370 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x383 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x646)))
 (let (($x251 (=> (bvule ?x370 (bvsub (bvadd ?x370 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x383 $x750)))))))
 (let (($x337 (bvugt ?x572 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x837)))
 (let (($x620 (=> (bvule ?x572 (bvsub (bvadd ?x572 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x337)))))))
 (let (($x802 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x298 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x298)))
 (let (($x602 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x243 $x802)))))))
 (let (($x442 (and $x602 $x620)))
 (let (($x493 (and $x442 $x251)))
 (let (($x545 (and $x493 $x256)))
 (let (($x352 (and $x545 $x780)))
 (let (($x379 (=> $x352 $x809)))
 (not $x379)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x728 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x598 (bvmul (_ bv4294967295 32) ?x728)))
 (let ((?x401 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x758 (bvadd ?x401 ?x598)))
 (let ((?x891 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x891 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x89 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x153 (bvadd ?x89 (_ bv3 32))))
 (let ((?x66 (concat (select input.dst.llvm-mem ?x153) (concat ?x22 ?x184))))
 (let ((?x162 (bvmul (_ bv4294967295 32) ?x66)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x814 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x414 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x646 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x538 (bvadd ?x646 (_ bv3 32))))
 (let ((?x489 (concat (select input.dst.llvm-mem ?x538) (concat ?x414 ?x814))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x778 (concat ?x343 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x434 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x243 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x779 (bvadd ?x243 (_ bv3 32))))
 (let ((?x818 (concat (select input.dst.llvm-mem ?x779) (concat ?x434 ?x778))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x537)))
 (let ((?x743 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x173)))
 (let ((?x454 (bvadd (bvadd (bvadd ?x743 ?x818) ?x489) ?x162)))
 (let (($x604 (= ?x454 ?x758)))
 (let (($x690 (= $x604 true)))
 (let (($x55 (= $x690 true)))
 (let ((?x644 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x794 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x450 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x254 (concat ?x450 (concat ?x794 (concat ?x95 ?x644)))))
 (let (($x354 (= ?x254 input.dst.llvm-%m)))
 (let (($x209 (= $x354 true)))
 (let (($x651 (= $x209 true)))
 (let (($x721 (= input.dst.llvm-%m ?x254)))
 (let ((?x170 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x615 (= (_ bv0 32) ?x170)))
 (let ((?x81 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x806 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x815 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x627 (and $x815 $x806)))
 (let (($x713 (and $x627 $x615)))
 (let (($x686 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x742 (and $x686 $x713)))
 (let (($x746 (and $x742 $x721)))
 (let (($x109 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x717 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x685 (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv1 32))) (select input.dst.llvm-mem ?x717))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv2 32))) ?x685))))
 (let ((?x530 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x530 (_ bv1 32))))
 (=> $x20 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x169))))))))
 ))
 (let (($x503 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x530 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x530 (_ bv1 32))))
 (= $x20 (bvuge ?x634 (_ bv1 32)))))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x530 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x822 (= ?x530 (_ bv0 32))))
 (=> $x822 $x283)))))
 ))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x530 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x822 (= ?x530 (_ bv0 32))))
 (= $x822 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x772 (and $x767 $x269)))
 (let (($x535 (and $x772 $x503)))
 (let (($x257 (and $x535 $x109)))
 (let (($x605 (= (bvand ?x89 (_ bv4294967292 32)) ?x89)))
 (let (($x73 (= (bvand ?x646 (_ bv4294967292 32)) ?x646)))
 (let (($x681 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x646 (bvsub ?x646 (_ bv4 32))) (bvult ?x646 (bvsub ?x646 (_ bv4 32))))))
 (let (($x698 (and true $x681)))
 (let (($x482 (= (bvand ?x243 (_ bv4294967292 32)) ?x243)))
 (let (($x374 (and $x482 $x698)))
 (let (($x726 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x89 (bvsub ?x89 (_ bv8 32))) (bvult ?x89 (bvsub ?x89 (_ bv8 32))))))
 (let (($x320 (and (and (and true $x726) $x374) $x73)))
 (let (($x709 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x819 (and true $x709)))
 (let (($x367 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x440 (and $x367 $x819)))
 (let (($x841 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x243 (bvsub ?x243 (_ bv12 32))) (bvult ?x243 (bvsub ?x243 (_ bv12 32))))))
 (let (($x358 (and (and (and true $x367) $x841) $x440)))
 (let (($x705 (and (and (and (and $x358 $x320) $x605) $x257) $x746)))
 (let (($x279 (= $x705 true)))
 (let (($x424 (= $x279 true)))
 (let (($x246 (= $x424 true)))
 (let (($x541 (= $x358 true)))
 (let (($x499 (= $x541 true)))
 (let (($x635 (= $x499 true)))
 (let (($x740 (and $x320 $x605)))
 (let (($x191 (= $x740 true)))
 (let (($x50 (= $x191 true)))
 (let (($x560 (= $x50 true)))
 (let (($x790 (and $x560 $x635)))
 (let (($x240 (and $x790 $x246)))
 (let (($x392 (and $x240 $x651)))
 (let ((?x661 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x661 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x40 (_ bv1 32))))
 (let (($x469 (and $x390 $x534)))
 (let ((?x722 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x722 (_ bv0 32))))
 (let (($x418 (and $x376 $x469)))
 (let ((?x13 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x13 (_ bv0 32))))
 (let (($x451 (and $x69 $x418)))
 (let (($x669 (and $x451 $x392)))
 (let ((?x885 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x232 (= ?x885 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x218 (bvuge ?x13 (_ bv1 32))))
 (let (($x154 (=> $x218 $x232)))
 (let (($x99 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x51 (= $x218 $x99)))
 (let (($x283 (= false false)))
 (let (($x684 (=> $x69 $x283)))
 (let (($x285 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x381 (= $x69 $x285)))
 (let (($x843 (and $x381 $x684)))
 (let (($x567 (and $x843 $x51)))
 (let (($x369 (and $x567 $x154)))
 (let (($x528 (and $x369 $x669)))
 (let ((?x304 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x86 (= ?x304 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x259 (bvuge ?x722 (_ bv1 32))))
 (let (($x658 (=> $x259 $x86)))
 (let (($x384 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x638 (= $x259 $x384)))
 (let (($x293 (=> $x376 $x283)))
 (let (($x747 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x539 (= $x376 $x747)))
 (let (($x464 (and $x539 $x293)))
 (let (($x356 (and $x464 $x638)))
 (let (($x475 (and $x356 $x658)))
 (let (($x745 (and $x475 $x528)))
 (let (($x166 (= ?x728 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x93 (=> $x390 $x166)))
 (let (($x62 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x673 (= $x390 $x62)))
 (let (($x428 (= ?x40 (_ bv0 32))))
 (let (($x248 (=> $x428 $x283)))
 (let (($x113 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x333 (= $x428 $x113)))
 (let (($x610 (and $x333 $x248)))
 (let (($x803 (and $x610 $x673)))
 (let (($x207 (and $x803 $x93)))
 (let (($x851 (and $x207 $x745)))
 (let (($x57 (= ?x401 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x124 (=> $x534 $x57)))
 (let (($x650 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x564 (= $x534 $x650)))
 (let (($x21 (= ?x661 (_ bv0 32))))
 (let (($x226 (=> $x21 $x283)))
 (let (($x849 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x318 (= $x21 $x849)))
 (let (($x67 (and $x318 $x226)))
 (let (($x639 (and $x67 $x564)))
 (let (($x486 (and $x639 $x124)))
 (let (($x213 (and $x486 $x851)))
 (let (($x447 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x220 (and $x447 $x213)))
 (let (($x445 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x608 (and $x445 $x220)))
 (let (($x820 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x577 (and $x820 $x608)))
 (let (($x438 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x662 (and $x438 $x577)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x299 (and $x178 $x662)))
 (let (($x886 (and $x283 $x299)))
 (let (($x501 (= ?x885 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x363 (and $x501 $x886)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x180 (and $x128 $x363)))
 (let (($x540 (and $x283 $x180)))
 (let (($x502 (= ?x304 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x483 (and $x502 $x540)))
 (let (($x887 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x459 (and $x887 $x483)))
 (let (($x143 (and $x283 $x459)))
 (let (($x300 (= ?x728 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x182 (and $x300 $x143)))
 (let (($x622 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x321 (and $x622 $x182)))
 (let (($x804 (and $x283 $x321)))
 (let (($x823 (= ?x401 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x727 (and $x823 $x804)))
 (let (($x839 (bvugt ?x646 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x538)))
 (let (($x339 (=> (bvule ?x646 (bvsub (bvadd ?x646 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x297 $x839)))))))
 (let (($x361 (bvugt ?x89 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x35 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x361)))))))
 (let (($x461 (bvugt ?x243 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x603 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x779)))
 (let (($x614 (=> (bvule ?x243 (bvsub (bvadd ?x243 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x603 $x461)))))))
 (let (($x298 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x551 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x712 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x551)))
 (let (($x296 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x712 $x298)))))))
 (let (($x421 (and $x296 $x614)))
 (let (($x309 (and $x421 $x35)))
 (let (($x509 (and $x309 $x339)))
 (let (($x628 (and $x509 $x727)))
 (let (($x671 (=> $x628 $x55)))
 (not $x671)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x728 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x598 (bvmul (_ bv4294967295 32) ?x728)))
 (let ((?x401 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x758 (bvadd ?x401 ?x598)))
 (let ((?x891 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x891 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x89 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x153 (bvadd ?x89 (_ bv3 32))))
 (let ((?x66 (concat (select input.dst.llvm-mem ?x153) (concat ?x22 ?x184))))
 (let ((?x162 (bvmul (_ bv4294967295 32) ?x66)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x814 (concat ?x104 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x414 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x646 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x538 (bvadd ?x646 (_ bv3 32))))
 (let ((?x489 (concat (select input.dst.llvm-mem ?x538) (concat ?x414 ?x814))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x778 (concat ?x343 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x434 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x243 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x779 (bvadd ?x243 (_ bv3 32))))
 (let ((?x818 (concat (select input.dst.llvm-mem ?x779) (concat ?x434 ?x778))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x537)))
 (let ((?x743 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x173)))
 (let ((?x454 (bvadd (bvadd (bvadd ?x743 ?x818) ?x489) ?x162)))
 (let (($x604 (= ?x454 ?x758)))
 (let (($x690 (= $x604 true)))
 (let (($x55 (= $x690 true)))
 (let ((?x644 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x794 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x450 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x254 (concat ?x450 (concat ?x794 (concat ?x95 ?x644)))))
 (let (($x354 (= ?x254 input.dst.llvm-%m)))
 (let (($x209 (= $x354 true)))
 (let (($x651 (= $x209 true)))
 (let (($x721 (= input.dst.llvm-%m ?x254)))
 (let ((?x170 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x615 (= (_ bv0 32) ?x170)))
 (let ((?x81 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x806 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x81)))
 (let (($x815 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x627 (and $x815 $x806)))
 (let (($x713 (and $x627 $x615)))
 (let (($x686 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x742 (and $x686 $x713)))
 (let (($x746 (and $x742 $x721)))
 (let (($x109 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x717 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x685 (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv1 32))) (select input.dst.llvm-mem ?x717))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv2 32))) ?x685))))
 (let ((?x530 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x530 (_ bv1 32))))
 (=> $x20 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x169))))))))
 ))
 (let (($x503 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x634 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x530 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x530 (_ bv1 32))))
 (= $x20 (bvuge ?x634 (_ bv1 32)))))))
 ))
 (let (($x269 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x283 (= false false)))
 (let ((?x530 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x822 (= ?x530 (_ bv0 32))))
 (=> $x822 $x283)))))
 ))
 (let (($x767 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x530 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x822 (= ?x530 (_ bv0 32))))
 (= $x822 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x772 (and $x767 $x269)))
 (let (($x535 (and $x772 $x503)))
 (let (($x257 (and $x535 $x109)))
 (let (($x605 (= (bvand ?x89 (_ bv4294967292 32)) ?x89)))
 (let (($x73 (= (bvand ?x646 (_ bv4294967292 32)) ?x646)))
 (let (($x681 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x646 (bvsub ?x646 (_ bv4 32))) (bvult ?x646 (bvsub ?x646 (_ bv4 32))))))
 (let (($x698 (and true $x681)))
 (let (($x482 (= (bvand ?x243 (_ bv4294967292 32)) ?x243)))
 (let (($x374 (and $x482 $x698)))
 (let (($x726 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x89 (bvsub ?x89 (_ bv8 32))) (bvult ?x89 (bvsub ?x89 (_ bv8 32))))))
 (let (($x320 (and (and (and true $x726) $x374) $x73)))
 (let (($x709 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x819 (and true $x709)))
 (let (($x367 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x440 (and $x367 $x819)))
 (let (($x841 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x243 (bvsub ?x243 (_ bv12 32))) (bvult ?x243 (bvsub ?x243 (_ bv12 32))))))
 (let (($x358 (and (and (and true $x367) $x841) $x440)))
 (let (($x705 (and (and (and (and $x358 $x320) $x605) $x257) $x746)))
 (let (($x279 (= $x705 true)))
 (let (($x424 (= $x279 true)))
 (let (($x246 (= $x424 true)))
 (let (($x541 (= $x358 true)))
 (let (($x499 (= $x541 true)))
 (let (($x635 (= $x499 true)))
 (let (($x740 (and $x320 $x605)))
 (let (($x191 (= $x740 true)))
 (let (($x50 (= $x191 true)))
 (let (($x560 (= $x50 true)))
 (let (($x790 (and $x560 $x635)))
 (let (($x240 (and $x790 $x246)))
 (let (($x392 (and $x240 $x651)))
 (let ((?x661 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x534 (bvuge ?x661 (_ bv1 32))))
 (let ((?x40 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x40 (_ bv1 32))))
 (let (($x469 (and $x390 $x534)))
 (let ((?x722 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x722 (_ bv0 32))))
 (let (($x418 (and $x376 $x469)))
 (let ((?x13 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x69 (= ?x13 (_ bv0 32))))
 (let (($x451 (and $x69 $x418)))
 (let (($x669 (and $x451 $x392)))
 (let ((?x885 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x232 (= ?x885 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x218 (bvuge ?x13 (_ bv1 32))))
 (let (($x154 (=> $x218 $x232)))
 (let (($x99 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x51 (= $x218 $x99)))
 (let (($x283 (= false false)))
 (let (($x684 (=> $x69 $x283)))
 (let (($x285 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x381 (= $x69 $x285)))
 (let (($x843 (and $x381 $x684)))
 (let (($x567 (and $x843 $x51)))
 (let (($x369 (and $x567 $x154)))
 (let (($x528 (and $x369 $x669)))
 (let ((?x304 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x86 (= ?x304 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x259 (bvuge ?x722 (_ bv1 32))))
 (let (($x658 (=> $x259 $x86)))
 (let (($x384 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x638 (= $x259 $x384)))
 (let (($x293 (=> $x376 $x283)))
 (let (($x747 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x539 (= $x376 $x747)))
 (let (($x464 (and $x539 $x293)))
 (let (($x356 (and $x464 $x638)))
 (let (($x475 (and $x356 $x658)))
 (let (($x745 (and $x475 $x528)))
 (let (($x166 (= ?x728 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x93 (=> $x390 $x166)))
 (let (($x62 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x673 (= $x390 $x62)))
 (let (($x428 (= ?x40 (_ bv0 32))))
 (let (($x248 (=> $x428 $x283)))
 (let (($x113 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x333 (= $x428 $x113)))
 (let (($x610 (and $x333 $x248)))
 (let (($x803 (and $x610 $x673)))
 (let (($x207 (and $x803 $x93)))
 (let (($x851 (and $x207 $x745)))
 (let (($x57 (= ?x401 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x124 (=> $x534 $x57)))
 (let (($x650 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x564 (= $x534 $x650)))
 (let (($x21 (= ?x661 (_ bv0 32))))
 (let (($x226 (=> $x21 $x283)))
 (let (($x849 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x318 (= $x21 $x849)))
 (let (($x67 (and $x318 $x226)))
 (let (($x639 (and $x67 $x564)))
 (let (($x486 (and $x639 $x124)))
 (let (($x213 (and $x486 $x851)))
 (let (($x447 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x220 (and $x447 $x213)))
 (let (($x445 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x608 (and $x445 $x220)))
 (let (($x820 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x577 (and $x820 $x608)))
 (let (($x438 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x662 (and $x438 $x577)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x299 (and $x178 $x662)))
 (let (($x886 (and $x283 $x299)))
 (let (($x501 (= ?x885 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x363 (and $x501 $x886)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x180 (and $x128 $x363)))
 (let (($x540 (and $x283 $x180)))
 (let (($x502 (= ?x304 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x483 (and $x502 $x540)))
 (let (($x887 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x459 (and $x887 $x483)))
 (let (($x143 (and $x283 $x459)))
 (let (($x300 (= ?x728 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x182 (and $x300 $x143)))
 (let (($x622 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x321 (and $x622 $x182)))
 (let (($x804 (and $x283 $x321)))
 (let (($x823 (= ?x401 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x727 (and $x823 $x804)))
 (let (($x839 (bvugt ?x646 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x538)))
 (let (($x339 (=> (bvule ?x646 (bvsub (bvadd ?x646 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x297 $x839)))))))
 (let (($x361 (bvugt ?x89 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x35 (=> (bvule ?x89 (bvsub (bvadd ?x89 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x98 $x361)))))))
 (let (($x461 (bvugt ?x243 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x603 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x779)))
 (let (($x614 (=> (bvule ?x243 (bvsub (bvadd ?x243 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x603 $x461)))))))
 (let (($x298 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x551 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x712 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x551)))
 (let (($x296 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x712 $x298)))))))
 (let (($x421 (and $x296 $x614)))
 (let (($x309 (and $x421 $x35)))
 (let (($x509 (and $x309 $x339)))
 (let (($x628 (and $x509 $x727)))
 (let (($x671 (=> $x628 $x55)))
 (not $x671)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 244 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x351 (bvmul (_ bv4294967295 32) ?x411)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x761 (concat ?x175 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x585 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x383 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x361 (bvadd ?x383 (_ bv3 32))))
 (let ((?x221 (concat (select input.dst.llvm-mem ?x361) (concat ?x585 ?x761))))
 (let ((?x768 (bvmul (_ bv4294967295 32) ?x221)))
 (let ((?x579 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x500 (concat ?x579 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x839 (bvadd ?x94 (_ bv3 32))))
 (let ((?x179 (concat (select input.dst.llvm-mem ?x839) (concat ?x406 ?x500))))
 (let ((?x640 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x225 (concat ?x640 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x738 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x551 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x461 (bvadd ?x551 (_ bv3 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem ?x461) (concat ?x738 ?x225))))
 (let ((?x665 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x665)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x230)))
 (let ((?x771 (bvadd (bvadd (bvadd ?x41 ?x145) ?x179) ?x768)))
 (let (($x126 (= ?x771 ?x351)))
 (let (($x789 (= $x126 true)))
 (let (($x718 (= $x789 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x514 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x233 (concat ?x514 (concat ?x291 ?x114)))))
 (let (($x212 (= ?x360 input.dst.llvm-%m)))
 (let (($x301 (= $x212 true)))
 (let (($x599 (= $x301 true)))
 (let (($x159 (= input.dst.llvm-%m ?x360)))
 (let ((?x805 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x65 (= (_ bv0 32) ?x805)))
 (let ((?x674 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x674)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x517 (and $x316 $x6)))
 (let (($x326 (and $x517 $x65)))
 (let (($x561 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x561 $x326)))
 (let (($x487 (and $x138 $x159)))
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x595 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv1 32))) (select input.dst.llvm-mem ?x595))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv2 32))) ?x412))))
 (let ((?x889 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x711 (bvuge ?x889 (_ bv1 32))))
 (=> $x711 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x262))))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x889 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x711 (bvuge ?x889 (_ bv1 32))))
 (= $x711 (bvuge ?x425 (_ bv1 32)))))))
 ))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x128 (= false false)))
 (let ((?x889 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x757 (= ?x889 (_ bv0 32))))
 (=> $x757 $x128)))))
 ))
 (let (($x679 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x889 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x757 (= ?x889 (_ bv0 32))))
 (= $x757 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x87 (and $x679 $x305)))
 (let (($x656 (and $x87 $x85)))
 (let (($x152 (and $x656 $x59)))
 (let (($x257 (= (bvand ?x383 (_ bv4294967292 32)) ?x383)))
 (let (($x732 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x655 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x97 (and true $x655)))
 (let (($x717 (= (bvand ?x551 (_ bv4294967292 32)) ?x551)))
 (let (($x174 (and $x717 $x97)))
 (let (($x596 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x383 (bvsub ?x383 (_ bv8 32))) (bvult ?x383 (bvsub ?x383 (_ bv8 32))))))
 (let (($x446 (and (and (and true $x596) $x174) $x732)))
 (let (($x689 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x95 (and true $x689)))
 (let (($x806 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x644 (and $x806 $x95)))
 (let (($x742 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x551 (bvsub ?x551 (_ bv12 32))) (bvult ?x551 (bvsub ?x551 (_ bv12 32))))))
 (let (($x254 (and (and (and true $x806) $x742) $x644)))
 (let (($x197 (and (and (and (and $x254 $x446) $x257) $x152) $x487)))
 (let (($x327 (= $x197 true)))
 (let (($x325 (= $x327 true)))
 (let (($x512 (= $x325 true)))
 (let (($x721 (= $x254 true)))
 (let (($x746 (= $x721 true)))
 (let (($x705 (= $x746 true)))
 (let (($x190 (and $x446 $x257)))
 (let (($x158 (= $x190 true)))
 (let (($x686 (= $x158 true)))
 (let (($x815 (= $x686 true)))
 (let (($x279 (and $x815 $x705)))
 (let (($x703 (and $x279 $x512)))
 (let (($x809 (and $x703 $x599)))
 (let ((?x384 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (= ?x384 (_ bv0 32))))
 (let ((?x418 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x418 (_ bv1 32))))
 (let (($x269 (and $x482 $x638)))
 (let ((?x740 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x740 (_ bv0 32))))
 (let (($x772 (and $x191 $x269)))
 (let ((?x790 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (= ?x790 (_ bv0 32))))
 (let (($x20 (and $x409 $x772)))
 (let (($x830 (and $x20 $x809)))
 (let ((?x333 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x278 (= ?x333 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x171 (bvuge ?x790 (_ bv1 32))))
 (let (($x767 (=> $x171 $x278)))
 (let (($x195 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x634 (= $x171 $x195)))
 (let (($x128 (= false false)))
 (let (($x797 (=> $x409 $x128)))
 (let (($x499 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x340 (= $x409 $x499)))
 (let (($x827 (and $x340 $x797)))
 (let (($x141 (and $x827 $x634)))
 (let (($x565 (and $x141 $x767)))
 (let (($x379 (and $x565 $x830)))
 (let ((?x650 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x613 (= ?x650 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x554 (bvuge ?x740 (_ bv1 32))))
 (let (($x74 (=> $x554 $x613)))
 (let (($x247 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x841 (= $x554 $x247)))
 (let (($x560 (=> $x191 $x128)))
 (let (($x659 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x50 (= $x191 $x659)))
 (let (($x335 (and $x50 $x560)))
 (let (($x480 (and $x335 $x841)))
 (let (($x362 (and $x480 $x74)))
 (let (($x557 (and $x362 $x379)))
 (let (($x796 (= ?x411 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x288 (=> $x482 $x796)))
 (let (($x523 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x239 (= $x482 $x523)))
 (let (($x451 (= ?x418 (_ bv0 32))))
 (let (($x467 (=> $x451 $x128)))
 (let (($x369 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x403 (= $x451 $x369)))
 (let (($x693 (and $x403 $x467)))
 (let (($x29 (and $x693 $x239)))
 (let (($x681 (and $x29 $x288)))
 (let (($x571 (and $x681 $x557)))
 (let ((?x502 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x684 (= ?x502 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x23 (bvuge ?x384 (_ bv1 32))))
 (let (($x843 (=> $x23 $x684)))
 (let (($x69 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x285 (= $x23 $x69)))
 (let (($x12 (=> $x638 $x128)))
 (let (($x464 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x356 (= $x638 $x464)))
 (let (($x86 (and $x356 $x12)))
 (let (($x381 (and $x86 $x285)))
 (let (($x218 (and $x381 $x843)))
 (let (($x618 (and $x218 $x571)))
 (let (($x636 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x490 (and $x636 $x618)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x458 (and $x93 $x490)))
 (let (($x612 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x172 (and $x612 $x458)))
 (let (($x673 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x826 (and $x673 $x172)))
 (let (($x390 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x48 (and $x390 $x826)))
 (let (($x708 (and $x128 $x48)))
 (let (($x248 (= ?x333 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x387 (and $x248 $x708)))
 (let (($x631 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x112 (and $x631 $x387)))
 (let (($x267 (and $x128 $x112)))
 (let (($x564 (= ?x650 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x368 (and $x564 $x267)))
 (let (($x661 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x626 (and $x661 $x368)))
 (let (($x437 (and $x128 $x626)))
 (let (($x447 (= ?x411 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x749 (and $x447 $x437)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x578 (and $x53 $x749)))
 (let (($x177 (and $x128 $x578)))
 (let (($x186 (= ?x502 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x798 (and $x186 $x177)))
 (let (($x256 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x782 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x839)))
 (let (($x71 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x782 $x256)))))))
 (let (($x251 (bvugt ?x383 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x361)))
 (let (($x589 (=> (bvule ?x383 (bvsub (bvadd ?x383 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x251)))))))
 (let (($x620 (bvugt ?x551 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x529 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x461)))
 (let (($x89 (=> (bvule ?x551 (bvsub (bvadd ?x551 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x529 $x620)))))))
 (let (($x602 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x802 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x802)))
 (let (($x281 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x602)))))))
 (let (($x337 (and $x281 $x89)))
 (let (($x750 (and $x337 $x589)))
 (let (($x264 (and $x750 $x71)))
 (let (($x645 (and $x264 $x798)))
 (let (($x624 (=> $x645 $x718)))
 (not $x624))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x351 (bvmul (_ bv4294967295 32) ?x411)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x761 (concat ?x175 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x585 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x383 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x361 (bvadd ?x383 (_ bv3 32))))
 (let ((?x221 (concat (select input.dst.llvm-mem ?x361) (concat ?x585 ?x761))))
 (let ((?x768 (bvmul (_ bv4294967295 32) ?x221)))
 (let ((?x579 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x500 (concat ?x579 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x94 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x839 (bvadd ?x94 (_ bv3 32))))
 (let ((?x179 (concat (select input.dst.llvm-mem ?x839) (concat ?x406 ?x500))))
 (let ((?x640 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x225 (concat ?x640 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x738 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x551 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x461 (bvadd ?x551 (_ bv3 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem ?x461) (concat ?x738 ?x225))))
 (let ((?x665 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x665)))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x230)))
 (let ((?x771 (bvadd (bvadd (bvadd ?x41 ?x145) ?x179) ?x768)))
 (let (($x126 (= ?x771 ?x351)))
 (let (($x789 (= $x126 true)))
 (let (($x718 (= $x789 true)))
 (let ((?x114 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x514 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x233 (concat ?x514 (concat ?x291 ?x114)))))
 (let (($x212 (= ?x360 input.dst.llvm-%m)))
 (let (($x301 (= $x212 true)))
 (let (($x599 (= $x301 true)))
 (let (($x159 (= input.dst.llvm-%m ?x360)))
 (let ((?x805 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x65 (= (_ bv0 32) ?x805)))
 (let ((?x674 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x674)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x517 (and $x316 $x6)))
 (let (($x326 (and $x517 $x65)))
 (let (($x561 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x561 $x326)))
 (let (($x487 (and $x138 $x159)))
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x595 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x412 (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv1 32))) (select input.dst.llvm-mem ?x595))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x595 (_ bv2 32))) ?x412))))
 (let ((?x889 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x711 (bvuge ?x889 (_ bv1 32))))
 (=> $x711 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x262))))))))
 ))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x425 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x889 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x711 (bvuge ?x889 (_ bv1 32))))
 (= $x711 (bvuge ?x425 (_ bv1 32)))))))
 ))
 (let (($x305 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x128 (= false false)))
 (let ((?x889 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x757 (= ?x889 (_ bv0 32))))
 (=> $x757 $x128)))))
 ))
 (let (($x679 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x889 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x757 (= ?x889 (_ bv0 32))))
 (= $x757 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x87 (and $x679 $x305)))
 (let (($x656 (and $x87 $x85)))
 (let (($x152 (and $x656 $x59)))
 (let (($x257 (= (bvand ?x383 (_ bv4294967292 32)) ?x383)))
 (let (($x732 (= (bvand ?x94 (_ bv4294967292 32)) ?x94)))
 (let (($x655 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x94 (bvsub ?x94 (_ bv4 32))) (bvult ?x94 (bvsub ?x94 (_ bv4 32))))))
 (let (($x97 (and true $x655)))
 (let (($x717 (= (bvand ?x551 (_ bv4294967292 32)) ?x551)))
 (let (($x174 (and $x717 $x97)))
 (let (($x596 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x383 (bvsub ?x383 (_ bv8 32))) (bvult ?x383 (bvsub ?x383 (_ bv8 32))))))
 (let (($x446 (and (and (and true $x596) $x174) $x732)))
 (let (($x689 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x95 (and true $x689)))
 (let (($x806 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x644 (and $x806 $x95)))
 (let (($x742 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x551 (bvsub ?x551 (_ bv12 32))) (bvult ?x551 (bvsub ?x551 (_ bv12 32))))))
 (let (($x254 (and (and (and true $x806) $x742) $x644)))
 (let (($x197 (and (and (and (and $x254 $x446) $x257) $x152) $x487)))
 (let (($x327 (= $x197 true)))
 (let (($x325 (= $x327 true)))
 (let (($x512 (= $x325 true)))
 (let (($x721 (= $x254 true)))
 (let (($x746 (= $x721 true)))
 (let (($x705 (= $x746 true)))
 (let (($x190 (and $x446 $x257)))
 (let (($x158 (= $x190 true)))
 (let (($x686 (= $x158 true)))
 (let (($x815 (= $x686 true)))
 (let (($x279 (and $x815 $x705)))
 (let (($x703 (and $x279 $x512)))
 (let (($x809 (and $x703 $x599)))
 (let ((?x384 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x638 (= ?x384 (_ bv0 32))))
 (let ((?x418 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x482 (bvuge ?x418 (_ bv1 32))))
 (let (($x269 (and $x482 $x638)))
 (let ((?x740 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x191 (= ?x740 (_ bv0 32))))
 (let (($x772 (and $x191 $x269)))
 (let ((?x790 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x409 (= ?x790 (_ bv0 32))))
 (let (($x20 (and $x409 $x772)))
 (let (($x830 (and $x20 $x809)))
 (let ((?x333 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x278 (= ?x333 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x171 (bvuge ?x790 (_ bv1 32))))
 (let (($x767 (=> $x171 $x278)))
 (let (($x195 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x634 (= $x171 $x195)))
 (let (($x128 (= false false)))
 (let (($x797 (=> $x409 $x128)))
 (let (($x499 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x340 (= $x409 $x499)))
 (let (($x827 (and $x340 $x797)))
 (let (($x141 (and $x827 $x634)))
 (let (($x565 (and $x141 $x767)))
 (let (($x379 (and $x565 $x830)))
 (let ((?x650 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x613 (= ?x650 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x554 (bvuge ?x740 (_ bv1 32))))
 (let (($x74 (=> $x554 $x613)))
 (let (($x247 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x841 (= $x554 $x247)))
 (let (($x560 (=> $x191 $x128)))
 (let (($x659 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x50 (= $x191 $x659)))
 (let (($x335 (and $x50 $x560)))
 (let (($x480 (and $x335 $x841)))
 (let (($x362 (and $x480 $x74)))
 (let (($x557 (and $x362 $x379)))
 (let (($x796 (= ?x411 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x288 (=> $x482 $x796)))
 (let (($x523 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x239 (= $x482 $x523)))
 (let (($x451 (= ?x418 (_ bv0 32))))
 (let (($x467 (=> $x451 $x128)))
 (let (($x369 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x403 (= $x451 $x369)))
 (let (($x693 (and $x403 $x467)))
 (let (($x29 (and $x693 $x239)))
 (let (($x681 (and $x29 $x288)))
 (let (($x571 (and $x681 $x557)))
 (let ((?x502 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x684 (= ?x502 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x23 (bvuge ?x384 (_ bv1 32))))
 (let (($x843 (=> $x23 $x684)))
 (let (($x69 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x285 (= $x23 $x69)))
 (let (($x12 (=> $x638 $x128)))
 (let (($x464 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x356 (= $x638 $x464)))
 (let (($x86 (and $x356 $x12)))
 (let (($x381 (and $x86 $x285)))
 (let (($x218 (and $x381 $x843)))
 (let (($x618 (and $x218 $x571)))
 (let (($x636 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x490 (and $x636 $x618)))
 (let (($x93 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x458 (and $x93 $x490)))
 (let (($x612 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x172 (and $x612 $x458)))
 (let (($x673 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x826 (and $x673 $x172)))
 (let (($x390 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x48 (and $x390 $x826)))
 (let (($x708 (and $x128 $x48)))
 (let (($x248 (= ?x333 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x387 (and $x248 $x708)))
 (let (($x631 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x112 (and $x631 $x387)))
 (let (($x267 (and $x128 $x112)))
 (let (($x564 (= ?x650 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x368 (and $x564 $x267)))
 (let (($x661 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x626 (and $x661 $x368)))
 (let (($x437 (and $x128 $x626)))
 (let (($x447 (= ?x411 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x749 (and $x447 $x437)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x578 (and $x53 $x749)))
 (let (($x177 (and $x128 $x578)))
 (let (($x186 (= ?x502 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x798 (and $x186 $x177)))
 (let (($x256 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x782 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x839)))
 (let (($x71 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x782 $x256)))))))
 (let (($x251 (bvugt ?x383 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x361)))
 (let (($x589 (=> (bvule ?x383 (bvsub (bvadd ?x383 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x27 $x251)))))))
 (let (($x620 (bvugt ?x551 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x529 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x461)))
 (let (($x89 (=> (bvule ?x551 (bvsub (bvadd ?x551 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x529 $x620)))))))
 (let (($x602 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x802 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x802)))
 (let (($x281 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x602)))))))
 (let (($x337 (and $x281 $x89)))
 (let (($x750 (and $x337 $x589)))
 (let (($x264 (and $x750 $x71)))
 (let (($x645 (and $x264 $x798)))
 (let (($x624 (=> $x645 $x718)))
 (not $x624))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 243 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x222 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x567 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x98 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x493 (bvadd ?x98 (_ bv3 32))))
 (let ((?x726 (concat (select input.dst.llvm-mem ?x493) (concat ?x567 ?x99))))
 (let ((?x810 (bvmul (_ bv4294967295 32) ?x726)))
 (let ((?x822 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x811 (concat ?x822 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x698 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x361 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x545 (bvadd ?x361 (_ bv3 32))))
 (let ((?x344 (concat (select input.dst.llvm-mem ?x545) (concat ?x698 ?x811))))
 (let ((?x463 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x260 (concat ?x463 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x773 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x602 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x442 (bvadd ?x602 (_ bv3 32))))
 (let ((?x819 (concat (select input.dst.llvm-mem ?x442) (concat ?x773 ?x260))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x244)))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x479)))
 (let ((?x376 (bvadd (bvadd (bvadd ?x648 ?x819) ?x344) ?x810)))
 (let ((?x639 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x382 (= ?x639 ?x376)))
 (let (($x747 (= $x382 true)))
 (let (($x658 (= $x747 true)))
 (let ((?x586 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x850 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x814 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x324 (concat ?x814 (concat ?x432 (concat ?x850 ?x586)))))
 (let (($x598 (= ?x324 input.dst.llvm-%m)))
 (let (($x758 (= $x598 true)))
 (let (($x604 (= $x758 true)))
 (let (($x575 (= input.dst.llvm-%m ?x324)))
 (let ((?x745 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x414 (= (_ bv0 32) ?x745)))
 (let ((?x392 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x669 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x392)))
 (let (($x651 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x528 (and $x651 $x669)))
 (let (($x569 (and $x528 $x414)))
 (let (($x354 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x354 $x569)))
 (let (($x489 (and $x280 $x575)))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x343))))
 (let ((?x21 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x21 (_ bv1 32))))
 (=> $x851 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x537))))))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x21 (_ bv1 32))))
 (= $x851 (bvuge ?x486 (_ bv1 32)))))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x333 (= false false)))
 (let ((?x21 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x21 (_ bv0 32))))
 (=> $x189 $x333)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x21 (_ bv0 32))))
 (= $x189 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x314 (and $x283 $x178)))
 (let (($x577 (and $x314 $x608)))
 (let (($x246 (and $x577 $x209)))
 (let (($x700 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x262 (= (bvand ?x361 (_ bv4294967292 32)) ?x361)))
 (let (($x275 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x361 (bvsub ?x361 (_ bv4 32))) (bvult ?x361 (bvsub ?x361 (_ bv4 32))))))
 (let (($x237 (and true $x275)))
 (let (($x452 (= (bvand ?x602 (_ bv4294967292 32)) ?x602)))
 (let (($x412 (and $x452 $x237)))
 (let (($x662 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x98 (bvsub ?x98 (_ bv8 32))) (bvult ?x98 (bvsub ?x98 (_ bv8 32))))))
 (let (($x59 (and (and (and true $x662) $x412) $x262)))
 (let (($x291 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x114 (and true $x291)))
 (let (($x517 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x649 (and $x517 $x114)))
 (let (($x526 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x602 (bvsub ?x602 (_ bv12 32))) (bvult ?x602 (bvsub ?x602 (_ bv12 32))))))
 (let (($x159 (and (and (and true $x517) $x526) $x649)))
 (let (($x752 (and (and (and (and $x159 $x59) $x700) $x246) $x489)))
 (let (($x184 (= $x752 true)))
 (let (($x66 (= $x184 true)))
 (let (($x162 (= $x66 true)))
 (let (($x487 (= $x159 true)))
 (let (($x197 (= $x487 true)))
 (let (($x327 (= $x197 true)))
 (let (($x829 (and $x59 $x700)))
 (let (($x561 (= $x829 true)))
 (let (($x316 (= $x561 true)))
 (let (($x674 (= $x316 true)))
 (let (($x325 (and $x674 $x327)))
 (let (($x454 (and $x325 $x162)))
 (let (($x55 (and $x454 $x604)))
 (let ((?x841 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x499 (bvuge ?x841 (_ bv1 32))))
 (let ((?x20 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x20 (_ bv0 32))))
 (let (($x87 (and $x423 $x499)))
 (let ((?x158 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (= ?x158 (_ bv0 32))))
 (let (($x711 (and $x686 $x87)))
 (let ((?x834 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x441 (= ?x834 (_ bv0 32))))
 (let (($x710 (and $x441 $x711)))
 (let (($x690 (and $x710 $x55)))
 (let ((?x467 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x679 (= ?x467 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x425 (bvuge ?x834 (_ bv1 32))))
 (let (($x255 (=> $x425 $x679)))
 (let (($x828 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x429 (= $x425 $x828)))
 (let (($x333 (= false false)))
 (let (($x637 (=> $x441 $x333)))
 (let (($x705 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x791 (= $x441 $x705)))
 (let (($x889 (and $x791 $x637)))
 (let (($x366 (and $x889 $x429)))
 (let (($x305 (and $x366 $x255)))
 (let (($x671 (and $x305 $x690)))
 (let ((?x285 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x518 (= ?x285 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x742 (bvuge ?x158 (_ bv1 32))))
 (let (($x157 (=> $x742 $x518)))
 (let (($x713 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x522 (= $x742 $x713)))
 (let (($x81 (=> $x686 $x333)))
 (let (($x257 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x815 (= $x686 $x257)))
 (let (($x806 (and $x815 $x81)))
 (let (($x450 (and $x806 $x522)))
 (let (($x794 (and $x450 $x157)))
 (let (($x150 (and $x794 $x671)))
 (let ((?x636 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x26 (= ?x636 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x884 (bvuge ?x20 (_ bv1 32))))
 (let (($x655 (=> $x884 $x26)))
 (let (($x717 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x716 (= $x884 $x717)))
 (let (($x503 (=> $x423 $x333)))
 (let (($x269 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x609 (= $x423 $x269)))
 (let (($x535 (and $x609 $x503)))
 (let (($x116 (and $x535 $x716)))
 (let (($x97 (and $x116 $x655)))
 (let (($x127 (and $x97 $x150)))
 (let (($x827 (= ?x639 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x171 (=> $x499 $x827)))
 (let (($x358 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x340 (= $x499 $x358)))
 (let (($x480 (= ?x841 (_ bv0 32))))
 (let (($x613 (=> $x480 $x333)))
 (let (($x554 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x320 (= $x480 $x554)))
 (let (($x74 (and $x320 $x613)))
 (let (($x797 (and $x74 $x340)))
 (let (($x195 (and $x797 $x171)))
 (let (($x200 (and $x195 $x127)))
 (let (($x740 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x643 (and $x740 $x200)))
 (let (($x681 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x194 (and $x681 $x643)))
 (let (($x796 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x733 (and $x796 $x194)))
 (let (($x29 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x136 (and $x29 $x733)))
 (let (($x523 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x236 (and $x523 $x136)))
 (let (($x590 (and $x333 $x236)))
 (let (($x693 (= ?x467 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x430 (and $x693 $x590)))
 (let (($x684 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x795 (and $x684 $x430)))
 (let (($x533 (and $x333 $x795)))
 (let (($x381 (= ?x285 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x824 (and $x381 $x533)))
 (let (($x638 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x202 (and $x638 $x824)))
 (let (($x573 (and $x333 $x202)))
 (let (($x259 (= ?x636 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x453 (and $x259 $x573)))
 (let (($x248 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x420 (and $x248 $x453)))
 (let (($x385 (and $x333 $x420)))
 (let (($x631 (= ?x639 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x783 (and $x631 $x385)))
 (let (($x339 (bvugt ?x361 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x753 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x545)))
 (let (($x186 (=> (bvule ?x361 (bvsub (bvadd ?x361 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x753 $x339)))))))
 (let (($x35 (bvugt ?x98 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x580 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x493)))
 (let (($x297 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x580 $x35)))))))
 (let (($x614 (bvugt ?x602 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x741 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x442)))
 (let (($x153 (=> (bvule ?x602 (bvsub (bvadd ?x602 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x741 $x614)))))))
 (let (($x296 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x332 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x572 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x332)))
 (let (($x603 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x572 $x296)))))))
 (let (($x837 (and $x603 $x153)))
 (let (($x646 (and $x837 $x297)))
 (let (($x401 (and $x646 $x186)))
 (let (($x328 (and $x401 $x783)))
 (let (($x475 (=> $x328 $x658)))
 (not $x475)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x222 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x567 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x98 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x493 (bvadd ?x98 (_ bv3 32))))
 (let ((?x726 (concat (select input.dst.llvm-mem ?x493) (concat ?x567 ?x99))))
 (let ((?x810 (bvmul (_ bv4294967295 32) ?x726)))
 (let ((?x822 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x811 (concat ?x822 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x698 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x361 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x545 (bvadd ?x361 (_ bv3 32))))
 (let ((?x344 (concat (select input.dst.llvm-mem ?x545) (concat ?x698 ?x811))))
 (let ((?x463 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x260 (concat ?x463 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x773 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x602 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x442 (bvadd ?x602 (_ bv3 32))))
 (let ((?x819 (concat (select input.dst.llvm-mem ?x442) (concat ?x773 ?x260))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x244)))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x479)))
 (let ((?x376 (bvadd (bvadd (bvadd ?x648 ?x819) ?x344) ?x810)))
 (let ((?x639 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x382 (= ?x639 ?x376)))
 (let (($x747 (= $x382 true)))
 (let (($x658 (= $x747 true)))
 (let ((?x586 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x850 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x814 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x324 (concat ?x814 (concat ?x432 (concat ?x850 ?x586)))))
 (let (($x598 (= ?x324 input.dst.llvm-%m)))
 (let (($x758 (= $x598 true)))
 (let (($x604 (= $x758 true)))
 (let (($x575 (= input.dst.llvm-%m ?x324)))
 (let ((?x745 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x414 (= (_ bv0 32) ?x745)))
 (let ((?x392 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x669 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x392)))
 (let (($x651 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x528 (and $x651 $x669)))
 (let (($x569 (and $x528 $x414)))
 (let (($x354 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x354 $x569)))
 (let (($x489 (and $x280 $x575)))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x537 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x343))))
 (let ((?x21 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x21 (_ bv1 32))))
 (=> $x851 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x537))))))))
 ))
 (let (($x608 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x486 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x21 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x851 (bvuge ?x21 (_ bv1 32))))
 (= $x851 (bvuge ?x486 (_ bv1 32)))))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x333 (= false false)))
 (let ((?x21 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x21 (_ bv0 32))))
 (=> $x189 $x333)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x21 (_ bv0 32))))
 (= $x189 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x314 (and $x283 $x178)))
 (let (($x577 (and $x314 $x608)))
 (let (($x246 (and $x577 $x209)))
 (let (($x700 (= (bvand ?x98 (_ bv4294967292 32)) ?x98)))
 (let (($x262 (= (bvand ?x361 (_ bv4294967292 32)) ?x361)))
 (let (($x275 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x361 (bvsub ?x361 (_ bv4 32))) (bvult ?x361 (bvsub ?x361 (_ bv4 32))))))
 (let (($x237 (and true $x275)))
 (let (($x452 (= (bvand ?x602 (_ bv4294967292 32)) ?x602)))
 (let (($x412 (and $x452 $x237)))
 (let (($x662 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x98 (bvsub ?x98 (_ bv8 32))) (bvult ?x98 (bvsub ?x98 (_ bv8 32))))))
 (let (($x59 (and (and (and true $x662) $x412) $x262)))
 (let (($x291 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x114 (and true $x291)))
 (let (($x517 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x649 (and $x517 $x114)))
 (let (($x526 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x602 (bvsub ?x602 (_ bv12 32))) (bvult ?x602 (bvsub ?x602 (_ bv12 32))))))
 (let (($x159 (and (and (and true $x517) $x526) $x649)))
 (let (($x752 (and (and (and (and $x159 $x59) $x700) $x246) $x489)))
 (let (($x184 (= $x752 true)))
 (let (($x66 (= $x184 true)))
 (let (($x162 (= $x66 true)))
 (let (($x487 (= $x159 true)))
 (let (($x197 (= $x487 true)))
 (let (($x327 (= $x197 true)))
 (let (($x829 (and $x59 $x700)))
 (let (($x561 (= $x829 true)))
 (let (($x316 (= $x561 true)))
 (let (($x674 (= $x316 true)))
 (let (($x325 (and $x674 $x327)))
 (let (($x454 (and $x325 $x162)))
 (let (($x55 (and $x454 $x604)))
 (let ((?x841 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x499 (bvuge ?x841 (_ bv1 32))))
 (let ((?x20 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x20 (_ bv0 32))))
 (let (($x87 (and $x423 $x499)))
 (let ((?x158 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x686 (= ?x158 (_ bv0 32))))
 (let (($x711 (and $x686 $x87)))
 (let ((?x834 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x441 (= ?x834 (_ bv0 32))))
 (let (($x710 (and $x441 $x711)))
 (let (($x690 (and $x710 $x55)))
 (let ((?x467 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x679 (= ?x467 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x425 (bvuge ?x834 (_ bv1 32))))
 (let (($x255 (=> $x425 $x679)))
 (let (($x828 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x429 (= $x425 $x828)))
 (let (($x333 (= false false)))
 (let (($x637 (=> $x441 $x333)))
 (let (($x705 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x791 (= $x441 $x705)))
 (let (($x889 (and $x791 $x637)))
 (let (($x366 (and $x889 $x429)))
 (let (($x305 (and $x366 $x255)))
 (let (($x671 (and $x305 $x690)))
 (let ((?x285 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x518 (= ?x285 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x742 (bvuge ?x158 (_ bv1 32))))
 (let (($x157 (=> $x742 $x518)))
 (let (($x713 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x522 (= $x742 $x713)))
 (let (($x81 (=> $x686 $x333)))
 (let (($x257 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x815 (= $x686 $x257)))
 (let (($x806 (and $x815 $x81)))
 (let (($x450 (and $x806 $x522)))
 (let (($x794 (and $x450 $x157)))
 (let (($x150 (and $x794 $x671)))
 (let ((?x636 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x26 (= ?x636 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x884 (bvuge ?x20 (_ bv1 32))))
 (let (($x655 (=> $x884 $x26)))
 (let (($x717 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x716 (= $x884 $x717)))
 (let (($x503 (=> $x423 $x333)))
 (let (($x269 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x609 (= $x423 $x269)))
 (let (($x535 (and $x609 $x503)))
 (let (($x116 (and $x535 $x716)))
 (let (($x97 (and $x116 $x655)))
 (let (($x127 (and $x97 $x150)))
 (let (($x827 (= ?x639 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x171 (=> $x499 $x827)))
 (let (($x358 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x340 (= $x499 $x358)))
 (let (($x480 (= ?x841 (_ bv0 32))))
 (let (($x613 (=> $x480 $x333)))
 (let (($x554 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x320 (= $x480 $x554)))
 (let (($x74 (and $x320 $x613)))
 (let (($x797 (and $x74 $x340)))
 (let (($x195 (and $x797 $x171)))
 (let (($x200 (and $x195 $x127)))
 (let (($x740 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x643 (and $x740 $x200)))
 (let (($x681 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x194 (and $x681 $x643)))
 (let (($x796 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x733 (and $x796 $x194)))
 (let (($x29 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x136 (and $x29 $x733)))
 (let (($x523 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x236 (and $x523 $x136)))
 (let (($x590 (and $x333 $x236)))
 (let (($x693 (= ?x467 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x430 (and $x693 $x590)))
 (let (($x684 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x795 (and $x684 $x430)))
 (let (($x533 (and $x333 $x795)))
 (let (($x381 (= ?x285 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x824 (and $x381 $x533)))
 (let (($x638 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x202 (and $x638 $x824)))
 (let (($x573 (and $x333 $x202)))
 (let (($x259 (= ?x636 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x453 (and $x259 $x573)))
 (let (($x248 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x420 (and $x248 $x453)))
 (let (($x385 (and $x333 $x420)))
 (let (($x631 (= ?x639 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x783 (and $x631 $x385)))
 (let (($x339 (bvugt ?x361 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x753 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x545)))
 (let (($x186 (=> (bvule ?x361 (bvsub (bvadd ?x361 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x753 $x339)))))))
 (let (($x35 (bvugt ?x98 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x580 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x493)))
 (let (($x297 (=> (bvule ?x98 (bvsub (bvadd ?x98 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x580 $x35)))))))
 (let (($x614 (bvugt ?x602 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x741 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x442)))
 (let (($x153 (=> (bvule ?x602 (bvsub (bvadd ?x602 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x741 $x614)))))))
 (let (($x296 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x332 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x572 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x332)))
 (let (($x603 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x572 $x296)))))))
 (let (($x837 (and $x603 $x153)))
 (let (($x646 (and $x837 $x297)))
 (let (($x401 (and $x646 $x186)))
 (let (($x328 (and $x401 $x783)))
 (let (($x475 (=> $x328 $x658)))
 (not $x475)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x634 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x141 (concat ?x634 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x35 (bvadd ?x27 (_ bv3 32))))
 (let ((?x135 (concat (select input.dst.llvm-mem ?x35) (concat ?x278 ?x141))))
 (let ((?x460 (bvmul (_ bv4294967295 32) ?x135)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x391 (concat ?x220 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x751 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x538 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x339 (bvadd ?x538 (_ bv3 32))))
 (let ((?x568 (concat (select input.dst.llvm-mem ?x339) (concat ?x751 ?x391))))
 (let ((?x727 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x628 (concat ?x727 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x529 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x614 (bvadd ?x529 (_ bv3 32))))
 (let ((?x254 (concat (select input.dst.llvm-mem ?x614) (concat ?x689 ?x628))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x804 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x143)))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x804)))
 (let ((?x659 (bvadd (bvadd (bvadd ?x459 ?x254) ?x568) ?x460)))
 (let (($x50 (= (_ bv0 32) ?x659)))
 (let (($x362 (= $x50 true)))
 (let (($x635 (= $x362 true)))
 (let ((?x406 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x720 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x500 (concat ?x179 (concat ?x720 (concat ?x30 ?x406)))))
 (let (($x126 (= ?x500 input.dst.llvm-%m)))
 (let (($x789 (= $x126 true)))
 (let (($x624 (= $x789 true)))
 (let (($x611 (= input.dst.llvm-%m ?x500)))
 (let ((?x405 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x145 (= (_ bv0 32) ?x405)))
 (let ((?x379 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x557 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x379)))
 (let (($x830 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x571 (and $x830 $x557)))
 (let (($x471 (and $x571 $x145)))
 (let (($x809 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x809 $x471)))
 (let (($x142 (and $x122 $x611)))
 (let (($x703 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x755 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv1 32))) (select input.dst.llvm-mem ?x755))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv2 32))) ?x225))))
 (let ((?x464 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (bvuge ?x464 (_ bv1 32))))
 (=> $x490 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x513))))))))
 ))
 (let (($x826 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x451 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (bvuge ?x464 (_ bv1 32))))
 (= $x490 (bvuge ?x451 (_ bv1 32)))))))
 ))
 (let (($x673 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x467 (= false false)))
 (let ((?x464 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x464 (_ bv0 32))))
 (=> $x356 $x467)))))
 ))
 (let (($x803 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x464 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x464 (_ bv0 32))))
 (= $x356 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x612 (and $x803 $x673)))
 (let (($x512 (and $x612 $x826)))
 (let (($x212 (and $x512 $x703)))
 (let (($x594 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x537 (= (bvand ?x538 (_ bv4294967292 32)) ?x538)))
 (let (($x219 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x538 (bvsub ?x538 (_ bv4 32))) (bvult ?x538 (bvsub ?x538 (_ bv4 32))))))
 (let (($x394 (and true $x219)))
 (let (($x173 (= (bvand ?x529 (_ bv4294967292 32)) ?x529)))
 (let (($x343 (and $x173 $x394)))
 (let (($x48 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv8 32))) (bvult ?x27 (bvsub ?x27 (_ bv8 32))))))
 (let (($x209 (and (and (and true $x48) $x343) $x537)))
 (let (($x850 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x586 (and true $x850)))
 (let (($x528 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x104 (and $x528 $x586)))
 (let (($x347 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x529 (bvsub ?x529 (_ bv12 32))) (bvult ?x529 (bvsub ?x529 (_ bv12 32))))))
 (let (($x575 (and (and (and true $x528) $x347) $x104)))
 (let (($x761 (and (and (and (and $x575 $x209) $x594) $x212) $x142)))
 (let (($x221 (= $x761 true)))
 (let (($x768 (= $x221 true)))
 (let (($x771 (= $x768 true)))
 (let (($x489 (= $x575 true)))
 (let (($x752 (= $x489 true)))
 (let (($x184 (= $x752 true)))
 (let (($x240 (and $x209 $x594)))
 (let (($x354 (= $x240 true)))
 (let (($x651 (= $x354 true)))
 (let (($x392 (= $x651 true)))
 (let (($x66 (and $x392 $x184)))
 (let (($x351 (and $x66 $x771)))
 (let (($x718 (and $x351 $x624)))
 (let ((?x522 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (= ?x522 (_ bv0 32))))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x710 (_ bv0 32))))
 (let (($x314 (and $x85 $x450)))
 (let ((?x561 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x561 (_ bv0 32))))
 (let (($x851 (and $x316 $x314)))
 (let ((?x287 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (= ?x287 (_ bv0 32))))
 (let (($x304 (and $x891 $x851)))
 (let (($x465 (and $x304 $x718)))
 (let ((?x503 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x283 (= ?x503 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x486 (bvuge ?x287 (_ bv1 32))))
 (let (($x792 (=> $x486 $x283)))
 (let (($x124 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x40 (= $x486 $x124)))
 (let (($x467 (= false false)))
 (let (($x318 (=> $x891 $x467)))
 (let (($x327 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x510 (= $x891 $x327)))
 (let (($x21 (and $x510 $x318)))
 (let (($x849 (and $x21 $x40)))
 (let (($x178 (and $x849 $x792)))
 (let (($x31 (and $x178 $x465)))
 (let ((?x340 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x233 (= ?x340 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x526 (bvuge ?x561 (_ bv1 32))))
 (let (($x514 (=> $x526 $x233)))
 (let (($x138 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x360 (= $x526 $x138)))
 (let (($x6 (=> $x316 $x467)))
 (let (($x700 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x674 (= $x316 $x700)))
 (let (($x517 (and $x674 $x6)))
 (let (($x410 (and $x517 $x360)))
 (let (($x64 (and $x410 $x514)))
 (let (($x823 (and $x64 $x31)))
 (let ((?x740 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x664 (= ?x740 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x271 (bvuge ?x710 (_ bv1 32))))
 (let (($x275 (=> $x271 $x664)))
 (let (($x452 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x19 (= $x271 $x452)))
 (let (($x656 (=> $x85 $x467)))
 (let (($x87 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x105 (= $x85 $x87)))
 (let (($x676 (and $x105 $x656)))
 (let (($x581 (and $x676 $x19)))
 (let (($x237 (and $x581 $x275)))
 (let (($x816 (and $x237 $x823)))
 (let ((?x293 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x889 (= ?x293 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x705 (bvuge ?x522 (_ bv1 32))))
 (let (($x425 (=> $x705 $x889)))
 (let (($x721 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x791 (= $x705 $x721)))
 (let (($x518 (=> $x450 $x467)))
 (let (($x742 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x109 (= $x450 $x742)))
 (let (($x157 (and $x109 $x518)))
 (let (($x637 (and $x157 $x791)))
 (let (($x828 (and $x637 $x425)))
 (let (($x438 (and $x828 $x816)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x294 (and $x158 $x438)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x300 (and $x97 $x294)))
 (let (($x26 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x622 (and $x26 $x300)))
 (let (($x116 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x359 (and $x116 $x622)))
 (let (($x717 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x688 (and $x717 $x359)))
 (let (($x428 (and $x467 $x688)))
 (let (($x535 (= ?x503 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x769 (and $x535 $x428)))
 (let (($x827 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x290 (and $x827 $x769)))
 (let (($x226 (and $x467 $x290)))
 (let (($x797 (= ?x340 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x67 (and $x797 $x226)))
 (let (($x480 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x820 (and $x480 $x67)))
 (let (($x835 (and $x467 $x820)))
 (let (($x247 (= ?x740 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x887 (and $x247 $x835)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x424 (and $x693 $x887)))
 (let (($x299 (and $x467 $x424)))
 (let (($x684 (= ?x293 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x436 (and $x684 $x299)))
 (let (($x71 (bvugt ?x538 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x509 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x339)))
 (let (($x564 (=> (bvule ?x538 (bvsub (bvadd ?x538 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x509 $x71)))))))
 (let (($x589 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x782 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x589)))))))
 (let (($x89 (bvugt ?x529 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x421 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x614)))
 (let (($x98 (=> (bvule ?x529 (bvsub (bvadd ?x529 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x421 $x89)))))))
 (let (($x572 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x558 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x558)))
 (let (($x24 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x572)))))))
 (let (($x281 (and $x24 $x98)))
 (let (($x251 (and $x281 $x782)))
 (let (($x256 (and $x251 $x564)))
 (let (($x185 (and $x256 $x436)))
 (let (($x790 (=> $x185 $x635)))
 (not $x790)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x634 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x141 (concat ?x634 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x27 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x35 (bvadd ?x27 (_ bv3 32))))
 (let ((?x135 (concat (select input.dst.llvm-mem ?x35) (concat ?x278 ?x141))))
 (let ((?x460 (bvmul (_ bv4294967295 32) ?x135)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x391 (concat ?x220 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x751 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x538 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x339 (bvadd ?x538 (_ bv3 32))))
 (let ((?x568 (concat (select input.dst.llvm-mem ?x339) (concat ?x751 ?x391))))
 (let ((?x727 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x628 (concat ?x727 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x529 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x614 (bvadd ?x529 (_ bv3 32))))
 (let ((?x254 (concat (select input.dst.llvm-mem ?x614) (concat ?x689 ?x628))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x804 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x143)))
 (let ((?x459 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x804)))
 (let ((?x659 (bvadd (bvadd (bvadd ?x459 ?x254) ?x568) ?x460)))
 (let (($x50 (= (_ bv0 32) ?x659)))
 (let (($x362 (= $x50 true)))
 (let (($x635 (= $x362 true)))
 (let ((?x406 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x720 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x500 (concat ?x179 (concat ?x720 (concat ?x30 ?x406)))))
 (let (($x126 (= ?x500 input.dst.llvm-%m)))
 (let (($x789 (= $x126 true)))
 (let (($x624 (= $x789 true)))
 (let (($x611 (= input.dst.llvm-%m ?x500)))
 (let ((?x405 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x145 (= (_ bv0 32) ?x405)))
 (let ((?x379 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x557 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x379)))
 (let (($x830 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x571 (and $x830 $x557)))
 (let (($x471 (and $x571 $x145)))
 (let (($x809 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x809 $x471)))
 (let (($x142 (and $x122 $x611)))
 (let (($x703 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x755 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv1 32))) (select input.dst.llvm-mem ?x755))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv2 32))) ?x225))))
 (let ((?x464 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (bvuge ?x464 (_ bv1 32))))
 (=> $x490 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x513))))))))
 ))
 (let (($x826 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x451 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x464 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x490 (bvuge ?x464 (_ bv1 32))))
 (= $x490 (bvuge ?x451 (_ bv1 32)))))))
 ))
 (let (($x673 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x467 (= false false)))
 (let ((?x464 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x464 (_ bv0 32))))
 (=> $x356 $x467)))))
 ))
 (let (($x803 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x464 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x356 (= ?x464 (_ bv0 32))))
 (= $x356 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x612 (and $x803 $x673)))
 (let (($x512 (and $x612 $x826)))
 (let (($x212 (and $x512 $x703)))
 (let (($x594 (= (bvand ?x27 (_ bv4294967292 32)) ?x27)))
 (let (($x537 (= (bvand ?x538 (_ bv4294967292 32)) ?x538)))
 (let (($x219 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x538 (bvsub ?x538 (_ bv4 32))) (bvult ?x538 (bvsub ?x538 (_ bv4 32))))))
 (let (($x394 (and true $x219)))
 (let (($x173 (= (bvand ?x529 (_ bv4294967292 32)) ?x529)))
 (let (($x343 (and $x173 $x394)))
 (let (($x48 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x27 (bvsub ?x27 (_ bv8 32))) (bvult ?x27 (bvsub ?x27 (_ bv8 32))))))
 (let (($x209 (and (and (and true $x48) $x343) $x537)))
 (let (($x850 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x586 (and true $x850)))
 (let (($x528 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x104 (and $x528 $x586)))
 (let (($x347 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x529 (bvsub ?x529 (_ bv12 32))) (bvult ?x529 (bvsub ?x529 (_ bv12 32))))))
 (let (($x575 (and (and (and true $x528) $x347) $x104)))
 (let (($x761 (and (and (and (and $x575 $x209) $x594) $x212) $x142)))
 (let (($x221 (= $x761 true)))
 (let (($x768 (= $x221 true)))
 (let (($x771 (= $x768 true)))
 (let (($x489 (= $x575 true)))
 (let (($x752 (= $x489 true)))
 (let (($x184 (= $x752 true)))
 (let (($x240 (and $x209 $x594)))
 (let (($x354 (= $x240 true)))
 (let (($x651 (= $x354 true)))
 (let (($x392 (= $x651 true)))
 (let (($x66 (and $x392 $x184)))
 (let (($x351 (and $x66 $x771)))
 (let (($x718 (and $x351 $x624)))
 (let ((?x522 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x450 (= ?x522 (_ bv0 32))))
 (let ((?x710 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (= ?x710 (_ bv0 32))))
 (let (($x314 (and $x85 $x450)))
 (let ((?x561 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x561 (_ bv0 32))))
 (let (($x851 (and $x316 $x314)))
 (let ((?x287 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x891 (= ?x287 (_ bv0 32))))
 (let (($x304 (and $x891 $x851)))
 (let (($x465 (and $x304 $x718)))
 (let ((?x503 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x283 (= ?x503 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x486 (bvuge ?x287 (_ bv1 32))))
 (let (($x792 (=> $x486 $x283)))
 (let (($x124 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x40 (= $x486 $x124)))
 (let (($x467 (= false false)))
 (let (($x318 (=> $x891 $x467)))
 (let (($x327 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x510 (= $x891 $x327)))
 (let (($x21 (and $x510 $x318)))
 (let (($x849 (and $x21 $x40)))
 (let (($x178 (and $x849 $x792)))
 (let (($x31 (and $x178 $x465)))
 (let ((?x340 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x233 (= ?x340 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x526 (bvuge ?x561 (_ bv1 32))))
 (let (($x514 (=> $x526 $x233)))
 (let (($x138 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x360 (= $x526 $x138)))
 (let (($x6 (=> $x316 $x467)))
 (let (($x700 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x674 (= $x316 $x700)))
 (let (($x517 (and $x674 $x6)))
 (let (($x410 (and $x517 $x360)))
 (let (($x64 (and $x410 $x514)))
 (let (($x823 (and $x64 $x31)))
 (let ((?x740 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x664 (= ?x740 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x271 (bvuge ?x710 (_ bv1 32))))
 (let (($x275 (=> $x271 $x664)))
 (let (($x452 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x19 (= $x271 $x452)))
 (let (($x656 (=> $x85 $x467)))
 (let (($x87 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x105 (= $x85 $x87)))
 (let (($x676 (and $x105 $x656)))
 (let (($x581 (and $x676 $x19)))
 (let (($x237 (and $x581 $x275)))
 (let (($x816 (and $x237 $x823)))
 (let ((?x293 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x889 (= ?x293 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x705 (bvuge ?x522 (_ bv1 32))))
 (let (($x425 (=> $x705 $x889)))
 (let (($x721 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x791 (= $x705 $x721)))
 (let (($x518 (=> $x450 $x467)))
 (let (($x742 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x109 (= $x450 $x742)))
 (let (($x157 (and $x109 $x518)))
 (let (($x637 (and $x157 $x791)))
 (let (($x828 (and $x637 $x425)))
 (let (($x438 (and $x828 $x816)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x294 (and $x158 $x438)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x300 (and $x97 $x294)))
 (let (($x26 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x622 (and $x26 $x300)))
 (let (($x116 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x359 (and $x116 $x622)))
 (let (($x717 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x688 (and $x717 $x359)))
 (let (($x428 (and $x467 $x688)))
 (let (($x535 (= ?x503 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x769 (and $x535 $x428)))
 (let (($x827 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x290 (and $x827 $x769)))
 (let (($x226 (and $x467 $x290)))
 (let (($x797 (= ?x340 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x67 (and $x797 $x226)))
 (let (($x480 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x820 (and $x480 $x67)))
 (let (($x835 (and $x467 $x820)))
 (let (($x247 (= ?x740 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x887 (and $x247 $x835)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x424 (and $x693 $x887)))
 (let (($x299 (and $x467 $x424)))
 (let (($x684 (= ?x293 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x436 (and $x684 $x299)))
 (let (($x71 (bvugt ?x538 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x509 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x339)))
 (let (($x564 (=> (bvule ?x538 (bvsub (bvadd ?x538 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x509 $x71)))))))
 (let (($x589 (bvugt ?x27 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x309 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x35)))
 (let (($x782 (=> (bvule ?x27 (bvsub (bvadd ?x27 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x309 $x589)))))))
 (let (($x89 (bvugt ?x529 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x421 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x614)))
 (let (($x98 (=> (bvule ?x529 (bvsub (bvadd ?x529 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x421 $x89)))))))
 (let (($x572 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x558 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x332 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x558)))
 (let (($x24 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x332 $x572)))))))
 (let (($x281 (and $x24 $x98)))
 (let (($x251 (and $x281 $x782)))
 (let (($x256 (and $x251 $x564)))
 (let (($x185 (and $x256 $x436)))
 (let (($x790 (=> $x185 $x635)))
 (not $x790)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 242 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x360 (_ bv1 32))))
 (let (($x410 (= ?x360 (_ bv0 32))))
 (let (($x650 (or $x410 $x327)))
 (let ((?x304 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x304 (_ bv1 32))))
 (let (($x708 (and $x164 $x650)))
 (let (($x608 (= ?x304 (_ bv0 32))))
 (let (($x534 (and $x608 $x650)))
 (let (($x132 (or $x534 $x708)))
 (let ((?x354 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x354 (_ bv1 32))))
 (let (($x759 (and $x347 $x132)))
 (let (($x651 (= ?x354 (_ bv0 32))))
 (let (($x818 (and $x651 $x132)))
 (let (($x387 (or $x818 $x759)))
 (let ((?x175 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x175 (_ bv1 32))))
 (let (($x578 (and $x451 $x387)))
 (let (($x888 (= ?x175 (_ bv0 32))))
 (let (($x626 (and $x888 $x387)))
 (let (($x267 (or $x626 $x578)))
 (let (($x368 (or false $x267)))
 (let (($x798 (= $x368 true)))
 (let (($x437 (= $x798 true)))
 (let ((?x367 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x722 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x404 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x404 (concat ?x722 (concat ?x374 ?x367)))))
 (let (($x99 (= ?x228 input.dst.llvm-%m)))
 (let (($x726 (= $x99 true)))
 (let (($x810 (= $x726 true)))
 (let ((?x819 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x840 (= (_ bv0 32) ?x819)))
 (let ((?x150 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x671 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x530 (and $x671 $x127)))
 (let (($x842 (and $x530 $x840)))
 (let (($x690 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x690 $x842)))
 (let (($x698 (= $x276 true)))
 (let (($x822 (= $x698 true)))
 (let (($x440 (= $x822 true)))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x508 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv1 32))) (select input.dst.llvm-mem ?x508))))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv2 32))) ?x365))))
 (let ((?x423 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x423 (_ bv1 32))))
 (=> $x285 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x648))))))))
 ))
 (let (($x200 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x423 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x423 (_ bv1 32))))
 (= $x285 (bvuge ?x171 (_ bv1 32)))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x503 (= false false)))
 (let ((?x423 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x423 (_ bv0 32))))
 (=> $x333 $x503)))))
 ))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x423 (_ bv0 32))))
 (= $x333 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x523 (and $x554 $x154)))
 (let (($x643 (and $x523 $x200)))
 (let (($x181 (and $x643 $x463)))
 (let (($x604 (= $x181 true)))
 (let (($x454 (= $x604 true)))
 (let (($x598 (= $x454 true)))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x720 (and true $x211)))
 (let (($x830 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x579 (and $x830 $x720)))
 (let ((?x602 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x379 (bvsub ?x602 (_ bv12 32))))
 (let (($x145 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x602 ?x379) (bvult ?x602 ?x379))))
 (let (($x585 (and (and (and true $x830) $x145) $x579)))
 (let (($x92 (= $x585 true)))
 (let (($x500 (= $x92 true)))
 (let (($x611 (= $x500 true)))
 (let ((?x580 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x599 (= (bvand ?x580 (_ bv4294967292 32)) ?x580)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x427 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x738 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x793 (and true $x738)))
 (let (($x236 (= (bvand ?x602 (_ bv4294967292 32)) ?x602)))
 (let (($x665 (and $x236 $x793)))
 (let (($x826 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x580 (bvsub ?x580 (_ bv8 32))) (bvult ?x580 (bvsub ?x580 (_ bv8 32))))))
 (let (($x513 (and (and (and true $x826) $x665) $x427)))
 (let (($x703 (and $x513 $x599)))
 (let (($x212 (= $x703 true)))
 (let (($x484 (= $x212 true)))
 (let (($x301 (= $x484 true)))
 (let (($x142 (and $x301 $x611)))
 (let (($x758 (and $x142 $x598)))
 (let (($x567 (and $x758 $x440)))
 (let (($x376 (and $x567 $x810)))
 (let ((?x656 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x803 (= ?x656 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x62 (=> $x451 $x803)))
 (let (($x469 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x128 (= $x451 $x469)))
 (let (($x503 (= false false)))
 (let (($x539 (=> $x888 $x503)))
 (let (($x184 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x418 (= $x888 $x184)))
 (let (($x464 (and $x418 $x539)))
 (let (($x12 (and $x464 $x128)))
 (let (($x673 (and $x12 $x62)))
 (let (($x382 (and $x673 $x376)))
 (let ((?x791 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x814 (= ?x791 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x432 (=> $x347 $x814)))
 (let (($x280 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x324 (= $x347 $x280)))
 (let (($x669 (=> $x651 $x503)))
 (let (($x594 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x392 (= $x651 $x594)))
 (let (($x528 (and $x392 $x669)))
 (let (($x22 (and $x528 $x324)))
 (let (($x699 (and $x22 $x432)))
 (let (($x747 (and $x699 $x382)))
 (let ((?x158 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x652 (= ?x158 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x219 (=> $x164 $x652)))
 (let (($x173 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x743 (= $x164 $x173)))
 (let (($x577 (=> $x608 $x503)))
 (let (($x314 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x213 (= $x608 $x314)))
 (let (($x525 (and $x213 $x577)))
 (let (($x167 (and $x525 $x743)))
 (let (($x394 (and $x167 $x219)))
 (let (($x658 (and $x394 $x747)))
 (let ((?x335 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x21 (= ?x335 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x486 (=> $x327 $x21)))
 (let (($x487 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x510 (= $x327 $x487)))
 (let (($x233 (=> $x410 $x503)))
 (let (($x526 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x152 (= $x410 $x526)))
 (let (($x514 (and $x152 $x233)))
 (let (($x318 (and $x514 $x510)))
 (let (($x124 (and $x318 $x486)))
 (let (($x79 (and $x124 $x658)))
 (let (($x561 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x475 (and $x561 $x79)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x839 (and $x237 $x475)))
 (let (($x664 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x728 (and $x664 $x839)))
 (let (($x581 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x885 (and $x581 $x728)))
 (let (($x452 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x53 (and $x452 $x885)))
 (let (($x390 (and $x503 $x53)))
 (let (($x676 (= ?x656 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x119 (and $x676 $x390)))
 (let (($x889 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x501 (and $x889 $x119)))
 (let (($x411 (and $x503 $x501)))
 (let (($x637 (= ?x791 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x447 (and $x637 $x411)))
 (let (($x450 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x661 (and $x450 $x447)))
 (let (($x369 (and $x503 $x661)))
 (let (($x713 (= ?x158 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x232 (and $x713 $x369)))
 (let (($x535 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x86 (and $x535 $x232)))
 (let (($x23 (and $x503 $x86)))
 (let (($x827 (= ?x335 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x166 (and $x827 $x23)))
 (let (($x186 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x502 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x35 (_ bv3 32)))))
 (let (($x684 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x502 $x186)))))))
 (let (($x297 (bvugt ?x580 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x580 (_ bv3 32)))))
 (let (($x753 (=> (bvule ?x580 (bvsub (bvadd ?x580 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x297)))))))
 (let (($x153 (bvugt ?x602 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x602 (_ bv3 32)))))
 (let (($x493 (=> (bvule ?x602 (bvsub (bvadd ?x602 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x370 $x153)))))))
 (let (($x298 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x802 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x741 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x802 $x298)))))))
 (let (($x461 (and $x741 $x493)))
 (let (($x361 (and $x461 $x753)))
 (let (($x639 (and $x361 $x684)))
 (let (($x93 (and $x639 $x166)))
 (let (($x177 (=> $x93 $x437)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L1%3%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L1%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L1%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L1%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L1%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L1%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L1%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L1%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L1%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L1%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L1%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x360 (ite (input.spec-%var-m-0.0.1 (_ bv3 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x360 (_ bv1 32))))
 (let (($x410 (= ?x360 (_ bv0 32))))
 (let (($x650 (or $x410 $x327)))
 (let ((?x304 (ite (input.spec-%var-m-0.0.1 (_ bv2 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x304 (_ bv1 32))))
 (let (($x708 (and $x164 $x650)))
 (let (($x608 (= ?x304 (_ bv0 32))))
 (let (($x534 (and $x608 $x650)))
 (let (($x132 (or $x534 $x708)))
 (let ((?x354 (ite (input.spec-%var-m-0.0.1 (_ bv1 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x354 (_ bv1 32))))
 (let (($x759 (and $x347 $x132)))
 (let (($x651 (= ?x354 (_ bv0 32))))
 (let (($x818 (and $x651 $x132)))
 (let (($x387 (or $x818 $x759)))
 (let ((?x175 (ite (input.spec-%var-m-0.0.1 (_ bv0 32)) (_ bv1 32) (_ bv0 32))))
 (let (($x451 (bvuge ?x175 (_ bv1 32))))
 (let (($x578 (and $x451 $x387)))
 (let (($x888 (= ?x175 (_ bv0 32))))
 (let (($x626 (and $x888 $x387)))
 (let (($x267 (or $x626 $x578)))
 (let (($x368 (or false $x267)))
 (let (($x798 (= $x368 true)))
 (let (($x437 (= $x798 true)))
 (let ((?x367 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x722 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x404 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x404 (concat ?x722 (concat ?x374 ?x367)))))
 (let (($x99 (= ?x228 input.dst.llvm-%m)))
 (let (($x726 (= $x99 true)))
 (let (($x810 (= $x726 true)))
 (let ((?x819 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x840 (= (_ bv0 32) ?x819)))
 (let ((?x150 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x671 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x530 (and $x671 $x127)))
 (let (($x842 (and $x530 $x840)))
 (let (($x690 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x690 $x842)))
 (let (($x698 (= $x276 true)))
 (let (($x822 (= $x698 true)))
 (let (($x440 (= $x822 true)))
 (let (($x463 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x508 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv1 32))) (select input.dst.llvm-mem ?x508))))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv2 32))) ?x365))))
 (let ((?x423 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x423 (_ bv1 32))))
 (=> $x285 (= (input.spec-%var-m-0.1.1 Lambda1Var) ?x648))))))))
 ))
 (let (($x200 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x171 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x423 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x423 (_ bv1 32))))
 (= $x285 (bvuge ?x171 (_ bv1 32)))))))
 ))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x503 (= false false)))
 (let ((?x423 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x423 (_ bv0 32))))
 (=> $x333 $x503)))))
 ))
 (let (($x554 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x423 (ite (input.spec-%var-m-0.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (= ?x423 (_ bv0 32))))
 (= $x333 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv100 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x523 (and $x554 $x154)))
 (let (($x643 (and $x523 $x200)))
 (let (($x181 (and $x643 $x463)))
 (let (($x604 (= $x181 true)))
 (let (($x454 (= $x604 true)))
 (let (($x598 (= $x454 true)))
 (let (($x211 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x720 (and true $x211)))
 (let (($x830 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x579 (and $x830 $x720)))
 (let ((?x602 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x379 (bvsub ?x602 (_ bv12 32))))
 (let (($x145 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x602 ?x379) (bvult ?x602 ?x379))))
 (let (($x585 (and (and (and true $x830) $x145) $x579)))
 (let (($x92 (= $x585 true)))
 (let (($x500 (= $x92 true)))
 (let (($x611 (= $x500 true)))
 (let ((?x580 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x599 (= (bvand ?x580 (_ bv4294967292 32)) ?x580)))
 (let ((?x35 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x427 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x738 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 (_ bv4 32))) (bvult ?x35 (bvsub ?x35 (_ bv4 32))))))
 (let (($x793 (and true $x738)))
 (let (($x236 (= (bvand ?x602 (_ bv4294967292 32)) ?x602)))
 (let (($x665 (and $x236 $x793)))
 (let (($x826 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x580 (bvsub ?x580 (_ bv8 32))) (bvult ?x580 (bvsub ?x580 (_ bv8 32))))))
 (let (($x513 (and (and (and true $x826) $x665) $x427)))
 (let (($x703 (and $x513 $x599)))
 (let (($x212 (= $x703 true)))
 (let (($x484 (= $x212 true)))
 (let (($x301 (= $x484 true)))
 (let (($x142 (and $x301 $x611)))
 (let (($x758 (and $x142 $x598)))
 (let (($x567 (and $x758 $x440)))
 (let (($x376 (and $x567 $x810)))
 (let ((?x656 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x803 (= ?x656 input.spec-%tmpvar-1.L1%3%d.2)))
 (let (($x62 (=> $x451 $x803)))
 (let (($x469 (bvuge input.spec-%tmpvar-1.L1%3%d.0 (_ bv1 32))))
 (let (($x128 (= $x451 $x469)))
 (let (($x503 (= false false)))
 (let (($x539 (=> $x888 $x503)))
 (let (($x184 (= input.spec-%tmpvar-1.L1%3%d.0 (_ bv0 32))))
 (let (($x418 (= $x888 $x184)))
 (let (($x464 (and $x418 $x539)))
 (let (($x12 (and $x464 $x128)))
 (let (($x673 (and $x12 $x62)))
 (let (($x382 (and $x673 $x376)))
 (let ((?x791 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x814 (= ?x791 input.spec-%tmpvar-5.L1%12%d.2)))
 (let (($x432 (=> $x347 $x814)))
 (let (($x280 (bvuge input.spec-%tmpvar-5.L1%12%d.0 (_ bv1 32))))
 (let (($x324 (= $x347 $x280)))
 (let (($x669 (=> $x651 $x503)))
 (let (($x594 (= input.spec-%tmpvar-5.L1%12%d.0 (_ bv0 32))))
 (let (($x392 (= $x651 $x594)))
 (let (($x528 (and $x392 $x669)))
 (let (($x22 (and $x528 $x324)))
 (let (($x699 (and $x22 $x432)))
 (let (($x747 (and $x699 $x382)))
 (let ((?x158 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x652 (= ?x158 input.spec-%tmpvar-9.L1%21%d.2)))
 (let (($x219 (=> $x164 $x652)))
 (let (($x173 (bvuge input.spec-%tmpvar-9.L1%21%d.0 (_ bv1 32))))
 (let (($x743 (= $x164 $x173)))
 (let (($x577 (=> $x608 $x503)))
 (let (($x314 (= input.spec-%tmpvar-9.L1%21%d.0 (_ bv0 32))))
 (let (($x213 (= $x608 $x314)))
 (let (($x525 (and $x213 $x577)))
 (let (($x167 (and $x525 $x743)))
 (let (($x394 (and $x167 $x219)))
 (let (($x658 (and $x394 $x747)))
 (let ((?x335 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x21 (= ?x335 input.spec-%tmpvar-13.L1%30%d.2)))
 (let (($x486 (=> $x327 $x21)))
 (let (($x487 (bvuge input.spec-%tmpvar-13.L1%30%d.0 (_ bv1 32))))
 (let (($x510 (= $x327 $x487)))
 (let (($x233 (=> $x410 $x503)))
 (let (($x526 (= input.spec-%tmpvar-13.L1%30%d.0 (_ bv0 32))))
 (let (($x152 (= $x410 $x526)))
 (let (($x514 (and $x152 $x233)))
 (let (($x318 (and $x514 $x510)))
 (let (($x124 (and $x318 $x486)))
 (let (($x79 (and $x124 $x658)))
 (let (($x561 (= (_ bv0 32) input.spec-%tmpvar-0.L1%3%d)))
 (let (($x475 (and $x561 $x79)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-4.L1%12%d)))
 (let (($x839 (and $x237 $x475)))
 (let (($x664 (= (_ bv2 32) input.spec-%tmpvar-8.L1%21%d)))
 (let (($x728 (and $x664 $x839)))
 (let (($x581 (= (_ bv3 32) input.spec-%tmpvar-12.L1%30%d)))
 (let (($x885 (and $x581 $x728)))
 (let (($x452 (= (_ bv0 32) input.spec-%tmpvar-2.L1%9%bbentry)))
 (let (($x53 (and $x452 $x885)))
 (let (($x390 (and $x503 $x53)))
 (let (($x676 (= ?x656 input.spec-%var-val-0.L1%9%bbentry)))
 (let (($x119 (and $x676 $x390)))
 (let (($x889 (= (_ bv0 32) input.spec-%tmpvar-6.L1%18%bbentry)))
 (let (($x501 (and $x889 $x119)))
 (let (($x411 (and $x503 $x501)))
 (let (($x637 (= ?x791 input.spec-%var-val-1.L1%18%bbentry)))
 (let (($x447 (and $x637 $x411)))
 (let (($x450 (= (_ bv0 32) input.spec-%tmpvar-10.L1%27%bbentry)))
 (let (($x661 (and $x450 $x447)))
 (let (($x369 (and $x503 $x661)))
 (let (($x713 (= ?x158 input.spec-%var-val-2.L1%27%bbentry)))
 (let (($x232 (and $x713 $x369)))
 (let (($x535 (= (_ bv0 32) input.spec-%tmpvar-14.L1%36%bbentry)))
 (let (($x86 (and $x535 $x232)))
 (let (($x23 (and $x503 $x86)))
 (let (($x827 (= ?x335 input.spec-%var-val-3.L1%36%bbentry)))
 (let (($x166 (and $x827 $x23)))
 (let (($x186 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x502 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x35 (_ bv3 32)))))
 (let (($x684 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x502 $x186)))))))
 (let (($x297 (bvugt ?x580 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x580 (_ bv3 32)))))
 (let (($x753 (=> (bvule ?x580 (bvsub (bvadd ?x580 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x94 $x297)))))))
 (let (($x153 (bvugt ?x602 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x602 (_ bv3 32)))))
 (let (($x493 (=> (bvule ?x602 (bvsub (bvadd ?x602 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x370 $x153)))))))
 (let (($x298 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x802 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x741 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x802 $x298)))))))
 (let (($x461 (and $x741 $x493)))
 (let (($x361 (and $x461 $x753)))
 (let (($x639 (and $x361 $x684)))
 (let (($x93 (and $x639 $x166)))
 (let (($x177 (=> $x93 $x437)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 229 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2287210/query
